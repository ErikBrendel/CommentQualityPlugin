# id;timestamp;commentText;codeText;commentWords;codeWords
FsStateBackend -> public FsStateBackend( 			URI checkpointDataUri, 			int fileStateSizeThreshold, 			boolean asynchronousSnapshots);1508951050;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files (-1 for default value)._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(_			URI checkpointDataUri,_			int fileStateSizeThreshold,_			boolean asynchronousSnapshots) {__		this(checkpointDataUri, null, fileStateSizeThreshold,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,1,for,default,value,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDataUri, 			int fileStateSizeThreshold, 			boolean asynchronousSnapshots);1509045960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files (-1 for default value)._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(_			URI checkpointDataUri,_			int fileStateSizeThreshold,_			boolean asynchronousSnapshots) {__		this(checkpointDataUri, null, fileStateSizeThreshold,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,1,for,default,value,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDataUri, 			int fileStateSizeThreshold, 			boolean asynchronousSnapshots);1515600846;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files (-1 for default value)._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(_			URI checkpointDataUri,_			int fileStateSizeThreshold,_			boolean asynchronousSnapshots) {__		this(checkpointDataUri, null, fileStateSizeThreshold,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,1,for,default,value,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDataUri, 			int fileStateSizeThreshold, 			boolean asynchronousSnapshots);1517924641;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files (-1 for default value)._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(_			URI checkpointDataUri,_			int fileStateSizeThreshold,_			boolean asynchronousSnapshots) {__		this(checkpointDataUri, null, fileStateSizeThreshold,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,1,for,default,value,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDataUri, 			int fileStateSizeThreshold, 			boolean asynchronousSnapshots);1530638621;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files (-1 for default value)._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(_			URI checkpointDataUri,_			int fileStateSizeThreshold,_			boolean asynchronousSnapshots) {__		this(checkpointDataUri, null, fileStateSizeThreshold,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,1,for,default,value,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDataUri, 			int fileStateSizeThreshold, 			boolean asynchronousSnapshots);1530704629;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files (-1 for default value)._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(_			URI checkpointDataUri,_			int fileStateSizeThreshold,_			boolean asynchronousSnapshots) {__		this(checkpointDataUri, null, fileStateSizeThreshold,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,1,for,default,value,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDataUri, 			int fileStateSizeThreshold, 			boolean asynchronousSnapshots);1539939663;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files (-1 for default value)._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(_			URI checkpointDataUri,_			int fileStateSizeThreshold,_			boolean asynchronousSnapshots) {__		this(checkpointDataUri, null, fileStateSizeThreshold,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,1,for,default,value,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDataUri, 			int fileStateSizeThreshold, 			boolean asynchronousSnapshots);1550681446;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files (-1 for default value)._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(_			URI checkpointDataUri,_			int fileStateSizeThreshold,_			boolean asynchronousSnapshots) {__		this(checkpointDataUri, null, fileStateSizeThreshold,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,1,for,default,value,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDataUri, 			int fileStateSizeThreshold, 			boolean asynchronousSnapshots);1550863001;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files (-1 for default value)._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(_			URI checkpointDataUri,_			int fileStateSizeThreshold,_			boolean asynchronousSnapshots) {__		this(checkpointDataUri, null, fileStateSizeThreshold,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,1,for,default,value,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public Path getBasePath();1445247002;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1445849929;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1447461833;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1448126995;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1448560009;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1450718956;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1453721631;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1454939779;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1455222636;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1464608559;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1466716682;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1466716960;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1467707828;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1470847490;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1470909547;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1472464402;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1472680767;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1474462558;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1475571578;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1483656313;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1487264183;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1487350260;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1488534675;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1489497957;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1489501613;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1506954607;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> public Path getBasePath();1510579905;Gets the base directory where all state-containing files are stored._The job specific directory is created inside this directory.__@return The base directory.;public Path getBasePath() {_		return basePath__	};gets,the,base,directory,where,all,state,containing,files,are,stored,the,job,specific,directory,is,created,inside,this,directory,return,the,base,directory;public,path,get,base,path,return,base,path
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1445247002;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			synchronized (this) {_				if (!closed) {_					closed = true__					try {_						outStream.close()__						fs.delete(filePath, false)__						_						_						try {_							fs.delete(filePath.getParent(), false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream to " + filePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,synchronized,this,if,closed,closed,true,try,out,stream,close,fs,delete,file,path,false,try,fs,delete,file,path,get,parent,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,to,file,path,e
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1445849929;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			synchronized (this) {_				if (!closed) {_					closed = true__					try {_						outStream.close()__						fs.delete(filePath, false)___						_						try {_							fs.delete(filePath.getParent(), false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream to " + filePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,synchronized,this,if,closed,closed,true,try,out,stream,close,fs,delete,file,path,false,try,fs,delete,file,path,get,parent,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,to,file,path,e
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1447461833;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			synchronized (this) {_				if (!closed) {_					closed = true__					try {_						outStream.close()__						fs.delete(filePath, false)__						_						_						try {_							fs.delete(filePath.getParent(), false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream to " + filePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,synchronized,this,if,closed,closed,true,try,out,stream,close,fs,delete,file,path,false,try,fs,delete,file,path,get,parent,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,to,file,path,e
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1448126995;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			synchronized (this) {_				if (!closed) {_					closed = true__					try {_						outStream.close()__						fs.delete(filePath, false)___						_						try {_							fs.delete(filePath.getParent(), false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream to " + filePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,synchronized,this,if,closed,closed,true,try,out,stream,close,fs,delete,file,path,false,try,fs,delete,file,path,get,parent,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,to,file,path,e
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1448560009;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			synchronized (this) {_				if (!closed) {_					closed = true__					if (outStream != null) {_						try {_							outStream.close()__							fs.delete(statePath, false)__	_							_							try {_								fs.delete(basePath, false)__							} catch (IOException ignored) {}_						}_						catch (Exception e) {_							LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__						}_					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,synchronized,this,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1450718956;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true__				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1453721631;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true__				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1454939779;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true__				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1455222636;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true__				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1464608559;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true__				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1466716682;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true__				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1466716960;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true__				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1467707828;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true__				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsStateBackend -> FsCheckpointStateOutputStream -> @Override 		public void close();1470909547;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true__				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold);1508951050;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) {_		this(checkpointDataUri, null, fileStateSizeThreshold, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold);1509045960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) {_		this(checkpointDataUri, null, fileStateSizeThreshold, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold);1515600846;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) {_		this(checkpointDataUri, null, fileStateSizeThreshold, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold);1517924641;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) {_		this(checkpointDataUri, null, fileStateSizeThreshold, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold);1530638621;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) {_		this(checkpointDataUri, null, fileStateSizeThreshold, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold);1530704629;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) {_		this(checkpointDataUri, null, fileStateSizeThreshold, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold);1539939663;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) {_		this(checkpointDataUri, null, fileStateSizeThreshold, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold);1550681446;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) {_		this(checkpointDataUri, null, fileStateSizeThreshold, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold);1550863001;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) {_		this(checkpointDataUri, null, fileStateSizeThreshold, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,this,checkpoint,data,uri,null,file,state,size,threshold,ternary,boolean,undefined
FsStateBackend -> public boolean isInitialized();1445247002;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null_ _	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public boolean isInitialized();1445849929;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null__	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public boolean isInitialized();1447461833;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null_ _	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public boolean isInitialized();1448126995;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null__	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public boolean isInitialized();1448560009;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null__	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public boolean isInitialized();1450718956;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null__	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public boolean isInitialized();1453721631;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null__	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public boolean isInitialized();1454939779;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null__	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public boolean isInitialized();1455222636;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null__	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public boolean isInitialized();1464608559;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null__	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public boolean isInitialized();1466716682;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null__	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public boolean isInitialized();1466716960;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null__	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public boolean isInitialized();1467707828;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null__	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public boolean isInitialized();1470909547;Checks whether this state backend is initialized. Note that initialization does not carry_across serialization. After each serialization, the state backend needs to be initialized.__@return True, if the file state backend has been initialized, false otherwise.;public boolean isInitialized() {_		return filesystem != null && checkpointDirectory != null__	};checks,whether,this,state,backend,is,initialized,note,that,initialization,does,not,carry,across,serialization,after,each,serialization,the,state,backend,needs,to,be,initialized,return,true,if,the,file,state,backend,has,been,initialized,false,otherwise;public,boolean,is,initialized,return,filesystem,null,checkpoint,directory,null
FsStateBackend -> public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) throws IOException;1488534675;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) throws IOException {_		this(new Path(checkpointDataUri), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,boolean,asynchronous,snapshots,throws,ioexception,this,new,path,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) throws IOException;1489497957;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) throws IOException {_		this(new Path(checkpointDataUri), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,boolean,asynchronous,snapshots,throws,ioexception,this,new,path,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) throws IOException;1506954607;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) throws IOException {_		this(new Path(checkpointDataUri), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,boolean,asynchronous,snapshots,throws,ioexception,this,new,path,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) throws IOException;1510579905;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) throws IOException {_		this(new Path(checkpointDataUri), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,boolean,asynchronous,snapshots,throws,ioexception,this,new,path,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots);1508951050;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri, null, -1,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,1,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots);1509045960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri, null, -1,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,1,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots);1515600846;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri, null, -1,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,1,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots);1517924641;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri, null, -1,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,1,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots);1530638621;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri, null, -1,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,1,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots);1530704629;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri, null, -1,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,1,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots);1539939663;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri, null, -1,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,1,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots);1550681446;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri, null, -1,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,1,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots);1550863001;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri, null, -1,_				TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,uri,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,null,1,ternary,boolean,from,boolean,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots);1508951050;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri.toUri(), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,path,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,to,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots);1509045960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri.toUri(), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,path,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,to,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots);1515600846;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri.toUri(), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,path,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,to,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots);1517924641;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri.toUri(), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,path,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,to,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots);1530638621;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri.toUri(), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,path,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,to,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots);1530704629;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri.toUri(), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,path,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,to,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots);1539939663;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri.toUri(), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,path,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,to,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots);1550681446;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri.toUri(), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,path,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,to,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots);1550863001;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) {_		this(checkpointDataUri.toUri(), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,path,checkpoint,data,uri,boolean,asynchronous,snapshots,this,checkpoint,data,uri,to,uri,asynchronous,snapshots
FsStateBackend -> private FsStateBackend(FsStateBackend original, Configuration configuration);1508951050;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private FsStateBackend(FsStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))___		final int sizeThreshold = original.fileStateThreshold >= 0 ?_				original.fileStateThreshold :_				configuration.getInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD)___		if (sizeThreshold >= 0 && sizeThreshold <= MAX_FILE_STATE_THRESHOLD) {_			this.fileStateThreshold = sizeThreshold__		}_		else {_			this.fileStateThreshold = CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()___			_			_			LoggerFactory.getLogger(AbstractFileStateBackend.class).warn(_					"Ignoring invalid file size threshold value ({}): {} - using default value {} instead.",_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.key(), sizeThreshold,_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue())__		}_	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,fs,state,backend,fs,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options,final,int,size,threshold,original,file,state,threshold,0,original,file,state,threshold,configuration,get,integer,checkpointing,options,if,size,threshold,0,size,threshold,this,file,state,threshold,size,threshold,else,this,file,state,threshold,checkpointing,options,default,value,logger,factory,get,logger,abstract,file,state,backend,class,warn,ignoring,invalid,file,size,threshold,value,using,default,value,instead,checkpointing,options,key,size,threshold,checkpointing,options,default,value
FsStateBackend -> private FsStateBackend(FsStateBackend original, Configuration configuration);1509045960;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private FsStateBackend(FsStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))___		final int sizeThreshold = original.fileStateThreshold >= 0 ?_				original.fileStateThreshold :_				configuration.getInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD)___		if (sizeThreshold >= 0 && sizeThreshold <= MAX_FILE_STATE_THRESHOLD) {_			this.fileStateThreshold = sizeThreshold__		}_		else {_			this.fileStateThreshold = CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()___			_			_			LoggerFactory.getLogger(AbstractFileStateBackend.class).warn(_					"Ignoring invalid file size threshold value ({}): {} - using default value {} instead.",_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.key(), sizeThreshold,_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue())__		}_	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,fs,state,backend,fs,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options,final,int,size,threshold,original,file,state,threshold,0,original,file,state,threshold,configuration,get,integer,checkpointing,options,if,size,threshold,0,size,threshold,this,file,state,threshold,size,threshold,else,this,file,state,threshold,checkpointing,options,default,value,logger,factory,get,logger,abstract,file,state,backend,class,warn,ignoring,invalid,file,size,threshold,value,using,default,value,instead,checkpointing,options,key,size,threshold,checkpointing,options,default,value
FsStateBackend -> private FsStateBackend(FsStateBackend original, Configuration configuration);1515600846;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private FsStateBackend(FsStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))___		final int sizeThreshold = original.fileStateThreshold >= 0 ?_				original.fileStateThreshold :_				configuration.getInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD)___		if (sizeThreshold >= 0 && sizeThreshold <= MAX_FILE_STATE_THRESHOLD) {_			this.fileStateThreshold = sizeThreshold__		}_		else {_			this.fileStateThreshold = CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()___			_			_			LoggerFactory.getLogger(AbstractFileStateBackend.class).warn(_					"Ignoring invalid file size threshold value ({}): {} - using default value {} instead.",_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.key(), sizeThreshold,_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue())__		}_	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,fs,state,backend,fs,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options,final,int,size,threshold,original,file,state,threshold,0,original,file,state,threshold,configuration,get,integer,checkpointing,options,if,size,threshold,0,size,threshold,this,file,state,threshold,size,threshold,else,this,file,state,threshold,checkpointing,options,default,value,logger,factory,get,logger,abstract,file,state,backend,class,warn,ignoring,invalid,file,size,threshold,value,using,default,value,instead,checkpointing,options,key,size,threshold,checkpointing,options,default,value
FsStateBackend -> private FsStateBackend(FsStateBackend original, Configuration configuration);1517924641;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private FsStateBackend(FsStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))___		final int sizeThreshold = original.fileStateThreshold >= 0 ?_				original.fileStateThreshold :_				configuration.getInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD)___		if (sizeThreshold >= 0 && sizeThreshold <= MAX_FILE_STATE_THRESHOLD) {_			this.fileStateThreshold = sizeThreshold__		}_		else {_			this.fileStateThreshold = CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()___			_			_			LoggerFactory.getLogger(AbstractFileStateBackend.class).warn(_					"Ignoring invalid file size threshold value ({}): {} - using default value {} instead.",_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.key(), sizeThreshold,_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue())__		}_	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,fs,state,backend,fs,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options,final,int,size,threshold,original,file,state,threshold,0,original,file,state,threshold,configuration,get,integer,checkpointing,options,if,size,threshold,0,size,threshold,this,file,state,threshold,size,threshold,else,this,file,state,threshold,checkpointing,options,default,value,logger,factory,get,logger,abstract,file,state,backend,class,warn,ignoring,invalid,file,size,threshold,value,using,default,value,instead,checkpointing,options,key,size,threshold,checkpointing,options,default,value
FsStateBackend -> private FsStateBackend(FsStateBackend original, Configuration configuration);1530638621;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private FsStateBackend(FsStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))___		final int sizeThreshold = original.fileStateThreshold >= 0 ?_				original.fileStateThreshold :_				configuration.getInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD)___		if (sizeThreshold >= 0 && sizeThreshold <= MAX_FILE_STATE_THRESHOLD) {_			this.fileStateThreshold = sizeThreshold__		}_		else {_			this.fileStateThreshold = CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()___			_			_			LoggerFactory.getLogger(AbstractFileStateBackend.class).warn(_					"Ignoring invalid file size threshold value ({}): {} - using default value {} instead.",_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.key(), sizeThreshold,_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue())__		}_	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,fs,state,backend,fs,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options,final,int,size,threshold,original,file,state,threshold,0,original,file,state,threshold,configuration,get,integer,checkpointing,options,if,size,threshold,0,size,threshold,this,file,state,threshold,size,threshold,else,this,file,state,threshold,checkpointing,options,default,value,logger,factory,get,logger,abstract,file,state,backend,class,warn,ignoring,invalid,file,size,threshold,value,using,default,value,instead,checkpointing,options,key,size,threshold,checkpointing,options,default,value
FsStateBackend -> private FsStateBackend(FsStateBackend original, Configuration configuration);1530704629;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private FsStateBackend(FsStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))___		final int sizeThreshold = original.fileStateThreshold >= 0 ?_				original.fileStateThreshold :_				configuration.getInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD)___		if (sizeThreshold >= 0 && sizeThreshold <= MAX_FILE_STATE_THRESHOLD) {_			this.fileStateThreshold = sizeThreshold__		}_		else {_			this.fileStateThreshold = CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()___			_			_			LoggerFactory.getLogger(AbstractFileStateBackend.class).warn(_					"Ignoring invalid file size threshold value ({}): {} - using default value {} instead.",_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.key(), sizeThreshold,_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue())__		}_	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,fs,state,backend,fs,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options,final,int,size,threshold,original,file,state,threshold,0,original,file,state,threshold,configuration,get,integer,checkpointing,options,if,size,threshold,0,size,threshold,this,file,state,threshold,size,threshold,else,this,file,state,threshold,checkpointing,options,default,value,logger,factory,get,logger,abstract,file,state,backend,class,warn,ignoring,invalid,file,size,threshold,value,using,default,value,instead,checkpointing,options,key,size,threshold,checkpointing,options,default,value
FsStateBackend -> private FsStateBackend(FsStateBackend original, Configuration configuration);1539939663;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private FsStateBackend(FsStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))___		final int sizeThreshold = original.fileStateThreshold >= 0 ?_				original.fileStateThreshold :_				configuration.getInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD)___		if (sizeThreshold >= 0 && sizeThreshold <= MAX_FILE_STATE_THRESHOLD) {_			this.fileStateThreshold = sizeThreshold__		}_		else {_			this.fileStateThreshold = CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()___			_			_			LoggerFactory.getLogger(AbstractFileStateBackend.class).warn(_					"Ignoring invalid file size threshold value ({}): {} - using default value {} instead.",_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.key(), sizeThreshold,_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue())__		}_	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,fs,state,backend,fs,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options,final,int,size,threshold,original,file,state,threshold,0,original,file,state,threshold,configuration,get,integer,checkpointing,options,if,size,threshold,0,size,threshold,this,file,state,threshold,size,threshold,else,this,file,state,threshold,checkpointing,options,default,value,logger,factory,get,logger,abstract,file,state,backend,class,warn,ignoring,invalid,file,size,threshold,value,using,default,value,instead,checkpointing,options,key,size,threshold,checkpointing,options,default,value
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1445247002;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1445849929;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1447461833;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1448126995;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1448560009;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1450718956;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1453721631;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1454939779;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1455222636;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1464608559;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1466716682;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1466716960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1467707828;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1470847490;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1470909547;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1472464402;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1472680767;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1474462558;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1475571578;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1483656313;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1487264183;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1487350260;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1488534675;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1489497957;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1489501613;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1506954607;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri) throws IOException;1510579905;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri
FsStateBackend -> public boolean isUsingAsynchronousSnapshots();1508951050;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
FsStateBackend -> public boolean isUsingAsynchronousSnapshots();1509045960;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
FsStateBackend -> public boolean isUsingAsynchronousSnapshots();1515600846;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
FsStateBackend -> public boolean isUsingAsynchronousSnapshots();1517924641;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
FsStateBackend -> public boolean isUsingAsynchronousSnapshots();1530638621;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
FsStateBackend -> public boolean isUsingAsynchronousSnapshots();1530704629;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
FsStateBackend -> public boolean isUsingAsynchronousSnapshots();1539939663;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
FsStateBackend -> public boolean isUsingAsynchronousSnapshots();1550681446;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
FsStateBackend -> public boolean isUsingAsynchronousSnapshots();1550863001;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
FsStateBackend -> public int getMinFileSizeThreshold();1487350260;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>By default, this threshold is {@value #DEFAULT_FILE_STATE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,by,default,this,threshold,is,value,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold
FsStateBackend -> public int getMinFileSizeThreshold();1488534675;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>By default, this threshold is {@value #DEFAULT_FILE_STATE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,by,default,this,threshold,is,value,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold
FsStateBackend -> public int getMinFileSizeThreshold();1489497957;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>By default, this threshold is {@value #DEFAULT_FILE_STATE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,by,default,this,threshold,is,value,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold
FsStateBackend -> public int getMinFileSizeThreshold();1489501613;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>By default, this threshold is {@value #DEFAULT_FILE_STATE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,by,default,this,threshold,is,value,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold
FsStateBackend -> public int getMinFileSizeThreshold();1506954607;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>By default, this threshold is {@value #DEFAULT_FILE_STATE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,by,default,this,threshold,is,value,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold
FsStateBackend -> public int getMinFileSizeThreshold();1508951050;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#FS_SMALL_FILE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold >= 0 ?_				fileStateThreshold :_				CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold,0,file,state,threshold,checkpointing,options,default,value
FsStateBackend -> public int getMinFileSizeThreshold();1509045960;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#FS_SMALL_FILE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold >= 0 ?_				fileStateThreshold :_				CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold,0,file,state,threshold,checkpointing,options,default,value
FsStateBackend -> public int getMinFileSizeThreshold();1510579905;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>By default, this threshold is {@value #DEFAULT_FILE_STATE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,by,default,this,threshold,is,value,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold
FsStateBackend -> public int getMinFileSizeThreshold();1515600846;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#FS_SMALL_FILE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold >= 0 ?_				fileStateThreshold :_				CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold,0,file,state,threshold,checkpointing,options,default,value
FsStateBackend -> public int getMinFileSizeThreshold();1517924641;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#FS_SMALL_FILE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold >= 0 ?_				fileStateThreshold :_				CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold,0,file,state,threshold,checkpointing,options,default,value
FsStateBackend -> public int getMinFileSizeThreshold();1530638621;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#FS_SMALL_FILE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold >= 0 ?_				fileStateThreshold :_				CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold,0,file,state,threshold,checkpointing,options,default,value
FsStateBackend -> public int getMinFileSizeThreshold();1530704629;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#FS_SMALL_FILE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold >= 0 ?_				fileStateThreshold :_				CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold,0,file,state,threshold,checkpointing,options,default,value
FsStateBackend -> public int getMinFileSizeThreshold();1539939663;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#FS_SMALL_FILE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold >= 0 ?_				fileStateThreshold :_				CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold,0,file,state,threshold,checkpointing,options,default,value
FsStateBackend -> public int getMinFileSizeThreshold();1550681446;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#FS_SMALL_FILE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold >= 0 ?_				fileStateThreshold :_				CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold,0,file,state,threshold,checkpointing,options,default,value
FsStateBackend -> public int getMinFileSizeThreshold();1550863001;Gets the threshold below which state is stored as part of the metadata, rather than in files._This threshold ensures that the backend does not create a large amount of very small files,_where potentially the file pointers are larger than the state itself.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#FS_SMALL_FILE_THRESHOLD}.__@return The file size threshold, in bytes.;public int getMinFileSizeThreshold() {_		return fileStateThreshold >= 0 ?_				fileStateThreshold :_				CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()__	};gets,the,threshold,below,which,state,is,stored,as,part,of,the,metadata,rather,than,in,files,this,threshold,ensures,that,the,backend,does,not,create,a,large,amount,of,very,small,files,where,potentially,the,file,pointers,are,larger,than,the,state,itself,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options,return,the,file,size,threshold,in,bytes;public,int,get,min,file,size,threshold,return,file,state,threshold,0,file,state,threshold,checkpointing,options,default,value
FsStateBackend -> public FsStateBackend(Path checkpointDataUri);1508951050;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(Path checkpointDataUri) {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,path,checkpoint,data,uri,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri);1509045960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(Path checkpointDataUri) {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,path,checkpoint,data,uri,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri);1515600846;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(Path checkpointDataUri) {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,path,checkpoint,data,uri,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri);1517924641;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(Path checkpointDataUri) {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,path,checkpoint,data,uri,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri);1530638621;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(Path checkpointDataUri) {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,path,checkpoint,data,uri,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri);1530704629;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(Path checkpointDataUri) {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,path,checkpoint,data,uri,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri);1539939663;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(Path checkpointDataUri) {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,path,checkpoint,data,uri,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri);1550681446;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(Path checkpointDataUri) {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,path,checkpoint,data,uri,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri);1550863001;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(Path checkpointDataUri) {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,path,checkpoint,data,uri,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend( 			URI checkpointDirectory, 			@Nullable URI defaultSavepointDirectory, 			int fileStateSizeThreshold, 			TernaryBoolean asynchronousSnapshots);1508951050;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDirectory        The path to write checkpoint metadata to._@param defaultSavepointDirectory  The path to write savepoints to. If null, the value from_the runtime configuration will be used, or savepoint_target locations need to be passed when triggering a savepoint._@param fileStateSizeThreshold     State below this size will be stored as part of the metadata,_rather than in files. If -1, the value configured in the_runtime configuration will be used, or the default value (1KB)_if nothing is configured._@param asynchronousSnapshots      Flag to switch between synchronous and asynchronous_snapshot mode. If UNDEFINED, the value configured in the_runtime configuration will be used.;public FsStateBackend(_			URI checkpointDirectory,_			@Nullable URI defaultSavepointDirectory,_			int fileStateSizeThreshold,_			TernaryBoolean asynchronousSnapshots) {__		super(checkNotNull(checkpointDirectory, "checkpoint directory is null"), defaultSavepointDirectory)___		checkNotNull(asynchronousSnapshots, "asynchronousSnapshots")__		checkArgument(fileStateSizeThreshold >= -1 && fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD,_				"The threshold for file state size must be in [-1, %s], where '-1' means to use " +_						"the value from the deployment's configuration.", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,directory,the,path,to,write,checkpoint,metadata,to,param,default,savepoint,directory,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,or,savepoint,target,locations,need,to,be,passed,when,triggering,a,savepoint,param,file,state,size,threshold,state,below,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,if,1,the,value,configured,in,the,runtime,configuration,will,be,used,or,the,default,value,1kb,if,nothing,is,configured,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,undefined,the,value,configured,in,the,runtime,configuration,will,be,used;public,fs,state,backend,uri,checkpoint,directory,nullable,uri,default,savepoint,directory,int,file,state,size,threshold,ternary,boolean,asynchronous,snapshots,super,check,not,null,checkpoint,directory,checkpoint,directory,is,null,default,savepoint,directory,check,not,null,asynchronous,snapshots,asynchronous,snapshots,check,argument,file,state,size,threshold,1,file,state,size,threshold,the,threshold,for,file,state,size,must,be,in,1,s,where,1,means,to,use,the,value,from,the,deployment,s,configuration,this,file,state,threshold,file,state,size,threshold,this,asynchronous,snapshots,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDirectory, 			@Nullable URI defaultSavepointDirectory, 			int fileStateSizeThreshold, 			TernaryBoolean asynchronousSnapshots);1509045960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDirectory        The path to write checkpoint metadata to._@param defaultSavepointDirectory  The path to write savepoints to. If null, the value from_the runtime configuration will be used, or savepoint_target locations need to be passed when triggering a savepoint._@param fileStateSizeThreshold     State below this size will be stored as part of the metadata,_rather than in files. If -1, the value configured in the_runtime configuration will be used, or the default value (1KB)_if nothing is configured._@param asynchronousSnapshots      Flag to switch between synchronous and asynchronous_snapshot mode. If UNDEFINED, the value configured in the_runtime configuration will be used.;public FsStateBackend(_			URI checkpointDirectory,_			@Nullable URI defaultSavepointDirectory,_			int fileStateSizeThreshold,_			TernaryBoolean asynchronousSnapshots) {__		super(checkNotNull(checkpointDirectory, "checkpoint directory is null"), defaultSavepointDirectory)___		checkNotNull(asynchronousSnapshots, "asynchronousSnapshots")__		checkArgument(fileStateSizeThreshold >= -1 && fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD,_				"The threshold for file state size must be in [-1, %s], where '-1' means to use " +_						"the value from the deployment's configuration.", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,directory,the,path,to,write,checkpoint,metadata,to,param,default,savepoint,directory,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,or,savepoint,target,locations,need,to,be,passed,when,triggering,a,savepoint,param,file,state,size,threshold,state,below,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,if,1,the,value,configured,in,the,runtime,configuration,will,be,used,or,the,default,value,1kb,if,nothing,is,configured,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,undefined,the,value,configured,in,the,runtime,configuration,will,be,used;public,fs,state,backend,uri,checkpoint,directory,nullable,uri,default,savepoint,directory,int,file,state,size,threshold,ternary,boolean,asynchronous,snapshots,super,check,not,null,checkpoint,directory,checkpoint,directory,is,null,default,savepoint,directory,check,not,null,asynchronous,snapshots,asynchronous,snapshots,check,argument,file,state,size,threshold,1,file,state,size,threshold,the,threshold,for,file,state,size,must,be,in,1,s,where,1,means,to,use,the,value,from,the,deployment,s,configuration,this,file,state,threshold,file,state,size,threshold,this,asynchronous,snapshots,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDirectory, 			@Nullable URI defaultSavepointDirectory, 			int fileStateSizeThreshold, 			TernaryBoolean asynchronousSnapshots);1515600846;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDirectory        The path to write checkpoint metadata to._@param defaultSavepointDirectory  The path to write savepoints to. If null, the value from_the runtime configuration will be used, or savepoint_target locations need to be passed when triggering a savepoint._@param fileStateSizeThreshold     State below this size will be stored as part of the metadata,_rather than in files. If -1, the value configured in the_runtime configuration will be used, or the default value (1KB)_if nothing is configured._@param asynchronousSnapshots      Flag to switch between synchronous and asynchronous_snapshot mode. If UNDEFINED, the value configured in the_runtime configuration will be used.;public FsStateBackend(_			URI checkpointDirectory,_			@Nullable URI defaultSavepointDirectory,_			int fileStateSizeThreshold,_			TernaryBoolean asynchronousSnapshots) {__		super(checkNotNull(checkpointDirectory, "checkpoint directory is null"), defaultSavepointDirectory)___		checkNotNull(asynchronousSnapshots, "asynchronousSnapshots")__		checkArgument(fileStateSizeThreshold >= -1 && fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD,_				"The threshold for file state size must be in [-1, %s], where '-1' means to use " +_						"the value from the deployment's configuration.", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,directory,the,path,to,write,checkpoint,metadata,to,param,default,savepoint,directory,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,or,savepoint,target,locations,need,to,be,passed,when,triggering,a,savepoint,param,file,state,size,threshold,state,below,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,if,1,the,value,configured,in,the,runtime,configuration,will,be,used,or,the,default,value,1kb,if,nothing,is,configured,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,undefined,the,value,configured,in,the,runtime,configuration,will,be,used;public,fs,state,backend,uri,checkpoint,directory,nullable,uri,default,savepoint,directory,int,file,state,size,threshold,ternary,boolean,asynchronous,snapshots,super,check,not,null,checkpoint,directory,checkpoint,directory,is,null,default,savepoint,directory,check,not,null,asynchronous,snapshots,asynchronous,snapshots,check,argument,file,state,size,threshold,1,file,state,size,threshold,the,threshold,for,file,state,size,must,be,in,1,s,where,1,means,to,use,the,value,from,the,deployment,s,configuration,this,file,state,threshold,file,state,size,threshold,this,asynchronous,snapshots,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDirectory, 			@Nullable URI defaultSavepointDirectory, 			int fileStateSizeThreshold, 			TernaryBoolean asynchronousSnapshots);1517924641;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDirectory        The path to write checkpoint metadata to._@param defaultSavepointDirectory  The path to write savepoints to. If null, the value from_the runtime configuration will be used, or savepoint_target locations need to be passed when triggering a savepoint._@param fileStateSizeThreshold     State below this size will be stored as part of the metadata,_rather than in files. If -1, the value configured in the_runtime configuration will be used, or the default value (1KB)_if nothing is configured._@param asynchronousSnapshots      Flag to switch between synchronous and asynchronous_snapshot mode. If UNDEFINED, the value configured in the_runtime configuration will be used.;public FsStateBackend(_			URI checkpointDirectory,_			@Nullable URI defaultSavepointDirectory,_			int fileStateSizeThreshold,_			TernaryBoolean asynchronousSnapshots) {__		super(checkNotNull(checkpointDirectory, "checkpoint directory is null"), defaultSavepointDirectory)___		checkNotNull(asynchronousSnapshots, "asynchronousSnapshots")__		checkArgument(fileStateSizeThreshold >= -1 && fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD,_				"The threshold for file state size must be in [-1, %s], where '-1' means to use " +_						"the value from the deployment's configuration.", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,directory,the,path,to,write,checkpoint,metadata,to,param,default,savepoint,directory,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,or,savepoint,target,locations,need,to,be,passed,when,triggering,a,savepoint,param,file,state,size,threshold,state,below,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,if,1,the,value,configured,in,the,runtime,configuration,will,be,used,or,the,default,value,1kb,if,nothing,is,configured,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,undefined,the,value,configured,in,the,runtime,configuration,will,be,used;public,fs,state,backend,uri,checkpoint,directory,nullable,uri,default,savepoint,directory,int,file,state,size,threshold,ternary,boolean,asynchronous,snapshots,super,check,not,null,checkpoint,directory,checkpoint,directory,is,null,default,savepoint,directory,check,not,null,asynchronous,snapshots,asynchronous,snapshots,check,argument,file,state,size,threshold,1,file,state,size,threshold,the,threshold,for,file,state,size,must,be,in,1,s,where,1,means,to,use,the,value,from,the,deployment,s,configuration,this,file,state,threshold,file,state,size,threshold,this,asynchronous,snapshots,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDirectory, 			@Nullable URI defaultSavepointDirectory, 			int fileStateSizeThreshold, 			TernaryBoolean asynchronousSnapshots);1530638621;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDirectory        The path to write checkpoint metadata to._@param defaultSavepointDirectory  The path to write savepoints to. If null, the value from_the runtime configuration will be used, or savepoint_target locations need to be passed when triggering a savepoint._@param fileStateSizeThreshold     State below this size will be stored as part of the metadata,_rather than in files. If -1, the value configured in the_runtime configuration will be used, or the default value (1KB)_if nothing is configured._@param asynchronousSnapshots      Flag to switch between synchronous and asynchronous_snapshot mode. If UNDEFINED, the value configured in the_runtime configuration will be used.;public FsStateBackend(_			URI checkpointDirectory,_			@Nullable URI defaultSavepointDirectory,_			int fileStateSizeThreshold,_			TernaryBoolean asynchronousSnapshots) {__		super(checkNotNull(checkpointDirectory, "checkpoint directory is null"), defaultSavepointDirectory)___		checkNotNull(asynchronousSnapshots, "asynchronousSnapshots")__		checkArgument(fileStateSizeThreshold >= -1 && fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD,_				"The threshold for file state size must be in [-1, %s], where '-1' means to use " +_						"the value from the deployment's configuration.", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,directory,the,path,to,write,checkpoint,metadata,to,param,default,savepoint,directory,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,or,savepoint,target,locations,need,to,be,passed,when,triggering,a,savepoint,param,file,state,size,threshold,state,below,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,if,1,the,value,configured,in,the,runtime,configuration,will,be,used,or,the,default,value,1kb,if,nothing,is,configured,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,undefined,the,value,configured,in,the,runtime,configuration,will,be,used;public,fs,state,backend,uri,checkpoint,directory,nullable,uri,default,savepoint,directory,int,file,state,size,threshold,ternary,boolean,asynchronous,snapshots,super,check,not,null,checkpoint,directory,checkpoint,directory,is,null,default,savepoint,directory,check,not,null,asynchronous,snapshots,asynchronous,snapshots,check,argument,file,state,size,threshold,1,file,state,size,threshold,the,threshold,for,file,state,size,must,be,in,1,s,where,1,means,to,use,the,value,from,the,deployment,s,configuration,this,file,state,threshold,file,state,size,threshold,this,asynchronous,snapshots,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDirectory, 			@Nullable URI defaultSavepointDirectory, 			int fileStateSizeThreshold, 			TernaryBoolean asynchronousSnapshots);1530704629;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDirectory        The path to write checkpoint metadata to._@param defaultSavepointDirectory  The path to write savepoints to. If null, the value from_the runtime configuration will be used, or savepoint_target locations need to be passed when triggering a savepoint._@param fileStateSizeThreshold     State below this size will be stored as part of the metadata,_rather than in files. If -1, the value configured in the_runtime configuration will be used, or the default value (1KB)_if nothing is configured._@param asynchronousSnapshots      Flag to switch between synchronous and asynchronous_snapshot mode. If UNDEFINED, the value configured in the_runtime configuration will be used.;public FsStateBackend(_			URI checkpointDirectory,_			@Nullable URI defaultSavepointDirectory,_			int fileStateSizeThreshold,_			TernaryBoolean asynchronousSnapshots) {__		super(checkNotNull(checkpointDirectory, "checkpoint directory is null"), defaultSavepointDirectory)___		checkNotNull(asynchronousSnapshots, "asynchronousSnapshots")__		checkArgument(fileStateSizeThreshold >= -1 && fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD,_				"The threshold for file state size must be in [-1, %s], where '-1' means to use " +_						"the value from the deployment's configuration.", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,directory,the,path,to,write,checkpoint,metadata,to,param,default,savepoint,directory,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,or,savepoint,target,locations,need,to,be,passed,when,triggering,a,savepoint,param,file,state,size,threshold,state,below,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,if,1,the,value,configured,in,the,runtime,configuration,will,be,used,or,the,default,value,1kb,if,nothing,is,configured,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,undefined,the,value,configured,in,the,runtime,configuration,will,be,used;public,fs,state,backend,uri,checkpoint,directory,nullable,uri,default,savepoint,directory,int,file,state,size,threshold,ternary,boolean,asynchronous,snapshots,super,check,not,null,checkpoint,directory,checkpoint,directory,is,null,default,savepoint,directory,check,not,null,asynchronous,snapshots,asynchronous,snapshots,check,argument,file,state,size,threshold,1,file,state,size,threshold,the,threshold,for,file,state,size,must,be,in,1,s,where,1,means,to,use,the,value,from,the,deployment,s,configuration,this,file,state,threshold,file,state,size,threshold,this,asynchronous,snapshots,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDirectory, 			@Nullable URI defaultSavepointDirectory, 			int fileStateSizeThreshold, 			TernaryBoolean asynchronousSnapshots);1539939663;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDirectory        The path to write checkpoint metadata to._@param defaultSavepointDirectory  The path to write savepoints to. If null, the value from_the runtime configuration will be used, or savepoint_target locations need to be passed when triggering a savepoint._@param fileStateSizeThreshold     State below this size will be stored as part of the metadata,_rather than in files. If -1, the value configured in the_runtime configuration will be used, or the default value (1KB)_if nothing is configured._@param asynchronousSnapshots      Flag to switch between synchronous and asynchronous_snapshot mode. If UNDEFINED, the value configured in the_runtime configuration will be used.;public FsStateBackend(_			URI checkpointDirectory,_			@Nullable URI defaultSavepointDirectory,_			int fileStateSizeThreshold,_			TernaryBoolean asynchronousSnapshots) {__		super(checkNotNull(checkpointDirectory, "checkpoint directory is null"), defaultSavepointDirectory)___		checkNotNull(asynchronousSnapshots, "asynchronousSnapshots")__		checkArgument(fileStateSizeThreshold >= -1 && fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD,_				"The threshold for file state size must be in [-1, %s], where '-1' means to use " +_						"the value from the deployment's configuration.", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,directory,the,path,to,write,checkpoint,metadata,to,param,default,savepoint,directory,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,or,savepoint,target,locations,need,to,be,passed,when,triggering,a,savepoint,param,file,state,size,threshold,state,below,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,if,1,the,value,configured,in,the,runtime,configuration,will,be,used,or,the,default,value,1kb,if,nothing,is,configured,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,undefined,the,value,configured,in,the,runtime,configuration,will,be,used;public,fs,state,backend,uri,checkpoint,directory,nullable,uri,default,savepoint,directory,int,file,state,size,threshold,ternary,boolean,asynchronous,snapshots,super,check,not,null,checkpoint,directory,checkpoint,directory,is,null,default,savepoint,directory,check,not,null,asynchronous,snapshots,asynchronous,snapshots,check,argument,file,state,size,threshold,1,file,state,size,threshold,the,threshold,for,file,state,size,must,be,in,1,s,where,1,means,to,use,the,value,from,the,deployment,s,configuration,this,file,state,threshold,file,state,size,threshold,this,asynchronous,snapshots,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDirectory, 			@Nullable URI defaultSavepointDirectory, 			int fileStateSizeThreshold, 			TernaryBoolean asynchronousSnapshots);1550681446;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDirectory        The path to write checkpoint metadata to._@param defaultSavepointDirectory  The path to write savepoints to. If null, the value from_the runtime configuration will be used, or savepoint_target locations need to be passed when triggering a savepoint._@param fileStateSizeThreshold     State below this size will be stored as part of the metadata,_rather than in files. If -1, the value configured in the_runtime configuration will be used, or the default value (1KB)_if nothing is configured._@param asynchronousSnapshots      Flag to switch between synchronous and asynchronous_snapshot mode. If UNDEFINED, the value configured in the_runtime configuration will be used.;public FsStateBackend(_			URI checkpointDirectory,_			@Nullable URI defaultSavepointDirectory,_			int fileStateSizeThreshold,_			TernaryBoolean asynchronousSnapshots) {__		super(checkNotNull(checkpointDirectory, "checkpoint directory is null"), defaultSavepointDirectory)___		checkNotNull(asynchronousSnapshots, "asynchronousSnapshots")__		checkArgument(fileStateSizeThreshold >= -1 && fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD,_				"The threshold for file state size must be in [-1, %s], where '-1' means to use " +_						"the value from the deployment's configuration.", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,directory,the,path,to,write,checkpoint,metadata,to,param,default,savepoint,directory,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,or,savepoint,target,locations,need,to,be,passed,when,triggering,a,savepoint,param,file,state,size,threshold,state,below,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,if,1,the,value,configured,in,the,runtime,configuration,will,be,used,or,the,default,value,1kb,if,nothing,is,configured,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,undefined,the,value,configured,in,the,runtime,configuration,will,be,used;public,fs,state,backend,uri,checkpoint,directory,nullable,uri,default,savepoint,directory,int,file,state,size,threshold,ternary,boolean,asynchronous,snapshots,super,check,not,null,checkpoint,directory,checkpoint,directory,is,null,default,savepoint,directory,check,not,null,asynchronous,snapshots,asynchronous,snapshots,check,argument,file,state,size,threshold,1,file,state,size,threshold,the,threshold,for,file,state,size,must,be,in,1,s,where,1,means,to,use,the,value,from,the,deployment,s,configuration,this,file,state,threshold,file,state,size,threshold,this,asynchronous,snapshots,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDirectory, 			@Nullable URI defaultSavepointDirectory, 			int fileStateSizeThreshold, 			TernaryBoolean asynchronousSnapshots);1550863001;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDirectory        The path to write checkpoint metadata to._@param defaultSavepointDirectory  The path to write savepoints to. If null, the value from_the runtime configuration will be used, or savepoint_target locations need to be passed when triggering a savepoint._@param fileStateSizeThreshold     State below this size will be stored as part of the metadata,_rather than in files. If -1, the value configured in the_runtime configuration will be used, or the default value (1KB)_if nothing is configured._@param asynchronousSnapshots      Flag to switch between synchronous and asynchronous_snapshot mode. If UNDEFINED, the value configured in the_runtime configuration will be used.;public FsStateBackend(_			URI checkpointDirectory,_			@Nullable URI defaultSavepointDirectory,_			int fileStateSizeThreshold,_			TernaryBoolean asynchronousSnapshots) {__		super(checkNotNull(checkpointDirectory, "checkpoint directory is null"), defaultSavepointDirectory)___		checkNotNull(asynchronousSnapshots, "asynchronousSnapshots")__		checkArgument(fileStateSizeThreshold >= -1 && fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD,_				"The threshold for file state size must be in [-1, %s], where '-1' means to use " +_						"the value from the deployment's configuration.", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,directory,the,path,to,write,checkpoint,metadata,to,param,default,savepoint,directory,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,or,savepoint,target,locations,need,to,be,passed,when,triggering,a,savepoint,param,file,state,size,threshold,state,below,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,if,1,the,value,configured,in,the,runtime,configuration,will,be,used,or,the,default,value,1kb,if,nothing,is,configured,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,undefined,the,value,configured,in,the,runtime,configuration,will,be,used;public,fs,state,backend,uri,checkpoint,directory,nullable,uri,default,savepoint,directory,int,file,state,size,threshold,ternary,boolean,asynchronous,snapshots,super,check,not,null,checkpoint,directory,checkpoint,directory,is,null,default,savepoint,directory,check,not,null,asynchronous,snapshots,asynchronous,snapshots,check,argument,file,state,size,threshold,1,file,state,size,threshold,the,threshold,for,file,state,size,must,be,in,1,s,where,1,means,to,use,the,value,from,the,deployment,s,configuration,this,file,state,threshold,file,state,size,threshold,this,asynchronous,snapshots,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1448560009;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}__		_		_		_		__		_		this.filesystem = FileSystem.get(checkpointDataUri)__		if (this.filesystem == null) {_			throw new IOException("Could not find a file system for the given scheme in the available configurations.")__		}__		URI fsURI = this.filesystem.getUri()__		try {_			URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__			this.basePath = new Path(baseURI)__		}_		catch (URISyntaxException e) {_			throw new IOException(_					String.format("Cannot create file system URI for checkpointDataUri %s and filesystem URI %s",_							checkpointDataUri, fsURI), e)__		}_		_		this.fileStateThreshold = fileStateSizeThreshold__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,filesystem,file,system,get,checkpoint,data,uri,if,this,filesystem,null,throw,new,ioexception,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,uri,fs,uri,this,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,this,base,path,new,path,base,uri,catch,urisyntax,exception,e,throw,new,ioexception,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,checkpoint,data,uri,fs,uri,e,this,file,state,threshold,file,state,size,threshold
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1450718956;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}__		_		_		_		__		_		this.filesystem = FileSystem.get(checkpointDataUri)__		if (this.filesystem == null) {_			throw new IOException("Could not find a file system for the given scheme in the available configurations.")__		}__		URI fsURI = this.filesystem.getUri()__		try {_			URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__			this.basePath = new Path(baseURI)__		}_		catch (URISyntaxException e) {_			throw new IOException(_					String.format("Cannot create file system URI for checkpointDataUri %s and filesystem URI %s",_							checkpointDataUri, fsURI), e)__		}_		_		this.fileStateThreshold = fileStateSizeThreshold__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,filesystem,file,system,get,checkpoint,data,uri,if,this,filesystem,null,throw,new,ioexception,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,uri,fs,uri,this,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,this,base,path,new,path,base,uri,catch,urisyntax,exception,e,throw,new,ioexception,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,checkpoint,data,uri,fs,uri,e,this,file,state,threshold,file,state,size,threshold
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1453721631;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}__		_		_		_		__		_		this.filesystem = FileSystem.get(checkpointDataUri)__		if (this.filesystem == null) {_			throw new IOException("Could not find a file system for the given scheme in the available configurations.")__		}__		URI fsURI = this.filesystem.getUri()__		try {_			URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__			this.basePath = new Path(baseURI)__		}_		catch (URISyntaxException e) {_			throw new IOException(_					String.format("Cannot create file system URI for checkpointDataUri %s and filesystem URI %s",_							checkpointDataUri, fsURI), e)__		}_		_		this.fileStateThreshold = fileStateSizeThreshold__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,filesystem,file,system,get,checkpoint,data,uri,if,this,filesystem,null,throw,new,ioexception,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,uri,fs,uri,this,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,this,base,path,new,path,base,uri,catch,urisyntax,exception,e,throw,new,ioexception,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,checkpoint,data,uri,fs,uri,e,this,file,state,threshold,file,state,size,threshold
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1454939779;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__		this.filesystem = this.basePath.getFileSystem()__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri,this,filesystem,this,base,path,get,file,system
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1455222636;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__		this.filesystem = this.basePath.getFileSystem()__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri,this,filesystem,this,base,path,get,file,system
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1464608559;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1466716682;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__		this.filesystem = this.basePath.getFileSystem()__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri,this,filesystem,this,base,path,get,file,system
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1466716960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1467707828;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1470847490;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1470909547;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1472464402;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1472680767;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1474462558;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1475571578;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1483656313;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1487264183;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		_		this.basePath = validateAndNormalizeUri(checkpointDataUri)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1487350260;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI._@throws IllegalArgumentException Thrown, if the {@code fileStateSizeThreshold} is out of bounds.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		checkArgument(fileStateSizeThreshold >= 0, "The threshold for file state size must be zero or larger.")__		checkArgument(fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD, _				"The threshold for file state size cannot be larger than %s", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.basePath = validateAndNormalizeUri(checkpointDataUri)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri,throws,illegal,argument,exception,thrown,if,the,code,file,state,size,threshold,is,out,of,bounds;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,check,argument,file,state,size,threshold,0,the,threshold,for,file,state,size,must,be,zero,or,larger,check,argument,file,state,size,threshold,the,threshold,for,file,state,size,cannot,be,larger,than,s,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1488534675;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI._@throws IllegalArgumentException Thrown, if the {@code fileStateSizeThreshold} is out of bounds.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {__		this(checkpointDataUri, fileStateSizeThreshold, false)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri,throws,illegal,argument,exception,thrown,if,the,code,file,state,size,threshold,is,out,of,bounds;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,this,checkpoint,data,uri,file,state,size,threshold,false
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1489497957;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI._@throws IllegalArgumentException Thrown, if the {@code fileStateSizeThreshold} is out of bounds.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {__		this(checkpointDataUri, fileStateSizeThreshold, false)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri,throws,illegal,argument,exception,thrown,if,the,code,file,state,size,threshold,is,out,of,bounds;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,this,checkpoint,data,uri,file,state,size,threshold,false
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1489501613;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI._@throws IllegalArgumentException Thrown, if the {@code fileStateSizeThreshold} is out of bounds.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {_		checkArgument(fileStateSizeThreshold >= 0, "The threshold for file state size must be zero or larger.")__		checkArgument(fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD, _				"The threshold for file state size cannot be larger than %s", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.basePath = validateAndNormalizeUri(checkpointDataUri)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri,throws,illegal,argument,exception,thrown,if,the,code,file,state,size,threshold,is,out,of,bounds;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,check,argument,file,state,size,threshold,0,the,threshold,for,file,state,size,must,be,zero,or,larger,check,argument,file,state,size,threshold,the,threshold,for,file,state,size,cannot,be,larger,than,s,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1506954607;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI._@throws IllegalArgumentException Thrown, if the {@code fileStateSizeThreshold} is out of bounds.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {__		this(checkpointDataUri, fileStateSizeThreshold, false)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri,throws,illegal,argument,exception,thrown,if,the,code,file,state,size,threshold,is,out,of,bounds;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,this,checkpoint,data,uri,file,state,size,threshold,false
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException;1510579905;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI._@throws IllegalArgumentException Thrown, if the {@code fileStateSizeThreshold} is out of bounds.;public FsStateBackend(URI checkpointDataUri, int fileStateSizeThreshold) throws IOException {__		this(checkpointDataUri, fileStateSizeThreshold, true)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri,throws,illegal,argument,exception,thrown,if,the,code,file,state,size,threshold,is,out,of,bounds;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,throws,ioexception,this,checkpoint,data,uri,file,state,size,threshold,true
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1454939779;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		_		_		_		__		_		FileSystem filesystem = FileSystem.get(checkpointDataUri)__		if (filesystem == null) {_			throw new IOException("Could not find a file system for the given scheme in the available configurations.")__		}__		URI fsURI = filesystem.getUri()__		try {_			URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__			return new Path(baseURI)__		}_		catch (URISyntaxException e) {_			throw new IOException(_					String.format("Cannot create file system URI for checkpointDataUri %s and filesystem URI %s",_							checkpointDataUri, fsURI), e)__		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,throw,new,ioexception,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,throw,new,ioexception,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,checkpoint,data,uri,fs,uri,e
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1455222636;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		_		_		_		__		_		FileSystem filesystem = FileSystem.get(checkpointDataUri)__		if (filesystem == null) {_			throw new IOException("Could not find a file system for the given scheme in the available configurations.")__		}__		URI fsURI = filesystem.getUri()__		try {_			URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__			return new Path(baseURI)__		}_		catch (URISyntaxException e) {_			throw new IOException(_					String.format("Cannot create file system URI for checkpointDataUri %s and filesystem URI %s",_							checkpointDataUri, fsURI), e)__		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,throw,new,ioexception,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,throw,new,ioexception,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,checkpoint,data,uri,fs,uri,e
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1464608559;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1466716682;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				throw new IOException("Could not find a file system for the given scheme in the available configurations.")__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				throw new IOException(_					String.format("Cannot create file system URI for checkpointDataUri %s and filesystem URI %s",_						checkpointDataUri, fsURI), e)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,throw,new,ioexception,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,throw,new,ioexception,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,checkpoint,data,uri,fs,uri,e
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1466716960;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				throw new IOException("Could not find a file system for the given scheme in the available configurations.")__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				throw new IOException(_					String.format("Cannot create file system URI for checkpointDataUri %s and filesystem URI %s",_						checkpointDataUri, fsURI), e)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,throw,new,ioexception,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,throw,new,ioexception,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,checkpoint,data,uri,fs,uri,e
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1467707828;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1470847490;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1470909547;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1472464402;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1472680767;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1474462558;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1475571578;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1483656313;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1487264183;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1487350260;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1488534675;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1489497957;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1489501613;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;public static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		if (!FileSystem.isFlinkSupportedScheme(checkpointDataUri.getScheme())) {_			_			_			return new Path(checkpointDataUri)__		} else {_			_			_			_			__			_			FileSystem filesystem = FileSystem.get(checkpointDataUri)__			if (filesystem == null) {_				String reason = "Could not find a file system for the given scheme in" +_				"the available configurations."__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason:{}", reason)__				return new Path(checkpointDataUri)__			}__			URI fsURI = filesystem.getUri()__			try {_				URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__				return new Path(baseURI)__			} catch (URISyntaxException e) {_				String reason = String.format(_						"Cannot create file system URI for checkpointDataUri %s and filesystem URI %s: " + e.toString(),_						checkpointDataUri,_						fsURI)__				LOG.warn("Could not verify checkpoint path. This might be caused by a genuine " +_						"problem or by the fact that the file system is not accessible from the " +_						"client. Reason: {}", reason)__				return new Path(checkpointDataUri)__			}_		}_	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;public,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,if,file,system,is,flink,supported,scheme,checkpoint,data,uri,get,scheme,return,new,path,checkpoint,data,uri,else,file,system,filesystem,file,system,get,checkpoint,data,uri,if,filesystem,null,string,reason,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri,uri,fs,uri,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,return,new,path,base,uri,catch,urisyntax,exception,e,string,reason,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,e,to,string,checkpoint,data,uri,fs,uri,log,warn,could,not,verify,checkpoint,path,this,might,be,caused,by,a,genuine,problem,or,by,the,fact,that,the,file,system,is,not,accessible,from,the,client,reason,reason,return,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend( 			URI checkpointDataUri, 			int fileStateSizeThreshold, 			boolean asynchronousSnapshots) throws IOException;1488534675;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files_@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(_			URI checkpointDataUri,_			int fileStateSizeThreshold,_			boolean asynchronousSnapshots) throws IOException {__		checkArgument(fileStateSizeThreshold >= 0, "The threshold for file state size must be zero or larger.")__		checkArgument(fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD,_				"The threshold for file state size cannot be larger than %s", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.basePath = validateAndNormalizeUri(checkpointDataUri)___		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,boolean,asynchronous,snapshots,throws,ioexception,check,argument,file,state,size,threshold,0,the,threshold,for,file,state,size,must,be,zero,or,larger,check,argument,file,state,size,threshold,the,threshold,for,file,state,size,cannot,be,larger,than,s,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri,this,asynchronous,snapshots,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDataUri, 			int fileStateSizeThreshold, 			boolean asynchronousSnapshots) throws IOException;1489497957;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files_@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(_			URI checkpointDataUri,_			int fileStateSizeThreshold,_			boolean asynchronousSnapshots) throws IOException {__		checkArgument(fileStateSizeThreshold >= 0, "The threshold for file state size must be zero or larger.")__		checkArgument(fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD,_				"The threshold for file state size cannot be larger than %s", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.basePath = validateAndNormalizeUri(checkpointDataUri)___		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,boolean,asynchronous,snapshots,throws,ioexception,check,argument,file,state,size,threshold,0,the,threshold,for,file,state,size,must,be,zero,or,larger,check,argument,file,state,size,threshold,the,threshold,for,file,state,size,cannot,be,larger,than,s,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri,this,asynchronous,snapshots,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDataUri, 			int fileStateSizeThreshold, 			boolean asynchronousSnapshots) throws IOException;1506954607;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files_@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(_			URI checkpointDataUri,_			int fileStateSizeThreshold,_			boolean asynchronousSnapshots) throws IOException {__		checkArgument(fileStateSizeThreshold >= 0, "The threshold for file state size must be zero or larger.")__		checkArgument(fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD,_				"The threshold for file state size cannot be larger than %s", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.basePath = validateAndNormalizeUri(checkpointDataUri)___		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,boolean,asynchronous,snapshots,throws,ioexception,check,argument,file,state,size,threshold,0,the,threshold,for,file,state,size,must,be,zero,or,larger,check,argument,file,state,size,threshold,the,threshold,for,file,state,size,cannot,be,larger,than,s,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri,this,asynchronous,snapshots,asynchronous,snapshots
FsStateBackend -> public FsStateBackend( 			URI checkpointDataUri, 			int fileStateSizeThreshold, 			boolean asynchronousSnapshots) throws IOException;1510579905;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files_@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(_			URI checkpointDataUri,_			int fileStateSizeThreshold,_			boolean asynchronousSnapshots) throws IOException {__		checkArgument(fileStateSizeThreshold >= 0, "The threshold for file state size must be zero or larger.")__		checkArgument(fileStateSizeThreshold <= MAX_FILE_STATE_THRESHOLD,_				"The threshold for file state size cannot be larger than %s", MAX_FILE_STATE_THRESHOLD)___		this.fileStateThreshold = fileStateSizeThreshold__		this.basePath = validateAndNormalizeUri(checkpointDataUri)___		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,int,file,state,size,threshold,boolean,asynchronous,snapshots,throws,ioexception,check,argument,file,state,size,threshold,0,the,threshold,for,file,state,size,must,be,zero,or,larger,check,argument,file,state,size,threshold,the,threshold,for,file,state,size,cannot,be,larger,than,s,this,file,state,threshold,file,state,size,threshold,this,base,path,validate,and,normalize,uri,checkpoint,data,uri,this,asynchronous,snapshots,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(String checkpointDataUri);1508951050;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(String checkpointDataUri) {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,string,checkpoint,data,uri,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri);1509045960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(String checkpointDataUri) {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,string,checkpoint,data,uri,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri);1515600846;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(String checkpointDataUri) {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,string,checkpoint,data,uri,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri);1517924641;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(String checkpointDataUri) {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,string,checkpoint,data,uri,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri);1530638621;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(String checkpointDataUri) {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,string,checkpoint,data,uri,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri);1530704629;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(String checkpointDataUri) {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,string,checkpoint,data,uri,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri);1539939663;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(String checkpointDataUri) {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,string,checkpoint,data,uri,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri);1550681446;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(String checkpointDataUri) {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,string,checkpoint,data,uri,this,new,path,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(String checkpointDataUri);1550863001;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(String checkpointDataUri) {_		this(new Path(checkpointDataUri))__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,string,checkpoint,data,uri,this,new,path,checkpoint,data,uri
FsStateBackend -> @Override 	public FsStateBackend configure(Configuration config, ClassLoader classLoader);1550681446;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public FsStateBackend configure(Configuration config, ClassLoader classLoader) {_		return new FsStateBackend(this, config, classLoader)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,fs,state,backend,configure,configuration,config,class,loader,class,loader,return,new,fs,state,backend,this,config,class,loader
FsStateBackend -> @Override 	public FsStateBackend configure(Configuration config, ClassLoader classLoader);1550863001;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public FsStateBackend configure(Configuration config, ClassLoader classLoader) {_		return new FsStateBackend(this, config, classLoader)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,fs,state,backend,configure,configuration,config,class,loader,class,loader,return,new,fs,state,backend,this,config,class,loader
FsStateBackend -> public FileSystem getFileSystem();1445247002;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FileSystem getFileSystem();1445849929;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FileSystem getFileSystem();1447461833;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FileSystem getFileSystem();1448126995;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FileSystem getFileSystem();1448560009;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FileSystem getFileSystem();1450718956;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FileSystem getFileSystem();1453721631;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FileSystem getFileSystem();1454939779;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FileSystem getFileSystem();1455222636;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FileSystem getFileSystem();1464608559;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FileSystem getFileSystem();1466716682;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FileSystem getFileSystem();1466716960;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FileSystem getFileSystem();1467707828;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FileSystem getFileSystem();1470909547;Gets the file system handle for the file system that stores the state for this backend.__@return This backend's file system handle.;public FileSystem getFileSystem() {_		if (filesystem != null) {_			return filesystem__		}_		else {_			throw new IllegalStateException("State backend has not been initialized.")__		}_	};gets,the,file,system,handle,for,the,file,system,that,stores,the,state,for,this,backend,return,this,backend,s,file,system,handle;public,file,system,get,file,system,if,filesystem,null,return,filesystem,else,throw,new,illegal,state,exception,state,backend,has,not,been,initialized
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1445247002;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()__		_		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}_		_		_		_		_		_		_		_		this.filesystem = FileSystem.get(checkpointDataUri)__		if (this.filesystem == null) {_			throw new IOException("Could not find a file system for the given scheme in the available configurations.")__		}__		URI fsURI = this.filesystem.getUri()__		try {_			URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__			this.basePath = new Path(baseURI)__		}_		catch (URISyntaxException e) {_			throw new IOException(_					String.format("Cannot create file system URI for checkpointDataUri %s and filesystem URI %s", _							checkpointDataUri, fsURI), e)__		}_	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,this,filesystem,file,system,get,checkpoint,data,uri,if,this,filesystem,null,throw,new,ioexception,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,uri,fs,uri,this,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,this,base,path,new,path,base,uri,catch,urisyntax,exception,e,throw,new,ioexception,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,checkpoint,data,uri,fs,uri,e
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1445849929;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		_		_		_		__		_		this.filesystem = FileSystem.get(checkpointDataUri)__		if (this.filesystem == null) {_			throw new IOException("Could not find a file system for the given scheme in the available configurations.")__		}__		URI fsURI = this.filesystem.getUri()__		try {_			URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__			this.basePath = new Path(baseURI)__		}_		catch (URISyntaxException e) {_			throw new IOException(_					String.format("Cannot create file system URI for checkpointDataUri %s and filesystem URI %s",_							checkpointDataUri, fsURI), e)__		}_	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,this,filesystem,file,system,get,checkpoint,data,uri,if,this,filesystem,null,throw,new,ioexception,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,uri,fs,uri,this,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,this,base,path,new,path,base,uri,catch,urisyntax,exception,e,throw,new,ioexception,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,checkpoint,data,uri,fs,uri,e
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1447461833;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()__		_		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}_		_		_		_		_		_		_		_		this.filesystem = FileSystem.get(checkpointDataUri)__		if (this.filesystem == null) {_			throw new IOException("Could not find a file system for the given scheme in the available configurations.")__		}__		URI fsURI = this.filesystem.getUri()__		try {_			URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__			this.basePath = new Path(baseURI)__		}_		catch (URISyntaxException e) {_			throw new IOException(_					String.format("Cannot create file system URI for checkpointDataUri %s and filesystem URI %s", _							checkpointDataUri, fsURI), e)__		}_	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,this,filesystem,file,system,get,checkpoint,data,uri,if,this,filesystem,null,throw,new,ioexception,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,uri,fs,uri,this,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,this,base,path,new,path,base,uri,catch,urisyntax,exception,e,throw,new,ioexception,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,checkpoint,data,uri,fs,uri,e
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1448126995;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		_		_		_		__		_		this.filesystem = FileSystem.get(checkpointDataUri)__		if (this.filesystem == null) {_			throw new IOException("Could not find a file system for the given scheme in the available configurations.")__		}__		URI fsURI = this.filesystem.getUri()__		try {_			URI baseURI = new URI(fsURI.getScheme(), fsURI.getAuthority(), path, null, null)__			this.basePath = new Path(baseURI)__		}_		catch (URISyntaxException e) {_			throw new IOException(_					String.format("Cannot create file system URI for checkpointDataUri %s and filesystem URI %s",_							checkpointDataUri, fsURI), e)__		}_	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,this,filesystem,file,system,get,checkpoint,data,uri,if,this,filesystem,null,throw,new,ioexception,could,not,find,a,file,system,for,the,given,scheme,in,the,available,configurations,uri,fs,uri,this,filesystem,get,uri,try,uri,base,uri,new,uri,fs,uri,get,scheme,fs,uri,get,authority,path,null,null,this,base,path,new,path,base,uri,catch,urisyntax,exception,e,throw,new,ioexception,string,format,cannot,create,file,system,uri,for,checkpoint,data,uri,s,and,filesystem,uri,s,checkpoint,data,uri,fs,uri,e
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1448560009;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1450718956;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1453721631;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1454939779;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1455222636;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1464608559;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1466716682;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1466716960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1467707828;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1470847490;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1470909547;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1472464402;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1472680767;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1474462558;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1475571578;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1483656313;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1487264183;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1487350260;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1488534675;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD, false)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,false
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1489497957;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD, false)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,false
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1489501613;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1506954607;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD, false)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,false
FsStateBackend -> public FsStateBackend(URI checkpointDataUri) throws IOException;1510579905;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD, true)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,true
FsStateBackend -> public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) throws IOException;1488534675;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) throws IOException {_		this(checkpointDataUri.toUri(), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,boolean,asynchronous,snapshots,throws,ioexception,this,checkpoint,data,uri,to,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) throws IOException;1489497957;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) throws IOException {_		this(checkpointDataUri.toUri(), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,boolean,asynchronous,snapshots,throws,ioexception,this,checkpoint,data,uri,to,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) throws IOException;1506954607;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) throws IOException {_		this(checkpointDataUri.toUri(), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,boolean,asynchronous,snapshots,throws,ioexception,this,checkpoint,data,uri,to,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) throws IOException;1510579905;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri, boolean asynchronousSnapshots) throws IOException {_		this(checkpointDataUri.toUri(), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,boolean,asynchronous,snapshots,throws,ioexception,this,checkpoint,data,uri,to,uri,asynchronous,snapshots
FsStateBackend -> @Deprecated 	public Path getBasePath();1508951050;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.__@deprecated Deprecated in favor of {@link #getCheckpointPath()}.;@Deprecated_	public Path getBasePath() {_		return getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints,deprecated,deprecated,in,favor,of,link,get,checkpoint,path;deprecated,public,path,get,base,path,return,get,checkpoint,path
FsStateBackend -> @Deprecated 	public Path getBasePath();1509045960;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.__@deprecated Deprecated in favor of {@link #getCheckpointPath()}.;@Deprecated_	public Path getBasePath() {_		return getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints,deprecated,deprecated,in,favor,of,link,get,checkpoint,path;deprecated,public,path,get,base,path,return,get,checkpoint,path
FsStateBackend -> @Deprecated 	public Path getBasePath();1515600846;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.__@deprecated Deprecated in favor of {@link #getCheckpointPath()}.;@Deprecated_	public Path getBasePath() {_		return getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints,deprecated,deprecated,in,favor,of,link,get,checkpoint,path;deprecated,public,path,get,base,path,return,get,checkpoint,path
FsStateBackend -> @Deprecated 	public Path getBasePath();1517924641;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.__@deprecated Deprecated in favor of {@link #getCheckpointPath()}.;@Deprecated_	public Path getBasePath() {_		return getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints,deprecated,deprecated,in,favor,of,link,get,checkpoint,path;deprecated,public,path,get,base,path,return,get,checkpoint,path
FsStateBackend -> @Deprecated 	public Path getBasePath();1530638621;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.__@deprecated Deprecated in favor of {@link #getCheckpointPath()}.;@Deprecated_	public Path getBasePath() {_		return getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints,deprecated,deprecated,in,favor,of,link,get,checkpoint,path;deprecated,public,path,get,base,path,return,get,checkpoint,path
FsStateBackend -> @Deprecated 	public Path getBasePath();1530704629;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.__@deprecated Deprecated in favor of {@link #getCheckpointPath()}.;@Deprecated_	public Path getBasePath() {_		return getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints,deprecated,deprecated,in,favor,of,link,get,checkpoint,path;deprecated,public,path,get,base,path,return,get,checkpoint,path
FsStateBackend -> @Deprecated 	public Path getBasePath();1539939663;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.__@deprecated Deprecated in favor of {@link #getCheckpointPath()}.;@Deprecated_	public Path getBasePath() {_		return getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints,deprecated,deprecated,in,favor,of,link,get,checkpoint,path;deprecated,public,path,get,base,path,return,get,checkpoint,path
FsStateBackend -> @Deprecated 	public Path getBasePath();1550681446;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.__@deprecated Deprecated in favor of {@link #getCheckpointPath()}.;@Deprecated_	public Path getBasePath() {_		return getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints,deprecated,deprecated,in,favor,of,link,get,checkpoint,path;deprecated,public,path,get,base,path,return,get,checkpoint,path
FsStateBackend -> @Deprecated 	public Path getBasePath();1550863001;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.__@deprecated Deprecated in favor of {@link #getCheckpointPath()}.;@Deprecated_	public Path getBasePath() {_		return getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints,deprecated,deprecated,in,favor,of,link,get,checkpoint,path;deprecated,public,path,get,base,path,return,get,checkpoint,path
FsStateBackend -> private FsStateBackend(FsStateBackend original, Configuration configuration, ClassLoader classLoader);1550681446;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private FsStateBackend(FsStateBackend original, Configuration configuration, ClassLoader classLoader) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))___		final int sizeThreshold = original.fileStateThreshold >= 0 ?_				original.fileStateThreshold :_				configuration.getInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD)___		if (sizeThreshold >= 0 && sizeThreshold <= MAX_FILE_STATE_THRESHOLD) {_			this.fileStateThreshold = sizeThreshold__		}_		else {_			this.fileStateThreshold = CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()___			_			_			LoggerFactory.getLogger(AbstractFileStateBackend.class).warn(_					"Ignoring invalid file size threshold value ({}): {} - using default value {} instead.",_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.key(), sizeThreshold,_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue())__		}_	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,fs,state,backend,fs,state,backend,original,configuration,configuration,class,loader,class,loader,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options,final,int,size,threshold,original,file,state,threshold,0,original,file,state,threshold,configuration,get,integer,checkpointing,options,if,size,threshold,0,size,threshold,this,file,state,threshold,size,threshold,else,this,file,state,threshold,checkpointing,options,default,value,logger,factory,get,logger,abstract,file,state,backend,class,warn,ignoring,invalid,file,size,threshold,value,using,default,value,instead,checkpointing,options,key,size,threshold,checkpointing,options,default,value
FsStateBackend -> private FsStateBackend(FsStateBackend original, Configuration configuration, ClassLoader classLoader);1550863001;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private FsStateBackend(FsStateBackend original, Configuration configuration, ClassLoader classLoader) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))___		final int sizeThreshold = original.fileStateThreshold >= 0 ?_				original.fileStateThreshold :_				configuration.getInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD)___		if (sizeThreshold >= 0 && sizeThreshold <= MAX_FILE_STATE_THRESHOLD) {_			this.fileStateThreshold = sizeThreshold__		}_		else {_			this.fileStateThreshold = CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue()___			_			_			LoggerFactory.getLogger(AbstractFileStateBackend.class).warn(_					"Ignoring invalid file size threshold value ({}): {} - using default value {} instead.",_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.key(), sizeThreshold,_					CheckpointingOptions.FS_SMALL_FILE_THRESHOLD.defaultValue())__		}_	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,fs,state,backend,fs,state,backend,original,configuration,configuration,class,loader,class,loader,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options,final,int,size,threshold,original,file,state,threshold,0,original,file,state,threshold,configuration,get,integer,checkpointing,options,if,size,threshold,0,size,threshold,this,file,state,threshold,size,threshold,else,this,file,state,threshold,checkpointing,options,default,value,logger,factory,get,logger,abstract,file,state,backend,class,warn,ignoring,invalid,file,size,threshold,value,using,default,value,instead,checkpointing,options,key,size,threshold,checkpointing,options,default,value
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) throws IOException;1488534675;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD, asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,boolean,asynchronous,snapshots,throws,ioexception,this,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) throws IOException;1489497957;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD, asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,boolean,asynchronous,snapshots,throws,ioexception,this,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) throws IOException;1506954607;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD, asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,boolean,asynchronous,snapshots,throws,ioexception,this,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) throws IOException;1510579905;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(URI checkpointDataUri, boolean asynchronousSnapshots) throws IOException {_		this(checkpointDataUri, DEFAULT_FILE_STATE_THRESHOLD, asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,uri,checkpoint,data,uri,boolean,asynchronous,snapshots,throws,ioexception,this,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots);1508951050;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) {_		this(new Path(checkpointDataUri), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,string,checkpoint,data,uri,boolean,asynchronous,snapshots,this,new,path,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots);1509045960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) {_		this(new Path(checkpointDataUri), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,string,checkpoint,data,uri,boolean,asynchronous,snapshots,this,new,path,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots);1515600846;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) {_		this(new Path(checkpointDataUri), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,string,checkpoint,data,uri,boolean,asynchronous,snapshots,this,new,path,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots);1517924641;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) {_		this(new Path(checkpointDataUri), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,string,checkpoint,data,uri,boolean,asynchronous,snapshots,this,new,path,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots);1530638621;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) {_		this(new Path(checkpointDataUri), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,string,checkpoint,data,uri,boolean,asynchronous,snapshots,this,new,path,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots);1530704629;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) {_		this(new Path(checkpointDataUri), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,string,checkpoint,data,uri,boolean,asynchronous,snapshots,this,new,path,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots);1539939663;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) {_		this(new Path(checkpointDataUri), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,string,checkpoint,data,uri,boolean,asynchronous,snapshots,this,new,path,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots);1550681446;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) {_		this(new Path(checkpointDataUri), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,string,checkpoint,data,uri,boolean,asynchronous,snapshots,this,new,path,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots);1550863001;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public FsStateBackend(String checkpointDataUri, boolean asynchronousSnapshots) {_		this(new Path(checkpointDataUri), asynchronousSnapshots)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,fs,state,backend,string,checkpoint,data,uri,boolean,asynchronous,snapshots,this,new,path,checkpoint,data,uri,asynchronous,snapshots
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory);1508951050;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI. Optionally, this constructor accepts a default savepoint storage_directory to which savepoints are stored when no custom target path is give to the savepoint_command.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param defaultSavepointDirectory The default directory to store savepoints to. May be null.;public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory) {_		this(checkpointDataUri, defaultSavepointDirectory, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,optionally,this,constructor,accepts,a,default,savepoint,storage,directory,to,which,savepoints,are,stored,when,no,custom,target,path,is,give,to,the,savepoint,command,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,default,savepoint,directory,the,default,directory,to,store,savepoints,to,may,be,null;public,fs,state,backend,uri,checkpoint,data,uri,nullable,uri,default,savepoint,directory,this,checkpoint,data,uri,default,savepoint,directory,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory);1509045960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI. Optionally, this constructor accepts a default savepoint storage_directory to which savepoints are stored when no custom target path is give to the savepoint_command.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param defaultSavepointDirectory The default directory to store savepoints to. May be null.;public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory) {_		this(checkpointDataUri, defaultSavepointDirectory, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,optionally,this,constructor,accepts,a,default,savepoint,storage,directory,to,which,savepoints,are,stored,when,no,custom,target,path,is,give,to,the,savepoint,command,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,default,savepoint,directory,the,default,directory,to,store,savepoints,to,may,be,null;public,fs,state,backend,uri,checkpoint,data,uri,nullable,uri,default,savepoint,directory,this,checkpoint,data,uri,default,savepoint,directory,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory);1515600846;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI. Optionally, this constructor accepts a default savepoint storage_directory to which savepoints are stored when no custom target path is give to the savepoint_command.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param defaultSavepointDirectory The default directory to store savepoints to. May be null.;public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory) {_		this(checkpointDataUri, defaultSavepointDirectory, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,optionally,this,constructor,accepts,a,default,savepoint,storage,directory,to,which,savepoints,are,stored,when,no,custom,target,path,is,give,to,the,savepoint,command,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,default,savepoint,directory,the,default,directory,to,store,savepoints,to,may,be,null;public,fs,state,backend,uri,checkpoint,data,uri,nullable,uri,default,savepoint,directory,this,checkpoint,data,uri,default,savepoint,directory,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory);1517924641;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI. Optionally, this constructor accepts a default savepoint storage_directory to which savepoints are stored when no custom target path is give to the savepoint_command.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param defaultSavepointDirectory The default directory to store savepoints to. May be null.;public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory) {_		this(checkpointDataUri, defaultSavepointDirectory, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,optionally,this,constructor,accepts,a,default,savepoint,storage,directory,to,which,savepoints,are,stored,when,no,custom,target,path,is,give,to,the,savepoint,command,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,default,savepoint,directory,the,default,directory,to,store,savepoints,to,may,be,null;public,fs,state,backend,uri,checkpoint,data,uri,nullable,uri,default,savepoint,directory,this,checkpoint,data,uri,default,savepoint,directory,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory);1530638621;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI. Optionally, this constructor accepts a default savepoint storage_directory to which savepoints are stored when no custom target path is give to the savepoint_command.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param defaultSavepointDirectory The default directory to store savepoints to. May be null.;public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory) {_		this(checkpointDataUri, defaultSavepointDirectory, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,optionally,this,constructor,accepts,a,default,savepoint,storage,directory,to,which,savepoints,are,stored,when,no,custom,target,path,is,give,to,the,savepoint,command,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,default,savepoint,directory,the,default,directory,to,store,savepoints,to,may,be,null;public,fs,state,backend,uri,checkpoint,data,uri,nullable,uri,default,savepoint,directory,this,checkpoint,data,uri,default,savepoint,directory,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory);1530704629;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI. Optionally, this constructor accepts a default savepoint storage_directory to which savepoints are stored when no custom target path is give to the savepoint_command.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param defaultSavepointDirectory The default directory to store savepoints to. May be null.;public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory) {_		this(checkpointDataUri, defaultSavepointDirectory, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,optionally,this,constructor,accepts,a,default,savepoint,storage,directory,to,which,savepoints,are,stored,when,no,custom,target,path,is,give,to,the,savepoint,command,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,default,savepoint,directory,the,default,directory,to,store,savepoints,to,may,be,null;public,fs,state,backend,uri,checkpoint,data,uri,nullable,uri,default,savepoint,directory,this,checkpoint,data,uri,default,savepoint,directory,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory);1539939663;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI. Optionally, this constructor accepts a default savepoint storage_directory to which savepoints are stored when no custom target path is give to the savepoint_command.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param defaultSavepointDirectory The default directory to store savepoints to. May be null.;public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory) {_		this(checkpointDataUri, defaultSavepointDirectory, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,optionally,this,constructor,accepts,a,default,savepoint,storage,directory,to,which,savepoints,are,stored,when,no,custom,target,path,is,give,to,the,savepoint,command,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,default,savepoint,directory,the,default,directory,to,store,savepoints,to,may,be,null;public,fs,state,backend,uri,checkpoint,data,uri,nullable,uri,default,savepoint,directory,this,checkpoint,data,uri,default,savepoint,directory,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory);1550681446;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI. Optionally, this constructor accepts a default savepoint storage_directory to which savepoints are stored when no custom target path is give to the savepoint_command.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param defaultSavepointDirectory The default directory to store savepoints to. May be null.;public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory) {_		this(checkpointDataUri, defaultSavepointDirectory, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,optionally,this,constructor,accepts,a,default,savepoint,storage,directory,to,which,savepoints,are,stored,when,no,custom,target,path,is,give,to,the,savepoint,command,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,default,savepoint,directory,the,default,directory,to,store,savepoints,to,may,be,null;public,fs,state,backend,uri,checkpoint,data,uri,nullable,uri,default,savepoint,directory,this,checkpoint,data,uri,default,savepoint,directory,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory);1550863001;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI. Optionally, this constructor accepts a default savepoint storage_directory to which savepoints are stored when no custom target path is give to the savepoint_command.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param defaultSavepointDirectory The default directory to store savepoints to. May be null.;public FsStateBackend(URI checkpointDataUri, @Nullable URI defaultSavepointDirectory) {_		this(checkpointDataUri, defaultSavepointDirectory, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,optionally,this,constructor,accepts,a,default,savepoint,storage,directory,to,which,savepoints,are,stored,when,no,custom,target,path,is,give,to,the,savepoint,command,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,default,savepoint,directory,the,default,directory,to,store,savepoints,to,may,be,null;public,fs,state,backend,uri,checkpoint,data,uri,nullable,uri,default,savepoint,directory,this,checkpoint,data,uri,default,savepoint,directory,1,ternary,boolean,undefined
FsStateBackend -> private static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1506954607;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;private static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		return new Path(checkpointDataUri)__	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;private,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,return,new,path,checkpoint,data,uri
FsStateBackend -> private static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException;1510579905;Checks and normalizes the checkpoint data URI. This method first checks the validity of the_URI (scheme, path, availability of a matching file system) and then normalizes the URI_to a path.__<p>If the URI does not include an authority, but the file system configured for the URI has an_authority, then the normalized path will include this authority.__@param checkpointDataUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path._@throws IOException Thrown, if no file system can be found for the URI's scheme.;private static Path validateAndNormalizeUri(URI checkpointDataUri) throws IOException {_		final String scheme = checkpointDataUri.getScheme()__		final String path = checkpointDataUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_					"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the checkpoint data in is null. " +_					"Please specify a directory path for the checkpoint data.")__		}_		if (path.length() == 0 || path.equals("/")) {_			throw new IllegalArgumentException("Cannot use the root directory for checkpoints.")__		}__		return new Path(checkpointDataUri)__	};checks,and,normalizes,the,checkpoint,data,uri,this,method,first,checks,the,validity,of,the,uri,scheme,path,availability,of,a,matching,file,system,and,then,normalizes,the,uri,to,a,path,p,if,the,uri,does,not,include,an,authority,but,the,file,system,configured,for,the,uri,has,an,authority,then,the,normalized,path,will,include,this,authority,param,checkpoint,data,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,uri,s,scheme;private,static,path,validate,and,normalize,uri,uri,checkpoint,data,uri,throws,ioexception,final,string,scheme,checkpoint,data,uri,get,scheme,final,string,path,checkpoint,data,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,checkpoint,data,in,is,null,please,specify,a,directory,path,for,the,checkpoint,data,if,path,length,0,path,equals,throw,new,illegal,argument,exception,cannot,use,the,root,directory,for,checkpoints,return,new,path,checkpoint,data,uri
FsStateBackend -> @Nonnull 	@Override 	public Path getCheckpointPath();1508951050;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.;@Nonnull_	@Override_	public Path getCheckpointPath() {_		_		_		return super.getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints;nonnull,override,public,path,get,checkpoint,path,return,super,get,checkpoint,path
FsStateBackend -> @Nonnull 	@Override 	public Path getCheckpointPath();1509045960;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.;@Nonnull_	@Override_	public Path getCheckpointPath() {_		_		_		return super.getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints;nonnull,override,public,path,get,checkpoint,path,return,super,get,checkpoint,path
FsStateBackend -> @Nonnull 	@Override 	public Path getCheckpointPath();1515600846;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.;@Nonnull_	@Override_	public Path getCheckpointPath() {_		_		_		return super.getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints;nonnull,override,public,path,get,checkpoint,path,return,super,get,checkpoint,path
FsStateBackend -> @Nonnull 	@Override 	public Path getCheckpointPath();1517924641;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.;@Nonnull_	@Override_	public Path getCheckpointPath() {_		_		_		return super.getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints;nonnull,override,public,path,get,checkpoint,path,return,super,get,checkpoint,path
FsStateBackend -> @Nonnull 	@Override 	public Path getCheckpointPath();1530638621;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.;@Nonnull_	@Override_	public Path getCheckpointPath() {_		_		_		return super.getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints;nonnull,override,public,path,get,checkpoint,path,return,super,get,checkpoint,path
FsStateBackend -> @Nonnull 	@Override 	public Path getCheckpointPath();1530704629;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.;@Nonnull_	@Override_	public Path getCheckpointPath() {_		_		_		return super.getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints;nonnull,override,public,path,get,checkpoint,path,return,super,get,checkpoint,path
FsStateBackend -> @Nonnull 	@Override 	public Path getCheckpointPath();1539939663;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.;@Nonnull_	@Override_	public Path getCheckpointPath() {_		_		_		return super.getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints;nonnull,override,public,path,get,checkpoint,path,return,super,get,checkpoint,path
FsStateBackend -> @Nonnull 	@Override 	public Path getCheckpointPath();1550681446;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.;@Nonnull_	@Override_	public Path getCheckpointPath() {_		_		_		return super.getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints;nonnull,override,public,path,get,checkpoint,path,return,super,get,checkpoint,path
FsStateBackend -> @Nonnull 	@Override 	public Path getCheckpointPath();1550863001;Gets the base directory where all the checkpoints are stored._The job-specific checkpoint directory is created inside this directory.__@return The base directory for checkpoints.;@Nonnull_	@Override_	public Path getCheckpointPath() {_		_		_		return super.getCheckpointPath()__	};gets,the,base,directory,where,all,the,checkpoints,are,stored,the,job,specific,checkpoint,directory,is,created,inside,this,directory,return,the,base,directory,for,checkpoints;nonnull,override,public,path,get,checkpoint,path,return,super,get,checkpoint,path
FsStateBackend -> public Path getCheckpointDirectory();1445247002;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public Path getCheckpointDirectory();1445849929;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public Path getCheckpointDirectory();1447461833;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public Path getCheckpointDirectory();1448126995;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public Path getCheckpointDirectory();1448560009;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public Path getCheckpointDirectory();1450718956;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public Path getCheckpointDirectory();1453721631;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public Path getCheckpointDirectory();1454939779;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public Path getCheckpointDirectory();1455222636;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public Path getCheckpointDirectory();1464608559;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public Path getCheckpointDirectory();1466716682;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public Path getCheckpointDirectory();1466716960;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public Path getCheckpointDirectory();1467707828;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public Path getCheckpointDirectory();1470909547;Gets the directory where this state backend stores its checkpoint data. Will be null if_the state backend has not been initialized.__@return The directory where this state backend stores its checkpoint data.;public Path getCheckpointDirectory() {_		return checkpointDirectory__	};gets,the,directory,where,this,state,backend,stores,its,checkpoint,data,will,be,null,if,the,state,backend,has,not,been,initialized,return,the,directory,where,this,state,backend,stores,its,checkpoint,data;public,path,get,checkpoint,directory,return,checkpoint,directory
FsStateBackend -> public int getFileStateSizeThreshold();1448560009;Gets the size (in bytes) above which the state will written to files. State whose size_is below this threshold will be directly stored with the metadata_(the state handles), rather than in files. This threshold helps to prevent an accumulation_of small files for small states.__@return The threshold (in bytes) above which state is written to files.;public int getFileStateSizeThreshold() {_		return fileStateThreshold__	};gets,the,size,in,bytes,above,which,the,state,will,written,to,files,state,whose,size,is,below,this,threshold,will,be,directly,stored,with,the,metadata,the,state,handles,rather,than,in,files,this,threshold,helps,to,prevent,an,accumulation,of,small,files,for,small,states,return,the,threshold,in,bytes,above,which,state,is,written,to,files;public,int,get,file,state,size,threshold,return,file,state,threshold
FsStateBackend -> public int getFileStateSizeThreshold();1450718956;Gets the size (in bytes) above which the state will written to files. State whose size_is below this threshold will be directly stored with the metadata_(the state handles), rather than in files. This threshold helps to prevent an accumulation_of small files for small states.__@return The threshold (in bytes) above which state is written to files.;public int getFileStateSizeThreshold() {_		return fileStateThreshold__	};gets,the,size,in,bytes,above,which,the,state,will,written,to,files,state,whose,size,is,below,this,threshold,will,be,directly,stored,with,the,metadata,the,state,handles,rather,than,in,files,this,threshold,helps,to,prevent,an,accumulation,of,small,files,for,small,states,return,the,threshold,in,bytes,above,which,state,is,written,to,files;public,int,get,file,state,size,threshold,return,file,state,threshold
FsStateBackend -> public int getFileStateSizeThreshold();1453721631;Gets the size (in bytes) above which the state will written to files. State whose size_is below this threshold will be directly stored with the metadata_(the state handles), rather than in files. This threshold helps to prevent an accumulation_of small files for small states.__@return The threshold (in bytes) above which state is written to files.;public int getFileStateSizeThreshold() {_		return fileStateThreshold__	};gets,the,size,in,bytes,above,which,the,state,will,written,to,files,state,whose,size,is,below,this,threshold,will,be,directly,stored,with,the,metadata,the,state,handles,rather,than,in,files,this,threshold,helps,to,prevent,an,accumulation,of,small,files,for,small,states,return,the,threshold,in,bytes,above,which,state,is,written,to,files;public,int,get,file,state,size,threshold,return,file,state,threshold
FsStateBackend -> public int getFileStateSizeThreshold();1454939779;Gets the size (in bytes) above which the state will written to files. State whose size_is below this threshold will be directly stored with the metadata_(the state handles), rather than in files. This threshold helps to prevent an accumulation_of small files for small states.__@return The threshold (in bytes) above which state is written to files.;public int getFileStateSizeThreshold() {_		return fileStateThreshold__	};gets,the,size,in,bytes,above,which,the,state,will,written,to,files,state,whose,size,is,below,this,threshold,will,be,directly,stored,with,the,metadata,the,state,handles,rather,than,in,files,this,threshold,helps,to,prevent,an,accumulation,of,small,files,for,small,states,return,the,threshold,in,bytes,above,which,state,is,written,to,files;public,int,get,file,state,size,threshold,return,file,state,threshold
FsStateBackend -> public int getFileStateSizeThreshold();1455222636;Gets the size (in bytes) above which the state will written to files. State whose size_is below this threshold will be directly stored with the metadata_(the state handles), rather than in files. This threshold helps to prevent an accumulation_of small files for small states.__@return The threshold (in bytes) above which state is written to files.;public int getFileStateSizeThreshold() {_		return fileStateThreshold__	};gets,the,size,in,bytes,above,which,the,state,will,written,to,files,state,whose,size,is,below,this,threshold,will,be,directly,stored,with,the,metadata,the,state,handles,rather,than,in,files,this,threshold,helps,to,prevent,an,accumulation,of,small,files,for,small,states,return,the,threshold,in,bytes,above,which,state,is,written,to,files;public,int,get,file,state,size,threshold,return,file,state,threshold
FsStateBackend -> public int getFileStateSizeThreshold();1464608559;Gets the size (in bytes) above which the state will written to files. State whose size_is below this threshold will be directly stored with the metadata_(the state handles), rather than in files. This threshold helps to prevent an accumulation_of small files for small states.__@return The threshold (in bytes) above which state is written to files.;public int getFileStateSizeThreshold() {_		return fileStateThreshold__	};gets,the,size,in,bytes,above,which,the,state,will,written,to,files,state,whose,size,is,below,this,threshold,will,be,directly,stored,with,the,metadata,the,state,handles,rather,than,in,files,this,threshold,helps,to,prevent,an,accumulation,of,small,files,for,small,states,return,the,threshold,in,bytes,above,which,state,is,written,to,files;public,int,get,file,state,size,threshold,return,file,state,threshold
FsStateBackend -> public int getFileStateSizeThreshold();1466716682;Gets the size (in bytes) above which the state will written to files. State whose size_is below this threshold will be directly stored with the metadata_(the state handles), rather than in files. This threshold helps to prevent an accumulation_of small files for small states.__@return The threshold (in bytes) above which state is written to files.;public int getFileStateSizeThreshold() {_		return fileStateThreshold__	};gets,the,size,in,bytes,above,which,the,state,will,written,to,files,state,whose,size,is,below,this,threshold,will,be,directly,stored,with,the,metadata,the,state,handles,rather,than,in,files,this,threshold,helps,to,prevent,an,accumulation,of,small,files,for,small,states,return,the,threshold,in,bytes,above,which,state,is,written,to,files;public,int,get,file,state,size,threshold,return,file,state,threshold
FsStateBackend -> public int getFileStateSizeThreshold();1466716960;Gets the size (in bytes) above which the state will written to files. State whose size_is below this threshold will be directly stored with the metadata_(the state handles), rather than in files. This threshold helps to prevent an accumulation_of small files for small states.__@return The threshold (in bytes) above which state is written to files.;public int getFileStateSizeThreshold() {_		return fileStateThreshold__	};gets,the,size,in,bytes,above,which,the,state,will,written,to,files,state,whose,size,is,below,this,threshold,will,be,directly,stored,with,the,metadata,the,state,handles,rather,than,in,files,this,threshold,helps,to,prevent,an,accumulation,of,small,files,for,small,states,return,the,threshold,in,bytes,above,which,state,is,written,to,files;public,int,get,file,state,size,threshold,return,file,state,threshold
FsStateBackend -> public int getFileStateSizeThreshold();1467707828;Gets the size (in bytes) above which the state will written to files. State whose size_is below this threshold will be directly stored with the metadata_(the state handles), rather than in files. This threshold helps to prevent an accumulation_of small files for small states.__@return The threshold (in bytes) above which state is written to files.;public int getFileStateSizeThreshold() {_		return fileStateThreshold__	};gets,the,size,in,bytes,above,which,the,state,will,written,to,files,state,whose,size,is,below,this,threshold,will,be,directly,stored,with,the,metadata,the,state,handles,rather,than,in,files,this,threshold,helps,to,prevent,an,accumulation,of,small,files,for,small,states,return,the,threshold,in,bytes,above,which,state,is,written,to,files;public,int,get,file,state,size,threshold,return,file,state,threshold
FsStateBackend -> public int getFileStateSizeThreshold();1470909547;Gets the size (in bytes) above which the state will written to files. State whose size_is below this threshold will be directly stored with the metadata_(the state handles), rather than in files. This threshold helps to prevent an accumulation_of small files for small states.__@return The threshold (in bytes) above which state is written to files.;public int getFileStateSizeThreshold() {_		return fileStateThreshold__	};gets,the,size,in,bytes,above,which,the,state,will,written,to,files,state,whose,size,is,below,this,threshold,will,be,directly,stored,with,the,metadata,the,state,handles,rather,than,in,files,this,threshold,helps,to,prevent,an,accumulation,of,small,files,for,small,states,return,the,threshold,in,bytes,above,which,state,is,written,to,files;public,int,get,file,state,size,threshold,return,file,state,threshold
FsStateBackend -> @Override 	public FsStateBackend configure(Configuration config);1508951050;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public FsStateBackend configure(Configuration config) {_		return new FsStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,fs,state,backend,configure,configuration,config,return,new,fs,state,backend,this,config
FsStateBackend -> @Override 	public FsStateBackend configure(Configuration config);1509045960;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public FsStateBackend configure(Configuration config) {_		return new FsStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,fs,state,backend,configure,configuration,config,return,new,fs,state,backend,this,config
FsStateBackend -> @Override 	public FsStateBackend configure(Configuration config);1515600846;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public FsStateBackend configure(Configuration config) {_		return new FsStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,fs,state,backend,configure,configuration,config,return,new,fs,state,backend,this,config
FsStateBackend -> @Override 	public FsStateBackend configure(Configuration config);1517924641;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public FsStateBackend configure(Configuration config) {_		return new FsStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,fs,state,backend,configure,configuration,config,return,new,fs,state,backend,this,config
FsStateBackend -> @Override 	public FsStateBackend configure(Configuration config);1530638621;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public FsStateBackend configure(Configuration config) {_		return new FsStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,fs,state,backend,configure,configuration,config,return,new,fs,state,backend,this,config
FsStateBackend -> @Override 	public FsStateBackend configure(Configuration config);1530704629;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public FsStateBackend configure(Configuration config) {_		return new FsStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,fs,state,backend,configure,configuration,config,return,new,fs,state,backend,this,config
FsStateBackend -> @Override 	public FsStateBackend configure(Configuration config);1539939663;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public FsStateBackend configure(Configuration config) {_		return new FsStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,fs,state,backend,configure,configuration,config,return,new,fs,state,backend,this,config
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1445247002;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1445849929;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1447461833;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1448126995;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1448560009;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1450718956;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1453721631;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to teh checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,teh,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1454939779;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1455222636;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1464608559;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1466716682;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1466716960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1467707828;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1470847490;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1470909547;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1472464402;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1472680767;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1474462558;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1475571578;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1483656313;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1487264183;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1487350260;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1488534675;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1489497957;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1489501613;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1506954607;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> public FsStateBackend(Path checkpointDataUri) throws IOException;1510579905;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsStateBackend(Path checkpointDataUri) throws IOException {_		this(checkpointDataUri.toUri())__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,state,backend,path,checkpoint,data,uri,throws,ioexception,this,checkpoint,data,uri,to,uri
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1445247002;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					outStream.close()__					return filePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,out,stream,close,return,file,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1445849929;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					outStream.close()__					return filePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,out,stream,close,return,file,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1447461833;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					outStream.close()__					return filePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,out,stream,close,return,file,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1448126995;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					outStream.close()__					return filePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,out,stream,close,return,file,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1448560009;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					flush()__					outStream.close()__					return statePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,flush,out,stream,close,return,state,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1450718956;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					flush()__					outStream.close()__					return statePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,flush,out,stream,close,return,state,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1453721631;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					flush()__					outStream.close()__					return statePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,flush,out,stream,close,return,state,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1454939779;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					flush()__					outStream.close()__					return statePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,flush,out,stream,close,return,state,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1455222636;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					flush()__					outStream.close()__					return statePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,flush,out,stream,close,return,state,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1464608559;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					flush()__					outStream.close()__					return statePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,flush,out,stream,close,return,state,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1466716682;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					flush()__					outStream.close()__					return statePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,flush,out,stream,close,return,state,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1466716960;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					flush()__					outStream.close()__					return statePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,flush,out,stream,close,return,state,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1467707828;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					flush()__					outStream.close()__					return statePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,flush,out,stream,close,return,state,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> FsCheckpointStateOutputStream -> public Path closeAndGetPath() throws IOException;1470909547;Closes the stream and returns the path to the file that contains the stream's data._@return The path to the file that contains the stream's data._@throws IOException Thrown if the stream cannot be successfully closed.;public Path closeAndGetPath() throws IOException {_			synchronized (this) {_				if (!closed) {_					closed = true__					flush()__					outStream.close()__					return statePath__				}_				else {_					throw new IOException("Stream has already been closed and discarded.")__				}_			}_		};closes,the,stream,and,returns,the,path,to,the,file,that,contains,the,stream,s,data,return,the,path,to,the,file,that,contains,the,stream,s,data,throws,ioexception,thrown,if,the,stream,cannot,be,successfully,closed;public,path,close,and,get,path,throws,ioexception,synchronized,this,if,closed,closed,true,flush,out,stream,close,return,state,path,else,throw,new,ioexception,stream,has,already,been,closed,and,discarded
FsStateBackend -> public FsStateBackend(URI checkpointDataUri);1508951050;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(URI checkpointDataUri) {_		this(checkpointDataUri, null, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,uri,checkpoint,data,uri,this,checkpoint,data,uri,null,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri);1509045960;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(URI checkpointDataUri) {_		this(checkpointDataUri, null, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,uri,checkpoint,data,uri,this,checkpoint,data,uri,null,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri);1515600846;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(URI checkpointDataUri) {_		this(checkpointDataUri, null, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,uri,checkpoint,data,uri,this,checkpoint,data,uri,null,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri);1517924641;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(URI checkpointDataUri) {_		this(checkpointDataUri, null, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,uri,checkpoint,data,uri,this,checkpoint,data,uri,null,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri);1530638621;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(URI checkpointDataUri) {_		this(checkpointDataUri, null, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,uri,checkpoint,data,uri,this,checkpoint,data,uri,null,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri);1530704629;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(URI checkpointDataUri) {_		this(checkpointDataUri, null, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,uri,checkpoint,data,uri,this,checkpoint,data,uri,null,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri);1539939663;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(URI checkpointDataUri) {_		this(checkpointDataUri, null, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,uri,checkpoint,data,uri,this,checkpoint,data,uri,null,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri);1550681446;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(URI checkpointDataUri) {_		this(checkpointDataUri, null, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,uri,checkpoint,data,uri,this,checkpoint,data,uri,null,1,ternary,boolean,undefined
FsStateBackend -> public FsStateBackend(URI checkpointDataUri);1550863001;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory.;public FsStateBackend(URI checkpointDataUri) {_		this(checkpointDataUri, null, -1, TernaryBoolean.UNDEFINED)__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory;public,fs,state,backend,uri,checkpoint,data,uri,this,checkpoint,data,uri,null,1,ternary,boolean,undefined
