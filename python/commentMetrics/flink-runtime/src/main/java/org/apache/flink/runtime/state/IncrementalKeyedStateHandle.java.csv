# id;timestamp;commentText;codeText;commentWords;codeWords
IncrementalKeyedStateHandle -> @VisibleForTesting 	public SharedStateRegistryKey createSharedStateRegistryKeyFromFileName(StateHandleID shId);1495184252;Create a unique key to register one of our shared state handles.;@VisibleForTesting_	public SharedStateRegistryKey createSharedStateRegistryKeyFromFileName(StateHandleID shId) {_		return new SharedStateRegistryKey(operatorIdentifier + '-' + keyGroupRange, shId)__	};create,a,unique,key,to,register,one,of,our,shared,state,handles;visible,for,testing,public,shared,state,registry,key,create,shared,state,registry,key,from,file,name,state,handle,id,sh,id,return,new,shared,state,registry,key,operator,identifier,key,group,range,sh,id
IncrementalKeyedStateHandle -> @VisibleForTesting 	public SharedStateRegistryKey createSharedStateRegistryKeyFromFileName(StateHandleID shId);1500040329;Create a unique key to register one of our shared state handles.;@VisibleForTesting_	public SharedStateRegistryKey createSharedStateRegistryKeyFromFileName(StateHandleID shId) {_		return new SharedStateRegistryKey(String.valueOf(backendIdentifier) + '-' + keyGroupRange, shId)__	};create,a,unique,key,to,register,one,of,our,shared,state,handles;visible,for,testing,public,shared,state,registry,key,create,shared,state,registry,key,from,file,name,state,handle,id,sh,id,return,new,shared,state,registry,key,string,value,of,backend,identifier,key,group,range,sh,id
IncrementalKeyedStateHandle -> @VisibleForTesting 	public SharedStateRegistryKey createSharedStateRegistryKeyFromFileName(StateHandleID shId);1502801814;Create a unique key to register one of our shared state handles.;@VisibleForTesting_	public SharedStateRegistryKey createSharedStateRegistryKeyFromFileName(StateHandleID shId) {_		return new SharedStateRegistryKey(String.valueOf(backendIdentifier) + '-' + keyGroupRange, shId)__	};create,a,unique,key,to,register,one,of,our,shared,state,handles;visible,for,testing,public,shared,state,registry,key,create,shared,state,registry,key,from,file,name,state,handle,id,sh,id,return,new,shared,state,registry,key,string,value,of,backend,identifier,key,group,range,sh,id
IncrementalKeyedStateHandle -> @VisibleForTesting 	public SharedStateRegistryKey createSharedStateRegistryKeyFromFileName(StateHandleID shId);1517489696;Create a unique key to register one of our shared state handles.;@VisibleForTesting_	public SharedStateRegistryKey createSharedStateRegistryKeyFromFileName(StateHandleID shId) {_		return new SharedStateRegistryKey(String.valueOf(backendIdentifier) + '-' + keyGroupRange, shId)__	};create,a,unique,key,to,register,one,of,our,shared,state,handles;visible,for,testing,public,shared,state,registry,key,create,shared,state,registry,key,from,file,name,state,handle,id,sh,id,return,new,shared,state,registry,key,string,value,of,backend,identifier,key,group,range,sh,id
IncrementalKeyedStateHandle -> @VisibleForTesting 	@Override 	public int hashCode();1494762590;This method should only be called in tests! This should never serve as key in a hash map.;@VisibleForTesting_	@Override_	public int hashCode() {_		int result = getOperatorIdentifier().hashCode()__		result = 31 * result + getKeyGroupRange().hashCode()__		result = 31 * result + (int) (getCheckpointId() ^ (getCheckpointId() >>> 32))__		result = 31 * result + getCreatedSharedState().hashCode()__		result = 31 * result + getReferencedSharedState().hashCode()__		result = 31 * result + getPrivateState().hashCode()__		result = 31 * result + getMetaStateHandle().hashCode()__		return result__	};this,method,should,only,be,called,in,tests,this,should,never,serve,as,key,in,a,hash,map;visible,for,testing,override,public,int,hash,code,int,result,get,operator,identifier,hash,code,result,31,result,get,key,group,range,hash,code,result,31,result,int,get,checkpoint,id,get,checkpoint,id,32,result,31,result,get,created,shared,state,hash,code,result,31,result,get,referenced,shared,state,hash,code,result,31,result,get,private,state,hash,code,result,31,result,get,meta,state,handle,hash,code,return,result
IncrementalKeyedStateHandle -> @VisibleForTesting 	@Override 	public int hashCode();1495184252;This method should only be called in tests! This should never serve as key in a hash map.;@VisibleForTesting_	@Override_	public int hashCode() {_		int result = getOperatorIdentifier().hashCode()__		result = 31 * result + getKeyGroupRange().hashCode()__		result = 31 * result + (int) (getCheckpointId() ^ (getCheckpointId() >>> 32))__		result = 31 * result + getSharedState().hashCode()__		result = 31 * result + getPrivateState().hashCode()__		result = 31 * result + getMetaStateHandle().hashCode()__		return result__	};this,method,should,only,be,called,in,tests,this,should,never,serve,as,key,in,a,hash,map;visible,for,testing,override,public,int,hash,code,int,result,get,operator,identifier,hash,code,result,31,result,get,key,group,range,hash,code,result,31,result,int,get,checkpoint,id,get,checkpoint,id,32,result,31,result,get,shared,state,hash,code,result,31,result,get,private,state,hash,code,result,31,result,get,meta,state,handle,hash,code,return,result
IncrementalKeyedStateHandle -> @VisibleForTesting 	@Override 	public int hashCode();1500040329;This method should only be called in tests! This should never serve as key in a hash map.;@VisibleForTesting_	@Override_	public int hashCode() {_		int result = getBackendIdentifier().hashCode()__		result = 31 * result + getKeyGroupRange().hashCode()__		result = 31 * result + (int) (getCheckpointId() ^ (getCheckpointId() >>> 32))__		result = 31 * result + getSharedState().hashCode()__		result = 31 * result + getPrivateState().hashCode()__		result = 31 * result + getMetaStateHandle().hashCode()__		return result__	};this,method,should,only,be,called,in,tests,this,should,never,serve,as,key,in,a,hash,map;visible,for,testing,override,public,int,hash,code,int,result,get,backend,identifier,hash,code,result,31,result,get,key,group,range,hash,code,result,31,result,int,get,checkpoint,id,get,checkpoint,id,32,result,31,result,get,shared,state,hash,code,result,31,result,get,private,state,hash,code,result,31,result,get,meta,state,handle,hash,code,return,result
IncrementalKeyedStateHandle -> @VisibleForTesting 	@Override 	public int hashCode();1502801814;This method should only be called in tests! This should never serve as key in a hash map.;@VisibleForTesting_	@Override_	public int hashCode() {_		int result = getBackendIdentifier().hashCode()__		result = 31 * result + getKeyGroupRange().hashCode()__		result = 31 * result + (int) (getCheckpointId() ^ (getCheckpointId() >>> 32))__		result = 31 * result + getSharedState().hashCode()__		result = 31 * result + getPrivateState().hashCode()__		result = 31 * result + getMetaStateHandle().hashCode()__		return result__	};this,method,should,only,be,called,in,tests,this,should,never,serve,as,key,in,a,hash,map;visible,for,testing,override,public,int,hash,code,int,result,get,backend,identifier,hash,code,result,31,result,get,key,group,range,hash,code,result,31,result,int,get,checkpoint,id,get,checkpoint,id,32,result,31,result,get,shared,state,hash,code,result,31,result,get,private,state,hash,code,result,31,result,get,meta,state,handle,hash,code,return,result
IncrementalKeyedStateHandle -> @VisibleForTesting 	@Override 	public int hashCode();1517489696;This method should only be called in tests! This should never serve as key in a hash map.;@VisibleForTesting_	@Override_	public int hashCode() {_		int result = getBackendIdentifier().hashCode()__		result = 31 * result + getKeyGroupRange().hashCode()__		result = 31 * result + (int) (getCheckpointId() ^ (getCheckpointId() >>> 32))__		result = 31 * result + getSharedState().hashCode()__		result = 31 * result + getPrivateState().hashCode()__		result = 31 * result + getMetaStateHandle().hashCode()__		return result__	};this,method,should,only,be,called,in,tests,this,should,never,serve,as,key,in,a,hash,map;visible,for,testing,override,public,int,hash,code,int,result,get,backend,identifier,hash,code,result,31,result,get,key,group,range,hash,code,result,31,result,int,get,checkpoint,id,get,checkpoint,id,32,result,31,result,get,shared,state,hash,code,result,31,result,get,private,state,hash,code,result,31,result,get,meta,state,handle,hash,code,return,result
IncrementalKeyedStateHandle -> @VisibleForTesting 	@Override 	public boolean equals(Object o);1494762590;This method is should only be called in tests! This should never serve as key in a hash map.;@VisibleForTesting_	@Override_	public boolean equals(Object o) {_		if (this == o) {_			return true__		}_		if (o == null || getClass() != o.getClass()) {_			return false__		}__		IncrementalKeyedStateHandle that = (IncrementalKeyedStateHandle) o___		if (getCheckpointId() != that.getCheckpointId()) {_			return false__		}_		if (!getOperatorIdentifier().equals(that.getOperatorIdentifier())) {_			return false__		}_		if (!getKeyGroupRange().equals(that.getKeyGroupRange())) {_			return false__		}_		if (!getCreatedSharedState().equals(that.getCreatedSharedState())) {_			return false__		}_		if (!getReferencedSharedState().equals(that.getReferencedSharedState())) {_			return false__		}_		if (!getPrivateState().equals(that.getPrivateState())) {_			return false__		}_		return getMetaStateHandle().equals(that.getMetaStateHandle())__	};this,method,is,should,only,be,called,in,tests,this,should,never,serve,as,key,in,a,hash,map;visible,for,testing,override,public,boolean,equals,object,o,if,this,o,return,true,if,o,null,get,class,o,get,class,return,false,incremental,keyed,state,handle,that,incremental,keyed,state,handle,o,if,get,checkpoint,id,that,get,checkpoint,id,return,false,if,get,operator,identifier,equals,that,get,operator,identifier,return,false,if,get,key,group,range,equals,that,get,key,group,range,return,false,if,get,created,shared,state,equals,that,get,created,shared,state,return,false,if,get,referenced,shared,state,equals,that,get,referenced,shared,state,return,false,if,get,private,state,equals,that,get,private,state,return,false,return,get,meta,state,handle,equals,that,get,meta,state,handle
IncrementalKeyedStateHandle -> @VisibleForTesting 	@Override 	public boolean equals(Object o);1495184252;This method is should only be called in tests! This should never serve as key in a hash map.;@VisibleForTesting_	@Override_	public boolean equals(Object o) {_		if (this == o) {_			return true__		}_		if (o == null || getClass() != o.getClass()) {_			return false__		}__		IncrementalKeyedStateHandle that = (IncrementalKeyedStateHandle) o___		if (getCheckpointId() != that.getCheckpointId()) {_			return false__		}_		if (!getOperatorIdentifier().equals(that.getOperatorIdentifier())) {_			return false__		}_		if (!getKeyGroupRange().equals(that.getKeyGroupRange())) {_			return false__		}_		if (!getSharedState().equals(that.getSharedState())) {_			return false__		}_		if (!getPrivateState().equals(that.getPrivateState())) {_			return false__		}_		return getMetaStateHandle().equals(that.getMetaStateHandle())__	};this,method,is,should,only,be,called,in,tests,this,should,never,serve,as,key,in,a,hash,map;visible,for,testing,override,public,boolean,equals,object,o,if,this,o,return,true,if,o,null,get,class,o,get,class,return,false,incremental,keyed,state,handle,that,incremental,keyed,state,handle,o,if,get,checkpoint,id,that,get,checkpoint,id,return,false,if,get,operator,identifier,equals,that,get,operator,identifier,return,false,if,get,key,group,range,equals,that,get,key,group,range,return,false,if,get,shared,state,equals,that,get,shared,state,return,false,if,get,private,state,equals,that,get,private,state,return,false,return,get,meta,state,handle,equals,that,get,meta,state,handle
IncrementalKeyedStateHandle -> @VisibleForTesting 	@Override 	public boolean equals(Object o);1500040329;This method is should only be called in tests! This should never serve as key in a hash map.;@VisibleForTesting_	@Override_	public boolean equals(Object o) {_		if (this == o) {_			return true__		}_		if (o == null || getClass() != o.getClass()) {_			return false__		}__		IncrementalKeyedStateHandle that = (IncrementalKeyedStateHandle) o___		if (getCheckpointId() != that.getCheckpointId()) {_			return false__		}_		if (!getBackendIdentifier().equals(that.getBackendIdentifier())) {_			return false__		}_		if (!getKeyGroupRange().equals(that.getKeyGroupRange())) {_			return false__		}_		if (!getSharedState().equals(that.getSharedState())) {_			return false__		}_		if (!getPrivateState().equals(that.getPrivateState())) {_			return false__		}_		return getMetaStateHandle().equals(that.getMetaStateHandle())__	};this,method,is,should,only,be,called,in,tests,this,should,never,serve,as,key,in,a,hash,map;visible,for,testing,override,public,boolean,equals,object,o,if,this,o,return,true,if,o,null,get,class,o,get,class,return,false,incremental,keyed,state,handle,that,incremental,keyed,state,handle,o,if,get,checkpoint,id,that,get,checkpoint,id,return,false,if,get,backend,identifier,equals,that,get,backend,identifier,return,false,if,get,key,group,range,equals,that,get,key,group,range,return,false,if,get,shared,state,equals,that,get,shared,state,return,false,if,get,private,state,equals,that,get,private,state,return,false,return,get,meta,state,handle,equals,that,get,meta,state,handle
IncrementalKeyedStateHandle -> @VisibleForTesting 	@Override 	public boolean equals(Object o);1502801814;This method is should only be called in tests! This should never serve as key in a hash map.;@VisibleForTesting_	@Override_	public boolean equals(Object o) {_		if (this == o) {_			return true__		}_		if (o == null || getClass() != o.getClass()) {_			return false__		}__		IncrementalKeyedStateHandle that = (IncrementalKeyedStateHandle) o___		if (getCheckpointId() != that.getCheckpointId()) {_			return false__		}_		if (!getBackendIdentifier().equals(that.getBackendIdentifier())) {_			return false__		}_		if (!getKeyGroupRange().equals(that.getKeyGroupRange())) {_			return false__		}_		if (!getSharedState().equals(that.getSharedState())) {_			return false__		}_		if (!getPrivateState().equals(that.getPrivateState())) {_			return false__		}_		return getMetaStateHandle().equals(that.getMetaStateHandle())__	};this,method,is,should,only,be,called,in,tests,this,should,never,serve,as,key,in,a,hash,map;visible,for,testing,override,public,boolean,equals,object,o,if,this,o,return,true,if,o,null,get,class,o,get,class,return,false,incremental,keyed,state,handle,that,incremental,keyed,state,handle,o,if,get,checkpoint,id,that,get,checkpoint,id,return,false,if,get,backend,identifier,equals,that,get,backend,identifier,return,false,if,get,key,group,range,equals,that,get,key,group,range,return,false,if,get,shared,state,equals,that,get,shared,state,return,false,if,get,private,state,equals,that,get,private,state,return,false,return,get,meta,state,handle,equals,that,get,meta,state,handle
IncrementalKeyedStateHandle -> @VisibleForTesting 	@Override 	public boolean equals(Object o);1517489696;This method is should only be called in tests! This should never serve as key in a hash map.;@VisibleForTesting_	@Override_	public boolean equals(Object o) {_		if (this == o) {_			return true__		}_		if (o == null || getClass() != o.getClass()) {_			return false__		}__		IncrementalKeyedStateHandle that = (IncrementalKeyedStateHandle) o___		if (getCheckpointId() != that.getCheckpointId()) {_			return false__		}_		if (!getBackendIdentifier().equals(that.getBackendIdentifier())) {_			return false__		}_		if (!getKeyGroupRange().equals(that.getKeyGroupRange())) {_			return false__		}_		if (!getSharedState().equals(that.getSharedState())) {_			return false__		}_		if (!getPrivateState().equals(that.getPrivateState())) {_			return false__		}_		return getMetaStateHandle().equals(that.getMetaStateHandle())__	};this,method,is,should,only,be,called,in,tests,this,should,never,serve,as,key,in,a,hash,map;visible,for,testing,override,public,boolean,equals,object,o,if,this,o,return,true,if,o,null,get,class,o,get,class,return,false,incremental,keyed,state,handle,that,incremental,keyed,state,handle,o,if,get,checkpoint,id,that,get,checkpoint,id,return,false,if,get,backend,identifier,equals,that,get,backend,identifier,return,false,if,get,key,group,range,equals,that,get,key,group,range,return,false,if,get,shared,state,equals,that,get,shared,state,return,false,if,get,private,state,equals,that,get,private,state,return,false,return,get,meta,state,handle,equals,that,get,meta,state,handle
