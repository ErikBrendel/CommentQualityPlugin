# id;timestamp;commentText;codeText;commentWords;codeWords
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1455013242;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1469059713;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1480580488;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1483370229;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1484756180;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1487339840;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1488008119;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1489680183;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1490831872;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1491482512;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1494318397;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1495200926;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1499354178;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1499358401;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1499408671;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1501692180;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1502358129;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1502791258;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1502976333;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1506346199;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1507763843;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1510404342;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1515007198;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1516641334;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1521561714;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1522832722;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1530517337;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1531921515;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1531921795;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1532519854;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1532915642;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1537512807;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1539174278;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1539176312;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1539324323;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1539730042;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1539776151;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1548942528;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated);1550495375;Sets the value of a new config key to the value of a deprecated config key._@param config Config to write_@param deprecated The old config key_@param designated The new config key;public static void substituteDeprecatedConfigKey(Configuration config, String deprecated, String designated) {_		_		if (!config.containsKey(designated)) {_			final String valueForDeprecated = config.getString(deprecated, null)__			if (valueForDeprecated != null) {_				config.setString(designated, valueForDeprecated)__			}_		}_	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,param,config,config,to,write,param,deprecated,the,old,config,key,param,designated,the,new,config,key;public,static,void,substitute,deprecated,config,key,configuration,config,string,deprecated,string,designated,if,config,contains,key,designated,final,string,value,for,deprecated,config,get,string,deprecated,null,if,value,for,deprecated,null,config,set,string,designated,value,for,deprecated
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			ActorSystem actorSystem, 			ActorRef jobManager, 			Logger logger) throws Exception;1489680183;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			ActorSystem actorSystem,_			ActorRef jobManager,_			Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, address.host().get())__		config.setString(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, address.port().get().toString())___		if (config.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			LeaderRetrievalService leaderRetrievalService =_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID)___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config, leaderRetrievalService, actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,config,constants,address,host,get,config,set,string,config,constants,address,port,get,to,string,if,config,get,integer,config,constants,0,0,logger,info,starting,job,manager,web,frontend,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,high,availability,services,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,leader,retrieval,service,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			ActorSystem actorSystem, 			ActorRef jobManager, 			Logger logger) throws Exception;1490831872;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			ActorSystem actorSystem,_			ActorRef jobManager,_			Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, address.host().get())__		config.setString(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, address.port().get().toString())___		if (config.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			LeaderRetrievalService leaderRetrievalService =_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID)___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config, leaderRetrievalService, actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,config,constants,address,host,get,config,set,string,config,constants,address,port,get,to,string,if,config,get,integer,config,constants,0,0,logger,info,starting,job,manager,web,frontend,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,high,availability,services,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,leader,retrieval,service,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			ActorSystem actorSystem, 			ActorRef jobManager, 			Logger logger) throws Exception;1491482512;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			ActorSystem actorSystem,_			ActorRef jobManager,_			Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, address.host().get())__		config.setString(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, address.port().get().toString())___		if (config.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			LeaderRetrievalService leaderRetrievalService =_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID)___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config, leaderRetrievalService, actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,config,constants,address,host,get,config,set,string,config,constants,address,port,get,to,string,if,config,get,integer,config,constants,0,0,logger,info,starting,job,manager,web,frontend,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,high,availability,services,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,leader,retrieval,service,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			ActorSystem actorSystem, 			ActorRef jobManager, 			Logger logger) throws Exception;1494318397;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			ActorSystem actorSystem,_			ActorRef jobManager,_			Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, address.host().get())__		config.setString(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, address.port().get().toString())___		if (config.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,config,constants,address,host,get,config,set,string,config,constants,address,port,get,to,string,if,config,get,integer,config,constants,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			ActorSystem actorSystem, 			ActorRef jobManager, 			Logger logger) throws Exception;1495200926;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			ActorSystem actorSystem,_			ActorRef jobManager,_			Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, address.host().get())__		config.setString(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, address.port().get().toString())___		if (config.getInteger(JobManagerOptions.WEB_PORT.key(), 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,config,constants,address,host,get,config,set,string,config,constants,address,port,get,to,string,if,config,get,integer,job,manager,options,key,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			ActorSystem actorSystem, 			ActorRef jobManager, 			Logger logger) throws Exception;1499354178;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			ActorSystem actorSystem,_			ActorRef jobManager,_			Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(JobManagerOptions.ADDRESS, address.host().get())__		config.setInteger(JobManagerOptions.PORT, Integer.parseInt(address.port().get().toString()))___		if (config.getInteger(JobManagerOptions.WEB_PORT.key(), 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,job,manager,options,address,address,host,get,config,set,integer,job,manager,options,port,integer,parse,int,address,port,get,to,string,if,config,get,integer,job,manager,options,key,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			ActorSystem actorSystem, 			ActorRef jobManager, 			Logger logger) throws Exception;1499358401;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			ActorSystem actorSystem,_			ActorRef jobManager,_			Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(JobManagerOptions.ADDRESS, address.host().get())__		config.setInteger(JobManagerOptions.PORT, Integer.parseInt(address.port().get().toString()))___		if (config.getInteger(JobManagerOptions.WEB_PORT.key(), 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,job,manager,options,address,address,host,get,config,set,integer,job,manager,options,port,integer,parse,int,address,port,get,to,string,if,config,get,integer,job,manager,options,key,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			ActorSystem actorSystem, 			ActorRef jobManager, 			Logger logger) throws Exception;1499408671;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			ActorSystem actorSystem,_			ActorRef jobManager,_			Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(JobManagerOptions.ADDRESS, address.host().get())__		config.setInteger(JobManagerOptions.PORT, Integer.parseInt(address.port().get().toString()))___		if (config.getInteger(JobManagerOptions.WEB_PORT.key(), 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,job,manager,options,address,address,host,get,config,set,integer,job,manager,options,port,integer,parse,int,address,port,get,to,string,if,config,get,integer,job,manager,options,key,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			ActorSystem actorSystem, 			ActorRef jobManager, 			Logger logger) throws Exception;1502358129;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			ActorSystem actorSystem,_			ActorRef jobManager,_			Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(JobManagerOptions.ADDRESS, address.host().get())__		config.setInteger(JobManagerOptions.PORT, Integer.parseInt(address.port().get().toString()))___		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,job,manager,options,address,address,host,get,config,set,integer,job,manager,options,port,integer,parse,int,address,port,get,to,string,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static Option newDynamicPropertiesOption();1480580488;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_-Dfs.overwrite-files=true  -Dtaskmanager.network.numberOfBuffers=16368;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,dfs,overwrite,files,true,dtaskmanager,network,number,of,buffers,16368;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1483370229;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_-Dfs.overwrite-files=true  -Dtaskmanager.network.numberOfBuffers=16368;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,dfs,overwrite,files,true,dtaskmanager,network,number,of,buffers,16368;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1484756180;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_-Dfs.overwrite-files=true  -Dtaskmanager.network.numberOfBuffers=16368;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,dfs,overwrite,files,true,dtaskmanager,network,number,of,buffers,16368;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1487339840;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_-Dfs.overwrite-files=true  -Dtaskmanager.network.numberOfBuffers=16368;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,dfs,overwrite,files,true,dtaskmanager,network,number,of,buffers,16368;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1488008119;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_-Dfs.overwrite-files=true  -Dtaskmanager.network.numberOfBuffers=16368;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,dfs,overwrite,files,true,dtaskmanager,network,number,of,buffers,16368;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1489680183;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_-Dfs.overwrite-files=true  -Dtaskmanager.network.numberOfBuffers=16368;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,dfs,overwrite,files,true,dtaskmanager,network,number,of,buffers,16368;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1490831872;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_-Dfs.overwrite-files=true  -Dtaskmanager.network.numberOfBuffers=16368;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,dfs,overwrite,files,true,dtaskmanager,network,number,of,buffers,16368;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1491482512;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1494318397;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1495200926;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1499354178;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1499358401;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1499408671;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1501692180;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1502358129;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1502791258;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1502976333;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1506346199;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1507763843;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1510404342;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1515007198;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1516641334;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1521561714;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1522832722;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1530517337;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1531921515;Get an instance of the dynamic properties option.__Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1531921795;Get an instance of the dynamic properties option.__<p>Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,p,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1532519854;Get an instance of the dynamic properties option.__<p>Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,p,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1532915642;Get an instance of the dynamic properties option.__<p>Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,p,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1537512807;Get an instance of the dynamic properties option.__<p>Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,p,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1539174278;Get an instance of the dynamic properties option.__<p>Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,p,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1539176312;Get an instance of the dynamic properties option.__<p>Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,p,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1539324323;Get an instance of the dynamic properties option.__<p>Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,p,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1539730042;Get an instance of the dynamic properties option.__<p>Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,p,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1539776151;Get an instance of the dynamic properties option.__<p>Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,p,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1548942528;Get an instance of the dynamic properties option.__<p>Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,p,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static Option newDynamicPropertiesOption();1550495375;Get an instance of the dynamic properties option.__<p>Dynamic properties allow the user to specify additional configuration values with -D, such as_<tt> -Dfs.overwrite-files=true  -Dtaskmanager.network.memory.min=536346624</tt>;public static Option newDynamicPropertiesOption() {_		return new Option(DYNAMIC_PROPERTIES_OPT, true, "Dynamic properties")__	};get,an,instance,of,the,dynamic,properties,option,p,dynamic,properties,allow,the,user,to,specify,additional,configuration,values,with,d,such,as,tt,dfs,overwrite,files,true,dtaskmanager,network,memory,min,536346624,tt;public,static,option,new,dynamic,properties,option,return,new,option,true,dynamic,properties
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 				Configuration config, 				ActorSystem actorSystem, 				ActorRef jobManager, 				Logger logger) throws Exception;1455013242;Starts the web frontend._@param config The Flink config._@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_				Configuration config,_				ActorSystem actorSystem,_				ActorRef jobManager,_				Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, address.host().get())__		config.setString(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, address.port().get().toString())___		if (config.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			LeaderRetrievalService leaderRetrievalService = _				LeaderRetrievalUtils.createLeaderRetrievalService(config, jobManager)___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config, leaderRetrievalService, actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,config,constants,address,host,get,config,set,string,config,constants,address,port,get,to,string,if,config,get,integer,config,constants,0,0,logger,info,starting,job,manager,web,frontend,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,job,manager,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,leader,retrieval,service,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 				Configuration config, 				ActorSystem actorSystem, 				ActorRef jobManager, 				Logger logger) throws Exception;1469059713;Starts the web frontend._@param config The Flink config._@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_				Configuration config,_				ActorSystem actorSystem,_				ActorRef jobManager,_				Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, address.host().get())__		config.setString(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, address.port().get().toString())___		if (config.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			LeaderRetrievalService leaderRetrievalService = _				LeaderRetrievalUtils.createLeaderRetrievalService(config, jobManager)___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config, leaderRetrievalService, actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,config,constants,address,host,get,config,set,string,config,constants,address,port,get,to,string,if,config,get,integer,config,constants,0,0,logger,info,starting,job,manager,web,frontend,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,job,manager,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,leader,retrieval,service,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 				Configuration config, 				ActorSystem actorSystem, 				ActorRef jobManager, 				Logger logger) throws Exception;1480580488;Starts the web frontend._@param config The Flink config._@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_				Configuration config,_				ActorSystem actorSystem,_				ActorRef jobManager,_				Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, address.host().get())__		config.setString(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, address.port().get().toString())___		if (config.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			LeaderRetrievalService leaderRetrievalService = _				LeaderRetrievalUtils.createLeaderRetrievalService(config, jobManager)___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config, leaderRetrievalService, actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,config,constants,address,host,get,config,set,string,config,constants,address,port,get,to,string,if,config,get,integer,config,constants,0,0,logger,info,starting,job,manager,web,frontend,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,job,manager,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,leader,retrieval,service,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 				Configuration config, 				ActorSystem actorSystem, 				ActorRef jobManager, 				Logger logger) throws Exception;1483370229;Starts the web frontend._@param config The Flink config._@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_				Configuration config,_				ActorSystem actorSystem,_				ActorRef jobManager,_				Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, address.host().get())__		config.setString(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, address.port().get().toString())___		if (config.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			LeaderRetrievalService leaderRetrievalService = _				LeaderRetrievalUtils.createLeaderRetrievalService(config, jobManager)___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config, leaderRetrievalService, actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,config,constants,address,host,get,config,set,string,config,constants,address,port,get,to,string,if,config,get,integer,config,constants,0,0,logger,info,starting,job,manager,web,frontend,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,job,manager,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,leader,retrieval,service,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 				Configuration config, 				ActorSystem actorSystem, 				ActorRef jobManager, 				Logger logger) throws Exception;1484756180;Starts the web frontend._@param config The Flink config._@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_				Configuration config,_				ActorSystem actorSystem,_				ActorRef jobManager,_				Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, address.host().get())__		config.setString(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, address.port().get().toString())___		if (config.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			LeaderRetrievalService leaderRetrievalService = _				LeaderRetrievalUtils.createLeaderRetrievalService(config, jobManager)___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config, leaderRetrievalService, actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,config,constants,address,host,get,config,set,string,config,constants,address,port,get,to,string,if,config,get,integer,config,constants,0,0,logger,info,starting,job,manager,web,frontend,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,job,manager,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,leader,retrieval,service,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 				Configuration config, 				ActorSystem actorSystem, 				ActorRef jobManager, 				Logger logger) throws Exception;1487339840;Starts the web frontend._@param config The Flink config._@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_				Configuration config,_				ActorSystem actorSystem,_				ActorRef jobManager,_				Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, address.host().get())__		config.setString(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, address.port().get().toString())___		if (config.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			LeaderRetrievalService leaderRetrievalService = _				LeaderRetrievalUtils.createLeaderRetrievalService(config, jobManager)___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config, leaderRetrievalService, actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,config,constants,address,host,get,config,set,string,config,constants,address,port,get,to,string,if,config,get,integer,config,constants,0,0,logger,info,starting,job,manager,web,frontend,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,job,manager,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,leader,retrieval,service,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 				Configuration config, 				ActorSystem actorSystem, 				ActorRef jobManager, 				Logger logger) throws Exception;1488008119;Starts the web frontend._@param config The Flink config._@param actorSystem The ActorSystem to start the web frontend in._@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_				Configuration config,_				ActorSystem actorSystem,_				ActorRef jobManager,_				Logger logger) throws Exception {___		_		final Address address = AkkaUtils.getAddress(actorSystem)__		config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, address.host().get())__		config.setString(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, address.port().get().toString())___		if (config.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			LeaderRetrievalService leaderRetrievalService = _				LeaderRetrievalUtils.createLeaderRetrievalService(config, jobManager)___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config, leaderRetrievalService, actorSystem)___			_			if (monitor != null) {_				String jobManagerAkkaURL = AkkaUtils.getAkkaURL(actorSystem, jobManager)__				monitor.start(jobManagerAkkaURL)__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,actor,system,the,actor,system,to,start,the,web,frontend,in,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,actor,system,actor,system,actor,ref,job,manager,logger,logger,throws,exception,final,address,address,akka,utils,get,address,actor,system,config,set,string,config,constants,address,host,get,config,set,string,config,constants,address,port,get,to,string,if,config,get,integer,config,constants,0,0,logger,info,starting,job,manager,web,frontend,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,job,manager,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,leader,retrieval,service,actor,system,if,monitor,null,string,job,manager,akka,url,akka,utils,get,akka,url,actor,system,job,manager,monitor,start,job,manager,akka,url,return,monitor,else,return,null
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				String portRangeDefinition, 				Logger logger) throws Exception;1455013242;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				String portRangeDefinition,_				Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				String portRangeDefinition, 				Logger logger) throws Exception;1469059713;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				String portRangeDefinition,_				Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				String portRangeDefinition, 				Logger logger) throws Exception;1480580488;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				String portRangeDefinition,_				Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				String portRangeDefinition, 				Logger logger) throws Exception;1483370229;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				String portRangeDefinition,_				Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				String portRangeDefinition, 				Logger logger) throws Exception;1484756180;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				String portRangeDefinition,_				Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				String portRangeDefinition, 				Logger logger) throws Exception;1487339840;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				String portRangeDefinition,_				Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				String portRangeDefinition, 				Logger logger) throws Exception;1488008119;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				String portRangeDefinition,_				Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				String portRangeDefinition, 				Logger logger) throws Exception;1489680183;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				String portRangeDefinition,_				Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				String portRangeDefinition, 				Logger logger) throws Exception;1490831872;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				String portRangeDefinition,_				Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				String portRangeDefinition, 				Logger logger) throws Exception;1491482512;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				String portRangeDefinition,_				Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				String portRangeDefinition, 				Logger logger) throws Exception;1494318397;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				String portRangeDefinition,_				Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				String portRangeDefinition, 				Logger logger) throws Exception;1495200926;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				String portRangeDefinition,_				Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				String portRangeDefinition, 				Logger logger) throws Exception;1499408671;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				String portRangeDefinition,_				Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1539730042;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {_		return startActorSystem(_			configuration,_			AkkaUtils.getFlinkActorSystemName(),_			listeningAddress,_			portRangeDefinition,_			logger,_			actorSystemExecutorConfiguration)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,return,start,actor,system,configuration,akka,utils,get,flink,actor,system,name,listening,address,port,range,definition,logger,actor,system,executor,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1539776151;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {_		return startActorSystem(_			configuration,_			AkkaUtils.getFlinkActorSystemName(),_			listeningAddress,_			portRangeDefinition,_			logger,_			actorSystemExecutorConfiguration)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,return,start,actor,system,configuration,akka,utils,get,flink,actor,system,name,listening,address,port,range,definition,logger,actor,system,executor,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1548942528;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {_		return startActorSystem(_			configuration,_			AkkaUtils.getFlinkActorSystemName(),_			listeningAddress,_			portRangeDefinition,_			logger,_			actorSystemExecutorConfiguration)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,return,start,actor,system,configuration,akka,utils,get,flink,actor,system,name,listening,address,port,range,definition,logger,actor,system,executor,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1550495375;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {_		return startActorSystem(_			configuration,_			AkkaUtils.getFlinkActorSystemName(),_			listeningAddress,_			portRangeDefinition,_			logger,_			actorSystemExecutorConfiguration)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,return,start,actor,system,configuration,akka,utils,get,flink,actor,system,name,listening,address,port,range,definition,logger,actor,system,executor,configuration
BootstrapTools -> ActorSystemExecutorConfiguration -> Config getAkkaConfig()_;1539730042;Create the executor {@link Config} for the respective executor.__@return Akka config for the respective executor;Config getAkkaConfig()_;create,the,executor,link,config,for,the,respective,executor,return,akka,config,for,the,respective,executor;config,get,akka,config
BootstrapTools -> ActorSystemExecutorConfiguration -> Config getAkkaConfig()_;1539776151;Create the executor {@link Config} for the respective executor.__@return Akka config for the respective executor;Config getAkkaConfig()_;create,the,executor,link,config,for,the,respective,executor,return,akka,config,for,the,respective,executor;config,get,akka,config
BootstrapTools -> ActorSystemExecutorConfiguration -> Config getAkkaConfig()_;1548942528;Create the executor {@link Config} for the respective executor.__@return Akka config for the respective executor;Config getAkkaConfig()_;create,the,executor,link,config,for,the,respective,executor,return,akka,config,for,the,respective,executor;config,get,akka,config
BootstrapTools -> ActorSystemExecutorConfiguration -> Config getAkkaConfig()_;1550495375;Create the executor {@link Config} for the respective executor.__@return Akka config for the respective executor;Config getAkkaConfig()_;create,the,executor,link,config,for,the,respective,executor,return,akka,config,for,the,respective,executor;config,get,akka,config
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String actorSystemName, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorMode executorMode) throws Exception;1539176312;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param actorSystemName Name of the started {@link ActorSystem}_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param executorMode The executor mode of Akka actor system._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String actorSystemName,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorMode executorMode) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(portsIterator, ServerSocket::new)___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(_					configuration,_					actorSystemName,_					listeningAddress,_					port,_					logger,_					executorMode)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,actor,system,name,name,of,the,started,link,actor,system,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,executor,mode,the,executor,mode,of,akka,actor,system,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,actor,system,name,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,mode,executor,mode,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,server,socket,new,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,actor,system,name,listening,address,port,logger,executor,mode,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String actorSystemName, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorMode executorMode) throws Exception;1539324323;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param actorSystemName Name of the started {@link ActorSystem}_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param executorMode The executor mode of Akka actor system._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String actorSystemName,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorMode executorMode) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(portsIterator, ServerSocket::new)___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(_					configuration,_					actorSystemName,_					listeningAddress,_					port,_					logger,_					executorMode)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,actor,system,name,name,of,the,started,link,actor,system,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,executor,mode,the,executor,mode,of,akka,actor,system,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,actor,system,name,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,mode,executor,mode,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,server,socket,new,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,actor,system,name,listening,address,port,logger,executor,mode,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		String portRangeDefinition, 		Logger logger) throws Exception;1537512807;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		String portRangeDefinition,_		Logger logger) throws Exception {_		return startActorSystem(_			configuration,_			listeningAddress,_			portRangeDefinition,_			logger,_			ActorSystemExecutorMode.FORK_JOIN_EXECUTOR)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,port,range,definition,logger,actor,system,executor,mode
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		String portRangeDefinition, 		Logger logger) throws Exception;1539174278;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		String portRangeDefinition,_		Logger logger) throws Exception {_		return startActorSystem(_			configuration,_			listeningAddress,_			portRangeDefinition,_			logger,_			ActorSystemExecutorMode.FORK_JOIN_EXECUTOR)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,port,range,definition,logger,actor,system,executor,mode
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		String portRangeDefinition, 		Logger logger) throws Exception;1539176312;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		String portRangeDefinition,_		Logger logger) throws Exception {_		return startActorSystem(_			configuration,_			listeningAddress,_			portRangeDefinition,_			logger,_			ActorSystemExecutorMode.FORK_JOIN_EXECUTOR)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,port,range,definition,logger,actor,system,executor,mode
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		String portRangeDefinition, 		Logger logger) throws Exception;1539324323;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		String portRangeDefinition,_		Logger logger) throws Exception {_		return startActorSystem(_			configuration,_			listeningAddress,_			portRangeDefinition,_			logger,_			ActorSystemExecutorMode.FORK_JOIN_EXECUTOR)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,port,range,definition,logger,actor,system,executor,mode
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		String portRangeDefinition, 		Logger logger) throws Exception;1539730042;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		String portRangeDefinition,_		Logger logger) throws Exception {_		return startActorSystem(_			configuration,_			listeningAddress,_			portRangeDefinition,_			logger,_			ForkJoinExecutorConfiguration.fromConfiguration(configuration))__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,port,range,definition,logger,fork,join,executor,configuration,from,configuration,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		String portRangeDefinition, 		Logger logger) throws Exception;1539776151;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		String portRangeDefinition,_		Logger logger) throws Exception {_		return startActorSystem(_			configuration,_			listeningAddress,_			portRangeDefinition,_			logger,_			ForkJoinExecutorConfiguration.fromConfiguration(configuration))__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,port,range,definition,logger,fork,join,executor,configuration,from,configuration,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		String portRangeDefinition, 		Logger logger) throws Exception;1548942528;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		String portRangeDefinition,_		Logger logger) throws Exception {_		return startActorSystem(_			configuration,_			listeningAddress,_			portRangeDefinition,_			logger,_			ForkJoinExecutorConfiguration.fromConfiguration(configuration))__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,port,range,definition,logger,fork,join,executor,configuration,from,configuration,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		String portRangeDefinition, 		Logger logger) throws Exception;1550495375;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		String portRangeDefinition,_		Logger logger) throws Exception {_		return startActorSystem(_			configuration,_			listeningAddress,_			portRangeDefinition,_			logger,_			ForkJoinExecutorConfiguration.fromConfiguration(configuration))__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,port,range,definition,logger,fork,join,executor,configuration,from,configuration,configuration
BootstrapTools -> private BootstrapTools();1455013242;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1469059713;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1480580488;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1483370229;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1484756180;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1487339840;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1488008119;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1489680183;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1490831872;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1491482512;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1494318397;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1495200926;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1499354178;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1499358401;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1499408671;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1501692180;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1502358129;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1502791258;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1502976333;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1506346199;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1507763843;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1510404342;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1515007198;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1516641334;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1521561714;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1522832722;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1530517337;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1531921515;Private constructor to prevent instantiation;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1531921795;Private constructor to prevent instantiation.;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1532519854;Private constructor to prevent instantiation.;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1532915642;Private constructor to prevent instantiation.;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1537512807;Private constructor to prevent instantiation.;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1539174278;Private constructor to prevent instantiation.;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1539176312;Private constructor to prevent instantiation.;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1539324323;Private constructor to prevent instantiation.;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1539730042;Private constructor to prevent instantiation.;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1539776151;Private constructor to prevent instantiation.;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1548942528;Private constructor to prevent instantiation.;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> private BootstrapTools();1550495375;Private constructor to prevent instantiation.;private BootstrapTools() {};private,constructor,to,prevent,instantiation;private,bootstrap,tools
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1469059713;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		StringBuilder tmCommand = new StringBuilder("$JAVA_HOME/bin/java")__		tmCommand.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		tmCommand.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		tmCommand.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")___		String  javaOpts = flinkConfig.getString(ConfigConstants.FLINK_JVM_OPTIONS, "")__		tmCommand.append(' ').append(javaOpts)___		if (hasLogback || hasLog4j) {_			tmCommand.append(" -Dlog.file=").append(logDirectory).append("/taskmanager.log")__			if (hasLogback) {_				tmCommand.append(" -Dlogback.configurationFile=file:")_						.append(configDirectory).append("/logback.xml")__			}_			if (hasLog4j) {_				tmCommand.append(" -Dlog4j.configuration=file:")_						.append(configDirectory).append("/log4j.properties")__			}__			_			_			if(hasKrb5) {_				tmCommand.append(" -Djava.security.krb5.conf=krb5.conf")__			}_		}__		tmCommand.append(' ').append(mainClass.getName())__		tmCommand.append(" --configDir ").append(configDirectory)__		tmCommand.append(" 1> ").append(logDirectory).append("/taskmanager.out")__		tmCommand.append(" 2> ").append(logDirectory).append("/taskmanager.err")___		return tmCommand.toString()__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,string,builder,tm,command,new,string,builder,bin,java,tm,command,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,tm,command,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,tm,command,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,string,java,opts,flink,config,get,string,config,constants,tm,command,append,append,java,opts,if,has,logback,has,log4j,tm,command,append,dlog,file,append,log,directory,append,taskmanager,log,if,has,logback,tm,command,append,dlogback,configuration,file,file,append,config,directory,append,logback,xml,if,has,log4j,tm,command,append,dlog4j,configuration,file,append,config,directory,append,log4j,properties,if,has,krb5,tm,command,append,djava,security,krb5,conf,krb5,conf,tm,command,append,append,main,class,get,name,tm,command,append,config,dir,append,config,directory,tm,command,append,1,append,log,directory,append,taskmanager,out,tm,command,append,2,append,log,directory,append,taskmanager,err,return,tm,command,to,string
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1480580488;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		StringBuilder tmCommand = new StringBuilder("$JAVA_HOME/bin/java")__		tmCommand.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		tmCommand.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		tmCommand.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")___		String  javaOpts = flinkConfig.getString(ConfigConstants.FLINK_JVM_OPTIONS, "")__		tmCommand.append(' ').append(javaOpts)___		if (hasLogback || hasLog4j) {_			tmCommand.append(" -Dlog.file=").append(logDirectory).append("/taskmanager.log")__			if (hasLogback) {_				tmCommand.append(" -Dlogback.configurationFile=file:")_						.append(configDirectory).append("/logback.xml")__			}_			if (hasLog4j) {_				tmCommand.append(" -Dlog4j.configuration=file:")_						.append(configDirectory).append("/log4j.properties")__			}__			_			_			if(hasKrb5) {_				tmCommand.append(" -Djava.security.krb5.conf=krb5.conf")__			}_		}__		tmCommand.append(' ').append(mainClass.getName())__		tmCommand.append(" --configDir ").append(configDirectory)__		tmCommand.append(" 1> ").append(logDirectory).append("/taskmanager.out")__		tmCommand.append(" 2> ").append(logDirectory).append("/taskmanager.err")___		return tmCommand.toString()__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,string,builder,tm,command,new,string,builder,bin,java,tm,command,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,tm,command,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,tm,command,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,string,java,opts,flink,config,get,string,config,constants,tm,command,append,append,java,opts,if,has,logback,has,log4j,tm,command,append,dlog,file,append,log,directory,append,taskmanager,log,if,has,logback,tm,command,append,dlogback,configuration,file,file,append,config,directory,append,logback,xml,if,has,log4j,tm,command,append,dlog4j,configuration,file,append,config,directory,append,log4j,properties,if,has,krb5,tm,command,append,djava,security,krb5,conf,krb5,conf,tm,command,append,append,main,class,get,name,tm,command,append,config,dir,append,config,directory,tm,command,append,1,append,log,directory,append,taskmanager,out,tm,command,append,2,append,log,directory,append,taskmanager,err,return,tm,command,to,string
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1483370229;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")__		startCommandValues_			.put("jvmmem", 	"-Xms" + tmParams.taskManagerHeapSizeMB() + "m " +_							"-Xmx" + tmParams.taskManagerHeapSizeMB() + "m " +_							"-XX:MaxDirectMemorySize=" + tmParams.taskManagerDirectMemoryLimitMB() + "m")__		String javaOpts = flinkConfig.getString(ConfigConstants.FLINK_JVM_OPTIONS, "")__		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,start,command,values,put,jvmmem,xms,tm,params,task,manager,heap,size,mb,m,xmx,tm,params,task,manager,heap,size,mb,m,xx,max,direct,memory,size,tm,params,task,manager,direct,memory,limit,mb,m,string,java,opts,flink,config,get,string,config,constants,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1484756180;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")__		startCommandValues_			.put("jvmmem", 	"-Xms" + tmParams.taskManagerHeapSizeMB() + "m " +_							"-Xmx" + tmParams.taskManagerHeapSizeMB() + "m " +_							"-XX:MaxDirectMemorySize=" + tmParams.taskManagerDirectMemoryLimitMB() + "m")__		String javaOpts = flinkConfig.getString(ConfigConstants.FLINK_JVM_OPTIONS, "")__		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,start,command,values,put,jvmmem,xms,tm,params,task,manager,heap,size,mb,m,xmx,tm,params,task,manager,heap,size,mb,m,xx,max,direct,memory,size,tm,params,task,manager,direct,memory,limit,mb,m,string,java,opts,flink,config,get,string,config,constants,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1487339840;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")__		startCommandValues_			.put("jvmmem", 	"-Xms" + tmParams.taskManagerHeapSizeMB() + "m " +_							"-Xmx" + tmParams.taskManagerHeapSizeMB() + "m " +_							"-XX:MaxDirectMemorySize=" + tmParams.taskManagerDirectMemoryLimitMB() + "m")__		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,start,command,values,put,jvmmem,xms,tm,params,task,manager,heap,size,mb,m,xmx,tm,params,task,manager,heap,size,mb,m,xx,max,direct,memory,size,tm,params,task,manager,direct,memory,limit,mb,m,string,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1488008119;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")__		startCommandValues_			.put("jvmmem", 	"-Xms" + tmParams.taskManagerHeapSizeMB() + "m " +_							"-Xmx" + tmParams.taskManagerHeapSizeMB() + "m " +_							"-XX:MaxDirectMemorySize=" + tmParams.taskManagerDirectMemoryLimitMB() + "m")__		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,start,command,values,put,jvmmem,xms,tm,params,task,manager,heap,size,mb,m,xmx,tm,params,task,manager,heap,size,mb,m,xx,max,direct,memory,size,tm,params,task,manager,direct,memory,limit,mb,m,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1489680183;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")__		startCommandValues_			.put("jvmmem", 	"-Xms" + tmParams.taskManagerHeapSizeMB() + "m " +_							"-Xmx" + tmParams.taskManagerHeapSizeMB() + "m " +_							"-XX:MaxDirectMemorySize=" + tmParams.taskManagerDirectMemoryLimitMB() + "m")__		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,start,command,values,put,jvmmem,xms,tm,params,task,manager,heap,size,mb,m,xmx,tm,params,task,manager,heap,size,mb,m,xx,max,direct,memory,size,tm,params,task,manager,direct,memory,limit,mb,m,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1490831872;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1491482512;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1494318397;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1495200926;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1499354178;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1499358401;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1499408671;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1501692180;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1502358129;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1502791258;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1502976333;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1506346199;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1507763843;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1510404342;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Paramaters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,paramaters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1515007198;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1516641334;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1521561714;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1522832722;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1530517337;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1531921515;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if(hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1531921795;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if (hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1532519854;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if (hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1532915642;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if (hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1537512807;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if (hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1539174278;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if (hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1539176312;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if (hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1539324323;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if (hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1539730042;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if (hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1539776151;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if (hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1548942528;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if (hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static String getTaskManagerShellCommand( 			Configuration flinkConfig, 			ContaineredTaskManagerParameters tmParams, 			String configDirectory, 			String logDirectory, 			boolean hasLogback, 			boolean hasLog4j, 			boolean hasKrb5, 			Class<?> mainClass);1550495375;Generates the shell command to start a task manager._@param flinkConfig The Flink configuration._@param tmParams Parameters for the task manager._@param configDirectory The configuration directory for the flink-conf.yaml_@param logDirectory The log directory._@param hasLogback Uses logback?_@param hasLog4j Uses log4j?_@param mainClass The main class to start with._@return A String containing the task manager startup command.;public static String getTaskManagerShellCommand(_			Configuration flinkConfig,_			ContaineredTaskManagerParameters tmParams,_			String configDirectory,_			String logDirectory,_			boolean hasLogback,_			boolean hasLog4j,_			boolean hasKrb5,_			Class<?> mainClass) {__		final Map<String, String> startCommandValues = new HashMap<>()__		startCommandValues.put("java", "$JAVA_HOME/bin/java")___		ArrayList<String> params = new ArrayList<>()__		params.add(String.format("-Xms%dm", tmParams.taskManagerHeapSizeMB()))__		params.add(String.format("-Xmx%dm", tmParams.taskManagerHeapSizeMB()))___		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			params.add(String.format("-XX:MaxDirectMemorySize=%dm",_				tmParams.taskManagerDirectMemoryLimitMB()))__		}__		startCommandValues.put("jvmmem", StringUtils.join(params, ' '))___		String javaOpts = flinkConfig.getString(CoreOptions.FLINK_JVM_OPTIONS)__		if (flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS).length() > 0) {_			javaOpts += " " + flinkConfig.getString(CoreOptions.FLINK_TM_JVM_OPTIONS)__		}_		_		_		if (hasKrb5) {_			javaOpts += " -Djava.security.krb5.conf=krb5.conf"__		}_		startCommandValues.put("jvmopts", javaOpts)___		String logging = ""__		if (hasLogback || hasLog4j) {_			logging = "-Dlog.file=" + logDirectory + "/taskmanager.log"__			if (hasLogback) {_				logging +=_					" -Dlogback.configurationFile=file:" + configDirectory +_						"/logback.xml"__			}_			if (hasLog4j) {_				logging += " -Dlog4j.configuration=file:" + configDirectory +_					"/log4j.properties"__			}_		}__		startCommandValues.put("logging", logging)__		startCommandValues.put("class", mainClass.getName())__		startCommandValues.put("redirects",_			"1> " + logDirectory + "/taskmanager.out " +_			"2> " + logDirectory + "/taskmanager.err")__		startCommandValues.put("args", "--configDir " + configDirectory)___		final String commandTemplate = flinkConfig_			.getString(ConfigConstants.YARN_CONTAINER_START_COMMAND_TEMPLATE,_				ConfigConstants.DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE)__		String startCommand = getStartCommand(commandTemplate, startCommandValues)__		LOG.debug("TaskManager start command: " + startCommand)___		return startCommand__	};generates,the,shell,command,to,start,a,task,manager,param,flink,config,the,flink,configuration,param,tm,params,parameters,for,the,task,manager,param,config,directory,the,configuration,directory,for,the,flink,conf,yaml,param,log,directory,the,log,directory,param,has,logback,uses,logback,param,has,log4j,uses,log4j,param,main,class,the,main,class,to,start,with,return,a,string,containing,the,task,manager,startup,command;public,static,string,get,task,manager,shell,command,configuration,flink,config,containered,task,manager,parameters,tm,params,string,config,directory,string,log,directory,boolean,has,logback,boolean,has,log4j,boolean,has,krb5,class,main,class,final,map,string,string,start,command,values,new,hash,map,start,command,values,put,java,bin,java,array,list,string,params,new,array,list,params,add,string,format,xms,dm,tm,params,task,manager,heap,size,mb,params,add,string,format,xmx,dm,tm,params,task,manager,heap,size,mb,if,tm,params,task,manager,direct,memory,limit,mb,0,params,add,string,format,xx,max,direct,memory,size,dm,tm,params,task,manager,direct,memory,limit,mb,start,command,values,put,jvmmem,string,utils,join,params,string,java,opts,flink,config,get,string,core,options,if,flink,config,get,string,core,options,length,0,java,opts,flink,config,get,string,core,options,if,has,krb5,java,opts,djava,security,krb5,conf,krb5,conf,start,command,values,put,jvmopts,java,opts,string,logging,if,has,logback,has,log4j,logging,dlog,file,log,directory,taskmanager,log,if,has,logback,logging,dlogback,configuration,file,file,config,directory,logback,xml,if,has,log4j,logging,dlog4j,configuration,file,config,directory,log4j,properties,start,command,values,put,logging,logging,start,command,values,put,class,main,class,get,name,start,command,values,put,redirects,1,log,directory,taskmanager,out,2,log,directory,taskmanager,err,start,command,values,put,args,config,dir,config,directory,final,string,command,template,flink,config,get,string,config,constants,config,constants,string,start,command,get,start,command,command,template,start,command,values,log,debug,task,manager,start,command,start,command,return,start,command
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1499354178;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1499358401;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1501692180;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1502358129;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1502791258;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1502976333;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1506346199;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1507763843;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1510404342;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1515007198;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1516641334;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1521561714;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1522832722;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1530517337;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1531921515;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1531921795;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1532519854;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(_				portsIterator,_				new NetUtils.SocketFactory() {_					@Override_					public ServerSocket createSocket(int port) throws IOException {_						return new ServerSocket(port)__					}_				})___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger) throws Exception;1532915642;Starts an ActorSystem with the given configuration listening at the address/ports._@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@return The ActorSystem which has been started_@throws Exception;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(portsIterator, ServerSocket::new)___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,server,socket,new,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1455013242;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, jobManagerHostname)__		cfg.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,config,constants,job,manager,hostname,cfg,set,integer,config,constants,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1469059713;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, jobManagerHostname)__		cfg.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,config,constants,job,manager,hostname,cfg,set,integer,config,constants,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1480580488;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, jobManagerHostname)__		cfg.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,config,constants,job,manager,hostname,cfg,set,integer,config,constants,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1483370229;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, jobManagerHostname)__		cfg.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,config,constants,job,manager,hostname,cfg,set,integer,config,constants,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1484756180;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, jobManagerHostname)__		cfg.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,config,constants,job,manager,hostname,cfg,set,integer,config,constants,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1487339840;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, jobManagerHostname)__		cfg.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,config,constants,job,manager,hostname,cfg,set,integer,config,constants,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1488008119;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, jobManagerHostname)__		cfg.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,config,constants,job,manager,hostname,cfg,set,integer,config,constants,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1489680183;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, jobManagerHostname)__		cfg.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,config,constants,job,manager,hostname,cfg,set,integer,config,constants,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1490831872;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, jobManagerHostname)__		cfg.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,config,constants,job,manager,hostname,cfg,set,integer,config,constants,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1491482512;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, jobManagerHostname)__		cfg.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,config,constants,job,manager,hostname,cfg,set,integer,config,constants,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1494318397;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, jobManagerHostname)__		cfg.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,config,constants,job,manager,hostname,cfg,set,integer,config,constants,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1495200926;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, jobManagerHostname)__		cfg.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,config,constants,job,manager,hostname,cfg,set,integer,config,constants,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1499354178;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,job,manager,options,address,job,manager,hostname,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1499358401;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1499408671;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,cfg,set,string,job,manager,options,address,job,manager,hostname,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1501692180;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1502358129;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1502791258;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1502976333;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1506346199;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1507763843;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1510404342;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1515007198;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,config,constants,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1516641334;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.MAX_REGISTRATION_DURATION, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1521561714;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1522832722;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlots)__		}__		return cfg_ _	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,config,constants,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1530517337;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = baseConfig.clone()___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		if (baseConfig.getBoolean(CoreOptions.USE_LOCAL_DEFAULT_TMP_DIRS)){_			cfg.removeConfig(CoreOptions.TMP_DIRS)__		}__		return cfg__	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,base,config,clone,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,if,base,config,get,boolean,core,options,cfg,remove,config,core,options,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1531921515;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = cloneConfiguration(baseConfig)___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		return cfg__	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,clone,configuration,base,config,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1531921795;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = cloneConfiguration(baseConfig)___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		return cfg__	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,clone,configuration,base,config,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1532519854;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = cloneConfiguration(baseConfig)___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		return cfg__	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,clone,configuration,base,config,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1532915642;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = cloneConfiguration(baseConfig)___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		return cfg__	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,clone,configuration,base,config,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1537512807;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = cloneConfiguration(baseConfig)___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		return cfg__	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,clone,configuration,base,config,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1539174278;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = cloneConfiguration(baseConfig)___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		return cfg__	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,clone,configuration,base,config,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1539176312;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = cloneConfiguration(baseConfig)___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		return cfg__	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,clone,configuration,base,config,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1539324323;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = cloneConfiguration(baseConfig)___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		return cfg__	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,clone,configuration,base,config,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1539730042;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = cloneConfiguration(baseConfig)___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		return cfg__	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,clone,configuration,base,config,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1539776151;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = cloneConfiguration(baseConfig)___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		return cfg__	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,clone,configuration,base,config,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1548942528;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = cloneConfiguration(baseConfig)___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		return cfg__	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,clone,configuration,base,config,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,return,cfg
BootstrapTools -> public static Configuration generateTaskManagerConfiguration( 				Configuration baseConfig, 				String jobManagerHostname, 				int jobManagerPort, 				int numSlots, 				FiniteDuration registrationTimeout);1550495375;Generate a task manager configuration._@param baseConfig Config to start from._@param jobManagerHostname Job manager host name._@param jobManagerPort Port of the job manager._@param numSlots Number of slots to configure._@param registrationTimeout Timeout for registration_@return TaskManager configuration;public static Configuration generateTaskManagerConfiguration(_				Configuration baseConfig,_				String jobManagerHostname,_				int jobManagerPort,_				int numSlots,_				FiniteDuration registrationTimeout) {__		Configuration cfg = cloneConfiguration(baseConfig)___		if (jobManagerHostname != null && !jobManagerHostname.isEmpty()) {_			cfg.setString(JobManagerOptions.ADDRESS, jobManagerHostname)__		}__		if (jobManagerPort > 0) {_			cfg.setInteger(JobManagerOptions.PORT, jobManagerPort)__		}__		cfg.setString(TaskManagerOptions.REGISTRATION_TIMEOUT, registrationTimeout.toString())__		if (numSlots != -1){_			cfg.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlots)__		}__		return cfg__	};generate,a,task,manager,configuration,param,base,config,config,to,start,from,param,job,manager,hostname,job,manager,host,name,param,job,manager,port,port,of,the,job,manager,param,num,slots,number,of,slots,to,configure,param,registration,timeout,timeout,for,registration,return,task,manager,configuration;public,static,configuration,generate,task,manager,configuration,configuration,base,config,string,job,manager,hostname,int,job,manager,port,int,num,slots,finite,duration,registration,timeout,configuration,cfg,clone,configuration,base,config,if,job,manager,hostname,null,job,manager,hostname,is,empty,cfg,set,string,job,manager,options,address,job,manager,hostname,if,job,manager,port,0,cfg,set,integer,job,manager,options,port,job,manager,port,cfg,set,string,task,manager,options,registration,timeout,to,string,if,num,slots,1,cfg,set,integer,task,manager,options,num,slots,return,cfg
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		int listeningPort, 		Logger logger) throws Exception;1537512807;Starts an Actor System at a specific port.__@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		int listeningPort,_		Logger logger) throws Exception {_		return startActorSystem(configuration, listeningAddress, listeningPort, logger, ActorSystemExecutorMode.FORK_JOIN_EXECUTOR)__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,listening,port,logger,actor,system,executor,mode
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		int listeningPort, 		Logger logger) throws Exception;1539174278;Starts an Actor System at a specific port.__@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		int listeningPort,_		Logger logger) throws Exception {_		return startActorSystem(configuration, listeningAddress, listeningPort, logger, ActorSystemExecutorMode.FORK_JOIN_EXECUTOR)__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,listening,port,logger,actor,system,executor,mode
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		int listeningPort, 		Logger logger) throws Exception;1539176312;Starts an Actor System at a specific port.__@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		int listeningPort,_		Logger logger) throws Exception {_		return startActorSystem(configuration, listeningAddress, listeningPort, logger, ActorSystemExecutorMode.FORK_JOIN_EXECUTOR)__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,listening,port,logger,actor,system,executor,mode
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		int listeningPort, 		Logger logger) throws Exception;1539324323;Starts an Actor System at a specific port.__@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		int listeningPort,_		Logger logger) throws Exception {_		return startActorSystem(configuration, listeningAddress, listeningPort, logger, ActorSystemExecutorMode.FORK_JOIN_EXECUTOR)__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,listening,port,logger,actor,system,executor,mode
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		int listeningPort, 		Logger logger) throws Exception;1539730042;Starts an Actor System at a specific port.__@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		int listeningPort,_		Logger logger) throws Exception {_		return startActorSystem(_			configuration,_			listeningAddress,_			listeningPort,_			logger,_			ForkJoinExecutorConfiguration.fromConfiguration(configuration))__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,listening,port,logger,fork,join,executor,configuration,from,configuration,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		int listeningPort, 		Logger logger) throws Exception;1539776151;Starts an Actor System at a specific port.__@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		int listeningPort,_		Logger logger) throws Exception {_		return startActorSystem(_			configuration,_			listeningAddress,_			listeningPort,_			logger,_			ForkJoinExecutorConfiguration.fromConfiguration(configuration))__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,listening,port,logger,fork,join,executor,configuration,from,configuration,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		int listeningPort, 		Logger logger) throws Exception;1548942528;Starts an Actor System at a specific port.__@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		int listeningPort,_		Logger logger) throws Exception {_		return startActorSystem(_			configuration,_			listeningAddress,_			listeningPort,_			logger,_			ForkJoinExecutorConfiguration.fromConfiguration(configuration))__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,listening,port,logger,fork,join,executor,configuration,from,configuration,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String listeningAddress, 		int listeningPort, 		Logger logger) throws Exception;1550495375;Starts an Actor System at a specific port.__@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String listeningAddress,_		int listeningPort,_		Logger logger) throws Exception {_		return startActorSystem(_			configuration,_			listeningAddress,_			listeningPort,_			logger,_			ForkJoinExecutorConfiguration.fromConfiguration(configuration))__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,return,start,actor,system,configuration,listening,address,listening,port,logger,fork,join,executor,configuration,from,configuration,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String actorSystemName, 		String listeningAddress, 		int listeningPort, 		Logger logger, 		ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1539730042;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param actorSystemName Name of the started {@link ActorSystem}_@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String actorSystemName,_		String listeningAddress,_		int listeningPort,_		Logger logger,_		ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort)),_				actorSystemExecutorConfiguration.getAkkaConfig())___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(actorSystemName, akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_						" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,actor,system,name,name,of,the,started,link,actor,system,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,actor,system,name,string,listening,address,int,listening,port,logger,logger,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,actor,system,executor,configuration,get,akka,config,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,actor,system,name,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String actorSystemName, 		String listeningAddress, 		int listeningPort, 		Logger logger, 		ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1539776151;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param actorSystemName Name of the started {@link ActorSystem}_@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String actorSystemName,_		String listeningAddress,_		int listeningPort,_		Logger logger,_		ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort)),_				actorSystemExecutorConfiguration.getAkkaConfig())___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(actorSystemName, akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_						" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,actor,system,name,name,of,the,started,link,actor,system,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,actor,system,name,string,listening,address,int,listening,port,logger,logger,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,actor,system,executor,configuration,get,akka,config,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,actor,system,name,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String actorSystemName, 		String listeningAddress, 		int listeningPort, 		Logger logger, 		ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1548942528;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param actorSystemName Name of the started {@link ActorSystem}_@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String actorSystemName,_		String listeningAddress,_		int listeningPort,_		Logger logger,_		ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort)),_				actorSystemExecutorConfiguration.getAkkaConfig())___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(actorSystemName, akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_						" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,actor,system,name,name,of,the,started,link,actor,system,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,actor,system,name,string,listening,address,int,listening,port,logger,logger,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,actor,system,executor,configuration,get,akka,config,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,actor,system,name,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String actorSystemName, 		String listeningAddress, 		int listeningPort, 		Logger logger, 		ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1550495375;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param actorSystemName Name of the started {@link ActorSystem}_@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String actorSystemName,_		String listeningAddress,_		int listeningPort,_		Logger logger,_		ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort)),_				actorSystemExecutorConfiguration.getAkkaConfig())___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(actorSystemName, akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_						" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,actor,system,name,name,of,the,started,link,actor,system,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,actor,system,name,string,listening,address,int,listening,port,logger,logger,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,actor,system,executor,configuration,get,akka,config,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,actor,system,name,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String actorSystemName, 		String listeningAddress, 		int listeningPort, 		Logger logger, 		ActorSystemExecutorMode executorMode) throws Exception;1539174278;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param actorSystemName Name of the started {@link ActorSystem}_@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param executorMode The executor mode of Akka actor system._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String actorSystemName,_		String listeningAddress,_		int listeningPort,_		Logger logger,_		ActorSystemExecutorMode executorMode) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort)),_				getExecutorConfigByExecutorMode(configuration, executorMode)_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(actorSystemName, akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_						" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,actor,system,name,name,of,the,started,link,actor,system,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,executor,mode,the,executor,mode,of,akka,actor,system,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,actor,system,name,string,listening,address,int,listening,port,logger,logger,actor,system,executor,mode,executor,mode,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,get,executor,config,by,executor,mode,configuration,executor,mode,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,actor,system,name,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String actorSystemName, 		String listeningAddress, 		int listeningPort, 		Logger logger, 		ActorSystemExecutorMode executorMode) throws Exception;1539176312;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param actorSystemName Name of the started {@link ActorSystem}_@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param executorMode The executor mode of Akka actor system._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String actorSystemName,_		String listeningAddress,_		int listeningPort,_		Logger logger,_		ActorSystemExecutorMode executorMode) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort)),_				getExecutorConfigByExecutorMode(configuration, executorMode)_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(actorSystemName, akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_						" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,actor,system,name,name,of,the,started,link,actor,system,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,executor,mode,the,executor,mode,of,akka,actor,system,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,actor,system,name,string,listening,address,int,listening,port,logger,logger,actor,system,executor,mode,executor,mode,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,get,executor,config,by,executor,mode,configuration,executor,mode,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,actor,system,name,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 		Configuration configuration, 		String actorSystemName, 		String listeningAddress, 		int listeningPort, 		Logger logger, 		ActorSystemExecutorMode executorMode) throws Exception;1539324323;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param actorSystemName Name of the started {@link ActorSystem}_@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param executorMode The executor mode of Akka actor system._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_		Configuration configuration,_		String actorSystemName,_		String listeningAddress,_		int listeningPort,_		Logger logger,_		ActorSystemExecutorMode executorMode) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort)),_				getExecutorConfigByExecutorMode(configuration, executorMode)_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(actorSystemName, akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_						" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,actor,system,name,name,of,the,started,link,actor,system,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,executor,mode,the,executor,mode,of,akka,actor,system,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,actor,system,name,string,listening,address,int,listening,port,logger,logger,actor,system,executor,mode,executor,mode,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,get,executor,config,by,executor,mode,configuration,executor,mode,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,actor,system,name,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorMode executorMode) throws Exception;1537512807;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param executorMode The executor mode of Akka actor system._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorMode executorMode) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(portsIterator, ServerSocket::new)___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger, executorMode)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,executor,mode,the,executor,mode,of,akka,actor,system,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,mode,executor,mode,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,server,socket,new,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,executor,mode,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorMode executorMode) throws Exception;1539174278;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param executorMode The executor mode of Akka actor system._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorMode executorMode) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(portsIterator, ServerSocket::new)___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(configuration, listeningAddress, port, logger, executorMode)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,executor,mode,the,executor,mode,of,akka,actor,system,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,mode,executor,mode,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,server,socket,new,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,listening,address,port,logger,executor,mode,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorMode executorMode) throws Exception;1539176312;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param executorMode The executor mode of Akka actor system._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorMode executorMode) throws Exception {_		return startActorSystem(_			configuration,_			AkkaUtils.getFlinkActorSystemName(),_			listeningAddress,_			portRangeDefinition,_			logger,_			executorMode)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,executor,mode,the,executor,mode,of,akka,actor,system,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,mode,executor,mode,throws,exception,return,start,actor,system,configuration,akka,utils,get,flink,actor,system,name,listening,address,port,range,definition,logger,executor,mode
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorMode executorMode) throws Exception;1539324323;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param executorMode The executor mode of Akka actor system._@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorMode executorMode) throws Exception {_		return startActorSystem(_			configuration,_			AkkaUtils.getFlinkActorSystemName(),_			listeningAddress,_			portRangeDefinition,_			logger,_			executorMode)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,executor,mode,the,executor,mode,of,akka,actor,system,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,mode,executor,mode,throws,exception,return,start,actor,system,configuration,akka,utils,get,flink,actor,system,name,listening,address,port,range,definition,logger,executor,mode
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1455013242;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1469059713;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1480580488;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1483370229;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1484756180;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1487339840;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1488008119;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1489680183;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1490831872;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1491482512;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1494318397;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1495200926;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1499354178;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1499358401;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1499408671;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1501692180;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1502358129;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1502791258;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1502976333;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1506346199;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1507763843;Sets the value of of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1510404342;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1515007198;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1516641334;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1521561714;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1522832722;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1530517337;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1531921515;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1531921795;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1532519854;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1532915642;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1537512807;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1539174278;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1539176312;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1539324323;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1539730042;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1539776151;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1548942528;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static void substituteDeprecatedConfigPrefix( 			Configuration config, 			String deprecatedPrefix, 			String designatedPrefix);1550495375;Sets the value of a new config key to the value of a deprecated config key. Taking into_account the changed prefix._@param config Config to write_@param deprecatedPrefix Old prefix of key_@param designatedPrefix New prefix of key;public static void substituteDeprecatedConfigPrefix(_			Configuration config,_			String deprecatedPrefix,_			String designatedPrefix) {__		_		final int prefixLen = deprecatedPrefix.length()___		Configuration replacement = new Configuration()___		for (String key : config.keySet()) {_			if (key.startsWith(deprecatedPrefix)) {_				String newKey = designatedPrefix + key.substring(prefixLen)__				if (!config.containsKey(newKey)) {_					replacement.setString(newKey, config.getString(key, null))__				}_			}_		}__		config.addAll(replacement)__	};sets,the,value,of,a,new,config,key,to,the,value,of,a,deprecated,config,key,taking,into,account,the,changed,prefix,param,config,config,to,write,param,deprecated,prefix,old,prefix,of,key,param,designated,prefix,new,prefix,of,key;public,static,void,substitute,deprecated,config,prefix,configuration,config,string,deprecated,prefix,string,designated,prefix,final,int,prefix,len,deprecated,prefix,length,configuration,replacement,new,configuration,for,string,key,config,key,set,if,key,starts,with,deprecated,prefix,string,new,key,designated,prefix,key,substring,prefix,len,if,config,contains,key,new,key,replacement,set,string,new,key,config,get,string,key,null,config,add,all,replacement
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1480580488;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1483370229;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1484756180;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1487339840;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1488008119;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1489680183;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1490831872;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1491482512;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1494318397;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1495200926;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1499354178;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1499358401;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1499408671;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1501692180;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1502358129;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1502791258;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1502976333;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1506346199;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1507763843;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1510404342;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1515007198;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1516641334;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1521561714;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1522832722;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1530517337;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1531921515;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if(values != null) {_			for(String value : values) {_				String[] pair = value.split("=", 2)__				if(pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if(pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1531921795;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if (values != null) {_			for (String value : values) {_				String[] pair = value.split("=", 2)__				if (pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if (pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1532519854;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if (values != null) {_			for (String value : values) {_				String[] pair = value.split("=", 2)__				if (pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if (pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1532915642;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if (values != null) {_			for (String value : values) {_				String[] pair = value.split("=", 2)__				if (pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if (pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1537512807;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if (values != null) {_			for (String value : values) {_				String[] pair = value.split("=", 2)__				if (pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if (pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1539174278;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if (values != null) {_			for (String value : values) {_				String[] pair = value.split("=", 2)__				if (pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if (pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1539176312;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if (values != null) {_			for (String value : values) {_				String[] pair = value.split("=", 2)__				if (pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if (pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1539324323;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if (values != null) {_			for (String value : values) {_				String[] pair = value.split("=", 2)__				if (pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if (pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1539730042;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if (values != null) {_			for (String value : values) {_				String[] pair = value.split("=", 2)__				if (pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if (pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1539776151;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if (values != null) {_			for (String value : values) {_				String[] pair = value.split("=", 2)__				if (pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if (pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1548942528;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if (values != null) {_			for (String value : values) {_				String[] pair = value.split("=", 2)__				if (pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if (pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static Configuration parseDynamicProperties(CommandLine cmd);1550495375;Parse the dynamic properties (passed on the command line).;public static Configuration parseDynamicProperties(CommandLine cmd) {_		final Configuration config = new Configuration()___		String[] values = cmd.getOptionValues(DYNAMIC_PROPERTIES_OPT)__		if (values != null) {_			for (String value : values) {_				String[] pair = value.split("=", 2)__				if (pair.length == 1) {_					config.setString(pair[0], Boolean.TRUE.toString())__				}_				else if (pair.length == 2) {_					config.setString(pair[0], pair[1])__				}_			}_		}__		return config__	};parse,the,dynamic,properties,passed,on,the,command,line;public,static,configuration,parse,dynamic,properties,command,line,cmd,final,configuration,config,new,configuration,string,values,cmd,get,option,values,if,values,null,for,string,value,values,string,pair,value,split,2,if,pair,length,1,config,set,string,pair,0,boolean,true,to,string,else,if,pair,length,2,config,set,string,pair,0,pair,1,return,config
BootstrapTools -> public static void updateTmpDirectoriesInConfiguration( 			Configuration configuration, 			@Nullable String defaultDirs);1532519854;Set temporary configuration directories if necessary.__@param configuration flink config to patch_@param defaultDirs in case no tmp directories is set, next directories will be applied;public static void updateTmpDirectoriesInConfiguration(_			Configuration configuration,_			@Nullable String defaultDirs) {_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			LOG.info("Overriding Fink's temporary file directories with those " +_				"specified in the Flink config: {}", configuration.getValue(CoreOptions.TMP_DIRS))__		} else if (defaultDirs != null) {_			LOG.info("Setting directories for temporary files to: {}", defaultDirs)__			configuration.setString(CoreOptions.TMP_DIRS, defaultDirs)__			configuration.setBoolean(USE_LOCAL_DEFAULT_TMP_DIRS, true)__		}_	};set,temporary,configuration,directories,if,necessary,param,configuration,flink,config,to,patch,param,default,dirs,in,case,no,tmp,directories,is,set,next,directories,will,be,applied;public,static,void,update,tmp,directories,in,configuration,configuration,configuration,nullable,string,default,dirs,if,configuration,contains,core,options,log,info,overriding,fink,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,if,default,dirs,null,log,info,setting,directories,for,temporary,files,to,default,dirs,configuration,set,string,core,options,default,dirs,configuration,set,boolean,true
BootstrapTools -> public static void updateTmpDirectoriesInConfiguration( 			Configuration configuration, 			@Nullable String defaultDirs);1532915642;Set temporary configuration directories if necessary.__@param configuration flink config to patch_@param defaultDirs in case no tmp directories is set, next directories will be applied;public static void updateTmpDirectoriesInConfiguration(_			Configuration configuration,_			@Nullable String defaultDirs) {_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			LOG.info("Overriding Fink's temporary file directories with those " +_				"specified in the Flink config: {}", configuration.getValue(CoreOptions.TMP_DIRS))__		} else if (defaultDirs != null) {_			LOG.info("Setting directories for temporary files to: {}", defaultDirs)__			configuration.setString(CoreOptions.TMP_DIRS, defaultDirs)__			configuration.setBoolean(USE_LOCAL_DEFAULT_TMP_DIRS, true)__		}_	};set,temporary,configuration,directories,if,necessary,param,configuration,flink,config,to,patch,param,default,dirs,in,case,no,tmp,directories,is,set,next,directories,will,be,applied;public,static,void,update,tmp,directories,in,configuration,configuration,configuration,nullable,string,default,dirs,if,configuration,contains,core,options,log,info,overriding,fink,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,if,default,dirs,null,log,info,setting,directories,for,temporary,files,to,default,dirs,configuration,set,string,core,options,default,dirs,configuration,set,boolean,true
BootstrapTools -> public static void updateTmpDirectoriesInConfiguration( 			Configuration configuration, 			@Nullable String defaultDirs);1537512807;Set temporary configuration directories if necessary.__@param configuration flink config to patch_@param defaultDirs in case no tmp directories is set, next directories will be applied;public static void updateTmpDirectoriesInConfiguration(_			Configuration configuration,_			@Nullable String defaultDirs) {_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			LOG.info("Overriding Fink's temporary file directories with those " +_				"specified in the Flink config: {}", configuration.getValue(CoreOptions.TMP_DIRS))__		} else if (defaultDirs != null) {_			LOG.info("Setting directories for temporary files to: {}", defaultDirs)__			configuration.setString(CoreOptions.TMP_DIRS, defaultDirs)__			configuration.setBoolean(USE_LOCAL_DEFAULT_TMP_DIRS, true)__		}_	};set,temporary,configuration,directories,if,necessary,param,configuration,flink,config,to,patch,param,default,dirs,in,case,no,tmp,directories,is,set,next,directories,will,be,applied;public,static,void,update,tmp,directories,in,configuration,configuration,configuration,nullable,string,default,dirs,if,configuration,contains,core,options,log,info,overriding,fink,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,if,default,dirs,null,log,info,setting,directories,for,temporary,files,to,default,dirs,configuration,set,string,core,options,default,dirs,configuration,set,boolean,true
BootstrapTools -> public static void updateTmpDirectoriesInConfiguration( 			Configuration configuration, 			@Nullable String defaultDirs);1539174278;Set temporary configuration directories if necessary.__@param configuration flink config to patch_@param defaultDirs in case no tmp directories is set, next directories will be applied;public static void updateTmpDirectoriesInConfiguration(_			Configuration configuration,_			@Nullable String defaultDirs) {_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			LOG.info("Overriding Fink's temporary file directories with those " +_				"specified in the Flink config: {}", configuration.getValue(CoreOptions.TMP_DIRS))__		} else if (defaultDirs != null) {_			LOG.info("Setting directories for temporary files to: {}", defaultDirs)__			configuration.setString(CoreOptions.TMP_DIRS, defaultDirs)__			configuration.setBoolean(USE_LOCAL_DEFAULT_TMP_DIRS, true)__		}_	};set,temporary,configuration,directories,if,necessary,param,configuration,flink,config,to,patch,param,default,dirs,in,case,no,tmp,directories,is,set,next,directories,will,be,applied;public,static,void,update,tmp,directories,in,configuration,configuration,configuration,nullable,string,default,dirs,if,configuration,contains,core,options,log,info,overriding,fink,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,if,default,dirs,null,log,info,setting,directories,for,temporary,files,to,default,dirs,configuration,set,string,core,options,default,dirs,configuration,set,boolean,true
BootstrapTools -> public static void updateTmpDirectoriesInConfiguration( 			Configuration configuration, 			@Nullable String defaultDirs);1539176312;Set temporary configuration directories if necessary.__@param configuration flink config to patch_@param defaultDirs in case no tmp directories is set, next directories will be applied;public static void updateTmpDirectoriesInConfiguration(_			Configuration configuration,_			@Nullable String defaultDirs) {_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			LOG.info("Overriding Fink's temporary file directories with those " +_				"specified in the Flink config: {}", configuration.getValue(CoreOptions.TMP_DIRS))__		} else if (defaultDirs != null) {_			LOG.info("Setting directories for temporary files to: {}", defaultDirs)__			configuration.setString(CoreOptions.TMP_DIRS, defaultDirs)__			configuration.setBoolean(USE_LOCAL_DEFAULT_TMP_DIRS, true)__		}_	};set,temporary,configuration,directories,if,necessary,param,configuration,flink,config,to,patch,param,default,dirs,in,case,no,tmp,directories,is,set,next,directories,will,be,applied;public,static,void,update,tmp,directories,in,configuration,configuration,configuration,nullable,string,default,dirs,if,configuration,contains,core,options,log,info,overriding,fink,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,if,default,dirs,null,log,info,setting,directories,for,temporary,files,to,default,dirs,configuration,set,string,core,options,default,dirs,configuration,set,boolean,true
BootstrapTools -> public static void updateTmpDirectoriesInConfiguration( 			Configuration configuration, 			@Nullable String defaultDirs);1539324323;Set temporary configuration directories if necessary.__@param configuration flink config to patch_@param defaultDirs in case no tmp directories is set, next directories will be applied;public static void updateTmpDirectoriesInConfiguration(_			Configuration configuration,_			@Nullable String defaultDirs) {_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			LOG.info("Overriding Fink's temporary file directories with those " +_				"specified in the Flink config: {}", configuration.getValue(CoreOptions.TMP_DIRS))__		} else if (defaultDirs != null) {_			LOG.info("Setting directories for temporary files to: {}", defaultDirs)__			configuration.setString(CoreOptions.TMP_DIRS, defaultDirs)__			configuration.setBoolean(USE_LOCAL_DEFAULT_TMP_DIRS, true)__		}_	};set,temporary,configuration,directories,if,necessary,param,configuration,flink,config,to,patch,param,default,dirs,in,case,no,tmp,directories,is,set,next,directories,will,be,applied;public,static,void,update,tmp,directories,in,configuration,configuration,configuration,nullable,string,default,dirs,if,configuration,contains,core,options,log,info,overriding,fink,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,if,default,dirs,null,log,info,setting,directories,for,temporary,files,to,default,dirs,configuration,set,string,core,options,default,dirs,configuration,set,boolean,true
BootstrapTools -> public static void updateTmpDirectoriesInConfiguration( 			Configuration configuration, 			@Nullable String defaultDirs);1539730042;Set temporary configuration directories if necessary.__@param configuration flink config to patch_@param defaultDirs in case no tmp directories is set, next directories will be applied;public static void updateTmpDirectoriesInConfiguration(_			Configuration configuration,_			@Nullable String defaultDirs) {_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			LOG.info("Overriding Fink's temporary file directories with those " +_				"specified in the Flink config: {}", configuration.getValue(CoreOptions.TMP_DIRS))__		} else if (defaultDirs != null) {_			LOG.info("Setting directories for temporary files to: {}", defaultDirs)__			configuration.setString(CoreOptions.TMP_DIRS, defaultDirs)__			configuration.setBoolean(USE_LOCAL_DEFAULT_TMP_DIRS, true)__		}_	};set,temporary,configuration,directories,if,necessary,param,configuration,flink,config,to,patch,param,default,dirs,in,case,no,tmp,directories,is,set,next,directories,will,be,applied;public,static,void,update,tmp,directories,in,configuration,configuration,configuration,nullable,string,default,dirs,if,configuration,contains,core,options,log,info,overriding,fink,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,if,default,dirs,null,log,info,setting,directories,for,temporary,files,to,default,dirs,configuration,set,string,core,options,default,dirs,configuration,set,boolean,true
BootstrapTools -> public static void updateTmpDirectoriesInConfiguration( 			Configuration configuration, 			@Nullable String defaultDirs);1539776151;Set temporary configuration directories if necessary.__@param configuration flink config to patch_@param defaultDirs in case no tmp directories is set, next directories will be applied;public static void updateTmpDirectoriesInConfiguration(_			Configuration configuration,_			@Nullable String defaultDirs) {_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			LOG.info("Overriding Fink's temporary file directories with those " +_				"specified in the Flink config: {}", configuration.getValue(CoreOptions.TMP_DIRS))__		} else if (defaultDirs != null) {_			LOG.info("Setting directories for temporary files to: {}", defaultDirs)__			configuration.setString(CoreOptions.TMP_DIRS, defaultDirs)__			configuration.setBoolean(USE_LOCAL_DEFAULT_TMP_DIRS, true)__		}_	};set,temporary,configuration,directories,if,necessary,param,configuration,flink,config,to,patch,param,default,dirs,in,case,no,tmp,directories,is,set,next,directories,will,be,applied;public,static,void,update,tmp,directories,in,configuration,configuration,configuration,nullable,string,default,dirs,if,configuration,contains,core,options,log,info,overriding,fink,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,if,default,dirs,null,log,info,setting,directories,for,temporary,files,to,default,dirs,configuration,set,string,core,options,default,dirs,configuration,set,boolean,true
BootstrapTools -> public static void updateTmpDirectoriesInConfiguration( 			Configuration configuration, 			@Nullable String defaultDirs);1548942528;Set temporary configuration directories if necessary.__@param configuration flink config to patch_@param defaultDirs in case no tmp directories is set, next directories will be applied;public static void updateTmpDirectoriesInConfiguration(_			Configuration configuration,_			@Nullable String defaultDirs) {_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			LOG.info("Overriding Fink's temporary file directories with those " +_				"specified in the Flink config: {}", configuration.getValue(CoreOptions.TMP_DIRS))__		} else if (defaultDirs != null) {_			LOG.info("Setting directories for temporary files to: {}", defaultDirs)__			configuration.setString(CoreOptions.TMP_DIRS, defaultDirs)__			configuration.setBoolean(USE_LOCAL_DEFAULT_TMP_DIRS, true)__		}_	};set,temporary,configuration,directories,if,necessary,param,configuration,flink,config,to,patch,param,default,dirs,in,case,no,tmp,directories,is,set,next,directories,will,be,applied;public,static,void,update,tmp,directories,in,configuration,configuration,configuration,nullable,string,default,dirs,if,configuration,contains,core,options,log,info,overriding,fink,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,if,default,dirs,null,log,info,setting,directories,for,temporary,files,to,default,dirs,configuration,set,string,core,options,default,dirs,configuration,set,boolean,true
BootstrapTools -> public static void updateTmpDirectoriesInConfiguration( 			Configuration configuration, 			@Nullable String defaultDirs);1550495375;Set temporary configuration directories if necessary.__@param configuration flink config to patch_@param defaultDirs in case no tmp directories is set, next directories will be applied;public static void updateTmpDirectoriesInConfiguration(_			Configuration configuration,_			@Nullable String defaultDirs) {_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			LOG.info("Overriding Fink's temporary file directories with those " +_				"specified in the Flink config: {}", configuration.getValue(CoreOptions.TMP_DIRS))__		} else if (defaultDirs != null) {_			LOG.info("Setting directories for temporary files to: {}", defaultDirs)__			configuration.setString(CoreOptions.TMP_DIRS, defaultDirs)__			configuration.setBoolean(USE_LOCAL_DEFAULT_TMP_DIRS, true)__		}_	};set,temporary,configuration,directories,if,necessary,param,configuration,flink,config,to,patch,param,default,dirs,in,case,no,tmp,directories,is,set,next,directories,will,be,applied;public,static,void,update,tmp,directories,in,configuration,configuration,configuration,nullable,string,default,dirs,if,configuration,contains,core,options,log,info,overriding,fink,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,if,default,dirs,null,log,info,setting,directories,for,temporary,files,to,default,dirs,configuration,set,string,core,options,default,dirs,configuration,set,boolean,true
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger, 				ActorSystemExecutorMode executorMode) throws Exception;1537512807;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param executorMode The executor mode of Akka actor system._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger,_				ActorSystemExecutorMode executorMode) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort)),_				getExecutorConfigByExecutorMode(configuration, executorMode)_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,executor,mode,the,executor,mode,of,akka,actor,system,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,actor,system,executor,mode,executor,mode,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,get,executor,config,by,executor,mode,configuration,executor,mode,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger, 				ActorSystemExecutorMode executorMode) throws Exception;1539174278;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param executorMode The executor mode of Akka actor system._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger,_				ActorSystemExecutorMode executorMode) throws Exception {_		return startActorSystem(_			configuration,_			AkkaUtils.getFlinkActorSystemName(),_			listeningAddress,_			listeningPort,_			logger,_			executorMode)__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,executor,mode,the,executor,mode,of,akka,actor,system,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,actor,system,executor,mode,executor,mode,throws,exception,return,start,actor,system,configuration,akka,utils,get,flink,actor,system,name,listening,address,listening,port,logger,executor,mode
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger, 				ActorSystemExecutorMode executorMode) throws Exception;1539176312;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param executorMode The executor mode of Akka actor system._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger,_				ActorSystemExecutorMode executorMode) throws Exception {_		return startActorSystem(_			configuration,_			AkkaUtils.getFlinkActorSystemName(),_			listeningAddress,_			listeningPort,_			logger,_			executorMode)__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,executor,mode,the,executor,mode,of,akka,actor,system,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,actor,system,executor,mode,executor,mode,throws,exception,return,start,actor,system,configuration,akka,utils,get,flink,actor,system,name,listening,address,listening,port,logger,executor,mode
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger, 				ActorSystemExecutorMode executorMode) throws Exception;1539324323;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param executorMode The executor mode of Akka actor system._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger,_				ActorSystemExecutorMode executorMode) throws Exception {_		return startActorSystem(_			configuration,_			AkkaUtils.getFlinkActorSystemName(),_			listeningAddress,_			listeningPort,_			logger,_			executorMode)__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,executor,mode,the,executor,mode,of,akka,actor,system,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,actor,system,executor,mode,executor,mode,throws,exception,return,start,actor,system,configuration,akka,utils,get,flink,actor,system,name,listening,address,listening,port,logger,executor,mode
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1483370229;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1484756180;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1487339840;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1488008119;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1489680183;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1490831872;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1491482512;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1494318397;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1495200926;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1499354178;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1499358401;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1499408671;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1501692180;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1502358129;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1502791258;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1502976333;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1506346199;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1507763843;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1510404342;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1515007198;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1516641334;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1521561714;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1522832722;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1530517337;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1531921515;Replaces placeholders in the template start command with values from_<tt>startCommandValues</tt>.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>_</p>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,tt,start,command,values,tt,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,p,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1531921795;Replaces placeholders in the template start command with values from startCommandValues.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,start,command,values,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1532519854;Replaces placeholders in the template start command with values from startCommandValues.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,start,command,values,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1532915642;Replaces placeholders in the template start command with values from startCommandValues.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,start,command,values,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1537512807;Replaces placeholders in the template start command with values from startCommandValues.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,start,command,values,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1539174278;Replaces placeholders in the template start command with values from startCommandValues.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,start,command,values,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1539176312;Replaces placeholders in the template start command with values from startCommandValues.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,start,command,values,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1539324323;Replaces placeholders in the template start command with values from startCommandValues.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,start,command,values,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1539730042;Replaces placeholders in the template start command with values from startCommandValues.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,start,command,values,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1539776151;Replaces placeholders in the template start command with values from startCommandValues.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,start,command,values,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1548942528;Replaces placeholders in the template start command with values from startCommandValues.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,start,command,values,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static String getStartCommand(String template, 		Map<String, String> startCommandValues);1550495375;Replaces placeholders in the template start command with values from startCommandValues.__<p>If the default template {@link ConfigConstants#DEFAULT_YARN_CONTAINER_START_COMMAND_TEMPLATE}_is used, the following keys must be present in the map or the resulting_command will still contain placeholders:_<ul>_<li><tt>java</tt> = path to the Java executable</li>_<li><tt>jvmmem</tt> = JVM memory limits and tweaks</li>_<li><tt>jvmopts</tt> = misc options for the Java VM</li>_<li><tt>logging</tt> = logging-related configuration settings</li>_<li><tt>class</tt> = main class to execute</li>_<li><tt>args</tt> = arguments for the main class</li>_<li><tt>redirects</tt> = output redirects</li>_</ul>__@param template_a template start command with placeholders_@param startCommandValues_a replacement map <tt>placeholder -&gt_ value</tt>__@return the start command with placeholders filled in;public static String getStartCommand(String template,_		Map<String, String> startCommandValues) {_		for (Map.Entry<String, String> variable : startCommandValues_			.entrySet()) {_			template = template_				.replace("%" + variable.getKey() + "%", variable.getValue())__		}_		return template__	};replaces,placeholders,in,the,template,start,command,with,values,from,start,command,values,p,if,the,default,template,link,config,constants,is,used,the,following,keys,must,be,present,in,the,map,or,the,resulting,command,will,still,contain,placeholders,ul,li,tt,java,tt,path,to,the,java,executable,li,li,tt,jvmmem,tt,jvm,memory,limits,and,tweaks,li,li,tt,jvmopts,tt,misc,options,for,the,java,vm,li,li,tt,logging,tt,logging,related,configuration,settings,li,li,tt,class,tt,main,class,to,execute,li,li,tt,args,tt,arguments,for,the,main,class,li,li,tt,redirects,tt,output,redirects,li,ul,param,template,a,template,start,command,with,placeholders,param,start,command,values,a,replacement,map,tt,placeholder,gt,value,tt,return,the,start,command,with,placeholders,filled,in;public,static,string,get,start,command,string,template,map,string,string,start,command,values,for,map,entry,string,string,variable,start,command,values,entry,set,template,template,replace,variable,get,key,variable,get,value,return,template
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1455013242;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1469059713;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1480580488;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1483370229;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1484756180;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1487339840;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1488008119;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1489680183;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1490831872;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1491482512;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1494318397;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1495200926;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1499354178;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1499358401;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1499408671;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1501692180;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1502358129;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1502791258;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1502976333;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1506346199;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1507763843;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1510404342;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1515007198;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1516641334;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1521561714;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1522832722;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1530517337;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1531921515;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt))_		{_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1531921795;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt)) {_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1532519854;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt)) {_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1532915642;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt)) {_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1537512807;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt)) {_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1539174278;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt)) {_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1539176312;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt)) {_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1539324323;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt)) {_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1539730042;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt)) {_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1539776151;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt)) {_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1548942528;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt)) {_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static void writeConfiguration(Configuration cfg, File file) throws IOException;1550495375;Writes a Flink YAML config file from a Flink Configuration object._@param cfg The Flink config_@param file The File to write to_@throws IOException;public static void writeConfiguration(Configuration cfg, File file) throws IOException {_		try (FileWriter fwrt = new FileWriter(file)__			PrintWriter out = new PrintWriter(fwrt)) {_			for (String key : cfg.keySet()) {_				String value = cfg.getString(key, null)__				out.print(key)__				out.print(": ")__				out.println(value)__			}_		}_	};writes,a,flink,yaml,config,file,from,a,flink,configuration,object,param,cfg,the,flink,config,param,file,the,file,to,write,to,throws,ioexception;public,static,void,write,configuration,configuration,cfg,file,file,throws,ioexception,try,file,writer,fwrt,new,file,writer,file,print,writer,out,new,print,writer,fwrt,for,string,key,cfg,key,set,string,value,cfg,get,string,key,null,out,print,key,out,print,out,println,value
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger, 				ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1539730042;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger,_				ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {_		return startActorSystem(_			configuration,_			AkkaUtils.getFlinkActorSystemName(),_			listeningAddress,_			listeningPort,_			logger,_			actorSystemExecutorConfiguration)__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,return,start,actor,system,configuration,akka,utils,get,flink,actor,system,name,listening,address,listening,port,logger,actor,system,executor,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger, 				ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1539776151;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger,_				ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {_		return startActorSystem(_			configuration,_			AkkaUtils.getFlinkActorSystemName(),_			listeningAddress,_			listeningPort,_			logger,_			actorSystemExecutorConfiguration)__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,return,start,actor,system,configuration,akka,utils,get,flink,actor,system,name,listening,address,listening,port,logger,actor,system,executor,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger, 				ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1548942528;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger,_				ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {_		return startActorSystem(_			configuration,_			AkkaUtils.getFlinkActorSystemName(),_			listeningAddress,_			listeningPort,_			logger,_			actorSystemExecutorConfiguration)__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,return,start,actor,system,configuration,akka,utils,get,flink,actor,system,name,listening,address,listening,port,logger,actor,system,executor,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger, 				ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1550495375;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger,_				ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {_		return startActorSystem(_			configuration,_			AkkaUtils.getFlinkActorSystemName(),_			listeningAddress,_			listeningPort,_			logger,_			actorSystemExecutorConfiguration)__	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,return,start,actor,system,configuration,akka,utils,get,flink,actor,system,name,listening,address,listening,port,logger,actor,system,executor,configuration
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1506346199;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1507763843;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1510404342;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1515007198;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1516641334;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1521561714;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1522832722;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1530517337;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1531921515;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1531921795;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1532519854;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1532915642;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1537512807;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1539174278;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1539176312;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1539324323;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1539730042;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1539776151;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = WebMonitorUtils.startWebRuntimeMonitor(_				config,_				highAvailabilityServices,_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,web,monitor,utils,start,web,runtime,monitor,config,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static WebMonitor startWebMonitorIfConfigured( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor, 			Logger logger) throws Exception;1548942528;Starts the web frontend.__@param config The Flink config._@param highAvailabilityServices Service factory for high availability services_@param jobManagerRetriever to retrieve the leading JobManagerGateway_@param queryServiceRetriever to resolve a query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations_@param logger Logger for log output_@return WebMonitor instance._@throws Exception;public static WebMonitor startWebMonitorIfConfigured(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor,_			Logger logger) throws Exception {__		if (config.getInteger(WebOptions.PORT, 0) >= 0) {_			logger.info("Starting JobManager Web Frontend")___			_			_			WebMonitor monitor = null___			_			if (monitor != null) {_				monitor.start()__			}_			return monitor__		}_		else {_			return null__		}_	};starts,the,web,frontend,param,config,the,flink,config,param,high,availability,services,service,factory,for,high,availability,services,param,job,manager,retriever,to,retrieve,the,leading,job,manager,gateway,param,query,service,retriever,to,resolve,a,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations,param,logger,logger,for,log,output,return,web,monitor,instance,throws,exception;public,static,web,monitor,start,web,monitor,if,configured,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,logger,logger,throws,exception,if,config,get,integer,web,options,port,0,0,logger,info,starting,job,manager,web,frontend,web,monitor,monitor,null,if,monitor,null,monitor,start,return,monitor,else,return,null
BootstrapTools -> public static void updateTmpDirectoriesInConfiguration(Configuration configuration, String defaultDirs);1530517337;Set temporary configuration directories if necessary__@param configuration flink config to patch_@param defaultDirs in case no tmp directories is set, next directories will be applied;public static void updateTmpDirectoriesInConfiguration(Configuration configuration, String defaultDirs){_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			LOG.info("Overriding Fink's temporary file directories with those " +_				"specified in the Flink config: {}", configuration.getValue(CoreOptions.TMP_DIRS))__			configuration.setBoolean(CoreOptions.USE_LOCAL_DEFAULT_TMP_DIRS, false)__		}_		else {_			LOG.info("Setting directories for temporary files to: {}", defaultDirs)__			configuration.setString(CoreOptions.TMP_DIRS, defaultDirs)__		}_	};set,temporary,configuration,directories,if,necessary,param,configuration,flink,config,to,patch,param,default,dirs,in,case,no,tmp,directories,is,set,next,directories,will,be,applied;public,static,void,update,tmp,directories,in,configuration,configuration,configuration,string,default,dirs,if,configuration,contains,core,options,log,info,overriding,fink,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,configuration,set,boolean,core,options,false,else,log,info,setting,directories,for,temporary,files,to,default,dirs,configuration,set,string,core,options,default,dirs
BootstrapTools -> public static void updateTmpDirectoriesInConfiguration(Configuration configuration, String defaultDirs);1531921515;Set temporary configuration directories if necessary__@param configuration flink config to patch_@param defaultDirs in case no tmp directories is set, next directories will be applied;public static void updateTmpDirectoriesInConfiguration(Configuration configuration, String defaultDirs){_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			LOG.info("Overriding Fink's temporary file directories with those " +_				"specified in the Flink config: {}", configuration.getValue(CoreOptions.TMP_DIRS))__		}_		else {_			LOG.info("Setting directories for temporary files to: {}", defaultDirs)__			configuration.setString(CoreOptions.TMP_DIRS, defaultDirs)__			configuration.setBoolean(USE_LOCAL_DEFAULT_TMP_DIRS, true)__		}_	};set,temporary,configuration,directories,if,necessary,param,configuration,flink,config,to,patch,param,default,dirs,in,case,no,tmp,directories,is,set,next,directories,will,be,applied;public,static,void,update,tmp,directories,in,configuration,configuration,configuration,string,default,dirs,if,configuration,contains,core,options,log,info,overriding,fink,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,log,info,setting,directories,for,temporary,files,to,default,dirs,configuration,set,string,core,options,default,dirs,configuration,set,boolean,true
BootstrapTools -> public static void updateTmpDirectoriesInConfiguration(Configuration configuration, String defaultDirs);1531921795;Set temporary configuration directories if necessary.__@param configuration flink config to patch_@param defaultDirs in case no tmp directories is set, next directories will be applied;public static void updateTmpDirectoriesInConfiguration(Configuration configuration, String defaultDirs){_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			LOG.info("Overriding Fink's temporary file directories with those " +_				"specified in the Flink config: {}", configuration.getValue(CoreOptions.TMP_DIRS))__		}_		else {_			LOG.info("Setting directories for temporary files to: {}", defaultDirs)__			configuration.setString(CoreOptions.TMP_DIRS, defaultDirs)__			configuration.setBoolean(USE_LOCAL_DEFAULT_TMP_DIRS, true)__		}_	};set,temporary,configuration,directories,if,necessary,param,configuration,flink,config,to,patch,param,default,dirs,in,case,no,tmp,directories,is,set,next,directories,will,be,applied;public,static,void,update,tmp,directories,in,configuration,configuration,configuration,string,default,dirs,if,configuration,contains,core,options,log,info,overriding,fink,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,log,info,setting,directories,for,temporary,files,to,default,dirs,configuration,set,string,core,options,default,dirs,configuration,set,boolean,true
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String actorSystemName, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1539730042;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param actorSystemName Name of the started {@link ActorSystem}_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String actorSystemName,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			_			_			ServerSocket availableSocket = NetUtils.createSocketFromPorts(portsIterator, ServerSocket::new)___			int port__			if (availableSocket == null) {_				throw new BindException("Unable to allocate further port in port range: " + portRangeDefinition)__			} else {_				port = availableSocket.getLocalPort()__				try {_					availableSocket.close()__				} catch (IOException ignored) {}_			}__			try {_				return startActorSystem(_					configuration,_					actorSystemName,_					listeningAddress,_					port,_					logger,_					actorSystemExecutorConfiguration)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,actor,system,name,name,of,the,started,link,actor,system,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,actor,system,name,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,server,socket,available,socket,net,utils,create,socket,from,ports,ports,iterator,server,socket,new,int,port,if,available,socket,null,throw,new,bind,exception,unable,to,allocate,further,port,in,port,range,port,range,definition,else,port,available,socket,get,local,port,try,available,socket,close,catch,ioexception,ignored,try,return,start,actor,system,configuration,actor,system,name,listening,address,port,logger,actor,system,executor,configuration,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String actorSystemName, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1539776151;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param actorSystemName Name of the started {@link ActorSystem}_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String actorSystemName,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			final int port = portsIterator.next()___			try {_				return startActorSystem(_					configuration,_					actorSystemName,_					listeningAddress,_					port,_					logger,_					actorSystemExecutorConfiguration)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,actor,system,name,name,of,the,started,link,actor,system,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,actor,system,name,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,final,int,port,ports,iterator,next,try,return,start,actor,system,configuration,actor,system,name,listening,address,port,logger,actor,system,executor,configuration,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String actorSystemName, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1548942528;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param actorSystemName Name of the started {@link ActorSystem}_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String actorSystemName,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			final int port = portsIterator.next()___			try {_				return startActorSystem(_					configuration,_					actorSystemName,_					listeningAddress,_					port,_					logger,_					actorSystemExecutorConfiguration)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,actor,system,name,name,of,the,started,link,actor,system,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,actor,system,name,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,final,int,port,ports,iterator,next,try,return,start,actor,system,configuration,actor,system,name,listening,address,port,logger,actor,system,executor,configuration,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static ActorSystem startActorSystem( 			Configuration configuration, 			String actorSystemName, 			String listeningAddress, 			String portRangeDefinition, 			Logger logger, 			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception;1550495375;Starts an ActorSystem with the given configuration listening at the address/ports.__@param configuration The Flink configuration_@param actorSystemName Name of the started {@link ActorSystem}_@param listeningAddress The address to listen at._@param portRangeDefinition The port range to choose a port from._@param logger The logger to output log information._@param actorSystemExecutorConfiguration configuration for the ActorSystem's underlying executor_@return The ActorSystem which has been started_@throws Exception Thrown when actor system cannot be started in specified port range;public static ActorSystem startActorSystem(_			Configuration configuration,_			String actorSystemName,_			String listeningAddress,_			String portRangeDefinition,_			Logger logger,_			@Nonnull ActorSystemExecutorConfiguration actorSystemExecutorConfiguration) throws Exception {__		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			final int port = portsIterator.next()___			try {_				return startActorSystem(_					configuration,_					actorSystemName,_					listeningAddress,_					port,_					logger,_					actorSystemExecutorConfiguration)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_						cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start actor system on any port in port range "_			+ portRangeDefinition)__	};starts,an,actor,system,with,the,given,configuration,listening,at,the,address,ports,param,configuration,the,flink,configuration,param,actor,system,name,name,of,the,started,link,actor,system,param,listening,address,the,address,to,listen,at,param,port,range,definition,the,port,range,to,choose,a,port,from,param,logger,the,logger,to,output,log,information,param,actor,system,executor,configuration,configuration,for,the,actor,system,s,underlying,executor,return,the,actor,system,which,has,been,started,throws,exception,thrown,when,actor,system,cannot,be,started,in,specified,port,range;public,static,actor,system,start,actor,system,configuration,configuration,string,actor,system,name,string,listening,address,string,port,range,definition,logger,logger,nonnull,actor,system,executor,configuration,actor,system,executor,configuration,throws,exception,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,final,int,port,ports,iterator,next,try,return,start,actor,system,configuration,actor,system,name,listening,address,port,logger,actor,system,executor,configuration,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,actor,system,on,any,port,in,port,range,port,range,definition
BootstrapTools -> public static Configuration cloneConfiguration(Configuration configuration);1531921515;Clones the given configuration and resets instance specific config options.__@param configuration to clone_@return Cloned configuration with reset instance specific config options;public static Configuration cloneConfiguration(Configuration configuration) {_		final Configuration clonedConfiguration = new Configuration(configuration)___		if (clonedConfiguration.getBoolean(USE_LOCAL_DEFAULT_TMP_DIRS)){_			clonedConfiguration.removeConfig(CoreOptions.TMP_DIRS)__			clonedConfiguration.removeConfig(USE_LOCAL_DEFAULT_TMP_DIRS)__		}__		return clonedConfiguration__	};clones,the,given,configuration,and,resets,instance,specific,config,options,param,configuration,to,clone,return,cloned,configuration,with,reset,instance,specific,config,options;public,static,configuration,clone,configuration,configuration,configuration,final,configuration,cloned,configuration,new,configuration,configuration,if,cloned,configuration,get,boolean,cloned,configuration,remove,config,core,options,cloned,configuration,remove,config,return,cloned,configuration
BootstrapTools -> public static Configuration cloneConfiguration(Configuration configuration);1531921795;Clones the given configuration and resets instance specific config options.__@param configuration to clone_@return Cloned configuration with reset instance specific config options;public static Configuration cloneConfiguration(Configuration configuration) {_		final Configuration clonedConfiguration = new Configuration(configuration)___		if (clonedConfiguration.getBoolean(USE_LOCAL_DEFAULT_TMP_DIRS)){_			clonedConfiguration.removeConfig(CoreOptions.TMP_DIRS)__			clonedConfiguration.removeConfig(USE_LOCAL_DEFAULT_TMP_DIRS)__		}__		return clonedConfiguration__	};clones,the,given,configuration,and,resets,instance,specific,config,options,param,configuration,to,clone,return,cloned,configuration,with,reset,instance,specific,config,options;public,static,configuration,clone,configuration,configuration,configuration,final,configuration,cloned,configuration,new,configuration,configuration,if,cloned,configuration,get,boolean,cloned,configuration,remove,config,core,options,cloned,configuration,remove,config,return,cloned,configuration
BootstrapTools -> public static Configuration cloneConfiguration(Configuration configuration);1532519854;Clones the given configuration and resets instance specific config options.__@param configuration to clone_@return Cloned configuration with reset instance specific config options;public static Configuration cloneConfiguration(Configuration configuration) {_		final Configuration clonedConfiguration = new Configuration(configuration)___		if (clonedConfiguration.getBoolean(USE_LOCAL_DEFAULT_TMP_DIRS)){_			clonedConfiguration.removeConfig(CoreOptions.TMP_DIRS)__			clonedConfiguration.removeConfig(USE_LOCAL_DEFAULT_TMP_DIRS)__		}__		return clonedConfiguration__	};clones,the,given,configuration,and,resets,instance,specific,config,options,param,configuration,to,clone,return,cloned,configuration,with,reset,instance,specific,config,options;public,static,configuration,clone,configuration,configuration,configuration,final,configuration,cloned,configuration,new,configuration,configuration,if,cloned,configuration,get,boolean,cloned,configuration,remove,config,core,options,cloned,configuration,remove,config,return,cloned,configuration
BootstrapTools -> public static Configuration cloneConfiguration(Configuration configuration);1532915642;Clones the given configuration and resets instance specific config options.__@param configuration to clone_@return Cloned configuration with reset instance specific config options;public static Configuration cloneConfiguration(Configuration configuration) {_		final Configuration clonedConfiguration = new Configuration(configuration)___		if (clonedConfiguration.getBoolean(USE_LOCAL_DEFAULT_TMP_DIRS)){_			clonedConfiguration.removeConfig(CoreOptions.TMP_DIRS)__			clonedConfiguration.removeConfig(USE_LOCAL_DEFAULT_TMP_DIRS)__		}__		return clonedConfiguration__	};clones,the,given,configuration,and,resets,instance,specific,config,options,param,configuration,to,clone,return,cloned,configuration,with,reset,instance,specific,config,options;public,static,configuration,clone,configuration,configuration,configuration,final,configuration,cloned,configuration,new,configuration,configuration,if,cloned,configuration,get,boolean,cloned,configuration,remove,config,core,options,cloned,configuration,remove,config,return,cloned,configuration
BootstrapTools -> public static Configuration cloneConfiguration(Configuration configuration);1537512807;Clones the given configuration and resets instance specific config options.__@param configuration to clone_@return Cloned configuration with reset instance specific config options;public static Configuration cloneConfiguration(Configuration configuration) {_		final Configuration clonedConfiguration = new Configuration(configuration)___		if (clonedConfiguration.getBoolean(USE_LOCAL_DEFAULT_TMP_DIRS)){_			clonedConfiguration.removeConfig(CoreOptions.TMP_DIRS)__			clonedConfiguration.removeConfig(USE_LOCAL_DEFAULT_TMP_DIRS)__		}__		return clonedConfiguration__	};clones,the,given,configuration,and,resets,instance,specific,config,options,param,configuration,to,clone,return,cloned,configuration,with,reset,instance,specific,config,options;public,static,configuration,clone,configuration,configuration,configuration,final,configuration,cloned,configuration,new,configuration,configuration,if,cloned,configuration,get,boolean,cloned,configuration,remove,config,core,options,cloned,configuration,remove,config,return,cloned,configuration
BootstrapTools -> public static Configuration cloneConfiguration(Configuration configuration);1539174278;Clones the given configuration and resets instance specific config options.__@param configuration to clone_@return Cloned configuration with reset instance specific config options;public static Configuration cloneConfiguration(Configuration configuration) {_		final Configuration clonedConfiguration = new Configuration(configuration)___		if (clonedConfiguration.getBoolean(USE_LOCAL_DEFAULT_TMP_DIRS)){_			clonedConfiguration.removeConfig(CoreOptions.TMP_DIRS)__			clonedConfiguration.removeConfig(USE_LOCAL_DEFAULT_TMP_DIRS)__		}__		return clonedConfiguration__	};clones,the,given,configuration,and,resets,instance,specific,config,options,param,configuration,to,clone,return,cloned,configuration,with,reset,instance,specific,config,options;public,static,configuration,clone,configuration,configuration,configuration,final,configuration,cloned,configuration,new,configuration,configuration,if,cloned,configuration,get,boolean,cloned,configuration,remove,config,core,options,cloned,configuration,remove,config,return,cloned,configuration
BootstrapTools -> public static Configuration cloneConfiguration(Configuration configuration);1539176312;Clones the given configuration and resets instance specific config options.__@param configuration to clone_@return Cloned configuration with reset instance specific config options;public static Configuration cloneConfiguration(Configuration configuration) {_		final Configuration clonedConfiguration = new Configuration(configuration)___		if (clonedConfiguration.getBoolean(USE_LOCAL_DEFAULT_TMP_DIRS)){_			clonedConfiguration.removeConfig(CoreOptions.TMP_DIRS)__			clonedConfiguration.removeConfig(USE_LOCAL_DEFAULT_TMP_DIRS)__		}__		return clonedConfiguration__	};clones,the,given,configuration,and,resets,instance,specific,config,options,param,configuration,to,clone,return,cloned,configuration,with,reset,instance,specific,config,options;public,static,configuration,clone,configuration,configuration,configuration,final,configuration,cloned,configuration,new,configuration,configuration,if,cloned,configuration,get,boolean,cloned,configuration,remove,config,core,options,cloned,configuration,remove,config,return,cloned,configuration
BootstrapTools -> public static Configuration cloneConfiguration(Configuration configuration);1539324323;Clones the given configuration and resets instance specific config options.__@param configuration to clone_@return Cloned configuration with reset instance specific config options;public static Configuration cloneConfiguration(Configuration configuration) {_		final Configuration clonedConfiguration = new Configuration(configuration)___		if (clonedConfiguration.getBoolean(USE_LOCAL_DEFAULT_TMP_DIRS)){_			clonedConfiguration.removeConfig(CoreOptions.TMP_DIRS)__			clonedConfiguration.removeConfig(USE_LOCAL_DEFAULT_TMP_DIRS)__		}__		return clonedConfiguration__	};clones,the,given,configuration,and,resets,instance,specific,config,options,param,configuration,to,clone,return,cloned,configuration,with,reset,instance,specific,config,options;public,static,configuration,clone,configuration,configuration,configuration,final,configuration,cloned,configuration,new,configuration,configuration,if,cloned,configuration,get,boolean,cloned,configuration,remove,config,core,options,cloned,configuration,remove,config,return,cloned,configuration
BootstrapTools -> public static Configuration cloneConfiguration(Configuration configuration);1539730042;Clones the given configuration and resets instance specific config options.__@param configuration to clone_@return Cloned configuration with reset instance specific config options;public static Configuration cloneConfiguration(Configuration configuration) {_		final Configuration clonedConfiguration = new Configuration(configuration)___		if (clonedConfiguration.getBoolean(USE_LOCAL_DEFAULT_TMP_DIRS)){_			clonedConfiguration.removeConfig(CoreOptions.TMP_DIRS)__			clonedConfiguration.removeConfig(USE_LOCAL_DEFAULT_TMP_DIRS)__		}__		return clonedConfiguration__	};clones,the,given,configuration,and,resets,instance,specific,config,options,param,configuration,to,clone,return,cloned,configuration,with,reset,instance,specific,config,options;public,static,configuration,clone,configuration,configuration,configuration,final,configuration,cloned,configuration,new,configuration,configuration,if,cloned,configuration,get,boolean,cloned,configuration,remove,config,core,options,cloned,configuration,remove,config,return,cloned,configuration
BootstrapTools -> public static Configuration cloneConfiguration(Configuration configuration);1539776151;Clones the given configuration and resets instance specific config options.__@param configuration to clone_@return Cloned configuration with reset instance specific config options;public static Configuration cloneConfiguration(Configuration configuration) {_		final Configuration clonedConfiguration = new Configuration(configuration)___		if (clonedConfiguration.getBoolean(USE_LOCAL_DEFAULT_TMP_DIRS)){_			clonedConfiguration.removeConfig(CoreOptions.TMP_DIRS)__			clonedConfiguration.removeConfig(USE_LOCAL_DEFAULT_TMP_DIRS)__		}__		return clonedConfiguration__	};clones,the,given,configuration,and,resets,instance,specific,config,options,param,configuration,to,clone,return,cloned,configuration,with,reset,instance,specific,config,options;public,static,configuration,clone,configuration,configuration,configuration,final,configuration,cloned,configuration,new,configuration,configuration,if,cloned,configuration,get,boolean,cloned,configuration,remove,config,core,options,cloned,configuration,remove,config,return,cloned,configuration
BootstrapTools -> public static Configuration cloneConfiguration(Configuration configuration);1548942528;Clones the given configuration and resets instance specific config options.__@param configuration to clone_@return Cloned configuration with reset instance specific config options;public static Configuration cloneConfiguration(Configuration configuration) {_		final Configuration clonedConfiguration = new Configuration(configuration)___		if (clonedConfiguration.getBoolean(USE_LOCAL_DEFAULT_TMP_DIRS)){_			clonedConfiguration.removeConfig(CoreOptions.TMP_DIRS)__			clonedConfiguration.removeConfig(USE_LOCAL_DEFAULT_TMP_DIRS)__		}__		return clonedConfiguration__	};clones,the,given,configuration,and,resets,instance,specific,config,options,param,configuration,to,clone,return,cloned,configuration,with,reset,instance,specific,config,options;public,static,configuration,clone,configuration,configuration,configuration,final,configuration,cloned,configuration,new,configuration,configuration,if,cloned,configuration,get,boolean,cloned,configuration,remove,config,core,options,cloned,configuration,remove,config,return,cloned,configuration
BootstrapTools -> public static Configuration cloneConfiguration(Configuration configuration);1550495375;Clones the given configuration and resets instance specific config options.__@param configuration to clone_@return Cloned configuration with reset instance specific config options;public static Configuration cloneConfiguration(Configuration configuration) {_		final Configuration clonedConfiguration = new Configuration(configuration)___		if (clonedConfiguration.getBoolean(USE_LOCAL_DEFAULT_TMP_DIRS)){_			clonedConfiguration.removeConfig(CoreOptions.TMP_DIRS)__			clonedConfiguration.removeConfig(USE_LOCAL_DEFAULT_TMP_DIRS)__		}__		return clonedConfiguration__	};clones,the,given,configuration,and,resets,instance,specific,config,options,param,configuration,to,clone,return,cloned,configuration,with,reset,instance,specific,config,options;public,static,configuration,clone,configuration,configuration,configuration,final,configuration,cloned,configuration,new,configuration,configuration,if,cloned,configuration,get,boolean,cloned,configuration,remove,config,core,options,cloned,configuration,remove,config,return,cloned,configuration
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1455013242;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.hostAndPortToUrlString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)__			logger.info("Actor system started at {}", hostPortUrl)__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,host,and,port,to,url,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,host,port,url,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1469059713;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.hostAndPortToUrlString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)__			logger.info("Actor system started at {}", hostPortUrl)__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,host,and,port,to,url,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,host,port,url,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1480580488;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.hostAndPortToUrlString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)__			logger.info("Actor system started at {}", hostPortUrl)__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,host,and,port,to,url,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,host,port,url,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1483370229;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.hostAndPortToUrlString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)__			logger.info("Actor system started at {}", hostPortUrl)__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,host,and,port,to,url,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,host,port,url,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1484756180;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1487339840;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1488008119;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1489680183;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1490831872;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1491482512;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1494318397;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1495200926;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1499354178;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1499358401;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1499408671;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1501692180;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1502358129;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1502791258;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1502976333;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1506346199;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = listeningAddress + ':' + listeningPort__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new scala.Some<>(new scala.Tuple2<String, Object>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,scala,some,new,scala,tuple2,string,object,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1507763843;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1510404342;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1515007198;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1516641334;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1521561714;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1522832722;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1530517337;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1531921515;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1531921795;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1532519854;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
BootstrapTools -> public static ActorSystem startActorSystem( 				Configuration configuration, 				String listeningAddress, 				int listeningPort, 				Logger logger) throws Exception;1532915642;Starts an Actor System at a specific port._@param configuration The Flink configuration._@param listeningAddress The address to listen at._@param listeningPort The port to listen at._@param logger the logger to output log information._@return The ActorSystem which has been started._@throws Exception;public static ActorSystem startActorSystem(_				Configuration configuration,_				String listeningAddress,_				int listeningPort,_				Logger logger) throws Exception {__		String hostPortUrl = NetUtils.unresolvedHostAndPortToNormalizedString(listeningAddress, listeningPort)__		logger.info("Trying to start actor system at {}", hostPortUrl)___		try {_			Config akkaConfig = AkkaUtils.getAkkaConfig(_				configuration,_				new Some<>(new Tuple2<>(listeningAddress, listeningPort))_			)___			logger.debug("Using akka configuration\n {}", akkaConfig)___			ActorSystem actorSystem = AkkaUtils.createActorSystem(akkaConfig)___			logger.info("Actor system started at {}", AkkaUtils.getAddress(actorSystem))__			return actorSystem__		}_		catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					throw new IOException("Unable to create ActorSystem at address " + hostPortUrl +_							" : " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create actor system", t)__		}_	};starts,an,actor,system,at,a,specific,port,param,configuration,the,flink,configuration,param,listening,address,the,address,to,listen,at,param,listening,port,the,port,to,listen,at,param,logger,the,logger,to,output,log,information,return,the,actor,system,which,has,been,started,throws,exception;public,static,actor,system,start,actor,system,configuration,configuration,string,listening,address,int,listening,port,logger,logger,throws,exception,string,host,port,url,net,utils,unresolved,host,and,port,to,normalized,string,listening,address,listening,port,logger,info,trying,to,start,actor,system,at,host,port,url,try,config,akka,config,akka,utils,get,akka,config,configuration,new,some,new,tuple2,listening,address,listening,port,logger,debug,using,akka,configuration,n,akka,config,actor,system,actor,system,akka,utils,create,actor,system,akka,config,logger,info,actor,system,started,at,akka,utils,get,address,actor,system,return,actor,system,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,throw,new,ioexception,unable,to,create,actor,system,at,address,host,port,url,cause,get,message,t,throw,new,exception,could,not,create,actor,system,t
