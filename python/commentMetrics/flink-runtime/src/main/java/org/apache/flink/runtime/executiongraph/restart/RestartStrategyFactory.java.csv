# id;timestamp;commentText;codeText;commentWords;codeWords
RestartStrategyFactory -> public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration);1455548285;Creates a {@link RestartStrategy} instance from the given {@link org.apache.flink.api.common.restartstrategy.RestartStrategies.RestartStrategyConfiguration}.__@param restartStrategyConfiguration Restart strategy configuration which specifies which_restart strategy to instantiate_@return RestartStrategy instance;public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration) {_		if (restartStrategyConfiguration instanceof RestartStrategies.NoRestartStrategyConfiguration) {_			return new NoRestartStrategy()__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FixedDelayRestartStrategyConfiguration) {_			RestartStrategies.FixedDelayRestartStrategyConfiguration fixedDelayConfig =_				(RestartStrategies.FixedDelayRestartStrategyConfiguration) restartStrategyConfiguration___			return new FixedDelayRestartStrategy(_				fixedDelayConfig.getRestartAttempts(),_				fixedDelayConfig.getDelayBetweenAttempts())__		} else {_			throw new IllegalArgumentException("Unknown restart strategy configuration " +_				restartStrategyConfiguration + ".")__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,org,apache,flink,api,common,restartstrategy,restart,strategies,restart,strategy,configuration,param,restart,strategy,configuration,restart,strategy,configuration,which,specifies,which,restart,strategy,to,instantiate,return,restart,strategy,instance;public,static,restart,strategy,create,restart,strategy,restart,strategies,restart,strategy,configuration,restart,strategy,configuration,if,restart,strategy,configuration,instanceof,restart,strategies,no,restart,strategy,configuration,return,new,no,restart,strategy,else,if,restart,strategy,configuration,instanceof,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategies,fixed,delay,restart,strategy,configuration,fixed,delay,config,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategy,configuration,return,new,fixed,delay,restart,strategy,fixed,delay,config,get,restart,attempts,fixed,delay,config,get,delay,between,attempts,else,throw,new,illegal,argument,exception,unknown,restart,strategy,configuration,restart,strategy,configuration
RestartStrategyFactory -> public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration);1455549473;Creates a {@link RestartStrategy} instance from the given {@link org.apache.flink.api.common.restartstrategy.RestartStrategies.RestartStrategyConfiguration}.__@param restartStrategyConfiguration Restart strategy configuration which specifies which_restart strategy to instantiate_@return RestartStrategy instance;public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration) {_		if (restartStrategyConfiguration instanceof RestartStrategies.NoRestartStrategyConfiguration) {_			return new NoRestartStrategy()__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FixedDelayRestartStrategyConfiguration) {_			RestartStrategies.FixedDelayRestartStrategyConfiguration fixedDelayConfig =_				(RestartStrategies.FixedDelayRestartStrategyConfiguration) restartStrategyConfiguration___			return new FixedDelayRestartStrategy(_				fixedDelayConfig.getRestartAttempts(),_				fixedDelayConfig.getDelayBetweenAttempts())__		} else {_			throw new IllegalArgumentException("Unknown restart strategy configuration " +_				restartStrategyConfiguration + ".")__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,org,apache,flink,api,common,restartstrategy,restart,strategies,restart,strategy,configuration,param,restart,strategy,configuration,restart,strategy,configuration,which,specifies,which,restart,strategy,to,instantiate,return,restart,strategy,instance;public,static,restart,strategy,create,restart,strategy,restart,strategies,restart,strategy,configuration,restart,strategy,configuration,if,restart,strategy,configuration,instanceof,restart,strategies,no,restart,strategy,configuration,return,new,no,restart,strategy,else,if,restart,strategy,configuration,instanceof,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategies,fixed,delay,restart,strategy,configuration,fixed,delay,config,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategy,configuration,return,new,fixed,delay,restart,strategy,fixed,delay,config,get,restart,attempts,fixed,delay,config,get,delay,between,attempts,else,throw,new,illegal,argument,exception,unknown,restart,strategy,configuration,restart,strategy,configuration
RestartStrategyFactory -> public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration);1461690276;Creates a {@link RestartStrategy} instance from the given {@link org.apache.flink.api.common.restartstrategy.RestartStrategies.RestartStrategyConfiguration}.__@param restartStrategyConfiguration Restart strategy configuration which specifies which_restart strategy to instantiate_@return RestartStrategy instance;public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration) {_		if (restartStrategyConfiguration instanceof RestartStrategies.NoRestartStrategyConfiguration) {_			return new NoRestartStrategy()__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FixedDelayRestartStrategyConfiguration) {_			RestartStrategies.FixedDelayRestartStrategyConfiguration fixedDelayConfig =_				(RestartStrategies.FixedDelayRestartStrategyConfiguration) restartStrategyConfiguration___			return new FixedDelayRestartStrategy(_				fixedDelayConfig.getRestartAttempts(),_				fixedDelayConfig.getDelayBetweenAttempts())__		} else {_			throw new IllegalArgumentException("Unknown restart strategy configuration " +_				restartStrategyConfiguration + ".")__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,org,apache,flink,api,common,restartstrategy,restart,strategies,restart,strategy,configuration,param,restart,strategy,configuration,restart,strategy,configuration,which,specifies,which,restart,strategy,to,instantiate,return,restart,strategy,instance;public,static,restart,strategy,create,restart,strategy,restart,strategies,restart,strategy,configuration,restart,strategy,configuration,if,restart,strategy,configuration,instanceof,restart,strategies,no,restart,strategy,configuration,return,new,no,restart,strategy,else,if,restart,strategy,configuration,instanceof,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategies,fixed,delay,restart,strategy,configuration,fixed,delay,config,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategy,configuration,return,new,fixed,delay,restart,strategy,fixed,delay,config,get,restart,attempts,fixed,delay,config,get,delay,between,attempts,else,throw,new,illegal,argument,exception,unknown,restart,strategy,configuration,restart,strategy,configuration
RestartStrategyFactory -> public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration);1468274438;Creates a {@link RestartStrategy} instance from the given {@link org.apache.flink.api.common.restartstrategy.RestartStrategies.RestartStrategyConfiguration}.__@param restartStrategyConfiguration Restart strategy configuration which specifies which_restart strategy to instantiate_@return RestartStrategy instance;public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration) {_		if (restartStrategyConfiguration instanceof RestartStrategies.NoRestartStrategyConfiguration) {_			return new NoRestartStrategy()__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FixedDelayRestartStrategyConfiguration) {_			RestartStrategies.FixedDelayRestartStrategyConfiguration fixedDelayConfig =_				(RestartStrategies.FixedDelayRestartStrategyConfiguration) restartStrategyConfiguration___			return new FixedDelayRestartStrategy(_				fixedDelayConfig.getRestartAttempts(),_				fixedDelayConfig.getDelayBetweenAttemptsInterval().toMilliseconds())__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FailureRateRestartStrategyConfiguration) {_			RestartStrategies.FailureRateRestartStrategyConfiguration config =_					(RestartStrategies.FailureRateRestartStrategyConfiguration) restartStrategyConfiguration__			return new FailureRateRestartStrategy(_					config.getMaxFailureRate(),_					config.getFailureInterval(),_					config.getDelayBetweenAttemptsInterval()_			)__		} else {_			throw new IllegalArgumentException("Unknown restart strategy configuration " +_				restartStrategyConfiguration + ".")__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,org,apache,flink,api,common,restartstrategy,restart,strategies,restart,strategy,configuration,param,restart,strategy,configuration,restart,strategy,configuration,which,specifies,which,restart,strategy,to,instantiate,return,restart,strategy,instance;public,static,restart,strategy,create,restart,strategy,restart,strategies,restart,strategy,configuration,restart,strategy,configuration,if,restart,strategy,configuration,instanceof,restart,strategies,no,restart,strategy,configuration,return,new,no,restart,strategy,else,if,restart,strategy,configuration,instanceof,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategies,fixed,delay,restart,strategy,configuration,fixed,delay,config,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategy,configuration,return,new,fixed,delay,restart,strategy,fixed,delay,config,get,restart,attempts,fixed,delay,config,get,delay,between,attempts,interval,to,milliseconds,else,if,restart,strategy,configuration,instanceof,restart,strategies,failure,rate,restart,strategy,configuration,restart,strategies,failure,rate,restart,strategy,configuration,config,restart,strategies,failure,rate,restart,strategy,configuration,restart,strategy,configuration,return,new,failure,rate,restart,strategy,config,get,max,failure,rate,config,get,failure,interval,config,get,delay,between,attempts,interval,else,throw,new,illegal,argument,exception,unknown,restart,strategy,configuration,restart,strategy,configuration
RestartStrategyFactory -> public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration);1474884019;Creates a {@link RestartStrategy} instance from the given {@link org.apache.flink.api.common.restartstrategy.RestartStrategies.RestartStrategyConfiguration}.__@param restartStrategyConfiguration Restart strategy configuration which specifies which_restart strategy to instantiate_@return RestartStrategy instance;public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration) {_		if (restartStrategyConfiguration instanceof RestartStrategies.NoRestartStrategyConfiguration) {_			return new NoRestartStrategy()__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FixedDelayRestartStrategyConfiguration) {_			RestartStrategies.FixedDelayRestartStrategyConfiguration fixedDelayConfig =_				(RestartStrategies.FixedDelayRestartStrategyConfiguration) restartStrategyConfiguration___			return new FixedDelayRestartStrategy(_				fixedDelayConfig.getRestartAttempts(),_				fixedDelayConfig.getDelayBetweenAttemptsInterval().toMilliseconds())__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FailureRateRestartStrategyConfiguration) {_			RestartStrategies.FailureRateRestartStrategyConfiguration config =_					(RestartStrategies.FailureRateRestartStrategyConfiguration) restartStrategyConfiguration__			return new FailureRateRestartStrategy(_					config.getMaxFailureRate(),_					config.getFailureInterval(),_					config.getDelayBetweenAttemptsInterval()_			)__		} else {_			throw new IllegalArgumentException("Unknown restart strategy configuration " +_				restartStrategyConfiguration + ".")__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,org,apache,flink,api,common,restartstrategy,restart,strategies,restart,strategy,configuration,param,restart,strategy,configuration,restart,strategy,configuration,which,specifies,which,restart,strategy,to,instantiate,return,restart,strategy,instance;public,static,restart,strategy,create,restart,strategy,restart,strategies,restart,strategy,configuration,restart,strategy,configuration,if,restart,strategy,configuration,instanceof,restart,strategies,no,restart,strategy,configuration,return,new,no,restart,strategy,else,if,restart,strategy,configuration,instanceof,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategies,fixed,delay,restart,strategy,configuration,fixed,delay,config,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategy,configuration,return,new,fixed,delay,restart,strategy,fixed,delay,config,get,restart,attempts,fixed,delay,config,get,delay,between,attempts,interval,to,milliseconds,else,if,restart,strategy,configuration,instanceof,restart,strategies,failure,rate,restart,strategy,configuration,restart,strategies,failure,rate,restart,strategy,configuration,config,restart,strategies,failure,rate,restart,strategy,configuration,restart,strategy,configuration,return,new,failure,rate,restart,strategy,config,get,max,failure,rate,config,get,failure,interval,config,get,delay,between,attempts,interval,else,throw,new,illegal,argument,exception,unknown,restart,strategy,configuration,restart,strategy,configuration
RestartStrategyFactory -> public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration);1478267816;Creates a {@link RestartStrategy} instance from the given {@link org.apache.flink.api.common.restartstrategy.RestartStrategies.RestartStrategyConfiguration}.__@param restartStrategyConfiguration Restart strategy configuration which specifies which_restart strategy to instantiate_@return RestartStrategy instance;public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration) {_		if (restartStrategyConfiguration instanceof RestartStrategies.NoRestartStrategyConfiguration) {_			return new NoRestartStrategy()__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FixedDelayRestartStrategyConfiguration) {_			RestartStrategies.FixedDelayRestartStrategyConfiguration fixedDelayConfig =_				(RestartStrategies.FixedDelayRestartStrategyConfiguration) restartStrategyConfiguration___			return new FixedDelayRestartStrategy(_				fixedDelayConfig.getRestartAttempts(),_				fixedDelayConfig.getDelayBetweenAttemptsInterval().toMilliseconds())__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FailureRateRestartStrategyConfiguration) {_			RestartStrategies.FailureRateRestartStrategyConfiguration config =_					(RestartStrategies.FailureRateRestartStrategyConfiguration) restartStrategyConfiguration__			return new FailureRateRestartStrategy(_					config.getMaxFailureRate(),_					config.getFailureInterval(),_					config.getDelayBetweenAttemptsInterval()_			)__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FallbackRestartStrategyConfiguration) {_			return null__		} else {_			throw new IllegalArgumentException("Unknown restart strategy configuration " +_				restartStrategyConfiguration + ".")__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,org,apache,flink,api,common,restartstrategy,restart,strategies,restart,strategy,configuration,param,restart,strategy,configuration,restart,strategy,configuration,which,specifies,which,restart,strategy,to,instantiate,return,restart,strategy,instance;public,static,restart,strategy,create,restart,strategy,restart,strategies,restart,strategy,configuration,restart,strategy,configuration,if,restart,strategy,configuration,instanceof,restart,strategies,no,restart,strategy,configuration,return,new,no,restart,strategy,else,if,restart,strategy,configuration,instanceof,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategies,fixed,delay,restart,strategy,configuration,fixed,delay,config,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategy,configuration,return,new,fixed,delay,restart,strategy,fixed,delay,config,get,restart,attempts,fixed,delay,config,get,delay,between,attempts,interval,to,milliseconds,else,if,restart,strategy,configuration,instanceof,restart,strategies,failure,rate,restart,strategy,configuration,restart,strategies,failure,rate,restart,strategy,configuration,config,restart,strategies,failure,rate,restart,strategy,configuration,restart,strategy,configuration,return,new,failure,rate,restart,strategy,config,get,max,failure,rate,config,get,failure,interval,config,get,delay,between,attempts,interval,else,if,restart,strategy,configuration,instanceof,restart,strategies,fallback,restart,strategy,configuration,return,null,else,throw,new,illegal,argument,exception,unknown,restart,strategy,configuration,restart,strategy,configuration
RestartStrategyFactory -> public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration);1495477702;Creates a {@link RestartStrategy} instance from the given {@link org.apache.flink.api.common.restartstrategy.RestartStrategies.RestartStrategyConfiguration}.__@param restartStrategyConfiguration Restart strategy configuration which specifies which_restart strategy to instantiate_@return RestartStrategy instance;public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration) {_		if (restartStrategyConfiguration instanceof RestartStrategies.NoRestartStrategyConfiguration) {_			return new NoRestartStrategy()__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FixedDelayRestartStrategyConfiguration) {_			RestartStrategies.FixedDelayRestartStrategyConfiguration fixedDelayConfig =_				(RestartStrategies.FixedDelayRestartStrategyConfiguration) restartStrategyConfiguration___			return new FixedDelayRestartStrategy(_				fixedDelayConfig.getRestartAttempts(),_				fixedDelayConfig.getDelayBetweenAttemptsInterval().toMilliseconds())__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FailureRateRestartStrategyConfiguration) {_			RestartStrategies.FailureRateRestartStrategyConfiguration config =_					(RestartStrategies.FailureRateRestartStrategyConfiguration) restartStrategyConfiguration__			return new FailureRateRestartStrategy(_					config.getMaxFailureRate(),_					config.getFailureInterval(),_					config.getDelayBetweenAttemptsInterval()_			)__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FallbackRestartStrategyConfiguration) {_			return null__		} else {_			throw new IllegalArgumentException("Unknown restart strategy configuration " +_				restartStrategyConfiguration + ".")__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,org,apache,flink,api,common,restartstrategy,restart,strategies,restart,strategy,configuration,param,restart,strategy,configuration,restart,strategy,configuration,which,specifies,which,restart,strategy,to,instantiate,return,restart,strategy,instance;public,static,restart,strategy,create,restart,strategy,restart,strategies,restart,strategy,configuration,restart,strategy,configuration,if,restart,strategy,configuration,instanceof,restart,strategies,no,restart,strategy,configuration,return,new,no,restart,strategy,else,if,restart,strategy,configuration,instanceof,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategies,fixed,delay,restart,strategy,configuration,fixed,delay,config,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategy,configuration,return,new,fixed,delay,restart,strategy,fixed,delay,config,get,restart,attempts,fixed,delay,config,get,delay,between,attempts,interval,to,milliseconds,else,if,restart,strategy,configuration,instanceof,restart,strategies,failure,rate,restart,strategy,configuration,restart,strategies,failure,rate,restart,strategy,configuration,config,restart,strategies,failure,rate,restart,strategy,configuration,restart,strategy,configuration,return,new,failure,rate,restart,strategy,config,get,max,failure,rate,config,get,failure,interval,config,get,delay,between,attempts,interval,else,if,restart,strategy,configuration,instanceof,restart,strategies,fallback,restart,strategy,configuration,return,null,else,throw,new,illegal,argument,exception,unknown,restart,strategy,configuration,restart,strategy,configuration
RestartStrategyFactory -> public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration);1511813739;Creates a {@link RestartStrategy} instance from the given {@link org.apache.flink.api.common.restartstrategy.RestartStrategies.RestartStrategyConfiguration}.__@param restartStrategyConfiguration Restart strategy configuration which specifies which_restart strategy to instantiate_@return RestartStrategy instance;public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration) {_		if (restartStrategyConfiguration instanceof RestartStrategies.NoRestartStrategyConfiguration) {_			return new NoRestartStrategy()__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FixedDelayRestartStrategyConfiguration) {_			RestartStrategies.FixedDelayRestartStrategyConfiguration fixedDelayConfig =_				(RestartStrategies.FixedDelayRestartStrategyConfiguration) restartStrategyConfiguration___			return new FixedDelayRestartStrategy(_				fixedDelayConfig.getRestartAttempts(),_				fixedDelayConfig.getDelayBetweenAttemptsInterval().toMilliseconds())__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FailureRateRestartStrategyConfiguration) {_			RestartStrategies.FailureRateRestartStrategyConfiguration config =_					(RestartStrategies.FailureRateRestartStrategyConfiguration) restartStrategyConfiguration__			return new FailureRateRestartStrategy(_					config.getMaxFailureRate(),_					config.getFailureInterval(),_					config.getDelayBetweenAttemptsInterval()_			)__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FallbackRestartStrategyConfiguration) {_			return null__		} else {_			throw new IllegalArgumentException("Unknown restart strategy configuration " +_				restartStrategyConfiguration + ".")__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,org,apache,flink,api,common,restartstrategy,restart,strategies,restart,strategy,configuration,param,restart,strategy,configuration,restart,strategy,configuration,which,specifies,which,restart,strategy,to,instantiate,return,restart,strategy,instance;public,static,restart,strategy,create,restart,strategy,restart,strategies,restart,strategy,configuration,restart,strategy,configuration,if,restart,strategy,configuration,instanceof,restart,strategies,no,restart,strategy,configuration,return,new,no,restart,strategy,else,if,restart,strategy,configuration,instanceof,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategies,fixed,delay,restart,strategy,configuration,fixed,delay,config,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategy,configuration,return,new,fixed,delay,restart,strategy,fixed,delay,config,get,restart,attempts,fixed,delay,config,get,delay,between,attempts,interval,to,milliseconds,else,if,restart,strategy,configuration,instanceof,restart,strategies,failure,rate,restart,strategy,configuration,restart,strategies,failure,rate,restart,strategy,configuration,config,restart,strategies,failure,rate,restart,strategy,configuration,restart,strategy,configuration,return,new,failure,rate,restart,strategy,config,get,max,failure,rate,config,get,failure,interval,config,get,delay,between,attempts,interval,else,if,restart,strategy,configuration,instanceof,restart,strategies,fallback,restart,strategy,configuration,return,null,else,throw,new,illegal,argument,exception,unknown,restart,strategy,configuration,restart,strategy,configuration
RestartStrategyFactory -> public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration);1531499577;Creates a {@link RestartStrategy} instance from the given {@link org.apache.flink.api.common.restartstrategy.RestartStrategies.RestartStrategyConfiguration}.__@param restartStrategyConfiguration Restart strategy configuration which specifies which_restart strategy to instantiate_@return RestartStrategy instance;public static RestartStrategy createRestartStrategy(RestartStrategies.RestartStrategyConfiguration restartStrategyConfiguration) {_		if (restartStrategyConfiguration instanceof RestartStrategies.NoRestartStrategyConfiguration) {_			return new NoRestartStrategy()__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FixedDelayRestartStrategyConfiguration) {_			RestartStrategies.FixedDelayRestartStrategyConfiguration fixedDelayConfig =_				(RestartStrategies.FixedDelayRestartStrategyConfiguration) restartStrategyConfiguration___			return new FixedDelayRestartStrategy(_				fixedDelayConfig.getRestartAttempts(),_				fixedDelayConfig.getDelayBetweenAttemptsInterval().toMilliseconds())__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FailureRateRestartStrategyConfiguration) {_			RestartStrategies.FailureRateRestartStrategyConfiguration config =_					(RestartStrategies.FailureRateRestartStrategyConfiguration) restartStrategyConfiguration__			return new FailureRateRestartStrategy(_					config.getMaxFailureRate(),_					config.getFailureInterval(),_					config.getDelayBetweenAttemptsInterval()_			)__		} else if (restartStrategyConfiguration instanceof RestartStrategies.FallbackRestartStrategyConfiguration) {_			return null__		} else {_			throw new IllegalArgumentException("Unknown restart strategy configuration " +_				restartStrategyConfiguration + ".")__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,org,apache,flink,api,common,restartstrategy,restart,strategies,restart,strategy,configuration,param,restart,strategy,configuration,restart,strategy,configuration,which,specifies,which,restart,strategy,to,instantiate,return,restart,strategy,instance;public,static,restart,strategy,create,restart,strategy,restart,strategies,restart,strategy,configuration,restart,strategy,configuration,if,restart,strategy,configuration,instanceof,restart,strategies,no,restart,strategy,configuration,return,new,no,restart,strategy,else,if,restart,strategy,configuration,instanceof,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategies,fixed,delay,restart,strategy,configuration,fixed,delay,config,restart,strategies,fixed,delay,restart,strategy,configuration,restart,strategy,configuration,return,new,fixed,delay,restart,strategy,fixed,delay,config,get,restart,attempts,fixed,delay,config,get,delay,between,attempts,interval,to,milliseconds,else,if,restart,strategy,configuration,instanceof,restart,strategies,failure,rate,restart,strategy,configuration,restart,strategies,failure,rate,restart,strategy,configuration,config,restart,strategies,failure,rate,restart,strategy,configuration,restart,strategy,configuration,return,new,failure,rate,restart,strategy,config,get,max,failure,rate,config,get,failure,interval,config,get,delay,between,attempts,interval,else,if,restart,strategy,configuration,instanceof,restart,strategies,fallback,restart,strategy,configuration,return,null,else,throw,new,illegal,argument,exception,unknown,restart,strategy,configuration,restart,strategy,configuration
RestartStrategyFactory -> public abstract RestartStrategy createRestartStrategy()_;1461690276;Factory method to create a restart strategy_@return The created restart strategy;public abstract RestartStrategy createRestartStrategy()_;factory,method,to,create,a,restart,strategy,return,the,created,restart,strategy;public,abstract,restart,strategy,create,restart,strategy
RestartStrategyFactory -> public abstract RestartStrategy createRestartStrategy()_;1468274438;Factory method to create a restart strategy_@return The created restart strategy;public abstract RestartStrategy createRestartStrategy()_;factory,method,to,create,a,restart,strategy,return,the,created,restart,strategy;public,abstract,restart,strategy,create,restart,strategy
RestartStrategyFactory -> public abstract RestartStrategy createRestartStrategy()_;1474884019;Factory method to create a restart strategy_@return The created restart strategy;public abstract RestartStrategy createRestartStrategy()_;factory,method,to,create,a,restart,strategy,return,the,created,restart,strategy;public,abstract,restart,strategy,create,restart,strategy
RestartStrategyFactory -> public abstract RestartStrategy createRestartStrategy()_;1478267816;Factory method to create a restart strategy_@return The created restart strategy;public abstract RestartStrategy createRestartStrategy()_;factory,method,to,create,a,restart,strategy,return,the,created,restart,strategy;public,abstract,restart,strategy,create,restart,strategy
RestartStrategyFactory -> public abstract RestartStrategy createRestartStrategy()_;1495477702;Factory method to create a restart strategy_@return The created restart strategy;public abstract RestartStrategy createRestartStrategy()_;factory,method,to,create,a,restart,strategy,return,the,created,restart,strategy;public,abstract,restart,strategy,create,restart,strategy
RestartStrategyFactory -> public abstract RestartStrategy createRestartStrategy()_;1511813739;Factory method to create a restart strategy_@return The created restart strategy;public abstract RestartStrategy createRestartStrategy()_;factory,method,to,create,a,restart,strategy,return,the,created,restart,strategy;public,abstract,restart,strategy,create,restart,strategy
RestartStrategyFactory -> public abstract RestartStrategy createRestartStrategy()_;1531499577;Factory method to create a restart strategy_@return The created restart strategy;public abstract RestartStrategy createRestartStrategy()_;factory,method,to,create,a,restart,strategy,return,the,created,restart,strategy;public,abstract,restart,strategy,create,restart,strategy
RestartStrategyFactory -> public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception;1461690276;Creates a {@link RestartStrategy} instance from the given {@link Configuration}.__@return RestartStrategy instance_@throws Exception which indicates that the RestartStrategy could not be instantiated.;public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception {_		String restartStrategyName = configuration.getString(ConfigConstants.RESTART_STRATEGY, "none").toLowerCase()___		switch (restartStrategyName) {_			case "none":_				_				final int numberExecutionRetries = configuration.getInteger(ConfigConstants.EXECUTION_RETRIES_KEY,_					ConfigConstants.DEFAULT_EXECUTION_RETRIES)__				String pauseString = configuration.getString(ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE,_					ConfigConstants.DEFAULT_AKKA_ASK_TIMEOUT)__				String delayString = configuration.getString(ConfigConstants.EXECUTION_RETRY_DELAY_KEY,_					pauseString)___				long delay___				try {_					delay = Duration.apply(delayString).toMillis()__				} catch (NumberFormatException nfe) {_					if (delayString.equals(pauseString)) {_						throw new Exception("Invalid config value for " +_							ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE + ": " + pauseString +_							". Value must be a valid duration (such as '10 s' or '1 min')")__					} else {_						throw new Exception("Invalid config value for " +_							ConfigConstants.EXECUTION_RETRY_DELAY_KEY + ": " + delayString +_							". Value must be a valid duration (such as '100 milli' or '10 s')")__					}_				}__				if (numberExecutionRetries > 0 && delay >= 0) {_					return new FixedDelayRestartStrategy.FixedDelayRestartStrategyFactory(numberExecutionRetries, delay)__				} else {_					return NoRestartStrategy.createFactory(configuration)__				}_			case "off":_			case "disable":_				return NoRestartStrategy.createFactory(configuration)__			case "fixeddelay":_			case "fixed-delay":_				return FixedDelayRestartStrategy.createFactory(configuration)__			default:_				try {_					Class<?> clazz = Class.forName(restartStrategyName)___					if (clazz != null) {_						Method method = clazz.getMethod(CREATE_METHOD, Configuration.class)___						if (method != null) {_							Object result = method.invoke(null, configuration)___							if (result != null) {_								return (RestartStrategyFactory) result__							}_						}_					}_				} catch (ClassNotFoundException cnfe) {_					LOG.warn("Could not find restart strategy class {}.", restartStrategyName)__				} catch (NoSuchMethodException nsme) {_					LOG.warn("Class {} does not has static method {}.", restartStrategyName, CREATE_METHOD)__				} catch (InvocationTargetException ite) {_					LOG.warn("Cannot call static method {} from class {}.", CREATE_METHOD, restartStrategyName)__				} catch (IllegalAccessException iae) {_					LOG.warn("Illegal access while calling method {} from class {}.", CREATE_METHOD, restartStrategyName)__				}__				_				return NoRestartStrategy.createFactory(configuration)__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,configuration,return,restart,strategy,instance,throws,exception,which,indicates,that,the,restart,strategy,could,not,be,instantiated;public,static,restart,strategy,factory,create,restart,strategy,factory,configuration,configuration,throws,exception,string,restart,strategy,name,configuration,get,string,config,constants,none,to,lower,case,switch,restart,strategy,name,case,none,final,int,number,execution,retries,configuration,get,integer,config,constants,config,constants,string,pause,string,configuration,get,string,config,constants,config,constants,string,delay,string,configuration,get,string,config,constants,pause,string,long,delay,try,delay,duration,apply,delay,string,to,millis,catch,number,format,exception,nfe,if,delay,string,equals,pause,string,throw,new,exception,invalid,config,value,for,config,constants,pause,string,value,must,be,a,valid,duration,such,as,10,s,or,1,min,else,throw,new,exception,invalid,config,value,for,config,constants,delay,string,value,must,be,a,valid,duration,such,as,100,milli,or,10,s,if,number,execution,retries,0,delay,0,return,new,fixed,delay,restart,strategy,fixed,delay,restart,strategy,factory,number,execution,retries,delay,else,return,no,restart,strategy,create,factory,configuration,case,off,case,disable,return,no,restart,strategy,create,factory,configuration,case,fixeddelay,case,fixed,delay,return,fixed,delay,restart,strategy,create,factory,configuration,default,try,class,clazz,class,for,name,restart,strategy,name,if,clazz,null,method,method,clazz,get,method,configuration,class,if,method,null,object,result,method,invoke,null,configuration,if,result,null,return,restart,strategy,factory,result,catch,class,not,found,exception,cnfe,log,warn,could,not,find,restart,strategy,class,restart,strategy,name,catch,no,such,method,exception,nsme,log,warn,class,does,not,has,static,method,restart,strategy,name,catch,invocation,target,exception,ite,log,warn,cannot,call,static,method,from,class,restart,strategy,name,catch,illegal,access,exception,iae,log,warn,illegal,access,while,calling,method,from,class,restart,strategy,name,return,no,restart,strategy,create,factory,configuration
RestartStrategyFactory -> public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception;1468274438;Creates a {@link RestartStrategy} instance from the given {@link Configuration}.__@return RestartStrategy instance_@throws Exception which indicates that the RestartStrategy could not be instantiated.;public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception {_		String restartStrategyName = configuration.getString(ConfigConstants.RESTART_STRATEGY, "none").toLowerCase()___		switch (restartStrategyName) {_			case "none":_				_				final int numberExecutionRetries = configuration.getInteger(ConfigConstants.EXECUTION_RETRIES_KEY,_					ConfigConstants.DEFAULT_EXECUTION_RETRIES)__				String pauseString = configuration.getString(ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE,_					ConfigConstants.DEFAULT_AKKA_ASK_TIMEOUT)__				String delayString = configuration.getString(ConfigConstants.EXECUTION_RETRY_DELAY_KEY,_					pauseString)___				long delay___				try {_					delay = Duration.apply(delayString).toMillis()__				} catch (NumberFormatException nfe) {_					if (delayString.equals(pauseString)) {_						throw new Exception("Invalid config value for " +_							ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE + ": " + pauseString +_							". Value must be a valid duration (such as '10 s' or '1 min')")__					} else {_						throw new Exception("Invalid config value for " +_							ConfigConstants.EXECUTION_RETRY_DELAY_KEY + ": " + delayString +_							". Value must be a valid duration (such as '100 milli' or '10 s')")__					}_				}__				if (numberExecutionRetries > 0 && delay >= 0) {_					return new FixedDelayRestartStrategy.FixedDelayRestartStrategyFactory(numberExecutionRetries, delay)__				} else {_					return NoRestartStrategy.createFactory(configuration)__				}_			case "off":_			case "disable":_				return NoRestartStrategy.createFactory(configuration)__			case "fixeddelay":_			case "fixed-delay":_				return FixedDelayRestartStrategy.createFactory(configuration)__			case "failurerate":_			case "failure-rate":_				return FailureRateRestartStrategy.createFactory(configuration)__			default:_				try {_					Class<?> clazz = Class.forName(restartStrategyName)___					if (clazz != null) {_						Method method = clazz.getMethod(CREATE_METHOD, Configuration.class)___						if (method != null) {_							Object result = method.invoke(null, configuration)___							if (result != null) {_								return (RestartStrategyFactory) result__							}_						}_					}_				} catch (ClassNotFoundException cnfe) {_					LOG.warn("Could not find restart strategy class {}.", restartStrategyName)__				} catch (NoSuchMethodException nsme) {_					LOG.warn("Class {} does not has static method {}.", restartStrategyName, CREATE_METHOD)__				} catch (InvocationTargetException ite) {_					LOG.warn("Cannot call static method {} from class {}.", CREATE_METHOD, restartStrategyName)__				} catch (IllegalAccessException iae) {_					LOG.warn("Illegal access while calling method {} from class {}.", CREATE_METHOD, restartStrategyName)__				}__				_				return NoRestartStrategy.createFactory(configuration)__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,configuration,return,restart,strategy,instance,throws,exception,which,indicates,that,the,restart,strategy,could,not,be,instantiated;public,static,restart,strategy,factory,create,restart,strategy,factory,configuration,configuration,throws,exception,string,restart,strategy,name,configuration,get,string,config,constants,none,to,lower,case,switch,restart,strategy,name,case,none,final,int,number,execution,retries,configuration,get,integer,config,constants,config,constants,string,pause,string,configuration,get,string,config,constants,config,constants,string,delay,string,configuration,get,string,config,constants,pause,string,long,delay,try,delay,duration,apply,delay,string,to,millis,catch,number,format,exception,nfe,if,delay,string,equals,pause,string,throw,new,exception,invalid,config,value,for,config,constants,pause,string,value,must,be,a,valid,duration,such,as,10,s,or,1,min,else,throw,new,exception,invalid,config,value,for,config,constants,delay,string,value,must,be,a,valid,duration,such,as,100,milli,or,10,s,if,number,execution,retries,0,delay,0,return,new,fixed,delay,restart,strategy,fixed,delay,restart,strategy,factory,number,execution,retries,delay,else,return,no,restart,strategy,create,factory,configuration,case,off,case,disable,return,no,restart,strategy,create,factory,configuration,case,fixeddelay,case,fixed,delay,return,fixed,delay,restart,strategy,create,factory,configuration,case,failurerate,case,failure,rate,return,failure,rate,restart,strategy,create,factory,configuration,default,try,class,clazz,class,for,name,restart,strategy,name,if,clazz,null,method,method,clazz,get,method,configuration,class,if,method,null,object,result,method,invoke,null,configuration,if,result,null,return,restart,strategy,factory,result,catch,class,not,found,exception,cnfe,log,warn,could,not,find,restart,strategy,class,restart,strategy,name,catch,no,such,method,exception,nsme,log,warn,class,does,not,has,static,method,restart,strategy,name,catch,invocation,target,exception,ite,log,warn,cannot,call,static,method,from,class,restart,strategy,name,catch,illegal,access,exception,iae,log,warn,illegal,access,while,calling,method,from,class,restart,strategy,name,return,no,restart,strategy,create,factory,configuration
RestartStrategyFactory -> public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception;1474884019;Creates a {@link RestartStrategy} instance from the given {@link Configuration}.__@return RestartStrategy instance_@throws Exception which indicates that the RestartStrategy could not be instantiated.;public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception {_		String restartStrategyName = configuration.getString(ConfigConstants.RESTART_STRATEGY, "none")___		switch (restartStrategyName.toLowerCase()) {_			case "none":_				_				final int numberExecutionRetries = configuration.getInteger(ConfigConstants.EXECUTION_RETRIES_KEY,_					ConfigConstants.DEFAULT_EXECUTION_RETRIES)__				String pauseString = configuration.getString(ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE,_					ConfigConstants.DEFAULT_AKKA_ASK_TIMEOUT)__				String delayString = configuration.getString(ConfigConstants.EXECUTION_RETRY_DELAY_KEY,_					pauseString)___				long delay___				try {_					delay = Duration.apply(delayString).toMillis()__				} catch (NumberFormatException nfe) {_					if (delayString.equals(pauseString)) {_						throw new Exception("Invalid config value for " +_							ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE + ": " + pauseString +_							". Value must be a valid duration (such as '10 s' or '1 min')")__					} else {_						throw new Exception("Invalid config value for " +_							ConfigConstants.EXECUTION_RETRY_DELAY_KEY + ": " + delayString +_							". Value must be a valid duration (such as '100 milli' or '10 s')")__					}_				}__				if (numberExecutionRetries > 0 && delay >= 0) {_					return new FixedDelayRestartStrategy.FixedDelayRestartStrategyFactory(numberExecutionRetries, delay)__				} else {_					return NoRestartStrategy.createFactory(configuration)__				}_			case "off":_			case "disable":_				return NoRestartStrategy.createFactory(configuration)__			case "fixeddelay":_			case "fixed-delay":_				return FixedDelayRestartStrategy.createFactory(configuration)__			case "failurerate":_			case "failure-rate":_				return FailureRateRestartStrategy.createFactory(configuration)__			default:_				try {_					Class<?> clazz = Class.forName(restartStrategyName)___					if (clazz != null) {_						Method method = clazz.getMethod(CREATE_METHOD, Configuration.class)___						if (method != null) {_							Object result = method.invoke(null, configuration)___							if (result != null) {_								return (RestartStrategyFactory) result__							}_						}_					}_				} catch (ClassNotFoundException cnfe) {_					LOG.warn("Could not find restart strategy class {}.", restartStrategyName)__				} catch (NoSuchMethodException nsme) {_					LOG.warn("Class {} does not has static method {}.", restartStrategyName, CREATE_METHOD)__				} catch (InvocationTargetException ite) {_					LOG.warn("Cannot call static method {} from class {}.", CREATE_METHOD, restartStrategyName)__				} catch (IllegalAccessException iae) {_					LOG.warn("Illegal access while calling method {} from class {}.", CREATE_METHOD, restartStrategyName)__				}__				_				return NoRestartStrategy.createFactory(configuration)__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,configuration,return,restart,strategy,instance,throws,exception,which,indicates,that,the,restart,strategy,could,not,be,instantiated;public,static,restart,strategy,factory,create,restart,strategy,factory,configuration,configuration,throws,exception,string,restart,strategy,name,configuration,get,string,config,constants,none,switch,restart,strategy,name,to,lower,case,case,none,final,int,number,execution,retries,configuration,get,integer,config,constants,config,constants,string,pause,string,configuration,get,string,config,constants,config,constants,string,delay,string,configuration,get,string,config,constants,pause,string,long,delay,try,delay,duration,apply,delay,string,to,millis,catch,number,format,exception,nfe,if,delay,string,equals,pause,string,throw,new,exception,invalid,config,value,for,config,constants,pause,string,value,must,be,a,valid,duration,such,as,10,s,or,1,min,else,throw,new,exception,invalid,config,value,for,config,constants,delay,string,value,must,be,a,valid,duration,such,as,100,milli,or,10,s,if,number,execution,retries,0,delay,0,return,new,fixed,delay,restart,strategy,fixed,delay,restart,strategy,factory,number,execution,retries,delay,else,return,no,restart,strategy,create,factory,configuration,case,off,case,disable,return,no,restart,strategy,create,factory,configuration,case,fixeddelay,case,fixed,delay,return,fixed,delay,restart,strategy,create,factory,configuration,case,failurerate,case,failure,rate,return,failure,rate,restart,strategy,create,factory,configuration,default,try,class,clazz,class,for,name,restart,strategy,name,if,clazz,null,method,method,clazz,get,method,configuration,class,if,method,null,object,result,method,invoke,null,configuration,if,result,null,return,restart,strategy,factory,result,catch,class,not,found,exception,cnfe,log,warn,could,not,find,restart,strategy,class,restart,strategy,name,catch,no,such,method,exception,nsme,log,warn,class,does,not,has,static,method,restart,strategy,name,catch,invocation,target,exception,ite,log,warn,cannot,call,static,method,from,class,restart,strategy,name,catch,illegal,access,exception,iae,log,warn,illegal,access,while,calling,method,from,class,restart,strategy,name,return,no,restart,strategy,create,factory,configuration
RestartStrategyFactory -> public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception;1478267816;Creates a {@link RestartStrategy} instance from the given {@link Configuration}.__@return RestartStrategy instance_@throws Exception which indicates that the RestartStrategy could not be instantiated.;public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception {_		String restartStrategyName = configuration.getString(ConfigConstants.RESTART_STRATEGY, "none")___		switch (restartStrategyName.toLowerCase()) {_			case "none":_				_				final int numberExecutionRetries = configuration.getInteger(ConfigConstants.EXECUTION_RETRIES_KEY,_					ConfigConstants.DEFAULT_EXECUTION_RETRIES)__				String pauseString = configuration.getString(ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE,_					ConfigConstants.DEFAULT_AKKA_ASK_TIMEOUT)__				String delayString = configuration.getString(ConfigConstants.EXECUTION_RETRY_DELAY_KEY,_					pauseString)___				long delay___				try {_					delay = Duration.apply(delayString).toMillis()__				} catch (NumberFormatException nfe) {_					if (delayString.equals(pauseString)) {_						throw new Exception("Invalid config value for " +_							ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE + ": " + pauseString +_							". Value must be a valid duration (such as '10 s' or '1 min')")__					} else {_						throw new Exception("Invalid config value for " +_							ConfigConstants.EXECUTION_RETRY_DELAY_KEY + ": " + delayString +_							". Value must be a valid duration (such as '100 milli' or '10 s')")__					}_				}__				if (numberExecutionRetries > 0 && delay >= 0) {_					return new FixedDelayRestartStrategy.FixedDelayRestartStrategyFactory(numberExecutionRetries, delay)__				} else {_					return NoRestartStrategy.createFactory(configuration)__				}_			case "off":_			case "disable":_				return NoRestartStrategy.createFactory(configuration)__			case "fixeddelay":_			case "fixed-delay":_				return FixedDelayRestartStrategy.createFactory(configuration)__			case "failurerate":_			case "failure-rate":_				return FailureRateRestartStrategy.createFactory(configuration)__			default:_				try {_					Class<?> clazz = Class.forName(restartStrategyName)___					if (clazz != null) {_						Method method = clazz.getMethod(CREATE_METHOD, Configuration.class)___						if (method != null) {_							Object result = method.invoke(null, configuration)___							if (result != null) {_								return (RestartStrategyFactory) result__							}_						}_					}_				} catch (ClassNotFoundException cnfe) {_					LOG.warn("Could not find restart strategy class {}.", restartStrategyName)__				} catch (NoSuchMethodException nsme) {_					LOG.warn("Class {} does not has static method {}.", restartStrategyName, CREATE_METHOD)__				} catch (InvocationTargetException ite) {_					LOG.warn("Cannot call static method {} from class {}.", CREATE_METHOD, restartStrategyName)__				} catch (IllegalAccessException iae) {_					LOG.warn("Illegal access while calling method {} from class {}.", CREATE_METHOD, restartStrategyName)__				}__				_				return NoRestartStrategy.createFactory(configuration)__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,configuration,return,restart,strategy,instance,throws,exception,which,indicates,that,the,restart,strategy,could,not,be,instantiated;public,static,restart,strategy,factory,create,restart,strategy,factory,configuration,configuration,throws,exception,string,restart,strategy,name,configuration,get,string,config,constants,none,switch,restart,strategy,name,to,lower,case,case,none,final,int,number,execution,retries,configuration,get,integer,config,constants,config,constants,string,pause,string,configuration,get,string,config,constants,config,constants,string,delay,string,configuration,get,string,config,constants,pause,string,long,delay,try,delay,duration,apply,delay,string,to,millis,catch,number,format,exception,nfe,if,delay,string,equals,pause,string,throw,new,exception,invalid,config,value,for,config,constants,pause,string,value,must,be,a,valid,duration,such,as,10,s,or,1,min,else,throw,new,exception,invalid,config,value,for,config,constants,delay,string,value,must,be,a,valid,duration,such,as,100,milli,or,10,s,if,number,execution,retries,0,delay,0,return,new,fixed,delay,restart,strategy,fixed,delay,restart,strategy,factory,number,execution,retries,delay,else,return,no,restart,strategy,create,factory,configuration,case,off,case,disable,return,no,restart,strategy,create,factory,configuration,case,fixeddelay,case,fixed,delay,return,fixed,delay,restart,strategy,create,factory,configuration,case,failurerate,case,failure,rate,return,failure,rate,restart,strategy,create,factory,configuration,default,try,class,clazz,class,for,name,restart,strategy,name,if,clazz,null,method,method,clazz,get,method,configuration,class,if,method,null,object,result,method,invoke,null,configuration,if,result,null,return,restart,strategy,factory,result,catch,class,not,found,exception,cnfe,log,warn,could,not,find,restart,strategy,class,restart,strategy,name,catch,no,such,method,exception,nsme,log,warn,class,does,not,has,static,method,restart,strategy,name,catch,invocation,target,exception,ite,log,warn,cannot,call,static,method,from,class,restart,strategy,name,catch,illegal,access,exception,iae,log,warn,illegal,access,while,calling,method,from,class,restart,strategy,name,return,no,restart,strategy,create,factory,configuration
RestartStrategyFactory -> public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception;1495477702;Creates a {@link RestartStrategy} instance from the given {@link Configuration}.__@return RestartStrategy instance_@throws Exception which indicates that the RestartStrategy could not be instantiated.;public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception {_		String restartStrategyName = configuration.getString(ConfigConstants.RESTART_STRATEGY, "none")___		switch (restartStrategyName.toLowerCase()) {_			case "none":_				_				final int numberExecutionRetries = configuration.getInteger(ConfigConstants.EXECUTION_RETRIES_KEY,_					ConfigConstants.DEFAULT_EXECUTION_RETRIES)__				String pauseString = configuration.getString(AkkaOptions.WATCH_HEARTBEAT_PAUSE)__				String delayString = configuration.getString(ConfigConstants.EXECUTION_RETRY_DELAY_KEY,_					pauseString)___				long delay___				try {_					delay = Duration.apply(delayString).toMillis()__				} catch (NumberFormatException nfe) {_					if (delayString.equals(pauseString)) {_						throw new Exception("Invalid config value for " +_							AkkaOptions.WATCH_HEARTBEAT_PAUSE.key() + ": " + pauseString +_							". Value must be a valid duration (such as '10 s' or '1 min')")__					} else {_						throw new Exception("Invalid config value for " +_							ConfigConstants.EXECUTION_RETRY_DELAY_KEY + ": " + delayString +_							". Value must be a valid duration (such as '100 milli' or '10 s')")__					}_				}__				if (numberExecutionRetries > 0 && delay >= 0) {_					return new FixedDelayRestartStrategy.FixedDelayRestartStrategyFactory(numberExecutionRetries, delay)__				} else {_					return NoRestartStrategy.createFactory(configuration)__				}_			case "off":_			case "disable":_				return NoRestartStrategy.createFactory(configuration)__			case "fixeddelay":_			case "fixed-delay":_				return FixedDelayRestartStrategy.createFactory(configuration)__			case "failurerate":_			case "failure-rate":_				return FailureRateRestartStrategy.createFactory(configuration)__			default:_				try {_					Class<?> clazz = Class.forName(restartStrategyName)___					if (clazz != null) {_						Method method = clazz.getMethod(CREATE_METHOD, Configuration.class)___						if (method != null) {_							Object result = method.invoke(null, configuration)___							if (result != null) {_								return (RestartStrategyFactory) result__							}_						}_					}_				} catch (ClassNotFoundException cnfe) {_					LOG.warn("Could not find restart strategy class {}.", restartStrategyName)__				} catch (NoSuchMethodException nsme) {_					LOG.warn("Class {} does not has static method {}.", restartStrategyName, CREATE_METHOD)__				} catch (InvocationTargetException ite) {_					LOG.warn("Cannot call static method {} from class {}.", CREATE_METHOD, restartStrategyName)__				} catch (IllegalAccessException iae) {_					LOG.warn("Illegal access while calling method {} from class {}.", CREATE_METHOD, restartStrategyName)__				}__				_				return NoRestartStrategy.createFactory(configuration)__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,configuration,return,restart,strategy,instance,throws,exception,which,indicates,that,the,restart,strategy,could,not,be,instantiated;public,static,restart,strategy,factory,create,restart,strategy,factory,configuration,configuration,throws,exception,string,restart,strategy,name,configuration,get,string,config,constants,none,switch,restart,strategy,name,to,lower,case,case,none,final,int,number,execution,retries,configuration,get,integer,config,constants,config,constants,string,pause,string,configuration,get,string,akka,options,string,delay,string,configuration,get,string,config,constants,pause,string,long,delay,try,delay,duration,apply,delay,string,to,millis,catch,number,format,exception,nfe,if,delay,string,equals,pause,string,throw,new,exception,invalid,config,value,for,akka,options,key,pause,string,value,must,be,a,valid,duration,such,as,10,s,or,1,min,else,throw,new,exception,invalid,config,value,for,config,constants,delay,string,value,must,be,a,valid,duration,such,as,100,milli,or,10,s,if,number,execution,retries,0,delay,0,return,new,fixed,delay,restart,strategy,fixed,delay,restart,strategy,factory,number,execution,retries,delay,else,return,no,restart,strategy,create,factory,configuration,case,off,case,disable,return,no,restart,strategy,create,factory,configuration,case,fixeddelay,case,fixed,delay,return,fixed,delay,restart,strategy,create,factory,configuration,case,failurerate,case,failure,rate,return,failure,rate,restart,strategy,create,factory,configuration,default,try,class,clazz,class,for,name,restart,strategy,name,if,clazz,null,method,method,clazz,get,method,configuration,class,if,method,null,object,result,method,invoke,null,configuration,if,result,null,return,restart,strategy,factory,result,catch,class,not,found,exception,cnfe,log,warn,could,not,find,restart,strategy,class,restart,strategy,name,catch,no,such,method,exception,nsme,log,warn,class,does,not,has,static,method,restart,strategy,name,catch,invocation,target,exception,ite,log,warn,cannot,call,static,method,from,class,restart,strategy,name,catch,illegal,access,exception,iae,log,warn,illegal,access,while,calling,method,from,class,restart,strategy,name,return,no,restart,strategy,create,factory,configuration
RestartStrategyFactory -> public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception;1511813739;Creates a {@link RestartStrategy} instance from the given {@link Configuration}.__@return RestartStrategy instance_@throws Exception which indicates that the RestartStrategy could not be instantiated.;public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception {_		String restartStrategyName = configuration.getString(ConfigConstants.RESTART_STRATEGY, "none")___		switch (restartStrategyName.toLowerCase()) {_			case "none":_				_				final int numberExecutionRetries = configuration.getInteger(ConfigConstants.RESTART_STRATEGY_FIXED_DELAY_ATTEMPTS,_					ConfigConstants.DEFAULT_EXECUTION_RETRIES)__				String pauseString = configuration.getString(AkkaOptions.WATCH_HEARTBEAT_PAUSE)__				String delayString = configuration.getString(ConfigConstants.RESTART_STRATEGY_FIXED_DELAY_DELAY,_					pauseString)___				long delay___				try {_					delay = Duration.apply(delayString).toMillis()__				} catch (NumberFormatException nfe) {_					if (delayString.equals(pauseString)) {_						throw new Exception("Invalid config value for " +_							AkkaOptions.WATCH_HEARTBEAT_PAUSE.key() + ": " + pauseString +_							". Value must be a valid duration (such as '10 s' or '1 min')")__					} else {_						throw new Exception("Invalid config value for " +_							ConfigConstants.RESTART_STRATEGY_FIXED_DELAY_DELAY + ": " + delayString +_							". Value must be a valid duration (such as '100 milli' or '10 s')")__					}_				}__				if (numberExecutionRetries > 0 && delay >= 0) {_					return new FixedDelayRestartStrategy.FixedDelayRestartStrategyFactory(numberExecutionRetries, delay)__				} else {_					return NoRestartStrategy.createFactory(configuration)__				}_			case "off":_			case "disable":_				return NoRestartStrategy.createFactory(configuration)__			case "fixeddelay":_			case "fixed-delay":_				return FixedDelayRestartStrategy.createFactory(configuration)__			case "failurerate":_			case "failure-rate":_				return FailureRateRestartStrategy.createFactory(configuration)__			default:_				try {_					Class<?> clazz = Class.forName(restartStrategyName)___					if (clazz != null) {_						Method method = clazz.getMethod(CREATE_METHOD, Configuration.class)___						if (method != null) {_							Object result = method.invoke(null, configuration)___							if (result != null) {_								return (RestartStrategyFactory) result__							}_						}_					}_				} catch (ClassNotFoundException cnfe) {_					LOG.warn("Could not find restart strategy class {}.", restartStrategyName)__				} catch (NoSuchMethodException nsme) {_					LOG.warn("Class {} does not has static method {}.", restartStrategyName, CREATE_METHOD)__				} catch (InvocationTargetException ite) {_					LOG.warn("Cannot call static method {} from class {}.", CREATE_METHOD, restartStrategyName)__				} catch (IllegalAccessException iae) {_					LOG.warn("Illegal access while calling method {} from class {}.", CREATE_METHOD, restartStrategyName)__				}__				_				return NoRestartStrategy.createFactory(configuration)__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,configuration,return,restart,strategy,instance,throws,exception,which,indicates,that,the,restart,strategy,could,not,be,instantiated;public,static,restart,strategy,factory,create,restart,strategy,factory,configuration,configuration,throws,exception,string,restart,strategy,name,configuration,get,string,config,constants,none,switch,restart,strategy,name,to,lower,case,case,none,final,int,number,execution,retries,configuration,get,integer,config,constants,config,constants,string,pause,string,configuration,get,string,akka,options,string,delay,string,configuration,get,string,config,constants,pause,string,long,delay,try,delay,duration,apply,delay,string,to,millis,catch,number,format,exception,nfe,if,delay,string,equals,pause,string,throw,new,exception,invalid,config,value,for,akka,options,key,pause,string,value,must,be,a,valid,duration,such,as,10,s,or,1,min,else,throw,new,exception,invalid,config,value,for,config,constants,delay,string,value,must,be,a,valid,duration,such,as,100,milli,or,10,s,if,number,execution,retries,0,delay,0,return,new,fixed,delay,restart,strategy,fixed,delay,restart,strategy,factory,number,execution,retries,delay,else,return,no,restart,strategy,create,factory,configuration,case,off,case,disable,return,no,restart,strategy,create,factory,configuration,case,fixeddelay,case,fixed,delay,return,fixed,delay,restart,strategy,create,factory,configuration,case,failurerate,case,failure,rate,return,failure,rate,restart,strategy,create,factory,configuration,default,try,class,clazz,class,for,name,restart,strategy,name,if,clazz,null,method,method,clazz,get,method,configuration,class,if,method,null,object,result,method,invoke,null,configuration,if,result,null,return,restart,strategy,factory,result,catch,class,not,found,exception,cnfe,log,warn,could,not,find,restart,strategy,class,restart,strategy,name,catch,no,such,method,exception,nsme,log,warn,class,does,not,has,static,method,restart,strategy,name,catch,invocation,target,exception,ite,log,warn,cannot,call,static,method,from,class,restart,strategy,name,catch,illegal,access,exception,iae,log,warn,illegal,access,while,calling,method,from,class,restart,strategy,name,return,no,restart,strategy,create,factory,configuration
RestartStrategyFactory -> public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception;1531499577;Creates a {@link RestartStrategy} instance from the given {@link Configuration}.__@return RestartStrategy instance_@throws Exception which indicates that the RestartStrategy could not be instantiated.;public static RestartStrategyFactory createRestartStrategyFactory(Configuration configuration) throws Exception {_		String restartStrategyName = configuration.getString(ConfigConstants.RESTART_STRATEGY, null)___		if (restartStrategyName == null) {_			_			final int numberExecutionRetries = configuration.getInteger(ConfigConstants.RESTART_STRATEGY_FIXED_DELAY_ATTEMPTS,_				ConfigConstants.DEFAULT_EXECUTION_RETRIES)__			String pauseString = configuration.getString(AkkaOptions.WATCH_HEARTBEAT_PAUSE)__			String delayString = configuration.getString(ConfigConstants.RESTART_STRATEGY_FIXED_DELAY_DELAY,_				pauseString)___			long delay___			try {_				delay = Duration.apply(delayString).toMillis()__			} catch (NumberFormatException nfe) {_				if (delayString.equals(pauseString)) {_					throw new Exception("Invalid config value for " +_						AkkaOptions.WATCH_HEARTBEAT_PAUSE.key() + ": " + pauseString +_						". Value must be a valid duration (such as '10 s' or '1 min')")__				} else {_					throw new Exception("Invalid config value for " +_						ConfigConstants.RESTART_STRATEGY_FIXED_DELAY_DELAY + ": " + delayString +_						". Value must be a valid duration (such as '100 milli' or '10 s')")__				}_			}__			if (numberExecutionRetries > 0 && delay >= 0) {_				return new FixedDelayRestartStrategy.FixedDelayRestartStrategyFactory(numberExecutionRetries, delay)__			} else {_				return new NoOrFixedIfCheckpointingEnabledRestartStrategyFactory()__			}_		}__		switch (restartStrategyName.toLowerCase()) {_			case "none":_			case "off":_			case "disable":_				return NoRestartStrategy.createFactory(configuration)__			case "fixeddelay":_			case "fixed-delay":_				return FixedDelayRestartStrategy.createFactory(configuration)__			case "failurerate":_			case "failure-rate":_				return FailureRateRestartStrategy.createFactory(configuration)__			default:_				try {_					Class<?> clazz = Class.forName(restartStrategyName)___					if (clazz != null) {_						Method method = clazz.getMethod(CREATE_METHOD, Configuration.class)___						if (method != null) {_							Object result = method.invoke(null, configuration)___							if (result != null) {_								return (RestartStrategyFactory) result__							}_						}_					}_				} catch (ClassNotFoundException cnfe) {_					LOG.warn("Could not find restart strategy class {}.", restartStrategyName)__				} catch (NoSuchMethodException nsme) {_					LOG.warn("Class {} does not has static method {}.", restartStrategyName, CREATE_METHOD)__				} catch (InvocationTargetException ite) {_					LOG.warn("Cannot call static method {} from class {}.", CREATE_METHOD, restartStrategyName)__				} catch (IllegalAccessException iae) {_					LOG.warn("Illegal access while calling method {} from class {}.", CREATE_METHOD, restartStrategyName)__				}__				_				return new NoOrFixedIfCheckpointingEnabledRestartStrategyFactory()__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,configuration,return,restart,strategy,instance,throws,exception,which,indicates,that,the,restart,strategy,could,not,be,instantiated;public,static,restart,strategy,factory,create,restart,strategy,factory,configuration,configuration,throws,exception,string,restart,strategy,name,configuration,get,string,config,constants,null,if,restart,strategy,name,null,final,int,number,execution,retries,configuration,get,integer,config,constants,config,constants,string,pause,string,configuration,get,string,akka,options,string,delay,string,configuration,get,string,config,constants,pause,string,long,delay,try,delay,duration,apply,delay,string,to,millis,catch,number,format,exception,nfe,if,delay,string,equals,pause,string,throw,new,exception,invalid,config,value,for,akka,options,key,pause,string,value,must,be,a,valid,duration,such,as,10,s,or,1,min,else,throw,new,exception,invalid,config,value,for,config,constants,delay,string,value,must,be,a,valid,duration,such,as,100,milli,or,10,s,if,number,execution,retries,0,delay,0,return,new,fixed,delay,restart,strategy,fixed,delay,restart,strategy,factory,number,execution,retries,delay,else,return,new,no,or,fixed,if,checkpointing,enabled,restart,strategy,factory,switch,restart,strategy,name,to,lower,case,case,none,case,off,case,disable,return,no,restart,strategy,create,factory,configuration,case,fixeddelay,case,fixed,delay,return,fixed,delay,restart,strategy,create,factory,configuration,case,failurerate,case,failure,rate,return,failure,rate,restart,strategy,create,factory,configuration,default,try,class,clazz,class,for,name,restart,strategy,name,if,clazz,null,method,method,clazz,get,method,configuration,class,if,method,null,object,result,method,invoke,null,configuration,if,result,null,return,restart,strategy,factory,result,catch,class,not,found,exception,cnfe,log,warn,could,not,find,restart,strategy,class,restart,strategy,name,catch,no,such,method,exception,nsme,log,warn,class,does,not,has,static,method,restart,strategy,name,catch,invocation,target,exception,ite,log,warn,cannot,call,static,method,from,class,restart,strategy,name,catch,illegal,access,exception,iae,log,warn,illegal,access,while,calling,method,from,class,restart,strategy,name,return,new,no,or,fixed,if,checkpointing,enabled,restart,strategy,factory
RestartStrategyFactory -> public static RestartStrategy createFromConfig(Configuration configuration) throws Exception;1455548285;Creates a {@link RestartStrategy} instance from the given {@link Configuration}.__@param configuration Configuration object containing the configuration values._@return RestartStrategy instance_@throws Exception which indicates that the RestartStrategy could not be instantiated.;public static RestartStrategy createFromConfig(Configuration configuration) throws Exception {_		String restartStrategyName = configuration.getString(ConfigConstants.RESTART_STRATEGY, "none").toLowerCase()___		switch (restartStrategyName) {_			case "none":_				_				final int numberExecutionRetries = configuration.getInteger(ConfigConstants.EXECUTION_RETRIES_KEY,_					ConfigConstants.DEFAULT_EXECUTION_RETRIES)__				String pauseString = configuration.getString(ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE,_					ConfigConstants.DEFAULT_AKKA_ASK_TIMEOUT)__				String delayString = configuration.getString(ConfigConstants.EXECUTION_RETRY_DELAY_KEY,_					pauseString)___				long delay___				try {_					delay = Duration.apply(delayString).toMillis()__				} catch (NumberFormatException nfe) {_					throw new Exception("Invalid config value for " + ConfigConstants.EXECUTION_RETRY_DELAY_KEY +_						": " + delayString + ". Value must be a valid duration (such as 100 s or 1 min).")__				}__				if (numberExecutionRetries > 0 && delay >= 0) {_					return new FixedDelayRestartStrategy(numberExecutionRetries, delay)__				} else {_					return NoRestartStrategy.create(configuration)__				}_			case "off":_			case "disable":_				return NoRestartStrategy.create(configuration)__			case "fixeddelay":_			case "fixed-delay":_				return FixedDelayRestartStrategy.create(configuration)__			default:_				try {_					Class<?> clazz = Class.forName(restartStrategyName)___					if (clazz != null) {_						Method method = clazz.getMethod(CREATE_METHOD, Configuration.class)___						if (method != null) {_							Object result = method.invoke(null, configuration)___							if (result != null) {_								return (RestartStrategy) result__							}_						}_					}_				} catch (ClassNotFoundException cnfe) {_					LOG.warn("Could not find restart strategy class {}.", restartStrategyName)__				} catch (NoSuchMethodException nsme) {_					LOG.warn("Class {} does not has static method {}.", restartStrategyName, CREATE_METHOD)__				} catch (InvocationTargetException ite) {_					LOG.warn("Cannot call static method {} from class {}.", CREATE_METHOD, restartStrategyName)__				} catch (IllegalAccessException iae) {_					LOG.warn("Illegal access while calling method {} from class {}.", CREATE_METHOD, restartStrategyName)__				}__				_				return NoRestartStrategy.create(configuration)__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,configuration,param,configuration,configuration,object,containing,the,configuration,values,return,restart,strategy,instance,throws,exception,which,indicates,that,the,restart,strategy,could,not,be,instantiated;public,static,restart,strategy,create,from,config,configuration,configuration,throws,exception,string,restart,strategy,name,configuration,get,string,config,constants,none,to,lower,case,switch,restart,strategy,name,case,none,final,int,number,execution,retries,configuration,get,integer,config,constants,config,constants,string,pause,string,configuration,get,string,config,constants,config,constants,string,delay,string,configuration,get,string,config,constants,pause,string,long,delay,try,delay,duration,apply,delay,string,to,millis,catch,number,format,exception,nfe,throw,new,exception,invalid,config,value,for,config,constants,delay,string,value,must,be,a,valid,duration,such,as,100,s,or,1,min,if,number,execution,retries,0,delay,0,return,new,fixed,delay,restart,strategy,number,execution,retries,delay,else,return,no,restart,strategy,create,configuration,case,off,case,disable,return,no,restart,strategy,create,configuration,case,fixeddelay,case,fixed,delay,return,fixed,delay,restart,strategy,create,configuration,default,try,class,clazz,class,for,name,restart,strategy,name,if,clazz,null,method,method,clazz,get,method,configuration,class,if,method,null,object,result,method,invoke,null,configuration,if,result,null,return,restart,strategy,result,catch,class,not,found,exception,cnfe,log,warn,could,not,find,restart,strategy,class,restart,strategy,name,catch,no,such,method,exception,nsme,log,warn,class,does,not,has,static,method,restart,strategy,name,catch,invocation,target,exception,ite,log,warn,cannot,call,static,method,from,class,restart,strategy,name,catch,illegal,access,exception,iae,log,warn,illegal,access,while,calling,method,from,class,restart,strategy,name,return,no,restart,strategy,create,configuration
RestartStrategyFactory -> public static RestartStrategy createFromConfig(Configuration configuration) throws Exception;1455549473;Creates a {@link RestartStrategy} instance from the given {@link Configuration}.__@param configuration Configuration object containing the configuration values._@return RestartStrategy instance_@throws Exception which indicates that the RestartStrategy could not be instantiated.;public static RestartStrategy createFromConfig(Configuration configuration) throws Exception {_		String restartStrategyName = configuration.getString(ConfigConstants.RESTART_STRATEGY, "none").toLowerCase()___		switch (restartStrategyName) {_			case "none":_				_				final int numberExecutionRetries = configuration.getInteger(ConfigConstants.EXECUTION_RETRIES_KEY,_					ConfigConstants.DEFAULT_EXECUTION_RETRIES)__				String pauseString = configuration.getString(ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE,_					ConfigConstants.DEFAULT_AKKA_ASK_TIMEOUT)__				String delayString = configuration.getString(ConfigConstants.EXECUTION_RETRY_DELAY_KEY,_					pauseString)___				long delay___				try {_					delay = Duration.apply(delayString).toMillis()__				} catch (NumberFormatException nfe) {_					if (delayString.equals(pauseString)) {_						throw new Exception("Invalid config value for " +_							ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE + ": " + pauseString +_							". Value must be a valid duration (such as '10 s' or '1 min')")__					} else {_						throw new Exception("Invalid config value for " +_							ConfigConstants.EXECUTION_RETRY_DELAY_KEY + ": " + delayString +_							". Value must be a valid duration (such as '100 milli' or '10 s')")__					}_				}__				if (numberExecutionRetries > 0 && delay >= 0) {_					return new FixedDelayRestartStrategy(numberExecutionRetries, delay)__				} else {_					return NoRestartStrategy.create(configuration)__				}_			case "off":_			case "disable":_				return NoRestartStrategy.create(configuration)__			case "fixeddelay":_			case "fixed-delay":_				return FixedDelayRestartStrategy.create(configuration)__			default:_				try {_					Class<?> clazz = Class.forName(restartStrategyName)___					if (clazz != null) {_						Method method = clazz.getMethod(CREATE_METHOD, Configuration.class)___						if (method != null) {_							Object result = method.invoke(null, configuration)___							if (result != null) {_								return (RestartStrategy) result__							}_						}_					}_				} catch (ClassNotFoundException cnfe) {_					LOG.warn("Could not find restart strategy class {}.", restartStrategyName)__				} catch (NoSuchMethodException nsme) {_					LOG.warn("Class {} does not has static method {}.", restartStrategyName, CREATE_METHOD)__				} catch (InvocationTargetException ite) {_					LOG.warn("Cannot call static method {} from class {}.", CREATE_METHOD, restartStrategyName)__				} catch (IllegalAccessException iae) {_					LOG.warn("Illegal access while calling method {} from class {}.", CREATE_METHOD, restartStrategyName)__				}__				_				return NoRestartStrategy.create(configuration)__		}_	};creates,a,link,restart,strategy,instance,from,the,given,link,configuration,param,configuration,configuration,object,containing,the,configuration,values,return,restart,strategy,instance,throws,exception,which,indicates,that,the,restart,strategy,could,not,be,instantiated;public,static,restart,strategy,create,from,config,configuration,configuration,throws,exception,string,restart,strategy,name,configuration,get,string,config,constants,none,to,lower,case,switch,restart,strategy,name,case,none,final,int,number,execution,retries,configuration,get,integer,config,constants,config,constants,string,pause,string,configuration,get,string,config,constants,config,constants,string,delay,string,configuration,get,string,config,constants,pause,string,long,delay,try,delay,duration,apply,delay,string,to,millis,catch,number,format,exception,nfe,if,delay,string,equals,pause,string,throw,new,exception,invalid,config,value,for,config,constants,pause,string,value,must,be,a,valid,duration,such,as,10,s,or,1,min,else,throw,new,exception,invalid,config,value,for,config,constants,delay,string,value,must,be,a,valid,duration,such,as,100,milli,or,10,s,if,number,execution,retries,0,delay,0,return,new,fixed,delay,restart,strategy,number,execution,retries,delay,else,return,no,restart,strategy,create,configuration,case,off,case,disable,return,no,restart,strategy,create,configuration,case,fixeddelay,case,fixed,delay,return,fixed,delay,restart,strategy,create,configuration,default,try,class,clazz,class,for,name,restart,strategy,name,if,clazz,null,method,method,clazz,get,method,configuration,class,if,method,null,object,result,method,invoke,null,configuration,if,result,null,return,restart,strategy,result,catch,class,not,found,exception,cnfe,log,warn,could,not,find,restart,strategy,class,restart,strategy,name,catch,no,such,method,exception,nsme,log,warn,class,does,not,has,static,method,restart,strategy,name,catch,invocation,target,exception,ite,log,warn,cannot,call,static,method,from,class,restart,strategy,name,catch,illegal,access,exception,iae,log,warn,illegal,access,while,calling,method,from,class,restart,strategy,name,return,no,restart,strategy,create,configuration
