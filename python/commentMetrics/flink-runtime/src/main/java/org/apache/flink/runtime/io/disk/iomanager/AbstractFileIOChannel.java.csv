# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractFileIOChannel -> protected AbstractFileIOChannel(FileIOChannel.ID channelID, boolean writeEnabled) throws IOException;1415382319;Creates a new channel to the path indicated by the given ID. The channel hands IO requests to_the given request queue to be processed.__@param channelID The id describing the path of the file that the channel accessed._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AbstractFileIOChannel(FileIOChannel.ID channelID, boolean writeEnabled) throws IOException {_		this.id = Preconditions.checkNotNull(channelID)__		_		try {_			@SuppressWarnings("resource")_			RandomAccessFile file = new RandomAccessFile(id.getPath(), writeEnabled ? "rw" : "r")__			this.fileChannel = file.getChannel()__		}_		catch (IOException e) {_			throw new IOException("Channel to path '" + channelID.getPath() + "' could not be opened.", e)__		}_	};creates,a,new,channel,to,the,path,indicated,by,the,given,id,the,channel,hands,io,requests,to,the,given,request,queue,to,be,processed,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,abstract,file,iochannel,file,iochannel,id,channel,id,boolean,write,enabled,throws,ioexception,this,id,preconditions,check,not,null,channel,id,try,suppress,warnings,resource,random,access,file,file,new,random,access,file,id,get,path,write,enabled,rw,r,this,file,channel,file,get,channel,catch,ioexception,e,throw,new,ioexception,channel,to,path,channel,id,get,path,could,not,be,opened,e
AbstractFileIOChannel -> protected AbstractFileIOChannel(FileIOChannel.ID channelID, boolean writeEnabled) throws IOException;1417461685;Creates a new channel to the path indicated by the given ID. The channel hands IO requests to_the given request queue to be processed.__@param channelID The id describing the path of the file that the channel accessed._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AbstractFileIOChannel(FileIOChannel.ID channelID, boolean writeEnabled) throws IOException {_		this.id = Preconditions.checkNotNull(channelID)__		_		try {_			@SuppressWarnings("resource")_			RandomAccessFile file = new RandomAccessFile(id.getPath(), writeEnabled ? "rw" : "r")__			this.fileChannel = file.getChannel()__		}_		catch (IOException e) {_			throw new IOException("Channel to path '" + channelID.getPath() + "' could not be opened.", e)__		}_	};creates,a,new,channel,to,the,path,indicated,by,the,given,id,the,channel,hands,io,requests,to,the,given,request,queue,to,be,processed,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,abstract,file,iochannel,file,iochannel,id,channel,id,boolean,write,enabled,throws,ioexception,this,id,preconditions,check,not,null,channel,id,try,suppress,warnings,resource,random,access,file,file,new,random,access,file,id,get,path,write,enabled,rw,r,this,file,channel,file,get,channel,catch,ioexception,e,throw,new,ioexception,channel,to,path,channel,id,get,path,could,not,be,opened,e
AbstractFileIOChannel -> protected AbstractFileIOChannel(FileIOChannel.ID channelID, boolean writeEnabled) throws IOException;1420560668;Creates a new channel to the path indicated by the given ID. The channel hands IO requests to_the given request queue to be processed.__@param channelID The id describing the path of the file that the channel accessed._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AbstractFileIOChannel(FileIOChannel.ID channelID, boolean writeEnabled) throws IOException {_		this.id = Preconditions.checkNotNull(channelID)__		_		try {_			@SuppressWarnings("resource")_			RandomAccessFile file = new RandomAccessFile(id.getPath(), writeEnabled ? "rw" : "r")__			this.fileChannel = file.getChannel()__		}_		catch (IOException e) {_			throw new IOException("Channel to path '" + channelID.getPath() + "' could not be opened.", e)__		}_	};creates,a,new,channel,to,the,path,indicated,by,the,given,id,the,channel,hands,io,requests,to,the,given,request,queue,to,be,processed,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,abstract,file,iochannel,file,iochannel,id,channel,id,boolean,write,enabled,throws,ioexception,this,id,preconditions,check,not,null,channel,id,try,suppress,warnings,resource,random,access,file,file,new,random,access,file,id,get,path,write,enabled,rw,r,this,file,channel,file,get,channel,catch,ioexception,e,throw,new,ioexception,channel,to,path,channel,id,get,path,could,not,be,opened,e
AbstractFileIOChannel -> protected AbstractFileIOChannel(FileIOChannel.ID channelID, boolean writeEnabled) throws IOException;1465394479;Creates a new channel to the path indicated by the given ID. The channel hands IO requests to_the given request queue to be processed.__@param channelID The id describing the path of the file that the channel accessed._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AbstractFileIOChannel(FileIOChannel.ID channelID, boolean writeEnabled) throws IOException {_		this.id = Preconditions.checkNotNull(channelID)__		_		try {_			@SuppressWarnings("resource")_			RandomAccessFile file = new RandomAccessFile(id.getPath(), writeEnabled ? "rw" : "r")__			this.fileChannel = file.getChannel()__		}_		catch (IOException e) {_			throw new IOException("Channel to path '" + channelID.getPath() + "' could not be opened.", e)__		}_	};creates,a,new,channel,to,the,path,indicated,by,the,given,id,the,channel,hands,io,requests,to,the,given,request,queue,to,be,processed,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,abstract,file,iochannel,file,iochannel,id,channel,id,boolean,write,enabled,throws,ioexception,this,id,preconditions,check,not,null,channel,id,try,suppress,warnings,resource,random,access,file,file,new,random,access,file,id,get,path,write,enabled,rw,r,this,file,channel,file,get,channel,catch,ioexception,e,throw,new,ioexception,channel,to,path,channel,id,get,path,could,not,be,opened,e
