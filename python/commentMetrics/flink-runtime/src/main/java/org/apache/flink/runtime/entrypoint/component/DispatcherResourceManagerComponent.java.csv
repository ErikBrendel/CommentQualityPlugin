# id;timestamp;commentText;codeText;commentWords;codeWords
DispatcherResourceManagerComponent -> public CompletableFuture<Void> deregisterApplication(ApplicationStatus applicationStatus, @Nullable String diagnostics);1537655310;Deregister the Flink application from the resource management system by signalling_the {@link ResourceManager}.__@param applicationStatus to terminate the application with_@param diagnostics additional information about the shut down, can be {@code null}_@return Future which is completed once the shut down;public CompletableFuture<Void> deregisterApplication(ApplicationStatus applicationStatus, @Nullable String diagnostics) {_		final ResourceManagerGateway selfGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		return selfGateway.deregisterApplication(applicationStatus, diagnostics).thenApply(ack -> null)__	};deregister,the,flink,application,from,the,resource,management,system,by,signalling,the,link,resource,manager,param,application,status,to,terminate,the,application,with,param,diagnostics,additional,information,about,the,shut,down,can,be,code,null,return,future,which,is,completed,once,the,shut,down;public,completable,future,void,deregister,application,application,status,application,status,nullable,string,diagnostics,final,resource,manager,gateway,self,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,return,self,gateway,deregister,application,application,status,diagnostics,then,apply,ack,null
DispatcherResourceManagerComponent -> public CompletableFuture<Void> deregisterApplication(ApplicationStatus applicationStatus, @Nullable String diagnostics);1538050641;Deregister the Flink application from the resource management system by signalling_the {@link ResourceManager}.__@param applicationStatus to terminate the application with_@param diagnostics additional information about the shut down, can be {@code null}_@return Future which is completed once the shut down;public CompletableFuture<Void> deregisterApplication(ApplicationStatus applicationStatus, @Nullable String diagnostics) {_		final ResourceManagerGateway selfGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		return selfGateway.deregisterApplication(applicationStatus, diagnostics).thenApply(ack -> null)__	};deregister,the,flink,application,from,the,resource,management,system,by,signalling,the,link,resource,manager,param,application,status,to,terminate,the,application,with,param,diagnostics,additional,information,about,the,shut,down,can,be,code,null,return,future,which,is,completed,once,the,shut,down;public,completable,future,void,deregister,application,application,status,application,status,nullable,string,diagnostics,final,resource,manager,gateway,self,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,return,self,gateway,deregister,application,application,status,diagnostics,then,apply,ack,null
DispatcherResourceManagerComponent -> public CompletableFuture<Void> deregisterApplicationAndClose( 			final ApplicationStatus applicationStatus, 			final @Nullable String diagnostics);1537459194;Deregister the Flink application from the resource management system by signalling_the {@link ResourceManager}.__@param applicationStatus to terminate the application with_@param diagnostics additional information about the shut down, can be {@code null}_@return Future which is completed once the shut down;public CompletableFuture<Void> deregisterApplicationAndClose(_			final ApplicationStatus applicationStatus,_			final @Nullable String diagnostics) {__		if (isRunning.compareAndSet(true, false)) {_			final CompletableFuture<Void> closeWebMonitorAndDeregisterAppFuture =_				FutureUtils.composeAfterwards(webMonitorEndpoint.closeAsync(), () -> deregisterApplication(applicationStatus, diagnostics))___			return FutureUtils.composeAfterwards(closeWebMonitorAndDeregisterAppFuture, this::closeAsyncInternal)__		} else {_			return terminationFuture__		}_	};deregister,the,flink,application,from,the,resource,management,system,by,signalling,the,link,resource,manager,param,application,status,to,terminate,the,application,with,param,diagnostics,additional,information,about,the,shut,down,can,be,code,null,return,future,which,is,completed,once,the,shut,down;public,completable,future,void,deregister,application,and,close,final,application,status,application,status,final,nullable,string,diagnostics,if,is,running,compare,and,set,true,false,final,completable,future,void,close,web,monitor,and,deregister,app,future,future,utils,compose,afterwards,web,monitor,endpoint,close,async,deregister,application,application,status,diagnostics,return,future,utils,compose,afterwards,close,web,monitor,and,deregister,app,future,this,close,async,internal,else,return,termination,future
DispatcherResourceManagerComponent -> public CompletableFuture<Void> deregisterApplicationAndClose( 			final ApplicationStatus applicationStatus, 			final @Nullable String diagnostics);1549018706;Deregister the Flink application from the resource management system by signalling_the {@link ResourceManager}.__@param applicationStatus to terminate the application with_@param diagnostics additional information about the shut down, can be {@code null}_@return Future which is completed once the shut down;public CompletableFuture<Void> deregisterApplicationAndClose(_			final ApplicationStatus applicationStatus,_			final @Nullable String diagnostics) {__		if (isRunning.compareAndSet(true, false)) {_			final CompletableFuture<Void> closeWebMonitorAndDeregisterAppFuture =_				FutureUtils.composeAfterwards(webMonitorEndpoint.closeAsync(), () -> deregisterApplication(applicationStatus, diagnostics))___			return FutureUtils.composeAfterwards(closeWebMonitorAndDeregisterAppFuture, this::closeAsyncInteral)__		} else {_			return terminationFuture__		}_	};deregister,the,flink,application,from,the,resource,management,system,by,signalling,the,link,resource,manager,param,application,status,to,terminate,the,application,with,param,diagnostics,additional,information,about,the,shut,down,can,be,code,null,return,future,which,is,completed,once,the,shut,down;public,completable,future,void,deregister,application,and,close,final,application,status,application,status,final,nullable,string,diagnostics,if,is,running,compare,and,set,true,false,final,completable,future,void,close,web,monitor,and,deregister,app,future,future,utils,compose,afterwards,web,monitor,endpoint,close,async,deregister,application,application,status,diagnostics,return,future,utils,compose,afterwards,close,web,monitor,and,deregister,app,future,this,close,async,interal,else,return,termination,future
DispatcherResourceManagerComponent -> public CompletableFuture<Void> deregisterApplicationAndClose( 			final ApplicationStatus applicationStatus, 			final @Nullable String diagnostics);1549558453;Deregister the Flink application from the resource management system by signalling_the {@link ResourceManager}.__@param applicationStatus to terminate the application with_@param diagnostics additional information about the shut down, can be {@code null}_@return Future which is completed once the shut down;public CompletableFuture<Void> deregisterApplicationAndClose(_			final ApplicationStatus applicationStatus,_			final @Nullable String diagnostics) {__		if (isRunning.compareAndSet(true, false)) {_			final CompletableFuture<Void> closeWebMonitorAndDeregisterAppFuture =_				FutureUtils.composeAfterwards(webMonitorEndpoint.closeAsync(), () -> deregisterApplication(applicationStatus, diagnostics))___			return FutureUtils.composeAfterwards(closeWebMonitorAndDeregisterAppFuture, this::closeAsyncInternal)__		} else {_			return terminationFuture__		}_	};deregister,the,flink,application,from,the,resource,management,system,by,signalling,the,link,resource,manager,param,application,status,to,terminate,the,application,with,param,diagnostics,additional,information,about,the,shut,down,can,be,code,null,return,future,which,is,completed,once,the,shut,down;public,completable,future,void,deregister,application,and,close,final,application,status,application,status,final,nullable,string,diagnostics,if,is,running,compare,and,set,true,false,final,completable,future,void,close,web,monitor,and,deregister,app,future,future,utils,compose,afterwards,web,monitor,endpoint,close,async,deregister,application,application,status,diagnostics,return,future,utils,compose,afterwards,close,web,monitor,and,deregister,app,future,this,close,async,internal,else,return,termination,future
DispatcherResourceManagerComponent -> public CompletableFuture<Void> deregisterApplicationAndClose( 			final ApplicationStatus applicationStatus, 			final @Nullable String diagnostics);1549558515;Deregister the Flink application from the resource management system by signalling_the {@link ResourceManager}.__@param applicationStatus to terminate the application with_@param diagnostics additional information about the shut down, can be {@code null}_@return Future which is completed once the shut down;public CompletableFuture<Void> deregisterApplicationAndClose(_			final ApplicationStatus applicationStatus,_			final @Nullable String diagnostics) {__		if (isRunning.compareAndSet(true, false)) {_			final CompletableFuture<Void> closeWebMonitorAndDeregisterAppFuture =_				FutureUtils.composeAfterwards(webMonitorEndpoint.closeAsync(), () -> deregisterApplication(applicationStatus, diagnostics))___			return FutureUtils.composeAfterwards(closeWebMonitorAndDeregisterAppFuture, this::closeAsyncInternal)__		} else {_			return terminationFuture__		}_	};deregister,the,flink,application,from,the,resource,management,system,by,signalling,the,link,resource,manager,param,application,status,to,terminate,the,application,with,param,diagnostics,additional,information,about,the,shut,down,can,be,code,null,return,future,which,is,completed,once,the,shut,down;public,completable,future,void,deregister,application,and,close,final,application,status,application,status,final,nullable,string,diagnostics,if,is,running,compare,and,set,true,false,final,completable,future,void,close,web,monitor,and,deregister,app,future,future,utils,compose,afterwards,web,monitor,endpoint,close,async,deregister,application,application,status,diagnostics,return,future,utils,compose,afterwards,close,web,monitor,and,deregister,app,future,this,close,async,internal,else,return,termination,future
DispatcherResourceManagerComponent -> public CompletableFuture<Void> deregisterApplicationAndClose( 			final ApplicationStatus applicationStatus, 			final @Nullable String diagnostics);1549983516;Deregister the Flink application from the resource management system by signalling_the {@link ResourceManager}.__@param applicationStatus to terminate the application with_@param diagnostics additional information about the shut down, can be {@code null}_@return Future which is completed once the shut down;public CompletableFuture<Void> deregisterApplicationAndClose(_			final ApplicationStatus applicationStatus,_			final @Nullable String diagnostics) {__		if (isRunning.compareAndSet(true, false)) {_			final CompletableFuture<Void> closeWebMonitorAndDeregisterAppFuture =_				FutureUtils.composeAfterwards(webMonitorEndpoint.closeAsync(), () -> deregisterApplication(applicationStatus, diagnostics))___			return FutureUtils.composeAfterwards(closeWebMonitorAndDeregisterAppFuture, this::closeAsyncInternal)__		} else {_			return terminationFuture__		}_	};deregister,the,flink,application,from,the,resource,management,system,by,signalling,the,link,resource,manager,param,application,status,to,terminate,the,application,with,param,diagnostics,additional,information,about,the,shut,down,can,be,code,null,return,future,which,is,completed,once,the,shut,down;public,completable,future,void,deregister,application,and,close,final,application,status,application,status,final,nullable,string,diagnostics,if,is,running,compare,and,set,true,false,final,completable,future,void,close,web,monitor,and,deregister,app,future,future,utils,compose,afterwards,web,monitor,endpoint,close,async,deregister,application,application,status,diagnostics,return,future,utils,compose,afterwards,close,web,monitor,and,deregister,app,future,this,close,async,internal,else,return,termination,future
