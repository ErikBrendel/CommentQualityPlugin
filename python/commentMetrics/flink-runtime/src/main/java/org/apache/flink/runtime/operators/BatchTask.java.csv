# id;timestamp;commentText;codeText;commentWords;codeWords
BatchTask -> @Override 	public void invoke() throws Exception;1444144446;The main work method.;@Override_	public void invoke() throws Exception {__		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		Environment env = getEnvironment()___		this.runtimeUdfContext = createRuntimeContext(env.getTaskName())___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,environment,env,get,environment,this,runtime,udf,context,create,runtime,context,env,get,task,name,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1445427423;The main work method.;@Override_	public void invoke() throws Exception {__		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		Environment env = getEnvironment()___		this.runtimeUdfContext = createRuntimeContext(env.getTaskName())___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,environment,env,get,environment,this,runtime,udf,context,create,runtime,context,env,get,task,name,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1449496469;The main work method.;@Override_	public void invoke() throws Exception {__		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		Environment env = getEnvironment()___		this.runtimeUdfContext = createRuntimeContext()___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,environment,env,get,environment,this,runtime,udf,context,create,runtime,context,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1449509010;The main work method.;@Override_	public void invoke() throws Exception {__		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		Environment env = getEnvironment()___		this.runtimeUdfContext = createRuntimeContext()___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,environment,env,get,environment,this,runtime,udf,context,create,runtime,context,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1449509010;The main work method.;@Override_	public void invoke() throws Exception {__		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		Environment env = getEnvironment()___		this.runtimeUdfContext = createRuntimeContext()___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,environment,env,get,environment,this,runtime,udf,context,create,runtime,context,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1453902315;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext()___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1463939897;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		String headName =  getEnvironment().getTaskInfo().getTaskName().split("->")[0].trim()__		this.metrics = getEnvironment().getMetricGroup()_			.addOperator(headName.startsWith("CHAIN") ? headName.substring(6) : headName)___		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext(metrics)___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,string,head,name,get,environment,get,task,info,get,task,name,split,0,trim,this,metrics,get,environment,get,metric,group,add,operator,head,name,starts,with,chain,head,name,substring,6,head,name,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,metrics,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1464290120;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		String headName =  getEnvironment().getTaskInfo().getTaskName().split("->")[0].trim()__		this.metrics = getEnvironment().getMetricGroup()_			.addOperator(headName.startsWith("CHAIN") ? headName.substring(6) : headName)___		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext(metrics)___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,string,head,name,get,environment,get,task,info,get,task,name,split,0,trim,this,metrics,get,environment,get,metric,group,add,operator,head,name,starts,with,chain,head,name,substring,6,head,name,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,metrics,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1466072697;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		String headName =  getEnvironment().getTaskInfo().getTaskName().split("->")[0].trim()__		this.metrics = getEnvironment().getMetricGroup()_			.addOperator(headName.startsWith("CHAIN") ? headName.substring(6) : headName)___		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext(metrics)___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,string,head,name,get,environment,get,task,info,get,task,name,split,0,trim,this,metrics,get,environment,get,metric,group,add,operator,head,name,starts,with,chain,head,name,substring,6,head,name,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,metrics,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1466529056;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		String headName =  getEnvironment().getTaskInfo().getTaskName().split("->")[0].trim()__		this.metrics = getEnvironment().getMetricGroup()_			.addOperator(headName.startsWith("CHAIN") ? headName.substring(6) : headName)___		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext(metrics)___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,string,head,name,get,environment,get,task,info,get,task,name,split,0,trim,this,metrics,get,environment,get,metric,group,add,operator,head,name,starts,with,chain,head,name,substring,6,head,name,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,metrics,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1468575994;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		String headName =  getEnvironment().getTaskInfo().getTaskName().split("->")[0].trim()__		this.metrics = getEnvironment().getMetricGroup()_			.addOperator(headName.startsWith("CHAIN") ? headName.substring(6) : headName)___		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext(metrics)___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,string,head,name,get,environment,get,task,info,get,task,name,split,0,trim,this,metrics,get,environment,get,metric,group,add,operator,head,name,starts,with,chain,head,name,substring,6,head,name,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,metrics,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1477389806;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		String headName =  getEnvironment().getTaskInfo().getTaskName().split("->")[0].trim()__		this.metrics = getEnvironment().getMetricGroup()_			.addOperator(headName.startsWith("CHAIN") ? headName.substring(6) : headName)___		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext(metrics)___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,string,head,name,get,environment,get,task,info,get,task,name,split,0,trim,this,metrics,get,environment,get,metric,group,add,operator,head,name,starts,with,chain,head,name,substring,6,head,name,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,metrics,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1477923122;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		String headName =  getEnvironment().getTaskInfo().getTaskName().split("->")[0].trim()__		this.metrics = getEnvironment().getMetricGroup()_			.addOperator(headName.startsWith("CHAIN") ? headName.substring(6) : headName)__		this.metrics.getIOMetricGroup().reuseInputMetricsForTask()__		if (config.getNumberOfChainedStubs() == 0) {_			this.metrics.getIOMetricGroup().reuseOutputMetricsForTask()__		}__		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext(metrics)___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,string,head,name,get,environment,get,task,info,get,task,name,split,0,trim,this,metrics,get,environment,get,metric,group,add,operator,head,name,starts,with,chain,head,name,substring,6,head,name,this,metrics,get,iometric,group,reuse,input,metrics,for,task,if,config,get,number,of,chained,stubs,0,this,metrics,get,iometric,group,reuse,output,metrics,for,task,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,metrics,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1477923124;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		String headName =  getEnvironment().getTaskInfo().getTaskName().split("->")[0].trim()__		this.metrics = getEnvironment().getMetricGroup()_			.addOperator(headName.startsWith("CHAIN") ? headName.substring(6) : headName)__		this.metrics.getIOMetricGroup().reuseInputMetricsForTask()__		if (config.getNumberOfChainedStubs() == 0) {_			this.metrics.getIOMetricGroup().reuseOutputMetricsForTask()__		}__		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext(metrics)___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,string,head,name,get,environment,get,task,info,get,task,name,split,0,trim,this,metrics,get,environment,get,metric,group,add,operator,head,name,starts,with,chain,head,name,substring,6,head,name,this,metrics,get,iometric,group,reuse,input,metrics,for,task,if,config,get,number,of,chained,stubs,0,this,metrics,get,iometric,group,reuse,output,metrics,for,task,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,metrics,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1492762526;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		String headName =  getEnvironment().getTaskInfo().getTaskName().split("->")[0].trim()__		this.metrics = getEnvironment().getMetricGroup()_			.addOperator(headName.startsWith("CHAIN") ? headName.substring(6) : headName)__		this.metrics.getIOMetricGroup().reuseInputMetricsForTask()__		if (config.getNumberOfChainedStubs() == 0) {_			this.metrics.getIOMetricGroup().reuseOutputMetricsForTask()__		}__		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext(metrics)___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,string,head,name,get,environment,get,task,info,get,task,name,split,0,trim,this,metrics,get,environment,get,metric,group,add,operator,head,name,starts,with,chain,head,name,substring,6,head,name,this,metrics,get,iometric,group,reuse,input,metrics,for,task,if,config,get,number,of,chained,stubs,0,this,metrics,get,iometric,group,reuse,output,metrics,for,task,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,metrics,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1515177485;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		String headName =  getEnvironment().getTaskInfo().getTaskName().split("->")[0].trim()__		this.metrics = getEnvironment().getMetricGroup()_			.addOperator(headName.startsWith("CHAIN") ? headName.substring(6) : headName)__		this.metrics.getIOMetricGroup().reuseInputMetricsForTask()__		if (config.getNumberOfChainedStubs() == 0) {_			this.metrics.getIOMetricGroup().reuseOutputMetricsForTask()__		}__		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext(metrics)___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,string,head,name,get,environment,get,task,info,get,task,name,split,0,trim,this,metrics,get,environment,get,metric,group,add,operator,head,name,starts,with,chain,head,name,substring,6,head,name,this,metrics,get,iometric,group,reuse,input,metrics,for,task,if,config,get,number,of,chained,stubs,0,this,metrics,get,iometric,group,reuse,output,metrics,for,task,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,metrics,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1515519059;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		String headName =  getEnvironment().getTaskInfo().getTaskName().split("->")[0].trim()__		this.metrics = getEnvironment().getMetricGroup()_			.addOperator(headName.startsWith("CHAIN") ? headName.substring(6) : headName)__		this.metrics.getIOMetricGroup().reuseInputMetricsForTask()__		if (config.getNumberOfChainedStubs() == 0) {_			this.metrics.getIOMetricGroup().reuseOutputMetricsForTask()__		}__		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext(metrics)___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,string,head,name,get,environment,get,task,info,get,task,name,split,0,trim,this,metrics,get,environment,get,metric,group,add,operator,head,name,starts,with,chain,head,name,substring,6,head,name,this,metrics,get,iometric,group,reuse,input,metrics,for,task,if,config,get,number,of,chained,stubs,0,this,metrics,get,iometric,group,reuse,output,metrics,for,task,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,metrics,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1535979810;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		String headName =  getEnvironment().getTaskInfo().getTaskName().split("->")[0].trim()__		this.metrics = getEnvironment().getMetricGroup()_			.getOrAddOperator(headName.startsWith("CHAIN") ? headName.substring(6) : headName)__		this.metrics.getIOMetricGroup().reuseInputMetricsForTask()__		if (config.getNumberOfChainedStubs() == 0) {_			this.metrics.getIOMetricGroup().reuseOutputMetricsForTask()__		}__		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext(metrics)___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,string,head,name,get,environment,get,task,info,get,task,name,split,0,trim,this,metrics,get,environment,get,metric,group,get,or,add,operator,head,name,starts,with,chain,head,name,substring,6,head,name,this,metrics,get,iometric,group,reuse,input,metrics,for,task,if,config,get,number,of,chained,stubs,0,this,metrics,get,iometric,group,reuse,output,metrics,for,task,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,metrics,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> @Override 	public void invoke() throws Exception;1548853005;The main work method.;@Override_	public void invoke() throws Exception {_		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		String headName =  getEnvironment().getTaskInfo().getTaskName().split("->")[0].trim()__		this.metrics = getEnvironment().getMetricGroup()_			.getOrAddOperator(headName.startsWith("CHAIN") ? headName.substring(6) : headName)__		this.metrics.getIOMetricGroup().reuseInputMetricsForTask()__		if (config.getNumberOfChainedStubs() == 0) {_			this.metrics.getIOMetricGroup().reuseOutputMetricsForTask()__		}__		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}__		_		_		_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start task code."))__		}__		this.runtimeUdfContext = createRuntimeContext(metrics)___		_		_		_		_		try {_			_			_			try {_				int numInputs = driver.getNumberOfInputs()__				int numComparators = driver.getNumberOfDriverComparators()__				int numBroadcastInputs = this.config.getNumBroadcastInputs()__				_				initInputsSerializersAndComparators(numInputs, numComparators)__				initBroadcastInputsSerializers(numBroadcastInputs)__				_				_				{_					List<Integer> iterativeInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i)__			_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.inputReaders[i].setIterativeReader()__							iterativeInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeInputs = asArray(iterativeInputs)__				}_				_				{_					List<Integer> iterativeBcInputs = new ArrayList<Integer>()__					_					for (int i = 0_ i < numBroadcastInputs_ i++) {_						final int numberOfEventsUntilInterrupt = getTaskConfig().getNumberOfEventsUntilInterruptInIterativeBroadcastGate(i)__						_						if (numberOfEventsUntilInterrupt < 0) {_							throw new IllegalArgumentException()__						}_						else if (numberOfEventsUntilInterrupt > 0) {_							this.broadcastInputReaders[i].setIterativeReader()__							iterativeBcInputs.add(i)__				_							if (LOG.isDebugEnabled()) {_								LOG.debug(formatLogString("Broadcast input [" + i + "] reads in supersteps with [" +_										+ numberOfEventsUntilInterrupt + "] event(s) till next superstep."))__							}_						}_					}_					this.iterativeBroadcastInputs = asArray(iterativeBcInputs)__				}_				_				initLocalStrategies(numInputs)__			}_			catch (Exception e) {_				throw new RuntimeException("Initializing the input processing failed" +_						(e.getMessage() == null ? "." : ": " + e.getMessage()), e)__			}__			if (!this.running) {_				if (LOG.isDebugEnabled()) {_					LOG.debug(formatLogString("Task cancelled before task code was started."))__				}_				return__			}__			_			initialize()___			_			for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_				final String name = this.config.getBroadcastInputName(i)__				readAndSetBroadcastInput(i, name, this.runtimeUdfContext, 1 )__			}__			_			run()__		}_		finally {_			_			closeLocalStrategiesAndCaches()___			clearReaders(inputReaders)__			clearWriters(eventualOutputs)___		}__		if (this.running) {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Finished task code."))__			}_		} else {_			if (LOG.isDebugEnabled()) {_				LOG.debug(formatLogString("Task code cancelled."))__			}_		}_	};the,main,work,method;override,public,void,invoke,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,string,head,name,get,environment,get,task,info,get,task,name,split,0,trim,this,metrics,get,environment,get,metric,group,get,or,add,operator,head,name,starts,with,chain,head,name,substring,6,head,name,this,metrics,get,iometric,group,reuse,input,metrics,for,task,if,config,get,number,of,chained,stubs,0,this,metrics,get,iometric,group,reuse,output,metrics,for,task,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output,if,log,is,debug,enabled,log,debug,format,log,string,start,task,code,this,runtime,udf,context,create,runtime,context,metrics,try,try,int,num,inputs,driver,get,number,of,inputs,int,num,comparators,driver,get,number,of,driver,comparators,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,init,inputs,serializers,and,comparators,num,inputs,num,comparators,init,broadcast,inputs,serializers,num,broadcast,inputs,list,integer,iterative,inputs,new,array,list,integer,for,int,i,0,i,num,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,input,readers,i,set,iterative,reader,iterative,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,inputs,as,array,iterative,inputs,list,integer,iterative,bc,inputs,new,array,list,integer,for,int,i,0,i,num,broadcast,inputs,i,final,int,number,of,events,until,interrupt,get,task,config,get,number,of,events,until,interrupt,in,iterative,broadcast,gate,i,if,number,of,events,until,interrupt,0,throw,new,illegal,argument,exception,else,if,number,of,events,until,interrupt,0,this,broadcast,input,readers,i,set,iterative,reader,iterative,bc,inputs,add,i,if,log,is,debug,enabled,log,debug,format,log,string,broadcast,input,i,reads,in,supersteps,with,number,of,events,until,interrupt,event,s,till,next,superstep,this,iterative,broadcast,inputs,as,array,iterative,bc,inputs,init,local,strategies,num,inputs,catch,exception,e,throw,new,runtime,exception,initializing,the,input,processing,failed,e,get,message,null,e,get,message,e,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,task,cancelled,before,task,code,was,started,return,initialize,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,string,name,this,config,get,broadcast,input,name,i,read,and,set,broadcast,input,i,name,this,runtime,udf,context,1,run,finally,close,local,strategies,and,caches,clear,readers,input,readers,clear,writers,eventual,outputs,if,this,running,if,log,is,debug,enabled,log,debug,format,log,string,finished,task,code,else,if,log,is,debug,enabled,log,debug,format,log,string,task,code,cancelled
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1444144446;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1445427423;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1449496469;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1449509010;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1449509010;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1453902315;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1463939897;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1464290120;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1466072697;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1466529056;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1468575994;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1477389806;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1477923122;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1477923124;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1492762526;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1515177485;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1515519059;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1535979810;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void closeUserCode(Function stub) throws Exception;1548853005;Closes the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#close()} method. If the close call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be closed.__@throws Exception Thrown, if the user code's close method produces an exception.;public static void closeUserCode(Function stub) throws Exception {_		try {_			FunctionUtils.closeFunction(stub)__		} catch (Throwable t) {_			throw new Exception("The user defined 'close()' method caused an exception: " + t.getMessage(), t)__		}_	};closes,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,close,method,if,the,close,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,closed,throws,exception,thrown,if,the,user,code,s,close,method,produces,an,exception;public,static,void,close,user,code,function,stub,throws,exception,try,function,utils,close,function,stub,catch,throwable,t,throw,new,exception,the,user,defined,close,method,caused,an,exception,t,get,message,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1444144446;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1445427423;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1449496469;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1449509010;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1449509010;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1453902315;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1463939897;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1464290120;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1466072697;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1466529056;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1468575994;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1477389806;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1477923122;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1477923124;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1492762526;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1515177485;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1515519059;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1535979810;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks);1548853005;Cancels all tasks via their {@link ChainedDriver#cancelTask()} method. Any occurring exception_and error is suppressed, such that the canceling method of every task is invoked in all cases.__@param tasks The tasks to be canceled.;public static void cancelChainedTasks(List<ChainedDriver<?, ?>> tasks) {_		for (int i = 0_ i < tasks.size()_ i++) {_			try {_				tasks.get(i).cancelTask()__			} catch (Throwable t) {_				_			}_		}_	};cancels,all,tasks,via,their,link,chained,driver,cancel,task,method,any,occurring,exception,and,error,is,suppressed,such,that,the,canceling,method,of,every,task,is,invoked,in,all,cases,param,tasks,the,tasks,to,be,canceled;public,static,void,cancel,chained,tasks,list,chained,driver,tasks,for,int,i,0,i,tasks,size,i,try,tasks,get,i,cancel,task,catch,throwable,t
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1444144446;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1445427423;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1449496469;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1449509010;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1449509010;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1453902315;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1463939897;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1464290120;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1466072697;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1466529056;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1468575994;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1477389806;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1477923122;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1477923124;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1492762526;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1515177485;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1515519059;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1535979810;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> @SuppressWarnings("unchecked") 	protected Collector<OT> getLastOutputCollector();1548853005;@return the last output collector in the collector chain;@SuppressWarnings("unchecked")_	protected Collector<OT> getLastOutputCollector() {_		int numChained = this.chainedTasks.size()__		return (numChained == 0) ? output : (Collector<OT>) chainedTasks.get(numChained - 1).getOutputCollector()__	};return,the,last,output,collector,in,the,collector,chain;suppress,warnings,unchecked,protected,collector,ot,get,last,output,collector,int,num,chained,this,chained,tasks,size,return,num,chained,0,output,collector,ot,chained,tasks,get,num,chained,1,get,output,collector
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs) throws Exception;1477923124;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			recordWriter.setMetricGroup(task.getEnvironment().getMetricGroup().getIOMetricGroup())___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,metric,group,task,get,environment,get,metric,group,get,iometric,group,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs) throws Exception;1492762526;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			recordWriter.setMetricGroup(task.getEnvironment().getMetricGroup().getIOMetricGroup())___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,metric,group,task,get,environment,get,metric,group,get,iometric,group,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs) throws Exception;1515177485;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			recordWriter.setMetricGroup(task.getEnvironment().getMetricGroup().getIOMetricGroup())___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,metric,group,task,get,environment,get,metric,group,get,iometric,group,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs) throws Exception;1515519059;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			recordWriter.setMetricGroup(task.getEnvironment().getMetricGroup().getIOMetricGroup())___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,metric,group,task,get,environment,get,metric,group,get,iometric,group,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs) throws Exception;1535979810;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			recordWriter.setMetricGroup(task.getEnvironment().getMetricGroup().getIOMetricGroup())___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,metric,group,task,get,environment,get,metric,group,get,iometric,group,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs) throws Exception;1548853005;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter = RecordWriter.createRecordWriter(_				task.getEnvironment().getWriter(outputOffset + i),_				oe,_				task.getEnvironment().getTaskInfo().getTaskName())___			recordWriter.setMetricGroup(task.getEnvironment().getMetricGroup().getIOMetricGroup())___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,record,writer,create,record,writer,task,get,environment,get,writer,output,offset,i,oe,task,get,environment,get,task,info,get,task,name,record,writer,set,metric,group,task,get,environment,get,metric,group,get,iometric,group,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1444144446;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!__@param numInputs;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int,param,num,inputs;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1445427423;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!__@param numInputs;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int,param,num,inputs;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1449496469;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!__@param numInputs;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int,param,num,inputs;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1449509010;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!__@param numInputs;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int,param,num,inputs;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1449509010;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!__@param numInputs;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int,param,num,inputs;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1453902315;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!__@param numInputs;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int,param,num,inputs;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1463939897;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!__@param numInputs;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int,param,num,inputs;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1464290120;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1466072697;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1466529056;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1468575994;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1477389806;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1477923122;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1477923124;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1492762526;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1515177485;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1515519059;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1535979810;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> protected void initLocalStrategies(int numInputs) throws Exception;1548853005;NOTE: This method must be invoked after the invocation of {@code #initInputReaders()} and_{@code #initInputSerializersAndComparators(int)}!;protected void initLocalStrategies(int numInputs) throws Exception {__		final MemoryManager memMan = getMemoryManager()__		final IOManager ioMan = getIOManager()___		this.localStrategies = new CloseableInputProvider<?>[numInputs]__		this.inputs = new MutableObjectIterator<?>[numInputs]__		this.excludeFromReset = new boolean[numInputs]__		this.inputIsCached = new boolean[numInputs]__		this.inputIsAsyncMaterialized = new boolean[numInputs]__		this.materializationMemory = new int[numInputs]___		_		for (int i = 0_ i < numInputs_ i++) {_			initInputLocalStrategy(i)__		}__		_		__		_		_		_		_		_		this.resettableInputs = new SpillingResettableMutableObjectIterator<?>[numInputs]__		this.tempBarriers = new TempBarrier<?>[numInputs]___		for (int i = 0_ i < numInputs_ i++) {_			final int memoryPages__			final boolean async = this.config.isInputAsynchronouslyMaterialized(i)__			final boolean cached =  this.config.isInputCached(i)___			this.inputIsAsyncMaterialized[i] = async__			this.inputIsCached[i] = cached___			if (async || cached) {_				memoryPages = memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i))__				if (memoryPages <= 0) {_					throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.")__				}_				this.materializationMemory[i] = memoryPages__			} else {_				memoryPages = 0__			}__			if (async) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				TempBarrier<?> barrier = new TempBarrier(this, getInput(i), this.inputSerializers[i], memMan, ioMan, memoryPages)__				barrier.startReading()__				this.tempBarriers[i] = barrier__				this.inputs[i] = null__			} else if (cached) {_				@SuppressWarnings({ "unchecked", "rawtypes" })_				SpillingResettableMutableObjectIterator<?> iter = new SpillingResettableMutableObjectIterator(_					getInput(i), this.inputSerializers[i].getSerializer(), getMemoryManager(), getIOManager(), memoryPages, this)__				this.resettableInputs[i] = iter__				this.inputs[i] = iter__			}_		}_	};note,this,method,must,be,invoked,after,the,invocation,of,code,init,input,readers,and,code,init,input,serializers,and,comparators,int;protected,void,init,local,strategies,int,num,inputs,throws,exception,final,memory,manager,mem,man,get,memory,manager,final,iomanager,io,man,get,iomanager,this,local,strategies,new,closeable,input,provider,num,inputs,this,inputs,new,mutable,object,iterator,num,inputs,this,exclude,from,reset,new,boolean,num,inputs,this,input,is,cached,new,boolean,num,inputs,this,input,is,async,materialized,new,boolean,num,inputs,this,materialization,memory,new,int,num,inputs,for,int,i,0,i,num,inputs,i,init,input,local,strategy,i,this,resettable,inputs,new,spilling,resettable,mutable,object,iterator,num,inputs,this,temp,barriers,new,temp,barrier,num,inputs,for,int,i,0,i,num,inputs,i,final,int,memory,pages,final,boolean,async,this,config,is,input,asynchronously,materialized,i,final,boolean,cached,this,config,is,input,cached,i,this,input,is,async,materialized,i,async,this,input,is,cached,i,cached,if,async,cached,memory,pages,mem,man,compute,number,of,pages,this,config,get,relative,input,materialization,memory,i,if,memory,pages,0,throw,new,exception,input,marked,as,materialized,cached,but,no,memory,for,materialization,provided,this,materialization,memory,i,memory,pages,else,memory,pages,0,if,async,suppress,warnings,unchecked,rawtypes,temp,barrier,barrier,new,temp,barrier,this,get,input,i,this,input,serializers,i,mem,man,io,man,memory,pages,barrier,start,reading,this,temp,barriers,i,barrier,this,inputs,i,null,else,if,cached,suppress,warnings,unchecked,rawtypes,spilling,resettable,mutable,object,iterator,iter,new,spilling,resettable,mutable,object,iterator,get,input,i,this,input,serializers,i,get,serializer,get,memory,manager,get,iomanager,memory,pages,this,this,resettable,inputs,i,iter,this,inputs,i,iter
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1477923124;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(containingTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs())__				}__				ct.setup(chainedStubConf, taskName, previous, containingTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				if (i == numChained - 1) {_					ct.getIOMetrics().reuseOutputMetricsForTask()__				}__				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(containingTask , config, cl, eventualOutputs, 0, numOutputs)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,containing,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,containing,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,ct,setup,chained,stub,conf,task,name,previous,containing,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,if,i,num,chained,1,ct,get,iometrics,reuse,output,metrics,for,task,previous,ct,return,collector,t,previous,return,get,output,collector,containing,task,config,cl,eventual,outputs,0,num,outputs
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1492762526;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(containingTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs())__				}__				ct.setup(chainedStubConf, taskName, previous, containingTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				if (i == numChained - 1) {_					ct.getIOMetrics().reuseOutputMetricsForTask()__				}__				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(containingTask , config, cl, eventualOutputs, 0, numOutputs)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,containing,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,containing,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,ct,setup,chained,stub,conf,task,name,previous,containing,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,if,i,num,chained,1,ct,get,iometrics,reuse,output,metrics,for,task,previous,ct,return,collector,t,previous,return,get,output,collector,containing,task,config,cl,eventual,outputs,0,num,outputs
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1515177485;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(containingTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs())__				}__				ct.setup(chainedStubConf, taskName, previous, containingTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				if (i == numChained - 1) {_					ct.getIOMetrics().reuseOutputMetricsForTask()__				}__				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(containingTask , config, cl, eventualOutputs, 0, numOutputs)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,containing,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,containing,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,ct,setup,chained,stub,conf,task,name,previous,containing,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,if,i,num,chained,1,ct,get,iometrics,reuse,output,metrics,for,task,previous,ct,return,collector,t,previous,return,get,output,collector,containing,task,config,cl,eventual,outputs,0,num,outputs
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1515519059;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(containingTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs())__				}__				ct.setup(chainedStubConf, taskName, previous, containingTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				if (i == numChained - 1) {_					ct.getIOMetrics().reuseOutputMetricsForTask()__				}__				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(containingTask , config, cl, eventualOutputs, 0, numOutputs)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,containing,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,containing,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,ct,setup,chained,stub,conf,task,name,previous,containing,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,if,i,num,chained,1,ct,get,iometrics,reuse,output,metrics,for,task,previous,ct,return,collector,t,previous,return,get,output,collector,containing,task,config,cl,eventual,outputs,0,num,outputs
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1535979810;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(containingTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs())__				}__				ct.setup(chainedStubConf, taskName, previous, containingTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				if (i == numChained - 1) {_					ct.getIOMetrics().reuseOutputMetricsForTask()__				}__				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(containingTask , config, cl, eventualOutputs, 0, numOutputs)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,containing,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,containing,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,ct,setup,chained,stub,conf,task,name,previous,containing,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,if,i,num,chained,1,ct,get,iometrics,reuse,output,metrics,for,task,previous,ct,return,collector,t,previous,return,get,output,collector,containing,task,config,cl,eventual,outputs,0,num,outputs
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1548853005;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(containingTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs())__				}__				ct.setup(chainedStubConf, taskName, previous, containingTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				if (i == numChained - 1) {_					ct.getIOMetrics().reuseOutputMetricsForTask()__				}__				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(containingTask , config, cl, eventualOutputs, 0, numOutputs)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,containing,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,containing,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,ct,setup,chained,stub,conf,task,name,previous,containing,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,if,i,num,chained,1,ct,get,iometrics,reuse,output,metrics,for,task,previous,ct,return,collector,t,previous,return,get,output,collector,containing,task,config,cl,eventual,outputs,0,num,outputs
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1444144446;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1445427423;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1449496469;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1449509010;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1449509010;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1453902315;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1463939897;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1464290120;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1466072697;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1466529056;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1468575994;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1477389806;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1477923122;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1477923124;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1492762526;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1515177485;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1515519059;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1535979810;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception;1548853005;Creates all the serializers and iterators for the broadcast inputs.;protected void initBroadcastInputsSerializers(int numBroadcastInputs) throws Exception {_		this.broadcastInputSerializers = new TypeSerializerFactory<?>[numBroadcastInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		for (int i = 0_ i < numBroadcastInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getBroadcastInputSerializer(i, userCodeClassLoader)__			this.broadcastInputSerializers[i] = serializerFactory__		}_	};creates,all,the,serializers,and,iterators,for,the,broadcast,inputs;protected,void,init,broadcast,inputs,serializers,int,num,broadcast,inputs,throws,exception,this,broadcast,input,serializers,new,type,serializer,factory,num,broadcast,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,broadcast,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,broadcast,input,serializer,i,user,code,class,loader,this,broadcast,input,serializers,i,serializer,factory
BatchTask -> public BatchTask(Environment environment);1515519059;Create an Invokable task and set its environment.__@param environment The environment assigned to this invokable.;public BatchTask(Environment environment) {_		super(environment)__	};create,an,invokable,task,and,set,its,environment,param,environment,the,environment,assigned,to,this,invokable;public,batch,task,environment,environment,super,environment
BatchTask -> public BatchTask(Environment environment);1535979810;Create an Invokable task and set its environment.__@param environment The environment assigned to this invokable.;public BatchTask(Environment environment) {_		super(environment)__	};create,an,invokable,task,and,set,its,environment,param,environment,the,environment,assigned,to,this,invokable;public,batch,task,environment,environment,super,environment
BatchTask -> public BatchTask(Environment environment);1548853005;Create an Invokable task and set its environment.__@param environment The environment assigned to this invokable.;public BatchTask(Environment environment) {_		super(environment)__	};create,an,invokable,task,and,set,its,environment,param,environment,the,environment,assigned,to,this,invokable;public,batch,task,environment,environment,super,environment
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1444144446;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1445427423;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1449496469;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1449509010;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1449509010;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1453902315;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1463939897;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1464290120;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1466072697;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1466529056;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1468575994;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1477389806;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1477923122;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1477923124;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1492762526;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1515177485;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1515519059;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1535979810;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> protected void initBroadcastInputReaders() throws Exception;1548853005;Creates the record readers for the extra broadcast inputs as configured by {@link TaskConfig#getNumBroadcastInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initBroadcastInputReaders() throws Exception {_		final int numBroadcastInputs = this.config.getNumBroadcastInputs()__		final MutableReader<?>[] broadcastInputReaders = new MutableReader<?>[numBroadcastInputs]___		int currentReaderOffset = config.getNumInputs()___		for (int i = 0_ i < this.config.getNumBroadcastInputs()_ i++) {_			_			_			final int groupSize = this.config.getBroadcastGroupSize(i)__			if (groupSize == 1) {_				_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				broadcastInputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.broadcastInputReaders = broadcastInputReaders__	};creates,the,record,readers,for,the,extra,broadcast,inputs,as,configured,by,link,task,config,get,num,broadcast,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,broadcast,input,readers,throws,exception,final,int,num,broadcast,inputs,this,config,get,num,broadcast,inputs,final,mutable,reader,broadcast,input,readers,new,mutable,reader,num,broadcast,inputs,int,current,reader,offset,config,get,num,inputs,for,int,i,0,i,this,config,get,num,broadcast,inputs,i,final,int,group,size,this,config,get,broadcast,group,size,i,if,group,size,1,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,broadcast,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,broadcast,input,readers,broadcast,input,readers
BatchTask -> @Override 	public void registerInputOutput() throws Exception;1444144446;Initialization method. Runs in the execution graph setup phase in the JobManager_and as a setup method on the TaskManager.;@Override_	public void registerInputOutput() throws Exception {_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}_	};initialization,method,runs,in,the,execution,graph,setup,phase,in,the,job,manager,and,as,a,setup,method,on,the,task,manager;override,public,void,register,input,output,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output
BatchTask -> @Override 	public void registerInputOutput() throws Exception;1445427423;Initialization method. Runs in the execution graph setup phase in the JobManager_and as a setup method on the TaskManager.;@Override_	public void registerInputOutput() throws Exception {_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}_	};initialization,method,runs,in,the,execution,graph,setup,phase,in,the,job,manager,and,as,a,setup,method,on,the,task,manager;override,public,void,register,input,output,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output
BatchTask -> @Override 	public void registerInputOutput() throws Exception;1449496469;Initialization method. Runs in the execution graph setup phase in the JobManager_and as a setup method on the TaskManager.;@Override_	public void registerInputOutput() throws Exception {_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}_	};initialization,method,runs,in,the,execution,graph,setup,phase,in,the,job,manager,and,as,a,setup,method,on,the,task,manager;override,public,void,register,input,output,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output
BatchTask -> @Override 	public void registerInputOutput() throws Exception;1449509010;Initialization method. Runs in the execution graph setup phase in the JobManager_and as a setup method on the TaskManager.;@Override_	public void registerInputOutput() throws Exception {_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}_	};initialization,method,runs,in,the,execution,graph,setup,phase,in,the,job,manager,and,as,a,setup,method,on,the,task,manager;override,public,void,register,input,output,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output
BatchTask -> @Override 	public void registerInputOutput() throws Exception;1449509010;Initialization method. Runs in the execution graph setup phase in the JobManager_and as a setup method on the TaskManager.;@Override_	public void registerInputOutput() throws Exception {_		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Start registering input and output."))__		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		_		final Class<? extends Driver<S, OT>> driverClass = this.config.getDriver()__		this.driver = InstantiationUtil.instantiate(driverClass, Driver.class)___		_		_		initInputReaders()__		initBroadcastInputReaders()___		_		initOutputs()___		if (LOG.isDebugEnabled()) {_			LOG.debug(formatLogString("Finished registering input and output."))__		}_	};initialization,method,runs,in,the,execution,graph,setup,phase,in,the,job,manager,and,as,a,setup,method,on,the,task,manager;override,public,void,register,input,output,throws,exception,if,log,is,debug,enabled,log,debug,format,log,string,start,registering,input,and,output,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,final,class,extends,driver,s,ot,driver,class,this,config,get,driver,this,driver,instantiation,util,instantiate,driver,class,driver,class,init,input,readers,init,broadcast,input,readers,init,outputs,if,log,is,debug,enabled,log,debug,format,log,string,finished,registering,input,and,output
BatchTask -> protected void initInputReaders() throws Exception;1444144446;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		AccumulatorRegistry registry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = registry.getReadWriteReporter()___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			inputReaders[i].setReporter(reporter)___			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,accumulator,registry,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,registry,get,read,write,reporter,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,input,readers,i,set,reporter,reporter,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1445427423;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		AccumulatorRegistry registry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = registry.getReadWriteReporter()___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			inputReaders[i].setReporter(reporter)___			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,accumulator,registry,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,registry,get,read,write,reporter,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,input,readers,i,set,reporter,reporter,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1449496469;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		AccumulatorRegistry registry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = registry.getReadWriteReporter()___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			inputReaders[i].setReporter(reporter)___			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,accumulator,registry,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,registry,get,read,write,reporter,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,input,readers,i,set,reporter,reporter,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1449509010;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		AccumulatorRegistry registry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = registry.getReadWriteReporter()___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			inputReaders[i].setReporter(reporter)___			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,accumulator,registry,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,registry,get,read,write,reporter,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,input,readers,i,set,reporter,reporter,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1449509010;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		AccumulatorRegistry registry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = registry.getReadWriteReporter()___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			inputReaders[i].setReporter(reporter)___			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,accumulator,registry,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,registry,get,read,write,reporter,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,input,readers,i,set,reporter,reporter,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1453902315;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		AccumulatorRegistry registry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = registry.getReadWriteReporter()___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			inputReaders[i].setReporter(reporter)___			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,accumulator,registry,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,registry,get,read,write,reporter,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,input,readers,i,set,reporter,reporter,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1463939897;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		AccumulatorRegistry registry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = registry.getReadWriteReporter()___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(getEnvironment().getInputGate(currentReaderOffset))__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(new UnionInputGate(readers))__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			inputReaders[i].setReporter(reporter)__			inputReaders[i].setMetricGroup(getEnvironment().getMetricGroup().getIOMetricGroup())___			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,accumulator,registry,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,registry,get,read,write,reporter,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,input,readers,i,set,reporter,reporter,input,readers,i,set,metric,group,get,environment,get,metric,group,get,iometric,group,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1464290120;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		AccumulatorRegistry registry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = registry.getReadWriteReporter()___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			inputReaders[i].setReporter(reporter)__			inputReaders[i].setMetricGroup(getEnvironment().getMetricGroup().getIOMetricGroup())___			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,accumulator,registry,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,registry,get,read,write,reporter,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,input,readers,i,set,reporter,reporter,input,readers,i,set,metric,group,get,environment,get,metric,group,get,iometric,group,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1466072697;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		AccumulatorRegistry registry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = registry.getReadWriteReporter()___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			inputReaders[i].setReporter(reporter)___			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,accumulator,registry,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,registry,get,read,write,reporter,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,input,readers,i,set,reporter,reporter,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1466529056;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		AccumulatorRegistry registry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = registry.getReadWriteReporter()___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			inputReaders[i].setReporter(reporter)___			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,accumulator,registry,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,registry,get,read,write,reporter,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,input,readers,i,set,reporter,reporter,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1468575994;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		AccumulatorRegistry registry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = registry.getReadWriteReporter()___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			inputReaders[i].setReporter(reporter)___			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,accumulator,registry,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,registry,get,read,write,reporter,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,input,readers,i,set,reporter,reporter,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1477389806;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		AccumulatorRegistry registry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = registry.getReadWriteReporter()___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			inputReaders[i].setReporter(reporter)___			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,accumulator,registry,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,registry,get,read,write,reporter,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,input,readers,i,set,reporter,reporter,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1477923122;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		AccumulatorRegistry registry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = registry.getReadWriteReporter()___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			inputReaders[i].setReporter(reporter)___			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,accumulator,registry,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,registry,get,read,write,reporter,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,input,readers,i,set,reporter,reporter,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1477923124;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1492762526;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1515177485;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1515519059;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1535979810;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> protected void initInputReaders() throws Exception;1548853005;Creates the record readers for the number of inputs as defined by {@link #getNumTaskInputs()}.__This method requires that the task configuration, the driver, and the user-code class loader are set.;protected void initInputReaders() throws Exception {_		final int numInputs = getNumTaskInputs()__		final MutableReader<?>[] inputReaders = new MutableReader<?>[numInputs]___		int currentReaderOffset = 0___		for (int i = 0_ i < numInputs_ i++) {_			_			_			final int groupSize = this.config.getGroupSize(i)___			if (groupSize == 1) {_				_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						getEnvironment().getInputGate(currentReaderOffset),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else if (groupSize > 1){_				_				InputGate[] readers = new InputGate[groupSize]__				for (int j = 0_ j < groupSize_ ++j) {_					readers[j] = getEnvironment().getInputGate(currentReaderOffset + j)__				}_				inputReaders[i] = new MutableRecordReader<IOReadableWritable>(_						new UnionInputGate(readers),_						getEnvironment().getTaskManagerInfo().getTmpDirectories())__			} else {_				throw new Exception("Illegal input group size in task configuration: " + groupSize)__			}__			currentReaderOffset += groupSize__		}_		this.inputReaders = inputReaders___		_		if (currentReaderOffset != this.config.getNumInputs()) {_			throw new Exception("Illegal configuration: Number of input gates and group sizes are not consistent.")__		}_	};creates,the,record,readers,for,the,number,of,inputs,as,defined,by,link,get,num,task,inputs,this,method,requires,that,the,task,configuration,the,driver,and,the,user,code,class,loader,are,set;protected,void,init,input,readers,throws,exception,final,int,num,inputs,get,num,task,inputs,final,mutable,reader,input,readers,new,mutable,reader,num,inputs,int,current,reader,offset,0,for,int,i,0,i,num,inputs,i,final,int,group,size,this,config,get,group,size,i,if,group,size,1,input,readers,i,new,mutable,record,reader,ioreadable,writable,get,environment,get,input,gate,current,reader,offset,get,environment,get,task,manager,info,get,tmp,directories,else,if,group,size,1,input,gate,readers,new,input,gate,group,size,for,int,j,0,j,group,size,j,readers,j,get,environment,get,input,gate,current,reader,offset,j,input,readers,i,new,mutable,record,reader,ioreadable,writable,new,union,input,gate,readers,get,environment,get,task,manager,info,get,tmp,directories,else,throw,new,exception,illegal,input,group,size,in,task,configuration,group,size,current,reader,offset,group,size,this,input,readers,input,readers,if,current,reader,offset,this,config,get,num,inputs,throw,new,exception,illegal,configuration,number,of,input,gates,and,group,sizes,are,not,consistent
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception;1444144446;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies a the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)___		_		if (serializerFactory.getDataType().equals(Record.class)) {_			final List<RecordWriter<Record>> writers = new ArrayList<RecordWriter<Record>>(numOutputs)___			_			for (int i = 0_ i < numOutputs_ i++) {_				_				final ShipStrategyType strategy = config.getOutputShipStrategy(i)__				final TypeComparatorFactory<?> compFact = config.getOutputComparator(i, cl)__				final RecordOutputEmitter oe__				if (compFact == null) {_					oe = new RecordOutputEmitter(strategy)__				} else {_					@SuppressWarnings("unchecked")_					TypeComparator<Record> comparator = (TypeComparator<Record>) compFact.createComparator()__					if (!comparator.supportsCompareAgainstReference()) {_						throw new Exception("Incompatibe serializer-/comparator factories.")__					}_					final DataDistribution distribution = config.getOutputDataDistribution(i, cl)__					final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___					oe = new RecordOutputEmitter(strategy, comparator, partitioner, distribution)__				}__				_				final RecordWriter<Record> recordWriter = new RecordWriter<Record>(task.getEnvironment().getWriter(outputOffset + i), oe)__				recordWriter.setReporter(reporter)___				writers.add(recordWriter)__			}_			if (eventualOutputs != null) {_				eventualOutputs.addAll(writers)__			}__			@SuppressWarnings("unchecked")_			final Collector<T> outColl = (Collector<T>) new RecordOutputCollector(writers)__			return outColl__		}_		else {_			_			final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<RecordWriter<SerializationDelegate<T>>>(numOutputs)___			_			for (int i = 0_ i < numOutputs_ i++)_			{_				_				final ShipStrategyType strategy = config.getOutputShipStrategy(i)__				final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___				final ChannelSelector<SerializationDelegate<T>> oe__				if (compFactory == null) {_					oe = new OutputEmitter<T>(strategy)__				}_				else {_					final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__					final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___					final TypeComparator<T> comparator = compFactory.createComparator()__					oe = new OutputEmitter<T>(strategy, comparator, partitioner, dataDist)__				}__				final RecordWriter<SerializationDelegate<T>> recordWriter =_						new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___				_				recordWriter.setReporter(reporter)___				writers.add(recordWriter)__			}_			if (eventualOutputs != null) {_				eventualOutputs.addAll(writers)__			}_			return new OutputCollector<T>(writers, serializerFactory.getSerializer())__		}_	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,a,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,accumulator,registry,reporter,reporter,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,if,serializer,factory,get,data,type,equals,record,class,final,list,record,writer,record,writers,new,array,list,record,writer,record,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,type,comparator,factory,comp,fact,config,get,output,comparator,i,cl,final,record,output,emitter,oe,if,comp,fact,null,oe,new,record,output,emitter,strategy,else,suppress,warnings,unchecked,type,comparator,record,comparator,type,comparator,record,comp,fact,create,comparator,if,comparator,supports,compare,against,reference,throw,new,exception,incompatibe,serializer,comparator,factories,final,data,distribution,distribution,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,oe,new,record,output,emitter,strategy,comparator,partitioner,distribution,final,record,writer,record,record,writer,new,record,writer,record,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,suppress,warnings,unchecked,final,collector,t,out,coll,collector,t,new,record,output,collector,writers,return,out,coll,else,final,list,record,writer,serialization,delegate,t,writers,new,array,list,record,writer,serialization,delegate,t,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception;1445427423;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)___		_		if (serializerFactory.getDataType().equals(Record.class)) {_			final List<RecordWriter<Record>> writers = new ArrayList<RecordWriter<Record>>(numOutputs)___			_			for (int i = 0_ i < numOutputs_ i++) {_				_				final ShipStrategyType strategy = config.getOutputShipStrategy(i)__				final TypeComparatorFactory<?> compFact = config.getOutputComparator(i, cl)__				final RecordOutputEmitter oe__				if (compFact == null) {_					oe = new RecordOutputEmitter(strategy)__				} else {_					@SuppressWarnings("unchecked")_					TypeComparator<Record> comparator = (TypeComparator<Record>) compFact.createComparator()__					if (!comparator.supportsCompareAgainstReference()) {_						throw new Exception("Incompatibe serializer-/comparator factories.")__					}_					final DataDistribution distribution = config.getOutputDataDistribution(i, cl)__					final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___					oe = new RecordOutputEmitter(strategy, comparator, partitioner, distribution)__				}__				_				final RecordWriter<Record> recordWriter = new RecordWriter<Record>(task.getEnvironment().getWriter(outputOffset + i), oe)__				recordWriter.setReporter(reporter)___				writers.add(recordWriter)__			}_			if (eventualOutputs != null) {_				eventualOutputs.addAll(writers)__			}__			@SuppressWarnings("unchecked")_			final Collector<T> outColl = (Collector<T>) new RecordOutputCollector(writers)__			return outColl__		}_		else {_			_			final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<RecordWriter<SerializationDelegate<T>>>(numOutputs)___			_			for (int i = 0_ i < numOutputs_ i++)_			{_				_				final ShipStrategyType strategy = config.getOutputShipStrategy(i)__				final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___				final ChannelSelector<SerializationDelegate<T>> oe__				if (compFactory == null) {_					oe = new OutputEmitter<T>(strategy)__				}_				else {_					final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__					final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___					final TypeComparator<T> comparator = compFactory.createComparator()__					oe = new OutputEmitter<T>(strategy, comparator, partitioner, dataDist)__				}__				final RecordWriter<SerializationDelegate<T>> recordWriter =_						new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___				_				recordWriter.setReporter(reporter)___				writers.add(recordWriter)__			}_			if (eventualOutputs != null) {_				eventualOutputs.addAll(writers)__			}_			return new OutputCollector<T>(writers, serializerFactory.getSerializer())__		}_	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,accumulator,registry,reporter,reporter,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,if,serializer,factory,get,data,type,equals,record,class,final,list,record,writer,record,writers,new,array,list,record,writer,record,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,type,comparator,factory,comp,fact,config,get,output,comparator,i,cl,final,record,output,emitter,oe,if,comp,fact,null,oe,new,record,output,emitter,strategy,else,suppress,warnings,unchecked,type,comparator,record,comparator,type,comparator,record,comp,fact,create,comparator,if,comparator,supports,compare,against,reference,throw,new,exception,incompatibe,serializer,comparator,factories,final,data,distribution,distribution,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,oe,new,record,output,emitter,strategy,comparator,partitioner,distribution,final,record,writer,record,record,writer,new,record,writer,record,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,suppress,warnings,unchecked,final,collector,t,out,coll,collector,t,new,record,output,collector,writers,return,out,coll,else,final,list,record,writer,serialization,delegate,t,writers,new,array,list,record,writer,serialization,delegate,t,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception;1449496469;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)___		_		if (serializerFactory.getDataType().equals(Record.class)) {_			final List<RecordWriter<Record>> writers = new ArrayList<RecordWriter<Record>>(numOutputs)___			_			for (int i = 0_ i < numOutputs_ i++) {_				_				final ShipStrategyType strategy = config.getOutputShipStrategy(i)__				final TypeComparatorFactory<?> compFact = config.getOutputComparator(i, cl)__				final RecordOutputEmitter oe__				if (compFact == null) {_					oe = new RecordOutputEmitter(strategy)__				} else {_					@SuppressWarnings("unchecked")_					TypeComparator<Record> comparator = (TypeComparator<Record>) compFact.createComparator()__					if (!comparator.supportsCompareAgainstReference()) {_						throw new Exception("Incompatibe serializer-/comparator factories.")__					}_					final DataDistribution distribution = config.getOutputDataDistribution(i, cl)__					final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___					oe = new RecordOutputEmitter(strategy, comparator, partitioner, distribution)__				}__				_				final RecordWriter<Record> recordWriter = new RecordWriter<Record>(task.getEnvironment().getWriter(outputOffset + i), oe)__				recordWriter.setReporter(reporter)___				writers.add(recordWriter)__			}_			if (eventualOutputs != null) {_				eventualOutputs.addAll(writers)__			}__			@SuppressWarnings("unchecked")_			final Collector<T> outColl = (Collector<T>) new RecordOutputCollector(writers)__			return outColl__		}_		else {_			_			final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<RecordWriter<SerializationDelegate<T>>>(numOutputs)___			_			for (int i = 0_ i < numOutputs_ i++)_			{_				_				final ShipStrategyType strategy = config.getOutputShipStrategy(i)__				final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___				final ChannelSelector<SerializationDelegate<T>> oe__				if (compFactory == null) {_					oe = new OutputEmitter<T>(strategy)__				}_				else {_					final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__					final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___					final TypeComparator<T> comparator = compFactory.createComparator()__					oe = new OutputEmitter<T>(strategy, comparator, partitioner, dataDist)__				}__				final RecordWriter<SerializationDelegate<T>> recordWriter =_						new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___				_				recordWriter.setReporter(reporter)___				writers.add(recordWriter)__			}_			if (eventualOutputs != null) {_				eventualOutputs.addAll(writers)__			}_			return new OutputCollector<T>(writers, serializerFactory.getSerializer())__		}_	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,accumulator,registry,reporter,reporter,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,if,serializer,factory,get,data,type,equals,record,class,final,list,record,writer,record,writers,new,array,list,record,writer,record,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,type,comparator,factory,comp,fact,config,get,output,comparator,i,cl,final,record,output,emitter,oe,if,comp,fact,null,oe,new,record,output,emitter,strategy,else,suppress,warnings,unchecked,type,comparator,record,comparator,type,comparator,record,comp,fact,create,comparator,if,comparator,supports,compare,against,reference,throw,new,exception,incompatibe,serializer,comparator,factories,final,data,distribution,distribution,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,oe,new,record,output,emitter,strategy,comparator,partitioner,distribution,final,record,writer,record,record,writer,new,record,writer,record,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,suppress,warnings,unchecked,final,collector,t,out,coll,collector,t,new,record,output,collector,writers,return,out,coll,else,final,list,record,writer,serialization,delegate,t,writers,new,array,list,record,writer,serialization,delegate,t,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception;1449509010;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)___		_		if (serializerFactory.getDataType().equals(Record.class)) {_			final List<RecordWriter<Record>> writers = new ArrayList<RecordWriter<Record>>(numOutputs)___			_			for (int i = 0_ i < numOutputs_ i++) {_				_				final ShipStrategyType strategy = config.getOutputShipStrategy(i)__				final TypeComparatorFactory<?> compFact = config.getOutputComparator(i, cl)__				final RecordOutputEmitter oe__				if (compFact == null) {_					oe = new RecordOutputEmitter(strategy)__				} else {_					@SuppressWarnings("unchecked")_					TypeComparator<Record> comparator = (TypeComparator<Record>) compFact.createComparator()__					if (!comparator.supportsCompareAgainstReference()) {_						throw new Exception("Incompatibe serializer-/comparator factories.")__					}_					final DataDistribution distribution = config.getOutputDataDistribution(i, cl)__					final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___					oe = new RecordOutputEmitter(strategy, comparator, partitioner, distribution)__				}__				_				final RecordWriter<Record> recordWriter = new RecordWriter<Record>(task.getEnvironment().getWriter(outputOffset + i), oe)__				recordWriter.setReporter(reporter)___				writers.add(recordWriter)__			}_			if (eventualOutputs != null) {_				eventualOutputs.addAll(writers)__			}__			@SuppressWarnings("unchecked")_			final Collector<T> outColl = (Collector<T>) new RecordOutputCollector(writers)__			return outColl__		}_		else {_			_			final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<RecordWriter<SerializationDelegate<T>>>(numOutputs)___			_			for (int i = 0_ i < numOutputs_ i++)_			{_				_				final ShipStrategyType strategy = config.getOutputShipStrategy(i)__				final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__				final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___				final ChannelSelector<SerializationDelegate<T>> oe__				if (compFactory == null) {_					oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__				}_				else {_					final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__					final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___					final TypeComparator<T> comparator = compFactory.createComparator()__					oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__				}__				final RecordWriter<SerializationDelegate<T>> recordWriter =_						new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___				_				recordWriter.setReporter(reporter)___				writers.add(recordWriter)__			}_			if (eventualOutputs != null) {_				eventualOutputs.addAll(writers)__			}_			return new OutputCollector<T>(writers, serializerFactory.getSerializer())__		}_	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,accumulator,registry,reporter,reporter,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,if,serializer,factory,get,data,type,equals,record,class,final,list,record,writer,record,writers,new,array,list,record,writer,record,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,type,comparator,factory,comp,fact,config,get,output,comparator,i,cl,final,record,output,emitter,oe,if,comp,fact,null,oe,new,record,output,emitter,strategy,else,suppress,warnings,unchecked,type,comparator,record,comparator,type,comparator,record,comp,fact,create,comparator,if,comparator,supports,compare,against,reference,throw,new,exception,incompatibe,serializer,comparator,factories,final,data,distribution,distribution,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,oe,new,record,output,emitter,strategy,comparator,partitioner,distribution,final,record,writer,record,record,writer,new,record,writer,record,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,suppress,warnings,unchecked,final,collector,t,out,coll,collector,t,new,record,output,collector,writers,return,out,coll,else,final,list,record,writer,serialization,delegate,t,writers,new,array,list,record,writer,serialization,delegate,t,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception;1449509010;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			_			recordWriter.setReporter(reporter)___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,accumulator,registry,reporter,reporter,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception;1453902315;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			_			recordWriter.setReporter(reporter)___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,accumulator,registry,reporter,reporter,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception;1463939897;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			_			recordWriter.setReporter(reporter)__			recordWriter.setMetricGroup(task.getEnvironment().getMetricGroup().getIOMetricGroup())___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,accumulator,registry,reporter,reporter,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,record,writer,set,metric,group,task,get,environment,get,metric,group,get,iometric,group,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception;1464290120;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			_			recordWriter.setReporter(reporter)__			recordWriter.setMetricGroup(task.getEnvironment().getMetricGroup().getIOMetricGroup())___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,accumulator,registry,reporter,reporter,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,record,writer,set,metric,group,task,get,environment,get,metric,group,get,iometric,group,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception;1466072697;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			_			recordWriter.setReporter(reporter)__			recordWriter.setMetricGroup(task.getEnvironment().getMetricGroup().getIOMetricGroup())___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,accumulator,registry,reporter,reporter,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,record,writer,set,metric,group,task,get,environment,get,metric,group,get,iometric,group,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception;1466529056;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			_			recordWriter.setReporter(reporter)__			recordWriter.setMetricGroup(task.getEnvironment().getMetricGroup().getIOMetricGroup())___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,accumulator,registry,reporter,reporter,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,record,writer,set,metric,group,task,get,environment,get,metric,group,get,iometric,group,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception;1468575994;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			_			recordWriter.setReporter(reporter)__			recordWriter.setMetricGroup(task.getEnvironment().getMetricGroup().getIOMetricGroup())___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,accumulator,registry,reporter,reporter,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,record,writer,set,metric,group,task,get,environment,get,metric,group,get,iometric,group,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception;1477389806;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			_			recordWriter.setReporter(reporter)__			recordWriter.setMetricGroup(task.getEnvironment().getMetricGroup().getIOMetricGroup())___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,accumulator,registry,reporter,reporter,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,record,writer,set,metric,group,task,get,environment,get,metric,group,get,iometric,group,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl, 			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception;1477923122;Creates the {@link Collector} for the given task, as described by the given configuration. The_output collector contains the writers that forward the data to the different tasks that the given task_is connected to. Each writer applies the partitioning as described in the configuration.__@param task The task that the output collector is created for._@param config The configuration describing the output shipping strategies._@param cl The classloader used to load user defined types._@param eventualOutputs The output writers that this task forwards to the next task for each output._@param outputOffset The offset to start to get the writers for the outputs_@param numOutputs The number of outputs described in the configuration.__@return The OutputCollector that data produced in this task is submitted to.;public static <T> Collector<T> getOutputCollector(AbstractInvokable task, TaskConfig config, ClassLoader cl,_			List<RecordWriter<?>> eventualOutputs, int outputOffset, int numOutputs, AccumulatorRegistry.Reporter reporter) throws Exception_	{_		if (numOutputs == 0) {_			return null__		}__		_		final TypeSerializerFactory<T> serializerFactory = config.getOutputSerializer(cl)__		final List<RecordWriter<SerializationDelegate<T>>> writers = new ArrayList<>(numOutputs)___		_		for (int i = 0_ i < numOutputs_ i++)_		{_			_			final ShipStrategyType strategy = config.getOutputShipStrategy(i)__			final int indexInSubtaskGroup = task.getIndexInSubtaskGroup()__			final TypeComparatorFactory<T> compFactory = config.getOutputComparator(i, cl)___			final ChannelSelector<SerializationDelegate<T>> oe__			if (compFactory == null) {_				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup)__			}_			else {_				final DataDistribution dataDist = config.getOutputDataDistribution(i, cl)__				final Partitioner<?> partitioner = config.getOutputPartitioner(i, cl)___				final TypeComparator<T> comparator = compFactory.createComparator()__				oe = new OutputEmitter<T>(strategy, indexInSubtaskGroup, comparator, partitioner, dataDist)__			}__			final RecordWriter<SerializationDelegate<T>> recordWriter =_					new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i), oe)___			_			recordWriter.setReporter(reporter)__			recordWriter.setMetricGroup(task.getEnvironment().getMetricGroup().getIOMetricGroup())___			writers.add(recordWriter)__		}_		if (eventualOutputs != null) {_			eventualOutputs.addAll(writers)__		}_		return new OutputCollector<T>(writers, serializerFactory.getSerializer())__	};creates,the,link,collector,for,the,given,task,as,described,by,the,given,configuration,the,output,collector,contains,the,writers,that,forward,the,data,to,the,different,tasks,that,the,given,task,is,connected,to,each,writer,applies,the,partitioning,as,described,in,the,configuration,param,task,the,task,that,the,output,collector,is,created,for,param,config,the,configuration,describing,the,output,shipping,strategies,param,cl,the,classloader,used,to,load,user,defined,types,param,eventual,outputs,the,output,writers,that,this,task,forwards,to,the,next,task,for,each,output,param,output,offset,the,offset,to,start,to,get,the,writers,for,the,outputs,param,num,outputs,the,number,of,outputs,described,in,the,configuration,return,the,output,collector,that,data,produced,in,this,task,is,submitted,to;public,static,t,collector,t,get,output,collector,abstract,invokable,task,task,config,config,class,loader,cl,list,record,writer,eventual,outputs,int,output,offset,int,num,outputs,accumulator,registry,reporter,reporter,throws,exception,if,num,outputs,0,return,null,final,type,serializer,factory,t,serializer,factory,config,get,output,serializer,cl,final,list,record,writer,serialization,delegate,t,writers,new,array,list,num,outputs,for,int,i,0,i,num,outputs,i,final,ship,strategy,type,strategy,config,get,output,ship,strategy,i,final,int,index,in,subtask,group,task,get,index,in,subtask,group,final,type,comparator,factory,t,comp,factory,config,get,output,comparator,i,cl,final,channel,selector,serialization,delegate,t,oe,if,comp,factory,null,oe,new,output,emitter,t,strategy,index,in,subtask,group,else,final,data,distribution,data,dist,config,get,output,data,distribution,i,cl,final,partitioner,partitioner,config,get,output,partitioner,i,cl,final,type,comparator,t,comparator,comp,factory,create,comparator,oe,new,output,emitter,t,strategy,index,in,subtask,group,comparator,partitioner,data,dist,final,record,writer,serialization,delegate,t,record,writer,new,record,writer,serialization,delegate,t,task,get,environment,get,writer,output,offset,i,oe,record,writer,set,reporter,reporter,record,writer,set,metric,group,task,get,environment,get,metric,group,get,iometric,group,writers,add,record,writer,if,eventual,outputs,null,eventual,outputs,add,all,writers,return,new,output,collector,t,writers,serializer,factory,get,serializer
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1444144446;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1445427423;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1449496469;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1449509010;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1449509010;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1453902315;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1463939897;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1464290120;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1466072697;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1466529056;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1468575994;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1477389806;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1477923122;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1477923124;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1492762526;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1515177485;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1515519059;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1535979810;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1548853005;Closes all chained tasks, in the order as they are stored in the array. The closing process_creates a standardized log info message.__@param tasks The tasks to be closed._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the closing encounters an exception.;public static void closeChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			task.closeTask()__			_			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Finished task code", task.getTaskName(), parent))__			}_		}_	};closes,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,closing,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,closed,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,closing,encounters,an,exception;public,static,void,close,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,task,close,task,if,log,is,debug,enabled,log,debug,construct,log,string,finished,task,code,task,get,task,name,parent
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										AccumulatorRegistry.Reporter reporter, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1468575994;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										AccumulatorRegistry.Reporter reporter,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(containingTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs(), reporter)__				}__				ct.setup(chainedStubConf, taskName, previous, containingTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(containingTask , config, cl, eventualOutputs, 0, numOutputs, reporter)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,containing,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,accumulator,registry,reporter,reporter,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,containing,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,reporter,ct,setup,chained,stub,conf,task,name,previous,containing,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,previous,ct,return,collector,t,previous,return,get,output,collector,containing,task,config,cl,eventual,outputs,0,num,outputs,reporter
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										AccumulatorRegistry.Reporter reporter, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1477389806;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										AccumulatorRegistry.Reporter reporter,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(containingTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs(), reporter)__				}__				ct.setup(chainedStubConf, taskName, previous, containingTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(containingTask , config, cl, eventualOutputs, 0, numOutputs, reporter)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,containing,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,accumulator,registry,reporter,reporter,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,containing,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,reporter,ct,setup,chained,stub,conf,task,name,previous,containing,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,previous,ct,return,collector,t,previous,return,get,output,collector,containing,task,config,cl,eventual,outputs,0,num,outputs,reporter
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										AccumulatorRegistry.Reporter reporter, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1477923122;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable containingTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										AccumulatorRegistry.Reporter reporter,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(containingTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs(), reporter)__				}__				ct.setup(chainedStubConf, taskName, previous, containingTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				if (i == numChained - 1) {_					ct.getIOMetrics().reuseOutputMetricsForTask()__				}__				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(containingTask , config, cl, eventualOutputs, 0, numOutputs, reporter)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,containing,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,accumulator,registry,reporter,reporter,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,containing,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,reporter,ct,setup,chained,stub,conf,task,name,previous,containing,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,if,i,num,chained,1,ct,get,iometrics,reuse,output,metrics,for,task,previous,ct,return,collector,t,previous,return,get,output,collector,containing,task,config,cl,eventual,outputs,0,num,outputs,reporter
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1444144446;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1445427423;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1449496469;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1449509010;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1449509010;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1453902315;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1463939897;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1464290120;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1466072697;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1466529056;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1468575994;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1477389806;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1477923122;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1477923124;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1492762526;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1515177485;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1515519059;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1535979810;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception;1548853005;Prints an error message and throws the given exception. If the exception is of the type_{@link ExceptionInChainedStubException} then the chain of contained exceptions is followed_until an exception of a different type is found.__@param ex The exception to be thrown._@param parent The parent task, whose information is included in the log message._@throws Exception Always thrown.;public static void logAndThrowException(Exception ex, AbstractInvokable parent) throws Exception {_		String taskName__		if (ex instanceof ExceptionInChainedStubException) {_			do {_				ExceptionInChainedStubException cex = (ExceptionInChainedStubException) ex__				taskName = cex.getTaskName()__				ex = cex.getWrappedException()__			} while (ex instanceof ExceptionInChainedStubException)__		} else {_			taskName = parent.getEnvironment().getTaskInfo().getTaskName()__		}__		if (LOG.isErrorEnabled()) {_			LOG.error(constructLogString("Error in task code", taskName, parent), ex)__		}__		throw ex__	};prints,an,error,message,and,throws,the,given,exception,if,the,exception,is,of,the,type,link,exception,in,chained,stub,exception,then,the,chain,of,contained,exceptions,is,followed,until,an,exception,of,a,different,type,is,found,param,ex,the,exception,to,be,thrown,param,parent,the,parent,task,whose,information,is,included,in,the,log,message,throws,exception,always,thrown;public,static,void,log,and,throw,exception,exception,ex,abstract,invokable,parent,throws,exception,string,task,name,if,ex,instanceof,exception,in,chained,stub,exception,do,exception,in,chained,stub,exception,cex,exception,in,chained,stub,exception,ex,task,name,cex,get,task,name,ex,cex,get,wrapped,exception,while,ex,instanceof,exception,in,chained,stub,exception,else,task,name,parent,get,environment,get,task,info,get,task,name,if,log,is,error,enabled,log,error,construct,log,string,error,in,task,code,task,name,parent,ex,throw,ex
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										AccumulatorRegistry.Reporter reporter, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1444144446;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										AccumulatorRegistry.Reporter reporter,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(nepheleTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs(), reporter)__				}__				ct.setup(chainedStubConf, taskName, previous, nepheleTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(nepheleTask , config, cl, eventualOutputs, 0, numOutputs, reporter)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,nephele,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,accumulator,registry,reporter,reporter,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,nephele,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,reporter,ct,setup,chained,stub,conf,task,name,previous,nephele,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,previous,ct,return,collector,t,previous,return,get,output,collector,nephele,task,config,cl,eventual,outputs,0,num,outputs,reporter
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										AccumulatorRegistry.Reporter reporter, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1445427423;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										AccumulatorRegistry.Reporter reporter,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(nepheleTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs(), reporter)__				}__				ct.setup(chainedStubConf, taskName, previous, nepheleTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(nepheleTask , config, cl, eventualOutputs, 0, numOutputs, reporter)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,nephele,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,accumulator,registry,reporter,reporter,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,nephele,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,reporter,ct,setup,chained,stub,conf,task,name,previous,nephele,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,previous,ct,return,collector,t,previous,return,get,output,collector,nephele,task,config,cl,eventual,outputs,0,num,outputs,reporter
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										AccumulatorRegistry.Reporter reporter, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1449496469;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										AccumulatorRegistry.Reporter reporter,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(nepheleTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs(), reporter)__				}__				ct.setup(chainedStubConf, taskName, previous, nepheleTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(nepheleTask , config, cl, eventualOutputs, 0, numOutputs, reporter)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,nephele,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,accumulator,registry,reporter,reporter,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,nephele,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,reporter,ct,setup,chained,stub,conf,task,name,previous,nephele,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,previous,ct,return,collector,t,previous,return,get,output,collector,nephele,task,config,cl,eventual,outputs,0,num,outputs,reporter
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										AccumulatorRegistry.Reporter reporter, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1449509010;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										AccumulatorRegistry.Reporter reporter,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(nepheleTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs(), reporter)__				}__				ct.setup(chainedStubConf, taskName, previous, nepheleTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(nepheleTask , config, cl, eventualOutputs, 0, numOutputs, reporter)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,nephele,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,accumulator,registry,reporter,reporter,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,nephele,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,reporter,ct,setup,chained,stub,conf,task,name,previous,nephele,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,previous,ct,return,collector,t,previous,return,get,output,collector,nephele,task,config,cl,eventual,outputs,0,num,outputs,reporter
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										AccumulatorRegistry.Reporter reporter, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1449509010;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										AccumulatorRegistry.Reporter reporter,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(nepheleTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs(), reporter)__				}__				ct.setup(chainedStubConf, taskName, previous, nepheleTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(nepheleTask , config, cl, eventualOutputs, 0, numOutputs, reporter)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,nephele,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,accumulator,registry,reporter,reporter,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,nephele,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,reporter,ct,setup,chained,stub,conf,task,name,previous,nephele,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,previous,ct,return,collector,t,previous,return,get,output,collector,nephele,task,config,cl,eventual,outputs,0,num,outputs,reporter
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										AccumulatorRegistry.Reporter reporter, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1453902315;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										AccumulatorRegistry.Reporter reporter,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(nepheleTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs(), reporter)__				}__				ct.setup(chainedStubConf, taskName, previous, nepheleTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(nepheleTask , config, cl, eventualOutputs, 0, numOutputs, reporter)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,nephele,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,accumulator,registry,reporter,reporter,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,nephele,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,reporter,ct,setup,chained,stub,conf,task,name,previous,nephele,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,previous,ct,return,collector,t,previous,return,get,output,collector,nephele,task,config,cl,eventual,outputs,0,num,outputs,reporter
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										AccumulatorRegistry.Reporter reporter, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1463939897;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										AccumulatorRegistry.Reporter reporter,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(nepheleTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs(), reporter)__				}__				ct.setup(chainedStubConf, taskName, previous, nepheleTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(nepheleTask , config, cl, eventualOutputs, 0, numOutputs, reporter)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,nephele,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,accumulator,registry,reporter,reporter,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,nephele,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,reporter,ct,setup,chained,stub,conf,task,name,previous,nephele,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,previous,ct,return,collector,t,previous,return,get,output,collector,nephele,task,config,cl,eventual,outputs,0,num,outputs,reporter
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										AccumulatorRegistry.Reporter reporter, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1464290120;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										AccumulatorRegistry.Reporter reporter,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(nepheleTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs(), reporter)__				}__				ct.setup(chainedStubConf, taskName, previous, nepheleTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(nepheleTask , config, cl, eventualOutputs, 0, numOutputs, reporter)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,nephele,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,accumulator,registry,reporter,reporter,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,nephele,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,reporter,ct,setup,chained,stub,conf,task,name,previous,nephele,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,previous,ct,return,collector,t,previous,return,get,output,collector,nephele,task,config,cl,eventual,outputs,0,num,outputs,reporter
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										AccumulatorRegistry.Reporter reporter, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1466072697;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										AccumulatorRegistry.Reporter reporter,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(nepheleTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs(), reporter)__				}__				ct.setup(chainedStubConf, taskName, previous, nepheleTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(nepheleTask , config, cl, eventualOutputs, 0, numOutputs, reporter)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,nephele,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,accumulator,registry,reporter,reporter,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,nephele,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,reporter,ct,setup,chained,stub,conf,task,name,previous,nephele,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,previous,ct,return,collector,t,previous,return,get,output,collector,nephele,task,config,cl,eventual,outputs,0,num,outputs,reporter
BatchTask -> @SuppressWarnings("unchecked") 	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config, 										List<ChainedDriver<?, ?>> chainedTasksTarget, 										List<RecordWriter<?>> eventualOutputs, 										ExecutionConfig executionConfig, 										AccumulatorRegistry.Reporter reporter, 										Map<String, Accumulator<?,?>> accumulatorMap) 	throws Exception;1466529056;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;@SuppressWarnings("unchecked")_	public static <T> Collector<T> initOutputs(AbstractInvokable nepheleTask, ClassLoader cl, TaskConfig config,_										List<ChainedDriver<?, ?>> chainedTasksTarget,_										List<RecordWriter<?>> eventualOutputs,_										ExecutionConfig executionConfig,_										AccumulatorRegistry.Reporter reporter,_										Map<String, Accumulator<?,?>> accumulatorMap)_	throws Exception_	{_		final int numOutputs = config.getNumOutputs()___		_		final int numChained = config.getNumberOfChainedStubs()__		if (numChained > 0) {_			_			if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategyType.FORWARD) {_				throw new RuntimeException("Plan Generation Bug: Found a chained stub that is not connected via an only forward connection.")__			}__			_			@SuppressWarnings("rawtypes")_			Collector previous = null__			for (int i = numChained - 1_ i >= 0_ --i)_			{_				_				final ChainedDriver<?, ?> ct__				try {_					Class<? extends ChainedDriver<?, ?>> ctc = config.getChainedTask(i)__					ct = ctc.newInstance()__				}_				catch (Exception ex) {_					throw new RuntimeException("Could not instantiate chained task driver.", ex)__				}__				_				final TaskConfig chainedStubConf = config.getChainedStubConfig(i)__				final String taskName = config.getChainedTaskName(i)___				if (i == numChained - 1) {_					_					previous = getOutputCollector(nepheleTask, chainedStubConf, cl, eventualOutputs, 0, chainedStubConf.getNumOutputs(), reporter)__				}__				ct.setup(chainedStubConf, taskName, previous, nepheleTask, cl, executionConfig, accumulatorMap)__				chainedTasksTarget.add(0, ct)___				previous = ct__			}_			_			return (Collector<T>) previous__		}_		__		_		return getOutputCollector(nepheleTask , config, cl, eventualOutputs, 0, numOutputs, reporter)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;suppress,warnings,unchecked,public,static,t,collector,t,init,outputs,abstract,invokable,nephele,task,class,loader,cl,task,config,config,list,chained,driver,chained,tasks,target,list,record,writer,eventual,outputs,execution,config,execution,config,accumulator,registry,reporter,reporter,map,string,accumulator,accumulator,map,throws,exception,final,int,num,outputs,config,get,num,outputs,final,int,num,chained,config,get,number,of,chained,stubs,if,num,chained,0,if,num,outputs,1,config,get,output,ship,strategy,0,ship,strategy,type,forward,throw,new,runtime,exception,plan,generation,bug,found,a,chained,stub,that,is,not,connected,via,an,only,forward,connection,suppress,warnings,rawtypes,collector,previous,null,for,int,i,num,chained,1,i,0,i,final,chained,driver,ct,try,class,extends,chained,driver,ctc,config,get,chained,task,i,ct,ctc,new,instance,catch,exception,ex,throw,new,runtime,exception,could,not,instantiate,chained,task,driver,ex,final,task,config,chained,stub,conf,config,get,chained,stub,config,i,final,string,task,name,config,get,chained,task,name,i,if,i,num,chained,1,previous,get,output,collector,nephele,task,chained,stub,conf,cl,eventual,outputs,0,chained,stub,conf,get,num,outputs,reporter,ct,setup,chained,stub,conf,task,name,previous,nephele,task,cl,execution,config,accumulator,map,chained,tasks,target,add,0,ct,previous,ct,return,collector,t,previous,return,get,output,collector,nephele,task,config,cl,eventual,outputs,0,num,outputs,reporter
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1444144446;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1445427423;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1449496469;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1449509010;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1449509010;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1453902315;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1463939897;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1464290120;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1466072697;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1466529056;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1468575994;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1477389806;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1477923122;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1477923124;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1492762526;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1515177485;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1515519059;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1535979810;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception;1548853005;Creates all the serializers and comparators.;protected void initInputsSerializersAndComparators(int numInputs, int numComparators) throws Exception {_		this.inputSerializers = new TypeSerializerFactory<?>[numInputs]__		this.inputComparators = numComparators > 0 ? new TypeComparator<?>[numComparators] : null__		this.inputIterators = new MutableObjectIterator<?>[numInputs]___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		for (int i = 0_ i < numInputs_ i++) {_			_			final TypeSerializerFactory<?> serializerFactory = this.config.getInputSerializer(i, userCodeClassLoader)__			this.inputSerializers[i] = serializerFactory__			_			this.inputIterators[i] = createInputIterator(this.inputReaders[i], this.inputSerializers[i])__		}_		_		_		for (int i = 0_ i < numComparators_ i++) {_			_			if (this.inputComparators != null) {_				final TypeComparatorFactory<?> comparatorFactory = this.config.getDriverComparator(i, userCodeClassLoader)__				this.inputComparators[i] = comparatorFactory.createComparator()__			}_		}_	};creates,all,the,serializers,and,comparators;protected,void,init,inputs,serializers,and,comparators,int,num,inputs,int,num,comparators,throws,exception,this,input,serializers,new,type,serializer,factory,num,inputs,this,input,comparators,num,comparators,0,new,type,comparator,num,comparators,null,this,input,iterators,new,mutable,object,iterator,num,inputs,class,loader,user,code,class,loader,get,user,code,class,loader,for,int,i,0,i,num,inputs,i,final,type,serializer,factory,serializer,factory,this,config,get,input,serializer,i,user,code,class,loader,this,input,serializers,i,serializer,factory,this,input,iterators,i,create,input,iterator,this,input,readers,i,this,input,serializers,i,for,int,i,0,i,num,comparators,i,if,this,input,comparators,null,final,type,comparator,factory,comparator,factory,this,config,get,driver,comparator,i,user,code,class,loader,this,input,comparators,i,comparator,factory,create,comparator
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1444144446;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1445427423;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1449496469;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1449509010;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1449509010;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1453902315;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1463939897;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1464290120;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1466072697;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1466529056;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1468575994;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1477389806;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1477923122;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1477923124;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1492762526;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1515177485;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1515519059;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1535979810;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception;1548853005;Opens all chained tasks, in the order as they are stored in the array. The opening process_creates a standardized log info message.__@param tasks The tasks to be opened._@param parent The parent task, used to obtain parameters to include in the log message._@throws Exception Thrown, if the opening encounters an exception.;public static void openChainedTasks(List<ChainedDriver<?, ?>> tasks, AbstractInvokable parent) throws Exception {_		_		for (int i = 0_ i < tasks.size()_ i++) {_			final ChainedDriver<?, ?> task = tasks.get(i)__			if (LOG.isDebugEnabled()) {_				LOG.debug(constructLogString("Start task code", task.getTaskName(), parent))__			}_			task.openTask()__		}_	};opens,all,chained,tasks,in,the,order,as,they,are,stored,in,the,array,the,opening,process,creates,a,standardized,log,info,message,param,tasks,the,tasks,to,be,opened,param,parent,the,parent,task,used,to,obtain,parameters,to,include,in,the,log,message,throws,exception,thrown,if,the,opening,encounters,an,exception;public,static,void,open,chained,tasks,list,chained,driver,tasks,abstract,invokable,parent,throws,exception,for,int,i,0,i,tasks,size,i,final,chained,driver,task,tasks,get,i,if,log,is,debug,enabled,log,debug,construct,log,string,start,task,code,task,get,task,name,parent,task,open,task
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1444144446;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1445427423;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1449496469;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1449509010;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1449509010;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1453902315;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1463939897;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1464290120;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1466072697;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1466529056;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1468575994;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1477389806;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1477923122;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1477923124;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1492762526;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1515177485;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1515519059;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1535979810;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass);1548853005;Instantiates a user code class from is definition in the task configuration._The class is instantiated without arguments using the null-ary constructor. Instantiation_will fail if this constructor does not exist or is not public.__@param <T> The generic type of the user code class._@param config The task configuration containing the class description._@param cl The class loader to be used to load the class._@param superClass The super class that the user code class extends or implements, for type checking.__@return An instance of the user code class.;public static <T> T instantiateUserCode(TaskConfig config, ClassLoader cl, Class<? super T> superClass) {_		try {_			T stub = config.<T>getStubWrapper(cl).getUserCodeObject(superClass, cl)__			_			if (superClass != null && !superClass.isAssignableFrom(stub.getClass())) {_				throw new RuntimeException("The class '" + stub.getClass().getName() + "' is not a subclass of '" + _						superClass.getName() + "' as is required.")__			}_			return stub__		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The UDF class is not a proper subclass of " + superClass.getName(), ccex)__		}_	};instantiates,a,user,code,class,from,is,definition,in,the,task,configuration,the,class,is,instantiated,without,arguments,using,the,null,ary,constructor,instantiation,will,fail,if,this,constructor,does,not,exist,or,is,not,public,param,t,the,generic,type,of,the,user,code,class,param,config,the,task,configuration,containing,the,class,description,param,cl,the,class,loader,to,be,used,to,load,the,class,param,super,class,the,super,class,that,the,user,code,class,extends,or,implements,for,type,checking,return,an,instance,of,the,user,code,class;public,static,t,t,instantiate,user,code,task,config,config,class,loader,cl,class,super,t,super,class,try,t,stub,config,t,get,stub,wrapper,cl,get,user,code,object,super,class,cl,if,super,class,null,super,class,is,assignable,from,stub,get,class,throw,new,runtime,exception,the,class,stub,get,class,get,name,is,not,a,subclass,of,super,class,get,name,as,is,required,return,stub,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,udf,class,is,not,a,proper,subclass,of,super,class,get,name,ccex
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1444144446;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1445427423;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1449496469;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1449509010;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1449509010;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1453902315;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1463939897;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1464290120;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1466072697;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1466529056;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1468575994;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1477389806;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1477923122;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1477923124;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1492762526;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1515177485;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1515519059;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1535979810;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> protected void setLastOutputCollector(Collector<OT> newOutputCollector);1548853005;Sets the last output {@link Collector} of the collector chain of this {@link BatchTask}._<p>_In case of chained tasks, the output collector of the last {@link ChainedDriver} is set. Otherwise it is the_single collector of the {@link BatchTask}.__@param newOutputCollector new output collector to set as last collector;protected void setLastOutputCollector(Collector<OT> newOutputCollector) {_		int numChained = this.chainedTasks.size()___		if (numChained == 0) {_			output = newOutputCollector__			return__		}__		chainedTasks.get(numChained - 1).setOutputCollector(newOutputCollector)__	};sets,the,last,output,link,collector,of,the,collector,chain,of,this,link,batch,task,p,in,case,of,chained,tasks,the,output,collector,of,the,last,link,chained,driver,is,set,otherwise,it,is,the,single,collector,of,the,link,batch,task,param,new,output,collector,new,output,collector,to,set,as,last,collector;protected,void,set,last,output,collector,collector,ot,new,output,collector,int,num,chained,this,chained,tasks,size,if,num,chained,0,output,new,output,collector,return,chained,tasks,get,num,chained,1,set,output,collector,new,output,collector
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1444144446;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The nephele task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getIndexInSubtaskGroup() + 1) +_				'/' + parent.getEnvironment().getNumberOfSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,nephele,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,index,in,subtask,group,1,parent,get,environment,get,number,of,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1445427423;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The nephele task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getIndexInSubtaskGroup() + 1) +_				'/' + parent.getEnvironment().getNumberOfSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,nephele,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,index,in,subtask,group,1,parent,get,environment,get,number,of,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1449496469;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The nephele task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,nephele,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1449509010;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The nephele task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,nephele,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1449509010;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The nephele task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,nephele,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1453902315;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The nephele task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,nephele,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1463939897;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The nephele task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,nephele,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1464290120;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The nephele task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,nephele,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1466072697;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The nephele task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,nephele,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1466529056;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The nephele task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,nephele,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1468575994;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1477389806;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1477923122;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1477923124;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1492762526;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1515177485;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1515519059;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1535979810;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> public static String constructLogString(String message, String taskName, AbstractInvokable parent);1548853005;Utility function that composes a string for logging purposes. The string includes the given message,_the given name of the task and the index in its subtask group as well as the number of instances_that exist in its subtask group.__@param message The main message for the log._@param taskName The name of the task._@param parent The task that contains the code producing the message.__@return The string for logging.;public static String constructLogString(String message, String taskName, AbstractInvokable parent) {_		return message + ":  " + taskName + " (" + (parent.getEnvironment().getTaskInfo().getIndexOfThisSubtask() + 1) +_				'/' + parent.getEnvironment().getTaskInfo().getNumberOfParallelSubtasks() + ')'__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,the,given,name,of,the,task,and,the,index,in,its,subtask,group,as,well,as,the,number,of,instances,that,exist,in,its,subtask,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,param,parent,the,task,that,contains,the,code,producing,the,message,return,the,string,for,logging;public,static,string,construct,log,string,string,message,string,task,name,abstract,invokable,parent,return,message,task,name,parent,get,environment,get,task,info,get,index,of,this,subtask,1,parent,get,environment,get,task,info,get,number,of,parallel,subtasks
BatchTask -> protected void initOutputs() throws Exception;1444144446;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), reporter, this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,accumulator,map,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,reporter,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1445427423;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), reporter, this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,accumulator,map,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,reporter,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1449496469;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), reporter, this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,accumulator,map,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,reporter,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1449509010;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), reporter, this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,accumulator,map,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,reporter,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1449509010;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), reporter, this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,accumulator,map,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,reporter,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1453902315;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), reporter, this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,accumulator,map,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,reporter,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1463939897;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), reporter, this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,accumulator,map,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,reporter,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1464290120;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), reporter, this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,accumulator,map,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,reporter,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1466072697;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), reporter, this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,accumulator,map,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,reporter,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1466529056;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), reporter, this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,accumulator,map,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,reporter,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1468575994;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), reporter, this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,accumulator,map,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,reporter,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1477389806;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), reporter, this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,accumulator,map,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,reporter,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1477923122;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), reporter, this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,accumulator,map,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,reporter,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1477923124;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		this.accumulatorMap = getEnvironment().getAccumulatorRegistry().getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,this,accumulator,map,get,environment,get,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1492762526;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		this.accumulatorMap = getEnvironment().getAccumulatorRegistry().getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,this,accumulator,map,get,environment,get,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1515177485;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		this.accumulatorMap = getEnvironment().getAccumulatorRegistry().getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,this,accumulator,map,get,environment,get,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1515519059;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		this.accumulatorMap = getEnvironment().getAccumulatorRegistry().getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,this,accumulator,map,get,environment,get,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1535979810;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		this.accumulatorMap = getEnvironment().getAccumulatorRegistry().getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,this,accumulator,map,get,environment,get,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,this,accumulator,map
BatchTask -> protected void initOutputs() throws Exception;1548853005;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategies for each writer.;protected void initOutputs() throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		ClassLoader userCodeClassLoader = getUserCodeClassLoader()___		this.accumulatorMap = getEnvironment().getAccumulatorRegistry().getUserMap()___		this.output = initOutputs(this, userCodeClassLoader, this.config, this.chainedTasks, this.eventualOutputs,_				this.getExecutionConfig(), this.accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategies,for,each,writer;protected,void,init,outputs,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,class,loader,user,code,class,loader,get,user,code,class,loader,this,accumulator,map,get,environment,get,accumulator,registry,get,user,map,this,output,init,outputs,this,user,code,class,loader,this,config,this,chained,tasks,this,eventual,outputs,this,get,execution,config,this,accumulator,map
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1444144446;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1445427423;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1449496469;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1449509010;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1449509010;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1453902315;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1463939897;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1464290120;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1466072697;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1466529056;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1468575994;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1477389806;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1477923122;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1477923124;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1492762526;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1515177485;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1515519059;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1535979810;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
BatchTask -> public static void openUserCode(Function stub, Configuration parameters) throws Exception;1548853005;Opens the given stub using its {@link org.apache.flink.api.common.functions.RichFunction#open(Configuration)} method. If the open call produces_an exception, a new exception with a standard error message is created, using the encountered exception_as its cause.__@param stub The user code instance to be opened._@param parameters The parameters supplied to the user code.__@throws Exception Thrown, if the user code's open method produces an exception.;public static void openUserCode(Function stub, Configuration parameters) throws Exception {_		try {_			FunctionUtils.openFunction(stub, parameters)__		} catch (Throwable t) {_			throw new Exception("The user defined 'open(Configuration)' method in " + stub.getClass().toString() + " caused an exception: " + t.getMessage(), t)__		}_	};opens,the,given,stub,using,its,link,org,apache,flink,api,common,functions,rich,function,open,configuration,method,if,the,open,call,produces,an,exception,a,new,exception,with,a,standard,error,message,is,created,using,the,encountered,exception,as,its,cause,param,stub,the,user,code,instance,to,be,opened,param,parameters,the,parameters,supplied,to,the,user,code,throws,exception,thrown,if,the,user,code,s,open,method,produces,an,exception;public,static,void,open,user,code,function,stub,configuration,parameters,throws,exception,try,function,utils,open,function,stub,parameters,catch,throwable,t,throw,new,exception,the,user,defined,open,configuration,method,in,stub,get,class,to,string,caused,an,exception,t,get,message,t
