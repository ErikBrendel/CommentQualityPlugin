# id;timestamp;commentText;codeText;commentWords;codeWords
SpillingBuffer -> private static final <E> void moveAll(ArrayList<E> source, ArrayList<E> target);1404986750;Utility method that moves elements. It avoids copying the data into a dedicated array first, as_the {@link ArrayList#addAll(java.util.Collection)} method does.__@param <E>_@param source_@param target;private static final <E> void moveAll(ArrayList<E> source, ArrayList<E> target) {_		target.ensureCapacity(target.size() + source.size())__		for (int i = source.size() - 1_ i >= 0_ i--) {_			target.add(source.remove(i))__		}_	};utility,method,that,moves,elements,it,avoids,copying,the,data,into,a,dedicated,array,first,as,the,link,array,list,add,all,java,util,collection,method,does,param,e,param,source,param,target;private,static,final,e,void,move,all,array,list,e,source,array,list,e,target,target,ensure,capacity,target,size,source,size,for,int,i,source,size,1,i,0,i,target,add,source,remove,i
SpillingBuffer -> private static final <E> void moveAll(ArrayList<E> source, ArrayList<E> target);1405088715;Utility method that moves elements. It avoids copying the data into a dedicated array first, as_the {@link ArrayList#addAll(java.util.Collection)} method does.__@param <E>_@param source_@param target;private static final <E> void moveAll(ArrayList<E> source, ArrayList<E> target) {_		target.ensureCapacity(target.size() + source.size())__		for (int i = source.size() - 1_ i >= 0_ i--) {_			target.add(source.remove(i))__		}_	};utility,method,that,moves,elements,it,avoids,copying,the,data,into,a,dedicated,array,first,as,the,link,array,list,add,all,java,util,collection,method,does,param,e,param,source,param,target;private,static,final,e,void,move,all,array,list,e,source,array,list,e,target,target,ensure,capacity,target,size,source,size,for,int,i,source,size,1,i,0,i,target,add,source,remove,i
SpillingBuffer -> private static final <E> void moveAll(ArrayList<E> source, ArrayList<E> target);1411473561;Utility method that moves elements. It avoids copying the data into a dedicated array first, as_the {@link ArrayList#addAll(java.util.Collection)} method does.__@param <E>_@param source_@param target;private static final <E> void moveAll(ArrayList<E> source, ArrayList<E> target) {_		target.ensureCapacity(target.size() + source.size())__		for (int i = source.size() - 1_ i >= 0_ i--) {_			target.add(source.remove(i))__		}_	};utility,method,that,moves,elements,it,avoids,copying,the,data,into,a,dedicated,array,first,as,the,link,array,list,add,all,java,util,collection,method,does,param,e,param,source,param,target;private,static,final,e,void,move,all,array,list,e,source,array,list,e,target,target,ensure,capacity,target,size,source,size,for,int,i,source,size,1,i,0,i,target,add,source,remove,i
SpillingBuffer -> private static final <E> void moveAll(ArrayList<E> source, ArrayList<E> target);1420560668;Utility method that moves elements. It avoids copying the data into a dedicated array first, as_the {@link ArrayList#addAll(java.util.Collection)} method does.__@param <E>_@param source_@param target;private static final <E> void moveAll(ArrayList<E> source, ArrayList<E> target) {_		target.ensureCapacity(target.size() + source.size())__		for (int i = source.size() - 1_ i >= 0_ i--) {_			target.add(source.remove(i))__		}_	};utility,method,that,moves,elements,it,avoids,copying,the,data,into,a,dedicated,array,first,as,the,link,array,list,add,all,java,util,collection,method,does,param,e,param,source,param,target;private,static,final,e,void,move,all,array,list,e,source,array,list,e,target,target,ensure,capacity,target,size,source,size,for,int,i,source,size,1,i,0,i,target,add,source,remove,i
SpillingBuffer -> private static final <E> void moveAll(ArrayList<E> source, ArrayList<E> target);1440967006;Utility method that moves elements. It avoids copying the data into a dedicated array first, as_the {@link ArrayList#addAll(java.util.Collection)} method does.__@param <E>_@param source_@param target;private static final <E> void moveAll(ArrayList<E> source, ArrayList<E> target) {_		target.ensureCapacity(target.size() + source.size())__		for (int i = source.size() - 1_ i >= 0_ i--) {_			target.add(source.remove(i))__		}_	};utility,method,that,moves,elements,it,avoids,copying,the,data,into,a,dedicated,array,first,as,the,link,array,list,add,all,java,util,collection,method,does,param,e,param,source,param,target;private,static,final,e,void,move,all,array,list,e,source,array,list,e,target,target,ensure,capacity,target,size,source,size,for,int,i,source,size,1,i,0,i,target,add,source,remove,i
SpillingBuffer -> public List<MemorySegment> close() throws IOException;1404986750;@return A list with all memory segments that have been taken from the memory segment source.;public List<MemorySegment> close() throws IOException {_		final ArrayList<MemorySegment> segments = new ArrayList<MemorySegment>(this.fullSegments.size() + this.numMemorySegmentsInWriter)__		_		_		if (getCurrentSegment() != null) {_			segments.add(getCurrentSegment())__			clear()__		}_		_		moveAll(this.fullSegments, segments)__		this.fullSegments.clear()__		_		_		if (this.writer != null) {_			_			this.writer.close()__			for (int i = this.numMemorySegmentsInWriter_ i > 0_ i--) {_				segments.add(this.writer.getNextReturnedSegment())__			}_			this.writer.closeAndDelete()__			this.writer = null__		}_		_		_		if (this.inMemInView != null) {_			this.inMemInView = null__		}_		if (this.externalInView != null) {_			if (!this.externalInView.isClosed()) {_				this.externalInView.close()__			}_			this.externalInView = null__		}_		return segments__	};return,a,list,with,all,memory,segments,that,have,been,taken,from,the,memory,segment,source;public,list,memory,segment,close,throws,ioexception,final,array,list,memory,segment,segments,new,array,list,memory,segment,this,full,segments,size,this,num,memory,segments,in,writer,if,get,current,segment,null,segments,add,get,current,segment,clear,move,all,this,full,segments,segments,this,full,segments,clear,if,this,writer,null,this,writer,close,for,int,i,this,num,memory,segments,in,writer,i,0,i,segments,add,this,writer,get,next,returned,segment,this,writer,close,and,delete,this,writer,null,if,this,in,mem,in,view,null,this,in,mem,in,view,null,if,this,external,in,view,null,if,this,external,in,view,is,closed,this,external,in,view,close,this,external,in,view,null,return,segments
SpillingBuffer -> public List<MemorySegment> close() throws IOException;1405088715;@return A list with all memory segments that have been taken from the memory segment source.;public List<MemorySegment> close() throws IOException {_		final ArrayList<MemorySegment> segments = new ArrayList<MemorySegment>(this.fullSegments.size() + this.numMemorySegmentsInWriter)__		_		_		if (getCurrentSegment() != null) {_			segments.add(getCurrentSegment())__			clear()__		}_		_		moveAll(this.fullSegments, segments)__		this.fullSegments.clear()__		_		_		if (this.writer != null) {_			_			this.writer.close()__			for (int i = this.numMemorySegmentsInWriter_ i > 0_ i--) {_				segments.add(this.writer.getNextReturnedSegment())__			}_			this.writer.closeAndDelete()__			this.writer = null__		}_		_		_		if (this.inMemInView != null) {_			this.inMemInView = null__		}_		if (this.externalInView != null) {_			if (!this.externalInView.isClosed()) {_				this.externalInView.close()__			}_			this.externalInView = null__		}_		return segments__	};return,a,list,with,all,memory,segments,that,have,been,taken,from,the,memory,segment,source;public,list,memory,segment,close,throws,ioexception,final,array,list,memory,segment,segments,new,array,list,memory,segment,this,full,segments,size,this,num,memory,segments,in,writer,if,get,current,segment,null,segments,add,get,current,segment,clear,move,all,this,full,segments,segments,this,full,segments,clear,if,this,writer,null,this,writer,close,for,int,i,this,num,memory,segments,in,writer,i,0,i,segments,add,this,writer,get,next,returned,segment,this,writer,close,and,delete,this,writer,null,if,this,in,mem,in,view,null,this,in,mem,in,view,null,if,this,external,in,view,null,if,this,external,in,view,is,closed,this,external,in,view,close,this,external,in,view,null,return,segments
SpillingBuffer -> public List<MemorySegment> close() throws IOException;1411473561;@return A list with all memory segments that have been taken from the memory segment source.;public List<MemorySegment> close() throws IOException {_		final ArrayList<MemorySegment> segments = new ArrayList<MemorySegment>(this.fullSegments.size() + this.numMemorySegmentsInWriter)__		_		_		if (getCurrentSegment() != null) {_			segments.add(getCurrentSegment())__			clear()__		}_		_		moveAll(this.fullSegments, segments)__		this.fullSegments.clear()__		_		_		if (this.writer != null) {_			_			this.writer.close()__			for (int i = this.numMemorySegmentsInWriter_ i > 0_ i--) {_				segments.add(this.writer.getNextReturnedSegment())__			}_			this.writer.closeAndDelete()__			this.writer = null__		}_		_		_		if (this.inMemInView != null) {_			this.inMemInView = null__		}_		if (this.externalInView != null) {_			if (!this.externalInView.isClosed()) {_				this.externalInView.close()__			}_			this.externalInView = null__		}_		return segments__	};return,a,list,with,all,memory,segments,that,have,been,taken,from,the,memory,segment,source;public,list,memory,segment,close,throws,ioexception,final,array,list,memory,segment,segments,new,array,list,memory,segment,this,full,segments,size,this,num,memory,segments,in,writer,if,get,current,segment,null,segments,add,get,current,segment,clear,move,all,this,full,segments,segments,this,full,segments,clear,if,this,writer,null,this,writer,close,for,int,i,this,num,memory,segments,in,writer,i,0,i,segments,add,this,writer,get,next,returned,segment,this,writer,close,and,delete,this,writer,null,if,this,in,mem,in,view,null,this,in,mem,in,view,null,if,this,external,in,view,null,if,this,external,in,view,is,closed,this,external,in,view,close,this,external,in,view,null,return,segments
SpillingBuffer -> public List<MemorySegment> close() throws IOException;1420560668;@return A list with all memory segments that have been taken from the memory segment source.;public List<MemorySegment> close() throws IOException {_		final ArrayList<MemorySegment> segments = new ArrayList<MemorySegment>(this.fullSegments.size() + this.numMemorySegmentsInWriter)__		_		_		if (getCurrentSegment() != null) {_			segments.add(getCurrentSegment())__			clear()__		}_		_		moveAll(this.fullSegments, segments)__		this.fullSegments.clear()__		_		_		if (this.writer != null) {_			_			this.writer.close()__			for (int i = this.numMemorySegmentsInWriter_ i > 0_ i--) {_				segments.add(this.writer.getNextReturnedBlock())__			}_			this.writer.closeAndDelete()__			this.writer = null__		}_		_		_		if (this.inMemInView != null) {_			this.inMemInView = null__		}_		if (this.externalInView != null) {_			if (!this.externalInView.isClosed()) {_				this.externalInView.close()__			}_			this.externalInView = null__		}_		return segments__	};return,a,list,with,all,memory,segments,that,have,been,taken,from,the,memory,segment,source;public,list,memory,segment,close,throws,ioexception,final,array,list,memory,segment,segments,new,array,list,memory,segment,this,full,segments,size,this,num,memory,segments,in,writer,if,get,current,segment,null,segments,add,get,current,segment,clear,move,all,this,full,segments,segments,this,full,segments,clear,if,this,writer,null,this,writer,close,for,int,i,this,num,memory,segments,in,writer,i,0,i,segments,add,this,writer,get,next,returned,block,this,writer,close,and,delete,this,writer,null,if,this,in,mem,in,view,null,this,in,mem,in,view,null,if,this,external,in,view,null,if,this,external,in,view,is,closed,this,external,in,view,close,this,external,in,view,null,return,segments
SpillingBuffer -> public List<MemorySegment> close() throws IOException;1440967006;@return A list with all memory segments that have been taken from the memory segment source.;public List<MemorySegment> close() throws IOException {_		final ArrayList<MemorySegment> segments = new ArrayList<MemorySegment>(this.fullSegments.size() + this.numMemorySegmentsInWriter)__		_		_		if (getCurrentSegment() != null) {_			segments.add(getCurrentSegment())__			clear()__		}_		_		moveAll(this.fullSegments, segments)__		this.fullSegments.clear()__		_		_		if (this.writer != null) {_			_			this.writer.close()__			for (int i = this.numMemorySegmentsInWriter_ i > 0_ i--) {_				segments.add(this.writer.getNextReturnedBlock())__			}_			this.writer.closeAndDelete()__			this.writer = null__		}_		_		_		if (this.inMemInView != null) {_			this.inMemInView = null__		}_		if (this.externalInView != null) {_			if (!this.externalInView.isClosed()) {_				this.externalInView.close()__			}_			this.externalInView = null__		}_		return segments__	};return,a,list,with,all,memory,segments,that,have,been,taken,from,the,memory,segment,source;public,list,memory,segment,close,throws,ioexception,final,array,list,memory,segment,segments,new,array,list,memory,segment,this,full,segments,size,this,num,memory,segments,in,writer,if,get,current,segment,null,segments,add,get,current,segment,clear,move,all,this,full,segments,segments,this,full,segments,clear,if,this,writer,null,this,writer,close,for,int,i,this,num,memory,segments,in,writer,i,0,i,segments,add,this,writer,get,next,returned,block,this,writer,close,and,delete,this,writer,null,if,this,in,mem,in,view,null,this,in,mem,in,view,null,if,this,external,in,view,null,if,this,external,in,view,is,closed,this,external,in,view,close,this,external,in,view,null,return,segments
