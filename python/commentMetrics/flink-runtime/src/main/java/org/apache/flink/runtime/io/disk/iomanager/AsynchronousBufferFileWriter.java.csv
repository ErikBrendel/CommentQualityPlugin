# id;timestamp;commentText;codeText;commentWords;codeWords
AsynchronousBufferFileWriter -> @Override 	public void writeBlock(Buffer buffer) throws IOException;1511445501;Writes the given block asynchronously.__@param buffer_the buffer to be written (will be recycled when done)__@throws IOException_thrown if adding the write operation fails;@Override_	public void writeBlock(Buffer buffer) throws IOException {_		try {_			_			addRequest(new BufferWriteRequest(this, buffer))__		} catch (Throwable e) {_			_			buffer.recycle()__			ExceptionUtils.rethrowIOException(e)__		}__	};writes,the,given,block,asynchronously,param,buffer,the,buffer,to,be,written,will,be,recycled,when,done,throws,ioexception,thrown,if,adding,the,write,operation,fails;override,public,void,write,block,buffer,buffer,throws,ioexception,try,add,request,new,buffer,write,request,this,buffer,catch,throwable,e,buffer,recycle,exception,utils,rethrow,ioexception,e
AsynchronousBufferFileWriter -> @Override 	public void writeBlock(Buffer buffer) throws IOException;1515534998;Writes the given block asynchronously.__@param buffer_the buffer to be written (will be recycled when done)__@throws IOException_thrown if adding the write operation fails;@Override_	public void writeBlock(Buffer buffer) throws IOException {_		try {_			_			addRequest(new BufferWriteRequest(this, buffer))__		} catch (Throwable e) {_			_			buffer.recycleBuffer()__			ExceptionUtils.rethrowIOException(e)__		}__	};writes,the,given,block,asynchronously,param,buffer,the,buffer,to,be,written,will,be,recycled,when,done,throws,ioexception,thrown,if,adding,the,write,operation,fails;override,public,void,write,block,buffer,buffer,throws,ioexception,try,add,request,new,buffer,write,request,this,buffer,catch,throwable,e,buffer,recycle,buffer,exception,utils,rethrow,ioexception,e
