# id;timestamp;commentText;codeText;commentWords;codeWords
RpcEndpoint -> public void shutDown() throws Exception;1476714136;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Time)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.__@throws Exception indicating that the something went wrong while shutting the RPC endpoint down;public void shutDown() throws Exception {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,time,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method,throws,exception,indicating,that,the,something,went,wrong,while,shutting,the,rpc,endpoint,down;public,void,shut,down,throws,exception,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown() throws Exception;1477061494;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Time)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.__@throws Exception indicating that the something went wrong while shutting the RPC endpoint down;public void shutDown() throws Exception {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,time,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method,throws,exception,indicating,that,the,something,went,wrong,while,shutting,the,rpc,endpoint,down;public,void,shut,down,throws,exception,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown() throws Exception;1490170142;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Time)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.__@throws Exception indicating that the something went wrong while shutting the RPC endpoint down;public void shutDown() throws Exception {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,time,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method,throws,exception,indicating,that,the,something,went,wrong,while,shutting,the,rpc,endpoint,down;public,void,shut,down,throws,exception,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown() throws Exception;1495154056;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Time)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.__@throws Exception indicating that the something went wrong while shutting the RPC endpoint down;public void shutDown() throws Exception {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,time,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method,throws,exception,indicating,that,the,something,went,wrong,while,shutting,the,rpc,endpoint,down;public,void,shut,down,throws,exception,rpc,service,stop,server,self
RpcEndpoint -> public final void shutDown();1501251235;Triggers the shut down of the rpc endpoint. The shut down is executed asynchronously.__<p>In order to wait on the completion of the shut down, obtain the termination future_via {@link #getTerminationFuture()}} and wait on its completion.;public final void shutDown() {_		rpcService.stopServer(self)__	};triggers,the,shut,down,of,the,rpc,endpoint,the,shut,down,is,executed,asynchronously,p,in,order,to,wait,on,the,completion,of,the,shut,down,obtain,the,termination,future,via,link,get,termination,future,and,wait,on,its,completion;public,final,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public final void shutDown();1501580028;Triggers the shut down of the rpc endpoint. The shut down is executed asynchronously.__<p>In order to wait on the completion of the shut down, obtain the termination future_via {@link #getTerminationFuture()}} and wait on its completion.;public final void shutDown() {_		rpcService.stopServer(self)__	};triggers,the,shut,down,of,the,rpc,endpoint,the,shut,down,is,executed,asynchronously,p,in,order,to,wait,on,the,completion,of,the,shut,down,obtain,the,termination,future,via,link,get,termination,future,and,wait,on,its,completion;public,final,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public final void shutDown();1502196227;Triggers the shut down of the rpc endpoint. The shut down is executed asynchronously.__<p>In order to wait on the completion of the shut down, obtain the termination future_via {@link #getTerminationFuture()}} and wait on its completion.;public final void shutDown() {_		rpcService.stopServer(rpcServer)__	};triggers,the,shut,down,of,the,rpc,endpoint,the,shut,down,is,executed,asynchronously,p,in,order,to,wait,on,the,completion,of,the,shut,down,obtain,the,termination,future,via,link,get,termination,future,and,wait,on,its,completion;public,final,void,shut,down,rpc,service,stop,server,rpc,server
RpcEndpoint -> public final void shutDown();1503500935;Triggers the shut down of the rpc endpoint. The shut down is executed asynchronously.__<p>In order to wait on the completion of the shut down, obtain the termination future_via {@link #getTerminationFuture()}} and wait on its completion.;public final void shutDown() {_		rpcService.stopServer(rpcServer)__	};triggers,the,shut,down,of,the,rpc,endpoint,the,shut,down,is,executed,asynchronously,p,in,order,to,wait,on,the,completion,of,the,shut,down,obtain,the,termination,future,via,link,get,termination,future,and,wait,on,its,completion;public,final,void,shut,down,rpc,service,stop,server,rpc,server
RpcEndpoint -> public final void shutDown();1506976152;Triggers the shut down of the rpc endpoint. The shut down is executed asynchronously.__<p>In order to wait on the completion of the shut down, obtain the termination future_via {@link #getTerminationFuture()}} and wait on its completion.;public final void shutDown() {_		rpcService.stopServer(rpcServer)__	};triggers,the,shut,down,of,the,rpc,endpoint,the,shut,down,is,executed,asynchronously,p,in,order,to,wait,on,the,completion,of,the,shut,down,obtain,the,termination,future,via,link,get,termination,future,and,wait,on,its,completion;public,final,void,shut,down,rpc,service,stop,server,rpc,server
RpcEndpoint -> public final void shutDown();1518715341;Triggers the shut down of the rpc endpoint. The shut down is executed asynchronously.__<p>In order to wait on the completion of the shut down, obtain the termination future_via {@link #getTerminationFuture()}} and wait on its completion.;public final void shutDown() {_		rpcService.stopServer(rpcServer)__	};triggers,the,shut,down,of,the,rpc,endpoint,the,shut,down,is,executed,asynchronously,p,in,order,to,wait,on,the,completion,of,the,shut,down,obtain,the,termination,future,via,link,get,termination,future,and,wait,on,its,completion;public,final,void,shut,down,rpc,service,stop,server,rpc,server
RpcEndpoint -> public final void shutDown();1518716619;Triggers the shut down of the rpc endpoint. The shut down is executed asynchronously.__<p>In order to wait on the completion of the shut down, obtain the termination future_via {@link #getTerminationFuture()}} and wait on its completion.;public final void shutDown() {_		rpcService.stopServer(rpcServer)__	};triggers,the,shut,down,of,the,rpc,endpoint,the,shut,down,is,executed,asynchronously,p,in,order,to,wait,on,the,completion,of,the,shut,down,obtain,the,termination,future,via,link,get,termination,future,and,wait,on,its,completion;public,final,void,shut,down,rpc,service,stop,server,rpc,server
RpcEndpoint -> public final void shutDown();1518718788;Triggers the shut down of the rpc endpoint. The shut down is executed asynchronously.__<p>In order to wait on the completion of the shut down, obtain the termination future_via {@link #getTerminationFuture()}} and wait on its completion.;public final void shutDown() {_		rpcService.stopServer(rpcServer)__	};triggers,the,shut,down,of,the,rpc,endpoint,the,shut,down,is,executed,asynchronously,p,in,order,to,wait,on,the,completion,of,the,shut,down,obtain,the,termination,future,via,link,get,termination,future,and,wait,on,its,completion;public,final,void,shut,down,rpc,service,stop,server,rpc,server
RpcEndpoint -> public final void shutDown();1543229263;Triggers the shut down of the rpc endpoint. The shut down is executed asynchronously.__<p>In order to wait on the completion of the shut down, obtain the termination future_via {@link #getTerminationFuture()}} and wait on its completion.;public final void shutDown() {_		rpcService.stopServer(rpcServer)__	};triggers,the,shut,down,of,the,rpc,endpoint,the,shut,down,is,executed,asynchronously,p,in,order,to,wait,on,the,completion,of,the,shut,down,obtain,the,termination,future,via,link,get,termination,future,and,wait,on,its,completion;public,final,void,shut,down,rpc,service,stop,server,rpc,server
RpcEndpoint -> public final void shutDown();1549467949;Triggers the shut down of the rpc endpoint. The shut down is executed asynchronously.__<p>In order to wait on the completion of the shut down, obtain the termination future_via {@link #getTerminationFuture()}} and wait on its completion.;public final void shutDown() {_		rpcService.stopServer(rpcServer)__	};triggers,the,shut,down,of,the,rpc,endpoint,the,shut,down,is,executed,asynchronously,p,in,order,to,wait,on,the,completion,of,the,shut,down,obtain,the,termination,future,via,link,get,termination,future,and,wait,on,its,completion;public,final,void,shut,down,rpc,service,stop,server,rpc,server
RpcEndpoint -> public final void shutDown();1549533702;Triggers the shut down of the rpc endpoint. The shut down is executed asynchronously.__<p>In order to wait on the completion of the shut down, obtain the termination future_via {@link #getTerminationFuture()}} and wait on its completion.;public final void shutDown() {_		rpcService.stopServer(rpcServer)__	};triggers,the,shut,down,of,the,rpc,endpoint,the,shut,down,is,executed,asynchronously,p,in,order,to,wait,on,the,completion,of,the,shut,down,obtain,the,termination,future,via,link,get,termination,future,and,wait,on,its,completion;public,final,void,shut,down,rpc,service,stop,server,rpc,server
RpcEndpoint -> public abstract CompletableFuture<Void> postStop()_;1518718788;User overridable callback.__<p>This method is called when the RpcEndpoint is being shut down. The method is guaranteed_to be executed in the main thread context and can be used to clean up internal state.__<p>IMPORTANT: This method should never be called directly by the user.__@return Future which is completed once all post stop actions are completed. If an error_occurs this future is completed exceptionally;public abstract CompletableFuture<Void> postStop()_;user,overridable,callback,p,this,method,is,called,when,the,rpc,endpoint,is,being,shut,down,the,method,is,guaranteed,to,be,executed,in,the,main,thread,context,and,can,be,used,to,clean,up,internal,state,p,important,this,method,should,never,be,called,directly,by,the,user,return,future,which,is,completed,once,all,post,stop,actions,are,completed,if,an,error,occurs,this,future,is,completed,exceptionally;public,abstract,completable,future,void,post,stop
RpcEndpoint -> public abstract CompletableFuture<Void> postStop()_;1543229263;User overridable callback.__<p>This method is called when the RpcEndpoint is being shut down. The method is guaranteed_to be executed in the main thread context and can be used to clean up internal state.__<p>IMPORTANT: This method should never be called directly by the user.__@return Future which is completed once all post stop actions are completed. If an error_occurs this future is completed exceptionally;public abstract CompletableFuture<Void> postStop()_;user,overridable,callback,p,this,method,is,called,when,the,rpc,endpoint,is,being,shut,down,the,method,is,guaranteed,to,be,executed,in,the,main,thread,context,and,can,be,used,to,clean,up,internal,state,p,important,this,method,should,never,be,called,directly,by,the,user,return,future,which,is,completed,once,all,post,stop,actions,are,completed,if,an,error,occurs,this,future,is,completed,exceptionally;public,abstract,completable,future,void,post,stop
RpcEndpoint -> public abstract CompletableFuture<Void> postStop()_;1549467949;User overridable callback.__<p>This method is called when the RpcEndpoint is being shut down. The method is guaranteed_to be executed in the main thread context and can be used to clean up internal state.__<p>IMPORTANT: This method should never be called directly by the user.__@return Future which is completed once all post stop actions are completed. If an error_occurs this future is completed exceptionally;public abstract CompletableFuture<Void> postStop()_;user,overridable,callback,p,this,method,is,called,when,the,rpc,endpoint,is,being,shut,down,the,method,is,guaranteed,to,be,executed,in,the,main,thread,context,and,can,be,used,to,clean,up,internal,state,p,important,this,method,should,never,be,called,directly,by,the,user,return,future,which,is,completed,once,all,post,stop,actions,are,completed,if,an,error,occurs,this,future,is,completed,exceptionally;public,abstract,completable,future,void,post,stop
RpcEndpoint -> public void start();1470245494;Starts the underlying rpc server via the rpc service and creates the main thread execution_context. This makes the rpc endpoint effectively reachable from the outside.__Can be overriden to add rpc endpoint specific start up code. Should always call the parent_start method.;public void start() {_		self = rpcService.startServer(this)__		mainThreadExecutionContext = new MainThreadExecutionContext((MainThreadExecutor) self)__	};starts,the,underlying,rpc,server,via,the,rpc,service,and,creates,the,main,thread,execution,context,this,makes,the,rpc,endpoint,effectively,reachable,from,the,outside,can,be,overriden,to,add,rpc,endpoint,specific,start,up,code,should,always,call,the,parent,start,method;public,void,start,self,rpc,service,start,server,this,main,thread,execution,context,new,main,thread,execution,context,main,thread,executor,self
RpcEndpoint -> public void start();1470854565;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.;public void start() {_		((StartStoppable) self).start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last;public,void,start,start,stoppable,self,start
RpcEndpoint -> public void start();1470932005;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.;public void start() {_		((StartStoppable) self).start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last;public,void,start,start,stoppable,self,start
RpcEndpoint -> public void start();1471530887;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.;public void start() {_		((StartStoppable) self).start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last;public,void,start,start,stoppable,self,start
RpcEndpoint -> public void start();1472478599;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.;public void start() {_		((StartStoppable) self).start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last;public,void,start,start,stoppable,self,start
RpcEndpoint -> public void start();1474471581;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.;public void start() {_		((StartStoppable) self).start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last;public,void,start,start,stoppable,self,start
RpcEndpoint -> public void start();1474993062;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.;public void start() {_		((StartStoppable) self).start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last;public,void,start,start,stoppable,self,start
RpcEndpoint -> public void start();1475059170;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.;public void start() {_		((StartStoppable) self).start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last;public,void,start,start,stoppable,self,start
RpcEndpoint -> public RpcService getRpcService();1470245494;Gets the used rpc service.__@return Rpc service;public RpcService getRpcService() {_		return rpcService__	};gets,the,used,rpc,service,return,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1470846441;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1470847346;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1470854565;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1470932005;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1470935448;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1470940254;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1471530887;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1472478599;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1474471581;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1474993062;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1475059170;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1476714136;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1477061494;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1490170142;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1495154056;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1501251235;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1501580028;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1502196227;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1503500935;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1506976152;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1518715341;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1518716619;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1518718788;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1543229263;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1549467949;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1549533702;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> public RpcService getRpcService();1549983516;Gets the endpoint's RPC service.__@return The endpoint's RPC service;public RpcService getRpcService() {_		return rpcService__	};gets,the,endpoint,s,rpc,service,return,the,endpoint,s,rpc,service;public,rpc,service,get,rpc,service,return,rpc,service
RpcEndpoint -> private Class<C> determineSelfGatewayType();1474993062;Determines the self gateway type specified in one of the subclasses which extend this class._May traverse multiple class hierarchies until a Gateway type is found as a first type argument._@return Class<C> The determined self gateway type;private Class<C> determineSelfGatewayType() {__		_		Class c = getClass()__		Class<C> determinedSelfGatewayType__		do {_			determinedSelfGatewayType = ReflectionUtil.getTemplateType1(c)__			_			c = c.getSuperclass()__		} while (!RpcGateway.class.isAssignableFrom(determinedSelfGatewayType))___		return determinedSelfGatewayType__	};determines,the,self,gateway,type,specified,in,one,of,the,subclasses,which,extend,this,class,may,traverse,multiple,class,hierarchies,until,a,gateway,type,is,found,as,a,first,type,argument,return,class,c,the,determined,self,gateway,type;private,class,c,determine,self,gateway,type,class,c,get,class,class,c,determined,self,gateway,type,do,determined,self,gateway,type,reflection,util,get,template,type1,c,c,c,get,superclass,while,rpc,gateway,class,is,assignable,from,determined,self,gateway,type,return,determined,self,gateway,type
RpcEndpoint -> private Class<C> determineSelfGatewayType();1475059170;Determines the self gateway type specified in one of the subclasses which extend this class._May traverse multiple class hierarchies until a Gateway type is found as a first type argument._@return Class<C> The determined self gateway type;private Class<C> determineSelfGatewayType() {__		_		Class c = getClass()__		Class<C> determinedSelfGatewayType__		do {_			determinedSelfGatewayType = ReflectionUtil.getTemplateType1(c)__			_			c = c.getSuperclass()__		} while (!RpcGateway.class.isAssignableFrom(determinedSelfGatewayType))___		return determinedSelfGatewayType__	};determines,the,self,gateway,type,specified,in,one,of,the,subclasses,which,extend,this,class,may,traverse,multiple,class,hierarchies,until,a,gateway,type,is,found,as,a,first,type,argument,return,class,c,the,determined,self,gateway,type;private,class,c,determine,self,gateway,type,class,c,get,class,class,c,determined,self,gateway,type,do,determined,self,gateway,type,reflection,util,get,template,type1,c,c,c,get,superclass,while,rpc,gateway,class,is,assignable,from,determined,self,gateway,type,return,determined,self,gateway,type
RpcEndpoint -> private Class<C> determineSelfGatewayType();1476714136;Determines the self gateway type specified in one of the subclasses which extend this class._May traverse multiple class hierarchies until a Gateway type is found as a first type argument._@return Class<C> The determined self gateway type;private Class<C> determineSelfGatewayType() {__		_		Class c = getClass()__		Class<C> determinedSelfGatewayType__		do {_			determinedSelfGatewayType = ReflectionUtil.getTemplateType1(c)__			_			c = c.getSuperclass()__		} while (!RpcGateway.class.isAssignableFrom(determinedSelfGatewayType))___		return determinedSelfGatewayType__	};determines,the,self,gateway,type,specified,in,one,of,the,subclasses,which,extend,this,class,may,traverse,multiple,class,hierarchies,until,a,gateway,type,is,found,as,a,first,type,argument,return,class,c,the,determined,self,gateway,type;private,class,c,determine,self,gateway,type,class,c,get,class,class,c,determined,self,gateway,type,do,determined,self,gateway,type,reflection,util,get,template,type1,c,c,c,get,superclass,while,rpc,gateway,class,is,assignable,from,determined,self,gateway,type,return,determined,self,gateway,type
RpcEndpoint -> private Class<C> determineSelfGatewayType();1477061494;Determines the self gateway type specified in one of the subclasses which extend this class._May traverse multiple class hierarchies until a Gateway type is found as a first type argument._@return Class<C> The determined self gateway type;private Class<C> determineSelfGatewayType() {__		_		Class<?> c = getClass()__		Class<C> determinedSelfGatewayType__		do {_			determinedSelfGatewayType = ReflectionUtil.getTemplateType1(c)__			_			c = c.getSuperclass()__		} while (!RpcGateway.class.isAssignableFrom(determinedSelfGatewayType))___		return determinedSelfGatewayType__	};determines,the,self,gateway,type,specified,in,one,of,the,subclasses,which,extend,this,class,may,traverse,multiple,class,hierarchies,until,a,gateway,type,is,found,as,a,first,type,argument,return,class,c,the,determined,self,gateway,type;private,class,c,determine,self,gateway,type,class,c,get,class,class,c,determined,self,gateway,type,do,determined,self,gateway,type,reflection,util,get,template,type1,c,c,c,get,superclass,while,rpc,gateway,class,is,assignable,from,determined,self,gateway,type,return,determined,self,gateway,type
RpcEndpoint -> private Class<C> determineSelfGatewayType();1490170142;Determines the self gateway type specified in one of the subclasses which extend this class._May traverse multiple class hierarchies until a Gateway type is found as a first type argument._@return Class<C> The determined self gateway type;private Class<C> determineSelfGatewayType() {__		_		Class<?> c = getClass()__		Class<C> determinedSelfGatewayType__		do {_			determinedSelfGatewayType = ReflectionUtil.getTemplateType1(c)__			_			c = c.getSuperclass()__		} while (!RpcGateway.class.isAssignableFrom(determinedSelfGatewayType))___		return determinedSelfGatewayType__	};determines,the,self,gateway,type,specified,in,one,of,the,subclasses,which,extend,this,class,may,traverse,multiple,class,hierarchies,until,a,gateway,type,is,found,as,a,first,type,argument,return,class,c,the,determined,self,gateway,type;private,class,c,determine,self,gateway,type,class,c,get,class,class,c,determined,self,gateway,type,do,determined,self,gateway,type,reflection,util,get,template,type1,c,c,c,get,superclass,while,rpc,gateway,class,is,assignable,from,determined,self,gateway,type,return,determined,self,gateway,type
RpcEndpoint -> private Class<C> determineSelfGatewayType();1495154056;Determines the self gateway type specified in one of the subclasses which extend this class._May traverse multiple class hierarchies until a Gateway type is found as a first type argument._@return Class<C> The determined self gateway type;private Class<C> determineSelfGatewayType() {__		_		Class<?> c = getClass()__		Class<C> determinedSelfGatewayType__		do {_			determinedSelfGatewayType = ReflectionUtil.getTemplateType1(c)__			_			c = c.getSuperclass()__		} while (!RpcGateway.class.isAssignableFrom(determinedSelfGatewayType))___		return determinedSelfGatewayType__	};determines,the,self,gateway,type,specified,in,one,of,the,subclasses,which,extend,this,class,may,traverse,multiple,class,hierarchies,until,a,gateway,type,is,found,as,a,first,type,argument,return,class,c,the,determined,self,gateway,type;private,class,c,determine,self,gateway,type,class,c,get,class,class,c,determined,self,gateway,type,do,determined,self,gateway,type,reflection,util,get,template,type1,c,c,c,get,superclass,while,rpc,gateway,class,is,assignable,from,determined,self,gateway,type,return,determined,self,gateway,type
RpcEndpoint -> private Class<C> determineSelfGatewayType();1501251235;Determines the self gateway type specified in one of the subclasses which extend this class._May traverse multiple class hierarchies until a Gateway type is found as a first type argument._@return Class<C> The determined self gateway type;private Class<C> determineSelfGatewayType() {__		_		Class<?> c = getClass()__		Class<C> determinedSelfGatewayType__		do {_			determinedSelfGatewayType = ReflectionUtil.getTemplateType1(c)__			_			c = c.getSuperclass()__		} while (!RpcGateway.class.isAssignableFrom(determinedSelfGatewayType))___		return determinedSelfGatewayType__	};determines,the,self,gateway,type,specified,in,one,of,the,subclasses,which,extend,this,class,may,traverse,multiple,class,hierarchies,until,a,gateway,type,is,found,as,a,first,type,argument,return,class,c,the,determined,self,gateway,type;private,class,c,determine,self,gateway,type,class,c,get,class,class,c,determined,self,gateway,type,do,determined,self,gateway,type,reflection,util,get,template,type1,c,c,c,get,superclass,while,rpc,gateway,class,is,assignable,from,determined,self,gateway,type,return,determined,self,gateway,type
RpcEndpoint -> private Class<C> determineSelfGatewayType();1501580028;Determines the self gateway type specified in one of the subclasses which extend this class._May traverse multiple class hierarchies until a Gateway type is found as a first type argument._@return Class<C> The determined self gateway type;private Class<C> determineSelfGatewayType() {__		_		Class<?> c = getClass()__		Class<C> determinedSelfGatewayType__		do {_			determinedSelfGatewayType = ReflectionUtil.getTemplateType1(c)__			_			c = c.getSuperclass()__		} while (!RpcGateway.class.isAssignableFrom(determinedSelfGatewayType))___		return determinedSelfGatewayType__	};determines,the,self,gateway,type,specified,in,one,of,the,subclasses,which,extend,this,class,may,traverse,multiple,class,hierarchies,until,a,gateway,type,is,found,as,a,first,type,argument,return,class,c,the,determined,self,gateway,type;private,class,c,determine,self,gateway,type,class,c,get,class,class,c,determined,self,gateway,type,do,determined,self,gateway,type,reflection,util,get,template,type1,c,c,c,get,superclass,while,rpc,gateway,class,is,assignable,from,determined,self,gateway,type,return,determined,self,gateway,type
RpcEndpoint -> public C getSelf();1470245494;Get self-gateway which should be used to run asynchronous rpc calls on this endpoint.__IMPORTANT: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return Self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,important,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1470846441;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1470847346;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1470854565;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1470932005;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1470935448;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1470940254;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1471530887;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1472478599;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1474471581;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1474993062;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1475059170;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1476714136;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1477061494;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1490170142;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1495154056;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1501251235;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public C getSelf();1501580028;Get self-gateway which should be used to run asynchronous RPC calls on this endpoint.__<p><b>IMPORTANT</b>: Always issue local method calls via the self-gateway if the current thread_is not the main thread of the underlying rpc server, e.g. from within a future callback.__@return The self gateway;public C getSelf() {_		return self__	};get,self,gateway,which,should,be,used,to,run,asynchronous,rpc,calls,on,this,endpoint,p,b,important,b,always,issue,local,method,calls,via,the,self,gateway,if,the,current,thread,is,not,the,main,thread,of,the,underlying,rpc,server,e,g,from,within,a,future,callback,return,the,self,gateway;public,c,get,self,return,self
RpcEndpoint -> public ExecutionContext getMainThreadExecutionContext();1470245494;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying rpc server.__@return Main thread execution context;public ExecutionContext getMainThreadExecutionContext() {_		return mainThreadExecutionContext__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,server,return,main,thread,execution,context;public,execution,context,get,main,thread,execution,context,return,main,thread,execution,context
RpcEndpoint -> public ExecutionContext getMainThreadExecutionContext();1470846441;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;public ExecutionContext getMainThreadExecutionContext() {_		return mainThreadExecutionContext__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;public,execution,context,get,main,thread,execution,context,return,main,thread,execution,context
RpcEndpoint -> public ExecutionContext getMainThreadExecutionContext();1470847346;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;public ExecutionContext getMainThreadExecutionContext() {_		return mainThreadExecutionContext__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;public,execution,context,get,main,thread,execution,context,return,main,thread,execution,context
RpcEndpoint -> public ExecutionContext getMainThreadExecutionContext();1470854565;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;public ExecutionContext getMainThreadExecutionContext() {_		return mainThreadExecutionContext__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;public,execution,context,get,main,thread,execution,context,return,main,thread,execution,context
RpcEndpoint -> public ExecutionContext getMainThreadExecutionContext();1470932005;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;public ExecutionContext getMainThreadExecutionContext() {_		return mainThreadExecutionContext__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;public,execution,context,get,main,thread,execution,context,return,main,thread,execution,context
RpcEndpoint -> public ExecutionContext getMainThreadExecutionContext();1470935448;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;public ExecutionContext getMainThreadExecutionContext() {_		return mainThreadExecutionContext__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;public,execution,context,get,main,thread,execution,context,return,main,thread,execution,context
RpcEndpoint -> public ExecutionContext getMainThreadExecutionContext();1470940254;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;public ExecutionContext getMainThreadExecutionContext() {_		return mainThreadExecutionContext__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;public,execution,context,get,main,thread,execution,context,return,main,thread,execution,context
RpcEndpoint -> public ExecutionContext getMainThreadExecutionContext();1471530887;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;public ExecutionContext getMainThreadExecutionContext() {_		return mainThreadExecutionContext__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;public,execution,context,get,main,thread,execution,context,return,main,thread,execution,context
RpcEndpoint -> public final Class<C> getSelfGatewayType();1470847346;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1470854565;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1470932005;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1470935448;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1470940254;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1471530887;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1472478599;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1474471581;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1474993062;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1475059170;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1476714136;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1477061494;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1490170142;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1495154056;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1501251235;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> public final Class<C> getSelfGatewayType();1501580028;Returns the class of the self gateway type.__@return Class of the self gateway type;public final Class<C> getSelfGatewayType() {_		return selfGatewayType__	};returns,the,class,of,the,self,gateway,type,return,class,of,the,self,gateway,type;public,final,class,c,get,self,gateway,type,return,self,gateway,type
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1472478599;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutor) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executor,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1474471581;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutable) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executable,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1474993062;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutable) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executable,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1475059170;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutable) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executable,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1476714136;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutable) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executable,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1477061494;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutable) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executable,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1490170142;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutable) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executable,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1495154056;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutable) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executable,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1501251235;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutable) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executable,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1501580028;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutable) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executable,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1502196227;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		rpcServer.scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,rpc,server,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1503500935;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		rpcServer.scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,rpc,server,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1506976152;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		rpcServer.scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,rpc,server,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1518715341;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		rpcServer.scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,rpc,server,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1518716619;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		rpcServer.scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,rpc,server,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1518718788;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		rpcServer.scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,rpc,server,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1543229263;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		rpcServer.scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,rpc,server,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1549467949;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		rpcServer.scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,rpc,server,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1549533702;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		rpcServer.scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,rpc,server,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1549983516;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		rpcServer.scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,rpc,server,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1477061494;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1490170142;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1495154056;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1501251235;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1501580028;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1502196227;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1503500935;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1506976152;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1518715341;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1518716619;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1518718788;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1543229263;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1549467949;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1549533702;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void scheduleRunAsync(Runnable runnable, Time delay);1549983516;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;protected void scheduleRunAsync(Runnable runnable, Time delay) {_		scheduleRunAsync(runnable, delay.getSize(), delay.getUnit())__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;protected,void,schedule,run,async,runnable,runnable,time,delay,schedule,run,async,runnable,delay,get,size,delay,get,unit
RpcEndpoint -> protected void runAsync(Runnable runnable);1472478599;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		((MainThreadExecutor) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,main,thread,executor,self,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1474471581;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		((MainThreadExecutable) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,main,thread,executable,self,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1474993062;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		((MainThreadExecutable) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,main,thread,executable,self,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1475059170;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		((MainThreadExecutable) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,main,thread,executable,self,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1476714136;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		((MainThreadExecutable) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,main,thread,executable,self,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1477061494;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		((MainThreadExecutable) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,main,thread,executable,self,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1490170142;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		((MainThreadExecutable) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,main,thread,executable,self,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1495154056;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		((MainThreadExecutable) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,main,thread,executable,self,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1501251235;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		((MainThreadExecutable) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,main,thread,executable,self,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1501580028;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		((MainThreadExecutable) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,main,thread,executable,self,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1502196227;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		rpcServer.runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,rpc,server,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1503500935;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		rpcServer.runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,rpc,server,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1506976152;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		rpcServer.runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,rpc,server,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1518715341;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		rpcServer.runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,rpc,server,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1518716619;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		rpcServer.runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,rpc,server,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1518718788;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		rpcServer.runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,rpc,server,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1543229263;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		rpcServer.runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,rpc,server,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1549467949;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		rpcServer.runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,rpc,server,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1549533702;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		rpcServer.runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,rpc,server,run,async,runnable
RpcEndpoint -> protected void runAsync(Runnable runnable);1549983516;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;protected void runAsync(Runnable runnable) {_		rpcServer.runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;protected,void,run,async,runnable,runnable,rpc,server,run,async,runnable
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1490170142;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		_		_		this.selfGatewayType = determineSelfGatewayType()__		this.self = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor((MainThreadExecutable) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,self,gateway,type,determine,self,gateway,type,this,self,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,main,thread,executable,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1495154056;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		_		_		this.selfGatewayType = determineSelfGatewayType()__		this.self = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor((MainThreadExecutable) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,self,gateway,type,determine,self,gateway,type,this,self,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,main,thread,executable,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1501251235;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		_		_		this.selfGatewayType = determineSelfGatewayType()__		this.self = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor((MainThreadExecutable) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,self,gateway,type,determine,self,gateway,type,this,self,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,main,thread,executable,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1501580028;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		_		_		this.selfGatewayType = determineSelfGatewayType()__		this.self = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor((MainThreadExecutable) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,self,gateway,type,determine,self,gateway,type,this,self,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,main,thread,executable,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1502196227;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		this.rpcServer = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor(rpcServer)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,rpc,server,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,rpc,server
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1503500935;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		this.rpcServer = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor(rpcServer)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,rpc,server,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,rpc,server
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1506976152;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		this.rpcServer = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor(rpcServer)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,rpc,server,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,rpc,server
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1518715341;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		this.rpcServer = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor(rpcServer)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,rpc,server,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,rpc,server
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1518716619;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		this.rpcServer = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor(rpcServer)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,rpc,server,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,rpc,server
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1518718788;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		this.rpcServer = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor(rpcServer)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,rpc,server,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,rpc,server
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1543229263;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		this.rpcServer = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor(rpcServer, this::validateRunsInMainThread)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,rpc,server,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,rpc,server,this,validate,runs,in,main,thread
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1549467949;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		this.rpcServer = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor(rpcServer, this::validateRunsInMainThread)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,rpc,server,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,rpc,server,this,validate,runs,in,main,thread
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1549533702;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		this.rpcServer = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor(rpcServer, this::validateRunsInMainThread)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,rpc,server,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,rpc,server,this,validate,runs,in,main,thread
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService, final String endpointId);1549983516;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint._@param endpointId Unique identifier for this endpoint;protected RpcEndpoint(final RpcService rpcService, final String endpointId) {_		this.rpcService = checkNotNull(rpcService, "rpcService")__		this.endpointId = checkNotNull(endpointId, "endpointId")___		this.rpcServer = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor(rpcServer, this::validateRunsInMainThread)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint,param,endpoint,id,unique,identifier,for,this,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,final,string,endpoint,id,this,rpc,service,check,not,null,rpc,service,rpc,service,this,endpoint,id,check,not,null,endpoint,id,endpoint,id,this,rpc,server,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,rpc,server,this,validate,runs,in,main,thread
RpcEndpoint -> @Override 	public String getHostname();1502196227;Gets the hostname of the underlying RPC endpoint.__@return Hostname on which the RPC endpoint is running;@Override_	public String getHostname() {_		return rpcServer.getHostname()__	};gets,the,hostname,of,the,underlying,rpc,endpoint,return,hostname,on,which,the,rpc,endpoint,is,running;override,public,string,get,hostname,return,rpc,server,get,hostname
RpcEndpoint -> @Override 	public String getHostname();1503500935;Gets the hostname of the underlying RPC endpoint.__@return Hostname on which the RPC endpoint is running;@Override_	public String getHostname() {_		return rpcServer.getHostname()__	};gets,the,hostname,of,the,underlying,rpc,endpoint,return,hostname,on,which,the,rpc,endpoint,is,running;override,public,string,get,hostname,return,rpc,server,get,hostname
RpcEndpoint -> @Override 	public String getHostname();1506976152;Gets the hostname of the underlying RPC endpoint.__@return Hostname on which the RPC endpoint is running;@Override_	public String getHostname() {_		return rpcServer.getHostname()__	};gets,the,hostname,of,the,underlying,rpc,endpoint,return,hostname,on,which,the,rpc,endpoint,is,running;override,public,string,get,hostname,return,rpc,server,get,hostname
RpcEndpoint -> @Override 	public String getHostname();1518715341;Gets the hostname of the underlying RPC endpoint.__@return Hostname on which the RPC endpoint is running;@Override_	public String getHostname() {_		return rpcServer.getHostname()__	};gets,the,hostname,of,the,underlying,rpc,endpoint,return,hostname,on,which,the,rpc,endpoint,is,running;override,public,string,get,hostname,return,rpc,server,get,hostname
RpcEndpoint -> @Override 	public String getHostname();1518716619;Gets the hostname of the underlying RPC endpoint.__@return Hostname on which the RPC endpoint is running;@Override_	public String getHostname() {_		return rpcServer.getHostname()__	};gets,the,hostname,of,the,underlying,rpc,endpoint,return,hostname,on,which,the,rpc,endpoint,is,running;override,public,string,get,hostname,return,rpc,server,get,hostname
RpcEndpoint -> @Override 	public String getHostname();1518718788;Gets the hostname of the underlying RPC endpoint.__@return Hostname on which the RPC endpoint is running;@Override_	public String getHostname() {_		return rpcServer.getHostname()__	};gets,the,hostname,of,the,underlying,rpc,endpoint,return,hostname,on,which,the,rpc,endpoint,is,running;override,public,string,get,hostname,return,rpc,server,get,hostname
RpcEndpoint -> @Override 	public String getHostname();1543229263;Gets the hostname of the underlying RPC endpoint.__@return Hostname on which the RPC endpoint is running;@Override_	public String getHostname() {_		return rpcServer.getHostname()__	};gets,the,hostname,of,the,underlying,rpc,endpoint,return,hostname,on,which,the,rpc,endpoint,is,running;override,public,string,get,hostname,return,rpc,server,get,hostname
RpcEndpoint -> @Override 	public String getHostname();1549467949;Gets the hostname of the underlying RPC endpoint.__@return Hostname on which the RPC endpoint is running;@Override_	public String getHostname() {_		return rpcServer.getHostname()__	};gets,the,hostname,of,the,underlying,rpc,endpoint,return,hostname,on,which,the,rpc,endpoint,is,running;override,public,string,get,hostname,return,rpc,server,get,hostname
RpcEndpoint -> @Override 	public String getHostname();1549533702;Gets the hostname of the underlying RPC endpoint.__@return Hostname on which the RPC endpoint is running;@Override_	public String getHostname() {_		return rpcServer.getHostname()__	};gets,the,hostname,of,the,underlying,rpc,endpoint,return,hostname,on,which,the,rpc,endpoint,is,running;override,public,string,get,hostname,return,rpc,server,get,hostname
RpcEndpoint -> @Override 	public String getHostname();1549983516;Gets the hostname of the underlying RPC endpoint.__@return Hostname on which the RPC endpoint is running;@Override_	public String getHostname() {_		return rpcServer.getHostname()__	};gets,the,hostname,of,the,underlying,rpc,endpoint,return,hostname,on,which,the,rpc,endpoint,is,running;override,public,string,get,hostname,return,rpc,server,get,hostname
RpcEndpoint -> public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType);1502196227;Returns a self gateway of the specified type which can be used to issue asynchronous_calls against the RpcEndpoint.__<p>IMPORTANT: The self gateway type must be implemented by the RpcEndpoint. Otherwise_the method will fail.__@param selfGatewayType class of the self gateway type_@param <C> type of the self gateway to create_@return Self gateway of the specified type which can be used to issue asynchronous rpcs;public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType) {_		if (selfGatewayType.isInstance(rpcServer)) {_			@SuppressWarnings("unchecked")_			C selfGateway = ((C) rpcServer)___			return selfGateway__		} else {_			throw new RuntimeException("RpcEndpoint does not implement the RpcGateway interface of type " + selfGatewayType + '.')__		}_	};returns,a,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,calls,against,the,rpc,endpoint,p,important,the,self,gateway,type,must,be,implemented,by,the,rpc,endpoint,otherwise,the,method,will,fail,param,self,gateway,type,class,of,the,self,gateway,type,param,c,type,of,the,self,gateway,to,create,return,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,rpcs;public,c,extends,rpc,gateway,c,get,self,gateway,class,c,self,gateway,type,if,self,gateway,type,is,instance,rpc,server,suppress,warnings,unchecked,c,self,gateway,c,rpc,server,return,self,gateway,else,throw,new,runtime,exception,rpc,endpoint,does,not,implement,the,rpc,gateway,interface,of,type,self,gateway,type
RpcEndpoint -> public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType);1503500935;Returns a self gateway of the specified type which can be used to issue asynchronous_calls against the RpcEndpoint.__<p>IMPORTANT: The self gateway type must be implemented by the RpcEndpoint. Otherwise_the method will fail.__@param selfGatewayType class of the self gateway type_@param <C> type of the self gateway to create_@return Self gateway of the specified type which can be used to issue asynchronous rpcs;public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType) {_		if (selfGatewayType.isInstance(rpcServer)) {_			@SuppressWarnings("unchecked")_			C selfGateway = ((C) rpcServer)___			return selfGateway__		} else {_			throw new RuntimeException("RpcEndpoint does not implement the RpcGateway interface of type " + selfGatewayType + '.')__		}_	};returns,a,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,calls,against,the,rpc,endpoint,p,important,the,self,gateway,type,must,be,implemented,by,the,rpc,endpoint,otherwise,the,method,will,fail,param,self,gateway,type,class,of,the,self,gateway,type,param,c,type,of,the,self,gateway,to,create,return,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,rpcs;public,c,extends,rpc,gateway,c,get,self,gateway,class,c,self,gateway,type,if,self,gateway,type,is,instance,rpc,server,suppress,warnings,unchecked,c,self,gateway,c,rpc,server,return,self,gateway,else,throw,new,runtime,exception,rpc,endpoint,does,not,implement,the,rpc,gateway,interface,of,type,self,gateway,type
RpcEndpoint -> public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType);1506976152;Returns a self gateway of the specified type which can be used to issue asynchronous_calls against the RpcEndpoint.__<p>IMPORTANT: The self gateway type must be implemented by the RpcEndpoint. Otherwise_the method will fail.__@param selfGatewayType class of the self gateway type_@param <C> type of the self gateway to create_@return Self gateway of the specified type which can be used to issue asynchronous rpcs;public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType) {_		if (selfGatewayType.isInstance(rpcServer)) {_			@SuppressWarnings("unchecked")_			C selfGateway = ((C) rpcServer)___			return selfGateway__		} else {_			throw new RuntimeException("RpcEndpoint does not implement the RpcGateway interface of type " + selfGatewayType + '.')__		}_	};returns,a,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,calls,against,the,rpc,endpoint,p,important,the,self,gateway,type,must,be,implemented,by,the,rpc,endpoint,otherwise,the,method,will,fail,param,self,gateway,type,class,of,the,self,gateway,type,param,c,type,of,the,self,gateway,to,create,return,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,rpcs;public,c,extends,rpc,gateway,c,get,self,gateway,class,c,self,gateway,type,if,self,gateway,type,is,instance,rpc,server,suppress,warnings,unchecked,c,self,gateway,c,rpc,server,return,self,gateway,else,throw,new,runtime,exception,rpc,endpoint,does,not,implement,the,rpc,gateway,interface,of,type,self,gateway,type
RpcEndpoint -> public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType);1518715341;Returns a self gateway of the specified type which can be used to issue asynchronous_calls against the RpcEndpoint.__<p>IMPORTANT: The self gateway type must be implemented by the RpcEndpoint. Otherwise_the method will fail.__@param selfGatewayType class of the self gateway type_@param <C> type of the self gateway to create_@return Self gateway of the specified type which can be used to issue asynchronous rpcs;public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType) {_		if (selfGatewayType.isInstance(rpcServer)) {_			@SuppressWarnings("unchecked")_			C selfGateway = ((C) rpcServer)___			return selfGateway__		} else {_			throw new RuntimeException("RpcEndpoint does not implement the RpcGateway interface of type " + selfGatewayType + '.')__		}_	};returns,a,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,calls,against,the,rpc,endpoint,p,important,the,self,gateway,type,must,be,implemented,by,the,rpc,endpoint,otherwise,the,method,will,fail,param,self,gateway,type,class,of,the,self,gateway,type,param,c,type,of,the,self,gateway,to,create,return,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,rpcs;public,c,extends,rpc,gateway,c,get,self,gateway,class,c,self,gateway,type,if,self,gateway,type,is,instance,rpc,server,suppress,warnings,unchecked,c,self,gateway,c,rpc,server,return,self,gateway,else,throw,new,runtime,exception,rpc,endpoint,does,not,implement,the,rpc,gateway,interface,of,type,self,gateway,type
RpcEndpoint -> public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType);1518716619;Returns a self gateway of the specified type which can be used to issue asynchronous_calls against the RpcEndpoint.__<p>IMPORTANT: The self gateway type must be implemented by the RpcEndpoint. Otherwise_the method will fail.__@param selfGatewayType class of the self gateway type_@param <C> type of the self gateway to create_@return Self gateway of the specified type which can be used to issue asynchronous rpcs;public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType) {_		if (selfGatewayType.isInstance(rpcServer)) {_			@SuppressWarnings("unchecked")_			C selfGateway = ((C) rpcServer)___			return selfGateway__		} else {_			throw new RuntimeException("RpcEndpoint does not implement the RpcGateway interface of type " + selfGatewayType + '.')__		}_	};returns,a,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,calls,against,the,rpc,endpoint,p,important,the,self,gateway,type,must,be,implemented,by,the,rpc,endpoint,otherwise,the,method,will,fail,param,self,gateway,type,class,of,the,self,gateway,type,param,c,type,of,the,self,gateway,to,create,return,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,rpcs;public,c,extends,rpc,gateway,c,get,self,gateway,class,c,self,gateway,type,if,self,gateway,type,is,instance,rpc,server,suppress,warnings,unchecked,c,self,gateway,c,rpc,server,return,self,gateway,else,throw,new,runtime,exception,rpc,endpoint,does,not,implement,the,rpc,gateway,interface,of,type,self,gateway,type
RpcEndpoint -> public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType);1518718788;Returns a self gateway of the specified type which can be used to issue asynchronous_calls against the RpcEndpoint.__<p>IMPORTANT: The self gateway type must be implemented by the RpcEndpoint. Otherwise_the method will fail.__@param selfGatewayType class of the self gateway type_@param <C> type of the self gateway to create_@return Self gateway of the specified type which can be used to issue asynchronous rpcs;public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType) {_		if (selfGatewayType.isInstance(rpcServer)) {_			@SuppressWarnings("unchecked")_			C selfGateway = ((C) rpcServer)___			return selfGateway__		} else {_			throw new RuntimeException("RpcEndpoint does not implement the RpcGateway interface of type " + selfGatewayType + '.')__		}_	};returns,a,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,calls,against,the,rpc,endpoint,p,important,the,self,gateway,type,must,be,implemented,by,the,rpc,endpoint,otherwise,the,method,will,fail,param,self,gateway,type,class,of,the,self,gateway,type,param,c,type,of,the,self,gateway,to,create,return,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,rpcs;public,c,extends,rpc,gateway,c,get,self,gateway,class,c,self,gateway,type,if,self,gateway,type,is,instance,rpc,server,suppress,warnings,unchecked,c,self,gateway,c,rpc,server,return,self,gateway,else,throw,new,runtime,exception,rpc,endpoint,does,not,implement,the,rpc,gateway,interface,of,type,self,gateway,type
RpcEndpoint -> public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType);1543229263;Returns a self gateway of the specified type which can be used to issue asynchronous_calls against the RpcEndpoint.__<p>IMPORTANT: The self gateway type must be implemented by the RpcEndpoint. Otherwise_the method will fail.__@param selfGatewayType class of the self gateway type_@param <C> type of the self gateway to create_@return Self gateway of the specified type which can be used to issue asynchronous rpcs;public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType) {_		if (selfGatewayType.isInstance(rpcServer)) {_			@SuppressWarnings("unchecked")_			C selfGateway = ((C) rpcServer)___			return selfGateway__		} else {_			throw new RuntimeException("RpcEndpoint does not implement the RpcGateway interface of type " + selfGatewayType + '.')__		}_	};returns,a,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,calls,against,the,rpc,endpoint,p,important,the,self,gateway,type,must,be,implemented,by,the,rpc,endpoint,otherwise,the,method,will,fail,param,self,gateway,type,class,of,the,self,gateway,type,param,c,type,of,the,self,gateway,to,create,return,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,rpcs;public,c,extends,rpc,gateway,c,get,self,gateway,class,c,self,gateway,type,if,self,gateway,type,is,instance,rpc,server,suppress,warnings,unchecked,c,self,gateway,c,rpc,server,return,self,gateway,else,throw,new,runtime,exception,rpc,endpoint,does,not,implement,the,rpc,gateway,interface,of,type,self,gateway,type
RpcEndpoint -> public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType);1549467949;Returns a self gateway of the specified type which can be used to issue asynchronous_calls against the RpcEndpoint.__<p>IMPORTANT: The self gateway type must be implemented by the RpcEndpoint. Otherwise_the method will fail.__@param selfGatewayType class of the self gateway type_@param <C> type of the self gateway to create_@return Self gateway of the specified type which can be used to issue asynchronous rpcs;public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType) {_		if (selfGatewayType.isInstance(rpcServer)) {_			@SuppressWarnings("unchecked")_			C selfGateway = ((C) rpcServer)___			return selfGateway__		} else {_			throw new RuntimeException("RpcEndpoint does not implement the RpcGateway interface of type " + selfGatewayType + '.')__		}_	};returns,a,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,calls,against,the,rpc,endpoint,p,important,the,self,gateway,type,must,be,implemented,by,the,rpc,endpoint,otherwise,the,method,will,fail,param,self,gateway,type,class,of,the,self,gateway,type,param,c,type,of,the,self,gateway,to,create,return,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,rpcs;public,c,extends,rpc,gateway,c,get,self,gateway,class,c,self,gateway,type,if,self,gateway,type,is,instance,rpc,server,suppress,warnings,unchecked,c,self,gateway,c,rpc,server,return,self,gateway,else,throw,new,runtime,exception,rpc,endpoint,does,not,implement,the,rpc,gateway,interface,of,type,self,gateway,type
RpcEndpoint -> public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType);1549533702;Returns a self gateway of the specified type which can be used to issue asynchronous_calls against the RpcEndpoint.__<p>IMPORTANT: The self gateway type must be implemented by the RpcEndpoint. Otherwise_the method will fail.__@param selfGatewayType class of the self gateway type_@param <C> type of the self gateway to create_@return Self gateway of the specified type which can be used to issue asynchronous rpcs;public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType) {_		if (selfGatewayType.isInstance(rpcServer)) {_			@SuppressWarnings("unchecked")_			C selfGateway = ((C) rpcServer)___			return selfGateway__		} else {_			throw new RuntimeException("RpcEndpoint does not implement the RpcGateway interface of type " + selfGatewayType + '.')__		}_	};returns,a,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,calls,against,the,rpc,endpoint,p,important,the,self,gateway,type,must,be,implemented,by,the,rpc,endpoint,otherwise,the,method,will,fail,param,self,gateway,type,class,of,the,self,gateway,type,param,c,type,of,the,self,gateway,to,create,return,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,rpcs;public,c,extends,rpc,gateway,c,get,self,gateway,class,c,self,gateway,type,if,self,gateway,type,is,instance,rpc,server,suppress,warnings,unchecked,c,self,gateway,c,rpc,server,return,self,gateway,else,throw,new,runtime,exception,rpc,endpoint,does,not,implement,the,rpc,gateway,interface,of,type,self,gateway,type
RpcEndpoint -> public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType);1549983516;Returns a self gateway of the specified type which can be used to issue asynchronous_calls against the RpcEndpoint.__<p>IMPORTANT: The self gateway type must be implemented by the RpcEndpoint. Otherwise_the method will fail.__@param selfGatewayType class of the self gateway type_@param <C> type of the self gateway to create_@return Self gateway of the specified type which can be used to issue asynchronous rpcs;public <C extends RpcGateway> C getSelfGateway(Class<C> selfGatewayType) {_		if (selfGatewayType.isInstance(rpcServer)) {_			@SuppressWarnings("unchecked")_			C selfGateway = ((C) rpcServer)___			return selfGateway__		} else {_			throw new RuntimeException("RpcEndpoint does not implement the RpcGateway interface of type " + selfGatewayType + '.')__		}_	};returns,a,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,calls,against,the,rpc,endpoint,p,important,the,self,gateway,type,must,be,implemented,by,the,rpc,endpoint,otherwise,the,method,will,fail,param,self,gateway,type,class,of,the,self,gateway,type,param,c,type,of,the,self,gateway,to,create,return,self,gateway,of,the,specified,type,which,can,be,used,to,issue,asynchronous,rpcs;public,c,extends,rpc,gateway,c,get,self,gateway,class,c,self,gateway,type,if,self,gateway,type,is,instance,rpc,server,suppress,warnings,unchecked,c,self,gateway,c,rpc,server,return,self,gateway,else,throw,new,runtime,exception,rpc,endpoint,does,not,implement,the,rpc,gateway,interface,of,type,self,gateway,type
RpcEndpoint -> public CompletableFuture<Void> onStop();1549533702;User overridable callback.__<p>This method is called when the RpcEndpoint is being shut down. The method is guaranteed_to be executed in the main thread context and can be used to clean up internal state.__<p>IMPORTANT: This method should never be called directly by the user.__@return Future which is completed once all post stop actions are completed. If an error_occurs this future is completed exceptionally;public CompletableFuture<Void> onStop() {_		return CompletableFuture.completedFuture(null)__	};user,overridable,callback,p,this,method,is,called,when,the,rpc,endpoint,is,being,shut,down,the,method,is,guaranteed,to,be,executed,in,the,main,thread,context,and,can,be,used,to,clean,up,internal,state,p,important,this,method,should,never,be,called,directly,by,the,user,return,future,which,is,completed,once,all,post,stop,actions,are,completed,if,an,error,occurs,this,future,is,completed,exceptionally;public,completable,future,void,on,stop,return,completable,future,completed,future,null
RpcEndpoint -> public CompletableFuture<Void> onStop();1549983516;User overridable callback.__<p>This method is called when the RpcEndpoint is being shut down. The method is guaranteed_to be executed in the main thread context and can be used to clean up internal state.__<p>IMPORTANT: This method should never be called directly by the user.__@return Future which is completed once all post stop actions are completed. If an error_occurs this future is completed exceptionally;public CompletableFuture<Void> onStop() {_		return CompletableFuture.completedFuture(null)__	};user,overridable,callback,p,this,method,is,called,when,the,rpc,endpoint,is,being,shut,down,the,method,is,guaranteed,to,be,executed,in,the,main,thread,context,and,can,be,used,to,clean,up,internal,state,p,important,this,method,should,never,be,called,directly,by,the,user,return,future,which,is,completed,once,all,post,stop,actions,are,completed,if,an,error,occurs,this,future,is,completed,exceptionally;public,completable,future,void,on,stop,return,completable,future,completed,future,null
RpcEndpoint -> public void runAsync(Runnable runnable);1470245494;Execute the runnable in the main thread of the underlying rpc server.__@param runnable Runnable to be executed in the main thread of the underlying rpc server;public void runAsync(Runnable runnable) {_		((MainThreadExecutor) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,server,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server;public,void,run,async,runnable,runnable,main,thread,executor,self,run,async,runnable
RpcEndpoint -> public void runAsync(Runnable runnable);1470846441;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;public void runAsync(Runnable runnable) {_		((MainThreadExecutor) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;public,void,run,async,runnable,runnable,main,thread,executor,self,run,async,runnable
RpcEndpoint -> public void runAsync(Runnable runnable);1470847346;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;public void runAsync(Runnable runnable) {_		((MainThreadExecutor) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;public,void,run,async,runnable,runnable,main,thread,executor,self,run,async,runnable
RpcEndpoint -> public void runAsync(Runnable runnable);1470854565;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;public void runAsync(Runnable runnable) {_		((MainThreadExecutor) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;public,void,run,async,runnable,runnable,main,thread,executor,self,run,async,runnable
RpcEndpoint -> public void runAsync(Runnable runnable);1470932005;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;public void runAsync(Runnable runnable) {_		((MainThreadExecutor) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;public,void,run,async,runnable,runnable,main,thread,executor,self,run,async,runnable
RpcEndpoint -> public void runAsync(Runnable runnable);1470935448;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;public void runAsync(Runnable runnable) {_		((MainThreadExecutor) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;public,void,run,async,runnable,runnable,main,thread,executor,self,run,async,runnable
RpcEndpoint -> public void runAsync(Runnable runnable);1470940254;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;public void runAsync(Runnable runnable) {_		((MainThreadExecutor) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;public,void,run,async,runnable,runnable,main,thread,executor,self,run,async,runnable
RpcEndpoint -> public void runAsync(Runnable runnable);1471530887;Execute the runnable in the main thread of the underlying RPC endpoint.__@param runnable Runnable to be executed in the main thread of the underlying RPC endpoint;public void runAsync(Runnable runnable) {_		((MainThreadExecutor) self).runAsync(runnable)__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,param,runnable,runnable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,endpoint;public,void,run,async,runnable,runnable,main,thread,executor,self,run,async,runnable
RpcEndpoint -> public void validateRunsInMainThread();1470854565;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1470932005;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1470940254;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1471530887;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1472478599;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1474471581;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1474993062;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1475059170;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1476714136;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1477061494;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1490170142;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1495154056;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1501251235;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1501580028;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1502196227;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1503500935;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1506976152;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1518715341;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1518716619;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1518718788;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert currentMainThread.get() == Thread.currentThread()__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,current,main,thread,get,thread,current,thread
RpcEndpoint -> public void validateRunsInMainThread();1543229263;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert MainThreadValidatorUtil.isRunningInExpectedThread(currentMainThread.get())__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,main,thread,validator,util,is,running,in,expected,thread,current,main,thread,get
RpcEndpoint -> public void validateRunsInMainThread();1549467949;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert MainThreadValidatorUtil.isRunningInExpectedThread(currentMainThread.get())__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,main,thread,validator,util,is,running,in,expected,thread,current,main,thread,get
RpcEndpoint -> public void validateRunsInMainThread();1549533702;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert MainThreadValidatorUtil.isRunningInExpectedThread(currentMainThread.get())__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,main,thread,validator,util,is,running,in,expected,thread,current,main,thread,get
RpcEndpoint -> public void validateRunsInMainThread();1549983516;Validates that the method call happens in the RPC endpoint's main thread.__<p><b>IMPORTANT:</b> This check only happens when assertions are enabled,_such as when running tests.__<p>This can be used for additional checks, like_<pre>{@code_protected void concurrencyCriticalMethod() {_validateRunsInMainThread()___// some critical stuff__}</pre>;public void validateRunsInMainThread() {_		assert MainThreadValidatorUtil.isRunningInExpectedThread(currentMainThread.get())__	};validates,that,the,method,call,happens,in,the,rpc,endpoint,s,main,thread,p,b,important,b,this,check,only,happens,when,assertions,are,enabled,such,as,when,running,tests,p,this,can,be,used,for,additional,checks,like,pre,code,protected,void,concurrency,critical,method,validate,runs,in,main,thread,some,critical,stuff,pre;public,void,validate,runs,in,main,thread,assert,main,thread,validator,util,is,running,in,expected,thread,current,main,thread,get
RpcEndpoint -> public void start() throws Exception;1476714136;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		((StartStoppable) self).start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,start,stoppable,self,start
RpcEndpoint -> public void start() throws Exception;1477061494;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		((StartStoppable) self).start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,start,stoppable,self,start
RpcEndpoint -> public void start() throws Exception;1490170142;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		((StartStoppable) self).start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,start,stoppable,self,start
RpcEndpoint -> public void start() throws Exception;1495154056;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		((StartStoppable) self).start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,start,stoppable,self,start
RpcEndpoint -> public void start() throws Exception;1501251235;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		((StartStoppable) self).start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,start,stoppable,self,start
RpcEndpoint -> public void start() throws Exception;1501580028;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		((StartStoppable) self).start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,start,stoppable,self,start
RpcEndpoint -> public void start() throws Exception;1502196227;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		rpcServer.start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,rpc,server,start
RpcEndpoint -> public void start() throws Exception;1503500935;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		rpcServer.start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,rpc,server,start
RpcEndpoint -> public void start() throws Exception;1506976152;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		rpcServer.start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,rpc,server,start
RpcEndpoint -> public void start() throws Exception;1518715341;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__<p>IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		rpcServer.start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,p,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,rpc,server,start
RpcEndpoint -> public void start() throws Exception;1518716619;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		rpcServer.start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,rpc,server,start
RpcEndpoint -> public void start() throws Exception;1518718788;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__<p>IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		rpcServer.start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,p,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,rpc,server,start
RpcEndpoint -> public void start() throws Exception;1543229263;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__<p>IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		rpcServer.start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,p,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,rpc,server,start
RpcEndpoint -> public void start() throws Exception;1549467949;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__<p>IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		rpcServer.start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,p,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,rpc,server,start
RpcEndpoint -> public void start() throws Exception;1549533702;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__<p>IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		rpcServer.start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,p,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,rpc,server,start
RpcEndpoint -> public void start() throws Exception;1549983516;Starts the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is ready_to process remote procedure calls.__<p>IMPORTANT: Whenever you override this method, call the parent implementation to enable_rpc processing. It is advised to make the parent call last.__@throws Exception indicating that something went wrong while starting the RPC endpoint;public void start() throws Exception {_		rpcServer.start()__	};starts,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,ready,to,process,remote,procedure,calls,p,important,whenever,you,override,this,method,call,the,parent,implementation,to,enable,rpc,processing,it,is,advised,to,make,the,parent,call,last,throws,exception,indicating,that,something,went,wrong,while,starting,the,rpc,endpoint;public,void,start,throws,exception,rpc,server,start
RpcEndpoint -> public void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1470854565;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;public void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutor) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;public,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executor,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> public void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1470932005;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;public void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutor) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;public,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executor,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> public void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1470935448;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;public void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutor) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;public,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executor,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> public void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1470940254;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;public void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutor) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;public,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executor,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> public void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit);1471530887;Execute the runnable in the main thread of the underlying RPC endpoint, with_a delay of the given number of milliseconds.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;public void scheduleRunAsync(Runnable runnable, long delay, TimeUnit unit) {_		((MainThreadExecutor) self).scheduleRunAsync(runnable, unit.toMillis(delay))__	};execute,the,runnable,in,the,main,thread,of,the,underlying,rpc,endpoint,with,a,delay,of,the,given,number,of,milliseconds,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;public,void,schedule,run,async,runnable,runnable,long,delay,time,unit,unit,main,thread,executor,self,schedule,run,async,runnable,unit,to,millis,delay
RpcEndpoint -> public void postStop() throws Exception;1501251235;User overridable callback.__<p>This method is called when the RpcEndpoint is being shut down. The method is guaranteed_to be executed in the main thread context and can be used to clean up internal state.__IMPORTANT: This method should never be called directly by the user.__@throws Exception if an error occurs. The exception is returned as result of the termination future.;public void postStop() throws Exception {};user,overridable,callback,p,this,method,is,called,when,the,rpc,endpoint,is,being,shut,down,the,method,is,guaranteed,to,be,executed,in,the,main,thread,context,and,can,be,used,to,clean,up,internal,state,important,this,method,should,never,be,called,directly,by,the,user,throws,exception,if,an,error,occurs,the,exception,is,returned,as,result,of,the,termination,future;public,void,post,stop,throws,exception
RpcEndpoint -> public void postStop() throws Exception;1501580028;User overridable callback.__<p>This method is called when the RpcEndpoint is being shut down. The method is guaranteed_to be executed in the main thread context and can be used to clean up internal state.__IMPORTANT: This method should never be called directly by the user.__@throws Exception if an error occurs. The exception is returned as result of the termination future.;public void postStop() throws Exception {};user,overridable,callback,p,this,method,is,called,when,the,rpc,endpoint,is,being,shut,down,the,method,is,guaranteed,to,be,executed,in,the,main,thread,context,and,can,be,used,to,clean,up,internal,state,important,this,method,should,never,be,called,directly,by,the,user,throws,exception,if,an,error,occurs,the,exception,is,returned,as,result,of,the,termination,future;public,void,post,stop,throws,exception
RpcEndpoint -> public void postStop() throws Exception;1502196227;User overridable callback.__<p>This method is called when the RpcEndpoint is being shut down. The method is guaranteed_to be executed in the main thread context and can be used to clean up internal state.__IMPORTANT: This method should never be called directly by the user.__@throws Exception if an error occurs. The exception is returned as result of the termination future.;public void postStop() throws Exception {};user,overridable,callback,p,this,method,is,called,when,the,rpc,endpoint,is,being,shut,down,the,method,is,guaranteed,to,be,executed,in,the,main,thread,context,and,can,be,used,to,clean,up,internal,state,important,this,method,should,never,be,called,directly,by,the,user,throws,exception,if,an,error,occurs,the,exception,is,returned,as,result,of,the,termination,future;public,void,post,stop,throws,exception
RpcEndpoint -> public void postStop() throws Exception;1503500935;User overridable callback.__<p>This method is called when the RpcEndpoint is being shut down. The method is guaranteed_to be executed in the main thread context and can be used to clean up internal state.__IMPORTANT: This method should never be called directly by the user.__@throws Exception if an error occurs. The exception is returned as result of the termination future.;public void postStop() throws Exception {};user,overridable,callback,p,this,method,is,called,when,the,rpc,endpoint,is,being,shut,down,the,method,is,guaranteed,to,be,executed,in,the,main,thread,context,and,can,be,used,to,clean,up,internal,state,important,this,method,should,never,be,called,directly,by,the,user,throws,exception,if,an,error,occurs,the,exception,is,returned,as,result,of,the,termination,future;public,void,post,stop,throws,exception
RpcEndpoint -> public void postStop() throws Exception;1506976152;User overridable callback.__<p>This method is called when the RpcEndpoint is being shut down. The method is guaranteed_to be executed in the main thread context and can be used to clean up internal state.__IMPORTANT: This method should never be called directly by the user.__@throws Exception if an error occurs. The exception is returned as result of the termination future.;public void postStop() throws Exception {};user,overridable,callback,p,this,method,is,called,when,the,rpc,endpoint,is,being,shut,down,the,method,is,guaranteed,to,be,executed,in,the,main,thread,context,and,can,be,used,to,clean,up,internal,state,important,this,method,should,never,be,called,directly,by,the,user,throws,exception,if,an,error,occurs,the,exception,is,returned,as,result,of,the,termination,future;public,void,post,stop,throws,exception
RpcEndpoint -> public void postStop() throws Exception;1518715341;User overridable callback.__<p>This method is called when the RpcEndpoint is being shut down. The method is guaranteed_to be executed in the main thread context and can be used to clean up internal state.__<p>IMPORTANT: This method should never be called directly by the user.__@throws Exception if an error occurs. The exception is returned as result of the termination future.;public void postStop() throws Exception {};user,overridable,callback,p,this,method,is,called,when,the,rpc,endpoint,is,being,shut,down,the,method,is,guaranteed,to,be,executed,in,the,main,thread,context,and,can,be,used,to,clean,up,internal,state,p,important,this,method,should,never,be,called,directly,by,the,user,throws,exception,if,an,error,occurs,the,exception,is,returned,as,result,of,the,termination,future;public,void,post,stop,throws,exception
RpcEndpoint -> public void postStop() throws Exception;1518716619;User overridable callback.__<p>This method is called when the RpcEndpoint is being shut down. The method is guaranteed_to be executed in the main thread context and can be used to clean up internal state.__IMPORTANT: This method should never be called directly by the user.__@throws Exception if an error occurs. The exception is returned as result of the termination future.;public void postStop() throws Exception {};user,overridable,callback,p,this,method,is,called,when,the,rpc,endpoint,is,being,shut,down,the,method,is,guaranteed,to,be,executed,in,the,main,thread,context,and,can,be,used,to,clean,up,internal,state,important,this,method,should,never,be,called,directly,by,the,user,throws,exception,if,an,error,occurs,the,exception,is,returned,as,result,of,the,termination,future;public,void,post,stop,throws,exception
RpcEndpoint -> public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout);1470245494;Execute the callable in the main thread of the underlying rpc server returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout) {_		return ((MainThreadExecutor) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,server,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;public,v,future,v,call,async,callable,v,callable,timeout,timeout,return,main,thread,executor,self,call,async,callable,timeout
RpcEndpoint -> public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout);1470846441;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout) {_		return ((MainThreadExecutor) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;public,v,future,v,call,async,callable,v,callable,timeout,timeout,return,main,thread,executor,self,call,async,callable,timeout
RpcEndpoint -> public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout);1470847346;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout) {_		return ((MainThreadExecutor) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;public,v,future,v,call,async,callable,v,callable,timeout,timeout,return,main,thread,executor,self,call,async,callable,timeout
RpcEndpoint -> public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout);1470854565;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout) {_		return ((MainThreadExecutor) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;public,v,future,v,call,async,callable,v,callable,timeout,timeout,return,main,thread,executor,self,call,async,callable,timeout
RpcEndpoint -> public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout);1470932005;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout) {_		return ((MainThreadExecutor) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;public,v,future,v,call,async,callable,v,callable,timeout,timeout,return,main,thread,executor,self,call,async,callable,timeout
RpcEndpoint -> public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout);1470935448;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout) {_		return ((MainThreadExecutor) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;public,v,future,v,call,async,callable,v,callable,timeout,timeout,return,main,thread,executor,self,call,async,callable,timeout
RpcEndpoint -> public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout);1470940254;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout) {_		return ((MainThreadExecutor) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;public,v,future,v,call,async,callable,v,callable,timeout,timeout,return,main,thread,executor,self,call,async,callable,timeout
RpcEndpoint -> public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout);1471530887;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;public <V> Future<V> callAsync(Callable<V> callable, Timeout timeout) {_		return ((MainThreadExecutor) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;public,v,future,v,call,async,callable,v,callable,timeout,timeout,return,main,thread,executor,self,call,async,callable,timeout
RpcEndpoint -> public Future<Void> getTerminationFuture();1474993062;Return a future which is completed when the rpc endpoint has been terminated.__@return Future which is completed when the rpc endpoint has been terminated.;public Future<Void> getTerminationFuture() {_		return ((SelfGateway)self).getTerminationFuture()__	};return,a,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,future,void,get,termination,future,return,self,gateway,self,get,termination,future
RpcEndpoint -> public Future<Void> getTerminationFuture();1476714136;Return a future which is completed when the rpc endpoint has been terminated.__@return Future which is completed when the rpc endpoint has been terminated.;public Future<Void> getTerminationFuture() {_		return ((SelfGateway)self).getTerminationFuture()__	};return,a,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,future,void,get,termination,future,return,self,gateway,self,get,termination,future
RpcEndpoint -> public Future<Void> getTerminationFuture();1477061494;Return a future which is completed when the rpc endpoint has been terminated.__@return Future which is completed when the rpc endpoint has been terminated.;public Future<Void> getTerminationFuture() {_		return ((SelfGateway)self).getTerminationFuture()__	};return,a,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,future,void,get,termination,future,return,self,gateway,self,get,termination,future
RpcEndpoint -> public Future<Void> getTerminationFuture();1490170142;Return a future which is completed when the rpc endpoint has been terminated.__@return Future which is completed when the rpc endpoint has been terminated.;public Future<Void> getTerminationFuture() {_		return ((SelfGateway)self).getTerminationFuture()__	};return,a,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,future,void,get,termination,future,return,self,gateway,self,get,termination,future
RpcEndpoint -> public Future<Void> getTerminationFuture();1495154056;Return a future which is completed when the rpc endpoint has been terminated.__@return Future which is completed when the rpc endpoint has been terminated.;public Future<Void> getTerminationFuture() {_		return ((SelfGateway)self).getTerminationFuture()__	};return,a,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,future,void,get,termination,future,return,self,gateway,self,get,termination,future
RpcEndpoint -> public Future<Void> getTerminationFuture();1501251235;Return a future which is completed when the rpc endpoint has been terminated.__@return Future which is completed when the rpc endpoint has been terminated.;public Future<Void> getTerminationFuture() {_		return ((SelfGateway)self).getTerminationFuture()__	};return,a,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,future,void,get,termination,future,return,self,gateway,self,get,termination,future
RpcEndpoint -> protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout);1501580028;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout) {_		return ((MainThreadExecutable) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,completable,future,v,call,async,callable,v,callable,time,timeout,return,main,thread,executable,self,call,async,callable,timeout
RpcEndpoint -> protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout);1502196227;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout) {_		return rpcServer.callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,completable,future,v,call,async,callable,v,callable,time,timeout,return,rpc,server,call,async,callable,timeout
RpcEndpoint -> protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout);1503500935;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout) {_		return rpcServer.callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,completable,future,v,call,async,callable,v,callable,time,timeout,return,rpc,server,call,async,callable,timeout
RpcEndpoint -> protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout);1506976152;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout) {_		return rpcServer.callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,completable,future,v,call,async,callable,v,callable,time,timeout,return,rpc,server,call,async,callable,timeout
RpcEndpoint -> protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout);1518715341;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout) {_		return rpcServer.callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,completable,future,v,call,async,callable,v,callable,time,timeout,return,rpc,server,call,async,callable,timeout
RpcEndpoint -> protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout);1518716619;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout) {_		return rpcServer.callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,completable,future,v,call,async,callable,v,callable,time,timeout,return,rpc,server,call,async,callable,timeout
RpcEndpoint -> protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout);1518718788;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout) {_		return rpcServer.callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,completable,future,v,call,async,callable,v,callable,time,timeout,return,rpc,server,call,async,callable,timeout
RpcEndpoint -> protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout);1543229263;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout) {_		return rpcServer.callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,completable,future,v,call,async,callable,v,callable,time,timeout,return,rpc,server,call,async,callable,timeout
RpcEndpoint -> protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout);1549467949;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout) {_		return rpcServer.callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,completable,future,v,call,async,callable,v,callable,time,timeout,return,rpc,server,call,async,callable,timeout
RpcEndpoint -> protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout);1549533702;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout) {_		return rpcServer.callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,completable,future,v,call,async,callable,v,callable,time,timeout,return,rpc,server,call,async,callable,timeout
RpcEndpoint -> protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout);1549983516;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> CompletableFuture<V> callAsync(Callable<V> callable, Time timeout) {_		return rpcServer.callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,completable,future,v,call,async,callable,v,callable,time,timeout,return,rpc,server,call,async,callable,timeout
RpcEndpoint -> @Override 	public String getAddress();1502196227;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;@Override_	public String getAddress() {_		return rpcServer.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;override,public,string,get,address,return,rpc,server,get,address
RpcEndpoint -> @Override 	public String getAddress();1503500935;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;@Override_	public String getAddress() {_		return rpcServer.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;override,public,string,get,address,return,rpc,server,get,address
RpcEndpoint -> @Override 	public String getAddress();1506976152;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;@Override_	public String getAddress() {_		return rpcServer.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;override,public,string,get,address,return,rpc,server,get,address
RpcEndpoint -> @Override 	public String getAddress();1518715341;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;@Override_	public String getAddress() {_		return rpcServer.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;override,public,string,get,address,return,rpc,server,get,address
RpcEndpoint -> @Override 	public String getAddress();1518716619;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;@Override_	public String getAddress() {_		return rpcServer.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;override,public,string,get,address,return,rpc,server,get,address
RpcEndpoint -> @Override 	public String getAddress();1518718788;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;@Override_	public String getAddress() {_		return rpcServer.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;override,public,string,get,address,return,rpc,server,get,address
RpcEndpoint -> @Override 	public String getAddress();1543229263;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;@Override_	public String getAddress() {_		return rpcServer.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;override,public,string,get,address,return,rpc,server,get,address
RpcEndpoint -> @Override 	public String getAddress();1549467949;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;@Override_	public String getAddress() {_		return rpcServer.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;override,public,string,get,address,return,rpc,server,get,address
RpcEndpoint -> @Override 	public String getAddress();1549533702;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;@Override_	public String getAddress() {_		return rpcServer.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;override,public,string,get,address,return,rpc,server,get,address
RpcEndpoint -> @Override 	public String getAddress();1549983516;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;@Override_	public String getAddress() {_		return rpcServer.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;override,public,string,get,address,return,rpc,server,get,address
RpcEndpoint -> public void shutDown();1470245494;Shuts down the underlying rpc server via the rpc service.__Can be overriden to add rpc endpoint specific shut down code. Should always call the parent_shut down method.;public void shutDown() {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,server,via,the,rpc,service,can,be,overriden,to,add,rpc,endpoint,specific,shut,down,code,should,always,call,the,parent,shut,down,method;public,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown();1470846441;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Timeout)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.;public void shutDown() {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,timeout,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method;public,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown();1470847346;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Timeout)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.;public void shutDown() {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,timeout,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method;public,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown();1470854565;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Timeout)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.;public void shutDown() {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,timeout,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method;public,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown();1470932005;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Timeout)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.;public void shutDown() {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,timeout,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method;public,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown();1470935448;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Timeout)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.;public void shutDown() {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,timeout,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method;public,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown();1470940254;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Timeout)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.;public void shutDown() {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,timeout,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method;public,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown();1471530887;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Timeout)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.;public void shutDown() {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,timeout,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method;public,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown();1472478599;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Timeout)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.;public void shutDown() {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,timeout,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method;public,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown();1474471581;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Time)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.;public void shutDown() {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,time,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method;public,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown();1474993062;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Time)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.;public void shutDown() {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,time,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method;public,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public void shutDown();1475059170;Shuts down the underlying RPC endpoint via the RPC service._After this method was called, the RPC endpoint will no longer be reachable, neither remotely,_not via its {@link #getSelf() self gateway}. It will also not accepts executions in main thread_any more (via {@link #callAsync(Callable, Time)} and {@link #runAsync(Runnable)}).__<p>This method can be overridden to add RPC endpoint specific shut down code._The overridden method should always call the parent shut down method.;public void shutDown() {_		rpcService.stopServer(self)__	};shuts,down,the,underlying,rpc,endpoint,via,the,rpc,service,after,this,method,was,called,the,rpc,endpoint,will,no,longer,be,reachable,neither,remotely,not,via,its,link,get,self,self,gateway,it,will,also,not,accepts,executions,in,main,thread,any,more,via,link,call,async,callable,time,and,link,run,async,runnable,p,this,method,can,be,overridden,to,add,rpc,endpoint,specific,shut,down,code,the,overridden,method,should,always,call,the,parent,shut,down,method;public,void,shut,down,rpc,service,stop,server,self
RpcEndpoint -> public String getAddress();1470245494;Gets the address of the underlying rpc server. The address should be fully qualified so that_a remote system can connect to this rpc server via this address.__@return Fully qualified address of the underlying rpc server;public String getAddress() {_		return rpcService.getAddress(self)__	};gets,the,address,of,the,underlying,rpc,server,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,server,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,server;public,string,get,address,return,rpc,service,get,address,self
RpcEndpoint -> public String getAddress();1470846441;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return selfAddress__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,address
RpcEndpoint -> public String getAddress();1470847346;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return selfAddress__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,address
RpcEndpoint -> public String getAddress();1470854565;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return selfAddress__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,address
RpcEndpoint -> public String getAddress();1470932005;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return selfAddress__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,address
RpcEndpoint -> public String getAddress();1470935448;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return selfAddress__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,address
RpcEndpoint -> public String getAddress();1470940254;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return selfAddress__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,address
RpcEndpoint -> public String getAddress();1471530887;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return self.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,get,address
RpcEndpoint -> public String getAddress();1472478599;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return self.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,get,address
RpcEndpoint -> public String getAddress();1474471581;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return self.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,get,address
RpcEndpoint -> public String getAddress();1474993062;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return self.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,get,address
RpcEndpoint -> public String getAddress();1475059170;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return self.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,get,address
RpcEndpoint -> public String getAddress();1476714136;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return self.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,get,address
RpcEndpoint -> public String getAddress();1477061494;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return self.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,get,address
RpcEndpoint -> public String getAddress();1490170142;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return self.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,get,address
RpcEndpoint -> public String getAddress();1495154056;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return self.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,get,address
RpcEndpoint -> public String getAddress();1501251235;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return self.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,get,address
RpcEndpoint -> public String getAddress();1501580028;Gets the address of the underlying RPC endpoint. The address should be fully qualified so that_a remote system can connect to this RPC endpoint via this address.__@return Fully qualified address of the underlying RPC endpoint;public String getAddress() {_		return self.getAddress()__	};gets,the,address,of,the,underlying,rpc,endpoint,the,address,should,be,fully,qualified,so,that,a,remote,system,can,connect,to,this,rpc,endpoint,via,this,address,return,fully,qualified,address,of,the,underlying,rpc,endpoint;public,string,get,address,return,self,get,address
RpcEndpoint -> public CompletableFuture<Void> getTerminationFuture();1501580028;Return a future which is completed when the rpc endpoint has been terminated.__@return Future which is completed when the rpc endpoint has been terminated.;public CompletableFuture<Void> getTerminationFuture() {_		return ((SelfGateway)self).getTerminationFuture()__	};return,a,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,completable,future,void,get,termination,future,return,self,gateway,self,get,termination,future
RpcEndpoint -> public CompletableFuture<Void> getTerminationFuture();1502196227;Return a future which is completed when the rpc endpoint has been terminated.__@return Future which is completed when the rpc endpoint has been terminated.;public CompletableFuture<Void> getTerminationFuture() {_		return rpcServer.getTerminationFuture()__	};return,a,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,completable,future,void,get,termination,future,return,rpc,server,get,termination,future
RpcEndpoint -> public CompletableFuture<Void> getTerminationFuture();1503500935;Return a future which is completed when the rpc endpoint has been terminated.__@return Future which is completed when the rpc endpoint has been terminated.;public CompletableFuture<Void> getTerminationFuture() {_		return rpcServer.getTerminationFuture()__	};return,a,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,completable,future,void,get,termination,future,return,rpc,server,get,termination,future
RpcEndpoint -> public CompletableFuture<Void> getTerminationFuture();1518715341;Return a future which is completed with true when the rpc endpoint has been terminated._In case of a failure, this future is completed with the occurring exception.__@return Future which is completed when the rpc endpoint has been terminated.;public CompletableFuture<Void> getTerminationFuture() {_		return rpcServer.getTerminationFuture()__	};return,a,future,which,is,completed,with,true,when,the,rpc,endpoint,has,been,terminated,in,case,of,a,failure,this,future,is,completed,with,the,occurring,exception,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,completable,future,void,get,termination,future,return,rpc,server,get,termination,future
RpcEndpoint -> public CompletableFuture<Void> getTerminationFuture();1518716619;Return a future which is completed with true when the rpc endpoint has been terminated._In case of a failure, this future is completed with the occurring exception.__@return Future which is completed when the rpc endpoint has been terminated.;public CompletableFuture<Void> getTerminationFuture() {_		return rpcServer.getTerminationFuture()__	};return,a,future,which,is,completed,with,true,when,the,rpc,endpoint,has,been,terminated,in,case,of,a,failure,this,future,is,completed,with,the,occurring,exception,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,completable,future,void,get,termination,future,return,rpc,server,get,termination,future
RpcEndpoint -> public CompletableFuture<Void> getTerminationFuture();1518718788;Return a future which is completed with true when the rpc endpoint has been terminated._In case of a failure, this future is completed with the occurring exception.__@return Future which is completed when the rpc endpoint has been terminated.;public CompletableFuture<Void> getTerminationFuture() {_		return rpcServer.getTerminationFuture()__	};return,a,future,which,is,completed,with,true,when,the,rpc,endpoint,has,been,terminated,in,case,of,a,failure,this,future,is,completed,with,the,occurring,exception,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,completable,future,void,get,termination,future,return,rpc,server,get,termination,future
RpcEndpoint -> public CompletableFuture<Void> getTerminationFuture();1543229263;Return a future which is completed with true when the rpc endpoint has been terminated._In case of a failure, this future is completed with the occurring exception.__@return Future which is completed when the rpc endpoint has been terminated.;public CompletableFuture<Void> getTerminationFuture() {_		return rpcServer.getTerminationFuture()__	};return,a,future,which,is,completed,with,true,when,the,rpc,endpoint,has,been,terminated,in,case,of,a,failure,this,future,is,completed,with,the,occurring,exception,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,completable,future,void,get,termination,future,return,rpc,server,get,termination,future
RpcEndpoint -> public CompletableFuture<Void> getTerminationFuture();1549467949;Return a future which is completed with true when the rpc endpoint has been terminated._In case of a failure, this future is completed with the occurring exception.__@return Future which is completed when the rpc endpoint has been terminated.;public CompletableFuture<Void> getTerminationFuture() {_		return rpcServer.getTerminationFuture()__	};return,a,future,which,is,completed,with,true,when,the,rpc,endpoint,has,been,terminated,in,case,of,a,failure,this,future,is,completed,with,the,occurring,exception,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,completable,future,void,get,termination,future,return,rpc,server,get,termination,future
RpcEndpoint -> public CompletableFuture<Void> getTerminationFuture();1549533702;Return a future which is completed with true when the rpc endpoint has been terminated._In case of a failure, this future is completed with the occurring exception.__@return Future which is completed when the rpc endpoint has been terminated.;public CompletableFuture<Void> getTerminationFuture() {_		return rpcServer.getTerminationFuture()__	};return,a,future,which,is,completed,with,true,when,the,rpc,endpoint,has,been,terminated,in,case,of,a,failure,this,future,is,completed,with,the,occurring,exception,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,completable,future,void,get,termination,future,return,rpc,server,get,termination,future
RpcEndpoint -> public CompletableFuture<Void> getTerminationFuture();1549983516;Return a future which is completed with true when the rpc endpoint has been terminated._In case of a failure, this future is completed with the occurring exception.__@return Future which is completed when the rpc endpoint has been terminated.;public CompletableFuture<Void> getTerminationFuture() {_		return rpcServer.getTerminationFuture()__	};return,a,future,which,is,completed,with,true,when,the,rpc,endpoint,has,been,terminated,in,case,of,a,failure,this,future,is,completed,with,the,occurring,exception,return,future,which,is,completed,when,the,rpc,endpoint,has,been,terminated;public,completable,future,void,get,termination,future,return,rpc,server,get,termination,future
RpcEndpoint -> protected <V> Future<V> callAsync(Callable<V> callable, Time timeout);1474471581;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> Future<V> callAsync(Callable<V> callable, Time timeout) {_		return ((MainThreadExecutable) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,future,v,call,async,callable,v,callable,time,timeout,return,main,thread,executable,self,call,async,callable,timeout
RpcEndpoint -> protected <V> Future<V> callAsync(Callable<V> callable, Time timeout);1474993062;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> Future<V> callAsync(Callable<V> callable, Time timeout) {_		return ((MainThreadExecutable) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,future,v,call,async,callable,v,callable,time,timeout,return,main,thread,executable,self,call,async,callable,timeout
RpcEndpoint -> protected <V> Future<V> callAsync(Callable<V> callable, Time timeout);1475059170;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> Future<V> callAsync(Callable<V> callable, Time timeout) {_		return ((MainThreadExecutable) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,future,v,call,async,callable,v,callable,time,timeout,return,main,thread,executable,self,call,async,callable,timeout
RpcEndpoint -> protected <V> Future<V> callAsync(Callable<V> callable, Time timeout);1476714136;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> Future<V> callAsync(Callable<V> callable, Time timeout) {_		return ((MainThreadExecutable) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,future,v,call,async,callable,v,callable,time,timeout,return,main,thread,executable,self,call,async,callable,timeout
RpcEndpoint -> protected <V> Future<V> callAsync(Callable<V> callable, Time timeout);1477061494;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> Future<V> callAsync(Callable<V> callable, Time timeout) {_		return ((MainThreadExecutable) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,future,v,call,async,callable,v,callable,time,timeout,return,main,thread,executable,self,call,async,callable,timeout
RpcEndpoint -> protected <V> Future<V> callAsync(Callable<V> callable, Time timeout);1490170142;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> Future<V> callAsync(Callable<V> callable, Time timeout) {_		return ((MainThreadExecutable) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,future,v,call,async,callable,v,callable,time,timeout,return,main,thread,executable,self,call,async,callable,timeout
RpcEndpoint -> protected <V> Future<V> callAsync(Callable<V> callable, Time timeout);1495154056;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> Future<V> callAsync(Callable<V> callable, Time timeout) {_		return ((MainThreadExecutable) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,future,v,call,async,callable,v,callable,time,timeout,return,main,thread,executable,self,call,async,callable,timeout
RpcEndpoint -> protected <V> Future<V> callAsync(Callable<V> callable, Time timeout);1501251235;Execute the callable in the main thread of the underlying RPC service, returning a future for_the result of the callable. If the callable is not completed within the given timeout, then_the future will be failed with a {@link java.util.concurrent.TimeoutException}.__@param callable Callable to be executed in the main thread of the underlying rpc server_@param timeout Timeout for the callable to be completed_@param <V> Return type of the callable_@return Future for the result of the callable.;protected <V> Future<V> callAsync(Callable<V> callable, Time timeout) {_		return ((MainThreadExecutable) self).callAsync(callable, timeout)__	};execute,the,callable,in,the,main,thread,of,the,underlying,rpc,service,returning,a,future,for,the,result,of,the,callable,if,the,callable,is,not,completed,within,the,given,timeout,then,the,future,will,be,failed,with,a,link,java,util,concurrent,timeout,exception,param,callable,callable,to,be,executed,in,the,main,thread,of,the,underlying,rpc,server,param,timeout,timeout,for,the,callable,to,be,completed,param,v,return,type,of,the,callable,return,future,for,the,result,of,the,callable;protected,v,future,v,call,async,callable,v,callable,time,timeout,return,main,thread,executable,self,call,async,callable,timeout
RpcEndpoint -> protected final void stop();1502196227;Stops the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is_no longer ready to process remote procedure calls.;protected final void stop() {_		rpcServer.stop()__	};stops,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,no,longer,ready,to,process,remote,procedure,calls;protected,final,void,stop,rpc,server,stop
RpcEndpoint -> protected final void stop();1503500935;Stops the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is_no longer ready to process remote procedure calls.;protected final void stop() {_		rpcServer.stop()__	};stops,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,no,longer,ready,to,process,remote,procedure,calls;protected,final,void,stop,rpc,server,stop
RpcEndpoint -> protected final void stop();1506976152;Stops the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is_no longer ready to process remote procedure calls.;protected final void stop() {_		rpcServer.stop()__	};stops,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,no,longer,ready,to,process,remote,procedure,calls;protected,final,void,stop,rpc,server,stop
RpcEndpoint -> protected final void stop();1518715341;Stops the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is_no longer ready to process remote procedure calls.;protected final void stop() {_		rpcServer.stop()__	};stops,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,no,longer,ready,to,process,remote,procedure,calls;protected,final,void,stop,rpc,server,stop
RpcEndpoint -> protected final void stop();1518716619;Stops the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is_no longer ready to process remote procedure calls.;protected final void stop() {_		rpcServer.stop()__	};stops,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,no,longer,ready,to,process,remote,procedure,calls;protected,final,void,stop,rpc,server,stop
RpcEndpoint -> protected final void stop();1518718788;Stops the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is_no longer ready to process remote procedure calls.;protected final void stop() {_		rpcServer.stop()__	};stops,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,no,longer,ready,to,process,remote,procedure,calls;protected,final,void,stop,rpc,server,stop
RpcEndpoint -> protected final void stop();1543229263;Stops the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is_no longer ready to process remote procedure calls.;protected final void stop() {_		rpcServer.stop()__	};stops,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,no,longer,ready,to,process,remote,procedure,calls;protected,final,void,stop,rpc,server,stop
RpcEndpoint -> protected final void stop();1549467949;Stops the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is_no longer ready to process remote procedure calls.;protected final void stop() {_		rpcServer.stop()__	};stops,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,no,longer,ready,to,process,remote,procedure,calls;protected,final,void,stop,rpc,server,stop
RpcEndpoint -> protected final void stop();1549533702;Stops the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is_no longer ready to process remote procedure calls.;protected final void stop() {_		rpcServer.stop()__	};stops,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,no,longer,ready,to,process,remote,procedure,calls;protected,final,void,stop,rpc,server,stop
RpcEndpoint -> protected final void stop();1549983516;Stops the rpc endpoint. This tells the underlying rpc server that the rpc endpoint is_no longer ready to process remote procedure calls.;protected final void stop() {_		rpcServer.stop()__	};stops,the,rpc,endpoint,this,tells,the,underlying,rpc,server,that,the,rpc,endpoint,is,no,longer,ready,to,process,remote,procedure,calls;protected,final,void,stop,rpc,server,stop
RpcEndpoint -> protected MainThreadExecutor getMainThreadExecutor();1503500935;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected MainThreadExecutor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,main,thread,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected MainThreadExecutor getMainThreadExecutor();1506976152;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected MainThreadExecutor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,main,thread,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected MainThreadExecutor getMainThreadExecutor();1518715341;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected MainThreadExecutor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,main,thread,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected MainThreadExecutor getMainThreadExecutor();1518716619;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected MainThreadExecutor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,main,thread,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected MainThreadExecutor getMainThreadExecutor();1518718788;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected MainThreadExecutor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,main,thread,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected MainThreadExecutor getMainThreadExecutor();1543229263;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected MainThreadExecutor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,main,thread,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected MainThreadExecutor getMainThreadExecutor();1549467949;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected MainThreadExecutor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,main,thread,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected MainThreadExecutor getMainThreadExecutor();1549533702;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected MainThreadExecutor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,main,thread,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected MainThreadExecutor getMainThreadExecutor();1549983516;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected MainThreadExecutor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,main,thread,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected Executor getMainThreadExecutor();1474471581;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected Executor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected Executor getMainThreadExecutor();1474993062;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected Executor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected Executor getMainThreadExecutor();1475059170;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected Executor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected Executor getMainThreadExecutor();1476714136;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected Executor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected Executor getMainThreadExecutor();1477061494;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected Executor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected Executor getMainThreadExecutor();1490170142;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected Executor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected Executor getMainThreadExecutor();1495154056;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected Executor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected Executor getMainThreadExecutor();1501251235;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected Executor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected Executor getMainThreadExecutor();1501580028;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected Executor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> protected Executor getMainThreadExecutor();1502196227;Gets the main thread execution context. The main thread execution context can be used to_execute tasks in the main thread of the underlying RPC endpoint.__@return Main thread execution context;protected Executor getMainThreadExecutor() {_		return mainThreadExecutor__	};gets,the,main,thread,execution,context,the,main,thread,execution,context,can,be,used,to,execute,tasks,in,the,main,thread,of,the,underlying,rpc,endpoint,return,main,thread,execution,context;protected,executor,get,main,thread,executor,return,main,thread,executor
RpcEndpoint -> public String getEndpointId();1490170142;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> public String getEndpointId();1495154056;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> public String getEndpointId();1501251235;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> public String getEndpointId();1501580028;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> public String getEndpointId();1502196227;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> public String getEndpointId();1503500935;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> public String getEndpointId();1506976152;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> public String getEndpointId();1518715341;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> public String getEndpointId();1518716619;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> public String getEndpointId();1518718788;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> public String getEndpointId();1543229263;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> public String getEndpointId();1549467949;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> public String getEndpointId();1549533702;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> public String getEndpointId();1549983516;Returns the rpc endpoint's identifier.__@return Rpc endpoint's identifier.;public String getEndpointId() {_		return endpointId__	};returns,the,rpc,endpoint,s,identifier,return,rpc,endpoint,s,identifier;public,string,get,endpoint,id,return,endpoint,id
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1470847346;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this.rpcService = checkNotNull(rpcService, "rpcService")___		_		_		this.selfGatewayType = ReflectionUtil.getTemplateType1(getClass())__		this.self = rpcService.startServer(this)__		_		this.selfAddress = rpcService.getAddress(self)__		this.mainThreadExecutionContext = new MainThreadExecutionContext((MainThreadExecutor) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,check,not,null,rpc,service,rpc,service,this,self,gateway,type,reflection,util,get,template,type1,get,class,this,self,rpc,service,start,server,this,this,self,address,rpc,service,get,address,self,this,main,thread,execution,context,new,main,thread,execution,context,main,thread,executor,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1470854565;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this.rpcService = checkNotNull(rpcService, "rpcService")___		_		_		this.selfGatewayType = ReflectionUtil.getTemplateType1(getClass())__		this.self = rpcService.startServer(this)__		_		this.selfAddress = rpcService.getAddress(self)__		this.mainThreadExecutionContext = new MainThreadExecutionContext((MainThreadExecutor) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,check,not,null,rpc,service,rpc,service,this,self,gateway,type,reflection,util,get,template,type1,get,class,this,self,rpc,service,start,server,this,this,self,address,rpc,service,get,address,self,this,main,thread,execution,context,new,main,thread,execution,context,main,thread,executor,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1470932005;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this.rpcService = checkNotNull(rpcService, "rpcService")___		_		_		this.selfGatewayType = ReflectionUtil.getTemplateType1(getClass())__		this.self = rpcService.startServer(this)__		_		this.selfAddress = rpcService.getAddress(self)__		this.mainThreadExecutionContext = new MainThreadExecutionContext((MainThreadExecutor) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,check,not,null,rpc,service,rpc,service,this,self,gateway,type,reflection,util,get,template,type1,get,class,this,self,rpc,service,start,server,this,this,self,address,rpc,service,get,address,self,this,main,thread,execution,context,new,main,thread,execution,context,main,thread,executor,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1470935448;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this.rpcService = checkNotNull(rpcService, "rpcService")___		_		_		this.selfGatewayType = ReflectionUtil.getTemplateType1(getClass())__		this.self = rpcService.startServer(this)__		_		this.selfAddress = rpcService.getAddress(self)__		this.mainThreadExecutionContext = new MainThreadExecutionContext((MainThreadExecutor) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,check,not,null,rpc,service,rpc,service,this,self,gateway,type,reflection,util,get,template,type1,get,class,this,self,rpc,service,start,server,this,this,self,address,rpc,service,get,address,self,this,main,thread,execution,context,new,main,thread,execution,context,main,thread,executor,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1470940254;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this.rpcService = checkNotNull(rpcService, "rpcService")___		_		_		this.selfGatewayType = ReflectionUtil.getTemplateType1(getClass())__		this.self = rpcService.startServer(this)__		_		this.selfAddress = rpcService.getAddress(self)__		this.mainThreadExecutionContext = new MainThreadExecutionContext((MainThreadExecutor) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,check,not,null,rpc,service,rpc,service,this,self,gateway,type,reflection,util,get,template,type1,get,class,this,self,rpc,service,start,server,this,this,self,address,rpc,service,get,address,self,this,main,thread,execution,context,new,main,thread,execution,context,main,thread,executor,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1471530887;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this.rpcService = checkNotNull(rpcService, "rpcService")___		_		_		this.selfGatewayType = ReflectionUtil.getTemplateType1(getClass())__		this.self = rpcService.startServer(this)__		_		this.mainThreadExecutionContext = new MainThreadExecutionContext((MainThreadExecutor) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,check,not,null,rpc,service,rpc,service,this,self,gateway,type,reflection,util,get,template,type1,get,class,this,self,rpc,service,start,server,this,this,main,thread,execution,context,new,main,thread,execution,context,main,thread,executor,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1472478599;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this.rpcService = checkNotNull(rpcService, "rpcService")___		_		_		this.selfGatewayType = ReflectionUtil.getTemplateType1(getClass())__		this.self = rpcService.startServer(this)__		_		this.mainThreadExecutionContext = new MainThreadExecutionContext((MainThreadExecutor) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,check,not,null,rpc,service,rpc,service,this,self,gateway,type,reflection,util,get,template,type1,get,class,this,self,rpc,service,start,server,this,this,main,thread,execution,context,new,main,thread,execution,context,main,thread,executor,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1474471581;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this.rpcService = checkNotNull(rpcService, "rpcService")___		_		_		this.selfGatewayType = ReflectionUtil.getTemplateType1(getClass())__		this.self = rpcService.startServer(this)__		_		this.mainThreadExecutor = new MainThreadExecutor((MainThreadExecutable) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,check,not,null,rpc,service,rpc,service,this,self,gateway,type,reflection,util,get,template,type1,get,class,this,self,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,main,thread,executable,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1474993062;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this.rpcService = checkNotNull(rpcService, "rpcService")___		_		_		this.selfGatewayType = determineSelfGatewayType()__		this.self = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor((MainThreadExecutable) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,check,not,null,rpc,service,rpc,service,this,self,gateway,type,determine,self,gateway,type,this,self,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,main,thread,executable,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1475059170;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this.rpcService = checkNotNull(rpcService, "rpcService")___		_		_		this.selfGatewayType = determineSelfGatewayType()__		this.self = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor((MainThreadExecutable) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,check,not,null,rpc,service,rpc,service,this,self,gateway,type,determine,self,gateway,type,this,self,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,main,thread,executable,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1476714136;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this.rpcService = checkNotNull(rpcService, "rpcService")___		_		_		this.selfGatewayType = determineSelfGatewayType()__		this.self = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor((MainThreadExecutable) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,check,not,null,rpc,service,rpc,service,this,self,gateway,type,determine,self,gateway,type,this,self,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,main,thread,executable,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1477061494;Initializes the RPC endpoint.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this.rpcService = checkNotNull(rpcService, "rpcService")___		_		_		this.selfGatewayType = determineSelfGatewayType()__		this.self = rpcService.startServer(this)___		this.mainThreadExecutor = new MainThreadExecutor((MainThreadExecutable) self)__	};initializes,the,rpc,endpoint,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,check,not,null,rpc,service,rpc,service,this,self,gateway,type,determine,self,gateway,type,this,self,rpc,service,start,server,this,this,main,thread,executor,new,main,thread,executor,main,thread,executable,self
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1490170142;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1495154056;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1501251235;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1501580028;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1502196227;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1503500935;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1506976152;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1518715341;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1518716619;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1518718788;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1543229263;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1549467949;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1549533702;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
RpcEndpoint -> protected RpcEndpoint(final RpcService rpcService);1549983516;Initializes the RPC endpoint with a random endpoint id.__@param rpcService The RPC server that dispatches calls to this RPC endpoint.;protected RpcEndpoint(final RpcService rpcService) {_		this(rpcService, UUID.randomUUID().toString())__	};initializes,the,rpc,endpoint,with,a,random,endpoint,id,param,rpc,service,the,rpc,server,that,dispatches,calls,to,this,rpc,endpoint;protected,rpc,endpoint,final,rpc,service,rpc,service,this,rpc,service,uuid,random,uuid,to,string
