# id;timestamp;commentText;codeText;commentWords;codeWords
ResultSubpartition -> protected void increaseBuffersInBacklog(BufferConsumer buffer);1516267728;Increases the number of non-event buffers by one after adding a non-event_buffer into this subpartition.;protected void increaseBuffersInBacklog(BufferConsumer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog++__		}_	};increases,the,number,of,non,event,buffers,by,one,after,adding,a,non,event,buffer,into,this,subpartition;protected,void,increase,buffers,in,backlog,buffer,consumer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
ResultSubpartition -> protected void increaseBuffersInBacklog(BufferConsumer buffer);1516801403;Increases the number of non-event buffers by one after adding a non-event_buffer into this subpartition.;protected void increaseBuffersInBacklog(BufferConsumer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog++__		}_	};increases,the,number,of,non,event,buffers,by,one,after,adding,a,non,event,buffer,into,this,subpartition;protected,void,increase,buffers,in,backlog,buffer,consumer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
ResultSubpartition -> protected void increaseBuffersInBacklog(BufferConsumer buffer);1516890661;Increases the number of non-event buffers by one after adding a non-event_buffer into this subpartition.;protected void increaseBuffersInBacklog(BufferConsumer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog++__		}_	};increases,the,number,of,non,event,buffers,by,one,after,adding,a,non,event,buffer,into,this,subpartition;protected,void,increase,buffers,in,backlog,buffer,consumer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
ResultSubpartition -> protected void increaseBuffersInBacklog(BufferConsumer buffer);1536830955;Increases the number of non-event buffers by one after adding a non-event_buffer into this subpartition.;protected void increaseBuffersInBacklog(BufferConsumer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog++__		}_	};increases,the,number,of,non,event,buffers,by,one,after,adding,a,non,event,buffer,into,this,subpartition;protected,void,increase,buffers,in,backlog,buffer,consumer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
ResultSubpartition -> public int decreaseBuffersInBacklog(Buffer buffer);1516267728;Decreases the number of non-event buffers by one after fetching a non-event_buffer from this subpartition (for access by the subpartition views).__@return backlog after the operation;public int decreaseBuffersInBacklog(Buffer buffer) {_		synchronized (buffers) {_			return decreaseBuffersInBacklogUnsafe(buffer != null && buffer.isBuffer())__		}_	};decreases,the,number,of,non,event,buffers,by,one,after,fetching,a,non,event,buffer,from,this,subpartition,for,access,by,the,subpartition,views,return,backlog,after,the,operation;public,int,decrease,buffers,in,backlog,buffer,buffer,synchronized,buffers,return,decrease,buffers,in,backlog,unsafe,buffer,null,buffer,is,buffer
ResultSubpartition -> public int decreaseBuffersInBacklog(Buffer buffer);1516273755;Decreases the number of non-event buffers by one after fetching a non-event_buffer from this subpartition (for access by the subpartition views).__@return backlog after the operation;public int decreaseBuffersInBacklog(Buffer buffer) {_		synchronized (buffers) {_			return decreaseBuffersInBacklogUnsafe(buffer)__		}_	};decreases,the,number,of,non,event,buffers,by,one,after,fetching,a,non,event,buffer,from,this,subpartition,for,access,by,the,subpartition,views,return,backlog,after,the,operation;public,int,decrease,buffers,in,backlog,buffer,buffer,synchronized,buffers,return,decrease,buffers,in,backlog,unsafe,buffer
ResultSubpartition -> public int decreaseBuffersInBacklog(Buffer buffer);1516801403;Decreases the number of non-event buffers by one after fetching a non-event_buffer from this subpartition (for access by the subpartition views).__@return backlog after the operation;public int decreaseBuffersInBacklog(Buffer buffer) {_		synchronized (buffers) {_			return decreaseBuffersInBacklogUnsafe(buffer != null && buffer.isBuffer())__		}_	};decreases,the,number,of,non,event,buffers,by,one,after,fetching,a,non,event,buffer,from,this,subpartition,for,access,by,the,subpartition,views,return,backlog,after,the,operation;public,int,decrease,buffers,in,backlog,buffer,buffer,synchronized,buffers,return,decrease,buffers,in,backlog,unsafe,buffer,null,buffer,is,buffer
ResultSubpartition -> public int decreaseBuffersInBacklog(Buffer buffer);1516890661;Decreases the number of non-event buffers by one after fetching a non-event_buffer from this subpartition (for access by the subpartition views).__@return backlog after the operation;public int decreaseBuffersInBacklog(Buffer buffer) {_		synchronized (buffers) {_			return decreaseBuffersInBacklogUnsafe(buffer != null && buffer.isBuffer())__		}_	};decreases,the,number,of,non,event,buffers,by,one,after,fetching,a,non,event,buffer,from,this,subpartition,for,access,by,the,subpartition,views,return,backlog,after,the,operation;public,int,decrease,buffers,in,backlog,buffer,buffer,synchronized,buffers,return,decrease,buffers,in,backlog,unsafe,buffer,null,buffer,is,buffer
ResultSubpartition -> public int decreaseBuffersInBacklog(Buffer buffer);1536830955;Decreases the number of non-event buffers by one after fetching a non-event_buffer from this subpartition (for access by the subpartition views).__@return backlog after the operation;public int decreaseBuffersInBacklog(Buffer buffer) {_		synchronized (buffers) {_			return decreaseBuffersInBacklogUnsafe(buffer != null && buffer.isBuffer())__		}_	};decreases,the,number,of,non,event,buffers,by,one,after,fetching,a,non,event,buffer,from,this,subpartition,for,access,by,the,subpartition,views,return,backlog,after,the,operation;public,int,decrease,buffers,in,backlog,buffer,buffer,synchronized,buffers,return,decrease,buffers,in,backlog,unsafe,buffer,null,buffer,is,buffer
ResultSubpartition -> @VisibleForTesting 	abstract public int getBuffersInBacklog()_;1502969925;Gets the number of non-event buffers in this subpartition.__<p><strong>Beware:</strong> This method should only be used in tests in non-concurrent access_scenarios since it does not make any concurrency guarantees.;@VisibleForTesting_	abstract public int getBuffersInBacklog()_;gets,the,number,of,non,event,buffers,in,this,subpartition,p,strong,beware,strong,this,method,should,only,be,used,in,tests,in,non,concurrent,access,scenarios,since,it,does,not,make,any,concurrency,guarantees;visible,for,testing,abstract,public,int,get,buffers,in,backlog
ResultSubpartition -> @VisibleForTesting 	abstract public int getBuffersInBacklog()_;1506753379;Gets the number of non-event buffers in this subpartition.__<p><strong>Beware:</strong> This method should only be used in tests in non-concurrent access_scenarios since it does not make any concurrency guarantees.;@VisibleForTesting_	abstract public int getBuffersInBacklog()_;gets,the,number,of,non,event,buffers,in,this,subpartition,p,strong,beware,strong,this,method,should,only,be,used,in,tests,in,non,concurrent,access,scenarios,since,it,does,not,make,any,concurrency,guarantees;visible,for,testing,abstract,public,int,get,buffers,in,backlog
ResultSubpartition -> abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;1479407816;Makes a best effort to get the current size of the queue._This method must not acquire locks or interfere with the task and network threads in_any way.;abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;makes,a,best,effort,to,get,the,current,size,of,the,queue,this,method,must,not,acquire,locks,or,interfere,with,the,task,and,network,threads,in,any,way;abstract,public,int,unsynchronized,get,number,of,queued,buffers
ResultSubpartition -> abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;1493194734;Makes a best effort to get the current size of the queue._This method must not acquire locks or interfere with the task and network threads in_any way.;abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;makes,a,best,effort,to,get,the,current,size,of,the,queue,this,method,must,not,acquire,locks,or,interfere,with,the,task,and,network,threads,in,any,way;abstract,public,int,unsynchronized,get,number,of,queued,buffers
ResultSubpartition -> abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;1502969925;Makes a best effort to get the current size of the queue._This method must not acquire locks or interfere with the task and network threads in_any way.;abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;makes,a,best,effort,to,get,the,current,size,of,the,queue,this,method,must,not,acquire,locks,or,interfere,with,the,task,and,network,threads,in,any,way;abstract,public,int,unsynchronized,get,number,of,queued,buffers
ResultSubpartition -> abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;1506753379;Makes a best effort to get the current size of the queue._This method must not acquire locks or interfere with the task and network threads in_any way.;abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;makes,a,best,effort,to,get,the,current,size,of,the,queue,this,method,must,not,acquire,locks,or,interfere,with,the,task,and,network,threads,in,any,way;abstract,public,int,unsynchronized,get,number,of,queued,buffers
ResultSubpartition -> abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;1511445501;Makes a best effort to get the current size of the queue._This method must not acquire locks or interfere with the task and network threads in_any way.;abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;makes,a,best,effort,to,get,the,current,size,of,the,queue,this,method,must,not,acquire,locks,or,interfere,with,the,task,and,network,threads,in,any,way;abstract,public,int,unsynchronized,get,number,of,queued,buffers
ResultSubpartition -> abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;1516267728;Makes a best effort to get the current size of the queue._This method must not acquire locks or interfere with the task and network threads in_any way.;abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;makes,a,best,effort,to,get,the,current,size,of,the,queue,this,method,must,not,acquire,locks,or,interfere,with,the,task,and,network,threads,in,any,way;abstract,public,int,unsynchronized,get,number,of,queued,buffers
ResultSubpartition -> abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;1516273755;Makes a best effort to get the current size of the queue._This method must not acquire locks or interfere with the task and network threads in_any way.;abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;makes,a,best,effort,to,get,the,current,size,of,the,queue,this,method,must,not,acquire,locks,or,interfere,with,the,task,and,network,threads,in,any,way;abstract,public,int,unsynchronized,get,number,of,queued,buffers
ResultSubpartition -> abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;1516801403;Makes a best effort to get the current size of the queue._This method must not acquire locks or interfere with the task and network threads in_any way.;abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;makes,a,best,effort,to,get,the,current,size,of,the,queue,this,method,must,not,acquire,locks,or,interfere,with,the,task,and,network,threads,in,any,way;abstract,public,int,unsynchronized,get,number,of,queued,buffers
ResultSubpartition -> abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;1516890661;Makes a best effort to get the current size of the queue._This method must not acquire locks or interfere with the task and network threads in_any way.;abstract public int unsynchronizedGetNumberOfQueuedBuffers()_;makes,a,best,effort,to,get,the,current,size,of,the,queue,this,method,must,not,acquire,locks,or,interfere,with,the,task,and,network,threads,in,any,way;abstract,public,int,unsynchronized,get,number,of,queued,buffers
ResultSubpartition -> abstract public boolean add(Buffer buffer) throws IOException_;1502969925;Adds the given buffer.__<p>The request may be executed synchronously, or asynchronously, depending on the_implementation.__@param buffer_the buffer to add (transferring ownership to this writer)__@throws IOException_thrown in case of errors while adding the buffer;abstract public boolean add(Buffer buffer) throws IOException_;adds,the,given,buffer,p,the,request,may,be,executed,synchronously,or,asynchronously,depending,on,the,implementation,param,buffer,the,buffer,to,add,transferring,ownership,to,this,writer,throws,ioexception,thrown,in,case,of,errors,while,adding,the,buffer;abstract,public,boolean,add,buffer,buffer,throws,ioexception
ResultSubpartition -> abstract public boolean add(Buffer buffer) throws IOException_;1506753379;Adds the given buffer.__<p>The request may be executed synchronously, or asynchronously, depending on the_implementation.__@param buffer_the buffer to add (transferring ownership to this writer)__@throws IOException_thrown in case of errors while adding the buffer;abstract public boolean add(Buffer buffer) throws IOException_;adds,the,given,buffer,p,the,request,may,be,executed,synchronously,or,asynchronously,depending,on,the,implementation,param,buffer,the,buffer,to,add,transferring,ownership,to,this,writer,throws,ioexception,thrown,in,case,of,errors,while,adding,the,buffer;abstract,public,boolean,add,buffer,buffer,throws,ioexception
ResultSubpartition -> abstract public boolean add(Buffer buffer) throws IOException_;1511445501;Adds the given buffer.__<p>The request may be executed synchronously, or asynchronously, depending on the_implementation.__@param buffer_the buffer to add (transferring ownership to this writer)__@throws IOException_thrown in case of errors while adding the buffer;abstract public boolean add(Buffer buffer) throws IOException_;adds,the,given,buffer,p,the,request,may,be,executed,synchronously,or,asynchronously,depending,on,the,implementation,param,buffer,the,buffer,to,add,transferring,ownership,to,this,writer,throws,ioexception,thrown,in,case,of,errors,while,adding,the,buffer;abstract,public,boolean,add,buffer,buffer,throws,ioexception
ResultSubpartition -> abstract public boolean add(Buffer buffer) throws IOException_;1516273755;Adds the given buffer.__<p>The request may be executed synchronously, or asynchronously, depending on the_implementation.__@param buffer_the buffer to add (transferring ownership to this writer)__@throws IOException_thrown in case of errors while adding the buffer;abstract public boolean add(Buffer buffer) throws IOException_;adds,the,given,buffer,p,the,request,may,be,executed,synchronously,or,asynchronously,depending,on,the,implementation,param,buffer,the,buffer,to,add,transferring,ownership,to,this,writer,throws,ioexception,thrown,in,case,of,errors,while,adding,the,buffer;abstract,public,boolean,add,buffer,buffer,throws,ioexception
ResultSubpartition -> protected void onConsumedSubpartition();1420560668;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1427278828;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1432817911;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1439212507;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1477468111;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1479407816;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1480323569;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1493194734;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1502969925;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1506753379;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1511445501;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1516267728;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1516273755;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1516801403;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1516890661;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> protected void onConsumedSubpartition();1536830955;Notifies the parent partition about a consumed {@link ResultSubpartitionView}.;protected void onConsumedSubpartition() {_		parent.onConsumedSubpartition(index)__	};notifies,the,parent,partition,about,a,consumed,link,result,subpartition,view;protected,void,on,consumed,subpartition,parent,on,consumed,subpartition,index
ResultSubpartition -> abstract public boolean add(BufferConsumer bufferConsumer) throws IOException_;1516267728;Adds the given buffer.__<p>The request may be executed synchronously, or asynchronously, depending on the_implementation.__@param bufferConsumer_the buffer to add (transferring ownership to this writer)__@throws IOException_thrown in case of errors while adding the buffer;abstract public boolean add(BufferConsumer bufferConsumer) throws IOException_;adds,the,given,buffer,p,the,request,may,be,executed,synchronously,or,asynchronously,depending,on,the,implementation,param,buffer,consumer,the,buffer,to,add,transferring,ownership,to,this,writer,throws,ioexception,thrown,in,case,of,errors,while,adding,the,buffer;abstract,public,boolean,add,buffer,consumer,buffer,consumer,throws,ioexception
ResultSubpartition -> abstract public boolean add(BufferConsumer bufferConsumer) throws IOException_;1516801403;Adds the given buffer.__<p>The request may be executed synchronously, or asynchronously, depending on the_implementation.__<p><strong>IMPORTANT:</strong> Before adding new {@link BufferConsumer} previously added must be in finished_state. Because of the performance reasons, this is only enforced during the data reading.__@param bufferConsumer_the buffer to add (transferring ownership to this writer)_@return true if operation succeeded and bufferConsumer was enqueued for consumption._@throws IOException_thrown in case of errors while adding the buffer;abstract public boolean add(BufferConsumer bufferConsumer) throws IOException_;adds,the,given,buffer,p,the,request,may,be,executed,synchronously,or,asynchronously,depending,on,the,implementation,p,strong,important,strong,before,adding,new,link,buffer,consumer,previously,added,must,be,in,finished,state,because,of,the,performance,reasons,this,is,only,enforced,during,the,data,reading,param,buffer,consumer,the,buffer,to,add,transferring,ownership,to,this,writer,return,true,if,operation,succeeded,and,buffer,consumer,was,enqueued,for,consumption,throws,ioexception,thrown,in,case,of,errors,while,adding,the,buffer;abstract,public,boolean,add,buffer,consumer,buffer,consumer,throws,ioexception
ResultSubpartition -> abstract public boolean add(BufferConsumer bufferConsumer) throws IOException_;1516890661;Adds the given buffer.__<p>The request may be executed synchronously, or asynchronously, depending on the_implementation.__@param bufferConsumer_the buffer to add (transferring ownership to this writer)_@return true if operation succeeded and bufferConsumer was enqueued for consumption._@throws IOException_thrown in case of errors while adding the buffer;abstract public boolean add(BufferConsumer bufferConsumer) throws IOException_;adds,the,given,buffer,p,the,request,may,be,executed,synchronously,or,asynchronously,depending,on,the,implementation,param,buffer,consumer,the,buffer,to,add,transferring,ownership,to,this,writer,return,true,if,operation,succeeded,and,buffer,consumer,was,enqueued,for,consumption,throws,ioexception,thrown,in,case,of,errors,while,adding,the,buffer;abstract,public,boolean,add,buffer,consumer,buffer,consumer,throws,ioexception
ResultSubpartition -> @VisibleForTesting 	public int getBuffersInBacklog();1516267728;Gets the number of non-event buffers in this subpartition.__<p><strong>Beware:</strong> This method should only be used in tests in non-concurrent access_scenarios since it does not make any concurrency guarantees.;@VisibleForTesting_	public int getBuffersInBacklog() {_		return buffersInBacklog__	};gets,the,number,of,non,event,buffers,in,this,subpartition,p,strong,beware,strong,this,method,should,only,be,used,in,tests,in,non,concurrent,access,scenarios,since,it,does,not,make,any,concurrency,guarantees;visible,for,testing,public,int,get,buffers,in,backlog,return,buffers,in,backlog
ResultSubpartition -> @VisibleForTesting 	public int getBuffersInBacklog();1516273755;Gets the number of non-event buffers in this subpartition.__<p><strong>Beware:</strong> This method should only be used in tests in non-concurrent access_scenarios since it does not make any concurrency guarantees.;@VisibleForTesting_	public int getBuffersInBacklog() {_		return buffersInBacklog__	};gets,the,number,of,non,event,buffers,in,this,subpartition,p,strong,beware,strong,this,method,should,only,be,used,in,tests,in,non,concurrent,access,scenarios,since,it,does,not,make,any,concurrency,guarantees;visible,for,testing,public,int,get,buffers,in,backlog,return,buffers,in,backlog
ResultSubpartition -> @VisibleForTesting 	public int getBuffersInBacklog();1516801403;Gets the number of non-event buffers in this subpartition.__<p><strong>Beware:</strong> This method should only be used in tests in non-concurrent access_scenarios since it does not make any concurrency guarantees.;@VisibleForTesting_	public int getBuffersInBacklog() {_		return buffersInBacklog__	};gets,the,number,of,non,event,buffers,in,this,subpartition,p,strong,beware,strong,this,method,should,only,be,used,in,tests,in,non,concurrent,access,scenarios,since,it,does,not,make,any,concurrency,guarantees;visible,for,testing,public,int,get,buffers,in,backlog,return,buffers,in,backlog
ResultSubpartition -> @VisibleForTesting 	public int getBuffersInBacklog();1516890661;Gets the number of non-event buffers in this subpartition.__<p><strong>Beware:</strong> This method should only be used in tests in non-concurrent access_scenarios since it does not make any concurrency guarantees.;@VisibleForTesting_	public int getBuffersInBacklog() {_		return buffersInBacklog__	};gets,the,number,of,non,event,buffers,in,this,subpartition,p,strong,beware,strong,this,method,should,only,be,used,in,tests,in,non,concurrent,access,scenarios,since,it,does,not,make,any,concurrency,guarantees;visible,for,testing,public,int,get,buffers,in,backlog,return,buffers,in,backlog
ResultSubpartition -> @VisibleForTesting 	public int getBuffersInBacklog();1536830955;Gets the number of non-event buffers in this subpartition.__<p><strong>Beware:</strong> This method should only be used in tests in non-concurrent access_scenarios since it does not make any concurrency guarantees.;@VisibleForTesting_	public int getBuffersInBacklog() {_		return buffersInBacklog__	};gets,the,number,of,non,event,buffers,in,this,subpartition,p,strong,beware,strong,this,method,should,only,be,used,in,tests,in,non,concurrent,access,scenarios,since,it,does,not,make,any,concurrency,guarantees;visible,for,testing,public,int,get,buffers,in,backlog,return,buffers,in,backlog
