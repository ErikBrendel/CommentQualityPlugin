# id;timestamp;commentText;codeText;commentWords;codeWords
PipelinedSubpartition -> boolean registerListener(NotificationListener listener);1420560668;Registers a listener with this subpartition and returns whether the registration was_successful.__<p> A registered listener is notified when the state of the subpartition changes. After a_notification, the listener is unregistered. Only a single listener is allowed to be_registered.;boolean registerListener(NotificationListener listener) {_		synchronized (buffers) {_			if (!buffers.isEmpty() || isReleased) {_				return false__			}__			if (registeredListener == null) {_				registeredListener = listener___				return true__			}__			throw new IllegalStateException("Already registered listener.")__		}_	};registers,a,listener,with,this,subpartition,and,returns,whether,the,registration,was,successful,p,a,registered,listener,is,notified,when,the,state,of,the,subpartition,changes,after,a,notification,the,listener,is,unregistered,only,a,single,listener,is,allowed,to,be,registered;boolean,register,listener,notification,listener,listener,synchronized,buffers,if,buffers,is,empty,is,released,return,false,if,registered,listener,null,registered,listener,listener,return,true,throw,new,illegal,state,exception,already,registered,listener
PipelinedSubpartition -> boolean registerListener(NotificationListener listener);1427278828;Registers a listener with this subpartition and returns whether the registration was_successful.__<p> A registered listener is notified when the state of the subpartition changes. After a_notification, the listener is unregistered. Only a single listener is allowed to be_registered.;boolean registerListener(NotificationListener listener) {_		synchronized (buffers) {_			if (!buffers.isEmpty() || isReleased) {_				return false__			}__			if (registeredListener == null) {_				registeredListener = listener___				return true__			}__			throw new IllegalStateException("Already registered listener.")__		}_	};registers,a,listener,with,this,subpartition,and,returns,whether,the,registration,was,successful,p,a,registered,listener,is,notified,when,the,state,of,the,subpartition,changes,after,a,notification,the,listener,is,unregistered,only,a,single,listener,is,allowed,to,be,registered;boolean,register,listener,notification,listener,listener,synchronized,buffers,if,buffers,is,empty,is,released,return,false,if,registered,listener,null,registered,listener,listener,return,true,throw,new,illegal,state,exception,already,registered,listener
PipelinedSubpartition -> boolean registerListener(NotificationListener listener);1431354895;Registers a listener with this subpartition and returns whether the registration was_successful.__<p> A registered listener is notified when the state of the subpartition changes. After a_notification, the listener is unregistered. Only a single listener is allowed to be_registered.;boolean registerListener(NotificationListener listener) {_		synchronized (buffers) {_			if (!buffers.isEmpty() || isReleased) {_				return false__			}__			if (registeredListener == null) {_				registeredListener = listener___				return true__			}__			throw new IllegalStateException("Already registered listener.")__		}_	};registers,a,listener,with,this,subpartition,and,returns,whether,the,registration,was,successful,p,a,registered,listener,is,notified,when,the,state,of,the,subpartition,changes,after,a,notification,the,listener,is,unregistered,only,a,single,listener,is,allowed,to,be,registered;boolean,register,listener,notification,listener,listener,synchronized,buffers,if,buffers,is,empty,is,released,return,false,if,registered,listener,null,registered,listener,listener,return,true,throw,new,illegal,state,exception,already,registered,listener
PipelinedSubpartition -> boolean registerListener(NotificationListener listener);1439212507;Registers a listener with this subpartition and returns whether the registration was_successful.__<p> A registered listener is notified when the state of the subpartition changes. After a_notification, the listener is unregistered. Only a single listener is allowed to be_registered.;boolean registerListener(NotificationListener listener) {_		synchronized (buffers) {_			if (!buffers.isEmpty() || isReleased) {_				return false__			}__			if (registeredListener == null) {_				registeredListener = listener___				return true__			}__			throw new IllegalStateException("Already registered listener.")__		}_	};registers,a,listener,with,this,subpartition,and,returns,whether,the,registration,was,successful,p,a,registered,listener,is,notified,when,the,state,of,the,subpartition,changes,after,a,notification,the,listener,is,unregistered,only,a,single,listener,is,allowed,to,be,registered;boolean,register,listener,notification,listener,listener,synchronized,buffers,if,buffers,is,empty,is,released,return,false,if,registered,listener,null,registered,listener,listener,return,true,throw,new,illegal,state,exception,already,registered,listener
PipelinedSubpartition -> boolean registerListener(NotificationListener listener);1465394479;Registers a listener with this subpartition and returns whether the registration was_successful.__<p> A registered listener is notified when the state of the subpartition changes. After a_notification, the listener is unregistered. Only a single listener is allowed to be_registered.;boolean registerListener(NotificationListener listener) {_		synchronized (buffers) {_			if (!buffers.isEmpty() || isReleased) {_				return false__			}__			if (registeredListener == null) {_				registeredListener = listener___				return true__			}__			throw new IllegalStateException("Already registered listener.")__		}_	};registers,a,listener,with,this,subpartition,and,returns,whether,the,registration,was,successful,p,a,registered,listener,is,notified,when,the,state,of,the,subpartition,changes,after,a,notification,the,listener,is,unregistered,only,a,single,listener,is,allowed,to,be,registered;boolean,register,listener,notification,listener,listener,synchronized,buffers,if,buffers,is,empty,is,released,return,false,if,registered,listener,null,registered,listener,listener,return,true,throw,new,illegal,state,exception,already,registered,listener
PipelinedSubpartition -> boolean registerListener(NotificationListener listener);1477240892;Registers a listener with this subpartition and returns whether the registration was_successful.__<p> A registered listener is notified when the state of the subpartition changes. After a_notification, the listener is unregistered. Only a single listener is allowed to be_registered.;boolean registerListener(NotificationListener listener) {_		synchronized (buffers) {_			if (!buffers.isEmpty() || isReleased) {_				return false__			}__			if (registeredListener == null) {_				registeredListener = listener___				return true__			}__			throw new IllegalStateException("Already registered listener.")__		}_	};registers,a,listener,with,this,subpartition,and,returns,whether,the,registration,was,successful,p,a,registered,listener,is,notified,when,the,state,of,the,subpartition,changes,after,a,notification,the,listener,is,unregistered,only,a,single,listener,is,allowed,to,be,registered;boolean,register,listener,notification,listener,listener,synchronized,buffers,if,buffers,is,empty,is,released,return,false,if,registered,listener,null,registered,listener,listener,return,true,throw,new,illegal,state,exception,already,registered,listener
PipelinedSubpartition -> boolean registerListener(NotificationListener listener);1477468111;Registers a listener with this subpartition and returns whether the registration was_successful.__<p> A registered listener is notified when the state of the subpartition changes. After a_notification, the listener is unregistered. Only a single listener is allowed to be_registered.;boolean registerListener(NotificationListener listener) {_		synchronized (buffers) {_			if (!buffers.isEmpty() || isReleased) {_				return false__			}__			if (registeredListener == null) {_				registeredListener = listener___				return true__			}__			throw new IllegalStateException("Already registered listener.")__		}_	};registers,a,listener,with,this,subpartition,and,returns,whether,the,registration,was,successful,p,a,registered,listener,is,notified,when,the,state,of,the,subpartition,changes,after,a,notification,the,listener,is,unregistered,only,a,single,listener,is,allowed,to,be,registered;boolean,register,listener,notification,listener,listener,synchronized,buffers,if,buffers,is,empty,is,released,return,false,if,registered,listener,null,registered,listener,listener,return,true,throw,new,illegal,state,exception,already,registered,listener
PipelinedSubpartition -> private void decreaseBuffersInBacklog(Buffer buffer);1502969925;Decreases the number of non-event buffers by one after fetching a non-event_buffer from this subpartition.;private void decreaseBuffersInBacklog(Buffer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog--__		}_	};decreases,the,number,of,non,event,buffers,by,one,after,fetching,a,non,event,buffer,from,this,subpartition;private,void,decrease,buffers,in,backlog,buffer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
PipelinedSubpartition -> private void decreaseBuffersInBacklog(Buffer buffer);1506753379;Decreases the number of non-event buffers by one after fetching a non-event_buffer from this subpartition.;private void decreaseBuffersInBacklog(Buffer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog--__		}_	};decreases,the,number,of,non,event,buffers,by,one,after,fetching,a,non,event,buffer,from,this,subpartition;private,void,decrease,buffers,in,backlog,buffer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
PipelinedSubpartition -> private void decreaseBuffersInBacklog(Buffer buffer);1515172715;Decreases the number of non-event buffers by one after fetching a non-event_buffer from this subpartition.;private void decreaseBuffersInBacklog(Buffer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog--__		}_	};decreases,the,number,of,non,event,buffers,by,one,after,fetching,a,non,event,buffer,from,this,subpartition;private,void,decrease,buffers,in,backlog,buffer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
PipelinedSubpartition -> private void decreaseBuffersInBacklog(Buffer buffer);1515534998;Decreases the number of non-event buffers by one after fetching a non-event_buffer from this subpartition.;private void decreaseBuffersInBacklog(Buffer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog--__		}_	};decreases,the,number,of,non,event,buffers,by,one,after,fetching,a,non,event,buffer,from,this,subpartition;private,void,decrease,buffers,in,backlog,buffer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
PipelinedSubpartition -> private void decreaseBuffersInBacklog(Buffer buffer);1516268478;Decreases the number of non-event buffers by one after fetching a non-event_buffer from this subpartition.;private void decreaseBuffersInBacklog(Buffer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog--__		}_	};decreases,the,number,of,non,event,buffers,by,one,after,fetching,a,non,event,buffer,from,this,subpartition;private,void,decrease,buffers,in,backlog,buffer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
PipelinedSubpartition -> private void increaseBuffersInBacklog(Buffer buffer);1502969925;Increases the number of non-event buffers by one after adding a non-event_buffer into this subpartition.;private void increaseBuffersInBacklog(Buffer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog++__		}_	};increases,the,number,of,non,event,buffers,by,one,after,adding,a,non,event,buffer,into,this,subpartition;private,void,increase,buffers,in,backlog,buffer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
PipelinedSubpartition -> private void increaseBuffersInBacklog(Buffer buffer);1506753379;Increases the number of non-event buffers by one after adding a non-event_buffer into this subpartition.;private void increaseBuffersInBacklog(Buffer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog++__		}_	};increases,the,number,of,non,event,buffers,by,one,after,adding,a,non,event,buffer,into,this,subpartition;private,void,increase,buffers,in,backlog,buffer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
PipelinedSubpartition -> private void increaseBuffersInBacklog(Buffer buffer);1515172715;Increases the number of non-event buffers by one after adding a non-event_buffer into this subpartition.;private void increaseBuffersInBacklog(Buffer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog++__		}_	};increases,the,number,of,non,event,buffers,by,one,after,adding,a,non,event,buffer,into,this,subpartition;private,void,increase,buffers,in,backlog,buffer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
PipelinedSubpartition -> private void increaseBuffersInBacklog(Buffer buffer);1515534998;Increases the number of non-event buffers by one after adding a non-event_buffer into this subpartition.;private void increaseBuffersInBacklog(Buffer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog++__		}_	};increases,the,number,of,non,event,buffers,by,one,after,adding,a,non,event,buffer,into,this,subpartition;private,void,increase,buffers,in,backlog,buffer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
PipelinedSubpartition -> private void increaseBuffersInBacklog(Buffer buffer);1516268478;Increases the number of non-event buffers by one after adding a non-event_buffer into this subpartition.;private void increaseBuffersInBacklog(Buffer buffer) {_		assert Thread.holdsLock(buffers)___		if (buffer != null && buffer.isBuffer()) {_			buffersInBacklog++__		}_	};increases,the,number,of,non,event,buffers,by,one,after,adding,a,non,event,buffer,into,this,subpartition;private,void,increase,buffers,in,backlog,buffer,buffer,assert,thread,holds,lock,buffers,if,buffer,null,buffer,is,buffer,buffers,in,backlog
