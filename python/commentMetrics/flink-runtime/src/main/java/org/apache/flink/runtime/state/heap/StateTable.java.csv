# id;timestamp;commentText;codeText;commentWords;codeWords
StateTable -> public abstract S get(K key, N namespace)_;1488534675;Returns the state for the composite of active key and given namespace. This is typically used by_queryable state.__@param key       the key. Not null._@param namespace the namespace. Not null._@return the state of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(K key, N namespace)_;returns,the,state,for,the,composite,of,active,key,and,given,namespace,this,is,typically,used,by,queryable,state,param,key,the,key,not,null,param,namespace,the,namespace,not,null,return,the,state,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,k,key,n,namespace
StateTable -> public abstract S get(K key, N namespace)_;1494180263;Returns the state for the composite of active key and given namespace. This is typically used by_queryable state.__@param key       the key. Not null._@param namespace the namespace. Not null._@return the state of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(K key, N namespace)_;returns,the,state,for,the,composite,of,active,key,and,given,namespace,this,is,typically,used,by,queryable,state,param,key,the,key,not,null,param,namespace,the,namespace,not,null,return,the,state,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,k,key,n,namespace
StateTable -> public abstract S get(K key, N namespace)_;1505385570;Returns the state for the composite of active key and given namespace. This is typically used by_queryable state.__@param key       the key. Not null._@param namespace the namespace. Not null._@return the state of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(K key, N namespace)_;returns,the,state,for,the,composite,of,active,key,and,given,namespace,this,is,typically,used,by,queryable,state,param,key,the,key,not,null,param,namespace,the,namespace,not,null,return,the,state,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,k,key,n,namespace
StateTable -> public abstract S get(K key, N namespace)_;1528721286;Returns the state for the composite of active key and given namespace. This is typically used by_queryable state.__@param key       the key. Not null._@param namespace the namespace. Not null._@return the state of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(K key, N namespace)_;returns,the,state,for,the,composite,of,active,key,and,given,namespace,this,is,typically,used,by,queryable,state,param,key,the,key,not,null,param,namespace,the,namespace,not,null,return,the,state,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,k,key,n,namespace
StateTable -> public abstract S get(K key, N namespace)_;1528883776;Returns the state for the composite of active key and given namespace. This is typically used by_queryable state.__@param key       the key. Not null._@param namespace the namespace. Not null._@return the state of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(K key, N namespace)_;returns,the,state,for,the,composite,of,active,key,and,given,namespace,this,is,typically,used,by,queryable,state,param,key,the,key,not,null,param,namespace,the,namespace,not,null,return,the,state,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,k,key,n,namespace
StateTable -> public abstract S get(K key, N namespace)_;1533313087;Returns the state for the composite of active key and given namespace. This is typically used by_queryable state.__@param key       the key. Not null._@param namespace the namespace. Not null._@return the state of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(K key, N namespace)_;returns,the,state,for,the,composite,of,active,key,and,given,namespace,this,is,typically,used,by,queryable,state,param,key,the,key,not,null,param,namespace,the,namespace,not,null,return,the,state,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,k,key,n,namespace
StateTable -> public abstract S get(K key, N namespace)_;1534770350;Returns the state for the composite of active key and given namespace. This is typically used by_queryable state.__@param key       the key. Not null._@param namespace the namespace. Not null._@return the state of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(K key, N namespace)_;returns,the,state,for,the,composite,of,active,key,and,given,namespace,this,is,typically,used,by,queryable,state,param,key,the,key,not,null,param,namespace,the,namespace,not,null,return,the,state,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,k,key,n,namespace
StateTable -> public abstract S get(K key, N namespace)_;1538063092;Returns the state for the composite of active key and given namespace. This is typically used by_queryable state.__@param key       the key. Not null._@param namespace the namespace. Not null._@return the state of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(K key, N namespace)_;returns,the,state,for,the,composite,of,active,key,and,given,namespace,this,is,typically,used,by,queryable,state,param,key,the,key,not,null,param,namespace,the,namespace,not,null,return,the,state,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,k,key,n,namespace
StateTable -> public abstract <T> void transform( 			N namespace, 			T value, 			StateTransformationFunction<S, T> transformation) throws Exception_;1488534675;Applies the given {@link StateTransformationFunction} to the state (1st input argument), using the given value as_second input argument. The result of {@link StateTransformationFunction#apply(Object, Object)} is then stored as_the new state. This function is basically an optimization for get-update-put pattern.__@param namespace      the namespace. Not null._@param value          the value to use in transforming the state. Can be null._@param transformation the transformation function._@throws Exception if some exception happens in the transformation function.;public abstract <T> void transform(_			N namespace,_			T value,_			StateTransformationFunction<S, T> transformation) throws Exception_;applies,the,given,link,state,transformation,function,to,the,state,1st,input,argument,using,the,given,value,as,second,input,argument,the,result,of,link,state,transformation,function,apply,object,object,is,then,stored,as,the,new,state,this,function,is,basically,an,optimization,for,get,update,put,pattern,param,namespace,the,namespace,not,null,param,value,the,value,to,use,in,transforming,the,state,can,be,null,param,transformation,the,transformation,function,throws,exception,if,some,exception,happens,in,the,transformation,function;public,abstract,t,void,transform,n,namespace,t,value,state,transformation,function,s,t,transformation,throws,exception
StateTable -> public abstract <T> void transform( 			N namespace, 			T value, 			StateTransformationFunction<S, T> transformation) throws Exception_;1494180263;Applies the given {@link StateTransformationFunction} to the state (1st input argument), using the given value as_second input argument. The result of {@link StateTransformationFunction#apply(Object, Object)} is then stored as_the new state. This function is basically an optimization for get-update-put pattern.__@param namespace      the namespace. Not null._@param value          the value to use in transforming the state. Can be null._@param transformation the transformation function._@throws Exception if some exception happens in the transformation function.;public abstract <T> void transform(_			N namespace,_			T value,_			StateTransformationFunction<S, T> transformation) throws Exception_;applies,the,given,link,state,transformation,function,to,the,state,1st,input,argument,using,the,given,value,as,second,input,argument,the,result,of,link,state,transformation,function,apply,object,object,is,then,stored,as,the,new,state,this,function,is,basically,an,optimization,for,get,update,put,pattern,param,namespace,the,namespace,not,null,param,value,the,value,to,use,in,transforming,the,state,can,be,null,param,transformation,the,transformation,function,throws,exception,if,some,exception,happens,in,the,transformation,function;public,abstract,t,void,transform,n,namespace,t,value,state,transformation,function,s,t,transformation,throws,exception
StateTable -> public abstract <T> void transform( 			N namespace, 			T value, 			StateTransformationFunction<S, T> transformation) throws Exception_;1505385570;Applies the given {@link StateTransformationFunction} to the state (1st input argument), using the given value as_second input argument. The result of {@link StateTransformationFunction#apply(Object, Object)} is then stored as_the new state. This function is basically an optimization for get-update-put pattern.__@param namespace      the namespace. Not null._@param value          the value to use in transforming the state. Can be null._@param transformation the transformation function._@throws Exception if some exception happens in the transformation function.;public abstract <T> void transform(_			N namespace,_			T value,_			StateTransformationFunction<S, T> transformation) throws Exception_;applies,the,given,link,state,transformation,function,to,the,state,1st,input,argument,using,the,given,value,as,second,input,argument,the,result,of,link,state,transformation,function,apply,object,object,is,then,stored,as,the,new,state,this,function,is,basically,an,optimization,for,get,update,put,pattern,param,namespace,the,namespace,not,null,param,value,the,value,to,use,in,transforming,the,state,can,be,null,param,transformation,the,transformation,function,throws,exception,if,some,exception,happens,in,the,transformation,function;public,abstract,t,void,transform,n,namespace,t,value,state,transformation,function,s,t,transformation,throws,exception
StateTable -> public abstract <T> void transform( 			N namespace, 			T value, 			StateTransformationFunction<S, T> transformation) throws Exception_;1528721286;Applies the given {@link StateTransformationFunction} to the state (1st input argument), using the given value as_second input argument. The result of {@link StateTransformationFunction#apply(Object, Object)} is then stored as_the new state. This function is basically an optimization for get-update-put pattern.__@param namespace      the namespace. Not null._@param value          the value to use in transforming the state. Can be null._@param transformation the transformation function._@throws Exception if some exception happens in the transformation function.;public abstract <T> void transform(_			N namespace,_			T value,_			StateTransformationFunction<S, T> transformation) throws Exception_;applies,the,given,link,state,transformation,function,to,the,state,1st,input,argument,using,the,given,value,as,second,input,argument,the,result,of,link,state,transformation,function,apply,object,object,is,then,stored,as,the,new,state,this,function,is,basically,an,optimization,for,get,update,put,pattern,param,namespace,the,namespace,not,null,param,value,the,value,to,use,in,transforming,the,state,can,be,null,param,transformation,the,transformation,function,throws,exception,if,some,exception,happens,in,the,transformation,function;public,abstract,t,void,transform,n,namespace,t,value,state,transformation,function,s,t,transformation,throws,exception
StateTable -> public abstract <T> void transform( 			N namespace, 			T value, 			StateTransformationFunction<S, T> transformation) throws Exception_;1528883776;Applies the given {@link StateTransformationFunction} to the state (1st input argument), using the given value as_second input argument. The result of {@link StateTransformationFunction#apply(Object, Object)} is then stored as_the new state. This function is basically an optimization for get-update-put pattern.__@param namespace      the namespace. Not null._@param value          the value to use in transforming the state. Can be null._@param transformation the transformation function._@throws Exception if some exception happens in the transformation function.;public abstract <T> void transform(_			N namespace,_			T value,_			StateTransformationFunction<S, T> transformation) throws Exception_;applies,the,given,link,state,transformation,function,to,the,state,1st,input,argument,using,the,given,value,as,second,input,argument,the,result,of,link,state,transformation,function,apply,object,object,is,then,stored,as,the,new,state,this,function,is,basically,an,optimization,for,get,update,put,pattern,param,namespace,the,namespace,not,null,param,value,the,value,to,use,in,transforming,the,state,can,be,null,param,transformation,the,transformation,function,throws,exception,if,some,exception,happens,in,the,transformation,function;public,abstract,t,void,transform,n,namespace,t,value,state,transformation,function,s,t,transformation,throws,exception
StateTable -> public abstract <T> void transform( 			N namespace, 			T value, 			StateTransformationFunction<S, T> transformation) throws Exception_;1533313087;Applies the given {@link StateTransformationFunction} to the state (1st input argument), using the given value as_second input argument. The result of {@link StateTransformationFunction#apply(Object, Object)} is then stored as_the new state. This function is basically an optimization for get-update-put pattern.__@param namespace      the namespace. Not null._@param value          the value to use in transforming the state. Can be null._@param transformation the transformation function._@throws Exception if some exception happens in the transformation function.;public abstract <T> void transform(_			N namespace,_			T value,_			StateTransformationFunction<S, T> transformation) throws Exception_;applies,the,given,link,state,transformation,function,to,the,state,1st,input,argument,using,the,given,value,as,second,input,argument,the,result,of,link,state,transformation,function,apply,object,object,is,then,stored,as,the,new,state,this,function,is,basically,an,optimization,for,get,update,put,pattern,param,namespace,the,namespace,not,null,param,value,the,value,to,use,in,transforming,the,state,can,be,null,param,transformation,the,transformation,function,throws,exception,if,some,exception,happens,in,the,transformation,function;public,abstract,t,void,transform,n,namespace,t,value,state,transformation,function,s,t,transformation,throws,exception
StateTable -> public abstract <T> void transform( 			N namespace, 			T value, 			StateTransformationFunction<S, T> transformation) throws Exception_;1534770350;Applies the given {@link StateTransformationFunction} to the state (1st input argument), using the given value as_second input argument. The result of {@link StateTransformationFunction#apply(Object, Object)} is then stored as_the new state. This function is basically an optimization for get-update-put pattern.__@param namespace      the namespace. Not null._@param value          the value to use in transforming the state. Can be null._@param transformation the transformation function._@throws Exception if some exception happens in the transformation function.;public abstract <T> void transform(_			N namespace,_			T value,_			StateTransformationFunction<S, T> transformation) throws Exception_;applies,the,given,link,state,transformation,function,to,the,state,1st,input,argument,using,the,given,value,as,second,input,argument,the,result,of,link,state,transformation,function,apply,object,object,is,then,stored,as,the,new,state,this,function,is,basically,an,optimization,for,get,update,put,pattern,param,namespace,the,namespace,not,null,param,value,the,value,to,use,in,transforming,the,state,can,be,null,param,transformation,the,transformation,function,throws,exception,if,some,exception,happens,in,the,transformation,function;public,abstract,t,void,transform,n,namespace,t,value,state,transformation,function,s,t,transformation,throws,exception
StateTable -> public abstract <T> void transform( 			N namespace, 			T value, 			StateTransformationFunction<S, T> transformation) throws Exception_;1538063092;Applies the given {@link StateTransformationFunction} to the state (1st input argument), using the given value as_second input argument. The result of {@link StateTransformationFunction#apply(Object, Object)} is then stored as_the new state. This function is basically an optimization for get-update-put pattern.__@param namespace      the namespace. Not null._@param value          the value to use in transforming the state. Can be null._@param transformation the transformation function._@throws Exception if some exception happens in the transformation function.;public abstract <T> void transform(_			N namespace,_			T value,_			StateTransformationFunction<S, T> transformation) throws Exception_;applies,the,given,link,state,transformation,function,to,the,state,1st,input,argument,using,the,given,value,as,second,input,argument,the,result,of,link,state,transformation,function,apply,object,object,is,then,stored,as,the,new,state,this,function,is,basically,an,optimization,for,get,update,put,pattern,param,namespace,the,namespace,not,null,param,value,the,value,to,use,in,transforming,the,state,can,be,null,param,transformation,the,transformation,function,throws,exception,if,some,exception,happens,in,the,transformation,function;public,abstract,t,void,transform,n,namespace,t,value,state,transformation,function,s,t,transformation,throws,exception
StateTable -> public abstract S removeAndGetOld(N namespace)_;1488534675;Removes the mapping for the composite of active key and given namespace, returning the state that was_found under the entry.__@param namespace the namespace of the mapping to remove. Not null._@return the state of the removed mapping or {@code null} if no mapping_for the specified key was found.;public abstract S removeAndGetOld(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,returning,the,state,that,was,found,under,the,entry,param,namespace,the,namespace,of,the,mapping,to,remove,not,null,return,the,state,of,the,removed,mapping,or,code,null,if,no,mapping,for,the,specified,key,was,found;public,abstract,s,remove,and,get,old,n,namespace
StateTable -> public abstract S removeAndGetOld(N namespace)_;1494180263;Removes the mapping for the composite of active key and given namespace, returning the state that was_found under the entry.__@param namespace the namespace of the mapping to remove. Not null._@return the state of the removed mapping or {@code null} if no mapping_for the specified key was found.;public abstract S removeAndGetOld(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,returning,the,state,that,was,found,under,the,entry,param,namespace,the,namespace,of,the,mapping,to,remove,not,null,return,the,state,of,the,removed,mapping,or,code,null,if,no,mapping,for,the,specified,key,was,found;public,abstract,s,remove,and,get,old,n,namespace
StateTable -> public abstract S removeAndGetOld(N namespace)_;1505385570;Removes the mapping for the composite of active key and given namespace, returning the state that was_found under the entry.__@param namespace the namespace of the mapping to remove. Not null._@return the state of the removed mapping or {@code null} if no mapping_for the specified key was found.;public abstract S removeAndGetOld(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,returning,the,state,that,was,found,under,the,entry,param,namespace,the,namespace,of,the,mapping,to,remove,not,null,return,the,state,of,the,removed,mapping,or,code,null,if,no,mapping,for,the,specified,key,was,found;public,abstract,s,remove,and,get,old,n,namespace
StateTable -> public abstract S removeAndGetOld(N namespace)_;1528721286;Removes the mapping for the composite of active key and given namespace, returning the state that was_found under the entry.__@param namespace the namespace of the mapping to remove. Not null._@return the state of the removed mapping or {@code null} if no mapping_for the specified key was found.;public abstract S removeAndGetOld(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,returning,the,state,that,was,found,under,the,entry,param,namespace,the,namespace,of,the,mapping,to,remove,not,null,return,the,state,of,the,removed,mapping,or,code,null,if,no,mapping,for,the,specified,key,was,found;public,abstract,s,remove,and,get,old,n,namespace
StateTable -> public abstract S removeAndGetOld(N namespace)_;1528883776;Removes the mapping for the composite of active key and given namespace, returning the state that was_found under the entry.__@param namespace the namespace of the mapping to remove. Not null._@return the state of the removed mapping or {@code null} if no mapping_for the specified key was found.;public abstract S removeAndGetOld(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,returning,the,state,that,was,found,under,the,entry,param,namespace,the,namespace,of,the,mapping,to,remove,not,null,return,the,state,of,the,removed,mapping,or,code,null,if,no,mapping,for,the,specified,key,was,found;public,abstract,s,remove,and,get,old,n,namespace
StateTable -> public abstract S removeAndGetOld(N namespace)_;1533313087;Removes the mapping for the composite of active key and given namespace, returning the state that was_found under the entry.__@param namespace the namespace of the mapping to remove. Not null._@return the state of the removed mapping or {@code null} if no mapping_for the specified key was found.;public abstract S removeAndGetOld(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,returning,the,state,that,was,found,under,the,entry,param,namespace,the,namespace,of,the,mapping,to,remove,not,null,return,the,state,of,the,removed,mapping,or,code,null,if,no,mapping,for,the,specified,key,was,found;public,abstract,s,remove,and,get,old,n,namespace
StateTable -> public abstract S removeAndGetOld(N namespace)_;1534770350;Removes the mapping for the composite of active key and given namespace, returning the state that was_found under the entry.__@param namespace the namespace of the mapping to remove. Not null._@return the state of the removed mapping or {@code null} if no mapping_for the specified key was found.;public abstract S removeAndGetOld(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,returning,the,state,that,was,found,under,the,entry,param,namespace,the,namespace,of,the,mapping,to,remove,not,null,return,the,state,of,the,removed,mapping,or,code,null,if,no,mapping,for,the,specified,key,was,found;public,abstract,s,remove,and,get,old,n,namespace
StateTable -> public abstract S removeAndGetOld(N namespace)_;1538063092;Removes the mapping for the composite of active key and given namespace, returning the state that was_found under the entry.__@param namespace the namespace of the mapping to remove. Not null._@return the state of the removed mapping or {@code null} if no mapping_for the specified key was found.;public abstract S removeAndGetOld(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,returning,the,state,that,was,found,under,the,entry,param,namespace,the,namespace,of,the,mapping,to,remove,not,null,return,the,state,of,the,removed,mapping,or,code,null,if,no,mapping,for,the,specified,key,was,found;public,abstract,s,remove,and,get,old,n,namespace
StateTable -> public boolean isEmpty();1488534675;Returns whether this {@link NestedMapsStateTable} is empty.__@return {@code true} if this {@link NestedMapsStateTable} has no elements, {@code false}_otherwise._@see #size();public boolean isEmpty() {_		return size() == 0__	};returns,whether,this,link,nested,maps,state,table,is,empty,return,code,true,if,this,link,nested,maps,state,table,has,no,elements,code,false,otherwise,see,size;public,boolean,is,empty,return,size,0
StateTable -> public boolean isEmpty();1494180263;Returns whether this {@link NestedMapsStateTable} is empty.__@return {@code true} if this {@link NestedMapsStateTable} has no elements, {@code false}_otherwise._@see #size();public boolean isEmpty() {_		return size() == 0__	};returns,whether,this,link,nested,maps,state,table,is,empty,return,code,true,if,this,link,nested,maps,state,table,has,no,elements,code,false,otherwise,see,size;public,boolean,is,empty,return,size,0
StateTable -> public boolean isEmpty();1505385570;Returns whether this {@link NestedMapsStateTable} is empty.__@return {@code true} if this {@link NestedMapsStateTable} has no elements, {@code false}_otherwise._@see #size();public boolean isEmpty() {_		return size() == 0__	};returns,whether,this,link,nested,maps,state,table,is,empty,return,code,true,if,this,link,nested,maps,state,table,has,no,elements,code,false,otherwise,see,size;public,boolean,is,empty,return,size,0
StateTable -> public boolean isEmpty();1528721286;Returns whether this {@link NestedMapsStateTable} is empty.__@return {@code true} if this {@link NestedMapsStateTable} has no elements, {@code false}_otherwise._@see #size();public boolean isEmpty() {_		return size() == 0__	};returns,whether,this,link,nested,maps,state,table,is,empty,return,code,true,if,this,link,nested,maps,state,table,has,no,elements,code,false,otherwise,see,size;public,boolean,is,empty,return,size,0
StateTable -> public boolean isEmpty();1528883776;Returns whether this {@link NestedMapsStateTable} is empty.__@return {@code true} if this {@link NestedMapsStateTable} has no elements, {@code false}_otherwise._@see #size();public boolean isEmpty() {_		return size() == 0__	};returns,whether,this,link,nested,maps,state,table,is,empty,return,code,true,if,this,link,nested,maps,state,table,has,no,elements,code,false,otherwise,see,size;public,boolean,is,empty,return,size,0
StateTable -> public boolean isEmpty();1533313087;Returns whether this {@link NestedMapsStateTable} is empty.__@return {@code true} if this {@link NestedMapsStateTable} has no elements, {@code false}_otherwise._@see #size();public boolean isEmpty() {_		return size() == 0__	};returns,whether,this,link,nested,maps,state,table,is,empty,return,code,true,if,this,link,nested,maps,state,table,has,no,elements,code,false,otherwise,see,size;public,boolean,is,empty,return,size,0
StateTable -> public boolean isEmpty();1534770350;Returns whether this {@link StateTable} is empty.__@return {@code true} if this {@link StateTable} has no elements, {@code false}_otherwise._@see #size();public boolean isEmpty() {_		return size() == 0__	};returns,whether,this,link,state,table,is,empty,return,code,true,if,this,link,state,table,has,no,elements,code,false,otherwise,see,size;public,boolean,is,empty,return,size,0
StateTable -> public boolean isEmpty();1538063092;Returns whether this {@link StateTable} is empty.__@return {@code true} if this {@link StateTable} has no elements, {@code false}_otherwise._@see #size();public boolean isEmpty() {_		return size() == 0__	};returns,whether,this,link,state,table,is,empty,return,code,true,if,this,link,state,table,has,no,elements,code,false,otherwise,see,size;public,boolean,is,empty,return,size,0
StateTable -> public abstract void put(N namespace, S state)_;1488534675;Maps the composite of active key and given namespace to the specified state. This method should be preferred_over {@link #putAndGetOld(N, S)} (Namespace, State)} when the caller is not interested in the old state.__@param namespace the namespace. Not null._@param state     the state. Can be null.;public abstract void put(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,this,method,should,be,preferred,over,link,put,and,get,old,n,s,namespace,state,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null;public,abstract,void,put,n,namespace,s,state
StateTable -> public abstract void put(N namespace, S state)_;1494180263;Maps the composite of active key and given namespace to the specified state. This method should be preferred_over {@link #putAndGetOld(N, S)} (Namespace, State)} when the caller is not interested in the old state.__@param namespace the namespace. Not null._@param state     the state. Can be null.;public abstract void put(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,this,method,should,be,preferred,over,link,put,and,get,old,n,s,namespace,state,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null;public,abstract,void,put,n,namespace,s,state
StateTable -> public abstract void put(N namespace, S state)_;1505385570;Maps the composite of active key and given namespace to the specified state. This method should be preferred_over {@link #putAndGetOld(N, S)} (Namespace, State)} when the caller is not interested in the old state.__@param namespace the namespace. Not null._@param state     the state. Can be null.;public abstract void put(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,this,method,should,be,preferred,over,link,put,and,get,old,n,s,namespace,state,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null;public,abstract,void,put,n,namespace,s,state
StateTable -> public abstract void put(N namespace, S state)_;1528721286;Maps the composite of active key and given namespace to the specified state. This method should be preferred_over {@link #putAndGetOld(N, S)} (Namespace, State)} when the caller is not interested in the old state.__@param namespace the namespace. Not null._@param state     the state. Can be null.;public abstract void put(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,this,method,should,be,preferred,over,link,put,and,get,old,n,s,namespace,state,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null;public,abstract,void,put,n,namespace,s,state
StateTable -> public abstract void put(N namespace, S state)_;1528883776;Maps the composite of active key and given namespace to the specified state. This method should be preferred_over {@link #putAndGetOld(N, S)} (Namespace, State)} when the caller is not interested in the old state.__@param namespace the namespace. Not null._@param state     the state. Can be null.;public abstract void put(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,this,method,should,be,preferred,over,link,put,and,get,old,n,s,namespace,state,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null;public,abstract,void,put,n,namespace,s,state
StateTable -> public abstract void put(N namespace, S state)_;1533313087;Maps the composite of active key and given namespace to the specified state. This method should be preferred_over {@link #putAndGetOld(N, S)} (Namespace, State)} when the caller is not interested in the old state.__@param namespace the namespace. Not null._@param state     the state. Can be null.;public abstract void put(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,this,method,should,be,preferred,over,link,put,and,get,old,n,s,namespace,state,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null;public,abstract,void,put,n,namespace,s,state
StateTable -> public abstract void put(N namespace, S state)_;1534770350;Maps the composite of active key and given namespace to the specified state. This method should be preferred_over {@link #putAndGetOld(N, S)} (Namespace, State)} when the caller is not interested in the old state.__@param namespace the namespace. Not null._@param state     the state. Can be null.;public abstract void put(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,this,method,should,be,preferred,over,link,put,and,get,old,n,s,namespace,state,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null;public,abstract,void,put,n,namespace,s,state
StateTable -> public abstract void put(N namespace, S state)_;1538063092;Maps the composite of active key and given namespace to the specified state. This method should be preferred_over {@link #putAndGetOld(N, S)} (Namespace, State)} when the caller is not interested in the old state.__@param namespace the namespace. Not null._@param state     the state. Can be null.;public abstract void put(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,this,method,should,be,preferred,over,link,put,and,get,old,n,s,namespace,state,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null;public,abstract,void,put,n,namespace,s,state
StateTable -> public abstract boolean containsKey(N namespace)_;1488534675;Returns whether this table contains a mapping for the composite of active key and given namespace.__@param namespace the namespace in the composite key to search for. Not null._@return {@code true} if this map contains the specified key/namespace composite key,_{@code false} otherwise.;public abstract boolean containsKey(N namespace)_;returns,whether,this,table,contains,a,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,in,the,composite,key,to,search,for,not,null,return,code,true,if,this,map,contains,the,specified,key,namespace,composite,key,code,false,otherwise;public,abstract,boolean,contains,key,n,namespace
StateTable -> public abstract boolean containsKey(N namespace)_;1494180263;Returns whether this table contains a mapping for the composite of active key and given namespace.__@param namespace the namespace in the composite key to search for. Not null._@return {@code true} if this map contains the specified key/namespace composite key,_{@code false} otherwise.;public abstract boolean containsKey(N namespace)_;returns,whether,this,table,contains,a,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,in,the,composite,key,to,search,for,not,null,return,code,true,if,this,map,contains,the,specified,key,namespace,composite,key,code,false,otherwise;public,abstract,boolean,contains,key,n,namespace
StateTable -> public abstract boolean containsKey(N namespace)_;1505385570;Returns whether this table contains a mapping for the composite of active key and given namespace.__@param namespace the namespace in the composite key to search for. Not null._@return {@code true} if this map contains the specified key/namespace composite key,_{@code false} otherwise.;public abstract boolean containsKey(N namespace)_;returns,whether,this,table,contains,a,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,in,the,composite,key,to,search,for,not,null,return,code,true,if,this,map,contains,the,specified,key,namespace,composite,key,code,false,otherwise;public,abstract,boolean,contains,key,n,namespace
StateTable -> public abstract boolean containsKey(N namespace)_;1528721286;Returns whether this table contains a mapping for the composite of active key and given namespace.__@param namespace the namespace in the composite key to search for. Not null._@return {@code true} if this map contains the specified key/namespace composite key,_{@code false} otherwise.;public abstract boolean containsKey(N namespace)_;returns,whether,this,table,contains,a,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,in,the,composite,key,to,search,for,not,null,return,code,true,if,this,map,contains,the,specified,key,namespace,composite,key,code,false,otherwise;public,abstract,boolean,contains,key,n,namespace
StateTable -> public abstract boolean containsKey(N namespace)_;1528883776;Returns whether this table contains a mapping for the composite of active key and given namespace.__@param namespace the namespace in the composite key to search for. Not null._@return {@code true} if this map contains the specified key/namespace composite key,_{@code false} otherwise.;public abstract boolean containsKey(N namespace)_;returns,whether,this,table,contains,a,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,in,the,composite,key,to,search,for,not,null,return,code,true,if,this,map,contains,the,specified,key,namespace,composite,key,code,false,otherwise;public,abstract,boolean,contains,key,n,namespace
StateTable -> public abstract boolean containsKey(N namespace)_;1533313087;Returns whether this table contains a mapping for the composite of active key and given namespace.__@param namespace the namespace in the composite key to search for. Not null._@return {@code true} if this map contains the specified key/namespace composite key,_{@code false} otherwise.;public abstract boolean containsKey(N namespace)_;returns,whether,this,table,contains,a,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,in,the,composite,key,to,search,for,not,null,return,code,true,if,this,map,contains,the,specified,key,namespace,composite,key,code,false,otherwise;public,abstract,boolean,contains,key,n,namespace
StateTable -> public abstract boolean containsKey(N namespace)_;1534770350;Returns whether this table contains a mapping for the composite of active key and given namespace.__@param namespace the namespace in the composite key to search for. Not null._@return {@code true} if this map contains the specified key/namespace composite key,_{@code false} otherwise.;public abstract boolean containsKey(N namespace)_;returns,whether,this,table,contains,a,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,in,the,composite,key,to,search,for,not,null,return,code,true,if,this,map,contains,the,specified,key,namespace,composite,key,code,false,otherwise;public,abstract,boolean,contains,key,n,namespace
StateTable -> public abstract boolean containsKey(N namespace)_;1538063092;Returns whether this table contains a mapping for the composite of active key and given namespace.__@param namespace the namespace in the composite key to search for. Not null._@return {@code true} if this map contains the specified key/namespace composite key,_{@code false} otherwise.;public abstract boolean containsKey(N namespace)_;returns,whether,this,table,contains,a,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,in,the,composite,key,to,search,for,not,null,return,code,true,if,this,map,contains,the,specified,key,namespace,composite,key,code,false,otherwise;public,abstract,boolean,contains,key,n,namespace
StateTable -> public abstract void remove(N namespace)_;1488534675;Removes the mapping for the composite of active key and given namespace. This method should be preferred_over {@link #removeAndGetOld(N)} when the caller is not interested in the old state.__@param namespace the namespace of the mapping to remove. Not null.;public abstract void remove(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,this,method,should,be,preferred,over,link,remove,and,get,old,n,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,of,the,mapping,to,remove,not,null;public,abstract,void,remove,n,namespace
StateTable -> public abstract void remove(N namespace)_;1494180263;Removes the mapping for the composite of active key and given namespace. This method should be preferred_over {@link #removeAndGetOld(N)} when the caller is not interested in the old state.__@param namespace the namespace of the mapping to remove. Not null.;public abstract void remove(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,this,method,should,be,preferred,over,link,remove,and,get,old,n,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,of,the,mapping,to,remove,not,null;public,abstract,void,remove,n,namespace
StateTable -> public abstract void remove(N namespace)_;1505385570;Removes the mapping for the composite of active key and given namespace. This method should be preferred_over {@link #removeAndGetOld(N)} when the caller is not interested in the old state.__@param namespace the namespace of the mapping to remove. Not null.;public abstract void remove(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,this,method,should,be,preferred,over,link,remove,and,get,old,n,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,of,the,mapping,to,remove,not,null;public,abstract,void,remove,n,namespace
StateTable -> public abstract void remove(N namespace)_;1528721286;Removes the mapping for the composite of active key and given namespace. This method should be preferred_over {@link #removeAndGetOld(N)} when the caller is not interested in the old state.__@param namespace the namespace of the mapping to remove. Not null.;public abstract void remove(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,this,method,should,be,preferred,over,link,remove,and,get,old,n,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,of,the,mapping,to,remove,not,null;public,abstract,void,remove,n,namespace
StateTable -> public abstract void remove(N namespace)_;1528883776;Removes the mapping for the composite of active key and given namespace. This method should be preferred_over {@link #removeAndGetOld(N)} when the caller is not interested in the old state.__@param namespace the namespace of the mapping to remove. Not null.;public abstract void remove(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,this,method,should,be,preferred,over,link,remove,and,get,old,n,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,of,the,mapping,to,remove,not,null;public,abstract,void,remove,n,namespace
StateTable -> public abstract void remove(N namespace)_;1533313087;Removes the mapping for the composite of active key and given namespace. This method should be preferred_over {@link #removeAndGetOld(N)} when the caller is not interested in the old state.__@param namespace the namespace of the mapping to remove. Not null.;public abstract void remove(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,this,method,should,be,preferred,over,link,remove,and,get,old,n,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,of,the,mapping,to,remove,not,null;public,abstract,void,remove,n,namespace
StateTable -> public abstract void remove(N namespace)_;1534770350;Removes the mapping for the composite of active key and given namespace. This method should be preferred_over {@link #removeAndGetOld(N)} when the caller is not interested in the old state.__@param namespace the namespace of the mapping to remove. Not null.;public abstract void remove(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,this,method,should,be,preferred,over,link,remove,and,get,old,n,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,of,the,mapping,to,remove,not,null;public,abstract,void,remove,n,namespace
StateTable -> public abstract void remove(N namespace)_;1538063092;Removes the mapping for the composite of active key and given namespace. This method should be preferred_over {@link #removeAndGetOld(N)} when the caller is not interested in the old state.__@param namespace the namespace of the mapping to remove. Not null.;public abstract void remove(N namespace)_;removes,the,mapping,for,the,composite,of,active,key,and,given,namespace,this,method,should,be,preferred,over,link,remove,and,get,old,n,when,the,caller,is,not,interested,in,the,old,state,param,namespace,the,namespace,of,the,mapping,to,remove,not,null;public,abstract,void,remove,n,namespace
StateTable -> public abstract S get(N namespace)_;1488534675;Returns the state of the mapping for the composite of active key and given namespace.__@param namespace the namespace. Not null._@return the states of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(N namespace)_;returns,the,state,of,the,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,not,null,return,the,states,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,n,namespace
StateTable -> public abstract S get(N namespace)_;1494180263;Returns the state of the mapping for the composite of active key and given namespace.__@param namespace the namespace. Not null._@return the states of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(N namespace)_;returns,the,state,of,the,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,not,null,return,the,states,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,n,namespace
StateTable -> public abstract S get(N namespace)_;1505385570;Returns the state of the mapping for the composite of active key and given namespace.__@param namespace the namespace. Not null._@return the states of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(N namespace)_;returns,the,state,of,the,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,not,null,return,the,states,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,n,namespace
StateTable -> public abstract S get(N namespace)_;1528721286;Returns the state of the mapping for the composite of active key and given namespace.__@param namespace the namespace. Not null._@return the states of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(N namespace)_;returns,the,state,of,the,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,not,null,return,the,states,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,n,namespace
StateTable -> public abstract S get(N namespace)_;1528883776;Returns the state of the mapping for the composite of active key and given namespace.__@param namespace the namespace. Not null._@return the states of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(N namespace)_;returns,the,state,of,the,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,not,null,return,the,states,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,n,namespace
StateTable -> public abstract S get(N namespace)_;1533313087;Returns the state of the mapping for the composite of active key and given namespace.__@param namespace the namespace. Not null._@return the states of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(N namespace)_;returns,the,state,of,the,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,not,null,return,the,states,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,n,namespace
StateTable -> public abstract S get(N namespace)_;1534770350;Returns the state of the mapping for the composite of active key and given namespace.__@param namespace the namespace. Not null._@return the states of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(N namespace)_;returns,the,state,of,the,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,not,null,return,the,states,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,n,namespace
StateTable -> public abstract S get(N namespace)_;1538063092;Returns the state of the mapping for the composite of active key and given namespace.__@param namespace the namespace. Not null._@return the states of the mapping with the specified key/namespace composite key, or {@code null}_if no mapping for the specified key is found.;public abstract S get(N namespace)_;returns,the,state,of,the,mapping,for,the,composite,of,active,key,and,given,namespace,param,namespace,the,namespace,not,null,return,the,states,of,the,mapping,with,the,specified,key,namespace,composite,key,or,code,null,if,no,mapping,for,the,specified,key,is,found;public,abstract,s,get,n,namespace
StateTable -> public abstract S putAndGetOld(N namespace, S state)_;1488534675;Maps the composite of active key and given namespace to the specified state. Returns the previous state that_was registered under the composite key.__@param namespace the namespace. Not null._@param state     the state. Can be null._@return the state of any previous mapping with the specified key or_{@code null} if there was no such mapping.;public abstract S putAndGetOld(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,returns,the,previous,state,that,was,registered,under,the,composite,key,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null,return,the,state,of,any,previous,mapping,with,the,specified,key,or,code,null,if,there,was,no,such,mapping;public,abstract,s,put,and,get,old,n,namespace,s,state
StateTable -> public abstract S putAndGetOld(N namespace, S state)_;1494180263;Maps the composite of active key and given namespace to the specified state. Returns the previous state that_was registered under the composite key.__@param namespace the namespace. Not null._@param state     the state. Can be null._@return the state of any previous mapping with the specified key or_{@code null} if there was no such mapping.;public abstract S putAndGetOld(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,returns,the,previous,state,that,was,registered,under,the,composite,key,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null,return,the,state,of,any,previous,mapping,with,the,specified,key,or,code,null,if,there,was,no,such,mapping;public,abstract,s,put,and,get,old,n,namespace,s,state
StateTable -> public abstract S putAndGetOld(N namespace, S state)_;1505385570;Maps the composite of active key and given namespace to the specified state. Returns the previous state that_was registered under the composite key.__@param namespace the namespace. Not null._@param state     the state. Can be null._@return the state of any previous mapping with the specified key or_{@code null} if there was no such mapping.;public abstract S putAndGetOld(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,returns,the,previous,state,that,was,registered,under,the,composite,key,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null,return,the,state,of,any,previous,mapping,with,the,specified,key,or,code,null,if,there,was,no,such,mapping;public,abstract,s,put,and,get,old,n,namespace,s,state
StateTable -> public abstract S putAndGetOld(N namespace, S state)_;1528721286;Maps the composite of active key and given namespace to the specified state. Returns the previous state that_was registered under the composite key.__@param namespace the namespace. Not null._@param state     the state. Can be null._@return the state of any previous mapping with the specified key or_{@code null} if there was no such mapping.;public abstract S putAndGetOld(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,returns,the,previous,state,that,was,registered,under,the,composite,key,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null,return,the,state,of,any,previous,mapping,with,the,specified,key,or,code,null,if,there,was,no,such,mapping;public,abstract,s,put,and,get,old,n,namespace,s,state
StateTable -> public abstract S putAndGetOld(N namespace, S state)_;1528883776;Maps the composite of active key and given namespace to the specified state. Returns the previous state that_was registered under the composite key.__@param namespace the namespace. Not null._@param state     the state. Can be null._@return the state of any previous mapping with the specified key or_{@code null} if there was no such mapping.;public abstract S putAndGetOld(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,returns,the,previous,state,that,was,registered,under,the,composite,key,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null,return,the,state,of,any,previous,mapping,with,the,specified,key,or,code,null,if,there,was,no,such,mapping;public,abstract,s,put,and,get,old,n,namespace,s,state
StateTable -> public abstract S putAndGetOld(N namespace, S state)_;1533313087;Maps the composite of active key and given namespace to the specified state. Returns the previous state that_was registered under the composite key.__@param namespace the namespace. Not null._@param state     the state. Can be null._@return the state of any previous mapping with the specified key or_{@code null} if there was no such mapping.;public abstract S putAndGetOld(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,returns,the,previous,state,that,was,registered,under,the,composite,key,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null,return,the,state,of,any,previous,mapping,with,the,specified,key,or,code,null,if,there,was,no,such,mapping;public,abstract,s,put,and,get,old,n,namespace,s,state
StateTable -> public abstract S putAndGetOld(N namespace, S state)_;1534770350;Maps the composite of active key and given namespace to the specified state. Returns the previous state that_was registered under the composite key.__@param namespace the namespace. Not null._@param state     the state. Can be null._@return the state of any previous mapping with the specified key or_{@code null} if there was no such mapping.;public abstract S putAndGetOld(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,returns,the,previous,state,that,was,registered,under,the,composite,key,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null,return,the,state,of,any,previous,mapping,with,the,specified,key,or,code,null,if,there,was,no,such,mapping;public,abstract,s,put,and,get,old,n,namespace,s,state
StateTable -> public abstract S putAndGetOld(N namespace, S state)_;1538063092;Maps the composite of active key and given namespace to the specified state. Returns the previous state that_was registered under the composite key.__@param namespace the namespace. Not null._@param state     the state. Can be null._@return the state of any previous mapping with the specified key or_{@code null} if there was no such mapping.;public abstract S putAndGetOld(N namespace, S state)_;maps,the,composite,of,active,key,and,given,namespace,to,the,specified,state,returns,the,previous,state,that,was,registered,under,the,composite,key,param,namespace,the,namespace,not,null,param,state,the,state,can,be,null,return,the,state,of,any,previous,mapping,with,the,specified,key,or,code,null,if,there,was,no,such,mapping;public,abstract,s,put,and,get,old,n,namespace,s,state
StateTable -> public abstract int size()_;1488534675;Returns the total number of entries in this {@link NestedMapsStateTable}. This is the sum of both sub-tables.__@return the number of entries in this {@link NestedMapsStateTable}.;public abstract int size()_;returns,the,total,number,of,entries,in,this,link,nested,maps,state,table,this,is,the,sum,of,both,sub,tables,return,the,number,of,entries,in,this,link,nested,maps,state,table;public,abstract,int,size
StateTable -> public abstract int size()_;1494180263;Returns the total number of entries in this {@link NestedMapsStateTable}. This is the sum of both sub-tables.__@return the number of entries in this {@link NestedMapsStateTable}.;public abstract int size()_;returns,the,total,number,of,entries,in,this,link,nested,maps,state,table,this,is,the,sum,of,both,sub,tables,return,the,number,of,entries,in,this,link,nested,maps,state,table;public,abstract,int,size
StateTable -> public abstract int size()_;1505385570;Returns the total number of entries in this {@link NestedMapsStateTable}. This is the sum of both sub-tables.__@return the number of entries in this {@link NestedMapsStateTable}.;public abstract int size()_;returns,the,total,number,of,entries,in,this,link,nested,maps,state,table,this,is,the,sum,of,both,sub,tables,return,the,number,of,entries,in,this,link,nested,maps,state,table;public,abstract,int,size
StateTable -> public abstract int size()_;1528721286;Returns the total number of entries in this {@link NestedMapsStateTable}. This is the sum of both sub-tables.__@return the number of entries in this {@link NestedMapsStateTable}.;public abstract int size()_;returns,the,total,number,of,entries,in,this,link,nested,maps,state,table,this,is,the,sum,of,both,sub,tables,return,the,number,of,entries,in,this,link,nested,maps,state,table;public,abstract,int,size
StateTable -> public abstract int size()_;1528883776;Returns the total number of entries in this {@link NestedMapsStateTable}. This is the sum of both sub-tables.__@return the number of entries in this {@link NestedMapsStateTable}.;public abstract int size()_;returns,the,total,number,of,entries,in,this,link,nested,maps,state,table,this,is,the,sum,of,both,sub,tables,return,the,number,of,entries,in,this,link,nested,maps,state,table;public,abstract,int,size
StateTable -> public abstract int size()_;1533313087;Returns the total number of entries in this {@link NestedMapsStateTable}. This is the sum of both sub-tables.__@return the number of entries in this {@link NestedMapsStateTable}.;public abstract int size()_;returns,the,total,number,of,entries,in,this,link,nested,maps,state,table,this,is,the,sum,of,both,sub,tables,return,the,number,of,entries,in,this,link,nested,maps,state,table;public,abstract,int,size
StateTable -> public abstract int size()_;1534770350;Returns the total number of entries in this {@link StateTable}. This is the sum of both sub-tables.__@return the number of entries in this {@link StateTable}.;public abstract int size()_;returns,the,total,number,of,entries,in,this,link,state,table,this,is,the,sum,of,both,sub,tables,return,the,number,of,entries,in,this,link,state,table;public,abstract,int,size
StateTable -> public abstract int size()_;1538063092;Returns the total number of entries in this {@link StateTable}. This is the sum of both sub-tables.__@return the number of entries in this {@link StateTable}.;public abstract int size()_;returns,the,total,number,of,entries,in,this,link,state,table,this,is,the,sum,of,both,sub,tables,return,the,number,of,entries,in,this,link,state,table;public,abstract,int,size
StateTable -> public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyedBackendStateMetaInfo<N, S> metaInfo);1494180263;@param keyContext the key context provides the key scope for all put/get/delete operations._@param metaInfo the meta information, including the type serializer for state copy-on-write.;public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyedBackendStateMetaInfo<N, S> metaInfo) {_		this.keyContext = Preconditions.checkNotNull(keyContext)__		this.metaInfo = Preconditions.checkNotNull(metaInfo)__	};param,key,context,the,key,context,provides,the,key,scope,for,all,put,get,delete,operations,param,meta,info,the,meta,information,including,the,type,serializer,for,state,copy,on,write;public,state,table,internal,key,context,k,key,context,registered,keyed,backend,state,meta,info,n,s,meta,info,this,key,context,preconditions,check,not,null,key,context,this,meta,info,preconditions,check,not,null,meta,info
StateTable -> public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyedBackendStateMetaInfo<N, S> metaInfo);1505385570;@param keyContext the key context provides the key scope for all put/get/delete operations._@param metaInfo the meta information, including the type serializer for state copy-on-write.;public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyedBackendStateMetaInfo<N, S> metaInfo) {_		this.keyContext = Preconditions.checkNotNull(keyContext)__		this.metaInfo = Preconditions.checkNotNull(metaInfo)__	};param,key,context,the,key,context,provides,the,key,scope,for,all,put,get,delete,operations,param,meta,info,the,meta,information,including,the,type,serializer,for,state,copy,on,write;public,state,table,internal,key,context,k,key,context,registered,keyed,backend,state,meta,info,n,s,meta,info,this,key,context,preconditions,check,not,null,key,context,this,meta,info,preconditions,check,not,null,meta,info
StateTable -> public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyedBackendStateMetaInfo<N, S> metaInfo);1528721286;@param keyContext the key context provides the key scope for all put/get/delete operations._@param metaInfo the meta information, including the type serializer for state copy-on-write.;public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyedBackendStateMetaInfo<N, S> metaInfo) {_		this.keyContext = Preconditions.checkNotNull(keyContext)__		this.metaInfo = Preconditions.checkNotNull(metaInfo)__	};param,key,context,the,key,context,provides,the,key,scope,for,all,put,get,delete,operations,param,meta,info,the,meta,information,including,the,type,serializer,for,state,copy,on,write;public,state,table,internal,key,context,k,key,context,registered,keyed,backend,state,meta,info,n,s,meta,info,this,key,context,preconditions,check,not,null,key,context,this,meta,info,preconditions,check,not,null,meta,info
StateTable -> public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyValueStateBackendMetaInfo<N, S> metaInfo);1528883776;@param keyContext the key context provides the key scope for all put/get/delete operations._@param metaInfo the meta information, including the type serializer for state copy-on-write.;public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyValueStateBackendMetaInfo<N, S> metaInfo) {_		this.keyContext = Preconditions.checkNotNull(keyContext)__		this.metaInfo = Preconditions.checkNotNull(metaInfo)__	};param,key,context,the,key,context,provides,the,key,scope,for,all,put,get,delete,operations,param,meta,info,the,meta,information,including,the,type,serializer,for,state,copy,on,write;public,state,table,internal,key,context,k,key,context,registered,key,value,state,backend,meta,info,n,s,meta,info,this,key,context,preconditions,check,not,null,key,context,this,meta,info,preconditions,check,not,null,meta,info
StateTable -> public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyValueStateBackendMetaInfo<N, S> metaInfo);1533313087;@param keyContext the key context provides the key scope for all put/get/delete operations._@param metaInfo the meta information, including the type serializer for state copy-on-write.;public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyValueStateBackendMetaInfo<N, S> metaInfo) {_		this.keyContext = Preconditions.checkNotNull(keyContext)__		this.metaInfo = Preconditions.checkNotNull(metaInfo)__	};param,key,context,the,key,context,provides,the,key,scope,for,all,put,get,delete,operations,param,meta,info,the,meta,information,including,the,type,serializer,for,state,copy,on,write;public,state,table,internal,key,context,k,key,context,registered,key,value,state,backend,meta,info,n,s,meta,info,this,key,context,preconditions,check,not,null,key,context,this,meta,info,preconditions,check,not,null,meta,info
StateTable -> public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyValueStateBackendMetaInfo<N, S> metaInfo);1534770350;@param keyContext the key context provides the key scope for all put/get/delete operations._@param metaInfo the meta information, including the type serializer for state copy-on-write.;public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyValueStateBackendMetaInfo<N, S> metaInfo) {_		this.keyContext = Preconditions.checkNotNull(keyContext)__		this.metaInfo = Preconditions.checkNotNull(metaInfo)__	};param,key,context,the,key,context,provides,the,key,scope,for,all,put,get,delete,operations,param,meta,info,the,meta,information,including,the,type,serializer,for,state,copy,on,write;public,state,table,internal,key,context,k,key,context,registered,key,value,state,backend,meta,info,n,s,meta,info,this,key,context,preconditions,check,not,null,key,context,this,meta,info,preconditions,check,not,null,meta,info
StateTable -> public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyValueStateBackendMetaInfo<N, S> metaInfo);1538063092;@param keyContext the key context provides the key scope for all put/get/delete operations._@param metaInfo the meta information, including the type serializer for state copy-on-write.;public StateTable(InternalKeyContext<K> keyContext, RegisteredKeyValueStateBackendMetaInfo<N, S> metaInfo) {_		this.keyContext = Preconditions.checkNotNull(keyContext)__		this.metaInfo = Preconditions.checkNotNull(metaInfo)__	};param,key,context,the,key,context,provides,the,key,scope,for,all,put,get,delete,operations,param,meta,info,the,meta,information,including,the,type,serializer,for,state,copy,on,write;public,state,table,internal,key,context,k,key,context,registered,key,value,state,backend,meta,info,n,s,meta,info,this,key,context,preconditions,check,not,null,key,context,this,meta,info,preconditions,check,not,null,meta,info
