# id;timestamp;commentText;codeText;commentWords;codeWords
QuickSort -> public void sort(final IndexedSortable s, int p, int r);1405024514;Sort the given range of items using quick sort. {@inheritDoc} If the recursion depth falls below_{@link #getMaxDepth},_then switch to {@link HeapSort}.;public void sort(final IndexedSortable s, int p, int r) {_		sortInternal(s, p, r, getMaxDepth(r - p))__	};sort,the,given,range,of,items,using,quick,sort,inherit,doc,if,the,recursion,depth,falls,below,link,get,max,depth,then,switch,to,link,heap,sort;public,void,sort,final,indexed,sortable,s,int,p,int,r,sort,internal,s,p,r,get,max,depth,r,p
QuickSort -> public void sort(final IndexedSortable s, int p, int r);1405090423;Sort the given range of items using quick sort. {@inheritDoc} If the recursion depth falls below_{@link #getMaxDepth},_then switch to {@link HeapSort}.;public void sort(final IndexedSortable s, int p, int r) {_		sortInternal(s, p, r, getMaxDepth(r - p))__	};sort,the,given,range,of,items,using,quick,sort,inherit,doc,if,the,recursion,depth,falls,below,link,get,max,depth,then,switch,to,link,heap,sort;public,void,sort,final,indexed,sortable,s,int,p,int,r,sort,internal,s,p,r,get,max,depth,r,p
QuickSort -> public void sort(final IndexedSortable s, int p, int r);1411473593;Sort the given range of items using quick sort. {@inheritDoc} If the recursion depth falls below_{@link #getMaxDepth},_then switch to {@link HeapSort}.;public void sort(final IndexedSortable s, int p, int r) {_		sortInternal(s, p, r, getMaxDepth(r - p))__	};sort,the,given,range,of,items,using,quick,sort,inherit,doc,if,the,recursion,depth,falls,below,link,get,max,depth,then,switch,to,link,heap,sort;public,void,sort,final,indexed,sortable,s,int,p,int,r,sort,internal,s,p,r,get,max,depth,r,p
QuickSort -> public void sort(final IndexedSortable s, int p, int r);1493221488;Sort the given range of items using quick sort. {@inheritDoc} If the recursion depth falls below_{@link #getMaxDepth}, then switch to {@link HeapSort}.;public void sort(final IndexedSortable s, int p, int r) {_		int recordsPerSegment = s.recordsPerSegment()__		int recordSize = s.recordSize()__		int maxOffset = recordSize * (recordsPerSegment - 1)___		int pN = p / recordsPerSegment__		int pO = (p % recordsPerSegment) * recordSize___		int rN = r / recordsPerSegment__		int rO = (r % recordsPerSegment) * recordSize___		sortInternal(s, recordsPerSegment, recordSize, maxOffset, p, pN, pO, r, rN, rO, getMaxDepth(r - p))__	};sort,the,given,range,of,items,using,quick,sort,inherit,doc,if,the,recursion,depth,falls,below,link,get,max,depth,then,switch,to,link,heap,sort;public,void,sort,final,indexed,sortable,s,int,p,int,r,int,records,per,segment,s,records,per,segment,int,record,size,s,record,size,int,max,offset,record,size,records,per,segment,1,int,p,n,p,records,per,segment,int,p,o,p,records,per,segment,record,size,int,r,n,r,records,per,segment,int,r,o,r,records,per,segment,record,size,sort,internal,s,records,per,segment,record,size,max,offset,p,p,n,p,o,r,r,n,r,o,get,max,depth,r,p
QuickSort -> protected static int getMaxDepth(int x);1405024514;Deepest recursion before giving up and doing a heapsort._Returns 2 * ceil(log(n)).;protected static int getMaxDepth(int x) {_		if (x <= 0) {_			throw new IllegalArgumentException("Undefined for " + x)__		}_		return (32 - Integer.numberOfLeadingZeros(x - 1)) << 2__	};deepest,recursion,before,giving,up,and,doing,a,heapsort,returns,2,ceil,log,n;protected,static,int,get,max,depth,int,x,if,x,0,throw,new,illegal,argument,exception,undefined,for,x,return,32,integer,number,of,leading,zeros,x,1,2
QuickSort -> protected static int getMaxDepth(int x);1405090423;Deepest recursion before giving up and doing a heapsort._Returns 2 * ceil(log(n)).;protected static int getMaxDepth(int x) {_		if (x <= 0) {_			throw new IllegalArgumentException("Undefined for " + x)__		}_		return (32 - Integer.numberOfLeadingZeros(x - 1)) << 2__	};deepest,recursion,before,giving,up,and,doing,a,heapsort,returns,2,ceil,log,n;protected,static,int,get,max,depth,int,x,if,x,0,throw,new,illegal,argument,exception,undefined,for,x,return,32,integer,number,of,leading,zeros,x,1,2
QuickSort -> protected static int getMaxDepth(int x);1411473593;Deepest recursion before giving up and doing a heapsort._Returns 2 * ceil(log(n)).;protected static int getMaxDepth(int x) {_		if (x <= 0) {_			throw new IllegalArgumentException("Undefined for " + x)__		}_		return (32 - Integer.numberOfLeadingZeros(x - 1)) << 2__	};deepest,recursion,before,giving,up,and,doing,a,heapsort,returns,2,ceil,log,n;protected,static,int,get,max,depth,int,x,if,x,0,throw,new,illegal,argument,exception,undefined,for,x,return,32,integer,number,of,leading,zeros,x,1,2
QuickSort -> protected static int getMaxDepth(int x);1493221488;Deepest recursion before giving up and doing a heapsort._Returns 2 * ceil(log(n)).;protected static int getMaxDepth(int x) {_		if (x <= 0) {_			throw new IllegalArgumentException("Undefined for " + x)__		}_		return (32 - Integer.numberOfLeadingZeros(x - 1)) << 2__	};deepest,recursion,before,giving,up,and,doing,a,heapsort,returns,2,ceil,log,n;protected,static,int,get,max,depth,int,x,if,x,0,throw,new,illegal,argument,exception,undefined,for,x,return,32,integer,number,of,leading,zeros,x,1,2
