# id;timestamp;commentText;codeText;commentWords;codeWords
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public <N> int numStateEntries(N namespace);1485250954;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public <N> int numStateEntries(N namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				Map singleNamespace = typedMap.get(namespace)__				if (singleNamespace != null) {_					sum += singleNamespace.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,suppress,warnings,unchecked,public,n,int,num,state,entries,n,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,map,single,namespace,typed,map,get,namespace,if,single,namespace,null,sum,single,namespace,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public <N> int numStateEntries(N namespace);1487157667;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public <N> int numStateEntries(N namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				Map singleNamespace = typedMap.get(namespace)__				if (singleNamespace != null) {_					sum += singleNamespace.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,suppress,warnings,unchecked,public,n,int,num,state,entries,n,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,map,single,namespace,typed,map,get,namespace,if,single,namespace,null,sum,single,namespace,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public <N> int numStateEntries(N namespace);1487160630;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public <N> int numStateEntries(N namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				Map singleNamespace = typedMap.get(namespace)__				if (singleNamespace != null) {_					sum += singleNamespace.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,suppress,warnings,unchecked,public,n,int,num,state,entries,n,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,map,single,namespace,typed,map,get,namespace,if,single,namespace,null,sum,single,namespace,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public <N> int numStateEntries(N namespace);1487865389;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public <N> int numStateEntries(N namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				Map singleNamespace = typedMap.get(namespace)__				if (singleNamespace != null) {_					sum += singleNamespace.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,suppress,warnings,unchecked,public,n,int,num,state,entries,n,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,map,single,namespace,typed,map,get,namespace,if,single,namespace,null,sum,single,namespace,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public <N> int numStateEntries(N namespace);1487871589;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public <N> int numStateEntries(N namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				Map singleNamespace = typedMap.get(namespace)__				if (singleNamespace != null) {_					sum += singleNamespace.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,suppress,warnings,unchecked,public,n,int,num,state,entries,n,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,map,single,namespace,typed,map,get,namespace,if,single,namespace,null,sum,single,namespace,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public <N> int numStateEntries(N namespace);1489599838;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public <N> int numStateEntries(N namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				Map singleNamespace = typedMap.get(namespace)__				if (singleNamespace != null) {_					sum += singleNamespace.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,suppress,warnings,unchecked,public,n,int,num,state,entries,n,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,map,single,namespace,typed,map,get,namespace,if,single,namespace,null,sum,single,namespace,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1533224436;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1533318024;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1533565670;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1534854671;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1534854671;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1539149054;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1540907751;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1540907751;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1540907751;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1540907751;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1544521602;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1544521602;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1546867949;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1546867949;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1548411242;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1548440094;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1550863001;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1533224436;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1533318024;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1533565670;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1534854671;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1534854671;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1539149054;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1540907751;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1540907751;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1540907751;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1540907751;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1544521602;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1544521602;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1546867949;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1546867949;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1548411242;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1548440094;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1550863001;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1485250954;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				for (Map entriesMap : typedMap.values()) {_					sum += entriesMap.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,for,map,entries,map,typed,map,values,sum,entries,map,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1487157667;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				for (Map entriesMap : typedMap.values()) {_					sum += entriesMap.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,for,map,entries,map,typed,map,values,sum,entries,map,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1487160630;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				for (Map entriesMap : typedMap.values()) {_					sum += entriesMap.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,for,map,entries,map,typed,map,values,sum,entries,map,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1487865389;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				for (Map entriesMap : typedMap.values()) {_					sum += entriesMap.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,for,map,entries,map,typed,map,values,sum,entries,map,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1487871589;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				for (Map entriesMap : typedMap.values()) {_					sum += entriesMap.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,for,map,entries,map,typed,map,values,sum,entries,map,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1489599838;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				for (Map entriesMap : typedMap.values()) {_					sum += entriesMap.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,for,map,entries,map,typed,map,values,sum,entries,map,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1489685642;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1489770896;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1490330043;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1490724328;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1491417674;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1493229257;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1493994606;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1493994606;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1494180263;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1494657469;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1494657925;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1495032411;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1495142368;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1495142372;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1495466666;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1495630287;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1497328697;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1497328715;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1499156246;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1501772617;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1503598628;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1506348255;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1506609393;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @Internal 	@Deprecated 	public Map<String, StateTable<K, ?, ?>> getStateTables();1481115912;REMOVE;@Internal_	@Deprecated_	public Map<String, StateTable<K, ?, ?>> getStateTables() {_		return stateTables__	};remove;internal,deprecated,public,map,string,state,table,k,get,state,tables,return,state,tables
HeapKeyedStateBackend -> @Internal 	@Deprecated 	public Map<String, StateTable<K, ?, ?>> getStateTables();1481734251;REMOVE;@Internal_	@Deprecated_	public Map<String, StateTable<K, ?, ?>> getStateTables() {_		return stateTables__	};remove;internal,deprecated,public,map,string,state,table,k,get,state,tables,return,state,tables
HeapKeyedStateBackend -> @Internal 	@Deprecated 	public Map<String, StateTable<K, ?, ?>> getStateTables();1481734251;REMOVE;@Internal_	@Deprecated_	public Map<String, StateTable<K, ?, ?>> getStateTables() {_		return stateTables__	};remove;internal,deprecated,public,map,string,state,table,k,get,state,tables,return,state,tables
HeapKeyedStateBackend -> @Internal 	@Deprecated 	public Map<String, StateTable<K, ?, ?>> getStateTables();1484216798;REMOVE;@Internal_	@Deprecated_	public Map<String, StateTable<K, ?, ?>> getStateTables() {_		return stateTables__	};remove;internal,deprecated,public,map,string,state,table,k,get,state,tables,return,state,tables
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1489685642;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1489770896;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1490330043;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1490724328;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1491417674;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1493229257;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1493994606;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1493994606;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1494180263;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1494657469;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1494657925;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1495032411;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1495142368;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1495142372;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1495466666;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1495630287;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1497328697;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1497328715;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1499156246;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1501772617;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1503598628;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1506348255;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1506609393;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1506610974;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1516712632;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1517489695;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1519568061;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1519568061;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1522325571;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1522337739;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1524760045;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1524906327;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1525332388;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1525661782;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1526313052;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1529089579;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1529325710;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1531145571;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1531404901;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1531419503;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1531771917;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateSnapshotRestore state : registeredStates.values()) {_			if (state instanceof StateTable) {_				sum += ((StateTable<?, ?, ?>) state).sizeOfNamespace(namespace)__			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,snapshot,restore,state,registered,states,values,if,state,instanceof,state,table,sum,state,table,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1491417674;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1493229257;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1493994606;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1493994606;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1494180263;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1494657469;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1494657925;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1495032411;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1495142368;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1495142372;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1495466666;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1495630287;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1497328697;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1497328715;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)___				_				restoredKvStateMetaInfos.put(stateName, rawResultMap.getMetaInfo().snapshot())___				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,restored,kv,state,meta,infos,put,state,name,raw,result,map,get,meta,info,snapshot,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1499156246;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)___				_				restoredKvStateMetaInfos.put(stateName, rawResultMap.getMetaInfo().snapshot())___				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,restored,kv,state,meta,infos,put,state,name,raw,result,map,get,meta,info,snapshot,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1501772617;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)___				_				restoredKvStateMetaInfos.put(stateName, rawResultMap.getMetaInfo().snapshot())___				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,restored,kv,state,meta,infos,put,state,name,raw,result,map,get,meta,info,snapshot,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1506610974;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1516712632;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1517489695;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1519568061;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1519568061;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1522325571;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1522337739;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1524760045;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1524906327;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1525332388;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1525661782;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1526313052;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1529089579;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1529325710;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1531145571;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1531404901;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1531419503;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1531771917;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredStates.values()) {_			if (state instanceof StateTable) {_				sum += ((StateTable<?, ?, ?>) state).size()__			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,states,values,if,state,instanceof,state,table,sum,state,table,state,size,return,sum
