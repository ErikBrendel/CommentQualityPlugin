# id;timestamp;commentText;codeText;commentWords;codeWords
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public <N> int numStateEntries(N namespace);1473069671;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public <N> int numStateEntries(N namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				Map singleNamespace = typedMap.get(namespace)__				if (singleNamespace != null) {_					sum += singleNamespace.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,suppress,warnings,unchecked,public,n,int,num,state,entries,n,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,map,single,namespace,typed,map,get,namespace,if,single,namespace,null,sum,single,namespace,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public <N> int numStateEntries(N namespace);1487050770;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public <N> int numStateEntries(N namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				Map singleNamespace = typedMap.get(namespace)__				if (singleNamespace != null) {_					sum += singleNamespace.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,suppress,warnings,unchecked,public,n,int,num,state,entries,n,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,map,single,namespace,typed,map,get,namespace,if,single,namespace,null,sum,single,namespace,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public <N> int numStateEntries(N namespace);1487082723;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public <N> int numStateEntries(N namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				Map singleNamespace = typedMap.get(namespace)__				if (singleNamespace != null) {_					sum += singleNamespace.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,suppress,warnings,unchecked,public,n,int,num,state,entries,n,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,map,single,namespace,typed,map,get,namespace,if,single,namespace,null,sum,single,namespace,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public <N> int numStateEntries(N namespace);1487264183;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public <N> int numStateEntries(N namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				Map singleNamespace = typedMap.get(namespace)__				if (singleNamespace != null) {_					sum += singleNamespace.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,suppress,warnings,unchecked,public,n,int,num,state,entries,n,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,map,single,namespace,typed,map,get,namespace,if,single,namespace,null,sum,single,namespace,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public <N> int numStateEntries(N namespace);1487301558;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public <N> int numStateEntries(N namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				Map singleNamespace = typedMap.get(namespace)__				if (singleNamespace != null) {_					sum += singleNamespace.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,suppress,warnings,unchecked,public,n,int,num,state,entries,n,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,map,single,namespace,typed,map,get,namespace,if,single,namespace,null,sum,single,namespace,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public <N> int numStateEntries(N namespace);1489501613;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public <N> int numStateEntries(N namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				Map singleNamespace = typedMap.get(namespace)__				if (singleNamespace != null) {_					sum += singleNamespace.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,suppress,warnings,unchecked,public,n,int,num,state,entries,n,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,map,single,namespace,typed,map,get,namespace,if,single,namespace,null,sum,single,namespace,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1527944704;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1532695767;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1533313087;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1533650247;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1533846222;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1536657741;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1539855910;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1540380319;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1540457326;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1540739847;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1544186850;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1544425667;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1544700166;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1545062987;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1545145598;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1545550284;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numKeyValueStateEntries(Object namespace);1550863001;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numKeyValueStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<?, ?, ?> state : registeredKVStates.values()) {_			sum += state.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,key,value,state,entries,object,namespace,int,sum,0,for,state,table,state,registered,kvstates,values,sum,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1527944704;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1532695767;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1533313087;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1533650247;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1533846222;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1536657741;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1539855910;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1540380319;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1540457326;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1540739847;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1544186850;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1544425667;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1544700166;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1545062987;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1545145598;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1545550284;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numKeyValueStateEntries();1550863001;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numKeyValueStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredKVStates.values()) {_			sum += ((StateTable<?, ?, ?>) state).size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,key,value,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,kvstates,values,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception;1475420201;------------------------------------------------------------------------;@SuppressWarnings("unchecked")_	@Override_	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception {_		StateTable<K, N, V> stateTable = (StateTable<K, N, V>) stateTables.get(stateDesc.getName())___		if (stateTable == null) {_			stateTable = new StateTable<>(stateDesc.getSerializer(), namespaceSerializer, keyGroupRange)__			stateTables.put(stateDesc.getName(), stateTable)__		}__		return new HeapValueState<>(this, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};;suppress,warnings,unchecked,override,public,n,v,value,state,v,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,v,state,desc,throws,exception,state,table,k,n,v,state,table,state,table,k,n,v,state,tables,get,state,desc,get,name,if,state,table,null,state,table,new,state,table,state,desc,get,serializer,namespace,serializer,key,group,range,state,tables,put,state,desc,get,name,state,table,return,new,heap,value,state,this,state,desc,state,table,key,serializer,namespace,serializer
HeapKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception;1475420201;state backend operations;@SuppressWarnings("unchecked")_	@Override_	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception {_		StateTable<K, N, V> stateTable = (StateTable<K, N, V>) stateTables.get(stateDesc.getName())___		if (stateTable == null) {_			stateTable = new StateTable<>(stateDesc.getSerializer(), namespaceSerializer, keyGroupRange)__			stateTables.put(stateDesc.getName(), stateTable)__		}__		return new HeapValueState<>(this, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};state,backend,operations;suppress,warnings,unchecked,override,public,n,v,value,state,v,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,v,state,desc,throws,exception,state,table,k,n,v,state,table,state,table,k,n,v,state,tables,get,state,desc,get,name,if,state,table,null,state,table,new,state,table,state,desc,get,serializer,namespace,serializer,key,group,range,state,tables,put,state,desc,get,name,state,table,return,new,heap,value,state,this,state,desc,state,table,key,serializer,namespace,serializer
HeapKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception;1475420201;------------------------------------------------------------------------;@SuppressWarnings("unchecked")_	@Override_	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception {_		StateTable<K, N, V> stateTable = (StateTable<K, N, V>) stateTables.get(stateDesc.getName())___		if (stateTable == null) {_			stateTable = new StateTable<>(stateDesc.getSerializer(), namespaceSerializer, keyGroupRange)__			stateTables.put(stateDesc.getName(), stateTable)__		}__		return new HeapValueState<>(this, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};;suppress,warnings,unchecked,override,public,n,v,value,state,v,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,v,state,desc,throws,exception,state,table,k,n,v,state,table,state,table,k,n,v,state,tables,get,state,desc,get,name,if,state,table,null,state,table,new,state,table,state,desc,get,serializer,namespace,serializer,key,group,range,state,tables,put,state,desc,get,name,state,table,return,new,heap,value,state,this,state,desc,state,table,key,serializer,namespace,serializer
HeapKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception;1475571578;------------------------------------------------------------------------;@SuppressWarnings("unchecked")_	@Override_	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception {_		StateTable<K, N, V> stateTable = (StateTable<K, N, V>) stateTables.get(stateDesc.getName())___		if (stateTable == null) {_			stateTable = new StateTable<>(stateDesc.getSerializer(), namespaceSerializer, keyGroupRange)__			stateTables.put(stateDesc.getName(), stateTable)__		}__		return new HeapValueState<>(this, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};;suppress,warnings,unchecked,override,public,n,v,value,state,v,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,v,state,desc,throws,exception,state,table,k,n,v,state,table,state,table,k,n,v,state,tables,get,state,desc,get,name,if,state,table,null,state,table,new,state,table,state,desc,get,serializer,namespace,serializer,key,group,range,state,tables,put,state,desc,get,name,state,table,return,new,heap,value,state,this,state,desc,state,table,key,serializer,namespace,serializer
HeapKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception;1475571578;state backend operations;@SuppressWarnings("unchecked")_	@Override_	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception {_		StateTable<K, N, V> stateTable = (StateTable<K, N, V>) stateTables.get(stateDesc.getName())___		if (stateTable == null) {_			stateTable = new StateTable<>(stateDesc.getSerializer(), namespaceSerializer, keyGroupRange)__			stateTables.put(stateDesc.getName(), stateTable)__		}__		return new HeapValueState<>(this, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};state,backend,operations;suppress,warnings,unchecked,override,public,n,v,value,state,v,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,v,state,desc,throws,exception,state,table,k,n,v,state,table,state,table,k,n,v,state,tables,get,state,desc,get,name,if,state,table,null,state,table,new,state,table,state,desc,get,serializer,namespace,serializer,key,group,range,state,tables,put,state,desc,get,name,state,table,return,new,heap,value,state,this,state,desc,state,table,key,serializer,namespace,serializer
HeapKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception;1475571578;------------------------------------------------------------------------;@SuppressWarnings("unchecked")_	@Override_	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception {_		StateTable<K, N, V> stateTable = (StateTable<K, N, V>) stateTables.get(stateDesc.getName())___		if (stateTable == null) {_			stateTable = new StateTable<>(stateDesc.getSerializer(), namespaceSerializer, keyGroupRange)__			stateTables.put(stateDesc.getName(), stateTable)__		}__		return new HeapValueState<>(this, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};;suppress,warnings,unchecked,override,public,n,v,value,state,v,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,v,state,desc,throws,exception,state,table,k,n,v,state,table,state,table,k,n,v,state,tables,get,state,desc,get,name,if,state,table,null,state,table,new,state,table,state,desc,get,serializer,namespace,serializer,key,group,range,state,tables,put,state,desc,get,name,state,table,return,new,heap,value,state,this,state,desc,state,table,key,serializer,namespace,serializer
HeapKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception;1477999741;------------------------------------------------------------------------;@SuppressWarnings("unchecked")_	@Override_	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception {_		StateTable<K, N, V> stateTable = (StateTable<K, N, V>) stateTables.get(stateDesc.getName())___		if (stateTable == null) {_			stateTable = new StateTable<>(stateDesc.getSerializer(), namespaceSerializer, keyGroupRange)__			stateTables.put(stateDesc.getName(), stateTable)__		}__		return new HeapValueState<>(this, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};;suppress,warnings,unchecked,override,public,n,v,value,state,v,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,v,state,desc,throws,exception,state,table,k,n,v,state,table,state,table,k,n,v,state,tables,get,state,desc,get,name,if,state,table,null,state,table,new,state,table,state,desc,get,serializer,namespace,serializer,key,group,range,state,tables,put,state,desc,get,name,state,table,return,new,heap,value,state,this,state,desc,state,table,key,serializer,namespace,serializer
HeapKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception;1477999741;state backend operations;@SuppressWarnings("unchecked")_	@Override_	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception {_		StateTable<K, N, V> stateTable = (StateTable<K, N, V>) stateTables.get(stateDesc.getName())___		if (stateTable == null) {_			stateTable = new StateTable<>(stateDesc.getSerializer(), namespaceSerializer, keyGroupRange)__			stateTables.put(stateDesc.getName(), stateTable)__		}__		return new HeapValueState<>(this, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};state,backend,operations;suppress,warnings,unchecked,override,public,n,v,value,state,v,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,v,state,desc,throws,exception,state,table,k,n,v,state,table,state,table,k,n,v,state,tables,get,state,desc,get,name,if,state,table,null,state,table,new,state,table,state,desc,get,serializer,namespace,serializer,key,group,range,state,tables,put,state,desc,get,name,state,table,return,new,heap,value,state,this,state,desc,state,table,key,serializer,namespace,serializer
HeapKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception;1477999741;------------------------------------------------------------------------;@SuppressWarnings("unchecked")_	@Override_	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception {_		StateTable<K, N, V> stateTable = (StateTable<K, N, V>) stateTables.get(stateDesc.getName())___		if (stateTable == null) {_			stateTable = new StateTable<>(stateDesc.getSerializer(), namespaceSerializer, keyGroupRange)__			stateTables.put(stateDesc.getName(), stateTable)__		}__		return new HeapValueState<>(this, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};;suppress,warnings,unchecked,override,public,n,v,value,state,v,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,v,state,desc,throws,exception,state,table,k,n,v,state,table,state,table,k,n,v,state,tables,get,state,desc,get,name,if,state,table,null,state,table,new,state,table,state,desc,get,serializer,namespace,serializer,key,group,range,state,tables,put,state,desc,get,name,state,table,return,new,heap,value,state,this,state,desc,state,table,key,serializer,namespace,serializer
HeapKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception;1481142215;------------------------------------------------------------------------;@SuppressWarnings("unchecked")_	@Override_	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception {_		StateTable<K, N, V> stateTable = (StateTable<K, N, V>) stateTables.get(stateDesc.getName())___		if (stateTable == null) {_			stateTable = new StateTable<>(stateDesc.getSerializer(), namespaceSerializer, keyGroupRange)__			stateTables.put(stateDesc.getName(), stateTable)__		}__		return new HeapValueState<>(this, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};;suppress,warnings,unchecked,override,public,n,v,value,state,v,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,v,state,desc,throws,exception,state,table,k,n,v,state,table,state,table,k,n,v,state,tables,get,state,desc,get,name,if,state,table,null,state,table,new,state,table,state,desc,get,serializer,namespace,serializer,key,group,range,state,tables,put,state,desc,get,name,state,table,return,new,heap,value,state,this,state,desc,state,table,key,serializer,namespace,serializer
HeapKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception;1481142215;state backend operations;@SuppressWarnings("unchecked")_	@Override_	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception {_		StateTable<K, N, V> stateTable = (StateTable<K, N, V>) stateTables.get(stateDesc.getName())___		if (stateTable == null) {_			stateTable = new StateTable<>(stateDesc.getSerializer(), namespaceSerializer, keyGroupRange)__			stateTables.put(stateDesc.getName(), stateTable)__		}__		return new HeapValueState<>(this, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};state,backend,operations;suppress,warnings,unchecked,override,public,n,v,value,state,v,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,v,state,desc,throws,exception,state,table,k,n,v,state,table,state,table,k,n,v,state,tables,get,state,desc,get,name,if,state,table,null,state,table,new,state,table,state,desc,get,serializer,namespace,serializer,key,group,range,state,tables,put,state,desc,get,name,state,table,return,new,heap,value,state,this,state,desc,state,table,key,serializer,namespace,serializer
HeapKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception;1481142215;------------------------------------------------------------------------;@SuppressWarnings("unchecked")_	@Override_	public <N, V> ValueState<V> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<V> stateDesc) throws Exception {_		StateTable<K, N, V> stateTable = (StateTable<K, N, V>) stateTables.get(stateDesc.getName())___		if (stateTable == null) {_			stateTable = new StateTable<>(stateDesc.getSerializer(), namespaceSerializer, keyGroupRange)__			stateTables.put(stateDesc.getName(), stateTable)__		}__		return new HeapValueState<>(this, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};;suppress,warnings,unchecked,override,public,n,v,value,state,v,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,v,state,desc,throws,exception,state,table,k,n,v,state,table,state,table,k,n,v,state,tables,get,state,desc,get,name,if,state,table,null,state,table,new,state,table,state,desc,get,serializer,namespace,serializer,key,group,range,state,tables,put,state,desc,get,name,state,table,return,new,heap,value,state,this,state,desc,state,table,key,serializer,namespace,serializer
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1473069671;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				for (Map entriesMap : typedMap.values()) {_					sum += entriesMap.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,for,map,entries,map,typed,map,values,sum,entries,map,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1487050770;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				for (Map entriesMap : typedMap.values()) {_					sum += entriesMap.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,for,map,entries,map,typed,map,values,sum,entries,map,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1487082723;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				for (Map entriesMap : typedMap.values()) {_					sum += entriesMap.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,for,map,entries,map,typed,map,values,sum,entries,map,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1487264183;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				for (Map entriesMap : typedMap.values()) {_					sum += entriesMap.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,for,map,entries,map,typed,map,values,sum,entries,map,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1487301558;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				for (Map entriesMap : typedMap.values()) {_					sum += entriesMap.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,for,map,entries,map,typed,map,values,sum,entries,map,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1488534675;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1489164945;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1489497957;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1489501613;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			for (Map namespaceMap : stateTable.getState()) {_				if (namespaceMap == null) {_					continue__				}_				Map<?, Map> typedMap = (Map<?, Map>) namespaceMap__				for (Map entriesMap : typedMap.values()) {_					sum += entriesMap.size()__				}_			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,for,map,namespace,map,state,table,get,state,if,namespace,map,null,continue,map,map,typed,map,map,map,namespace,map,for,map,entries,map,typed,map,values,sum,entries,map,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1489673825;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1490006752;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1490283135;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1493480676;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1493982586;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1494180263;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1494587485;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1494590761;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1494954957;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1495090293;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1495118475;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1495119950;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1495613719;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1496248632;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1496608826;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1497370070;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1499712092;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1503588494;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1504776252;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	public int numStateEntries();1505385570;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @Internal 	@Deprecated 	public Map<String, StateTable<K, ?, ?>> getStateTables();1477999741;REMOVE;@Internal_	@Deprecated_	public Map<String, StateTable<K, ?, ?>> getStateTables() {_		return stateTables__	};remove;internal,deprecated,public,map,string,state,table,k,get,state,tables,return,state,tables
HeapKeyedStateBackend -> @Internal 	@Deprecated 	public Map<String, StateTable<K, ?, ?>> getStateTables();1480004964;REMOVE;@Internal_	@Deprecated_	public Map<String, StateTable<K, ?, ?>> getStateTables() {_		return stateTables__	};remove;internal,deprecated,public,map,string,state,table,k,get,state,tables,return,state,tables
HeapKeyedStateBackend -> @Internal 	@Deprecated 	public Map<String, StateTable<K, ?, ?>> getStateTables();1481142215;REMOVE;@Internal_	@Deprecated_	public Map<String, StateTable<K, ?, ?>> getStateTables() {_		return stateTables__	};remove;internal,deprecated,public,map,string,state,table,k,get,state,tables,return,state,tables
HeapKeyedStateBackend -> @Internal 	@Deprecated 	public Map<String, StateTable<K, ?, ?>> getStateTables();1483656313;REMOVE;@Internal_	@Deprecated_	public Map<String, StateTable<K, ?, ?>> getStateTables() {_		return stateTables__	};remove;internal,deprecated,public,map,string,state,table,k,get,state,tables,return,state,tables
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1478251075;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1488534675;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1489164945;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1489497957;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1489673825;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1490006752;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1490283135;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1493480676;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1493982586;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1494180263;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1494587485;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1494590761;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1494954957;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1495090293;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1495118475;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1495119950;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1495613719;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1496248632;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1496608826;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1497370070;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1499712092;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1503588494;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1504776252;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1505385570;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1516512578;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1516988262;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1517924641;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1519211039;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1520632055;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1521775242;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1524230142;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1524574114;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1524883841;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1525332655;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1526289287;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1528721286;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1528878250;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1528883776;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateSnapshotRestore state : registeredStates.values()) {_			if (state instanceof StateTable) {_				sum += ((StateTable<?, ?, ?>) state).sizeOfNamespace(namespace)__			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,snapshot,restore,state,registered,states,values,if,state,instanceof,state,table,sum,state,table,state,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1530638621;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1530704629;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	public int numStateEntries(Object namespace);1531300271;Returns the total number of state entries across all keys for the given namespace.;@VisibleForTesting_	public int numStateEntries(Object namespace) {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.sizeOfNamespace(namespace)__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,for,the,given,namespace;visible,for,testing,public,int,num,state,entries,object,namespace,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,of,namespace,namespace,return,sum
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1489497957;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1490006752;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1493480676;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1493982586;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1494180263;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1494587485;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1494590761;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1494954957;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1495090293;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1495118475;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1495119950;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1495613719;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1496248632;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)__				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1496608826;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)___				_				restoredKvStateMetaInfos.put(stateName, rawResultMap.getMetaInfo().snapshot())___				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,restored,kv,state,meta,infos,put,state,name,raw,result,map,get,meta,info,snapshot,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1497370070;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)___				_				restoredKvStateMetaInfos.put(stateName, rawResultMap.getMetaInfo().snapshot())___				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,restored,kv,state,meta,infos,put,state,name,raw,result,map,get,meta,info,snapshot,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"}) 	@Deprecated 	private void restoreOldSavepointKeyedState( 			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException;1499712092;@deprecated Used for backwards compatibility with previous savepoint versions.;@SuppressWarnings({"unchecked", "rawtypes", "DeprecatedIsStillUsed"})_	@Deprecated_	private void restoreOldSavepointKeyedState(_			Collection<KeyedStateHandle> stateHandles) throws IOException, ClassNotFoundException {__		if (stateHandles.isEmpty()) {_			return__		}__		Preconditions.checkState(1 == stateHandles.size(), "Only one element expected here.")___		KeyedStateHandle keyedStateHandle = stateHandles.iterator().next()__		if (!(keyedStateHandle instanceof MigrationKeyGroupStateHandle)) {_			throw new IllegalStateException("Unexpected state handle type, " +_					"expected: " + MigrationKeyGroupStateHandle.class +_					", but found " + keyedStateHandle.getClass())__		}__		MigrationKeyGroupStateHandle keyGroupStateHandle = (MigrationKeyGroupStateHandle) keyedStateHandle___		HashMap<String, KvStateSnapshot<K, ?, ?, ?>> namedStates__		try (FSDataInputStream inputStream = keyGroupStateHandle.openInputStream()) {_			namedStates = InstantiationUtil.deserializeObject(inputStream, userCodeClassLoader)__		}__		for (Map.Entry<String, KvStateSnapshot<K, ?, ?, ?>> nameToState : namedStates.entrySet()) {__			final String stateName = nameToState.getKey()__			final KvStateSnapshot<K, ?, ?, ?> genericSnapshot = nameToState.getValue()___			if (genericSnapshot instanceof MigrationRestoreSnapshot) {_				MigrationRestoreSnapshot<K, ?, ?> stateSnapshot = (MigrationRestoreSnapshot<K, ?, ?>) genericSnapshot__				final StateTable rawResultMap =_						stateSnapshot.deserialize(stateName, this)___				_				restoredKvStateMetaInfos.put(stateName, rawResultMap.getMetaInfo().snapshot())___				_				stateTables.put(stateName, rawResultMap)__			} else {_				throw new IllegalStateException("Unknown state: " + genericSnapshot)__			}_		}_	};deprecated,used,for,backwards,compatibility,with,previous,savepoint,versions;suppress,warnings,unchecked,rawtypes,deprecated,is,still,used,deprecated,private,void,restore,old,savepoint,keyed,state,collection,keyed,state,handle,state,handles,throws,ioexception,class,not,found,exception,if,state,handles,is,empty,return,preconditions,check,state,1,state,handles,size,only,one,element,expected,here,keyed,state,handle,keyed,state,handle,state,handles,iterator,next,if,keyed,state,handle,instanceof,migration,key,group,state,handle,throw,new,illegal,state,exception,unexpected,state,handle,type,expected,migration,key,group,state,handle,class,but,found,keyed,state,handle,get,class,migration,key,group,state,handle,key,group,state,handle,migration,key,group,state,handle,keyed,state,handle,hash,map,string,kv,state,snapshot,k,named,states,try,fsdata,input,stream,input,stream,key,group,state,handle,open,input,stream,named,states,instantiation,util,deserialize,object,input,stream,user,code,class,loader,for,map,entry,string,kv,state,snapshot,k,name,to,state,named,states,entry,set,final,string,state,name,name,to,state,get,key,final,kv,state,snapshot,k,generic,snapshot,name,to,state,get,value,if,generic,snapshot,instanceof,migration,restore,snapshot,migration,restore,snapshot,k,state,snapshot,migration,restore,snapshot,k,generic,snapshot,final,state,table,raw,result,map,state,snapshot,deserialize,state,name,this,restored,kv,state,meta,infos,put,state,name,raw,result,map,get,meta,info,snapshot,state,tables,put,state,name,raw,result,map,else,throw,new,illegal,state,exception,unknown,state,generic,snapshot
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1478251075;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1516512578;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1516988262;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1517924641;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1519211039;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1520632055;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1521775242;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1524230142;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1524574114;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1524883841;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1525332655;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1526289287;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1528721286;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1528878250;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1528883776;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateSnapshotRestore state : registeredStates.values()) {_			if (state instanceof StateTable) {_				sum += ((StateTable<?, ?, ?>) state).size()__			}_		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,snapshot,restore,state,registered,states,values,if,state,instanceof,state,table,sum,state,table,state,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1530638621;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1530704629;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
HeapKeyedStateBackend -> @VisibleForTesting 	@SuppressWarnings("unchecked") 	@Override 	public int numStateEntries();1531300271;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	@SuppressWarnings("unchecked")_	@Override_	public int numStateEntries() {_		int sum = 0__		for (StateTable<K, ?, ?> stateTable : stateTables.values()) {_			sum += stateTable.size()__		}_		return sum__	};returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,suppress,warnings,unchecked,override,public,int,num,state,entries,int,sum,0,for,state,table,k,state,table,state,tables,values,sum,state,table,size,return,sum
