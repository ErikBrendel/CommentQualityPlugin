# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractHeapState -> protected <MK, MV> Map<MK, MV> createNewMap();1470847490;Creates a new map for use in Heap based state.__<p>If the state queryable ({@link StateDescriptor#isQueryable()}, this_will create a concurrent hash map instead of a regular one.__@return A new namespace map.;protected <MK, MV> Map<MK, MV> createNewMap() {_		if (stateDesc.isQueryable()) {_			return new ConcurrentHashMap<>()__		} else {_			return new HashMap<>()__		}_	};creates,a,new,map,for,use,in,heap,based,state,p,if,the,state,queryable,link,state,descriptor,is,queryable,this,will,create,a,concurrent,hash,map,instead,of,a,regular,one,return,a,new,namespace,map;protected,mk,mv,map,mk,mv,create,new,map,if,state,desc,is,queryable,return,new,concurrent,hash,map,else,return,new,hash,map
AbstractHeapState -> protected <MK, MV> Map<MK, MV> createNewMap();1472464402;Creates a new map for use in Heap based state.__<p>If the state queryable ({@link StateDescriptor#isQueryable()}, this_will create a concurrent hash map instead of a regular one.__@return A new namespace map.;protected <MK, MV> Map<MK, MV> createNewMap() {_		if (stateDesc.isQueryable()) {_			return new ConcurrentHashMap<>()__		} else {_			return new HashMap<>()__		}_	};creates,a,new,map,for,use,in,heap,based,state,p,if,the,state,queryable,link,state,descriptor,is,queryable,this,will,create,a,concurrent,hash,map,instead,of,a,regular,one,return,a,new,namespace,map;protected,mk,mv,map,mk,mv,create,new,map,if,state,desc,is,queryable,return,new,concurrent,hash,map,else,return,new,hash,map
AbstractHeapState -> protected <MK, MV> Map<MK, MV> createNewMap();1484317029;Creates a new map for use in Heap based state.__<p>If the state queryable ({@link StateDescriptor#isQueryable()}, this_will create a concurrent hash map instead of a regular one.__@return A new namespace map.;protected <MK, MV> Map<MK, MV> createNewMap() {_		if (stateDesc.isQueryable()) {_			return new ConcurrentHashMap<>()__		} else {_			return new HashMap<>()__		}_	};creates,a,new,map,for,use,in,heap,based,state,p,if,the,state,queryable,link,state,descriptor,is,queryable,this,will,create,a,concurrent,hash,map,instead,of,a,regular,one,return,a,new,namespace,map;protected,mk,mv,map,mk,mv,create,new,map,if,state,desc,is,queryable,return,new,concurrent,hash,map,else,return,new,hash,map
AbstractHeapState -> protected AbstractHeapState( 			SD stateDesc, 			StateTable<K, N, SV> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1488534675;Creates a new key/value state for the given hash map of key/value pairs.__@param stateDesc The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;protected AbstractHeapState(_			SD stateDesc,_			StateTable<K, N, SV> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {__		this.stateDesc = stateDesc__		this.stateTable = Preconditions.checkNotNull(stateTable, "State table must not be null.")__		this.keySerializer = keySerializer__		this.namespaceSerializer = namespaceSerializer__		this.currentNamespace = null__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;protected,abstract,heap,state,sd,state,desc,state,table,k,n,sv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,this,state,desc,state,desc,this,state,table,preconditions,check,not,null,state,table,state,table,must,not,be,null,this,key,serializer,key,serializer,this,namespace,serializer,namespace,serializer,this,current,namespace,null
AbstractHeapState -> protected AbstractHeapState( 			SD stateDesc, 			StateTable<K, N, SV> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1507137069;Creates a new key/value state for the given hash map of key/value pairs.__@param stateDesc The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;protected AbstractHeapState(_			SD stateDesc,_			StateTable<K, N, SV> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {__		this.stateDesc = stateDesc__		this.stateTable = Preconditions.checkNotNull(stateTable, "State table must not be null.")__		this.keySerializer = keySerializer__		this.namespaceSerializer = namespaceSerializer__		this.currentNamespace = null__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;protected,abstract,heap,state,sd,state,desc,state,table,k,n,sv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,this,state,desc,state,desc,this,state,table,preconditions,check,not,null,state,table,state,table,must,not,be,null,this,key,serializer,key,serializer,this,namespace,serializer,namespace,serializer,this,current,namespace,null
AbstractHeapState -> protected AbstractHeapState( 			SD stateDesc, 			StateTable<K, N, SV> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1508840168;Creates a new key/value state for the given hash map of key/value pairs.__@param stateDesc The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;protected AbstractHeapState(_			SD stateDesc,_			StateTable<K, N, SV> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {__		this.stateDesc = stateDesc__		this.stateTable = Preconditions.checkNotNull(stateTable, "State table must not be null.")__		this.keySerializer = keySerializer__		this.namespaceSerializer = namespaceSerializer__		this.currentNamespace = null__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;protected,abstract,heap,state,sd,state,desc,state,table,k,n,sv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,this,state,desc,state,desc,this,state,table,preconditions,check,not,null,state,table,state,table,must,not,be,null,this,key,serializer,key,serializer,this,namespace,serializer,namespace,serializer,this,current,namespace,null
AbstractHeapState -> protected AbstractHeapState( 			SD stateDesc, 			StateTable<K, N, SV> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1520632055;Creates a new key/value state for the given hash map of key/value pairs.__@param stateDesc The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;protected AbstractHeapState(_			SD stateDesc,_			StateTable<K, N, SV> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {__		this.stateDesc = stateDesc__		this.stateTable = Preconditions.checkNotNull(stateTable, "State table must not be null.")__		this.keySerializer = keySerializer__		this.namespaceSerializer = namespaceSerializer__		this.currentNamespace = null__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;protected,abstract,heap,state,sd,state,desc,state,table,k,n,sv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,this,state,desc,state,desc,this,state,table,preconditions,check,not,null,state,table,state,table,must,not,be,null,this,key,serializer,key,serializer,this,namespace,serializer,namespace,serializer,this,current,namespace,null
AbstractHeapState -> protected AbstractHeapState( 			SD stateDesc, 			StateTable<K, N, SV> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1521015764;Creates a new key/value state for the given hash map of key/value pairs.__@param stateDesc The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;protected AbstractHeapState(_			SD stateDesc,_			StateTable<K, N, SV> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {__		this.stateDesc = stateDesc__		this.stateTable = Preconditions.checkNotNull(stateTable, "State table must not be null.")__		this.keySerializer = keySerializer__		this.namespaceSerializer = namespaceSerializer__		this.currentNamespace = null__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;protected,abstract,heap,state,sd,state,desc,state,table,k,n,sv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,this,state,desc,state,desc,this,state,table,preconditions,check,not,null,state,table,state,table,must,not,be,null,this,key,serializer,key,serializer,this,namespace,serializer,namespace,serializer,this,current,namespace,null
AbstractHeapState -> public StateTable<K, N, SV> getStateTable();1470847490;This should only be used for testing.;public StateTable<K, N, SV> getStateTable() {_		return stateTable__	};this,should,only,be,used,for,testing;public,state,table,k,n,sv,get,state,table,return,state,table
AbstractHeapState -> public StateTable<K, N, SV> getStateTable();1472464402;This should only be used for testing.;public StateTable<K, N, SV> getStateTable() {_		return stateTable__	};this,should,only,be,used,for,testing;public,state,table,k,n,sv,get,state,table,return,state,table
AbstractHeapState -> public StateTable<K, N, SV> getStateTable();1484317029;This should only be used for testing.;public StateTable<K, N, SV> getStateTable() {_		return stateTable__	};this,should,only,be,used,for,testing;public,state,table,k,n,sv,get,state,table,return,state,table
AbstractHeapState -> @VisibleForTesting 	public StateTable<K, N, SV> getStateTable();1488534675;This should only be used for testing.;@VisibleForTesting_	public StateTable<K, N, SV> getStateTable() {_		return stateTable__	};this,should,only,be,used,for,testing;visible,for,testing,public,state,table,k,n,sv,get,state,table,return,state,table
AbstractHeapState -> @VisibleForTesting 	public StateTable<K, N, SV> getStateTable();1507137069;This should only be used for testing.;@VisibleForTesting_	public StateTable<K, N, SV> getStateTable() {_		return stateTable__	};this,should,only,be,used,for,testing;visible,for,testing,public,state,table,k,n,sv,get,state,table,return,state,table
AbstractHeapState -> @VisibleForTesting 	public StateTable<K, N, SV> getStateTable();1508840168;This should only be used for testing.;@VisibleForTesting_	public StateTable<K, N, SV> getStateTable() {_		return stateTable__	};this,should,only,be,used,for,testing;visible,for,testing,public,state,table,k,n,sv,get,state,table,return,state,table
AbstractHeapState -> @VisibleForTesting 	public StateTable<K, N, SV> getStateTable();1520632055;This should only be used for testing.;@VisibleForTesting_	public StateTable<K, N, SV> getStateTable() {_		return stateTable__	};this,should,only,be,used,for,testing;visible,for,testing,public,state,table,k,n,sv,get,state,table,return,state,table
AbstractHeapState -> @VisibleForTesting 	public StateTable<K, N, SV> getStateTable();1521015764;This should only be used for testing.;@VisibleForTesting_	public StateTable<K, N, SV> getStateTable() {_		return stateTable__	};this,should,only,be,used,for,testing;visible,for,testing,public,state,table,k,n,sv,get,state,table,return,state,table
AbstractHeapState -> @VisibleForTesting 	public StateTable<K, N, SV> getStateTable();1524230142;This should only be used for testing.;@VisibleForTesting_	public StateTable<K, N, SV> getStateTable() {_		return stateTable__	};this,should,only,be,used,for,testing;visible,for,testing,public,state,table,k,n,sv,get,state,table,return,state,table
AbstractHeapState -> @VisibleForTesting 	public StateTable<K, N, SV> getStateTable();1528817060;This should only be used for testing.;@VisibleForTesting_	public StateTable<K, N, SV> getStateTable() {_		return stateTable__	};this,should,only,be,used,for,testing;visible,for,testing,public,state,table,k,n,sv,get,state,table,return,state,table
AbstractHeapState -> @VisibleForTesting 	public StateTable<K, N, SV> getStateTable();1538063092;This should only be used for testing.;@VisibleForTesting_	public StateTable<K, N, SV> getStateTable() {_		return stateTable__	};this,should,only,be,used,for,testing;visible,for,testing,public,state,table,k,n,sv,get,state,table,return,state,table
AbstractHeapState -> protected AbstractHeapState( 			KeyedStateBackend<K> backend, 			SD stateDesc, 			StateTable<K, N, SV> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1470847490;Creates a new key/value state for the given hash map of key/value pairs.__@param backend The state backend backing that created this state._@param stateDesc The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;protected AbstractHeapState(_			KeyedStateBackend<K> backend,_			SD stateDesc,_			StateTable<K, N, SV> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {__		Preconditions.checkNotNull(stateTable, "State table must not be null.")___		this.backend = backend__		this.stateDesc = stateDesc__		this.stateTable = stateTable__		this.keySerializer = keySerializer__		this.namespaceSerializer = namespaceSerializer__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,backend,the,state,backend,backing,that,created,this,state,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;protected,abstract,heap,state,keyed,state,backend,k,backend,sd,state,desc,state,table,k,n,sv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,preconditions,check,not,null,state,table,state,table,must,not,be,null,this,backend,backend,this,state,desc,state,desc,this,state,table,state,table,this,key,serializer,key,serializer,this,namespace,serializer,namespace,serializer
AbstractHeapState -> protected AbstractHeapState( 			KeyedStateBackend<K> backend, 			SD stateDesc, 			StateTable<K, N, SV> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1472464402;Creates a new key/value state for the given hash map of key/value pairs.__@param backend The state backend backing that created this state._@param stateDesc The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;protected AbstractHeapState(_			KeyedStateBackend<K> backend,_			SD stateDesc,_			StateTable<K, N, SV> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {__		Preconditions.checkNotNull(stateTable, "State table must not be null.")___		this.backend = backend__		this.stateDesc = stateDesc__		this.stateTable = stateTable__		this.keySerializer = keySerializer__		this.namespaceSerializer = namespaceSerializer__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,backend,the,state,backend,backing,that,created,this,state,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;protected,abstract,heap,state,keyed,state,backend,k,backend,sd,state,desc,state,table,k,n,sv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,preconditions,check,not,null,state,table,state,table,must,not,be,null,this,backend,backend,this,state,desc,state,desc,this,state,table,state,table,this,key,serializer,key,serializer,this,namespace,serializer,namespace,serializer
AbstractHeapState -> protected AbstractHeapState( 			KeyedStateBackend<K> backend, 			SD stateDesc, 			StateTable<K, N, SV> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1484317029;Creates a new key/value state for the given hash map of key/value pairs.__@param backend The state backend backing that created this state._@param stateDesc The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;protected AbstractHeapState(_			KeyedStateBackend<K> backend,_			SD stateDesc,_			StateTable<K, N, SV> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {__		Preconditions.checkNotNull(stateTable, "State table must not be null.")___		this.backend = backend__		this.stateDesc = stateDesc__		this.stateTable = stateTable__		this.keySerializer = keySerializer__		this.namespaceSerializer = namespaceSerializer__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,backend,the,state,backend,backing,that,created,this,state,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;protected,abstract,heap,state,keyed,state,backend,k,backend,sd,state,desc,state,table,k,n,sv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,preconditions,check,not,null,state,table,state,table,must,not,be,null,this,backend,backend,this,state,desc,state,desc,this,state,table,state,table,this,key,serializer,key,serializer,this,namespace,serializer,namespace,serializer
AbstractHeapState -> AbstractHeapState( 			StateTable<K, N, SV> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<SV> valueSerializer, 			TypeSerializer<N> namespaceSerializer, 			SV defaultValue);1528817060;Creates a new key/value state for the given hash map of key/value pairs.__@param stateTable The state table for which this state is associated to._@param keySerializer The serializer for the keys._@param valueSerializer The serializer for the state._@param namespaceSerializer The serializer for the namespace._@param defaultValue The default value for the state.;AbstractHeapState(_			StateTable<K, N, SV> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<SV> valueSerializer,_			TypeSerializer<N> namespaceSerializer,_			SV defaultValue) {__		this.stateTable = Preconditions.checkNotNull(stateTable, "State table must not be null.")__		this.keySerializer = keySerializer__		this.valueSerializer = valueSerializer__		this.namespaceSerializer = namespaceSerializer__		this.defaultValue = defaultValue__		this.currentNamespace = null__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,state,table,the,state,table,for,which,this,state,is,associated,to,param,key,serializer,the,serializer,for,the,keys,param,value,serializer,the,serializer,for,the,state,param,namespace,serializer,the,serializer,for,the,namespace,param,default,value,the,default,value,for,the,state;abstract,heap,state,state,table,k,n,sv,state,table,type,serializer,k,key,serializer,type,serializer,sv,value,serializer,type,serializer,n,namespace,serializer,sv,default,value,this,state,table,preconditions,check,not,null,state,table,state,table,must,not,be,null,this,key,serializer,key,serializer,this,value,serializer,value,serializer,this,namespace,serializer,namespace,serializer,this,default,value,default,value,this,current,namespace,null
AbstractHeapState -> AbstractHeapState( 			StateTable<K, N, SV> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<SV> valueSerializer, 			TypeSerializer<N> namespaceSerializer, 			SV defaultValue);1538063092;Creates a new key/value state for the given hash map of key/value pairs.__@param stateTable The state table for which this state is associated to._@param keySerializer The serializer for the keys._@param valueSerializer The serializer for the state._@param namespaceSerializer The serializer for the namespace._@param defaultValue The default value for the state.;AbstractHeapState(_			StateTable<K, N, SV> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<SV> valueSerializer,_			TypeSerializer<N> namespaceSerializer,_			SV defaultValue) {__		this.stateTable = Preconditions.checkNotNull(stateTable, "State table must not be null.")__		this.keySerializer = keySerializer__		this.valueSerializer = valueSerializer__		this.namespaceSerializer = namespaceSerializer__		this.defaultValue = defaultValue__		this.currentNamespace = null__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,state,table,the,state,table,for,which,this,state,is,associated,to,param,key,serializer,the,serializer,for,the,keys,param,value,serializer,the,serializer,for,the,state,param,namespace,serializer,the,serializer,for,the,namespace,param,default,value,the,default,value,for,the,state;abstract,heap,state,state,table,k,n,sv,state,table,type,serializer,k,key,serializer,type,serializer,sv,value,serializer,type,serializer,n,namespace,serializer,sv,default,value,this,state,table,preconditions,check,not,null,state,table,state,table,must,not,be,null,this,key,serializer,key,serializer,this,value,serializer,value,serializer,this,namespace,serializer,namespace,serializer,this,default,value,default,value,this,current,namespace,null
