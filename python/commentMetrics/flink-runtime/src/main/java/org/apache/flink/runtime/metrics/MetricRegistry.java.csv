# id;timestamp;commentText;codeText;commentWords;codeWords
MetricRegistry -> @Nullable 	String getMetricQueryServicePath()_;1508252550;Returns the path of the {@link MetricQueryService} or null, if none is started.__@return Path of the MetricQueryService or null, if none is started;@Nullable_	String getMetricQueryServicePath()_;returns,the,path,of,the,link,metric,query,service,or,null,if,none,is,started,return,path,of,the,metric,query,service,or,null,if,none,is,started;nullable,string,get,metric,query,service,path
MetricRegistry -> @Nullable 	String getMetricQueryServicePath()_;1508494390;Returns the path of the {@link MetricQueryService} or null, if none is started.__@return Path of the MetricQueryService or null, if none is started;@Nullable_	String getMetricQueryServicePath()_;returns,the,path,of,the,link,metric,query,service,or,null,if,none,is,started,return,path,of,the,metric,query,service,or,null,if,none,is,started;nullable,string,get,metric,query,service,path
MetricRegistry -> @Nullable 	String getMetricQueryServicePath()_;1510061826;Returns the path of the {@link MetricQueryService} or null, if none is started.__@return Path of the MetricQueryService or null, if none is started;@Nullable_	String getMetricQueryServicePath()_;returns,the,path,of,the,link,metric,query,service,or,null,if,none,is,started,return,path,of,the,metric,query,service,or,null,if,none,is,started;nullable,string,get,metric,query,service,path
MetricRegistry -> void register(Metric metric, String metricName, AbstractMetricGroup group)_;1508252550;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;void register(Metric metric, String metricName, AbstractMetricGroup group)_;registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;void,register,metric,metric,string,metric,name,abstract,metric,group,group
MetricRegistry -> void register(Metric metric, String metricName, AbstractMetricGroup group)_;1508426573;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;void register(Metric metric, String metricName, AbstractMetricGroup group)_;registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;void,register,metric,metric,string,metric,name,abstract,metric,group,group
MetricRegistry -> void register(Metric metric, String metricName, AbstractMetricGroup group)_;1508494390;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;void register(Metric metric, String metricName, AbstractMetricGroup group)_;registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;void,register,metric,metric,string,metric,name,abstract,metric,group,group
MetricRegistry -> void register(Metric metric, String metricName, AbstractMetricGroup group)_;1510061826;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;void register(Metric metric, String metricName, AbstractMetricGroup group)_;registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;void,register,metric,metric,string,metric,name,abstract,metric,group,group
MetricRegistry -> public void shutdown();1461259108;Shuts down this registry and the associated {@link org.apache.flink.metrics.reporter.MetricReporter}.;public void shutdown() {_		if (reporters != null) {_			for (MetricReporter reporter : reporters) {_				try {_					reporter.close()__				} catch (Throwable t) {_					LOG.warn("Metrics reporter did not shut down cleanly", t)__				}_			}_			reporters = null__		}_		shutdownExecutor()__	};shuts,down,this,registry,and,the,associated,link,org,apache,flink,metrics,reporter,metric,reporter;public,void,shutdown,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor
MetricRegistry -> public void shutdown();1469183596;Shuts down this registry and the associated {@link org.apache.flink.metrics.reporter.MetricReporter}.;public void shutdown() {_		if (reporter != null) {_			try {_				reporter.close()__			} catch (Throwable t) {_				LOG.warn("Metrics reporter did not shut down cleanly", t)__			}_		}_		shutdownExecutor()__	};shuts,down,this,registry,and,the,associated,link,org,apache,flink,metrics,reporter,metric,reporter;public,void,shutdown,if,reporter,null,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,shutdown,executor
MetricRegistry -> public void shutdown();1469193901;Shuts down this registry and the associated {@link org.apache.flink.metrics.reporter.MetricReporter}.;public void shutdown() {_		if (reporters != null) {_			for (MetricReporter reporter : reporters) {_				try {_					reporter.close()__				} catch (Throwable t) {_					LOG.warn("Metrics reporter did not shut down cleanly", t)__				}_			}_			reporters = null__		}_		shutdownExecutor()__	};shuts,down,this,registry,and,the,associated,link,org,apache,flink,metrics,reporter,metric,reporter;public,void,shutdown,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor
MetricRegistry -> public void shutdown();1470052627;Shuts down this registry and the associated {@link org.apache.flink.metrics.reporter.MetricReporter}.;public void shutdown() {_		if (reporters != null) {_			for (MetricReporter reporter : reporters) {_				try {_					reporter.close()__				} catch (Throwable t) {_					LOG.warn("Metrics reporter did not shut down cleanly", t)__				}_			}_			reporters = null__		}_		shutdownExecutor()__	};shuts,down,this,registry,and,the,associated,link,org,apache,flink,metrics,reporter,metric,reporter;public,void,shutdown,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor
MetricRegistry -> public void shutdown();1470398077;Shuts down this registry and the associated {@link org.apache.flink.metrics.reporter.MetricReporter}.;public void shutdown() {_		if (reporters != null) {_			for (MetricReporter reporter : reporters) {_				try {_					reporter.close()__				} catch (Throwable t) {_					LOG.warn("Metrics reporter did not shut down cleanly", t)__				}_			}_			reporters = null__		}_		shutdownExecutor()__	};shuts,down,this,registry,and,the,associated,link,org,apache,flink,metrics,reporter,metric,reporter;public,void,shutdown,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor
MetricRegistry -> public void shutdown();1472651237;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		if (reporters != null) {_			for (MetricReporter reporter : reporters) {_				try {_					reporter.close()__				} catch (Throwable t) {_					LOG.warn("Metrics reporter did not shut down cleanly", t)__				}_			}_			reporters = null__		}_		shutdownExecutor()__	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor
MetricRegistry -> public void shutdown();1474366180;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		if (reporters != null) {_			for (MetricReporter reporter : reporters) {_				try {_					reporter.close()__				} catch (Throwable t) {_					LOG.warn("Metrics reporter did not shut down cleanly", t)__				}_			}_			reporters = null__		}_		shutdownExecutor()__	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor
MetricRegistry -> public void shutdown();1474901363;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		if (reporters != null) {_			for (MetricReporter reporter : reporters) {_				try {_					reporter.close()__				} catch (Throwable t) {_					LOG.warn("Metrics reporter did not shut down cleanly", t)__				}_			}_			reporters = null__		}_		shutdownExecutor()__	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor
MetricRegistry -> public void shutdown();1476088810;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		if (reporters != null) {_			for (MetricReporter reporter : reporters) {_				try {_					reporter.close()__				} catch (Throwable t) {_					LOG.warn("Metrics reporter did not shut down cleanly", t)__				}_			}_			reporters = null__		}_		shutdownExecutor()__	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor
MetricRegistry -> public void shutdown();1479135227;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		if (reporters != null) {_			for (MetricReporter reporter : reporters) {_				try {_					reporter.close()__				} catch (Throwable t) {_					LOG.warn("Metrics reporter did not shut down cleanly", t)__				}_			}_			reporters = null__		}_		shutdownExecutor()__	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor
MetricRegistry -> public void shutdown();1479304991;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		if (reporters != null) {_			for (MetricReporter reporter : reporters) {_				try {_					reporter.close()__				} catch (Throwable t) {_					LOG.warn("Metrics reporter did not shut down cleanly", t)__				}_			}_			reporters = null__		}_		shutdownExecutor()__	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor
MetricRegistry -> public void shutdown();1480345833;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		if (reporters != null) {_			for (MetricReporter reporter : reporters) {_				try {_					reporter.close()__				} catch (Throwable t) {_					LOG.warn("Metrics reporter did not shut down cleanly", t)__				}_			}_			reporters = null__		}_		shutdownExecutor()__	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor
MetricRegistry -> public void shutdown();1481286311;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		if (reporters != null) {_			for (MetricReporter reporter : reporters) {_				try {_					reporter.close()__				} catch (Throwable t) {_					LOG.warn("Metrics reporter did not shut down cleanly", t)__				}_			}_			reporters = null__		}_		shutdownExecutor()__	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor
MetricRegistry -> public void shutdown();1490018130;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		synchronized (lock) {_			Future<Boolean> stopFuture = null__			FiniteDuration stopTimeout = null___			if (queryService != null) {_				stopTimeout = new FiniteDuration(1L, TimeUnit.SECONDS)__				stopFuture = Patterns.gracefulStop(queryService, stopTimeout)__			}__			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					try {_						reporter.close()__					} catch (Throwable t) {_						LOG.warn("Metrics reporter did not shut down cleanly", t)__					}_				}_				reporters = null__			}_			shutdownExecutor()___			if (stopFuture != null) {_				boolean stopped = false___				try {_					stopped = Await.result(stopFuture, stopTimeout)__				} catch (Exception e) {_					LOG.warn("Query actor did not properly stop.", e)__				}__				if (!stopped) {_					_					queryService.tell(Kill.getInstance(), ActorRef.noSender())__				}_			}_		}_	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,synchronized,lock,future,boolean,stop,future,null,finite,duration,stop,timeout,null,if,query,service,null,stop,timeout,new,finite,duration,1l,time,unit,seconds,stop,future,patterns,graceful,stop,query,service,stop,timeout,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor,if,stop,future,null,boolean,stopped,false,try,stopped,await,result,stop,future,stop,timeout,catch,exception,e,log,warn,query,actor,did,not,properly,stop,e,if,stopped,query,service,tell,kill,get,instance,actor,ref,no,sender
MetricRegistry -> public void shutdown();1496241592;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		synchronized (lock) {_			Future<Boolean> stopFuture = null__			FiniteDuration stopTimeout = null___			if (queryService != null) {_				stopTimeout = new FiniteDuration(1L, TimeUnit.SECONDS)__				stopFuture = Patterns.gracefulStop(queryService, stopTimeout)__			}__			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					try {_						reporter.close()__					} catch (Throwable t) {_						LOG.warn("Metrics reporter did not shut down cleanly", t)__					}_				}_				reporters = null__			}_			shutdownExecutor()___			if (stopFuture != null) {_				boolean stopped = false___				try {_					stopped = Await.result(stopFuture, stopTimeout)__				} catch (Exception e) {_					LOG.warn("Query actor did not properly stop.", e)__				}__				if (!stopped) {_					_					queryService.tell(Kill.getInstance(), ActorRef.noSender())__				}_			}_		}_	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,synchronized,lock,future,boolean,stop,future,null,finite,duration,stop,timeout,null,if,query,service,null,stop,timeout,new,finite,duration,1l,time,unit,seconds,stop,future,patterns,graceful,stop,query,service,stop,timeout,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor,if,stop,future,null,boolean,stopped,false,try,stopped,await,result,stop,future,stop,timeout,catch,exception,e,log,warn,query,actor,did,not,properly,stop,e,if,stopped,query,service,tell,kill,get,instance,actor,ref,no,sender
MetricRegistry -> public void shutdown();1499093341;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		synchronized (lock) {_			Future<Boolean> stopFuture = null__			FiniteDuration stopTimeout = null___			if (queryService != null) {_				stopTimeout = new FiniteDuration(1L, TimeUnit.SECONDS)__				stopFuture = Patterns.gracefulStop(queryService, stopTimeout)__			}__			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					try {_						reporter.close()__					} catch (Throwable t) {_						LOG.warn("Metrics reporter did not shut down cleanly", t)__					}_				}_				reporters = null__			}_			shutdownExecutor()___			if (stopFuture != null) {_				boolean stopped = false___				try {_					stopped = Await.result(stopFuture, stopTimeout)__				} catch (Exception e) {_					LOG.warn("Query actor did not properly stop.", e)__				}__				if (!stopped) {_					_					queryService.tell(Kill.getInstance(), ActorRef.noSender())__				}_			}_		}_	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,synchronized,lock,future,boolean,stop,future,null,finite,duration,stop,timeout,null,if,query,service,null,stop,timeout,new,finite,duration,1l,time,unit,seconds,stop,future,patterns,graceful,stop,query,service,stop,timeout,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor,if,stop,future,null,boolean,stopped,false,try,stopped,await,result,stop,future,stop,timeout,catch,exception,e,log,warn,query,actor,did,not,properly,stop,e,if,stopped,query,service,tell,kill,get,instance,actor,ref,no,sender
MetricRegistry -> public void shutdown();1507727580;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		synchronized (lock) {_			Future<Boolean> stopFuture = null__			FiniteDuration stopTimeout = null___			if (queryService != null) {_				stopTimeout = new FiniteDuration(1L, TimeUnit.SECONDS)__				stopFuture = Patterns.gracefulStop(queryService, stopTimeout)__			}__			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					try {_						reporter.close()__					} catch (Throwable t) {_						LOG.warn("Metrics reporter did not shut down cleanly", t)__					}_				}_				reporters = null__			}_			shutdownExecutor()___			if (stopFuture != null) {_				boolean stopped = false___				try {_					stopped = Await.result(stopFuture, stopTimeout)__				} catch (Exception e) {_					LOG.warn("Query actor did not properly stop.", e)__				}__				if (!stopped) {_					_					queryService.tell(Kill.getInstance(), ActorRef.noSender())__				}_			}_		}_	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,synchronized,lock,future,boolean,stop,future,null,finite,duration,stop,timeout,null,if,query,service,null,stop,timeout,new,finite,duration,1l,time,unit,seconds,stop,future,patterns,graceful,stop,query,service,stop,timeout,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor,if,stop,future,null,boolean,stopped,false,try,stopped,await,result,stop,future,stop,timeout,catch,exception,e,log,warn,query,actor,did,not,properly,stop,e,if,stopped,query,service,tell,kill,get,instance,actor,ref,no,sender
MetricRegistry -> public void shutdown();1508327406;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		synchronized (lock) {_			Future<Boolean> stopFuture = null__			FiniteDuration stopTimeout = null___			if (queryService != null) {_				stopTimeout = new FiniteDuration(1L, TimeUnit.SECONDS)__				stopFuture = Patterns.gracefulStop(queryService, stopTimeout)__			}__			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					try {_						reporter.close()__					} catch (Throwable t) {_						LOG.warn("Metrics reporter did not shut down cleanly", t)__					}_				}_				reporters = null__			}_			shutdownExecutor()___			if (stopFuture != null) {_				boolean stopped = false___				try {_					stopped = Await.result(stopFuture, stopTimeout)__				} catch (Exception e) {_					LOG.warn("Query actor did not properly stop.", e)__				}__				if (!stopped) {_					_					queryService.tell(Kill.getInstance(), ActorRef.noSender())__				}_			}_		}_	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,synchronized,lock,future,boolean,stop,future,null,finite,duration,stop,timeout,null,if,query,service,null,stop,timeout,new,finite,duration,1l,time,unit,seconds,stop,future,patterns,graceful,stop,query,service,stop,timeout,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor,if,stop,future,null,boolean,stopped,false,try,stopped,await,result,stop,future,stop,timeout,catch,exception,e,log,warn,query,actor,did,not,properly,stop,e,if,stopped,query,service,tell,kill,get,instance,actor,ref,no,sender
MetricRegistry -> char getDelimiter()_;1508252550;Returns the global delimiter.__@return global delimiter;char getDelimiter()_;returns,the,global,delimiter,return,global,delimiter;char,get,delimiter
MetricRegistry -> char getDelimiter()_;1508426573;Returns the global delimiter.__@return global delimiter;char getDelimiter()_;returns,the,global,delimiter,return,global,delimiter;char,get,delimiter
MetricRegistry -> char getDelimiter()_;1508494390;Returns the global delimiter.__@return global delimiter;char getDelimiter()_;returns,the,global,delimiter,return,global,delimiter;char,get,delimiter
MetricRegistry -> char getDelimiter()_;1510061826;Returns the global delimiter.__@return global delimiter;char getDelimiter()_;returns,the,global,delimiter,return,global,delimiter;char,get,delimiter
MetricRegistry -> public MetricRegistry(MetricRegistryConfiguration config);1472651237;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor()___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistry.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistry -> public MetricRegistry(MetricRegistryConfiguration config);1474366180;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__			this.executor = null__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						if (executor == null) {_							executor = Executors.newSingleThreadScheduledExecutor()__						}_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistry.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					shutdownExecutor()__					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,this,executor,null,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,if,executor,null,executor,executors,new,single,thread,scheduled,executor,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,shutdown,executor,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistry -> public MetricRegistry(MetricRegistryConfiguration config);1474901363;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.delimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__			this.executor = null__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						if (executor == null) {_							executor = Executors.newSingleThreadScheduledExecutor()__						}_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistry.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)__				}_				catch (Throwable t) {_					shutdownExecutor()__					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,this,executor,null,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,if,executor,null,executor,executors,new,single,thread,scheduled,executor,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,catch,throwable,t,shutdown,executor,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistry -> public MetricRegistry(MetricRegistryConfiguration config);1476088810;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__			this.executor = null__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						if (executor == null) {_							executor = Executors.newSingleThreadScheduledExecutor()__						}_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistry.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					shutdownExecutor()__					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,this,executor,null,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,if,executor,null,executor,executors,new,single,thread,scheduled,executor,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,shutdown,executor,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistry -> public MetricRegistry(MetricRegistryConfiguration config);1479135227;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new MetricRegistryThreadFactory())___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistry.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,metric,registry,thread,factory,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistry -> public MetricRegistry(MetricRegistryConfiguration config);1479304991;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new MetricRegistryThreadFactory())___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistry.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,metric,registry,thread,factory,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistry -> public MetricRegistry(MetricRegistryConfiguration config);1480345833;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new MetricRegistryThreadFactory())___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistry.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,metric,registry,thread,factory,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistry -> public MetricRegistry(MetricRegistryConfiguration config);1481286311;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new MetricRegistryThreadFactory())___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					LOG.info("Configuring {} with {}.", reporterClass.getSimpleName(), metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistry.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,metric,registry,thread,factory,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,log,info,configuring,with,reporter,class,get,simple,name,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistry -> public MetricRegistry(MetricRegistryConfiguration config);1490018130;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new MetricRegistryThreadFactory())___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					LOG.info("Configuring {} with {}.", reporterClass.getSimpleName(), metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistry.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,metric,registry,thread,factory,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,log,info,configuring,with,reporter,class,get,simple,name,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistry -> public MetricRegistry(MetricRegistryConfiguration config);1496241592;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new MetricRegistryThreadFactory())___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					LOG.info("Configuring {} with {}.", reporterClass.getSimpleName(), metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistry.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,metric,registry,thread,factory,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,log,info,configuring,with,reporter,class,get,simple,name,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistry -> public MetricRegistry(MetricRegistryConfiguration config);1499093341;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new MetricRegistryThreadFactory())___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					LOG.info("Configuring {} with {}.", reporterClass.getSimpleName(), metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistry.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,metric,registry,thread,factory,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,log,info,configuring,with,reporter,class,get,simple,name,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistry -> public MetricRegistry(MetricRegistryConfiguration config);1507727580;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new ExecutorThreadFactory("Flink-MetricRegistry"))___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					LOG.info("Configuring {} with {}.", reporterClass.getSimpleName(), metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistry.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,executor,thread,factory,flink,metric,registry,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,log,info,configuring,with,reporter,class,get,simple,name,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistry -> public MetricRegistry(MetricRegistryConfiguration config);1508327406;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new ExecutorThreadFactory("Flink-MetricRegistry"))___		this.queryService = null__		this.metricQueryServicePath = null___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					LOG.info("Configuring {} with {}.", reporterClass.getSimpleName(), metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistry.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,executor,thread,factory,flink,metric,registry,this,query,service,null,this,metric,query,service,path,null,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,log,info,configuring,with,reporter,class,get,simple,name,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistry -> public void register(Metric metric, String metricName, AbstractMetricGroup group);1472651237;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfAddedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, group)__			}_			if (metric instanceof View) {_				if (viewUpdater == null) {_					viewUpdater = new ViewUpdater(executor)__				}_				viewUpdater.notifyOfAddedView((View) metric)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,added,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,group,if,metric,instanceof,view,if,view,updater,null,view,updater,new,view,updater,executor,view,updater,notify,of,added,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, AbstractMetricGroup group);1474366180;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfAddedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, group)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,added,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,group,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, AbstractMetricGroup group);1476088810;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfAddedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, group)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,added,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,group,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, AbstractMetricGroup group);1479135227;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfAddedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, group)__			}_			if (metric instanceof View) {_				if (viewUpdater == null) {_					viewUpdater = new ViewUpdater(executor)__				}_				viewUpdater.notifyOfAddedView((View) metric)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,added,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,group,if,metric,instanceof,view,if,view,updater,null,view,updater,new,view,updater,executor,view,updater,notify,of,added,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, AbstractMetricGroup group);1479304991;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfAddedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, group)__			}_			if (metric instanceof View) {_				if (viewUpdater == null) {_					viewUpdater = new ViewUpdater(executor)__				}_				viewUpdater.notifyOfAddedView((View) metric)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,added,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,group,if,metric,instanceof,view,if,view,updater,null,view,updater,new,view,updater,executor,view,updater,notify,of,added,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, AbstractMetricGroup group);1480345833;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfAddedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, group)__			}_			if (metric instanceof View) {_				if (viewUpdater == null) {_					viewUpdater = new ViewUpdater(executor)__				}_				viewUpdater.notifyOfAddedView((View) metric)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,added,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,group,if,metric,instanceof,view,if,view,updater,null,view,updater,new,view,updater,executor,view,updater,notify,of,added,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, AbstractMetricGroup group);1481286311;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfAddedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, group)__			}_			if (metric instanceof View) {_				if (viewUpdater == null) {_					viewUpdater = new ViewUpdater(executor)__				}_				viewUpdater.notifyOfAddedView((View) metric)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,added,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,group,if,metric,instanceof,view,if,view,updater,null,view,updater,new,view,updater,executor,view,updater,notify,of,added,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, AbstractMetricGroup group);1490018130;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, AbstractMetricGroup group) {_		synchronized (lock) {_			if (isShutdown()) {_				LOG.warn("Cannot register metric, because the MetricRegistry has already been shut down.")__			} else {_				try {_					if (reporters != null) {_						for (int i = 0_ i < reporters.size()_ i++) {_							MetricReporter reporter = reporters.get(i)__							if (reporter != null) {_								FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__								reporter.notifyOfAddedMetric(metric, metricName, front)__							}_						}_					}_					if (queryService != null) {_						MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, group)__					}_					if (metric instanceof View) {_						if (viewUpdater == null) {_							viewUpdater = new ViewUpdater(executor)__						}_						viewUpdater.notifyOfAddedView((View) metric)__					}_				} catch (Exception e) {_					LOG.error("Error while registering metric.", e)__				}_			}_		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,abstract,metric,group,group,synchronized,lock,if,is,shutdown,log,warn,cannot,register,metric,because,the,metric,registry,has,already,been,shut,down,else,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,added,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,group,if,metric,instanceof,view,if,view,updater,null,view,updater,new,view,updater,executor,view,updater,notify,of,added,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, AbstractMetricGroup group);1496241592;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, AbstractMetricGroup group) {_		synchronized (lock) {_			if (isShutdown()) {_				LOG.warn("Cannot register metric, because the MetricRegistry has already been shut down.")__			} else {_				try {_					if (reporters != null) {_						for (int i = 0_ i < reporters.size()_ i++) {_							MetricReporter reporter = reporters.get(i)__							if (reporter != null) {_								FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__								reporter.notifyOfAddedMetric(metric, metricName, front)__							}_						}_					}_					if (queryService != null) {_						MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, group)__					}_					if (metric instanceof View) {_						if (viewUpdater == null) {_							viewUpdater = new ViewUpdater(executor)__						}_						viewUpdater.notifyOfAddedView((View) metric)__					}_				} catch (Exception e) {_					LOG.error("Error while registering metric.", e)__				}_			}_		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,abstract,metric,group,group,synchronized,lock,if,is,shutdown,log,warn,cannot,register,metric,because,the,metric,registry,has,already,been,shut,down,else,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,added,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,group,if,metric,instanceof,view,if,view,updater,null,view,updater,new,view,updater,executor,view,updater,notify,of,added,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, AbstractMetricGroup group);1499093341;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, AbstractMetricGroup group) {_		synchronized (lock) {_			if (isShutdown()) {_				LOG.warn("Cannot register metric, because the MetricRegistry has already been shut down.")__			} else {_				if (reporters != null) {_					for (int i = 0_ i < reporters.size()_ i++) {_						MetricReporter reporter = reporters.get(i)__						try {_							if (reporter != null) {_								FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__								reporter.notifyOfAddedMetric(metric, metricName, front)__							}_						} catch (Exception e) {_							LOG.warn("Error while registering metric.", e)__						}_					}_				}_				try {_					if (queryService != null) {_						MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, group)__					}_				} catch (Exception e) {_					LOG.warn("Error while registering metric.", e)__				}_				try {_					if (metric instanceof View) {_						if (viewUpdater == null) {_							viewUpdater = new ViewUpdater(executor)__						}_						viewUpdater.notifyOfAddedView((View) metric)__					}_				} catch (Exception e) {_					LOG.warn("Error while registering metric.", e)__				}_			}_		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,abstract,metric,group,group,synchronized,lock,if,is,shutdown,log,warn,cannot,register,metric,because,the,metric,registry,has,already,been,shut,down,else,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,try,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,added,metric,metric,metric,name,front,catch,exception,e,log,warn,error,while,registering,metric,e,try,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,group,catch,exception,e,log,warn,error,while,registering,metric,e,try,if,metric,instanceof,view,if,view,updater,null,view,updater,new,view,updater,executor,view,updater,notify,of,added,view,view,metric,catch,exception,e,log,warn,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, AbstractMetricGroup group);1507727580;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, AbstractMetricGroup group) {_		synchronized (lock) {_			if (isShutdown()) {_				LOG.warn("Cannot register metric, because the MetricRegistry has already been shut down.")__			} else {_				if (reporters != null) {_					for (int i = 0_ i < reporters.size()_ i++) {_						MetricReporter reporter = reporters.get(i)__						try {_							if (reporter != null) {_								FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__								reporter.notifyOfAddedMetric(metric, metricName, front)__							}_						} catch (Exception e) {_							LOG.warn("Error while registering metric.", e)__						}_					}_				}_				try {_					if (queryService != null) {_						MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, group)__					}_				} catch (Exception e) {_					LOG.warn("Error while registering metric.", e)__				}_				try {_					if (metric instanceof View) {_						if (viewUpdater == null) {_							viewUpdater = new ViewUpdater(executor)__						}_						viewUpdater.notifyOfAddedView((View) metric)__					}_				} catch (Exception e) {_					LOG.warn("Error while registering metric.", e)__				}_			}_		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,abstract,metric,group,group,synchronized,lock,if,is,shutdown,log,warn,cannot,register,metric,because,the,metric,registry,has,already,been,shut,down,else,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,try,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,added,metric,metric,metric,name,front,catch,exception,e,log,warn,error,while,registering,metric,e,try,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,group,catch,exception,e,log,warn,error,while,registering,metric,e,try,if,metric,instanceof,view,if,view,updater,null,view,updater,new,view,updater,executor,view,updater,notify,of,added,view,view,metric,catch,exception,e,log,warn,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, AbstractMetricGroup group);1508327406;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, AbstractMetricGroup group) {_		synchronized (lock) {_			if (isShutdown()) {_				LOG.warn("Cannot register metric, because the MetricRegistry has already been shut down.")__			} else {_				if (reporters != null) {_					for (int i = 0_ i < reporters.size()_ i++) {_						MetricReporter reporter = reporters.get(i)__						try {_							if (reporter != null) {_								FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__								reporter.notifyOfAddedMetric(metric, metricName, front)__							}_						} catch (Exception e) {_							LOG.warn("Error while registering metric.", e)__						}_					}_				}_				try {_					if (queryService != null) {_						MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, group)__					}_				} catch (Exception e) {_					LOG.warn("Error while registering metric.", e)__				}_				try {_					if (metric instanceof View) {_						if (viewUpdater == null) {_							viewUpdater = new ViewUpdater(executor)__						}_						viewUpdater.notifyOfAddedView((View) metric)__					}_				} catch (Exception e) {_					LOG.warn("Error while registering metric.", e)__				}_			}_		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,abstract,metric,group,group,synchronized,lock,if,is,shutdown,log,warn,cannot,register,metric,because,the,metric,registry,has,already,been,shut,down,else,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,try,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,added,metric,metric,metric,name,front,catch,exception,e,log,warn,error,while,registering,metric,e,try,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,group,catch,exception,e,log,warn,error,while,registering,metric,e,try,if,metric,instanceof,view,if,view,updater,null,view,updater,new,view,updater,executor,view,updater,notify,of,added,view,view,metric,catch,exception,e,log,warn,error,while,registering,metric,e
MetricRegistry -> static MetricConfig createReporterConfig(Configuration config);1469183596;------------------------------------------------------------------------;static MetricConfig createReporterConfig(Configuration config) {_		MetricConfig reporterConfig = new MetricConfig()___		String[] arguments = config.getString(ConfigConstants.METRICS_REPORTER_ARGUMENTS, "").split(" ")__		if (arguments.length > 1) {_			for (int x = 0_ x < arguments.length_ x += 2) {_				reporterConfig.setProperty(arguments[x].replace("--", ""), arguments[x + 1])__			}_		}_		return reporterConfig__	};;static,metric,config,create,reporter,config,configuration,config,metric,config,reporter,config,new,metric,config,string,arguments,config,get,string,config,constants,split,if,arguments,length,1,for,int,x,0,x,arguments,length,x,2,reporter,config,set,property,arguments,x,replace,arguments,x,1,return,reporter,config
MetricRegistry -> static MetricConfig createReporterConfig(Configuration config);1469183596;Utilities;static MetricConfig createReporterConfig(Configuration config) {_		MetricConfig reporterConfig = new MetricConfig()___		String[] arguments = config.getString(ConfigConstants.METRICS_REPORTER_ARGUMENTS, "").split(" ")__		if (arguments.length > 1) {_			for (int x = 0_ x < arguments.length_ x += 2) {_				reporterConfig.setProperty(arguments[x].replace("--", ""), arguments[x + 1])__			}_		}_		return reporterConfig__	};utilities;static,metric,config,create,reporter,config,configuration,config,metric,config,reporter,config,new,metric,config,string,arguments,config,get,string,config,constants,split,if,arguments,length,1,for,int,x,0,x,arguments,length,x,2,reporter,config,set,property,arguments,x,replace,arguments,x,1,return,reporter,config
MetricRegistry -> static MetricConfig createReporterConfig(Configuration config);1469183596;------------------------------------------------------------------------;static MetricConfig createReporterConfig(Configuration config) {_		MetricConfig reporterConfig = new MetricConfig()___		String[] arguments = config.getString(ConfigConstants.METRICS_REPORTER_ARGUMENTS, "").split(" ")__		if (arguments.length > 1) {_			for (int x = 0_ x < arguments.length_ x += 2) {_				reporterConfig.setProperty(arguments[x].replace("--", ""), arguments[x + 1])__			}_		}_		return reporterConfig__	};;static,metric,config,create,reporter,config,configuration,config,metric,config,reporter,config,new,metric,config,string,arguments,config,get,string,config,constants,split,if,arguments,length,1,for,int,x,0,x,arguments,length,x,2,reporter,config,set,property,arguments,x,replace,arguments,x,1,return,reporter,config
MetricRegistry -> public char getDelimiter();1472651237;Returns the global delimiter.__@return global delimiter;public char getDelimiter() {_		return this.globalDelimiter__	};returns,the,global,delimiter,return,global,delimiter;public,char,get,delimiter,return,this,global,delimiter
MetricRegistry -> public char getDelimiter();1474366180;Returns the global delimiter.__@return global delimiter;public char getDelimiter() {_		return this.globalDelimiter__	};returns,the,global,delimiter,return,global,delimiter;public,char,get,delimiter,return,this,global,delimiter
MetricRegistry -> public char getDelimiter();1476088810;Returns the global delimiter.__@return global delimiter;public char getDelimiter() {_		return this.globalDelimiter__	};returns,the,global,delimiter,return,global,delimiter;public,char,get,delimiter,return,this,global,delimiter
MetricRegistry -> public char getDelimiter();1479135227;Returns the global delimiter.__@return global delimiter;public char getDelimiter() {_		return this.globalDelimiter__	};returns,the,global,delimiter,return,global,delimiter;public,char,get,delimiter,return,this,global,delimiter
MetricRegistry -> public char getDelimiter();1479304991;Returns the global delimiter.__@return global delimiter;public char getDelimiter() {_		return this.globalDelimiter__	};returns,the,global,delimiter,return,global,delimiter;public,char,get,delimiter,return,this,global,delimiter
MetricRegistry -> public char getDelimiter();1480345833;Returns the global delimiter.__@return global delimiter;public char getDelimiter() {_		return this.globalDelimiter__	};returns,the,global,delimiter,return,global,delimiter;public,char,get,delimiter,return,this,global,delimiter
MetricRegistry -> public char getDelimiter();1481286311;Returns the global delimiter.__@return global delimiter;public char getDelimiter() {_		return this.globalDelimiter__	};returns,the,global,delimiter,return,global,delimiter;public,char,get,delimiter,return,this,global,delimiter
MetricRegistry -> public char getDelimiter();1490018130;Returns the global delimiter.__@return global delimiter;public char getDelimiter() {_		return this.globalDelimiter__	};returns,the,global,delimiter,return,global,delimiter;public,char,get,delimiter,return,this,global,delimiter
MetricRegistry -> public char getDelimiter();1496241592;Returns the global delimiter.__@return global delimiter;public char getDelimiter() {_		return this.globalDelimiter__	};returns,the,global,delimiter,return,global,delimiter;public,char,get,delimiter,return,this,global,delimiter
MetricRegistry -> public char getDelimiter();1499093341;Returns the global delimiter.__@return global delimiter;public char getDelimiter() {_		return this.globalDelimiter__	};returns,the,global,delimiter,return,global,delimiter;public,char,get,delimiter,return,this,global,delimiter
MetricRegistry -> public char getDelimiter();1507727580;Returns the global delimiter.__@return global delimiter;public char getDelimiter() {_		return this.globalDelimiter__	};returns,the,global,delimiter,return,global,delimiter;public,char,get,delimiter,return,this,global,delimiter
MetricRegistry -> public char getDelimiter();1508327406;Returns the global delimiter.__@return global delimiter;public char getDelimiter() {_		return this.globalDelimiter__	};returns,the,global,delimiter,return,global,delimiter;public,char,get,delimiter,return,this,global,delimiter
MetricRegistry -> public void unregister(Metric metric, String metricName, MetricGroup group);1461259108;Un-registers the given {@link org.apache.flink.metrics.Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, MetricGroup group) {_		try {_			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					if (reporter != null) {_						reporter.notifyOfRemovedMetric(metric, metricName, group)__					}_				}_			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};un,registers,the,given,link,org,apache,flink,metrics,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,metric,group,group,try,if,reporters,null,for,metric,reporter,reporter,reporters,if,reporter,null,reporter,notify,of,removed,metric,metric,metric,name,group,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, MetricGroup group);1469183596;Un-registers the given {@link org.apache.flink.metrics.Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, MetricGroup group) {_		try {_			if (reporter != null) {_				reporter.notifyOfRemovedMetric(metric, metricName, group)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};un,registers,the,given,link,org,apache,flink,metrics,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,metric,group,group,try,if,reporter,null,reporter,notify,of,removed,metric,metric,metric,name,group,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, MetricGroup group);1469193901;Un-registers the given {@link org.apache.flink.metrics.Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, MetricGroup group) {_		try {_			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					if (reporter != null) {_						reporter.notifyOfRemovedMetric(metric, metricName, group)__					}_				}_			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};un,registers,the,given,link,org,apache,flink,metrics,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,metric,group,group,try,if,reporters,null,for,metric,reporter,reporter,reporters,if,reporter,null,reporter,notify,of,removed,metric,metric,metric,name,group,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, MetricGroup group);1470052627;Un-registers the given {@link org.apache.flink.metrics.Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, MetricGroup group) {_		try {_			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					if (reporter != null) {_						reporter.notifyOfRemovedMetric(metric, metricName, group)__					}_				}_			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};un,registers,the,given,link,org,apache,flink,metrics,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,metric,group,group,try,if,reporters,null,for,metric,reporter,reporter,reporters,if,reporter,null,reporter,notify,of,removed,metric,metric,metric,name,group,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, MetricGroup group);1470398077;Un-registers the given {@link org.apache.flink.metrics.Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, MetricGroup group) {_		try {_			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					if (reporter != null) {_						reporter.notifyOfRemovedMetric(metric, metricName, group)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfRemovedMetric(queryService, metric)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};un,registers,the,given,link,org,apache,flink,metrics,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,metric,group,group,try,if,reporters,null,for,metric,reporter,reporter,reporters,if,reporter,null,reporter,notify,of,removed,metric,metric,metric,name,group,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, MetricGroup group);1474901363;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, MetricGroup group) {_		try {_			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					if (reporter != null) {_						reporter.notifyOfRemovedMetric(metric, metricName, group)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfRemovedMetric(queryService, metric)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,metric,group,group,try,if,reporters,null,for,metric,reporter,reporter,reporters,if,reporter,null,reporter,notify,of,removed,metric,metric,metric,name,group,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, AbstractMetricGroup group);1472651237;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfRemovedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfRemovedMetric(queryService, metric)__			}_			if (metric instanceof View) {_				if (viewUpdater != null) {_					viewUpdater.notifyOfRemovedView((View) metric)__				}_			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,removed,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,if,metric,instanceof,view,if,view,updater,null,view,updater,notify,of,removed,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, AbstractMetricGroup group);1474366180;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfRemovedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfRemovedMetric(queryService, metric)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,removed,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, AbstractMetricGroup group);1476088810;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfRemovedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfRemovedMetric(queryService, metric)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,removed,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, AbstractMetricGroup group);1479135227;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfRemovedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfRemovedMetric(queryService, metric)__			}_			if (metric instanceof View) {_				if (viewUpdater != null) {_					viewUpdater.notifyOfRemovedView((View) metric)__				}_			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,removed,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,if,metric,instanceof,view,if,view,updater,null,view,updater,notify,of,removed,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, AbstractMetricGroup group);1479304991;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfRemovedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfRemovedMetric(queryService, metric)__			}_			if (metric instanceof View) {_				if (viewUpdater != null) {_					viewUpdater.notifyOfRemovedView((View) metric)__				}_			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,removed,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,if,metric,instanceof,view,if,view,updater,null,view,updater,notify,of,removed,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, AbstractMetricGroup group);1480345833;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfRemovedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfRemovedMetric(queryService, metric)__			}_			if (metric instanceof View) {_				if (viewUpdater != null) {_					viewUpdater.notifyOfRemovedView((View) metric)__				}_			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,removed,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,if,metric,instanceof,view,if,view,updater,null,view,updater,notify,of,removed,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, AbstractMetricGroup group);1481286311;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, AbstractMetricGroup group) {_		try {_			if (reporters != null) {_				for (int i = 0_ i < reporters.size()_ i++) {_					MetricReporter reporter = reporters.get(i)__					if (reporter != null) {_						FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__						reporter.notifyOfRemovedMetric(metric, metricName, front)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfRemovedMetric(queryService, metric)__			}_			if (metric instanceof View) {_				if (viewUpdater != null) {_					viewUpdater.notifyOfRemovedView((View) metric)__				}_			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,abstract,metric,group,group,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,removed,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,if,metric,instanceof,view,if,view,updater,null,view,updater,notify,of,removed,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, AbstractMetricGroup group);1490018130;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, AbstractMetricGroup group) {_		synchronized (lock) {_			if (isShutdown()) {_				LOG.warn("Cannot unregister metric, because the MetricRegistry has already been shut down.")__			} else {_				try {_					if (reporters != null) {_						for (int i = 0_ i < reporters.size()_ i++) {_							MetricReporter reporter = reporters.get(i)__							if (reporter != null) {_								FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__								reporter.notifyOfRemovedMetric(metric, metricName, front)__							}_						}_					}_					if (queryService != null) {_						MetricQueryService.notifyOfRemovedMetric(queryService, metric)__					}_					if (metric instanceof View) {_						if (viewUpdater != null) {_							viewUpdater.notifyOfRemovedView((View) metric)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while registering metric.", e)__				}_			}_		}_	};un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,abstract,metric,group,group,synchronized,lock,if,is,shutdown,log,warn,cannot,unregister,metric,because,the,metric,registry,has,already,been,shut,down,else,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,removed,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,if,metric,instanceof,view,if,view,updater,null,view,updater,notify,of,removed,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, AbstractMetricGroup group);1496241592;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, AbstractMetricGroup group) {_		synchronized (lock) {_			if (isShutdown()) {_				LOG.warn("Cannot unregister metric, because the MetricRegistry has already been shut down.")__			} else {_				try {_					if (reporters != null) {_						for (int i = 0_ i < reporters.size()_ i++) {_							MetricReporter reporter = reporters.get(i)__							if (reporter != null) {_								FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__								reporter.notifyOfRemovedMetric(metric, metricName, front)__							}_						}_					}_					if (queryService != null) {_						MetricQueryService.notifyOfRemovedMetric(queryService, metric)__					}_					if (metric instanceof View) {_						if (viewUpdater != null) {_							viewUpdater.notifyOfRemovedView((View) metric)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while registering metric.", e)__				}_			}_		}_	};un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,abstract,metric,group,group,synchronized,lock,if,is,shutdown,log,warn,cannot,unregister,metric,because,the,metric,registry,has,already,been,shut,down,else,try,if,reporters,null,for,int,i,0,i,reporters,size,i,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,removed,metric,metric,metric,name,front,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,if,metric,instanceof,view,if,view,updater,null,view,updater,notify,of,removed,view,view,metric,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, AbstractMetricGroup group);1499093341;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, AbstractMetricGroup group) {_		synchronized (lock) {_			if (isShutdown()) {_				LOG.warn("Cannot unregister metric, because the MetricRegistry has already been shut down.")__			} else {_				if (reporters != null) {_					for (int i = 0_ i < reporters.size()_ i++) {_						try {_						MetricReporter reporter = reporters.get(i)__							if (reporter != null) {_								FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__								reporter.notifyOfRemovedMetric(metric, metricName, front)__							}_						} catch (Exception e) {_							LOG.warn("Error while registering metric.", e)__						}_					}_				}_				try {_					if (queryService != null) {_						MetricQueryService.notifyOfRemovedMetric(queryService, metric)__					}_				} catch (Exception e) {_					LOG.warn("Error while registering metric.", e)__				}_				try {_					if (metric instanceof View) {_						if (viewUpdater != null) {_							viewUpdater.notifyOfRemovedView((View) metric)__						}_					}_				} catch (Exception e) {_					LOG.warn("Error while registering metric.", e)__				}_			}_		}_	};un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,abstract,metric,group,group,synchronized,lock,if,is,shutdown,log,warn,cannot,unregister,metric,because,the,metric,registry,has,already,been,shut,down,else,if,reporters,null,for,int,i,0,i,reporters,size,i,try,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,removed,metric,metric,metric,name,front,catch,exception,e,log,warn,error,while,registering,metric,e,try,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,catch,exception,e,log,warn,error,while,registering,metric,e,try,if,metric,instanceof,view,if,view,updater,null,view,updater,notify,of,removed,view,view,metric,catch,exception,e,log,warn,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, AbstractMetricGroup group);1507727580;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, AbstractMetricGroup group) {_		synchronized (lock) {_			if (isShutdown()) {_				LOG.warn("Cannot unregister metric, because the MetricRegistry has already been shut down.")__			} else {_				if (reporters != null) {_					for (int i = 0_ i < reporters.size()_ i++) {_						try {_						MetricReporter reporter = reporters.get(i)__							if (reporter != null) {_								FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__								reporter.notifyOfRemovedMetric(metric, metricName, front)__							}_						} catch (Exception e) {_							LOG.warn("Error while registering metric.", e)__						}_					}_				}_				try {_					if (queryService != null) {_						MetricQueryService.notifyOfRemovedMetric(queryService, metric)__					}_				} catch (Exception e) {_					LOG.warn("Error while registering metric.", e)__				}_				try {_					if (metric instanceof View) {_						if (viewUpdater != null) {_							viewUpdater.notifyOfRemovedView((View) metric)__						}_					}_				} catch (Exception e) {_					LOG.warn("Error while registering metric.", e)__				}_			}_		}_	};un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,abstract,metric,group,group,synchronized,lock,if,is,shutdown,log,warn,cannot,unregister,metric,because,the,metric,registry,has,already,been,shut,down,else,if,reporters,null,for,int,i,0,i,reporters,size,i,try,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,removed,metric,metric,metric,name,front,catch,exception,e,log,warn,error,while,registering,metric,e,try,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,catch,exception,e,log,warn,error,while,registering,metric,e,try,if,metric,instanceof,view,if,view,updater,null,view,updater,notify,of,removed,view,view,metric,catch,exception,e,log,warn,error,while,registering,metric,e
MetricRegistry -> public void unregister(Metric metric, String metricName, AbstractMetricGroup group);1508327406;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;public void unregister(Metric metric, String metricName, AbstractMetricGroup group) {_		synchronized (lock) {_			if (isShutdown()) {_				LOG.warn("Cannot unregister metric, because the MetricRegistry has already been shut down.")__			} else {_				if (reporters != null) {_					for (int i = 0_ i < reporters.size()_ i++) {_						try {_						MetricReporter reporter = reporters.get(i)__							if (reporter != null) {_								FrontMetricGroup front = new FrontMetricGroup<AbstractMetricGroup<?>>(i, group)__								reporter.notifyOfRemovedMetric(metric, metricName, front)__							}_						} catch (Exception e) {_							LOG.warn("Error while registering metric.", e)__						}_					}_				}_				try {_					if (queryService != null) {_						MetricQueryService.notifyOfRemovedMetric(queryService, metric)__					}_				} catch (Exception e) {_					LOG.warn("Error while registering metric.", e)__				}_				try {_					if (metric instanceof View) {_						if (viewUpdater != null) {_							viewUpdater.notifyOfRemovedView((View) metric)__						}_					}_				} catch (Exception e) {_					LOG.warn("Error while registering metric.", e)__				}_			}_		}_	};un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,unregister,metric,metric,string,metric,name,abstract,metric,group,group,synchronized,lock,if,is,shutdown,log,warn,cannot,unregister,metric,because,the,metric,registry,has,already,been,shut,down,else,if,reporters,null,for,int,i,0,i,reporters,size,i,try,metric,reporter,reporter,reporters,get,i,if,reporter,null,front,metric,group,front,new,front,metric,group,abstract,metric,group,i,group,reporter,notify,of,removed,metric,metric,metric,name,front,catch,exception,e,log,warn,error,while,registering,metric,e,try,if,query,service,null,metric,query,service,notify,of,removed,metric,query,service,metric,catch,exception,e,log,warn,error,while,registering,metric,e,try,if,metric,instanceof,view,if,view,updater,null,view,updater,notify,of,removed,view,view,metric,catch,exception,e,log,warn,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, MetricGroup group);1461259108;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, MetricGroup group) {_		try {_			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					if (reporter != null) {_						reporter.notifyOfAddedMetric(metric, metricName, group)__					}_				}_			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,metric,group,group,try,if,reporters,null,for,metric,reporter,reporter,reporters,if,reporter,null,reporter,notify,of,added,metric,metric,metric,name,group,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, MetricGroup group);1469183596;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, MetricGroup group) {_		try {_			if (reporter != null) {_				reporter.notifyOfAddedMetric(metric, metricName, group)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,metric,group,group,try,if,reporter,null,reporter,notify,of,added,metric,metric,metric,name,group,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, MetricGroup group);1469193901;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, MetricGroup group) {_		try {_			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					if (reporter != null) {_						reporter.notifyOfAddedMetric(metric, metricName, group)__					}_				}_			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,metric,group,group,try,if,reporters,null,for,metric,reporter,reporter,reporters,if,reporter,null,reporter,notify,of,added,metric,metric,metric,name,group,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, MetricGroup group);1470052627;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, MetricGroup group) {_		try {_			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					if (reporter != null) {_						reporter.notifyOfAddedMetric(metric, metricName, group)__					}_				}_			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,metric,group,group,try,if,reporters,null,for,metric,reporter,reporter,reporters,if,reporter,null,reporter,notify,of,added,metric,metric,metric,name,group,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, MetricGroup group);1470398077;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, MetricGroup group) {_		try {_			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					if (reporter != null) {_						reporter.notifyOfAddedMetric(metric, metricName, group)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, (AbstractMetricGroup) group)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,metric,group,group,try,if,reporters,null,for,metric,reporter,reporter,reporters,if,reporter,null,reporter,notify,of,added,metric,metric,metric,name,group,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,abstract,metric,group,group,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void register(Metric metric, String metricName, MetricGroup group);1474901363;Registers a new {@link Metric} with this registry.__@param metric      the metric that was added_@param metricName  the name of the metric_@param group       the group that contains the metric;public void register(Metric metric, String metricName, MetricGroup group) {_		try {_			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					if (reporter != null) {_						reporter.notifyOfAddedMetric(metric, metricName, group)__					}_				}_			}_			if (queryService != null) {_				MetricQueryService.notifyOfAddedMetric(queryService, metric, metricName, (AbstractMetricGroup) group)__			}_		} catch (Exception e) {_			LOG.error("Error while registering metric.", e)__		}_	};registers,a,new,link,metric,with,this,registry,param,metric,the,metric,that,was,added,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;public,void,register,metric,metric,string,metric,name,metric,group,group,try,if,reporters,null,for,metric,reporter,reporter,reporters,if,reporter,null,reporter,notify,of,added,metric,metric,metric,name,group,if,query,service,null,metric,query,service,notify,of,added,metric,query,service,metric,metric,name,abstract,metric,group,group,catch,exception,e,log,error,error,while,registering,metric,e
MetricRegistry -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1472651237;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		try {_			queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__		} catch (Exception e) {_			LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1476088810;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		try {_			queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__		} catch (Exception e) {_			LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1479135227;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		try {_			queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__		} catch (Exception e) {_			LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1479304991;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		try {_			queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__		} catch (Exception e) {_			LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1480345833;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		try {_			queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__		} catch (Exception e) {_			LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1481286311;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		try {_			queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__		} catch (Exception e) {_			LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1490018130;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		synchronized (lock) {_			Preconditions.checkState(!isShutdown(), "The metric registry has already been shut down.")___			try {_				queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__			} catch (Exception e) {_				LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__			}_		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,synchronized,lock,preconditions,check,state,is,shutdown,the,metric,registry,has,already,been,shut,down,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1496241592;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		synchronized (lock) {_			Preconditions.checkState(!isShutdown(), "The metric registry has already been shut down.")___			try {_				queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__			} catch (Exception e) {_				LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__			}_		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,synchronized,lock,preconditions,check,state,is,shutdown,the,metric,registry,has,already,been,shut,down,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1499093341;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		synchronized (lock) {_			Preconditions.checkState(!isShutdown(), "The metric registry has already been shut down.")___			try {_				queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__			} catch (Exception e) {_				LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__			}_		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,synchronized,lock,preconditions,check,state,is,shutdown,the,metric,registry,has,already,been,shut,down,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1507727580;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		synchronized (lock) {_			Preconditions.checkState(!isShutdown(), "The metric registry has already been shut down.")___			try {_				queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__			} catch (Exception e) {_				LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__			}_		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,synchronized,lock,preconditions,check,state,is,shutdown,the,metric,registry,has,already,been,shut,down,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1508327406;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		synchronized (lock) {_			Preconditions.checkState(!isShutdown(), "The metric registry has already been shut down.")___			try {_				queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__				metricQueryServicePath = AkkaUtils.getAkkaURL(actorSystem, queryService)__			} catch (Exception e) {_				LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__			}_		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,synchronized,lock,preconditions,check,state,is,shutdown,the,metric,registry,has,already,been,shut,down,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,metric,query,service,path,akka,utils,get,akka,url,actor,system,query,service,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public MetricRegistry(Configuration config);1461259108;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(Configuration config) {_		_		ScopeFormats scopeFormats__		try {_			scopeFormats = createScopeConfig(config)__		}_		catch (Exception e) {_			LOG.warn("Failed to parse scope format, using default scope formats", e)__			scopeFormats = new ScopeFormats()__		}_		this.scopeFormats = scopeFormats___		char delim__		try {_			delim = config.getString(ConfigConstants.METRICS_SCOPE_DELIMITER, ".").charAt(0)__		} catch (Exception e) {_			LOG.warn("Failed to parse delimiter, using default delimiter.", e)__			delim = '.'__		}_		this.delimiter = delim___		_		this.reporters = new ArrayList<>()___		final String definedReporters = config.getString(ConfigConstants.METRICS_REPORTERS_LIST, null)___		if (definedReporters == null) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__			this.executor = null__		} else {_			_			String[] namedReporters = definedReporters.split("\\s*,\\s*")__			for (String namedReporter : namedReporters) {__				DelegatingConfiguration reporterConfig = new DelegatingConfiguration(config, ConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + ".")__				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						if (this.executor == null) {_							executor = Executors.newSingleThreadScheduledExecutor()__						}_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)__				}_				catch (Throwable t) {_					shutdownExecutor()__					LOG.error("Could not instantiate metrics reporter " + namedReporter + ". Metrics might not be exposed/reported.", t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,configuration,config,scope,formats,scope,formats,try,scope,formats,create,scope,config,config,catch,exception,e,log,warn,failed,to,parse,scope,format,using,default,scope,formats,e,scope,formats,new,scope,formats,this,scope,formats,scope,formats,char,delim,try,delim,config,get,string,config,constants,char,at,0,catch,exception,e,log,warn,failed,to,parse,delimiter,using,default,delimiter,e,delim,this,delimiter,delim,this,reporters,new,array,list,final,string,defined,reporters,config,get,string,config,constants,null,if,defined,reporters,null,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,this,executor,null,else,string,named,reporters,defined,reporters,split,s,s,for,string,named,reporter,named,reporters,delegating,configuration,reporter,config,new,delegating,configuration,config,config,constants,named,reporter,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,if,this,executor,null,executor,executors,new,single,thread,scheduled,executor,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,catch,throwable,t,shutdown,executor,log,error,could,not,instantiate,metrics,reporter,named,reporter,metrics,might,not,be,exposed,reported,t
MetricRegistry -> public MetricRegistry(Configuration config);1469183596;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(Configuration config) {_		_		ScopeFormats scopeFormats__		try {_			scopeFormats = createScopeConfig(config)__		}_		catch (Exception e) {_			LOG.warn("Failed to parse scope format, using default scope formats", e)__			scopeFormats = new ScopeFormats()__		}_		this.scopeFormats = scopeFormats___		char delim__		try {_			delim = config.getString(ConfigConstants.METRICS_SCOPE_DELIMITER, ".").charAt(0)__		} catch (Exception e) {_			LOG.warn("Failed to parse delimiter, using default delimiter.", e)__			delim = '.'__		}_		this.delimiter = delim___		__		final String className = config.getString(ConfigConstants.METRICS_REPORTER_CLASS, null)__		if (className == null) {_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__			this.reporter = null__			this.executor = null__		}_		else {_			MetricReporter reporter__			ScheduledExecutorService executor = null__			try {_				String configuredPeriod = config.getString(ConfigConstants.METRICS_REPORTER_INTERVAL, null)__				TimeUnit timeunit = TimeUnit.SECONDS__				long period = 10___				if (configuredPeriod != null) {_					try {_						String[] interval = configuredPeriod.split(" ")__						period = Long.parseLong(interval[0])__						timeunit = TimeUnit.valueOf(interval[1])__					}_					catch (Exception e) {_						LOG.error("Cannot parse report interval from config: " + configuredPeriod +_							" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_							"Using default reporting interval.")__					}_				}__				MetricConfig reporterConfig = createReporterConfig(config)___				Class<?> reporterClass = Class.forName(className)__				reporter = (MetricReporter) reporterClass.newInstance()__				reporter.open(reporterConfig)___				if (reporter instanceof Scheduled) {_					executor = Executors.newSingleThreadScheduledExecutor()__					LOG.info("Periodically reporting metrics in intervals of {} {}", period, timeunit.name())___					executor.scheduleWithFixedDelay(new ReporterTask((Scheduled) reporter), period, period, timeunit)__				}_			}_			catch (Throwable t) {_				shutdownExecutor()__				LOG.info("Could not instantiate metrics reporter. No metrics will be exposed/reported.", t)__				reporter = null__			}__			this.reporter = reporter__			this.executor = executor__		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,configuration,config,scope,formats,scope,formats,try,scope,formats,create,scope,config,config,catch,exception,e,log,warn,failed,to,parse,scope,format,using,default,scope,formats,e,scope,formats,new,scope,formats,this,scope,formats,scope,formats,char,delim,try,delim,config,get,string,config,constants,char,at,0,catch,exception,e,log,warn,failed,to,parse,delimiter,using,default,delimiter,e,delim,this,delimiter,delim,final,string,class,name,config,get,string,config,constants,null,if,class,name,null,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,this,reporter,null,this,executor,null,else,metric,reporter,reporter,scheduled,executor,service,executor,null,try,string,configured,period,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,metric,config,reporter,config,create,reporter,config,config,class,reporter,class,class,for,name,class,name,reporter,metric,reporter,reporter,class,new,instance,reporter,open,reporter,config,if,reporter,instanceof,scheduled,executor,executors,new,single,thread,scheduled,executor,log,info,periodically,reporting,metrics,in,intervals,of,period,timeunit,name,executor,schedule,with,fixed,delay,new,reporter,task,scheduled,reporter,period,period,timeunit,catch,throwable,t,shutdown,executor,log,info,could,not,instantiate,metrics,reporter,no,metrics,will,be,exposed,reported,t,reporter,null,this,reporter,reporter,this,executor,executor
MetricRegistry -> public MetricRegistry(Configuration config);1469193901;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(Configuration config) {_		_		ScopeFormats scopeFormats__		try {_			scopeFormats = createScopeConfig(config)__		}_		catch (Exception e) {_			LOG.warn("Failed to parse scope format, using default scope formats", e)__			scopeFormats = new ScopeFormats()__		}_		this.scopeFormats = scopeFormats___		char delim__		try {_			delim = config.getString(ConfigConstants.METRICS_SCOPE_DELIMITER, ".").charAt(0)__		} catch (Exception e) {_			LOG.warn("Failed to parse delimiter, using default delimiter.", e)__			delim = '.'__		}_		this.delimiter = delim___		_		this.reporters = new ArrayList<>()___		final String definedReporters = config.getString(ConfigConstants.METRICS_REPORTERS_LIST, null)___		if (definedReporters == null) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__			this.executor = null__		} else {_			_			String[] namedReporters = definedReporters.split("\\s*,\\s*")__			for (String namedReporter : namedReporters) {__				DelegatingConfiguration reporterConfig = new DelegatingConfiguration(config, ConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + ".")__				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						if (this.executor == null) {_							executor = Executors.newSingleThreadScheduledExecutor()__						}_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					}_					reporters.add(reporterInstance)__				}_				catch (Throwable t) {_					shutdownExecutor()__					LOG.error("Could not instantiate metrics reporter" + namedReporter + ". Metrics might not be exposed/reported.", t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,configuration,config,scope,formats,scope,formats,try,scope,formats,create,scope,config,config,catch,exception,e,log,warn,failed,to,parse,scope,format,using,default,scope,formats,e,scope,formats,new,scope,formats,this,scope,formats,scope,formats,char,delim,try,delim,config,get,string,config,constants,char,at,0,catch,exception,e,log,warn,failed,to,parse,delimiter,using,default,delimiter,e,delim,this,delimiter,delim,this,reporters,new,array,list,final,string,defined,reporters,config,get,string,config,constants,null,if,defined,reporters,null,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,this,executor,null,else,string,named,reporters,defined,reporters,split,s,s,for,string,named,reporter,named,reporters,delegating,configuration,reporter,config,new,delegating,configuration,config,config,constants,named,reporter,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,if,this,executor,null,executor,executors,new,single,thread,scheduled,executor,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,reporter,task,scheduled,reporter,instance,period,period,timeunit,reporters,add,reporter,instance,catch,throwable,t,shutdown,executor,log,error,could,not,instantiate,metrics,reporter,named,reporter,metrics,might,not,be,exposed,reported,t
MetricRegistry -> public MetricRegistry(Configuration config);1470052627;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(Configuration config) {_		_		ScopeFormats scopeFormats__		try {_			scopeFormats = createScopeConfig(config)__		}_		catch (Exception e) {_			LOG.warn("Failed to parse scope format, using default scope formats", e)__			scopeFormats = new ScopeFormats()__		}_		this.scopeFormats = scopeFormats___		char delim__		try {_			delim = config.getString(ConfigConstants.METRICS_SCOPE_DELIMITER, ".").charAt(0)__		} catch (Exception e) {_			LOG.warn("Failed to parse delimiter, using default delimiter.", e)__			delim = '.'__		}_		this.delimiter = delim___		_		this.reporters = new ArrayList<>()___		final String definedReporters = config.getString(ConfigConstants.METRICS_REPORTERS_LIST, null)___		if (definedReporters == null) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__			this.executor = null__		} else {_			_			String[] namedReporters = definedReporters.split("\\s*,\\s*")__			for (String namedReporter : namedReporters) {__				DelegatingConfiguration reporterConfig = new DelegatingConfiguration(config, ConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + ".")__				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						if (this.executor == null) {_							executor = Executors.newSingleThreadScheduledExecutor()__						}_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)__				}_				catch (Throwable t) {_					shutdownExecutor()__					LOG.error("Could not instantiate metrics reporter" + namedReporter + ". Metrics might not be exposed/reported.", t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,configuration,config,scope,formats,scope,formats,try,scope,formats,create,scope,config,config,catch,exception,e,log,warn,failed,to,parse,scope,format,using,default,scope,formats,e,scope,formats,new,scope,formats,this,scope,formats,scope,formats,char,delim,try,delim,config,get,string,config,constants,char,at,0,catch,exception,e,log,warn,failed,to,parse,delimiter,using,default,delimiter,e,delim,this,delimiter,delim,this,reporters,new,array,list,final,string,defined,reporters,config,get,string,config,constants,null,if,defined,reporters,null,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,this,executor,null,else,string,named,reporters,defined,reporters,split,s,s,for,string,named,reporter,named,reporters,delegating,configuration,reporter,config,new,delegating,configuration,config,config,constants,named,reporter,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,if,this,executor,null,executor,executors,new,single,thread,scheduled,executor,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,catch,throwable,t,shutdown,executor,log,error,could,not,instantiate,metrics,reporter,named,reporter,metrics,might,not,be,exposed,reported,t
MetricRegistry -> public MetricRegistry(Configuration config);1470398077;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistry(Configuration config) {_		_		ScopeFormats scopeFormats__		try {_			scopeFormats = createScopeConfig(config)__		}_		catch (Exception e) {_			LOG.warn("Failed to parse scope format, using default scope formats", e)__			scopeFormats = new ScopeFormats()__		}_		this.scopeFormats = scopeFormats___		char delim__		try {_			delim = config.getString(ConfigConstants.METRICS_SCOPE_DELIMITER, ".").charAt(0)__		} catch (Exception e) {_			LOG.warn("Failed to parse delimiter, using default delimiter.", e)__			delim = '.'__		}_		this.delimiter = delim___		_		this.reporters = new ArrayList<>()___		final String definedReporters = config.getString(ConfigConstants.METRICS_REPORTERS_LIST, null)___		if (definedReporters == null) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__			this.executor = null__		} else {_			_			String[] namedReporters = definedReporters.split("\\s*,\\s*")__			for (String namedReporter : namedReporters) {__				DelegatingConfiguration reporterConfig = new DelegatingConfiguration(config, ConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + ".")__				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						if (this.executor == null) {_							executor = Executors.newSingleThreadScheduledExecutor()__						}_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)__				}_				catch (Throwable t) {_					shutdownExecutor()__					LOG.error("Could not instantiate metrics reporter " + namedReporter + ". Metrics might not be exposed/reported.", t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,configuration,config,scope,formats,scope,formats,try,scope,formats,create,scope,config,config,catch,exception,e,log,warn,failed,to,parse,scope,format,using,default,scope,formats,e,scope,formats,new,scope,formats,this,scope,formats,scope,formats,char,delim,try,delim,config,get,string,config,constants,char,at,0,catch,exception,e,log,warn,failed,to,parse,delimiter,using,default,delimiter,e,delim,this,delimiter,delim,this,reporters,new,array,list,final,string,defined,reporters,config,get,string,config,constants,null,if,defined,reporters,null,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,this,executor,null,else,string,named,reporters,defined,reporters,split,s,s,for,string,named,reporter,named,reporters,delegating,configuration,reporter,config,new,delegating,configuration,config,config,constants,named,reporter,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,if,this,executor,null,executor,executors,new,single,thread,scheduled,executor,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,catch,throwable,t,shutdown,executor,log,error,could,not,instantiate,metrics,reporter,named,reporter,metrics,might,not,be,exposed,reported,t
MetricRegistry -> void unregister(Metric metric, String metricName, AbstractMetricGroup group)_;1508252550;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;void unregister(Metric metric, String metricName, AbstractMetricGroup group)_;un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;void,unregister,metric,metric,string,metric,name,abstract,metric,group,group
MetricRegistry -> void unregister(Metric metric, String metricName, AbstractMetricGroup group)_;1508426573;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;void unregister(Metric metric, String metricName, AbstractMetricGroup group)_;un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;void,unregister,metric,metric,string,metric,name,abstract,metric,group,group
MetricRegistry -> void unregister(Metric metric, String metricName, AbstractMetricGroup group)_;1508494390;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;void unregister(Metric metric, String metricName, AbstractMetricGroup group)_;un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;void,unregister,metric,metric,string,metric,name,abstract,metric,group,group
MetricRegistry -> void unregister(Metric metric, String metricName, AbstractMetricGroup group)_;1510061826;Un-registers the given {@link Metric} with this registry.__@param metric      the metric that should be removed_@param metricName  the name of the metric_@param group       the group that contains the metric;void unregister(Metric metric, String metricName, AbstractMetricGroup group)_;un,registers,the,given,link,metric,with,this,registry,param,metric,the,metric,that,should,be,removed,param,metric,name,the,name,of,the,metric,param,group,the,group,that,contains,the,metric;void,unregister,metric,metric,string,metric,name,abstract,metric,group,group
MetricRegistry -> ScopeFormats getScopeFormats()_;1508252550;Returns the scope formats.__@return scope formats;ScopeFormats getScopeFormats()_;returns,the,scope,formats,return,scope,formats;scope,formats,get,scope,formats
MetricRegistry -> ScopeFormats getScopeFormats()_;1508494390;Returns the scope formats.__@return scope formats;ScopeFormats getScopeFormats()_;returns,the,scope,formats,return,scope,formats;scope,formats,get,scope,formats
MetricRegistry -> ScopeFormats getScopeFormats()_;1510061826;Returns the scope formats.__@return scope formats;ScopeFormats getScopeFormats()_;returns,the,scope,formats,return,scope,formats;scope,formats,get,scope,formats
MetricRegistry -> int getNumberReporters()_;1508252550;Returns the number of registered reporters.;int getNumberReporters()_;returns,the,number,of,registered,reporters;int,get,number,reporters
MetricRegistry -> int getNumberReporters()_;1508426573;Returns the number of registered reporters.;int getNumberReporters()_;returns,the,number,of,registered,reporters;int,get,number,reporters
MetricRegistry -> int getNumberReporters()_;1508494390;Returns the number of registered reporters.;int getNumberReporters()_;returns,the,number,of,registered,reporters;int,get,number,reporters
MetricRegistry -> int getNumberReporters()_;1510061826;Returns the number of registered reporters.;int getNumberReporters()_;returns,the,number,of,registered,reporters;int,get,number,reporters
MetricRegistry -> char getDelimiter(int index)_;1508252550;Returns the configured delimiter for the reporter with the given index.__@param index index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;char getDelimiter(int index)_;returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;char,get,delimiter,int,index
MetricRegistry -> char getDelimiter(int index)_;1508426573;Returns the configured delimiter for the reporter with the given index.__@param index index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;char getDelimiter(int index)_;returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;char,get,delimiter,int,index
MetricRegistry -> char getDelimiter(int index)_;1508494390;Returns the configured delimiter for the reporter with the given index.__@param index index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;char getDelimiter(int index)_;returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;char,get,delimiter,int,index
MetricRegistry -> char getDelimiter(int index)_;1510061826;Returns the configured delimiter for the reporter with the given index.__@param index index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;char getDelimiter(int index)_;returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;char,get,delimiter,int,index
MetricRegistry -> public boolean isShutdown();1480345833;Returns whether this registry has been shutdown.__@return true, if this registry was shutdown, otherwise false;public boolean isShutdown() {_		return reporters == null && executor.isShutdown()__	};returns,whether,this,registry,has,been,shutdown,return,true,if,this,registry,was,shutdown,otherwise,false;public,boolean,is,shutdown,return,reporters,null,executor,is,shutdown
MetricRegistry -> public boolean isShutdown();1481286311;Returns whether this registry has been shutdown.__@return true, if this registry was shutdown, otherwise false;public boolean isShutdown() {_		return reporters == null && executor.isShutdown()__	};returns,whether,this,registry,has,been,shutdown,return,true,if,this,registry,was,shutdown,otherwise,false;public,boolean,is,shutdown,return,reporters,null,executor,is,shutdown
MetricRegistry -> public boolean isShutdown();1490018130;Returns whether this registry has been shutdown.__@return true, if this registry was shutdown, otherwise false;public boolean isShutdown() {_		synchronized (lock) {_			return reporters == null && executor.isShutdown()__		}_	};returns,whether,this,registry,has,been,shutdown,return,true,if,this,registry,was,shutdown,otherwise,false;public,boolean,is,shutdown,synchronized,lock,return,reporters,null,executor,is,shutdown
MetricRegistry -> public boolean isShutdown();1496241592;Returns whether this registry has been shutdown.__@return true, if this registry was shutdown, otherwise false;public boolean isShutdown() {_		synchronized (lock) {_			return reporters == null && executor.isShutdown()__		}_	};returns,whether,this,registry,has,been,shutdown,return,true,if,this,registry,was,shutdown,otherwise,false;public,boolean,is,shutdown,synchronized,lock,return,reporters,null,executor,is,shutdown
MetricRegistry -> public boolean isShutdown();1499093341;Returns whether this registry has been shutdown.__@return true, if this registry was shutdown, otherwise false;public boolean isShutdown() {_		synchronized (lock) {_			return reporters == null && executor.isShutdown()__		}_	};returns,whether,this,registry,has,been,shutdown,return,true,if,this,registry,was,shutdown,otherwise,false;public,boolean,is,shutdown,synchronized,lock,return,reporters,null,executor,is,shutdown
MetricRegistry -> public boolean isShutdown();1507727580;Returns whether this registry has been shutdown.__@return true, if this registry was shutdown, otherwise false;public boolean isShutdown() {_		synchronized (lock) {_			return reporters == null && executor.isShutdown()__		}_	};returns,whether,this,registry,has,been,shutdown,return,true,if,this,registry,was,shutdown,otherwise,false;public,boolean,is,shutdown,synchronized,lock,return,reporters,null,executor,is,shutdown
MetricRegistry -> public boolean isShutdown();1508327406;Returns whether this registry has been shutdown.__@return true, if this registry was shutdown, otherwise false;public boolean isShutdown() {_		synchronized (lock) {_			return reporters == null && executor.isShutdown()__		}_	};returns,whether,this,registry,has,been,shutdown,return,true,if,this,registry,was,shutdown,otherwise,false;public,boolean,is,shutdown,synchronized,lock,return,reporters,null,executor,is,shutdown
MetricRegistry -> public void startQueryService(ActorSystem actorSystem);1470398077;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on;public void startQueryService(ActorSystem actorSystem) {_		try {_			queryService = MetricQueryService.startMetricQueryService(actorSystem)__		} catch (Exception e) {_			LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on;public,void,start,query,service,actor,system,actor,system,try,query,service,metric,query,service,start,metric,query,service,actor,system,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public void startQueryService(ActorSystem actorSystem);1474366180;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on;public void startQueryService(ActorSystem actorSystem) {_		try {_			queryService = MetricQueryService.startMetricQueryService(actorSystem)__		} catch (Exception e) {_			LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on;public,void,start,query,service,actor,system,actor,system,try,query,service,metric,query,service,start,metric,query,service,actor,system,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public void startQueryService(ActorSystem actorSystem);1474901363;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on;public void startQueryService(ActorSystem actorSystem) {_		try {_			queryService = MetricQueryService.startMetricQueryService(actorSystem)__		} catch (Exception e) {_			LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on;public,void,start,query,service,actor,system,actor,system,try,query,service,metric,query,service,start,metric,query,service,actor,system,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistry -> public char getDelimiter(int reporterIndex);1472651237;Returns the configured delimiter for the reporter with the given index.__@param reporterIndex index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;public char getDelimiter(int reporterIndex) {_		try {_			return delimiters.get(reporterIndex)__		} catch (IndexOutOfBoundsException e) {_			LOG.warn("Delimiter for reporter index {} not found, returning global delimiter.", reporterIndex)__			return this.globalDelimiter__		}_	};returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,reporter,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;public,char,get,delimiter,int,reporter,index,try,return,delimiters,get,reporter,index,catch,index,out,of,bounds,exception,e,log,warn,delimiter,for,reporter,index,not,found,returning,global,delimiter,reporter,index,return,this,global,delimiter
MetricRegistry -> public char getDelimiter(int reporterIndex);1474366180;Returns the configured delimiter for the reporter with the given index.__@param reporterIndex index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;public char getDelimiter(int reporterIndex) {_		try {_			return delimiters.get(reporterIndex)__		} catch (IndexOutOfBoundsException e) {_			LOG.warn("Delimiter for reporter index {} not found, returning global delimiter.", reporterIndex)__			return this.globalDelimiter__		}_	};returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,reporter,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;public,char,get,delimiter,int,reporter,index,try,return,delimiters,get,reporter,index,catch,index,out,of,bounds,exception,e,log,warn,delimiter,for,reporter,index,not,found,returning,global,delimiter,reporter,index,return,this,global,delimiter
MetricRegistry -> public char getDelimiter(int reporterIndex);1476088810;Returns the configured delimiter for the reporter with the given index.__@param reporterIndex index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;public char getDelimiter(int reporterIndex) {_		try {_			return delimiters.get(reporterIndex)__		} catch (IndexOutOfBoundsException e) {_			LOG.warn("Delimiter for reporter index {} not found, returning global delimiter.", reporterIndex)__			return this.globalDelimiter__		}_	};returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,reporter,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;public,char,get,delimiter,int,reporter,index,try,return,delimiters,get,reporter,index,catch,index,out,of,bounds,exception,e,log,warn,delimiter,for,reporter,index,not,found,returning,global,delimiter,reporter,index,return,this,global,delimiter
MetricRegistry -> public char getDelimiter(int reporterIndex);1479135227;Returns the configured delimiter for the reporter with the given index.__@param reporterIndex index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;public char getDelimiter(int reporterIndex) {_		try {_			return delimiters.get(reporterIndex)__		} catch (IndexOutOfBoundsException e) {_			LOG.warn("Delimiter for reporter index {} not found, returning global delimiter.", reporterIndex)__			return this.globalDelimiter__		}_	};returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,reporter,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;public,char,get,delimiter,int,reporter,index,try,return,delimiters,get,reporter,index,catch,index,out,of,bounds,exception,e,log,warn,delimiter,for,reporter,index,not,found,returning,global,delimiter,reporter,index,return,this,global,delimiter
MetricRegistry -> public char getDelimiter(int reporterIndex);1479304991;Returns the configured delimiter for the reporter with the given index.__@param reporterIndex index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;public char getDelimiter(int reporterIndex) {_		try {_			return delimiters.get(reporterIndex)__		} catch (IndexOutOfBoundsException e) {_			LOG.warn("Delimiter for reporter index {} not found, returning global delimiter.", reporterIndex)__			return this.globalDelimiter__		}_	};returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,reporter,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;public,char,get,delimiter,int,reporter,index,try,return,delimiters,get,reporter,index,catch,index,out,of,bounds,exception,e,log,warn,delimiter,for,reporter,index,not,found,returning,global,delimiter,reporter,index,return,this,global,delimiter
MetricRegistry -> public char getDelimiter(int reporterIndex);1480345833;Returns the configured delimiter for the reporter with the given index.__@param reporterIndex index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;public char getDelimiter(int reporterIndex) {_		try {_			return delimiters.get(reporterIndex)__		} catch (IndexOutOfBoundsException e) {_			LOG.warn("Delimiter for reporter index {} not found, returning global delimiter.", reporterIndex)__			return this.globalDelimiter__		}_	};returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,reporter,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;public,char,get,delimiter,int,reporter,index,try,return,delimiters,get,reporter,index,catch,index,out,of,bounds,exception,e,log,warn,delimiter,for,reporter,index,not,found,returning,global,delimiter,reporter,index,return,this,global,delimiter
MetricRegistry -> public char getDelimiter(int reporterIndex);1481286311;Returns the configured delimiter for the reporter with the given index.__@param reporterIndex index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;public char getDelimiter(int reporterIndex) {_		try {_			return delimiters.get(reporterIndex)__		} catch (IndexOutOfBoundsException e) {_			LOG.warn("Delimiter for reporter index {} not found, returning global delimiter.", reporterIndex)__			return this.globalDelimiter__		}_	};returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,reporter,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;public,char,get,delimiter,int,reporter,index,try,return,delimiters,get,reporter,index,catch,index,out,of,bounds,exception,e,log,warn,delimiter,for,reporter,index,not,found,returning,global,delimiter,reporter,index,return,this,global,delimiter
MetricRegistry -> public char getDelimiter(int reporterIndex);1490018130;Returns the configured delimiter for the reporter with the given index.__@param reporterIndex index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;public char getDelimiter(int reporterIndex) {_		try {_			return delimiters.get(reporterIndex)__		} catch (IndexOutOfBoundsException e) {_			LOG.warn("Delimiter for reporter index {} not found, returning global delimiter.", reporterIndex)__			return this.globalDelimiter__		}_	};returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,reporter,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;public,char,get,delimiter,int,reporter,index,try,return,delimiters,get,reporter,index,catch,index,out,of,bounds,exception,e,log,warn,delimiter,for,reporter,index,not,found,returning,global,delimiter,reporter,index,return,this,global,delimiter
MetricRegistry -> public char getDelimiter(int reporterIndex);1496241592;Returns the configured delimiter for the reporter with the given index.__@param reporterIndex index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;public char getDelimiter(int reporterIndex) {_		try {_			return delimiters.get(reporterIndex)__		} catch (IndexOutOfBoundsException e) {_			LOG.warn("Delimiter for reporter index {} not found, returning global delimiter.", reporterIndex)__			return this.globalDelimiter__		}_	};returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,reporter,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;public,char,get,delimiter,int,reporter,index,try,return,delimiters,get,reporter,index,catch,index,out,of,bounds,exception,e,log,warn,delimiter,for,reporter,index,not,found,returning,global,delimiter,reporter,index,return,this,global,delimiter
MetricRegistry -> public char getDelimiter(int reporterIndex);1499093341;Returns the configured delimiter for the reporter with the given index.__@param reporterIndex index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;public char getDelimiter(int reporterIndex) {_		try {_			return delimiters.get(reporterIndex)__		} catch (IndexOutOfBoundsException e) {_			LOG.warn("Delimiter for reporter index {} not found, returning global delimiter.", reporterIndex)__			return this.globalDelimiter__		}_	};returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,reporter,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;public,char,get,delimiter,int,reporter,index,try,return,delimiters,get,reporter,index,catch,index,out,of,bounds,exception,e,log,warn,delimiter,for,reporter,index,not,found,returning,global,delimiter,reporter,index,return,this,global,delimiter
MetricRegistry -> public char getDelimiter(int reporterIndex);1507727580;Returns the configured delimiter for the reporter with the given index.__@param reporterIndex index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;public char getDelimiter(int reporterIndex) {_		try {_			return delimiters.get(reporterIndex)__		} catch (IndexOutOfBoundsException e) {_			LOG.warn("Delimiter for reporter index {} not found, returning global delimiter.", reporterIndex)__			return this.globalDelimiter__		}_	};returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,reporter,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;public,char,get,delimiter,int,reporter,index,try,return,delimiters,get,reporter,index,catch,index,out,of,bounds,exception,e,log,warn,delimiter,for,reporter,index,not,found,returning,global,delimiter,reporter,index,return,this,global,delimiter
MetricRegistry -> public char getDelimiter(int reporterIndex);1508327406;Returns the configured delimiter for the reporter with the given index.__@param reporterIndex index of the reporter whose delimiter should be used_@return configured reporter delimiter, or global delimiter if index is invalid;public char getDelimiter(int reporterIndex) {_		try {_			return delimiters.get(reporterIndex)__		} catch (IndexOutOfBoundsException e) {_			LOG.warn("Delimiter for reporter index {} not found, returning global delimiter.", reporterIndex)__			return this.globalDelimiter__		}_	};returns,the,configured,delimiter,for,the,reporter,with,the,given,index,param,reporter,index,index,of,the,reporter,whose,delimiter,should,be,used,return,configured,reporter,delimiter,or,global,delimiter,if,index,is,invalid;public,char,get,delimiter,int,reporter,index,try,return,delimiters,get,reporter,index,catch,index,out,of,bounds,exception,e,log,warn,delimiter,for,reporter,index,not,found,returning,global,delimiter,reporter,index,return,this,global,delimiter
