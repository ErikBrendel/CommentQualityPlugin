# id;timestamp;commentText;codeText;commentWords;codeWords
MasterHooks -> public static void restoreMasterHooks( 			final Map<String, MasterTriggerRestoreHook<?>> masterHooks, 			final Collection<MasterState> states, 			final long checkpointId, 			final boolean allowUnmatchedState, 			final Logger log) throws FlinkException;1493236605;Calls the restore method given checkpoint master hooks and passes the given master_state to them where state with a matching name is found.__<p>If state is found and no hook with the same name is found, the method throws an_exception, unless the {@code allowUnmatchedState} flag is set.__@param masterHooks The hooks to call restore on_@param states The state to pass to the hooks_@param checkpointId The checkpoint ID of the restored checkpoint_@param allowUnmatchedState True,_@param log The logger for log messages__@throws FlinkException Thrown, if the hooks throw an exception, or the state+_deserialization fails.;public static void restoreMasterHooks(_			final Map<String, MasterTriggerRestoreHook<?>> masterHooks,_			final Collection<MasterState> states,_			final long checkpointId,_			final boolean allowUnmatchedState,_			final Logger log) throws FlinkException {__		_		if (states == null || states.isEmpty() || masterHooks == null || masterHooks.isEmpty()) {_			log.info("No master state to restore")__			return__		}__		log.info("Calling master restore hooks")___		_		final LinkedHashMap<String, MasterTriggerRestoreHook<?>> allHooks = new LinkedHashMap<>(masterHooks)___		_		final ArrayList<Tuple2<MasterTriggerRestoreHook<?>, Object>> hooksAndStates = new ArrayList<>()___		for (MasterState state : states) {_			if (state != null) {_				final String name = state.name()__				final MasterTriggerRestoreHook<?> hook = allHooks.remove(name)___				if (hook != null) {_					log.debug("Found state to restore for hook '{}'", name)___					Object deserializedState = deserializeState(state, hook)__					hooksAndStates.add(new Tuple2<MasterTriggerRestoreHook<?>, Object>(hook, deserializedState))__				}_				else if (!allowUnmatchedState) {_					throw new IllegalStateException("Found state '" + state.name() +_							"' which is not resumed by any hook.")__				}_				else {_					log.info("Dropping unmatched state from '{}'", name)__				}_			}_		}__		_		for (Tuple2<MasterTriggerRestoreHook<?>, Object> hookAndState : hooksAndStates) {_			restoreHook(hookAndState.f1, hookAndState.f0, checkpointId)__		}__		_		for (MasterTriggerRestoreHook<?> hook : allHooks.values()) {_			restoreHook(null, hook, checkpointId)__		}_	};calls,the,restore,method,given,checkpoint,master,hooks,and,passes,the,given,master,state,to,them,where,state,with,a,matching,name,is,found,p,if,state,is,found,and,no,hook,with,the,same,name,is,found,the,method,throws,an,exception,unless,the,code,allow,unmatched,state,flag,is,set,param,master,hooks,the,hooks,to,call,restore,on,param,states,the,state,to,pass,to,the,hooks,param,checkpoint,id,the,checkpoint,id,of,the,restored,checkpoint,param,allow,unmatched,state,true,param,log,the,logger,for,log,messages,throws,flink,exception,thrown,if,the,hooks,throw,an,exception,or,the,state,deserialization,fails;public,static,void,restore,master,hooks,final,map,string,master,trigger,restore,hook,master,hooks,final,collection,master,state,states,final,long,checkpoint,id,final,boolean,allow,unmatched,state,final,logger,log,throws,flink,exception,if,states,null,states,is,empty,master,hooks,null,master,hooks,is,empty,log,info,no,master,state,to,restore,return,log,info,calling,master,restore,hooks,final,linked,hash,map,string,master,trigger,restore,hook,all,hooks,new,linked,hash,map,master,hooks,final,array,list,tuple2,master,trigger,restore,hook,object,hooks,and,states,new,array,list,for,master,state,state,states,if,state,null,final,string,name,state,name,final,master,trigger,restore,hook,hook,all,hooks,remove,name,if,hook,null,log,debug,found,state,to,restore,for,hook,name,object,deserialized,state,deserialize,state,state,hook,hooks,and,states,add,new,tuple2,master,trigger,restore,hook,object,hook,deserialized,state,else,if,allow,unmatched,state,throw,new,illegal,state,exception,found,state,state,name,which,is,not,resumed,by,any,hook,else,log,info,dropping,unmatched,state,from,name,for,tuple2,master,trigger,restore,hook,object,hook,and,state,hooks,and,states,restore,hook,hook,and,state,f1,hook,and,state,f0,checkpoint,id,for,master,trigger,restore,hook,hook,all,hooks,values,restore,hook,null,hook,checkpoint,id
MasterHooks -> public static void restoreMasterHooks( 			final Map<String, MasterTriggerRestoreHook<?>> masterHooks, 			final Collection<MasterState> states, 			final long checkpointId, 			final boolean allowUnmatchedState, 			final Logger log) throws FlinkException;1495200169;Calls the restore method given checkpoint master hooks and passes the given master_state to them where state with a matching name is found.__<p>If state is found and no hook with the same name is found, the method throws an_exception, unless the {@code allowUnmatchedState} flag is set.__@param masterHooks The hooks to call restore on_@param states The state to pass to the hooks_@param checkpointId The checkpoint ID of the restored checkpoint_@param allowUnmatchedState True,_@param log The logger for log messages__@throws FlinkException Thrown, if the hooks throw an exception, or the state+_deserialization fails.;public static void restoreMasterHooks(_			final Map<String, MasterTriggerRestoreHook<?>> masterHooks,_			final Collection<MasterState> states,_			final long checkpointId,_			final boolean allowUnmatchedState,_			final Logger log) throws FlinkException {__		_		if (states == null || states.isEmpty() || masterHooks == null || masterHooks.isEmpty()) {_			log.info("No master state to restore")__			return__		}__		log.info("Calling master restore hooks")___		_		final LinkedHashMap<String, MasterTriggerRestoreHook<?>> allHooks = new LinkedHashMap<>(masterHooks)___		_		final ArrayList<Tuple2<MasterTriggerRestoreHook<?>, Object>> hooksAndStates = new ArrayList<>()___		for (MasterState state : states) {_			if (state != null) {_				final String name = state.name()__				final MasterTriggerRestoreHook<?> hook = allHooks.remove(name)___				if (hook != null) {_					log.debug("Found state to restore for hook '{}'", name)___					Object deserializedState = deserializeState(state, hook)__					hooksAndStates.add(new Tuple2<MasterTriggerRestoreHook<?>, Object>(hook, deserializedState))__				}_				else if (!allowUnmatchedState) {_					throw new IllegalStateException("Found state '" + state.name() +_							"' which is not resumed by any hook.")__				}_				else {_					log.info("Dropping unmatched state from '{}'", name)__				}_			}_		}__		_		for (Tuple2<MasterTriggerRestoreHook<?>, Object> hookAndState : hooksAndStates) {_			restoreHook(hookAndState.f1, hookAndState.f0, checkpointId)__		}__		_		for (MasterTriggerRestoreHook<?> hook : allHooks.values()) {_			restoreHook(null, hook, checkpointId)__		}_	};calls,the,restore,method,given,checkpoint,master,hooks,and,passes,the,given,master,state,to,them,where,state,with,a,matching,name,is,found,p,if,state,is,found,and,no,hook,with,the,same,name,is,found,the,method,throws,an,exception,unless,the,code,allow,unmatched,state,flag,is,set,param,master,hooks,the,hooks,to,call,restore,on,param,states,the,state,to,pass,to,the,hooks,param,checkpoint,id,the,checkpoint,id,of,the,restored,checkpoint,param,allow,unmatched,state,true,param,log,the,logger,for,log,messages,throws,flink,exception,thrown,if,the,hooks,throw,an,exception,or,the,state,deserialization,fails;public,static,void,restore,master,hooks,final,map,string,master,trigger,restore,hook,master,hooks,final,collection,master,state,states,final,long,checkpoint,id,final,boolean,allow,unmatched,state,final,logger,log,throws,flink,exception,if,states,null,states,is,empty,master,hooks,null,master,hooks,is,empty,log,info,no,master,state,to,restore,return,log,info,calling,master,restore,hooks,final,linked,hash,map,string,master,trigger,restore,hook,all,hooks,new,linked,hash,map,master,hooks,final,array,list,tuple2,master,trigger,restore,hook,object,hooks,and,states,new,array,list,for,master,state,state,states,if,state,null,final,string,name,state,name,final,master,trigger,restore,hook,hook,all,hooks,remove,name,if,hook,null,log,debug,found,state,to,restore,for,hook,name,object,deserialized,state,deserialize,state,state,hook,hooks,and,states,add,new,tuple2,master,trigger,restore,hook,object,hook,deserialized,state,else,if,allow,unmatched,state,throw,new,illegal,state,exception,found,state,state,name,which,is,not,resumed,by,any,hook,else,log,info,dropping,unmatched,state,from,name,for,tuple2,master,trigger,restore,hook,object,hook,and,state,hooks,and,states,restore,hook,hook,and,state,f1,hook,and,state,f0,checkpoint,id,for,master,trigger,restore,hook,hook,all,hooks,values,restore,hook,null,hook,checkpoint,id
MasterHooks -> public static void restoreMasterHooks( 			final Map<String, MasterTriggerRestoreHook<?>> masterHooks, 			final Collection<MasterState> states, 			final long checkpointId, 			final boolean allowUnmatchedState, 			final Logger log) throws FlinkException;1495200169;Calls the restore method given checkpoint master hooks and passes the given master_state to them where state with a matching name is found.__<p>If state is found and no hook with the same name is found, the method throws an_exception, unless the {@code allowUnmatchedState} flag is set.__@param masterHooks The hooks to call restore on_@param states The state to pass to the hooks_@param checkpointId The checkpoint ID of the restored checkpoint_@param allowUnmatchedState True,_@param log The logger for log messages__@throws FlinkException Thrown, if the hooks throw an exception, or the state+_deserialization fails.;public static void restoreMasterHooks(_			final Map<String, MasterTriggerRestoreHook<?>> masterHooks,_			final Collection<MasterState> states,_			final long checkpointId,_			final boolean allowUnmatchedState,_			final Logger log) throws FlinkException {__		_		if (states == null || states.isEmpty() || masterHooks == null || masterHooks.isEmpty()) {_			log.info("No master state to restore")__			return__		}__		log.info("Calling master restore hooks")___		_		final LinkedHashMap<String, MasterTriggerRestoreHook<?>> allHooks = new LinkedHashMap<>(masterHooks)___		_		final ArrayList<Tuple2<MasterTriggerRestoreHook<?>, Object>> hooksAndStates = new ArrayList<>()___		for (MasterState state : states) {_			if (state != null) {_				final String name = state.name()__				final MasterTriggerRestoreHook<?> hook = allHooks.remove(name)___				if (hook != null) {_					log.debug("Found state to restore for hook '{}'", name)___					Object deserializedState = deserializeState(state, hook)__					hooksAndStates.add(new Tuple2<MasterTriggerRestoreHook<?>, Object>(hook, deserializedState))__				}_				else if (!allowUnmatchedState) {_					throw new IllegalStateException("Found state '" + state.name() +_							"' which is not resumed by any hook.")__				}_				else {_					log.info("Dropping unmatched state from '{}'", name)__				}_			}_		}__		_		for (Tuple2<MasterTriggerRestoreHook<?>, Object> hookAndState : hooksAndStates) {_			restoreHook(hookAndState.f1, hookAndState.f0, checkpointId)__		}__		_		for (MasterTriggerRestoreHook<?> hook : allHooks.values()) {_			restoreHook(null, hook, checkpointId)__		}_	};calls,the,restore,method,given,checkpoint,master,hooks,and,passes,the,given,master,state,to,them,where,state,with,a,matching,name,is,found,p,if,state,is,found,and,no,hook,with,the,same,name,is,found,the,method,throws,an,exception,unless,the,code,allow,unmatched,state,flag,is,set,param,master,hooks,the,hooks,to,call,restore,on,param,states,the,state,to,pass,to,the,hooks,param,checkpoint,id,the,checkpoint,id,of,the,restored,checkpoint,param,allow,unmatched,state,true,param,log,the,logger,for,log,messages,throws,flink,exception,thrown,if,the,hooks,throw,an,exception,or,the,state,deserialization,fails;public,static,void,restore,master,hooks,final,map,string,master,trigger,restore,hook,master,hooks,final,collection,master,state,states,final,long,checkpoint,id,final,boolean,allow,unmatched,state,final,logger,log,throws,flink,exception,if,states,null,states,is,empty,master,hooks,null,master,hooks,is,empty,log,info,no,master,state,to,restore,return,log,info,calling,master,restore,hooks,final,linked,hash,map,string,master,trigger,restore,hook,all,hooks,new,linked,hash,map,master,hooks,final,array,list,tuple2,master,trigger,restore,hook,object,hooks,and,states,new,array,list,for,master,state,state,states,if,state,null,final,string,name,state,name,final,master,trigger,restore,hook,hook,all,hooks,remove,name,if,hook,null,log,debug,found,state,to,restore,for,hook,name,object,deserialized,state,deserialize,state,state,hook,hooks,and,states,add,new,tuple2,master,trigger,restore,hook,object,hook,deserialized,state,else,if,allow,unmatched,state,throw,new,illegal,state,exception,found,state,state,name,which,is,not,resumed,by,any,hook,else,log,info,dropping,unmatched,state,from,name,for,tuple2,master,trigger,restore,hook,object,hook,and,state,hooks,and,states,restore,hook,hook,and,state,f1,hook,and,state,f0,checkpoint,id,for,master,trigger,restore,hook,hook,all,hooks,values,restore,hook,null,hook,checkpoint,id
MasterHooks -> public static void restoreMasterHooks( 			final Map<String, MasterTriggerRestoreHook<?>> masterHooks, 			final Collection<MasterState> states, 			final long checkpointId, 			final boolean allowUnmatchedState, 			final Logger log) throws FlinkException;1501664690;Calls the restore method given checkpoint master hooks and passes the given master_state to them where state with a matching name is found.__<p>If state is found and no hook with the same name is found, the method throws an_exception, unless the {@code allowUnmatchedState} flag is set.__@param masterHooks The hooks to call restore on_@param states The state to pass to the hooks_@param checkpointId The checkpoint ID of the restored checkpoint_@param allowUnmatchedState True,_@param log The logger for log messages__@throws FlinkException Thrown, if the hooks throw an exception, or the state+_deserialization fails.;public static void restoreMasterHooks(_			final Map<String, MasterTriggerRestoreHook<?>> masterHooks,_			final Collection<MasterState> states,_			final long checkpointId,_			final boolean allowUnmatchedState,_			final Logger log) throws FlinkException {__		_		if (states == null || states.isEmpty() || masterHooks == null || masterHooks.isEmpty()) {_			log.info("No master state to restore")__			return__		}__		log.info("Calling master restore hooks")___		_		final LinkedHashMap<String, MasterTriggerRestoreHook<?>> allHooks = new LinkedHashMap<>(masterHooks)___		_		final ArrayList<Tuple2<MasterTriggerRestoreHook<?>, Object>> hooksAndStates = new ArrayList<>()___		for (MasterState state : states) {_			if (state != null) {_				final String name = state.name()__				final MasterTriggerRestoreHook<?> hook = allHooks.remove(name)___				if (hook != null) {_					log.debug("Found state to restore for hook '{}'", name)___					Object deserializedState = deserializeState(state, hook)__					hooksAndStates.add(new Tuple2<MasterTriggerRestoreHook<?>, Object>(hook, deserializedState))__				}_				else if (!allowUnmatchedState) {_					throw new IllegalStateException("Found state '" + state.name() +_							"' which is not resumed by any hook.")__				}_				else {_					log.info("Dropping unmatched state from '{}'", name)__				}_			}_		}__		_		for (Tuple2<MasterTriggerRestoreHook<?>, Object> hookAndState : hooksAndStates) {_			restoreHook(hookAndState.f1, hookAndState.f0, checkpointId)__		}__		_		for (MasterTriggerRestoreHook<?> hook : allHooks.values()) {_			restoreHook(null, hook, checkpointId)__		}_	};calls,the,restore,method,given,checkpoint,master,hooks,and,passes,the,given,master,state,to,them,where,state,with,a,matching,name,is,found,p,if,state,is,found,and,no,hook,with,the,same,name,is,found,the,method,throws,an,exception,unless,the,code,allow,unmatched,state,flag,is,set,param,master,hooks,the,hooks,to,call,restore,on,param,states,the,state,to,pass,to,the,hooks,param,checkpoint,id,the,checkpoint,id,of,the,restored,checkpoint,param,allow,unmatched,state,true,param,log,the,logger,for,log,messages,throws,flink,exception,thrown,if,the,hooks,throw,an,exception,or,the,state,deserialization,fails;public,static,void,restore,master,hooks,final,map,string,master,trigger,restore,hook,master,hooks,final,collection,master,state,states,final,long,checkpoint,id,final,boolean,allow,unmatched,state,final,logger,log,throws,flink,exception,if,states,null,states,is,empty,master,hooks,null,master,hooks,is,empty,log,info,no,master,state,to,restore,return,log,info,calling,master,restore,hooks,final,linked,hash,map,string,master,trigger,restore,hook,all,hooks,new,linked,hash,map,master,hooks,final,array,list,tuple2,master,trigger,restore,hook,object,hooks,and,states,new,array,list,for,master,state,state,states,if,state,null,final,string,name,state,name,final,master,trigger,restore,hook,hook,all,hooks,remove,name,if,hook,null,log,debug,found,state,to,restore,for,hook,name,object,deserialized,state,deserialize,state,state,hook,hooks,and,states,add,new,tuple2,master,trigger,restore,hook,object,hook,deserialized,state,else,if,allow,unmatched,state,throw,new,illegal,state,exception,found,state,state,name,which,is,not,resumed,by,any,hook,else,log,info,dropping,unmatched,state,from,name,for,tuple2,master,trigger,restore,hook,object,hook,and,state,hooks,and,states,restore,hook,hook,and,state,f1,hook,and,state,f0,checkpoint,id,for,master,trigger,restore,hook,hook,all,hooks,values,restore,hook,null,hook,checkpoint,id
MasterHooks -> public static void restoreMasterHooks( 			final Map<String, MasterTriggerRestoreHook<?>> masterHooks, 			final Collection<MasterState> states, 			final long checkpointId, 			final boolean allowUnmatchedState, 			final Logger log) throws FlinkException;1525852381;Calls the restore method given checkpoint master hooks and passes the given master_state to them where state with a matching name is found.__<p>If state is found and no hook with the same name is found, the method throws an_exception, unless the {@code allowUnmatchedState} flag is set.__@param masterHooks The hooks to call restore on_@param states The state to pass to the hooks_@param checkpointId The checkpoint ID of the restored checkpoint_@param allowUnmatchedState True,_@param log The logger for log messages__@throws FlinkException Thrown, if the hooks throw an exception, or the state+_deserialization fails.;public static void restoreMasterHooks(_			final Map<String, MasterTriggerRestoreHook<?>> masterHooks,_			final Collection<MasterState> states,_			final long checkpointId,_			final boolean allowUnmatchedState,_			final Logger log) throws FlinkException {__		_		if (states == null || states.isEmpty() || masterHooks == null || masterHooks.isEmpty()) {_			log.info("No master state to restore")__			return__		}__		log.info("Calling master restore hooks")___		_		final LinkedHashMap<String, MasterTriggerRestoreHook<?>> allHooks = new LinkedHashMap<>(masterHooks)___		_		final ArrayList<Tuple2<MasterTriggerRestoreHook<?>, Object>> hooksAndStates = new ArrayList<>()___		for (MasterState state : states) {_			if (state != null) {_				final String name = state.name()__				final MasterTriggerRestoreHook<?> hook = allHooks.remove(name)___				if (hook != null) {_					log.debug("Found state to restore for hook '{}'", name)___					Object deserializedState = deserializeState(state, hook)__					hooksAndStates.add(new Tuple2<MasterTriggerRestoreHook<?>, Object>(hook, deserializedState))__				}_				else if (!allowUnmatchedState) {_					throw new IllegalStateException("Found state '" + state.name() +_							"' which is not resumed by any hook.")__				}_				else {_					log.info("Dropping unmatched state from '{}'", name)__				}_			}_		}__		_		for (Tuple2<MasterTriggerRestoreHook<?>, Object> hookAndState : hooksAndStates) {_			restoreHook(hookAndState.f1, hookAndState.f0, checkpointId)__		}__		_		for (MasterTriggerRestoreHook<?> hook : allHooks.values()) {_			restoreHook(null, hook, checkpointId)__		}_	};calls,the,restore,method,given,checkpoint,master,hooks,and,passes,the,given,master,state,to,them,where,state,with,a,matching,name,is,found,p,if,state,is,found,and,no,hook,with,the,same,name,is,found,the,method,throws,an,exception,unless,the,code,allow,unmatched,state,flag,is,set,param,master,hooks,the,hooks,to,call,restore,on,param,states,the,state,to,pass,to,the,hooks,param,checkpoint,id,the,checkpoint,id,of,the,restored,checkpoint,param,allow,unmatched,state,true,param,log,the,logger,for,log,messages,throws,flink,exception,thrown,if,the,hooks,throw,an,exception,or,the,state,deserialization,fails;public,static,void,restore,master,hooks,final,map,string,master,trigger,restore,hook,master,hooks,final,collection,master,state,states,final,long,checkpoint,id,final,boolean,allow,unmatched,state,final,logger,log,throws,flink,exception,if,states,null,states,is,empty,master,hooks,null,master,hooks,is,empty,log,info,no,master,state,to,restore,return,log,info,calling,master,restore,hooks,final,linked,hash,map,string,master,trigger,restore,hook,all,hooks,new,linked,hash,map,master,hooks,final,array,list,tuple2,master,trigger,restore,hook,object,hooks,and,states,new,array,list,for,master,state,state,states,if,state,null,final,string,name,state,name,final,master,trigger,restore,hook,hook,all,hooks,remove,name,if,hook,null,log,debug,found,state,to,restore,for,hook,name,object,deserialized,state,deserialize,state,state,hook,hooks,and,states,add,new,tuple2,master,trigger,restore,hook,object,hook,deserialized,state,else,if,allow,unmatched,state,throw,new,illegal,state,exception,found,state,state,name,which,is,not,resumed,by,any,hook,else,log,info,dropping,unmatched,state,from,name,for,tuple2,master,trigger,restore,hook,object,hook,and,state,hooks,and,states,restore,hook,hook,and,state,f1,hook,and,state,f0,checkpoint,id,for,master,trigger,restore,hook,hook,all,hooks,values,restore,hook,null,hook,checkpoint,id
MasterHooks -> public static void restoreMasterHooks( 			final Map<String, MasterTriggerRestoreHook<?>> masterHooks, 			final Collection<MasterState> states, 			final long checkpointId, 			final boolean allowUnmatchedState, 			final Logger log) throws FlinkException;1525852381;Calls the restore method given checkpoint master hooks and passes the given master_state to them where state with a matching name is found.__<p>If state is found and no hook with the same name is found, the method throws an_exception, unless the {@code allowUnmatchedState} flag is set.__@param masterHooks The hooks to call restore on_@param states The state to pass to the hooks_@param checkpointId The checkpoint ID of the restored checkpoint_@param allowUnmatchedState If true, the method fails if not all states are picked up by a hook._@param log The logger for log messages__@throws FlinkException Thrown, if the hooks throw an exception, or the state+_deserialization fails.;public static void restoreMasterHooks(_			final Map<String, MasterTriggerRestoreHook<?>> masterHooks,_			final Collection<MasterState> states,_			final long checkpointId,_			final boolean allowUnmatchedState,_			final Logger log) throws FlinkException {__		_		if (states == null || states.isEmpty() || masterHooks == null || masterHooks.isEmpty()) {_			log.info("No master state to restore")__			return__		}__		log.info("Calling master restore hooks")___		_		final LinkedHashMap<String, MasterTriggerRestoreHook<?>> allHooks = new LinkedHashMap<>(masterHooks)___		_		final ArrayList<Tuple2<MasterTriggerRestoreHook<?>, Object>> hooksAndStates = new ArrayList<>()___		for (MasterState state : states) {_			if (state != null) {_				final String name = state.name()__				final MasterTriggerRestoreHook<?> hook = allHooks.remove(name)___				if (hook != null) {_					log.debug("Found state to restore for hook '{}'", name)___					Object deserializedState = deserializeState(state, hook)__					hooksAndStates.add(new Tuple2<>(hook, deserializedState))__				}_				else if (!allowUnmatchedState) {_					throw new IllegalStateException("Found state '" + state.name() +_							"' which is not resumed by any hook.")__				}_				else {_					log.info("Dropping unmatched state from '{}'", name)__				}_			}_		}__		_		for (Tuple2<MasterTriggerRestoreHook<?>, Object> hookAndState : hooksAndStates) {_			restoreHook(hookAndState.f1, hookAndState.f0, checkpointId)__		}__		_		for (MasterTriggerRestoreHook<?> hook : allHooks.values()) {_			restoreHook(null, hook, checkpointId)__		}_	};calls,the,restore,method,given,checkpoint,master,hooks,and,passes,the,given,master,state,to,them,where,state,with,a,matching,name,is,found,p,if,state,is,found,and,no,hook,with,the,same,name,is,found,the,method,throws,an,exception,unless,the,code,allow,unmatched,state,flag,is,set,param,master,hooks,the,hooks,to,call,restore,on,param,states,the,state,to,pass,to,the,hooks,param,checkpoint,id,the,checkpoint,id,of,the,restored,checkpoint,param,allow,unmatched,state,if,true,the,method,fails,if,not,all,states,are,picked,up,by,a,hook,param,log,the,logger,for,log,messages,throws,flink,exception,thrown,if,the,hooks,throw,an,exception,or,the,state,deserialization,fails;public,static,void,restore,master,hooks,final,map,string,master,trigger,restore,hook,master,hooks,final,collection,master,state,states,final,long,checkpoint,id,final,boolean,allow,unmatched,state,final,logger,log,throws,flink,exception,if,states,null,states,is,empty,master,hooks,null,master,hooks,is,empty,log,info,no,master,state,to,restore,return,log,info,calling,master,restore,hooks,final,linked,hash,map,string,master,trigger,restore,hook,all,hooks,new,linked,hash,map,master,hooks,final,array,list,tuple2,master,trigger,restore,hook,object,hooks,and,states,new,array,list,for,master,state,state,states,if,state,null,final,string,name,state,name,final,master,trigger,restore,hook,hook,all,hooks,remove,name,if,hook,null,log,debug,found,state,to,restore,for,hook,name,object,deserialized,state,deserialize,state,state,hook,hooks,and,states,add,new,tuple2,hook,deserialized,state,else,if,allow,unmatched,state,throw,new,illegal,state,exception,found,state,state,name,which,is,not,resumed,by,any,hook,else,log,info,dropping,unmatched,state,from,name,for,tuple2,master,trigger,restore,hook,object,hook,and,state,hooks,and,states,restore,hook,hook,and,state,f1,hook,and,state,f0,checkpoint,id,for,master,trigger,restore,hook,hook,all,hooks,values,restore,hook,null,hook,checkpoint,id
MasterHooks -> public static <T> MasterTriggerRestoreHook<T> wrapHook(MasterTriggerRestoreHook<T> hook, ClassLoader userClassLoader);1495200169;Wraps a hook such that the user-code classloader is applied when the hook is invoked._@param hook the hook to wrap_@param userClassLoader the classloader to use;public static <T> MasterTriggerRestoreHook<T> wrapHook(MasterTriggerRestoreHook<T> hook, ClassLoader userClassLoader) {_		return new WrappedMasterHook<T>(hook, userClassLoader)__	};wraps,a,hook,such,that,the,user,code,classloader,is,applied,when,the,hook,is,invoked,param,hook,the,hook,to,wrap,param,user,class,loader,the,classloader,to,use;public,static,t,master,trigger,restore,hook,t,wrap,hook,master,trigger,restore,hook,t,hook,class,loader,user,class,loader,return,new,wrapped,master,hook,t,hook,user,class,loader
MasterHooks -> public static <T> MasterTriggerRestoreHook<T> wrapHook(MasterTriggerRestoreHook<T> hook, ClassLoader userClassLoader);1495200169;Wraps a hook such that the user-code classloader is applied when the hook is invoked._@param hook the hook to wrap_@param userClassLoader the classloader to use;public static <T> MasterTriggerRestoreHook<T> wrapHook(MasterTriggerRestoreHook<T> hook, ClassLoader userClassLoader) {_		return new WrappedMasterHook<>(hook, userClassLoader)__	};wraps,a,hook,such,that,the,user,code,classloader,is,applied,when,the,hook,is,invoked,param,hook,the,hook,to,wrap,param,user,class,loader,the,classloader,to,use;public,static,t,master,trigger,restore,hook,t,wrap,hook,master,trigger,restore,hook,t,hook,class,loader,user,class,loader,return,new,wrapped,master,hook,hook,user,class,loader
MasterHooks -> public static <T> MasterTriggerRestoreHook<T> wrapHook(MasterTriggerRestoreHook<T> hook, ClassLoader userClassLoader);1501664690;Wraps a hook such that the user-code classloader is applied when the hook is invoked._@param hook the hook to wrap_@param userClassLoader the classloader to use;public static <T> MasterTriggerRestoreHook<T> wrapHook(MasterTriggerRestoreHook<T> hook, ClassLoader userClassLoader) {_		return new WrappedMasterHook<>(hook, userClassLoader)__	};wraps,a,hook,such,that,the,user,code,classloader,is,applied,when,the,hook,is,invoked,param,hook,the,hook,to,wrap,param,user,class,loader,the,classloader,to,use;public,static,t,master,trigger,restore,hook,t,wrap,hook,master,trigger,restore,hook,t,hook,class,loader,user,class,loader,return,new,wrapped,master,hook,hook,user,class,loader
MasterHooks -> public static <T> MasterTriggerRestoreHook<T> wrapHook(MasterTriggerRestoreHook<T> hook, ClassLoader userClassLoader);1525852381;Wraps a hook such that the user-code classloader is applied when the hook is invoked._@param hook the hook to wrap_@param userClassLoader the classloader to use;public static <T> MasterTriggerRestoreHook<T> wrapHook(MasterTriggerRestoreHook<T> hook, ClassLoader userClassLoader) {_		return new WrappedMasterHook<>(hook, userClassLoader)__	};wraps,a,hook,such,that,the,user,code,classloader,is,applied,when,the,hook,is,invoked,param,hook,the,hook,to,wrap,param,user,class,loader,the,classloader,to,use;public,static,t,master,trigger,restore,hook,t,wrap,hook,master,trigger,restore,hook,t,hook,class,loader,user,class,loader,return,new,wrapped,master,hook,hook,user,class,loader
MasterHooks -> public static List<MasterState> triggerMasterHooks( 			Collection<MasterTriggerRestoreHook<?>> hooks, 			long checkpointId, 			long timestamp, 			Executor executor, 			Time timeout) throws FlinkException;1493236605;Triggers all given master hooks and returns state objects for each hook that_produced a state.__@param hooks The hooks to trigger_@param checkpointId The checkpoint ID of the triggering checkpoint_@param timestamp The (informational) timestamp for the triggering checkpoint_@param executor An executor that can be used for asynchronous I/O calls_@param timeout The maximum time that a hook may take to complete__@return A list containing all states produced by the hooks__@throws FlinkException Thrown, if the hooks throw an exception, or the state+_deserialization fails.;public static List<MasterState> triggerMasterHooks(_			Collection<MasterTriggerRestoreHook<?>> hooks,_			long checkpointId,_			long timestamp,_			Executor executor,_			Time timeout) throws FlinkException {__		final ArrayList<MasterState> states = new ArrayList<>(hooks.size())___		for (MasterTriggerRestoreHook<?> hook : hooks) {_			MasterState state = triggerHook(hook, checkpointId, timestamp, executor, timeout)__			if (state != null) {_				states.add(state)__			}_		}__		states.trimToSize()__		return states__	};triggers,all,given,master,hooks,and,returns,state,objects,for,each,hook,that,produced,a,state,param,hooks,the,hooks,to,trigger,param,checkpoint,id,the,checkpoint,id,of,the,triggering,checkpoint,param,timestamp,the,informational,timestamp,for,the,triggering,checkpoint,param,executor,an,executor,that,can,be,used,for,asynchronous,i,o,calls,param,timeout,the,maximum,time,that,a,hook,may,take,to,complete,return,a,list,containing,all,states,produced,by,the,hooks,throws,flink,exception,thrown,if,the,hooks,throw,an,exception,or,the,state,deserialization,fails;public,static,list,master,state,trigger,master,hooks,collection,master,trigger,restore,hook,hooks,long,checkpoint,id,long,timestamp,executor,executor,time,timeout,throws,flink,exception,final,array,list,master,state,states,new,array,list,hooks,size,for,master,trigger,restore,hook,hook,hooks,master,state,state,trigger,hook,hook,checkpoint,id,timestamp,executor,timeout,if,state,null,states,add,state,states,trim,to,size,return,states
MasterHooks -> public static List<MasterState> triggerMasterHooks( 			Collection<MasterTriggerRestoreHook<?>> hooks, 			long checkpointId, 			long timestamp, 			Executor executor, 			Time timeout) throws FlinkException;1495200169;Triggers all given master hooks and returns state objects for each hook that_produced a state.__@param hooks The hooks to trigger_@param checkpointId The checkpoint ID of the triggering checkpoint_@param timestamp The (informational) timestamp for the triggering checkpoint_@param executor An executor that can be used for asynchronous I/O calls_@param timeout The maximum time that a hook may take to complete__@return A list containing all states produced by the hooks__@throws FlinkException Thrown, if the hooks throw an exception, or the state+_deserialization fails.;public static List<MasterState> triggerMasterHooks(_			Collection<MasterTriggerRestoreHook<?>> hooks,_			long checkpointId,_			long timestamp,_			Executor executor,_			Time timeout) throws FlinkException {__		final ArrayList<MasterState> states = new ArrayList<>(hooks.size())___		for (MasterTriggerRestoreHook<?> hook : hooks) {_			MasterState state = triggerHook(hook, checkpointId, timestamp, executor, timeout)__			if (state != null) {_				states.add(state)__			}_		}__		states.trimToSize()__		return states__	};triggers,all,given,master,hooks,and,returns,state,objects,for,each,hook,that,produced,a,state,param,hooks,the,hooks,to,trigger,param,checkpoint,id,the,checkpoint,id,of,the,triggering,checkpoint,param,timestamp,the,informational,timestamp,for,the,triggering,checkpoint,param,executor,an,executor,that,can,be,used,for,asynchronous,i,o,calls,param,timeout,the,maximum,time,that,a,hook,may,take,to,complete,return,a,list,containing,all,states,produced,by,the,hooks,throws,flink,exception,thrown,if,the,hooks,throw,an,exception,or,the,state,deserialization,fails;public,static,list,master,state,trigger,master,hooks,collection,master,trigger,restore,hook,hooks,long,checkpoint,id,long,timestamp,executor,executor,time,timeout,throws,flink,exception,final,array,list,master,state,states,new,array,list,hooks,size,for,master,trigger,restore,hook,hook,hooks,master,state,state,trigger,hook,hook,checkpoint,id,timestamp,executor,timeout,if,state,null,states,add,state,states,trim,to,size,return,states
MasterHooks -> public static List<MasterState> triggerMasterHooks( 			Collection<MasterTriggerRestoreHook<?>> hooks, 			long checkpointId, 			long timestamp, 			Executor executor, 			Time timeout) throws FlinkException;1495200169;Triggers all given master hooks and returns state objects for each hook that_produced a state.__@param hooks The hooks to trigger_@param checkpointId The checkpoint ID of the triggering checkpoint_@param timestamp The (informational) timestamp for the triggering checkpoint_@param executor An executor that can be used for asynchronous I/O calls_@param timeout The maximum time that a hook may take to complete__@return A list containing all states produced by the hooks__@throws FlinkException Thrown, if the hooks throw an exception, or the state+_deserialization fails.;public static List<MasterState> triggerMasterHooks(_			Collection<MasterTriggerRestoreHook<?>> hooks,_			long checkpointId,_			long timestamp,_			Executor executor,_			Time timeout) throws FlinkException {__		final ArrayList<MasterState> states = new ArrayList<>(hooks.size())___		for (MasterTriggerRestoreHook<?> hook : hooks) {_			MasterState state = triggerHook(hook, checkpointId, timestamp, executor, timeout)__			if (state != null) {_				states.add(state)__			}_		}__		states.trimToSize()__		return states__	};triggers,all,given,master,hooks,and,returns,state,objects,for,each,hook,that,produced,a,state,param,hooks,the,hooks,to,trigger,param,checkpoint,id,the,checkpoint,id,of,the,triggering,checkpoint,param,timestamp,the,informational,timestamp,for,the,triggering,checkpoint,param,executor,an,executor,that,can,be,used,for,asynchronous,i,o,calls,param,timeout,the,maximum,time,that,a,hook,may,take,to,complete,return,a,list,containing,all,states,produced,by,the,hooks,throws,flink,exception,thrown,if,the,hooks,throw,an,exception,or,the,state,deserialization,fails;public,static,list,master,state,trigger,master,hooks,collection,master,trigger,restore,hook,hooks,long,checkpoint,id,long,timestamp,executor,executor,time,timeout,throws,flink,exception,final,array,list,master,state,states,new,array,list,hooks,size,for,master,trigger,restore,hook,hook,hooks,master,state,state,trigger,hook,hook,checkpoint,id,timestamp,executor,timeout,if,state,null,states,add,state,states,trim,to,size,return,states
MasterHooks -> public static List<MasterState> triggerMasterHooks( 			Collection<MasterTriggerRestoreHook<?>> hooks, 			long checkpointId, 			long timestamp, 			Executor executor, 			Time timeout) throws FlinkException;1501664690;Triggers all given master hooks and returns state objects for each hook that_produced a state.__@param hooks The hooks to trigger_@param checkpointId The checkpoint ID of the triggering checkpoint_@param timestamp The (informational) timestamp for the triggering checkpoint_@param executor An executor that can be used for asynchronous I/O calls_@param timeout The maximum time that a hook may take to complete__@return A list containing all states produced by the hooks__@throws FlinkException Thrown, if the hooks throw an exception, or the state+_deserialization fails.;public static List<MasterState> triggerMasterHooks(_			Collection<MasterTriggerRestoreHook<?>> hooks,_			long checkpointId,_			long timestamp,_			Executor executor,_			Time timeout) throws FlinkException {__		final ArrayList<MasterState> states = new ArrayList<>(hooks.size())___		for (MasterTriggerRestoreHook<?> hook : hooks) {_			MasterState state = triggerHook(hook, checkpointId, timestamp, executor, timeout)__			if (state != null) {_				states.add(state)__			}_		}__		states.trimToSize()__		return states__	};triggers,all,given,master,hooks,and,returns,state,objects,for,each,hook,that,produced,a,state,param,hooks,the,hooks,to,trigger,param,checkpoint,id,the,checkpoint,id,of,the,triggering,checkpoint,param,timestamp,the,informational,timestamp,for,the,triggering,checkpoint,param,executor,an,executor,that,can,be,used,for,asynchronous,i,o,calls,param,timeout,the,maximum,time,that,a,hook,may,take,to,complete,return,a,list,containing,all,states,produced,by,the,hooks,throws,flink,exception,thrown,if,the,hooks,throw,an,exception,or,the,state,deserialization,fails;public,static,list,master,state,trigger,master,hooks,collection,master,trigger,restore,hook,hooks,long,checkpoint,id,long,timestamp,executor,executor,time,timeout,throws,flink,exception,final,array,list,master,state,states,new,array,list,hooks,size,for,master,trigger,restore,hook,hook,hooks,master,state,state,trigger,hook,hook,checkpoint,id,timestamp,executor,timeout,if,state,null,states,add,state,states,trim,to,size,return,states
MasterHooks -> public static List<MasterState> triggerMasterHooks( 			Collection<MasterTriggerRestoreHook<?>> hooks, 			long checkpointId, 			long timestamp, 			Executor executor, 			Time timeout) throws FlinkException;1525852381;Triggers all given master hooks and returns state objects for each hook that_produced a state.__@param hooks The hooks to trigger_@param checkpointId The checkpoint ID of the triggering checkpoint_@param timestamp The (informational) timestamp for the triggering checkpoint_@param executor An executor that can be used for asynchronous I/O calls_@param timeout The maximum time that a hook may take to complete__@return A list containing all states produced by the hooks__@throws FlinkException Thrown, if the hooks throw an exception, or the state+_deserialization fails.;public static List<MasterState> triggerMasterHooks(_			Collection<MasterTriggerRestoreHook<?>> hooks,_			long checkpointId,_			long timestamp,_			Executor executor,_			Time timeout) throws FlinkException {__		final ArrayList<MasterState> states = new ArrayList<>(hooks.size())___		for (MasterTriggerRestoreHook<?> hook : hooks) {_			MasterState state = triggerHook(hook, checkpointId, timestamp, executor, timeout)__			if (state != null) {_				states.add(state)__			}_		}__		states.trimToSize()__		return states__	};triggers,all,given,master,hooks,and,returns,state,objects,for,each,hook,that,produced,a,state,param,hooks,the,hooks,to,trigger,param,checkpoint,id,the,checkpoint,id,of,the,triggering,checkpoint,param,timestamp,the,informational,timestamp,for,the,triggering,checkpoint,param,executor,an,executor,that,can,be,used,for,asynchronous,i,o,calls,param,timeout,the,maximum,time,that,a,hook,may,take,to,complete,return,a,list,containing,all,states,produced,by,the,hooks,throws,flink,exception,thrown,if,the,hooks,throw,an,exception,or,the,state,deserialization,fails;public,static,list,master,state,trigger,master,hooks,collection,master,trigger,restore,hook,hooks,long,checkpoint,id,long,timestamp,executor,executor,time,timeout,throws,flink,exception,final,array,list,master,state,states,new,array,list,hooks,size,for,master,trigger,restore,hook,hook,hooks,master,state,state,trigger,hook,hook,checkpoint,id,timestamp,executor,timeout,if,state,null,states,add,state,states,trim,to,size,return,states
MasterHooks -> public static List<MasterState> triggerMasterHooks( 			Collection<MasterTriggerRestoreHook<?>> hooks, 			long checkpointId, 			long timestamp, 			Executor executor, 			Time timeout) throws FlinkException;1525852381;Triggers all given master hooks and returns state objects for each hook that_produced a state.__@param hooks The hooks to trigger_@param checkpointId The checkpoint ID of the triggering checkpoint_@param timestamp The (informational) timestamp for the triggering checkpoint_@param executor An executor that can be used for asynchronous I/O calls_@param timeout The maximum time that a hook may take to complete__@return A list containing all states produced by the hooks__@throws FlinkException Thrown, if the hooks throw an exception, or the state+_deserialization fails.;public static List<MasterState> triggerMasterHooks(_			Collection<MasterTriggerRestoreHook<?>> hooks,_			long checkpointId,_			long timestamp,_			Executor executor,_			Time timeout) throws FlinkException {__		final ArrayList<MasterState> states = new ArrayList<>(hooks.size())___		for (MasterTriggerRestoreHook<?> hook : hooks) {_			MasterState state = triggerHook(hook, checkpointId, timestamp, executor, timeout)__			if (state != null) {_				states.add(state)__			}_		}__		states.trimToSize()__		return states__	};triggers,all,given,master,hooks,and,returns,state,objects,for,each,hook,that,produced,a,state,param,hooks,the,hooks,to,trigger,param,checkpoint,id,the,checkpoint,id,of,the,triggering,checkpoint,param,timestamp,the,informational,timestamp,for,the,triggering,checkpoint,param,executor,an,executor,that,can,be,used,for,asynchronous,i,o,calls,param,timeout,the,maximum,time,that,a,hook,may,take,to,complete,return,a,list,containing,all,states,produced,by,the,hooks,throws,flink,exception,thrown,if,the,hooks,throw,an,exception,or,the,state,deserialization,fails;public,static,list,master,state,trigger,master,hooks,collection,master,trigger,restore,hook,hooks,long,checkpoint,id,long,timestamp,executor,executor,time,timeout,throws,flink,exception,final,array,list,master,state,states,new,array,list,hooks,size,for,master,trigger,restore,hook,hook,hooks,master,state,state,trigger,hook,hook,checkpoint,id,timestamp,executor,timeout,if,state,null,states,add,state,states,trim,to,size,return,states
MasterHooks -> private MasterHooks();1493236605;This class is not meant to be instantiated;private MasterHooks() {};this,class,is,not,meant,to,be,instantiated;private,master,hooks
MasterHooks -> private MasterHooks();1495200169;This class is not meant to be instantiated;private MasterHooks() {};this,class,is,not,meant,to,be,instantiated;private,master,hooks
MasterHooks -> private MasterHooks();1495200169;This class is not meant to be instantiated;private MasterHooks() {};this,class,is,not,meant,to,be,instantiated;private,master,hooks
MasterHooks -> private MasterHooks();1501664690;This class is not meant to be instantiated;private MasterHooks() {};this,class,is,not,meant,to,be,instantiated;private,master,hooks
MasterHooks -> private MasterHooks();1525852381;This class is not meant to be instantiated;private MasterHooks() {};this,class,is,not,meant,to,be,instantiated;private,master,hooks
MasterHooks -> private MasterHooks();1525852381;This class is not meant to be instantiated.;private MasterHooks() {};this,class,is,not,meant,to,be,instantiated;private,master,hooks
