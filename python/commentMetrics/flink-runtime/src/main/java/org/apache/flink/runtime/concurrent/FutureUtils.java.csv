# id;timestamp;commentText;codeText;commentWords;codeWords
FutureUtils -> public static <IN, OUT> CompletableFuture<OUT> handleAsyncIfNotDone( 		CompletableFuture<IN> completableFuture, 		Executor executor, 		BiFunction<? super IN, Throwable, ? extends OUT> handler);1549365080;This function takes a {@link CompletableFuture} and a handler function for the result of this future. If the_input future is already done, this function returns {@link CompletableFuture#handle(BiFunction)}. Otherwise,_the return value is {@link CompletableFuture#handleAsync(BiFunction, Executor)} with the given executor.__@param completableFuture the completable future for which we want to call #handle._@param executor the executor to run the handle function if the future is not yet done._@param handler the handler function to call when the future is completed._@param <IN> type of the handler input argument._@param <OUT> type of the handler return value._@return the new completion stage.;public static <IN, OUT> CompletableFuture<OUT> handleAsyncIfNotDone(_		CompletableFuture<IN> completableFuture,_		Executor executor,_		BiFunction<? super IN, Throwable, ? extends OUT> handler) {_		return completableFuture.isDone() ?_			completableFuture.handle(handler) :_			completableFuture.handleAsync(handler, executor)__	};this,function,takes,a,link,completable,future,and,a,handler,function,for,the,result,of,this,future,if,the,input,future,is,already,done,this,function,returns,link,completable,future,handle,bi,function,otherwise,the,return,value,is,link,completable,future,handle,async,bi,function,executor,with,the,given,executor,param,completable,future,the,completable,future,for,which,we,want,to,call,handle,param,executor,the,executor,to,run,the,handle,function,if,the,future,is,not,yet,done,param,handler,the,handler,function,to,call,when,the,future,is,completed,param,in,type,of,the,handler,input,argument,param,out,type,of,the,handler,return,value,return,the,new,completion,stage;public,static,in,out,completable,future,out,handle,async,if,not,done,completable,future,in,completable,future,executor,executor,bi,function,super,in,throwable,extends,out,handler,return,completable,future,is,done,completable,future,handle,handler,completable,future,handle,async,handler,executor
FutureUtils -> public static <IN, OUT> CompletableFuture<OUT> handleAsyncIfNotDone( 		CompletableFuture<IN> completableFuture, 		Executor executor, 		BiFunction<? super IN, Throwable, ? extends OUT> handler);1550220073;This function takes a {@link CompletableFuture} and a handler function for the result of this future. If the_input future is already done, this function returns {@link CompletableFuture#handle(BiFunction)}. Otherwise,_the return value is {@link CompletableFuture#handleAsync(BiFunction, Executor)} with the given executor.__@param completableFuture the completable future for which we want to call #handle._@param executor the executor to run the handle function if the future is not yet done._@param handler the handler function to call when the future is completed._@param <IN> type of the handler input argument._@param <OUT> type of the handler return value._@return the new completion stage.;public static <IN, OUT> CompletableFuture<OUT> handleAsyncIfNotDone(_		CompletableFuture<IN> completableFuture,_		Executor executor,_		BiFunction<? super IN, Throwable, ? extends OUT> handler) {_		return completableFuture.isDone() ?_			completableFuture.handle(handler) :_			completableFuture.handleAsync(handler, executor)__	};this,function,takes,a,link,completable,future,and,a,handler,function,for,the,result,of,this,future,if,the,input,future,is,already,done,this,function,returns,link,completable,future,handle,bi,function,otherwise,the,return,value,is,link,completable,future,handle,async,bi,function,executor,with,the,given,executor,param,completable,future,the,completable,future,for,which,we,want,to,call,handle,param,executor,the,executor,to,run,the,handle,function,if,the,future,is,not,yet,done,param,handler,the,handler,function,to,call,when,the,future,is,completed,param,in,type,of,the,handler,input,argument,param,out,type,of,the,handler,return,value,return,the,new,completion,stage;public,static,in,out,completable,future,out,handle,async,if,not,done,completable,future,in,completable,future,executor,executor,bi,function,super,in,throwable,extends,out,handler,return,completable,future,is,done,completable,future,handle,handler,completable,future,handle,async,handler,executor
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1501761022;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1502355550;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1502452094;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1504685932;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1507728812;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1509404932;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1509404933;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1516971024;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1516971025;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1518862304;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1519052657;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1519052657;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1519481114;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1520781441;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1521741862;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1521804759;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1522339661;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1532383539;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1532383539;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1537783992;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1538395078;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1539176686;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1542282018;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1547722029;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1549365080;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures);1550220073;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1504685932;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1507728812;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1509404932;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1509404933;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1516971024;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1516971025;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1518862304;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1519052657;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1519052657;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1519481114;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1520781441;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1521741862;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1521804759;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1522339661;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1532383539;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1532383539;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1537783992;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1538395078;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1539176686;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1542282018;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1547722029;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1549365080;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> private static <T> void retryOperation( 			final CompletableFuture<T> resultFuture, 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1550220073;Helper method which retries the provided operation in case of a failure.__@param resultFuture to complete_@param operation to retry_@param retries until giving up_@param executor to run the futures_@param <T> type of the future's result;private static <T> void retryOperation(_			final CompletableFuture<T> resultFuture,_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		if (!resultFuture.isDone()) {_			final CompletableFuture<T> operationFuture = operation.get()___			operationFuture.whenCompleteAsync(_				(t, throwable) -> {_					if (throwable != null) {_						if (throwable instanceof CancellationException) {_							resultFuture.completeExceptionally(new RetryException("Operation future was cancelled.", throwable))__						} else {_							if (retries > 0) {_								retryOperation(_									resultFuture,_									operation,_									retries - 1,_									executor)__							} else {_								resultFuture.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_									"has been exhausted.", throwable))__							}_						}_					} else {_						resultFuture.complete(t)__					}_				},_				executor)___			resultFuture.whenComplete(_				(t, throwable) -> operationFuture.cancel(false))__		}_	};helper,method,which,retries,the,provided,operation,in,case,of,a,failure,param,result,future,to,complete,param,operation,to,retry,param,retries,until,giving,up,param,executor,to,run,the,futures,param,t,type,of,the,future,s,result;private,static,t,void,retry,operation,final,completable,future,t,result,future,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,if,result,future,is,done,final,completable,future,t,operation,future,operation,get,operation,future,when,complete,async,t,throwable,if,throwable,null,if,throwable,instanceof,cancellation,exception,result,future,complete,exceptionally,new,retry,exception,operation,future,was,cancelled,throwable,else,if,retries,0,retry,operation,result,future,operation,retries,1,executor,else,result,future,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,result,future,complete,t,executor,result,future,when,complete,t,throwable,operation,future,cancel,false
FutureUtils -> public static <IN, OUT> CompletableFuture<OUT> thenComposeAsyncIfNotDone( 		CompletableFuture<IN> completableFuture, 		Executor executor, 		Function<? super IN, ? extends CompletionStage<OUT>> composeFun);1549365080;This function takes a {@link CompletableFuture} and a function to compose with this future. If the input future_is already done, this function returns {@link CompletableFuture#thenCompose(Function)}. Otherwise, the return_value is {@link CompletableFuture#thenComposeAsync(Function, Executor)} with the given executor.__@param completableFuture the completable future for which we want to compose._@param executor the executor to run the compose function if the future is not yet done._@param composeFun the function to compose._@param <IN> type of the input future._@param <OUT> type of the output future._@return a completable future that is a composition of the input future and the function.;public static <IN, OUT> CompletableFuture<OUT> thenComposeAsyncIfNotDone(_		CompletableFuture<IN> completableFuture,_		Executor executor,_		Function<? super IN, ? extends CompletionStage<OUT>> composeFun) {_		return completableFuture.isDone() ?_			completableFuture.thenCompose(composeFun) :_			completableFuture.thenComposeAsync(composeFun, executor)__	};this,function,takes,a,link,completable,future,and,a,function,to,compose,with,this,future,if,the,input,future,is,already,done,this,function,returns,link,completable,future,then,compose,function,otherwise,the,return,value,is,link,completable,future,then,compose,async,function,executor,with,the,given,executor,param,completable,future,the,completable,future,for,which,we,want,to,compose,param,executor,the,executor,to,run,the,compose,function,if,the,future,is,not,yet,done,param,compose,fun,the,function,to,compose,param,in,type,of,the,input,future,param,out,type,of,the,output,future,return,a,completable,future,that,is,a,composition,of,the,input,future,and,the,function;public,static,in,out,completable,future,out,then,compose,async,if,not,done,completable,future,in,completable,future,executor,executor,function,super,in,extends,completion,stage,out,compose,fun,return,completable,future,is,done,completable,future,then,compose,compose,fun,completable,future,then,compose,async,compose,fun,executor
FutureUtils -> public static <IN, OUT> CompletableFuture<OUT> thenComposeAsyncIfNotDone( 		CompletableFuture<IN> completableFuture, 		Executor executor, 		Function<? super IN, ? extends CompletionStage<OUT>> composeFun);1550220073;This function takes a {@link CompletableFuture} and a function to compose with this future. If the input future_is already done, this function returns {@link CompletableFuture#thenCompose(Function)}. Otherwise, the return_value is {@link CompletableFuture#thenComposeAsync(Function, Executor)} with the given executor.__@param completableFuture the completable future for which we want to compose._@param executor the executor to run the compose function if the future is not yet done._@param composeFun the function to compose._@param <IN> type of the input future._@param <OUT> type of the output future._@return a completable future that is a composition of the input future and the function.;public static <IN, OUT> CompletableFuture<OUT> thenComposeAsyncIfNotDone(_		CompletableFuture<IN> completableFuture,_		Executor executor,_		Function<? super IN, ? extends CompletionStage<OUT>> composeFun) {_		return completableFuture.isDone() ?_			completableFuture.thenCompose(composeFun) :_			completableFuture.thenComposeAsync(composeFun, executor)__	};this,function,takes,a,link,completable,future,and,a,function,to,compose,with,this,future,if,the,input,future,is,already,done,this,function,returns,link,completable,future,then,compose,function,otherwise,the,return,value,is,link,completable,future,then,compose,async,function,executor,with,the,given,executor,param,completable,future,the,completable,future,for,which,we,want,to,compose,param,executor,the,executor,to,run,the,compose,function,if,the,future,is,not,yet,done,param,compose,fun,the,function,to,compose,param,in,type,of,the,input,future,param,out,type,of,the,output,future,return,a,completable,future,that,is,a,composition,of,the,input,future,and,the,function;public,static,in,out,completable,future,out,then,compose,async,if,not,done,completable,future,in,completable,future,executor,executor,function,super,in,extends,completion,stage,out,compose,fun,return,completable,future,is,done,completable,future,then,compose,compose,fun,completable,future,then,compose,async,compose,fun,executor
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1501622876;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1501660289;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1501665499;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1501761022;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1502355550;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1502452094;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1504685932;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1507728812;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1509404932;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1509404933;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1516971024;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1516971025;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1518862304;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1519052657;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> final void handleCompletedFuture(T value, Throwable throwable);1519052657;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;final void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;final,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> public static <T> CompletableFuture<T> retry( 		final Callable<CompletableFuture<T>> operation, 		final int retries, 		final Executor executor);1501761022;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_		final Callable<CompletableFuture<T>> operation,_		final int retries,_		final Executor executor) {__		CompletableFuture<T> operationResultFuture___		try {_			operationResultFuture = operation.call()__		} catch (Exception e) {_			return FutureUtils.completedExceptionally(new RetryException("Could not execute the provided operation.", e))__		}__		return operationResultFuture.handleAsync(_			(t, throwable) -> {_				if (throwable != null) {_					if (retries > 0) {_						return retry(operation, retries - 1, executor)__					} else {_						return FutureUtils.<T>completedExceptionally(new RetryException("Could not complete the operation. Number of retries " +_							"has been exhausted.", throwable))__					}_				} else {_					return CompletableFuture.completedFuture(t)__				}_			},_			executor)_		.thenCompose(value -> value)__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,callable,completable,future,t,operation,final,int,retries,final,executor,executor,completable,future,t,operation,result,future,try,operation,result,future,operation,call,catch,exception,e,return,future,utils,completed,exceptionally,new,retry,exception,could,not,execute,the,provided,operation,e,return,operation,result,future,handle,async,t,throwable,if,throwable,null,if,retries,0,return,retry,operation,retries,1,executor,else,return,future,utils,t,completed,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,return,completable,future,completed,future,t,executor,then,compose,value,value
FutureUtils -> public static <T> CompletableFuture<T> retry( 		final Callable<CompletableFuture<T>> operation, 		final int retries, 		final Executor executor);1502355550;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_		final Callable<CompletableFuture<T>> operation,_		final int retries,_		final Executor executor) {__		CompletableFuture<T> operationResultFuture___		try {_			operationResultFuture = operation.call()__		} catch (Exception e) {_			return FutureUtils.completedExceptionally(new RetryException("Could not execute the provided operation.", e))__		}__		return operationResultFuture.handleAsync(_			(t, throwable) -> {_				if (throwable != null) {_					if (retries > 0) {_						return retry(operation, retries - 1, executor)__					} else {_						return FutureUtils.<T>completedExceptionally(new RetryException("Could not complete the operation. Number of retries " +_							"has been exhausted.", throwable))__					}_				} else {_					return CompletableFuture.completedFuture(t)__				}_			},_			executor)_		.thenCompose(value -> value)__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,callable,completable,future,t,operation,final,int,retries,final,executor,executor,completable,future,t,operation,result,future,try,operation,result,future,operation,call,catch,exception,e,return,future,utils,completed,exceptionally,new,retry,exception,could,not,execute,the,provided,operation,e,return,operation,result,future,handle,async,t,throwable,if,throwable,null,if,retries,0,return,retry,operation,retries,1,executor,else,return,future,utils,t,completed,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,return,completable,future,completed,future,t,executor,then,compose,value,value
FutureUtils -> public static <T> CompletableFuture<T> retry( 		final Callable<CompletableFuture<T>> operation, 		final int retries, 		final Executor executor);1502452094;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_		final Callable<CompletableFuture<T>> operation,_		final int retries,_		final Executor executor) {__		CompletableFuture<T> operationResultFuture___		try {_			operationResultFuture = operation.call()__		} catch (Exception e) {_			return FutureUtils.completedExceptionally(new RetryException("Could not execute the provided operation.", e))__		}__		return operationResultFuture.handleAsync(_			(t, throwable) -> {_				if (throwable != null) {_					if (retries > 0) {_						return retry(operation, retries - 1, executor)__					} else {_						return FutureUtils.<T>completedExceptionally(new RetryException("Could not complete the operation. Number of retries " +_							"has been exhausted.", throwable))__					}_				} else {_					return CompletableFuture.completedFuture(t)__				}_			},_			executor)_		.thenCompose(value -> value)__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,callable,completable,future,t,operation,final,int,retries,final,executor,executor,completable,future,t,operation,result,future,try,operation,result,future,operation,call,catch,exception,e,return,future,utils,completed,exceptionally,new,retry,exception,could,not,execute,the,provided,operation,e,return,operation,result,future,handle,async,t,throwable,if,throwable,null,if,retries,0,return,retry,operation,retries,1,executor,else,return,future,utils,t,completed,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,return,completable,future,completed,future,t,executor,then,compose,value,value
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends Future<? extends T>> futures);1495001903;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends Future<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.<T>emptyList())__		}_		else {_			for (Future<? extends T> future : futures) {_				future.handle(conjunct.completionHandler)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,t,empty,list,else,for,future,extends,t,future,futures,future,handle,conjunct,completion,handler,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends Future<? extends T>> futures);1501587025;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends Future<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.<T>emptyList())__		}_		else {_			for (Future<? extends T> future : futures) {_				future.handle(conjunct.completionHandler)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,t,empty,list,else,for,future,extends,t,future,futures,future,handle,conjunct,completion,handler,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends Future<? extends T>> futures);1501620731;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends Future<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.<T>emptyList())__		}_		else {_			for (Future<? extends T> future : futures) {_				future.handle(conjunct.completionHandler)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,t,empty,list,else,for,future,extends,t,future,futures,future,handle,conjunct,completion,handler,return,conjunct
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1501622876;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1501660289;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1501665499;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1501761022;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1502355550;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1502452094;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1504685932;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1507728812;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1509404932;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1509404933;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1516971024;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1516971025;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1518862304;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1519052657;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1519052657;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1519481114;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1520781441;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1521741862;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1521804759;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1522339661;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1532383539;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1532383539;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1537783992;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1538395078;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1539176686;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1542282018;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1547722029;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1549365080;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesCompleted()_;1550220073;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;public abstract int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;public,abstract,int,get,num,futures,completed
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1519481114;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1520781441;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1521741862;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1521804759;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1522339661;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1532383539;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1532383539;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1537783992;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1538395078;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1539176686;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1542282018;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1547722029;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1549365080;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> ResultConjunctFuture -> private void handleCompletedFuture(T value, Throwable throwable);1550220073;The function that is attached to all futures in the conjunction. Once a future_is complete, this function tracks the completion or fails the conjunct.;private void handleCompletedFuture(T value, Throwable throwable) {_			if (throwable != null) {_				completeExceptionally(throwable)__			} else {_				int index = nextIndex.getAndIncrement()___				results[index] = value___				if (numCompleted.incrementAndGet() == numTotal) {_					complete(Arrays.asList(results))__				}_			}_		};the,function,that,is,attached,to,all,futures,in,the,conjunction,once,a,future,is,complete,this,function,tracks,the,completion,or,fails,the,conjunct;private,void,handle,completed,future,t,value,throwable,throwable,if,throwable,null,complete,exceptionally,throwable,else,int,index,next,index,get,and,increment,results,index,value,if,num,completed,increment,and,get,num,total,complete,arrays,as,list,results
FutureUtils -> public static <T> CompletableFuture<T> retrySuccesfulWithDelay( 		final Supplier<CompletableFuture<T>> operation, 		final Time retryDelay, 		final Deadline deadline, 		final Predicate<T> acceptancePredicate, 		final ScheduledExecutor scheduledExecutor);1520781441;Retry the given operation with the given delay in between successful completions where the_result does not match a given predicate.__@param operation to retry_@param retryDelay delay between retries_@param deadline A deadline that specifies at what point we should stop retrying_@param acceptancePredicate Predicate to test whether the result is acceptable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry_in case the predicate isn't matched;public static <T> CompletableFuture<T> retrySuccesfulWithDelay(_		final Supplier<CompletableFuture<T>> operation,_		final Time retryDelay,_		final Deadline deadline,_		final Predicate<T> acceptancePredicate,_		final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retrySuccessfulOperationWithDelay(_			resultFuture,_			operation,_			retryDelay,_			deadline,_			acceptancePredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,successful,completions,where,the,result,does,not,match,a,given,predicate,param,operation,to,retry,param,retry,delay,delay,between,retries,param,deadline,a,deadline,that,specifies,at,what,point,we,should,stop,retrying,param,acceptance,predicate,predicate,to,test,whether,the,result,is,acceptable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,the,predicate,isn,t,matched;public,static,t,completable,future,t,retry,succesful,with,delay,final,supplier,completable,future,t,operation,final,time,retry,delay,final,deadline,deadline,final,predicate,t,acceptance,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,successful,operation,with,delay,result,future,operation,retry,delay,deadline,acceptance,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retrySuccesfulWithDelay( 		final Supplier<CompletableFuture<T>> operation, 		final Time retryDelay, 		final Deadline deadline, 		final Predicate<T> acceptancePredicate, 		final ScheduledExecutor scheduledExecutor);1521741862;Retry the given operation with the given delay in between successful completions where the_result does not match a given predicate.__@param operation to retry_@param retryDelay delay between retries_@param deadline A deadline that specifies at what point we should stop retrying_@param acceptancePredicate Predicate to test whether the result is acceptable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry_in case the predicate isn't matched;public static <T> CompletableFuture<T> retrySuccesfulWithDelay(_		final Supplier<CompletableFuture<T>> operation,_		final Time retryDelay,_		final Deadline deadline,_		final Predicate<T> acceptancePredicate,_		final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retrySuccessfulOperationWithDelay(_			resultFuture,_			operation,_			retryDelay,_			deadline,_			acceptancePredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,successful,completions,where,the,result,does,not,match,a,given,predicate,param,operation,to,retry,param,retry,delay,delay,between,retries,param,deadline,a,deadline,that,specifies,at,what,point,we,should,stop,retrying,param,acceptance,predicate,predicate,to,test,whether,the,result,is,acceptable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,the,predicate,isn,t,matched;public,static,t,completable,future,t,retry,succesful,with,delay,final,supplier,completable,future,t,operation,final,time,retry,delay,final,deadline,deadline,final,predicate,t,acceptance,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,successful,operation,with,delay,result,future,operation,retry,delay,deadline,acceptance,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retrySuccesfulWithDelay( 		final Supplier<CompletableFuture<T>> operation, 		final Time retryDelay, 		final Deadline deadline, 		final Predicate<T> acceptancePredicate, 		final ScheduledExecutor scheduledExecutor);1521804759;Retry the given operation with the given delay in between successful completions where the_result does not match a given predicate.__@param operation to retry_@param retryDelay delay between retries_@param deadline A deadline that specifies at what point we should stop retrying_@param acceptancePredicate Predicate to test whether the result is acceptable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry_in case the predicate isn't matched;public static <T> CompletableFuture<T> retrySuccesfulWithDelay(_		final Supplier<CompletableFuture<T>> operation,_		final Time retryDelay,_		final Deadline deadline,_		final Predicate<T> acceptancePredicate,_		final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retrySuccessfulOperationWithDelay(_			resultFuture,_			operation,_			retryDelay,_			deadline,_			acceptancePredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,successful,completions,where,the,result,does,not,match,a,given,predicate,param,operation,to,retry,param,retry,delay,delay,between,retries,param,deadline,a,deadline,that,specifies,at,what,point,we,should,stop,retrying,param,acceptance,predicate,predicate,to,test,whether,the,result,is,acceptable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,the,predicate,isn,t,matched;public,static,t,completable,future,t,retry,succesful,with,delay,final,supplier,completable,future,t,operation,final,time,retry,delay,final,deadline,deadline,final,predicate,t,acceptance,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,successful,operation,with,delay,result,future,operation,retry,delay,deadline,acceptance,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retrySuccesfulWithDelay( 		final Supplier<CompletableFuture<T>> operation, 		final Time retryDelay, 		final Deadline deadline, 		final Predicate<T> acceptancePredicate, 		final ScheduledExecutor scheduledExecutor);1522339661;Retry the given operation with the given delay in between successful completions where the_result does not match a given predicate.__@param operation to retry_@param retryDelay delay between retries_@param deadline A deadline that specifies at what point we should stop retrying_@param acceptancePredicate Predicate to test whether the result is acceptable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry_in case the predicate isn't matched;public static <T> CompletableFuture<T> retrySuccesfulWithDelay(_		final Supplier<CompletableFuture<T>> operation,_		final Time retryDelay,_		final Deadline deadline,_		final Predicate<T> acceptancePredicate,_		final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retrySuccessfulOperationWithDelay(_			resultFuture,_			operation,_			retryDelay,_			deadline,_			acceptancePredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,successful,completions,where,the,result,does,not,match,a,given,predicate,param,operation,to,retry,param,retry,delay,delay,between,retries,param,deadline,a,deadline,that,specifies,at,what,point,we,should,stop,retrying,param,acceptance,predicate,predicate,to,test,whether,the,result,is,acceptable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,the,predicate,isn,t,matched;public,static,t,completable,future,t,retry,succesful,with,delay,final,supplier,completable,future,t,operation,final,time,retry,delay,final,deadline,deadline,final,predicate,t,acceptance,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,successful,operation,with,delay,result,future,operation,retry,delay,deadline,acceptance,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retrySuccesfulWithDelay( 		final Supplier<CompletableFuture<T>> operation, 		final Time retryDelay, 		final Deadline deadline, 		final Predicate<T> acceptancePredicate, 		final ScheduledExecutor scheduledExecutor);1532383539;Retry the given operation with the given delay in between successful completions where the_result does not match a given predicate.__@param operation to retry_@param retryDelay delay between retries_@param deadline A deadline that specifies at what point we should stop retrying_@param acceptancePredicate Predicate to test whether the result is acceptable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry_in case the predicate isn't matched;public static <T> CompletableFuture<T> retrySuccesfulWithDelay(_		final Supplier<CompletableFuture<T>> operation,_		final Time retryDelay,_		final Deadline deadline,_		final Predicate<T> acceptancePredicate,_		final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retrySuccessfulOperationWithDelay(_			resultFuture,_			operation,_			retryDelay,_			deadline,_			acceptancePredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,successful,completions,where,the,result,does,not,match,a,given,predicate,param,operation,to,retry,param,retry,delay,delay,between,retries,param,deadline,a,deadline,that,specifies,at,what,point,we,should,stop,retrying,param,acceptance,predicate,predicate,to,test,whether,the,result,is,acceptable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,the,predicate,isn,t,matched;public,static,t,completable,future,t,retry,succesful,with,delay,final,supplier,completable,future,t,operation,final,time,retry,delay,final,deadline,deadline,final,predicate,t,acceptance,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,successful,operation,with,delay,result,future,operation,retry,delay,deadline,acceptance,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retrySuccesfulWithDelay( 		final Supplier<CompletableFuture<T>> operation, 		final Time retryDelay, 		final Deadline deadline, 		final Predicate<T> acceptancePredicate, 		final ScheduledExecutor scheduledExecutor);1532383539;Retry the given operation with the given delay in between successful completions where the_result does not match a given predicate.__@param operation to retry_@param retryDelay delay between retries_@param deadline A deadline that specifies at what point we should stop retrying_@param acceptancePredicate Predicate to test whether the result is acceptable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry_in case the predicate isn't matched;public static <T> CompletableFuture<T> retrySuccesfulWithDelay(_		final Supplier<CompletableFuture<T>> operation,_		final Time retryDelay,_		final Deadline deadline,_		final Predicate<T> acceptancePredicate,_		final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retrySuccessfulOperationWithDelay(_			resultFuture,_			operation,_			retryDelay,_			deadline,_			acceptancePredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,successful,completions,where,the,result,does,not,match,a,given,predicate,param,operation,to,retry,param,retry,delay,delay,between,retries,param,deadline,a,deadline,that,specifies,at,what,point,we,should,stop,retrying,param,acceptance,predicate,predicate,to,test,whether,the,result,is,acceptable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,the,predicate,isn,t,matched;public,static,t,completable,future,t,retry,succesful,with,delay,final,supplier,completable,future,t,operation,final,time,retry,delay,final,deadline,deadline,final,predicate,t,acceptance,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,successful,operation,with,delay,result,future,operation,retry,delay,deadline,acceptance,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retrySuccesfulWithDelay( 		final Supplier<CompletableFuture<T>> operation, 		final Time retryDelay, 		final Deadline deadline, 		final Predicate<T> acceptancePredicate, 		final ScheduledExecutor scheduledExecutor);1537783992;Retry the given operation with the given delay in between successful completions where the_result does not match a given predicate.__@param operation to retry_@param retryDelay delay between retries_@param deadline A deadline that specifies at what point we should stop retrying_@param acceptancePredicate Predicate to test whether the result is acceptable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry_in case the predicate isn't matched;public static <T> CompletableFuture<T> retrySuccesfulWithDelay(_		final Supplier<CompletableFuture<T>> operation,_		final Time retryDelay,_		final Deadline deadline,_		final Predicate<T> acceptancePredicate,_		final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retrySuccessfulOperationWithDelay(_			resultFuture,_			operation,_			retryDelay,_			deadline,_			acceptancePredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,successful,completions,where,the,result,does,not,match,a,given,predicate,param,operation,to,retry,param,retry,delay,delay,between,retries,param,deadline,a,deadline,that,specifies,at,what,point,we,should,stop,retrying,param,acceptance,predicate,predicate,to,test,whether,the,result,is,acceptable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,the,predicate,isn,t,matched;public,static,t,completable,future,t,retry,succesful,with,delay,final,supplier,completable,future,t,operation,final,time,retry,delay,final,deadline,deadline,final,predicate,t,acceptance,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,successful,operation,with,delay,result,future,operation,retry,delay,deadline,acceptance,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retrySuccesfulWithDelay( 		final Supplier<CompletableFuture<T>> operation, 		final Time retryDelay, 		final Deadline deadline, 		final Predicate<T> acceptancePredicate, 		final ScheduledExecutor scheduledExecutor);1538395078;Retry the given operation with the given delay in between successful completions where the_result does not match a given predicate.__@param operation to retry_@param retryDelay delay between retries_@param deadline A deadline that specifies at what point we should stop retrying_@param acceptancePredicate Predicate to test whether the result is acceptable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry_in case the predicate isn't matched;public static <T> CompletableFuture<T> retrySuccesfulWithDelay(_		final Supplier<CompletableFuture<T>> operation,_		final Time retryDelay,_		final Deadline deadline,_		final Predicate<T> acceptancePredicate,_		final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retrySuccessfulOperationWithDelay(_			resultFuture,_			operation,_			retryDelay,_			deadline,_			acceptancePredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,successful,completions,where,the,result,does,not,match,a,given,predicate,param,operation,to,retry,param,retry,delay,delay,between,retries,param,deadline,a,deadline,that,specifies,at,what,point,we,should,stop,retrying,param,acceptance,predicate,predicate,to,test,whether,the,result,is,acceptable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,the,predicate,isn,t,matched;public,static,t,completable,future,t,retry,succesful,with,delay,final,supplier,completable,future,t,operation,final,time,retry,delay,final,deadline,deadline,final,predicate,t,acceptance,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,successful,operation,with,delay,result,future,operation,retry,delay,deadline,acceptance,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retrySuccesfulWithDelay( 		final Supplier<CompletableFuture<T>> operation, 		final Time retryDelay, 		final Deadline deadline, 		final Predicate<T> acceptancePredicate, 		final ScheduledExecutor scheduledExecutor);1539176686;Retry the given operation with the given delay in between successful completions where the_result does not match a given predicate.__@param operation to retry_@param retryDelay delay between retries_@param deadline A deadline that specifies at what point we should stop retrying_@param acceptancePredicate Predicate to test whether the result is acceptable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry_in case the predicate isn't matched;public static <T> CompletableFuture<T> retrySuccesfulWithDelay(_		final Supplier<CompletableFuture<T>> operation,_		final Time retryDelay,_		final Deadline deadline,_		final Predicate<T> acceptancePredicate,_		final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retrySuccessfulOperationWithDelay(_			resultFuture,_			operation,_			retryDelay,_			deadline,_			acceptancePredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,successful,completions,where,the,result,does,not,match,a,given,predicate,param,operation,to,retry,param,retry,delay,delay,between,retries,param,deadline,a,deadline,that,specifies,at,what,point,we,should,stop,retrying,param,acceptance,predicate,predicate,to,test,whether,the,result,is,acceptable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,the,predicate,isn,t,matched;public,static,t,completable,future,t,retry,succesful,with,delay,final,supplier,completable,future,t,operation,final,time,retry,delay,final,deadline,deadline,final,predicate,t,acceptance,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,successful,operation,with,delay,result,future,operation,retry,delay,deadline,acceptance,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor);1522339661;Returns a future which is completed with the result of the {@link SupplierWithException}.__@param supplier to provide the future's value_@param executor to execute the supplier_@param <T> type of the result_@return Future which is completed with the value of the supplier;public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor) {_		return CompletableFuture.supplyAsync(_			() -> {_				try {_					return supplier.get()__				} catch (Throwable e) {_					throw new CompletionException(e)__				}_			},_			executor)__	};returns,a,future,which,is,completed,with,the,result,of,the,link,supplier,with,exception,param,supplier,to,provide,the,future,s,value,param,executor,to,execute,the,supplier,param,t,type,of,the,result,return,future,which,is,completed,with,the,value,of,the,supplier;public,static,t,completable,future,t,supply,async,supplier,with,exception,t,supplier,executor,executor,return,completable,future,supply,async,try,return,supplier,get,catch,throwable,e,throw,new,completion,exception,e,executor
FutureUtils -> public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor);1532383539;Returns a future which is completed with the result of the {@link SupplierWithException}.__@param supplier to provide the future's value_@param executor to execute the supplier_@param <T> type of the result_@return Future which is completed with the value of the supplier;public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor) {_		return CompletableFuture.supplyAsync(_			() -> {_				try {_					return supplier.get()__				} catch (Throwable e) {_					throw new CompletionException(e)__				}_			},_			executor)__	};returns,a,future,which,is,completed,with,the,result,of,the,link,supplier,with,exception,param,supplier,to,provide,the,future,s,value,param,executor,to,execute,the,supplier,param,t,type,of,the,result,return,future,which,is,completed,with,the,value,of,the,supplier;public,static,t,completable,future,t,supply,async,supplier,with,exception,t,supplier,executor,executor,return,completable,future,supply,async,try,return,supplier,get,catch,throwable,e,throw,new,completion,exception,e,executor
FutureUtils -> public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor);1532383539;Returns a future which is completed with the result of the {@link SupplierWithException}.__@param supplier to provide the future's value_@param executor to execute the supplier_@param <T> type of the result_@return Future which is completed with the value of the supplier;public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor) {_		return CompletableFuture.supplyAsync(_			() -> {_				try {_					return supplier.get()__				} catch (Throwable e) {_					throw new CompletionException(e)__				}_			},_			executor)__	};returns,a,future,which,is,completed,with,the,result,of,the,link,supplier,with,exception,param,supplier,to,provide,the,future,s,value,param,executor,to,execute,the,supplier,param,t,type,of,the,result,return,future,which,is,completed,with,the,value,of,the,supplier;public,static,t,completable,future,t,supply,async,supplier,with,exception,t,supplier,executor,executor,return,completable,future,supply,async,try,return,supplier,get,catch,throwable,e,throw,new,completion,exception,e,executor
FutureUtils -> public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor);1537783992;Returns a future which is completed with the result of the {@link SupplierWithException}.__@param supplier to provide the future's value_@param executor to execute the supplier_@param <T> type of the result_@return Future which is completed with the value of the supplier;public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor) {_		return CompletableFuture.supplyAsync(_			() -> {_				try {_					return supplier.get()__				} catch (Throwable e) {_					throw new CompletionException(e)__				}_			},_			executor)__	};returns,a,future,which,is,completed,with,the,result,of,the,link,supplier,with,exception,param,supplier,to,provide,the,future,s,value,param,executor,to,execute,the,supplier,param,t,type,of,the,result,return,future,which,is,completed,with,the,value,of,the,supplier;public,static,t,completable,future,t,supply,async,supplier,with,exception,t,supplier,executor,executor,return,completable,future,supply,async,try,return,supplier,get,catch,throwable,e,throw,new,completion,exception,e,executor
FutureUtils -> public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor);1538395078;Returns a future which is completed with the result of the {@link SupplierWithException}.__@param supplier to provide the future's value_@param executor to execute the supplier_@param <T> type of the result_@return Future which is completed with the value of the supplier;public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor) {_		return CompletableFuture.supplyAsync(_			() -> {_				try {_					return supplier.get()__				} catch (Throwable e) {_					throw new CompletionException(e)__				}_			},_			executor)__	};returns,a,future,which,is,completed,with,the,result,of,the,link,supplier,with,exception,param,supplier,to,provide,the,future,s,value,param,executor,to,execute,the,supplier,param,t,type,of,the,result,return,future,which,is,completed,with,the,value,of,the,supplier;public,static,t,completable,future,t,supply,async,supplier,with,exception,t,supplier,executor,executor,return,completable,future,supply,async,try,return,supplier,get,catch,throwable,e,throw,new,completion,exception,e,executor
FutureUtils -> public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor);1539176686;Returns a future which is completed with the result of the {@link SupplierWithException}.__@param supplier to provide the future's value_@param executor to execute the supplier_@param <T> type of the result_@return Future which is completed with the value of the supplier;public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor) {_		return CompletableFuture.supplyAsync(_			() -> {_				try {_					return supplier.get()__				} catch (Throwable e) {_					throw new CompletionException(e)__				}_			},_			executor)__	};returns,a,future,which,is,completed,with,the,result,of,the,link,supplier,with,exception,param,supplier,to,provide,the,future,s,value,param,executor,to,execute,the,supplier,param,t,type,of,the,result,return,future,which,is,completed,with,the,value,of,the,supplier;public,static,t,completable,future,t,supply,async,supplier,with,exception,t,supplier,executor,executor,return,completable,future,supply,async,try,return,supplier,get,catch,throwable,e,throw,new,completion,exception,e,executor
FutureUtils -> public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor);1542282018;Returns a future which is completed with the result of the {@link SupplierWithException}.__@param supplier to provide the future's value_@param executor to execute the supplier_@param <T> type of the result_@return Future which is completed with the value of the supplier;public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor) {_		return CompletableFuture.supplyAsync(_			() -> {_				try {_					return supplier.get()__				} catch (Throwable e) {_					throw new CompletionException(e)__				}_			},_			executor)__	};returns,a,future,which,is,completed,with,the,result,of,the,link,supplier,with,exception,param,supplier,to,provide,the,future,s,value,param,executor,to,execute,the,supplier,param,t,type,of,the,result,return,future,which,is,completed,with,the,value,of,the,supplier;public,static,t,completable,future,t,supply,async,supplier,with,exception,t,supplier,executor,executor,return,completable,future,supply,async,try,return,supplier,get,catch,throwable,e,throw,new,completion,exception,e,executor
FutureUtils -> public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor);1547722029;Returns a future which is completed with the result of the {@link SupplierWithException}.__@param supplier to provide the future's value_@param executor to execute the supplier_@param <T> type of the result_@return Future which is completed with the value of the supplier;public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor) {_		return CompletableFuture.supplyAsync(_			() -> {_				try {_					return supplier.get()__				} catch (Throwable e) {_					throw new CompletionException(e)__				}_			},_			executor)__	};returns,a,future,which,is,completed,with,the,result,of,the,link,supplier,with,exception,param,supplier,to,provide,the,future,s,value,param,executor,to,execute,the,supplier,param,t,type,of,the,result,return,future,which,is,completed,with,the,value,of,the,supplier;public,static,t,completable,future,t,supply,async,supplier,with,exception,t,supplier,executor,executor,return,completable,future,supply,async,try,return,supplier,get,catch,throwable,e,throw,new,completion,exception,e,executor
FutureUtils -> public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor);1549365080;Returns a future which is completed with the result of the {@link SupplierWithException}.__@param supplier to provide the future's value_@param executor to execute the supplier_@param <T> type of the result_@return Future which is completed with the value of the supplier;public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor) {_		return CompletableFuture.supplyAsync(_			() -> {_				try {_					return supplier.get()__				} catch (Throwable e) {_					throw new CompletionException(e)__				}_			},_			executor)__	};returns,a,future,which,is,completed,with,the,result,of,the,link,supplier,with,exception,param,supplier,to,provide,the,future,s,value,param,executor,to,execute,the,supplier,param,t,type,of,the,result,return,future,which,is,completed,with,the,value,of,the,supplier;public,static,t,completable,future,t,supply,async,supplier,with,exception,t,supplier,executor,executor,return,completable,future,supply,async,try,return,supplier,get,catch,throwable,e,throw,new,completion,exception,e,executor
FutureUtils -> public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor);1550220073;Returns a future which is completed with the result of the {@link SupplierWithException}.__@param supplier to provide the future's value_@param executor to execute the supplier_@param <T> type of the result_@return Future which is completed with the value of the supplier;public static <T> CompletableFuture<T> supplyAsync(SupplierWithException<T, ?> supplier, Executor executor) {_		return CompletableFuture.supplyAsync(_			() -> {_				try {_					return supplier.get()__				} catch (Throwable e) {_					throw new CompletionException(e)__				}_			},_			executor)__	};returns,a,future,which,is,completed,with,the,result,of,the,link,supplier,with,exception,param,supplier,to,provide,the,future,s,value,param,executor,to,execute,the,supplier,param,t,type,of,the,result,return,future,which,is,completed,with,the,value,of,the,supplier;public,static,t,completable,future,t,supply,async,supplier,with,exception,t,supplier,executor,executor,return,completable,future,supply,async,try,return,supplier,get,catch,throwable,e,throw,new,completion,exception,e,executor
FutureUtils -> public static <IN> CompletableFuture<Void> thenAcceptAsyncIfNotDone( 		CompletableFuture<IN> completableFuture, 		Executor executor, 		Consumer<? super IN> consumer);1549365080;This function takes a {@link CompletableFuture} and a consumer to accept the result of this future. If the input_future is already done, this function returns {@link CompletableFuture#thenAccept(Consumer)}. Otherwise, the_return value is {@link CompletableFuture#thenAcceptAsync(Consumer, Executor)} with the given executor.__@param completableFuture the completable future for which we want to call #thenAccept._@param executor the executor to run the thenAccept function if the future is not yet done._@param consumer the consumer function to call when the future is completed._@param <IN> type of the input future._@return the new completion stage.;public static <IN> CompletableFuture<Void> thenAcceptAsyncIfNotDone(_		CompletableFuture<IN> completableFuture,_		Executor executor,_		Consumer<? super IN> consumer) {_		return completableFuture.isDone() ?_			completableFuture.thenAccept(consumer) :_			completableFuture.thenAcceptAsync(consumer, executor)__	};this,function,takes,a,link,completable,future,and,a,consumer,to,accept,the,result,of,this,future,if,the,input,future,is,already,done,this,function,returns,link,completable,future,then,accept,consumer,otherwise,the,return,value,is,link,completable,future,then,accept,async,consumer,executor,with,the,given,executor,param,completable,future,the,completable,future,for,which,we,want,to,call,then,accept,param,executor,the,executor,to,run,the,then,accept,function,if,the,future,is,not,yet,done,param,consumer,the,consumer,function,to,call,when,the,future,is,completed,param,in,type,of,the,input,future,return,the,new,completion,stage;public,static,in,completable,future,void,then,accept,async,if,not,done,completable,future,in,completable,future,executor,executor,consumer,super,in,consumer,return,completable,future,is,done,completable,future,then,accept,consumer,completable,future,then,accept,async,consumer,executor
FutureUtils -> public static <IN> CompletableFuture<Void> thenAcceptAsyncIfNotDone( 		CompletableFuture<IN> completableFuture, 		Executor executor, 		Consumer<? super IN> consumer);1550220073;This function takes a {@link CompletableFuture} and a consumer to accept the result of this future. If the input_future is already done, this function returns {@link CompletableFuture#thenAccept(Consumer)}. Otherwise, the_return value is {@link CompletableFuture#thenAcceptAsync(Consumer, Executor)} with the given executor.__@param completableFuture the completable future for which we want to call #thenAccept._@param executor the executor to run the thenAccept function if the future is not yet done._@param consumer the consumer function to call when the future is completed._@param <IN> type of the input future._@return the new completion stage.;public static <IN> CompletableFuture<Void> thenAcceptAsyncIfNotDone(_		CompletableFuture<IN> completableFuture,_		Executor executor,_		Consumer<? super IN> consumer) {_		return completableFuture.isDone() ?_			completableFuture.thenAccept(consumer) :_			completableFuture.thenAcceptAsync(consumer, executor)__	};this,function,takes,a,link,completable,future,and,a,consumer,to,accept,the,result,of,this,future,if,the,input,future,is,already,done,this,function,returns,link,completable,future,then,accept,consumer,otherwise,the,return,value,is,link,completable,future,then,accept,async,consumer,executor,with,the,given,executor,param,completable,future,the,completable,future,for,which,we,want,to,call,then,accept,param,executor,the,executor,to,run,the,then,accept,function,if,the,future,is,not,yet,done,param,consumer,the,consumer,function,to,call,when,the,future,is,completed,param,in,type,of,the,input,future,return,the,new,completion,stage;public,static,in,completable,future,void,then,accept,async,if,not,done,completable,future,in,completable,future,executor,executor,consumer,super,in,consumer,return,completable,future,is,done,completable,future,then,accept,consumer,completable,future,then,accept,async,consumer,executor
FutureUtils -> public static <T>java.util.concurrent.CompletableFuture<T> completedExceptionally(Throwable cause);1501660289;Returns an exceptionally completed {@link java.util.concurrent.CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>java.util.concurrent.CompletableFuture<T> completedExceptionally(Throwable cause) {_		java.util.concurrent.CompletableFuture<T> result = new java.util.concurrent.CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,java,util,concurrent,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,java,util,concurrent,completable,future,t,completed,exceptionally,throwable,cause,java,util,concurrent,completable,future,t,result,new,java,util,concurrent,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>java.util.concurrent.CompletableFuture<T> completedExceptionally(Throwable cause);1501665499;Returns an exceptionally completed {@link java.util.concurrent.CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>java.util.concurrent.CompletableFuture<T> completedExceptionally(Throwable cause) {_		java.util.concurrent.CompletableFuture<T> result = new java.util.concurrent.CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,java,util,concurrent,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,java,util,concurrent,completable,future,t,completed,exceptionally,throwable,cause,java,util,concurrent,completable,future,t,result,new,java,util,concurrent,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T> java.util.concurrent.CompletableFuture<T> toJava(scala.concurrent.Future<T> scalaFuture);1501587025;Converts a Scala {@link scala.concurrent.Future} to a {@link java.util.concurrent.CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> java.util.concurrent.CompletableFuture<T> toJava(scala.concurrent.Future<T> scalaFuture) {_		final java.util.concurrent.CompletableFuture<T> result = new java.util.concurrent.CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,scala,concurrent,future,to,a,link,java,util,concurrent,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,java,util,concurrent,completable,future,t,to,java,scala,concurrent,future,t,scala,future,final,java,util,concurrent,completable,future,t,result,new,java,util,concurrent,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> java.util.concurrent.CompletableFuture<T> toJava(scala.concurrent.Future<T> scalaFuture);1501620731;Converts a Scala {@link scala.concurrent.Future} to a {@link java.util.concurrent.CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> java.util.concurrent.CompletableFuture<T> toJava(scala.concurrent.Future<T> scalaFuture) {_		final java.util.concurrent.CompletableFuture<T> result = new java.util.concurrent.CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,scala,concurrent,future,to,a,link,java,util,concurrent,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,java,util,concurrent,completable,future,t,to,java,scala,concurrent,future,t,scala,future,final,java,util,concurrent,completable,future,t,result,new,java,util,concurrent,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> java.util.concurrent.CompletableFuture<T> toJava(scala.concurrent.Future<T> scalaFuture);1501622876;Converts a Scala {@link scala.concurrent.Future} to a {@link java.util.concurrent.CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> java.util.concurrent.CompletableFuture<T> toJava(scala.concurrent.Future<T> scalaFuture) {_		final java.util.concurrent.CompletableFuture<T> result = new java.util.concurrent.CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,scala,concurrent,future,to,a,link,java,util,concurrent,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,java,util,concurrent,completable,future,t,to,java,scala,concurrent,future,t,scala,future,final,java,util,concurrent,completable,future,t,result,new,java,util,concurrent,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> java.util.concurrent.CompletableFuture<T> toJava(scala.concurrent.Future<T> scalaFuture);1501660289;Converts a Scala {@link scala.concurrent.Future} to a {@link java.util.concurrent.CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> java.util.concurrent.CompletableFuture<T> toJava(scala.concurrent.Future<T> scalaFuture) {_		final java.util.concurrent.CompletableFuture<T> result = new java.util.concurrent.CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,scala,concurrent,future,to,a,link,java,util,concurrent,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,java,util,concurrent,completable,future,t,to,java,scala,concurrent,future,t,scala,future,final,java,util,concurrent,completable,future,t,result,new,java,util,concurrent,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> java.util.concurrent.CompletableFuture<T> toJava(scala.concurrent.Future<T> scalaFuture);1501665499;Converts a Scala {@link scala.concurrent.Future} to a {@link java.util.concurrent.CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> java.util.concurrent.CompletableFuture<T> toJava(scala.concurrent.Future<T> scalaFuture) {_		final java.util.concurrent.CompletableFuture<T> result = new java.util.concurrent.CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,scala,concurrent,future,to,a,link,java,util,concurrent,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,java,util,concurrent,completable,future,t,to,java,scala,concurrent,future,t,scala,future,final,java,util,concurrent,completable,future,t,result,new,java,util,concurrent,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1519052657;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1519052657;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1519481114;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1520781441;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1521741862;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1521804759;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1522339661;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1532383539;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1532383539;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1537783992;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1538395078;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1539176686;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1542282018;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1547722029;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1549365080;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable);1550220073;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwards(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, Executors.directExecutor())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,executors,direct,executor
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends Future<?>> futures);1495001903;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends Future<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends Future<?>> futures);1501587025;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends Future<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends Future<?>> futures);1501620731;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends Future<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1502355550;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1502452094;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1504685932;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1507728812;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1509404932;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1509404933;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1516971024;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1516971025;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1518862304;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1519052657;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1519052657;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1519481114;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1520781441;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1521741862;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1521804759;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1522339661;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1532383539;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1532383539;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1537783992;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1538395078;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1539176686;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1542282018;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1547722029;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1549365080;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> public static FiniteDuration toFiniteDuration(Time time);1550220073;Converts Flink time into a {@link FiniteDuration}.__@param time to convert into a FiniteDuration_@return FiniteDuration with the length of the given time;public static FiniteDuration toFiniteDuration(Time time) {_		return new FiniteDuration(time.toMilliseconds(), TimeUnit.MILLISECONDS)__	};converts,flink,time,into,a,link,finite,duration,param,time,to,convert,into,a,finite,duration,return,finite,duration,with,the,length,of,the,given,time;public,static,finite,duration,to,finite,duration,time,time,return,new,finite,duration,time,to,milliseconds,time,unit,milliseconds
FutureUtils -> ConjunctFuture -> protected abstract Collection<? extends CompletableFuture<?>> getConjunctFutures()_;1519481114;Gets the individual futures which make up the {@link ConjunctFuture}.__@return Collection of futures which make up the {@link ConjunctFuture};protected abstract Collection<? extends CompletableFuture<?>> getConjunctFutures()_;gets,the,individual,futures,which,make,up,the,link,conjunct,future,return,collection,of,futures,which,make,up,the,link,conjunct,future;protected,abstract,collection,extends,completable,future,get,conjunct,futures
FutureUtils -> ConjunctFuture -> protected abstract Collection<? extends CompletableFuture<?>> getConjunctFutures()_;1520781441;Gets the individual futures which make up the {@link ConjunctFuture}.__@return Collection of futures which make up the {@link ConjunctFuture};protected abstract Collection<? extends CompletableFuture<?>> getConjunctFutures()_;gets,the,individual,futures,which,make,up,the,link,conjunct,future,return,collection,of,futures,which,make,up,the,link,conjunct,future;protected,abstract,collection,extends,completable,future,get,conjunct,futures
FutureUtils -> ConjunctFuture -> protected abstract Collection<? extends CompletableFuture<?>> getConjunctFutures()_;1521741862;Gets the individual futures which make up the {@link ConjunctFuture}.__@return Collection of futures which make up the {@link ConjunctFuture};protected abstract Collection<? extends CompletableFuture<?>> getConjunctFutures()_;gets,the,individual,futures,which,make,up,the,link,conjunct,future,return,collection,of,futures,which,make,up,the,link,conjunct,future;protected,abstract,collection,extends,completable,future,get,conjunct,futures
FutureUtils -> ConjunctFuture -> protected abstract Collection<? extends CompletableFuture<?>> getConjunctFutures()_;1521804759;Gets the individual futures which make up the {@link ConjunctFuture}.__@return Collection of futures which make up the {@link ConjunctFuture};protected abstract Collection<? extends CompletableFuture<?>> getConjunctFutures()_;gets,the,individual,futures,which,make,up,the,link,conjunct,future,return,collection,of,futures,which,make,up,the,link,conjunct,future;protected,abstract,collection,extends,completable,future,get,conjunct,futures
FutureUtils -> ConjunctFuture -> protected abstract Collection<? extends CompletableFuture<?>> getConjunctFutures()_;1522339661;Gets the individual futures which make up the {@link ConjunctFuture}.__@return Collection of futures which make up the {@link ConjunctFuture};protected abstract Collection<? extends CompletableFuture<?>> getConjunctFutures()_;gets,the,individual,futures,which,make,up,the,link,conjunct,future,return,collection,of,futures,which,make,up,the,link,conjunct,future;protected,abstract,collection,extends,completable,future,get,conjunct,futures
FutureUtils -> public static <T> java.util.concurrent.CompletableFuture<T> retry( 		final Callable<java.util.concurrent.CompletableFuture<T>> operation, 		final int retries, 		final Executor executor);1501622876;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> java.util.concurrent.CompletableFuture<T> retry(_		final Callable<java.util.concurrent.CompletableFuture<T>> operation,_		final int retries,_		final Executor executor) {__		java.util.concurrent.CompletableFuture<T> operationResultFuture___		try {_			operationResultFuture = operation.call()__		} catch (Exception e) {_			java.util.concurrent.CompletableFuture<T> exceptionResult = new java.util.concurrent.CompletableFuture<>()__			exceptionResult.completeExceptionally(new RetryException("Could not execute the provided operation.", e))__			return exceptionResult__		}__		return operationResultFuture.handleAsync(_			(t, throwable) -> {_				if (throwable != null) {_					if (retries > 0) {_						return retry(operation, retries - 1, executor)__					} else {_						java.util.concurrent.CompletableFuture<T> exceptionResult = new java.util.concurrent.CompletableFuture<>()__						exceptionResult.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_							"has been exhausted.", throwable))__						return exceptionResult__					}_				} else {_					return java.util.concurrent.CompletableFuture.completedFuture(t)__				}_			},_			executor)_		.thenCompose(value -> value)__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,java,util,concurrent,completable,future,t,retry,final,callable,java,util,concurrent,completable,future,t,operation,final,int,retries,final,executor,executor,java,util,concurrent,completable,future,t,operation,result,future,try,operation,result,future,operation,call,catch,exception,e,java,util,concurrent,completable,future,t,exception,result,new,java,util,concurrent,completable,future,exception,result,complete,exceptionally,new,retry,exception,could,not,execute,the,provided,operation,e,return,exception,result,return,operation,result,future,handle,async,t,throwable,if,throwable,null,if,retries,0,return,retry,operation,retries,1,executor,else,java,util,concurrent,completable,future,t,exception,result,new,java,util,concurrent,completable,future,exception,result,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,return,exception,result,else,return,java,util,concurrent,completable,future,completed,future,t,executor,then,compose,value,value
FutureUtils -> public static <T> java.util.concurrent.CompletableFuture<T> retry( 		final Callable<java.util.concurrent.CompletableFuture<T>> operation, 		final int retries, 		final Executor executor);1501660289;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> java.util.concurrent.CompletableFuture<T> retry(_		final Callable<java.util.concurrent.CompletableFuture<T>> operation,_		final int retries,_		final Executor executor) {__		java.util.concurrent.CompletableFuture<T> operationResultFuture___		try {_			operationResultFuture = operation.call()__		} catch (Exception e) {_			java.util.concurrent.CompletableFuture<T> exceptionResult = new java.util.concurrent.CompletableFuture<>()__			exceptionResult.completeExceptionally(new RetryException("Could not execute the provided operation.", e))__			return exceptionResult__		}__		return operationResultFuture.handleAsync(_			(t, throwable) -> {_				if (throwable != null) {_					if (retries > 0) {_						return retry(operation, retries - 1, executor)__					} else {_						java.util.concurrent.CompletableFuture<T> exceptionResult = new java.util.concurrent.CompletableFuture<>()__						exceptionResult.completeExceptionally(new RetryException("Could not complete the operation. Number of retries " +_							"has been exhausted.", throwable))__						return exceptionResult__					}_				} else {_					return java.util.concurrent.CompletableFuture.completedFuture(t)__				}_			},_			executor)_		.thenCompose(value -> value)__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,java,util,concurrent,completable,future,t,retry,final,callable,java,util,concurrent,completable,future,t,operation,final,int,retries,final,executor,executor,java,util,concurrent,completable,future,t,operation,result,future,try,operation,result,future,operation,call,catch,exception,e,java,util,concurrent,completable,future,t,exception,result,new,java,util,concurrent,completable,future,exception,result,complete,exceptionally,new,retry,exception,could,not,execute,the,provided,operation,e,return,exception,result,return,operation,result,future,handle,async,t,throwable,if,throwable,null,if,retries,0,return,retry,operation,retries,1,executor,else,java,util,concurrent,completable,future,t,exception,result,new,java,util,concurrent,completable,future,exception,result,complete,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,return,exception,result,else,return,java,util,concurrent,completable,future,completed,future,t,executor,then,compose,value,value
FutureUtils -> public static <T> java.util.concurrent.CompletableFuture<T> retry( 		final Callable<java.util.concurrent.CompletableFuture<T>> operation, 		final int retries, 		final Executor executor);1501665499;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> java.util.concurrent.CompletableFuture<T> retry(_		final Callable<java.util.concurrent.CompletableFuture<T>> operation,_		final int retries,_		final Executor executor) {__		java.util.concurrent.CompletableFuture<T> operationResultFuture___		try {_			operationResultFuture = operation.call()__		} catch (Exception e) {_			return FutureUtils.completedExceptionally(new RetryException("Could not execute the provided operation.", e))__		}__		return operationResultFuture.handleAsync(_			(t, throwable) -> {_				if (throwable != null) {_					if (retries > 0) {_						return retry(operation, retries - 1, executor)__					} else {_						return FutureUtils.<T>completedExceptionally(new RetryException("Could not complete the operation. Number of retries " +_							"has been exhausted.", throwable))__					}_				} else {_					return java.util.concurrent.CompletableFuture.completedFuture(t)__				}_			},_			executor)_		.thenCompose(value -> value)__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,java,util,concurrent,completable,future,t,retry,final,callable,java,util,concurrent,completable,future,t,operation,final,int,retries,final,executor,executor,java,util,concurrent,completable,future,t,operation,result,future,try,operation,result,future,operation,call,catch,exception,e,return,future,utils,completed,exceptionally,new,retry,exception,could,not,execute,the,provided,operation,e,return,operation,result,future,handle,async,t,throwable,if,throwable,null,if,retries,0,return,retry,operation,retries,1,executor,else,return,future,utils,t,completed,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,return,java,util,concurrent,completable,future,completed,future,t,executor,then,compose,value,value
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1519052657;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1519052657;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1519481114;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1520781441;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1521741862;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1521804759;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1522339661;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1532383539;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1532383539;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1537783992;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1538395078;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1539176686;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1542282018;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1547722029;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1549365080;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete);1550220073;Creates a {@link ConjunctFuture} which is only completed after all given futures have completed._Unlike {@link FutureUtils#waitForAll(Collection)}, the resulting future won't be completed directly_if one of the given futures is completed exceptionally. Instead, all occurring exception will be_collected and combined to a single exception. If at least on exception occurs, then the resulting_future will be completed exceptionally.__@param futuresToComplete futures to complete_@return Future which is completed after all given futures have been completed.;public static ConjunctFuture<Void> completeAll(Collection<? extends CompletableFuture<?>> futuresToComplete) {_		return new CompletionConjunctFuture(futuresToComplete)__	};creates,a,link,conjunct,future,which,is,only,completed,after,all,given,futures,have,completed,unlike,link,future,utils,wait,for,all,collection,the,resulting,future,won,t,be,completed,directly,if,one,of,the,given,futures,is,completed,exceptionally,instead,all,occurring,exception,will,be,collected,and,combined,to,a,single,exception,if,at,least,on,exception,occurs,then,the,resulting,future,will,be,completed,exceptionally,param,futures,to,complete,futures,to,complete,return,future,which,is,completed,after,all,given,futures,have,been,completed;public,static,conjunct,future,void,complete,all,collection,extends,completable,future,futures,to,complete,return,new,completion,conjunct,future,futures,to,complete
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends java.util.concurrent.CompletableFuture<? extends T>> futures);1501622876;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends java.util.concurrent.CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (java.util.concurrent.CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,java,util,concurrent,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,java,util,concurrent,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends java.util.concurrent.CompletableFuture<? extends T>> futures);1501660289;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends java.util.concurrent.CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (java.util.concurrent.CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,java,util,concurrent,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,java,util,concurrent,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends java.util.concurrent.CompletableFuture<? extends T>> futures);1501665499;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends java.util.concurrent.CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (java.util.concurrent.CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,java,util,concurrent,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,java,util,concurrent,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1501622876;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1501660289;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1501665499;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1501761022;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1502355550;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1502452094;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1504685932;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1507728812;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1509404932;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1509404933;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1516971024;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1516971025;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1518862304;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1519052657;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1519052657;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1519481114;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1520781441;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1521741862;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1521804759;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1522339661;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1532383539;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1532383539;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1537783992;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1538395078;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1539176686;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1542282018;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1547722029;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1549365080;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> ConjunctFuture -> public abstract int getNumFuturesTotal()_;1550220073;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;public abstract int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;public,abstract,int,get,num,futures,total
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1504685932;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1507728812;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1509404932;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1509404933;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1516971024;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1516971025;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1518862304;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1519052657;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1519052657;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1519481114;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1520781441;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1521741862;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1521804759;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1522339661;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1532383539;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1532383539;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1537783992;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1538395078;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1539176686;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1542282018;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1547722029;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1549365080;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retry( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Executor executor);1550220073;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> CompletableFuture<T> retry(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Executor executor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperation(resultFuture, operation, retries, executor)___		return resultFuture__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,completable,future,t,retry,final,supplier,completable,future,t,operation,final,int,retries,final,executor,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,result,future,operation,retries,executor,return,result,future
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1501761022;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1502355550;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1502452094;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1504685932;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1507728812;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1509404932;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1509404933;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1516971024;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1516971025;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1518862304;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1519052657;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1519052657;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		final ResultConjunctFuture<T> conjunct = new ResultConjunctFuture<>(futures.size())___		if (futures.isEmpty()) {_			conjunct.complete(Collections.emptyList())__		}_		else {_			for (CompletableFuture<? extends T> future : futures) {_				future.whenComplete(conjunct::handleCompletedFuture)__			}_		}__		return conjunct__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,final,result,conjunct,future,t,conjunct,new,result,conjunct,future,futures,size,if,futures,is,empty,conjunct,complete,collections,empty,list,else,for,completable,future,extends,t,future,futures,future,when,complete,conjunct,handle,completed,future,return,conjunct
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1519481114;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1520781441;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1521741862;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1521804759;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1522339661;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1532383539;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1532383539;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1537783992;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1538395078;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1539176686;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1542282018;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1547722029;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1549365080;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures);1550220073;Creates a future that is complete once multiple other futures completed._The future fails (completes exceptionally) once one of the futures in the_conjunction fails. Upon successful completion, the future returns the_collection of the futures' results.__<p>The ConjunctFuture gives access to how many Futures in the conjunction have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures that make up the conjunction. No null entries are allowed._@return The ConjunctFuture that completes once all given futures are complete (or one fails).;public static <T> ConjunctFuture<Collection<T>> combineAll(Collection<? extends CompletableFuture<? extends T>> futures) {_		checkNotNull(futures, "futures")___		return new ResultConjunctFuture<>(futures)__	};creates,a,future,that,is,complete,once,multiple,other,futures,completed,the,future,fails,completes,exceptionally,once,one,of,the,futures,in,the,conjunction,fails,upon,successful,completion,the,future,returns,the,collection,of,the,futures,results,p,the,conjunct,future,gives,access,to,how,many,futures,in,the,conjunction,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,that,make,up,the,conjunction,no,null,entries,are,allowed,return,the,conjunct,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,t,conjunct,future,collection,t,combine,all,collection,extends,completable,future,extends,t,futures,check,not,null,futures,futures,return,new,result,conjunct,future,futures
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1519052657;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1519052657;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1519481114;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1520781441;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1521741862;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1521804759;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1522339661;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1532383539;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1532383539;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1537783992;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1538395078;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1539176686;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1542282018;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1547722029;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1549365080;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync( 		CompletableFuture<?> future, 		RunnableWithException runnable, 		Executor executor);1550220073;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@param executor to run the given action_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(_		CompletableFuture<?> future,_		RunnableWithException runnable,_		Executor executor) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenCompleteAsync(_			(Object ignored, Throwable throwable) -> {_				try {_					runnable.run()__				} catch (Throwable e) {_					throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__				}__				if (throwable != null) {_					resultFuture.completeExceptionally(throwable)__				} else {_					resultFuture.complete(null)__				}_			},_			executor)___		return resultFuture__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,param,executor,to,run,the,given,action,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,executor,executor,final,completable,future,void,result,future,new,completable,future,future,when,complete,async,object,ignored,throwable,throwable,try,runnable,run,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,result,future,complete,exceptionally,throwable,else,result,future,complete,null,executor,return,result,future
FutureUtils -> @Deprecated 	public static <T> java.util.concurrent.CompletableFuture<T> toJava(Future<T> flinkFuture);1501587025;Converts a Flink {@link Future} into a {@link CompletableFuture}.__@param flinkFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture__@deprecated Will be removed once we completely remove Flink's futures;@Deprecated_	public static <T> java.util.concurrent.CompletableFuture<T> toJava(Future<T> flinkFuture) {_		final java.util.concurrent.CompletableFuture<T> result = new java.util.concurrent.CompletableFuture<>()___		flinkFuture.handle(_			(t, throwable) -> {_				if (throwable != null) {_					result.completeExceptionally(throwable)__				} else {_					result.complete(t)__				}__				return null__			}_		)___		return result__	};converts,a,flink,link,future,into,a,link,completable,future,param,flink,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future,deprecated,will,be,removed,once,we,completely,remove,flink,s,futures;deprecated,public,static,t,java,util,concurrent,completable,future,t,to,java,future,t,flink,future,final,java,util,concurrent,completable,future,t,result,new,java,util,concurrent,completable,future,flink,future,handle,t,throwable,if,throwable,null,result,complete,exceptionally,throwable,else,result,complete,t,return,null,return,result
FutureUtils -> @Deprecated 	public static <T> java.util.concurrent.CompletableFuture<T> toJava(Future<T> flinkFuture);1501620731;Converts a Flink {@link Future} into a {@link CompletableFuture}.__@param flinkFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture__@deprecated Will be removed once we completely remove Flink's futures;@Deprecated_	public static <T> java.util.concurrent.CompletableFuture<T> toJava(Future<T> flinkFuture) {_		final java.util.concurrent.CompletableFuture<T> result = new java.util.concurrent.CompletableFuture<>()___		flinkFuture.handle(_			(t, throwable) -> {_				if (throwable != null) {_					result.completeExceptionally(throwable)__				} else {_					result.complete(t)__				}__				return null__			}_		)___		return result__	};converts,a,flink,link,future,into,a,link,completable,future,param,flink,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future,deprecated,will,be,removed,once,we,completely,remove,flink,s,futures;deprecated,public,static,t,java,util,concurrent,completable,future,t,to,java,future,t,flink,future,final,java,util,concurrent,completable,future,t,result,new,java,util,concurrent,completable,future,flink,future,handle,t,throwable,if,throwable,null,result,complete,exceptionally,throwable,else,result,complete,t,return,null,return,result
FutureUtils -> @Deprecated 	public static <T> java.util.concurrent.CompletableFuture<T> toJava(Future<T> flinkFuture);1501622876;Converts a Flink {@link Future} into a {@link CompletableFuture}.__@param flinkFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture__@deprecated Will be removed once we completely remove Flink's futures;@Deprecated_	public static <T> java.util.concurrent.CompletableFuture<T> toJava(Future<T> flinkFuture) {_		final java.util.concurrent.CompletableFuture<T> result = new java.util.concurrent.CompletableFuture<>()___		flinkFuture.handle(_			(t, throwable) -> {_				if (throwable != null) {_					result.completeExceptionally(throwable)__				} else {_					result.complete(t)__				}__				return null__			}_		)___		return result__	};converts,a,flink,link,future,into,a,link,completable,future,param,flink,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future,deprecated,will,be,removed,once,we,completely,remove,flink,s,futures;deprecated,public,static,t,java,util,concurrent,completable,future,t,to,java,future,t,flink,future,final,java,util,concurrent,completable,future,t,result,new,java,util,concurrent,completable,future,flink,future,handle,t,throwable,if,throwable,null,result,complete,exceptionally,throwable,else,result,complete,t,return,null,return,result
FutureUtils -> @Deprecated 	public static <T> java.util.concurrent.CompletableFuture<T> toJava(Future<T> flinkFuture);1501660289;Converts a Flink {@link Future} into a {@link CompletableFuture}.__@param flinkFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture__@deprecated Will be removed once we completely remove Flink's futures;@Deprecated_	public static <T> java.util.concurrent.CompletableFuture<T> toJava(Future<T> flinkFuture) {_		final java.util.concurrent.CompletableFuture<T> result = new java.util.concurrent.CompletableFuture<>()___		flinkFuture.handle(_			(t, throwable) -> {_				if (throwable != null) {_					result.completeExceptionally(throwable)__				} else {_					result.complete(t)__				}__				return null__			}_		)___		return result__	};converts,a,flink,link,future,into,a,link,completable,future,param,flink,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future,deprecated,will,be,removed,once,we,completely,remove,flink,s,futures;deprecated,public,static,t,java,util,concurrent,completable,future,t,to,java,future,t,flink,future,final,java,util,concurrent,completable,future,t,result,new,java,util,concurrent,completable,future,flink,future,handle,t,throwable,if,throwable,null,result,complete,exceptionally,throwable,else,result,complete,t,return,null,return,result
FutureUtils -> @Deprecated 	public static <T> java.util.concurrent.CompletableFuture<T> toJava(Future<T> flinkFuture);1501665499;Converts a Flink {@link Future} into a {@link CompletableFuture}.__@param flinkFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture__@deprecated Will be removed once we completely remove Flink's futures;@Deprecated_	public static <T> java.util.concurrent.CompletableFuture<T> toJava(Future<T> flinkFuture) {_		final java.util.concurrent.CompletableFuture<T> result = new java.util.concurrent.CompletableFuture<>()___		flinkFuture.handle(_			(t, throwable) -> {_				if (throwable != null) {_					result.completeExceptionally(throwable)__				} else {_					result.complete(t)__				}__				return null__			}_		)___		return result__	};converts,a,flink,link,future,into,a,link,completable,future,param,flink,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future,deprecated,will,be,removed,once,we,completely,remove,flink,s,futures;deprecated,public,static,t,java,util,concurrent,completable,future,t,to,java,future,t,flink,future,final,java,util,concurrent,completable,future,t,result,new,java,util,concurrent,completable,future,flink,future,handle,t,throwable,if,throwable,null,result,complete,exceptionally,throwable,else,result,complete,t,return,null,return,result
FutureUtils -> public static <T> CompletableFuture<T> retrySuccessfulWithDelay( 		final Supplier<CompletableFuture<T>> operation, 		final Time retryDelay, 		final Deadline deadline, 		final Predicate<T> acceptancePredicate, 		final ScheduledExecutor scheduledExecutor);1542282018;Retry the given operation with the given delay in between successful completions where the_result does not match a given predicate.__@param operation to retry_@param retryDelay delay between retries_@param deadline A deadline that specifies at what point we should stop retrying_@param acceptancePredicate Predicate to test whether the result is acceptable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry_in case the predicate isn't matched;public static <T> CompletableFuture<T> retrySuccessfulWithDelay(_		final Supplier<CompletableFuture<T>> operation,_		final Time retryDelay,_		final Deadline deadline,_		final Predicate<T> acceptancePredicate,_		final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retrySuccessfulOperationWithDelay(_			resultFuture,_			operation,_			retryDelay,_			deadline,_			acceptancePredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,successful,completions,where,the,result,does,not,match,a,given,predicate,param,operation,to,retry,param,retry,delay,delay,between,retries,param,deadline,a,deadline,that,specifies,at,what,point,we,should,stop,retrying,param,acceptance,predicate,predicate,to,test,whether,the,result,is,acceptable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,the,predicate,isn,t,matched;public,static,t,completable,future,t,retry,successful,with,delay,final,supplier,completable,future,t,operation,final,time,retry,delay,final,deadline,deadline,final,predicate,t,acceptance,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,successful,operation,with,delay,result,future,operation,retry,delay,deadline,acceptance,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retrySuccessfulWithDelay( 		final Supplier<CompletableFuture<T>> operation, 		final Time retryDelay, 		final Deadline deadline, 		final Predicate<T> acceptancePredicate, 		final ScheduledExecutor scheduledExecutor);1547722029;Retry the given operation with the given delay in between successful completions where the_result does not match a given predicate.__@param operation to retry_@param retryDelay delay between retries_@param deadline A deadline that specifies at what point we should stop retrying_@param acceptancePredicate Predicate to test whether the result is acceptable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry_in case the predicate isn't matched;public static <T> CompletableFuture<T> retrySuccessfulWithDelay(_		final Supplier<CompletableFuture<T>> operation,_		final Time retryDelay,_		final Deadline deadline,_		final Predicate<T> acceptancePredicate,_		final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retrySuccessfulOperationWithDelay(_			resultFuture,_			operation,_			retryDelay,_			deadline,_			acceptancePredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,successful,completions,where,the,result,does,not,match,a,given,predicate,param,operation,to,retry,param,retry,delay,delay,between,retries,param,deadline,a,deadline,that,specifies,at,what,point,we,should,stop,retrying,param,acceptance,predicate,predicate,to,test,whether,the,result,is,acceptable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,the,predicate,isn,t,matched;public,static,t,completable,future,t,retry,successful,with,delay,final,supplier,completable,future,t,operation,final,time,retry,delay,final,deadline,deadline,final,predicate,t,acceptance,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,successful,operation,with,delay,result,future,operation,retry,delay,deadline,acceptance,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retrySuccessfulWithDelay( 		final Supplier<CompletableFuture<T>> operation, 		final Time retryDelay, 		final Deadline deadline, 		final Predicate<T> acceptancePredicate, 		final ScheduledExecutor scheduledExecutor);1549365080;Retry the given operation with the given delay in between successful completions where the_result does not match a given predicate.__@param operation to retry_@param retryDelay delay between retries_@param deadline A deadline that specifies at what point we should stop retrying_@param acceptancePredicate Predicate to test whether the result is acceptable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry_in case the predicate isn't matched;public static <T> CompletableFuture<T> retrySuccessfulWithDelay(_		final Supplier<CompletableFuture<T>> operation,_		final Time retryDelay,_		final Deadline deadline,_		final Predicate<T> acceptancePredicate,_		final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retrySuccessfulOperationWithDelay(_			resultFuture,_			operation,_			retryDelay,_			deadline,_			acceptancePredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,successful,completions,where,the,result,does,not,match,a,given,predicate,param,operation,to,retry,param,retry,delay,delay,between,retries,param,deadline,a,deadline,that,specifies,at,what,point,we,should,stop,retrying,param,acceptance,predicate,predicate,to,test,whether,the,result,is,acceptable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,the,predicate,isn,t,matched;public,static,t,completable,future,t,retry,successful,with,delay,final,supplier,completable,future,t,operation,final,time,retry,delay,final,deadline,deadline,final,predicate,t,acceptance,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,successful,operation,with,delay,result,future,operation,retry,delay,deadline,acceptance,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retrySuccessfulWithDelay( 		final Supplier<CompletableFuture<T>> operation, 		final Time retryDelay, 		final Deadline deadline, 		final Predicate<T> acceptancePredicate, 		final ScheduledExecutor scheduledExecutor);1550220073;Retry the given operation with the given delay in between successful completions where the_result does not match a given predicate.__@param operation to retry_@param retryDelay delay between retries_@param deadline A deadline that specifies at what point we should stop retrying_@param acceptancePredicate Predicate to test whether the result is acceptable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry_in case the predicate isn't matched;public static <T> CompletableFuture<T> retrySuccessfulWithDelay(_		final Supplier<CompletableFuture<T>> operation,_		final Time retryDelay,_		final Deadline deadline,_		final Predicate<T> acceptancePredicate,_		final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retrySuccessfulOperationWithDelay(_			resultFuture,_			operation,_			retryDelay,_			deadline,_			acceptancePredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,successful,completions,where,the,result,does,not,match,a,given,predicate,param,operation,to,retry,param,retry,delay,delay,between,retries,param,deadline,a,deadline,that,specifies,at,what,point,we,should,stop,retrying,param,acceptance,predicate,predicate,to,test,whether,the,result,is,acceptable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,the,predicate,isn,t,matched;public,static,t,completable,future,t,retry,successful,with,delay,final,supplier,completable,future,t,operation,final,time,retry,delay,final,deadline,deadline,final,predicate,t,acceptance,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,successful,operation,with,delay,result,future,operation,retry,delay,deadline,acceptance,predicate,scheduled,executor,return,result,future
FutureUtils -> ConjunctFuture -> int getNumFuturesTotal()_;1487548884;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;int,get,num,futures,total
FutureUtils -> ConjunctFuture -> int getNumFuturesTotal()_;1495001903;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;int,get,num,futures,total
FutureUtils -> ConjunctFuture -> int getNumFuturesTotal()_;1501587025;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;int,get,num,futures,total
FutureUtils -> ConjunctFuture -> int getNumFuturesTotal()_;1501620731;Gets the total number of Futures in the conjunction._@return The total number of Futures in the conjunction.;int getNumFuturesTotal()_;gets,the,total,number,of,futures,in,the,conjunction,return,the,total,number,of,futures,in,the,conjunction;int,get,num,futures,total
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends java.util.concurrent.CompletableFuture<?>> futures);1501622876;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends java.util.concurrent.CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,java,util,concurrent,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends java.util.concurrent.CompletableFuture<?>> futures);1501660289;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends java.util.concurrent.CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,java,util,concurrent,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static ConjunctFuture<Void> waitForAll(Collection<? extends java.util.concurrent.CompletableFuture<?>> futures);1501665499;Creates a future that is complete once all of the given futures have completed._The future fails (completes exceptionally) once one of the given futures_fails.__<p>The ConjunctFuture gives access to how many Futures have already_completed successfully, via {@link ConjunctFuture#getNumFuturesCompleted()}.__@param futures The futures to wait on. No null entries are allowed._@return The WaitingFuture that completes once all given futures are complete (or one fails).;public static ConjunctFuture<Void> waitForAll(Collection<? extends java.util.concurrent.CompletableFuture<?>> futures) {_		checkNotNull(futures, "futures")___		return new WaitingConjunctFuture(futures)__	};creates,a,future,that,is,complete,once,all,of,the,given,futures,have,completed,the,future,fails,completes,exceptionally,once,one,of,the,given,futures,fails,p,the,conjunct,future,gives,access,to,how,many,futures,have,already,completed,successfully,via,link,conjunct,future,get,num,futures,completed,param,futures,the,futures,to,wait,on,no,null,entries,are,allowed,return,the,waiting,future,that,completes,once,all,given,futures,are,complete,or,one,fails;public,static,conjunct,future,void,wait,for,all,collection,extends,java,util,concurrent,completable,future,futures,check,not,null,futures,futures,return,new,waiting,conjunct,future,futures
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1504685932;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1507728812;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1509404932;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1509404933;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1516971024;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1516971025;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1518862304;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1519052657;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1519052657;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1519481114;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1520781441;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1521741862;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1521804759;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1522339661;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1532383539;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1532383539;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1537783992;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1538395078;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1539176686;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1542282018;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1547722029;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1549365080;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final ScheduledExecutor scheduledExecutor);1550220073;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final ScheduledExecutor scheduledExecutor) {_		return retryWithDelay(_			operation,_			retries,_			retryDelay,_			(throwable) -> true,_			scheduledExecutor)__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,scheduled,executor,scheduled,executor,return,retry,with,delay,operation,retries,retry,delay,throwable,true,scheduled,executor
FutureUtils -> public static CompletableFuture<Void> composeAfterwards( 			CompletableFuture<?> future, 			Supplier<CompletableFuture<?>> composedAction);1521804759;Run the given asynchronous action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion, the_asynchronous action's exception will be added to the initial exception.__@param future to wait for its completion_@param composedAction asynchronous action which is triggered after the future's completion_@return Future which is completed after the asynchronous action has completed. This future can contain_an exception if an error occurred in the given future or asynchronous action.;public static CompletableFuture<Void> composeAfterwards(_			CompletableFuture<?> future,_			Supplier<CompletableFuture<?>> composedAction) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenComplete(_			(Object outerIgnored, Throwable outerThrowable) -> {_				final CompletableFuture<?> composedActionFuture = composedAction.get()___				composedActionFuture.whenComplete(_					(Object innerIgnored, Throwable innerThrowable) -> {_						if (innerThrowable != null) {_							resultFuture.completeExceptionally(ExceptionUtils.firstOrSuppressed(innerThrowable, outerThrowable))__						} else if (outerThrowable != null) {_							resultFuture.completeExceptionally(outerThrowable)__						} else {_							resultFuture.complete(null)__						}_					})__			})___		return resultFuture__	};run,the,given,asynchronous,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,asynchronous,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,composed,action,asynchronous,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,asynchronous,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,asynchronous,action;public,static,completable,future,void,compose,afterwards,completable,future,future,supplier,completable,future,composed,action,final,completable,future,void,result,future,new,completable,future,future,when,complete,object,outer,ignored,throwable,outer,throwable,final,completable,future,composed,action,future,composed,action,get,composed,action,future,when,complete,object,inner,ignored,throwable,inner,throwable,if,inner,throwable,null,result,future,complete,exceptionally,exception,utils,first,or,suppressed,inner,throwable,outer,throwable,else,if,outer,throwable,null,result,future,complete,exceptionally,outer,throwable,else,result,future,complete,null,return,result,future
FutureUtils -> public static CompletableFuture<Void> composeAfterwards( 			CompletableFuture<?> future, 			Supplier<CompletableFuture<?>> composedAction);1522339661;Run the given asynchronous action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion, the_asynchronous action's exception will be added to the initial exception.__@param future to wait for its completion_@param composedAction asynchronous action which is triggered after the future's completion_@return Future which is completed after the asynchronous action has completed. This future can contain_an exception if an error occurred in the given future or asynchronous action.;public static CompletableFuture<Void> composeAfterwards(_			CompletableFuture<?> future,_			Supplier<CompletableFuture<?>> composedAction) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenComplete(_			(Object outerIgnored, Throwable outerThrowable) -> {_				final CompletableFuture<?> composedActionFuture = composedAction.get()___				composedActionFuture.whenComplete(_					(Object innerIgnored, Throwable innerThrowable) -> {_						if (innerThrowable != null) {_							resultFuture.completeExceptionally(ExceptionUtils.firstOrSuppressed(innerThrowable, outerThrowable))__						} else if (outerThrowable != null) {_							resultFuture.completeExceptionally(outerThrowable)__						} else {_							resultFuture.complete(null)__						}_					})__			})___		return resultFuture__	};run,the,given,asynchronous,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,asynchronous,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,composed,action,asynchronous,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,asynchronous,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,asynchronous,action;public,static,completable,future,void,compose,afterwards,completable,future,future,supplier,completable,future,composed,action,final,completable,future,void,result,future,new,completable,future,future,when,complete,object,outer,ignored,throwable,outer,throwable,final,completable,future,composed,action,future,composed,action,get,composed,action,future,when,complete,object,inner,ignored,throwable,inner,throwable,if,inner,throwable,null,result,future,complete,exceptionally,exception,utils,first,or,suppressed,inner,throwable,outer,throwable,else,if,outer,throwable,null,result,future,complete,exceptionally,outer,throwable,else,result,future,complete,null,return,result,future
FutureUtils -> public static CompletableFuture<Void> composeAfterwards( 			CompletableFuture<?> future, 			Supplier<CompletableFuture<?>> composedAction);1532383539;Run the given asynchronous action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion, the_asynchronous action's exception will be added to the initial exception.__@param future to wait for its completion_@param composedAction asynchronous action which is triggered after the future's completion_@return Future which is completed after the asynchronous action has completed. This future can contain_an exception if an error occurred in the given future or asynchronous action.;public static CompletableFuture<Void> composeAfterwards(_			CompletableFuture<?> future,_			Supplier<CompletableFuture<?>> composedAction) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenComplete(_			(Object outerIgnored, Throwable outerThrowable) -> {_				final CompletableFuture<?> composedActionFuture = composedAction.get()___				composedActionFuture.whenComplete(_					(Object innerIgnored, Throwable innerThrowable) -> {_						if (innerThrowable != null) {_							resultFuture.completeExceptionally(ExceptionUtils.firstOrSuppressed(innerThrowable, outerThrowable))__						} else if (outerThrowable != null) {_							resultFuture.completeExceptionally(outerThrowable)__						} else {_							resultFuture.complete(null)__						}_					})__			})___		return resultFuture__	};run,the,given,asynchronous,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,asynchronous,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,composed,action,asynchronous,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,asynchronous,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,asynchronous,action;public,static,completable,future,void,compose,afterwards,completable,future,future,supplier,completable,future,composed,action,final,completable,future,void,result,future,new,completable,future,future,when,complete,object,outer,ignored,throwable,outer,throwable,final,completable,future,composed,action,future,composed,action,get,composed,action,future,when,complete,object,inner,ignored,throwable,inner,throwable,if,inner,throwable,null,result,future,complete,exceptionally,exception,utils,first,or,suppressed,inner,throwable,outer,throwable,else,if,outer,throwable,null,result,future,complete,exceptionally,outer,throwable,else,result,future,complete,null,return,result,future
FutureUtils -> public static CompletableFuture<Void> composeAfterwards( 			CompletableFuture<?> future, 			Supplier<CompletableFuture<?>> composedAction);1532383539;Run the given asynchronous action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion, the_asynchronous action's exception will be added to the initial exception.__@param future to wait for its completion_@param composedAction asynchronous action which is triggered after the future's completion_@return Future which is completed after the asynchronous action has completed. This future can contain_an exception if an error occurred in the given future or asynchronous action.;public static CompletableFuture<Void> composeAfterwards(_			CompletableFuture<?> future,_			Supplier<CompletableFuture<?>> composedAction) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenComplete(_			(Object outerIgnored, Throwable outerThrowable) -> {_				final CompletableFuture<?> composedActionFuture = composedAction.get()___				composedActionFuture.whenComplete(_					(Object innerIgnored, Throwable innerThrowable) -> {_						if (innerThrowable != null) {_							resultFuture.completeExceptionally(ExceptionUtils.firstOrSuppressed(innerThrowable, outerThrowable))__						} else if (outerThrowable != null) {_							resultFuture.completeExceptionally(outerThrowable)__						} else {_							resultFuture.complete(null)__						}_					})__			})___		return resultFuture__	};run,the,given,asynchronous,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,asynchronous,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,composed,action,asynchronous,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,asynchronous,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,asynchronous,action;public,static,completable,future,void,compose,afterwards,completable,future,future,supplier,completable,future,composed,action,final,completable,future,void,result,future,new,completable,future,future,when,complete,object,outer,ignored,throwable,outer,throwable,final,completable,future,composed,action,future,composed,action,get,composed,action,future,when,complete,object,inner,ignored,throwable,inner,throwable,if,inner,throwable,null,result,future,complete,exceptionally,exception,utils,first,or,suppressed,inner,throwable,outer,throwable,else,if,outer,throwable,null,result,future,complete,exceptionally,outer,throwable,else,result,future,complete,null,return,result,future
FutureUtils -> public static CompletableFuture<Void> composeAfterwards( 			CompletableFuture<?> future, 			Supplier<CompletableFuture<?>> composedAction);1537783992;Run the given asynchronous action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion, the_asynchronous action's exception will be added to the initial exception.__@param future to wait for its completion_@param composedAction asynchronous action which is triggered after the future's completion_@return Future which is completed after the asynchronous action has completed. This future can contain_an exception if an error occurred in the given future or asynchronous action.;public static CompletableFuture<Void> composeAfterwards(_			CompletableFuture<?> future,_			Supplier<CompletableFuture<?>> composedAction) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenComplete(_			(Object outerIgnored, Throwable outerThrowable) -> {_				final CompletableFuture<?> composedActionFuture = composedAction.get()___				composedActionFuture.whenComplete(_					(Object innerIgnored, Throwable innerThrowable) -> {_						if (innerThrowable != null) {_							resultFuture.completeExceptionally(ExceptionUtils.firstOrSuppressed(innerThrowable, outerThrowable))__						} else if (outerThrowable != null) {_							resultFuture.completeExceptionally(outerThrowable)__						} else {_							resultFuture.complete(null)__						}_					})__			})___		return resultFuture__	};run,the,given,asynchronous,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,asynchronous,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,composed,action,asynchronous,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,asynchronous,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,asynchronous,action;public,static,completable,future,void,compose,afterwards,completable,future,future,supplier,completable,future,composed,action,final,completable,future,void,result,future,new,completable,future,future,when,complete,object,outer,ignored,throwable,outer,throwable,final,completable,future,composed,action,future,composed,action,get,composed,action,future,when,complete,object,inner,ignored,throwable,inner,throwable,if,inner,throwable,null,result,future,complete,exceptionally,exception,utils,first,or,suppressed,inner,throwable,outer,throwable,else,if,outer,throwable,null,result,future,complete,exceptionally,outer,throwable,else,result,future,complete,null,return,result,future
FutureUtils -> public static CompletableFuture<Void> composeAfterwards( 			CompletableFuture<?> future, 			Supplier<CompletableFuture<?>> composedAction);1538395078;Run the given asynchronous action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion, the_asynchronous action's exception will be added to the initial exception.__@param future to wait for its completion_@param composedAction asynchronous action which is triggered after the future's completion_@return Future which is completed after the asynchronous action has completed. This future can contain_an exception if an error occurred in the given future or asynchronous action.;public static CompletableFuture<Void> composeAfterwards(_			CompletableFuture<?> future,_			Supplier<CompletableFuture<?>> composedAction) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenComplete(_			(Object outerIgnored, Throwable outerThrowable) -> {_				final CompletableFuture<?> composedActionFuture = composedAction.get()___				composedActionFuture.whenComplete(_					(Object innerIgnored, Throwable innerThrowable) -> {_						if (innerThrowable != null) {_							resultFuture.completeExceptionally(ExceptionUtils.firstOrSuppressed(innerThrowable, outerThrowable))__						} else if (outerThrowable != null) {_							resultFuture.completeExceptionally(outerThrowable)__						} else {_							resultFuture.complete(null)__						}_					})__			})___		return resultFuture__	};run,the,given,asynchronous,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,asynchronous,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,composed,action,asynchronous,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,asynchronous,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,asynchronous,action;public,static,completable,future,void,compose,afterwards,completable,future,future,supplier,completable,future,composed,action,final,completable,future,void,result,future,new,completable,future,future,when,complete,object,outer,ignored,throwable,outer,throwable,final,completable,future,composed,action,future,composed,action,get,composed,action,future,when,complete,object,inner,ignored,throwable,inner,throwable,if,inner,throwable,null,result,future,complete,exceptionally,exception,utils,first,or,suppressed,inner,throwable,outer,throwable,else,if,outer,throwable,null,result,future,complete,exceptionally,outer,throwable,else,result,future,complete,null,return,result,future
FutureUtils -> public static CompletableFuture<Void> composeAfterwards( 			CompletableFuture<?> future, 			Supplier<CompletableFuture<?>> composedAction);1539176686;Run the given asynchronous action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion, the_asynchronous action's exception will be added to the initial exception.__@param future to wait for its completion_@param composedAction asynchronous action which is triggered after the future's completion_@return Future which is completed after the asynchronous action has completed. This future can contain_an exception if an error occurred in the given future or asynchronous action.;public static CompletableFuture<Void> composeAfterwards(_			CompletableFuture<?> future,_			Supplier<CompletableFuture<?>> composedAction) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenComplete(_			(Object outerIgnored, Throwable outerThrowable) -> {_				final CompletableFuture<?> composedActionFuture = composedAction.get()___				composedActionFuture.whenComplete(_					(Object innerIgnored, Throwable innerThrowable) -> {_						if (innerThrowable != null) {_							resultFuture.completeExceptionally(ExceptionUtils.firstOrSuppressed(innerThrowable, outerThrowable))__						} else if (outerThrowable != null) {_							resultFuture.completeExceptionally(outerThrowable)__						} else {_							resultFuture.complete(null)__						}_					})__			})___		return resultFuture__	};run,the,given,asynchronous,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,asynchronous,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,composed,action,asynchronous,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,asynchronous,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,asynchronous,action;public,static,completable,future,void,compose,afterwards,completable,future,future,supplier,completable,future,composed,action,final,completable,future,void,result,future,new,completable,future,future,when,complete,object,outer,ignored,throwable,outer,throwable,final,completable,future,composed,action,future,composed,action,get,composed,action,future,when,complete,object,inner,ignored,throwable,inner,throwable,if,inner,throwable,null,result,future,complete,exceptionally,exception,utils,first,or,suppressed,inner,throwable,outer,throwable,else,if,outer,throwable,null,result,future,complete,exceptionally,outer,throwable,else,result,future,complete,null,return,result,future
FutureUtils -> public static CompletableFuture<Void> composeAfterwards( 			CompletableFuture<?> future, 			Supplier<CompletableFuture<?>> composedAction);1542282018;Run the given asynchronous action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion, the_asynchronous action's exception will be added to the initial exception.__@param future to wait for its completion_@param composedAction asynchronous action which is triggered after the future's completion_@return Future which is completed after the asynchronous action has completed. This future can contain_an exception if an error occurred in the given future or asynchronous action.;public static CompletableFuture<Void> composeAfterwards(_			CompletableFuture<?> future,_			Supplier<CompletableFuture<?>> composedAction) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenComplete(_			(Object outerIgnored, Throwable outerThrowable) -> {_				final CompletableFuture<?> composedActionFuture = composedAction.get()___				composedActionFuture.whenComplete(_					(Object innerIgnored, Throwable innerThrowable) -> {_						if (innerThrowable != null) {_							resultFuture.completeExceptionally(ExceptionUtils.firstOrSuppressed(innerThrowable, outerThrowable))__						} else if (outerThrowable != null) {_							resultFuture.completeExceptionally(outerThrowable)__						} else {_							resultFuture.complete(null)__						}_					})__			})___		return resultFuture__	};run,the,given,asynchronous,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,asynchronous,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,composed,action,asynchronous,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,asynchronous,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,asynchronous,action;public,static,completable,future,void,compose,afterwards,completable,future,future,supplier,completable,future,composed,action,final,completable,future,void,result,future,new,completable,future,future,when,complete,object,outer,ignored,throwable,outer,throwable,final,completable,future,composed,action,future,composed,action,get,composed,action,future,when,complete,object,inner,ignored,throwable,inner,throwable,if,inner,throwable,null,result,future,complete,exceptionally,exception,utils,first,or,suppressed,inner,throwable,outer,throwable,else,if,outer,throwable,null,result,future,complete,exceptionally,outer,throwable,else,result,future,complete,null,return,result,future
FutureUtils -> public static CompletableFuture<Void> composeAfterwards( 			CompletableFuture<?> future, 			Supplier<CompletableFuture<?>> composedAction);1547722029;Run the given asynchronous action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion, the_asynchronous action's exception will be added to the initial exception.__@param future to wait for its completion_@param composedAction asynchronous action which is triggered after the future's completion_@return Future which is completed after the asynchronous action has completed. This future can contain_an exception if an error occurred in the given future or asynchronous action.;public static CompletableFuture<Void> composeAfterwards(_			CompletableFuture<?> future,_			Supplier<CompletableFuture<?>> composedAction) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenComplete(_			(Object outerIgnored, Throwable outerThrowable) -> {_				final CompletableFuture<?> composedActionFuture = composedAction.get()___				composedActionFuture.whenComplete(_					(Object innerIgnored, Throwable innerThrowable) -> {_						if (innerThrowable != null) {_							resultFuture.completeExceptionally(ExceptionUtils.firstOrSuppressed(innerThrowable, outerThrowable))__						} else if (outerThrowable != null) {_							resultFuture.completeExceptionally(outerThrowable)__						} else {_							resultFuture.complete(null)__						}_					})__			})___		return resultFuture__	};run,the,given,asynchronous,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,asynchronous,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,composed,action,asynchronous,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,asynchronous,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,asynchronous,action;public,static,completable,future,void,compose,afterwards,completable,future,future,supplier,completable,future,composed,action,final,completable,future,void,result,future,new,completable,future,future,when,complete,object,outer,ignored,throwable,outer,throwable,final,completable,future,composed,action,future,composed,action,get,composed,action,future,when,complete,object,inner,ignored,throwable,inner,throwable,if,inner,throwable,null,result,future,complete,exceptionally,exception,utils,first,or,suppressed,inner,throwable,outer,throwable,else,if,outer,throwable,null,result,future,complete,exceptionally,outer,throwable,else,result,future,complete,null,return,result,future
FutureUtils -> public static CompletableFuture<Void> composeAfterwards( 			CompletableFuture<?> future, 			Supplier<CompletableFuture<?>> composedAction);1549365080;Run the given asynchronous action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion, the_asynchronous action's exception will be added to the initial exception.__@param future to wait for its completion_@param composedAction asynchronous action which is triggered after the future's completion_@return Future which is completed after the asynchronous action has completed. This future can contain_an exception if an error occurred in the given future or asynchronous action.;public static CompletableFuture<Void> composeAfterwards(_			CompletableFuture<?> future,_			Supplier<CompletableFuture<?>> composedAction) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenComplete(_			(Object outerIgnored, Throwable outerThrowable) -> {_				final CompletableFuture<?> composedActionFuture = composedAction.get()___				composedActionFuture.whenComplete(_					(Object innerIgnored, Throwable innerThrowable) -> {_						if (innerThrowable != null) {_							resultFuture.completeExceptionally(ExceptionUtils.firstOrSuppressed(innerThrowable, outerThrowable))__						} else if (outerThrowable != null) {_							resultFuture.completeExceptionally(outerThrowable)__						} else {_							resultFuture.complete(null)__						}_					})__			})___		return resultFuture__	};run,the,given,asynchronous,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,asynchronous,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,composed,action,asynchronous,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,asynchronous,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,asynchronous,action;public,static,completable,future,void,compose,afterwards,completable,future,future,supplier,completable,future,composed,action,final,completable,future,void,result,future,new,completable,future,future,when,complete,object,outer,ignored,throwable,outer,throwable,final,completable,future,composed,action,future,composed,action,get,composed,action,future,when,complete,object,inner,ignored,throwable,inner,throwable,if,inner,throwable,null,result,future,complete,exceptionally,exception,utils,first,or,suppressed,inner,throwable,outer,throwable,else,if,outer,throwable,null,result,future,complete,exceptionally,outer,throwable,else,result,future,complete,null,return,result,future
FutureUtils -> public static CompletableFuture<Void> composeAfterwards( 			CompletableFuture<?> future, 			Supplier<CompletableFuture<?>> composedAction);1550220073;Run the given asynchronous action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion, the_asynchronous action's exception will be added to the initial exception.__@param future to wait for its completion_@param composedAction asynchronous action which is triggered after the future's completion_@return Future which is completed after the asynchronous action has completed. This future can contain_an exception if an error occurred in the given future or asynchronous action.;public static CompletableFuture<Void> composeAfterwards(_			CompletableFuture<?> future,_			Supplier<CompletableFuture<?>> composedAction) {_		final CompletableFuture<Void> resultFuture = new CompletableFuture<>()___		future.whenComplete(_			(Object outerIgnored, Throwable outerThrowable) -> {_				final CompletableFuture<?> composedActionFuture = composedAction.get()___				composedActionFuture.whenComplete(_					(Object innerIgnored, Throwable innerThrowable) -> {_						if (innerThrowable != null) {_							resultFuture.completeExceptionally(ExceptionUtils.firstOrSuppressed(innerThrowable, outerThrowable))__						} else if (outerThrowable != null) {_							resultFuture.completeExceptionally(outerThrowable)__						} else {_							resultFuture.complete(null)__						}_					})__			})___		return resultFuture__	};run,the,given,asynchronous,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,asynchronous,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,composed,action,asynchronous,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,asynchronous,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,asynchronous,action;public,static,completable,future,void,compose,afterwards,completable,future,future,supplier,completable,future,composed,action,final,completable,future,void,result,future,new,completable,future,future,when,complete,object,outer,ignored,throwable,outer,throwable,final,completable,future,composed,action,future,composed,action,get,composed,action,future,when,complete,object,inner,ignored,throwable,inner,throwable,if,inner,throwable,null,result,future,complete,exceptionally,exception,utils,first,or,suppressed,inner,throwable,outer,throwable,else,if,outer,throwable,null,result,future,complete,exceptionally,outer,throwable,else,result,future,complete,null,return,result,future
FutureUtils -> public static <T> Future<T> retry( 		final Callable<Future<T>> operation, 		final int retries, 		final Executor executor);1477989375;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> Future<T> retry(_		final Callable<Future<T>> operation,_		final int retries,_		final Executor executor) {__		Future<T> operationResultFuture___		try {_			operationResultFuture = operation.call()__		} catch (Exception e) {_			return FlinkCompletableFuture.completedExceptionally(_				new RetryException("Could not execute the provided operation.", e))__		}__		return operationResultFuture.handleAsync(new BiFunction<T, Throwable, Future<T>>() {_			@Override_			public Future<T> apply(T t, Throwable throwable) {_				if (throwable != null) {_					if (retries > 0) {_						return retry(operation, retries - 1, executor)__					} else {_						return FlinkCompletableFuture.completedExceptionally(_							new RetryException("Could not complete the operation. Number of retries " +_								"has been exhausted.", throwable))__					}_				} else {_					return FlinkCompletableFuture.completed(t)__				}_			}_		}, executor)_		.thenCompose(new ApplyFunction<Future<T>, Future<T>>() {_			@Override_			public Future<T> apply(Future<T> value) {_				return value__			}_		})__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,future,t,retry,final,callable,future,t,operation,final,int,retries,final,executor,executor,future,t,operation,result,future,try,operation,result,future,operation,call,catch,exception,e,return,flink,completable,future,completed,exceptionally,new,retry,exception,could,not,execute,the,provided,operation,e,return,operation,result,future,handle,async,new,bi,function,t,throwable,future,t,override,public,future,t,apply,t,t,throwable,throwable,if,throwable,null,if,retries,0,return,retry,operation,retries,1,executor,else,return,flink,completable,future,completed,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,return,flink,completable,future,completed,t,executor,then,compose,new,apply,function,future,t,future,t,override,public,future,t,apply,future,t,value,return,value
FutureUtils -> public static <T> Future<T> retry( 		final Callable<Future<T>> operation, 		final int retries, 		final Executor executor);1487548884;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> Future<T> retry(_		final Callable<Future<T>> operation,_		final int retries,_		final Executor executor) {__		Future<T> operationResultFuture___		try {_			operationResultFuture = operation.call()__		} catch (Exception e) {_			return FlinkCompletableFuture.completedExceptionally(_				new RetryException("Could not execute the provided operation.", e))__		}__		return operationResultFuture.handleAsync(new BiFunction<T, Throwable, Future<T>>() {_			@Override_			public Future<T> apply(T t, Throwable throwable) {_				if (throwable != null) {_					if (retries > 0) {_						return retry(operation, retries - 1, executor)__					} else {_						return FlinkCompletableFuture.completedExceptionally(_							new RetryException("Could not complete the operation. Number of retries " +_								"has been exhausted.", throwable))__					}_				} else {_					return FlinkCompletableFuture.completed(t)__				}_			}_		}, executor)_		.thenCompose(new ApplyFunction<Future<T>, Future<T>>() {_			@Override_			public Future<T> apply(Future<T> value) {_				return value__			}_		})__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,future,t,retry,final,callable,future,t,operation,final,int,retries,final,executor,executor,future,t,operation,result,future,try,operation,result,future,operation,call,catch,exception,e,return,flink,completable,future,completed,exceptionally,new,retry,exception,could,not,execute,the,provided,operation,e,return,operation,result,future,handle,async,new,bi,function,t,throwable,future,t,override,public,future,t,apply,t,t,throwable,throwable,if,throwable,null,if,retries,0,return,retry,operation,retries,1,executor,else,return,flink,completable,future,completed,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,return,flink,completable,future,completed,t,executor,then,compose,new,apply,function,future,t,future,t,override,public,future,t,apply,future,t,value,return,value
FutureUtils -> public static <T> Future<T> retry( 		final Callable<Future<T>> operation, 		final int retries, 		final Executor executor);1495001903;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> Future<T> retry(_		final Callable<Future<T>> operation,_		final int retries,_		final Executor executor) {__		Future<T> operationResultFuture___		try {_			operationResultFuture = operation.call()__		} catch (Exception e) {_			return FlinkCompletableFuture.completedExceptionally(_				new RetryException("Could not execute the provided operation.", e))__		}__		return operationResultFuture.handleAsync(new BiFunction<T, Throwable, Future<T>>() {_			@Override_			public Future<T> apply(T t, Throwable throwable) {_				if (throwable != null) {_					if (retries > 0) {_						return retry(operation, retries - 1, executor)__					} else {_						return FlinkCompletableFuture.completedExceptionally(_							new RetryException("Could not complete the operation. Number of retries " +_								"has been exhausted.", throwable))__					}_				} else {_					return FlinkCompletableFuture.completed(t)__				}_			}_		}, executor)_		.thenCompose(new ApplyFunction<Future<T>, Future<T>>() {_			@Override_			public Future<T> apply(Future<T> value) {_				return value__			}_		})__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,future,t,retry,final,callable,future,t,operation,final,int,retries,final,executor,executor,future,t,operation,result,future,try,operation,result,future,operation,call,catch,exception,e,return,flink,completable,future,completed,exceptionally,new,retry,exception,could,not,execute,the,provided,operation,e,return,operation,result,future,handle,async,new,bi,function,t,throwable,future,t,override,public,future,t,apply,t,t,throwable,throwable,if,throwable,null,if,retries,0,return,retry,operation,retries,1,executor,else,return,flink,completable,future,completed,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,return,flink,completable,future,completed,t,executor,then,compose,new,apply,function,future,t,future,t,override,public,future,t,apply,future,t,value,return,value
FutureUtils -> public static <T> Future<T> retry( 		final Callable<Future<T>> operation, 		final int retries, 		final Executor executor);1501587025;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> Future<T> retry(_		final Callable<Future<T>> operation,_		final int retries,_		final Executor executor) {__		Future<T> operationResultFuture___		try {_			operationResultFuture = operation.call()__		} catch (Exception e) {_			return FlinkCompletableFuture.completedExceptionally(_				new RetryException("Could not execute the provided operation.", e))__		}__		return operationResultFuture.handleAsync(new BiFunction<T, Throwable, Future<T>>() {_			@Override_			public Future<T> apply(T t, Throwable throwable) {_				if (throwable != null) {_					if (retries > 0) {_						return retry(operation, retries - 1, executor)__					} else {_						return FlinkCompletableFuture.completedExceptionally(_							new RetryException("Could not complete the operation. Number of retries " +_								"has been exhausted.", throwable))__					}_				} else {_					return FlinkCompletableFuture.completed(t)__				}_			}_		}, executor)_		.thenCompose(new ApplyFunction<Future<T>, Future<T>>() {_			@Override_			public Future<T> apply(Future<T> value) {_				return value__			}_		})__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,future,t,retry,final,callable,future,t,operation,final,int,retries,final,executor,executor,future,t,operation,result,future,try,operation,result,future,operation,call,catch,exception,e,return,flink,completable,future,completed,exceptionally,new,retry,exception,could,not,execute,the,provided,operation,e,return,operation,result,future,handle,async,new,bi,function,t,throwable,future,t,override,public,future,t,apply,t,t,throwable,throwable,if,throwable,null,if,retries,0,return,retry,operation,retries,1,executor,else,return,flink,completable,future,completed,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,return,flink,completable,future,completed,t,executor,then,compose,new,apply,function,future,t,future,t,override,public,future,t,apply,future,t,value,return,value
FutureUtils -> public static <T> Future<T> retry( 		final Callable<Future<T>> operation, 		final int retries, 		final Executor executor);1501620731;Retry the given operation the given number of times in case of a failure.__@param operation to executed_@param retries if the operation failed_@param executor to use to run the futures_@param <T> type of the result_@return Future containing either the result of the operation or a {@link RetryException};public static <T> Future<T> retry(_		final Callable<Future<T>> operation,_		final int retries,_		final Executor executor) {__		Future<T> operationResultFuture___		try {_			operationResultFuture = operation.call()__		} catch (Exception e) {_			return FlinkCompletableFuture.completedExceptionally(_				new RetryException("Could not execute the provided operation.", e))__		}__		return operationResultFuture.handleAsync(new BiFunction<T, Throwable, Future<T>>() {_			@Override_			public Future<T> apply(T t, Throwable throwable) {_				if (throwable != null) {_					if (retries > 0) {_						return retry(operation, retries - 1, executor)__					} else {_						return FlinkCompletableFuture.completedExceptionally(_							new RetryException("Could not complete the operation. Number of retries " +_								"has been exhausted.", throwable))__					}_				} else {_					return FlinkCompletableFuture.completed(t)__				}_			}_		}, executor)_		.thenCompose(new ApplyFunction<Future<T>, Future<T>>() {_			@Override_			public Future<T> apply(Future<T> value) {_				return value__			}_		})__	};retry,the,given,operation,the,given,number,of,times,in,case,of,a,failure,param,operation,to,executed,param,retries,if,the,operation,failed,param,executor,to,use,to,run,the,futures,param,t,type,of,the,result,return,future,containing,either,the,result,of,the,operation,or,a,link,retry,exception;public,static,t,future,t,retry,final,callable,future,t,operation,final,int,retries,final,executor,executor,future,t,operation,result,future,try,operation,result,future,operation,call,catch,exception,e,return,flink,completable,future,completed,exceptionally,new,retry,exception,could,not,execute,the,provided,operation,e,return,operation,result,future,handle,async,new,bi,function,t,throwable,future,t,override,public,future,t,apply,t,t,throwable,throwable,if,throwable,null,if,retries,0,return,retry,operation,retries,1,executor,else,return,flink,completable,future,completed,exceptionally,new,retry,exception,could,not,complete,the,operation,number,of,retries,has,been,exhausted,throwable,else,return,flink,completable,future,completed,t,executor,then,compose,new,apply,function,future,t,future,t,override,public,future,t,apply,future,t,value,return,value
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1502452094;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1504685932;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1507728812;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1509404932;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1509404933;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1516971024;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1516971025;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1518862304;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1519052657;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1519052657;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1519481114;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1520781441;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1521741862;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1521804759;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1522339661;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1532383539;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1532383539;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1537783992;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1538395078;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1539176686;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1542282018;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1547722029;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1549365080;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static Time toTime(FiniteDuration finiteDuration);1550220073;Converts {@link FiniteDuration} into Flink time.__@param finiteDuration to convert into Flink time_@return Flink time with the length of the given finite duration;public static Time toTime(FiniteDuration finiteDuration) {_		return Time.milliseconds(finiteDuration.toMillis())__	};converts,link,finite,duration,into,flink,time,param,finite,duration,to,convert,into,flink,time,return,flink,time,with,the,length,of,the,given,finite,duration;public,static,time,to,time,finite,duration,finite,duration,return,time,milliseconds,finite,duration,to,millis
FutureUtils -> public static <IN> CompletableFuture<IN> whenCompleteAsyncIfNotDone( 		CompletableFuture<IN> completableFuture, 		Executor executor, 		BiConsumer<? super IN, ? super Throwable> whenCompleteFun);1549365080;This function takes a {@link CompletableFuture} and a bi-consumer to call on completion of this future. If the_input future is already done, this function returns {@link CompletableFuture#whenComplete(BiConsumer)}._Otherwise, the return value is {@link CompletableFuture#whenCompleteAsync(BiConsumer, Executor)} with the given_executor.__@param completableFuture the completable future for which we want to call #whenComplete._@param executor the executor to run the whenComplete function if the future is not yet done._@param whenCompleteFun the bi-consumer function to call when the future is completed._@param <IN> type of the input future._@return the new completion stage.;public static <IN> CompletableFuture<IN> whenCompleteAsyncIfNotDone(_		CompletableFuture<IN> completableFuture,_		Executor executor,_		BiConsumer<? super IN, ? super Throwable> whenCompleteFun) {_		return completableFuture.isDone() ?_			completableFuture.whenComplete(whenCompleteFun) :_			completableFuture.whenCompleteAsync(whenCompleteFun, executor)__	};this,function,takes,a,link,completable,future,and,a,bi,consumer,to,call,on,completion,of,this,future,if,the,input,future,is,already,done,this,function,returns,link,completable,future,when,complete,bi,consumer,otherwise,the,return,value,is,link,completable,future,when,complete,async,bi,consumer,executor,with,the,given,executor,param,completable,future,the,completable,future,for,which,we,want,to,call,when,complete,param,executor,the,executor,to,run,the,when,complete,function,if,the,future,is,not,yet,done,param,when,complete,fun,the,bi,consumer,function,to,call,when,the,future,is,completed,param,in,type,of,the,input,future,return,the,new,completion,stage;public,static,in,completable,future,in,when,complete,async,if,not,done,completable,future,in,completable,future,executor,executor,bi,consumer,super,in,super,throwable,when,complete,fun,return,completable,future,is,done,completable,future,when,complete,when,complete,fun,completable,future,when,complete,async,when,complete,fun,executor
FutureUtils -> public static <IN> CompletableFuture<IN> whenCompleteAsyncIfNotDone( 		CompletableFuture<IN> completableFuture, 		Executor executor, 		BiConsumer<? super IN, ? super Throwable> whenCompleteFun);1550220073;This function takes a {@link CompletableFuture} and a bi-consumer to call on completion of this future. If the_input future is already done, this function returns {@link CompletableFuture#whenComplete(BiConsumer)}._Otherwise, the return value is {@link CompletableFuture#whenCompleteAsync(BiConsumer, Executor)} with the given_executor.__@param completableFuture the completable future for which we want to call #whenComplete._@param executor the executor to run the whenComplete function if the future is not yet done._@param whenCompleteFun the bi-consumer function to call when the future is completed._@param <IN> type of the input future._@return the new completion stage.;public static <IN> CompletableFuture<IN> whenCompleteAsyncIfNotDone(_		CompletableFuture<IN> completableFuture,_		Executor executor,_		BiConsumer<? super IN, ? super Throwable> whenCompleteFun) {_		return completableFuture.isDone() ?_			completableFuture.whenComplete(whenCompleteFun) :_			completableFuture.whenCompleteAsync(whenCompleteFun, executor)__	};this,function,takes,a,link,completable,future,and,a,bi,consumer,to,call,on,completion,of,this,future,if,the,input,future,is,already,done,this,function,returns,link,completable,future,when,complete,bi,consumer,otherwise,the,return,value,is,link,completable,future,when,complete,async,bi,consumer,executor,with,the,given,executor,param,completable,future,the,completable,future,for,which,we,want,to,call,when,complete,param,executor,the,executor,to,run,the,when,complete,function,if,the,future,is,not,yet,done,param,when,complete,fun,the,bi,consumer,function,to,call,when,the,future,is,completed,param,in,type,of,the,input,future,return,the,new,completion,stage;public,static,in,completable,future,in,when,complete,async,if,not,done,completable,future,in,completable,future,executor,executor,bi,consumer,super,in,super,throwable,when,complete,fun,return,completable,future,is,done,completable,future,when,complete,when,complete,fun,completable,future,when,complete,async,when,complete,fun,executor
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1509404933;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___		future.whenComplete((T value, Throwable throwable) -> {_			if (!timeoutFuture.isDone()) {_				timeoutFuture.cancel(false)__			}_		})___		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1516971024;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1516971025;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1518862304;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1519052657;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1519052657;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1519481114;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1520781441;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1521741862;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1521804759;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1522339661;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1532383539;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1532383539;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1537783992;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1538395078;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1539176686;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1542282018;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1547722029;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1549365080;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		if (!future.isDone()) {_			final ScheduledFuture<?> timeoutFuture = Delayer.delay(new Timeout(future), timeout, timeUnit)___			future.whenComplete((T value, Throwable throwable) -> {_				if (!timeoutFuture.isDone()) {_					timeoutFuture.cancel(false)__				}_			})__		}__		return future__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,if,future,is,done,final,scheduled,future,timeout,future,delayer,delay,new,timeout,future,timeout,time,unit,future,when,complete,t,value,throwable,throwable,if,timeout,future,is,done,timeout,future,cancel,false,return,future
FutureUtils -> public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit);1550220073;Times the given future out after the timeout.__@param future to time out_@param timeout after which the given future is timed out_@param timeUnit time unit of the timeout_@param <T> type of the given future_@return The timeout enriched future;public static <T> CompletableFuture<T> orTimeout(CompletableFuture<T> future, long timeout, TimeUnit timeUnit) {_		return orTimeout(future, timeout, timeUnit, Executors.directExecutor())__	};times,the,given,future,out,after,the,timeout,param,future,to,time,out,param,timeout,after,which,the,given,future,is,timed,out,param,time,unit,time,unit,of,the,timeout,param,t,type,of,the,given,future,return,the,timeout,enriched,future;public,static,t,completable,future,t,or,timeout,completable,future,t,future,long,timeout,time,unit,time,unit,return,or,timeout,future,timeout,time,unit,executors,direct,executor
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1501761022;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1502355550;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1502452094;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1504685932;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1507728812;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1509404932;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1509404933;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1516971024;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1516971025;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1518862304;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1519052657;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1519052657;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1519481114;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1520781441;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1521741862;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1521804759;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1522339661;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1532383539;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1532383539;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1537783992;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1538395078;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1539176686;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1542282018;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1547722029;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1549365080;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T>CompletableFuture<T> completedExceptionally(Throwable cause);1550220073;Returns an exceptionally completed {@link CompletableFuture}.__@param cause to complete the future with_@param <T> type of the future_@return An exceptionally completed CompletableFuture;public static <T>CompletableFuture<T> completedExceptionally(Throwable cause) {_		CompletableFuture<T> result = new CompletableFuture<>()__		result.completeExceptionally(cause)___		return result__	};returns,an,exceptionally,completed,link,completable,future,param,cause,to,complete,the,future,with,param,t,type,of,the,future,return,an,exceptionally,completed,completable,future;public,static,t,completable,future,t,completed,exceptionally,throwable,cause,completable,future,t,result,new,completable,future,result,complete,exceptionally,cause,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1501761022;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1502355550;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1502452094;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1504685932;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1507728812;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1509404932;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1509404933;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1516971024;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1516971025;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1518862304;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1519052657;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1519052657;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1519481114;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1520781441;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) throws Throwable {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,throws,throwable,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1521741862;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1521804759;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1522339661;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1532383539;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1532383539;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1537783992;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture);1538395078;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@return Java 8 CompletableFuture;public static <T> CompletableFuture<T> toJava(Future<T> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<T>() {_			@Override_			public void onComplete(Throwable failure, T success) {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,return,java,8,completable,future;public,static,t,completable,future,t,to,java,future,t,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,t,override,public,void,on,complete,throwable,failure,t,success,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <IN, OUT> CompletableFuture<OUT> thenApplyAsyncIfNotDone( 		CompletableFuture<IN> completableFuture, 		Executor executor, 		Function<? super IN, ? extends OUT> applyFun);1549365080;This function takes a {@link CompletableFuture} and a function to apply to this future. If the input future_is already done, this function returns {@link CompletableFuture#thenApply(Function)}. Otherwise, the return_value is {@link CompletableFuture#thenApplyAsync(Function, Executor)} with the given executor.__@param completableFuture the completable future for which we want to apply._@param executor the executor to run the apply function if the future is not yet done._@param applyFun the function to apply._@param <IN> type of the input future._@param <OUT> type of the output future._@return a completable future that is applying the given function to the input future.;public static <IN, OUT> CompletableFuture<OUT> thenApplyAsyncIfNotDone(_		CompletableFuture<IN> completableFuture,_		Executor executor,_		Function<? super IN, ? extends OUT> applyFun) {_		return completableFuture.isDone() ?_			completableFuture.thenApply(applyFun) :_			completableFuture.thenApplyAsync(applyFun, executor)__	};this,function,takes,a,link,completable,future,and,a,function,to,apply,to,this,future,if,the,input,future,is,already,done,this,function,returns,link,completable,future,then,apply,function,otherwise,the,return,value,is,link,completable,future,then,apply,async,function,executor,with,the,given,executor,param,completable,future,the,completable,future,for,which,we,want,to,apply,param,executor,the,executor,to,run,the,apply,function,if,the,future,is,not,yet,done,param,apply,fun,the,function,to,apply,param,in,type,of,the,input,future,param,out,type,of,the,output,future,return,a,completable,future,that,is,applying,the,given,function,to,the,input,future;public,static,in,out,completable,future,out,then,apply,async,if,not,done,completable,future,in,completable,future,executor,executor,function,super,in,extends,out,apply,fun,return,completable,future,is,done,completable,future,then,apply,apply,fun,completable,future,then,apply,async,apply,fun,executor
FutureUtils -> public static <IN, OUT> CompletableFuture<OUT> thenApplyAsyncIfNotDone( 		CompletableFuture<IN> completableFuture, 		Executor executor, 		Function<? super IN, ? extends OUT> applyFun);1550220073;This function takes a {@link CompletableFuture} and a function to apply to this future. If the input future_is already done, this function returns {@link CompletableFuture#thenApply(Function)}. Otherwise, the return_value is {@link CompletableFuture#thenApplyAsync(Function, Executor)} with the given executor.__@param completableFuture the completable future for which we want to apply._@param executor the executor to run the apply function if the future is not yet done._@param applyFun the function to apply._@param <IN> type of the input future._@param <OUT> type of the output future._@return a completable future that is applying the given function to the input future.;public static <IN, OUT> CompletableFuture<OUT> thenApplyAsyncIfNotDone(_		CompletableFuture<IN> completableFuture,_		Executor executor,_		Function<? super IN, ? extends OUT> applyFun) {_		return completableFuture.isDone() ?_			completableFuture.thenApply(applyFun) :_			completableFuture.thenApplyAsync(applyFun, executor)__	};this,function,takes,a,link,completable,future,and,a,function,to,apply,to,this,future,if,the,input,future,is,already,done,this,function,returns,link,completable,future,then,apply,function,otherwise,the,return,value,is,link,completable,future,then,apply,async,function,executor,with,the,given,executor,param,completable,future,the,completable,future,for,which,we,want,to,apply,param,executor,the,executor,to,run,the,apply,function,if,the,future,is,not,yet,done,param,apply,fun,the,function,to,apply,param,in,type,of,the,input,future,param,out,type,of,the,output,future,return,a,completable,future,that,is,applying,the,given,function,to,the,input,future;public,static,in,out,completable,future,out,then,apply,async,if,not,done,completable,future,in,completable,future,executor,executor,function,super,in,extends,out,apply,fun,return,completable,future,is,done,completable,future,then,apply,apply,fun,completable,future,then,apply,async,apply,fun,executor
FutureUtils -> ConjunctFuture -> int getNumFuturesCompleted()_;1487548884;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> int getNumFuturesCompleted()_;1495001903;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> int getNumFuturesCompleted()_;1501587025;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;int,get,num,futures,completed
FutureUtils -> ConjunctFuture -> int getNumFuturesCompleted()_;1501620731;Gets the number of Futures in the conjunction that are already complete._@return The number of Futures in the conjunction that are already complete;int getNumFuturesCompleted()_;gets,the,number,of,futures,in,the,conjunction,that,are,already,complete,return,the,number,of,futures,in,the,conjunction,that,are,already,complete;int,get,num,futures,completed
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1501622876;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1501660289;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1501665499;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1501761022;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1502355550;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1502452094;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1504685932;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1507728812;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1509404932;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1509404933;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1516971024;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1516971025;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1518862304;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1519052657;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1519052657;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1519481114;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1520781441;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1521741862;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1521804759;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1522339661;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1532383539;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1532383539;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1537783992;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1538395078;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1539176686;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1542282018;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1547722029;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1549365080;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> WaitingConjunctFuture -> private void handleCompletedFuture(Object ignored, Throwable throwable);1550220073;Method which increments the atomic completion counter and completes or fails the WaitingFutureImpl.;private void handleCompletedFuture(Object ignored, Throwable throwable) {_			if (throwable == null) {_				if (numTotal == numCompleted.incrementAndGet()) {_					complete(null)__				}_			} else {_				completeExceptionally(throwable)__			}_		};method,which,increments,the,atomic,completion,counter,and,completes,or,fails,the,waiting,future,impl;private,void,handle,completed,future,object,ignored,throwable,throwable,if,throwable,null,if,num,total,num,completed,increment,and,get,complete,null,else,complete,exceptionally,throwable
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1516971025;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1518862304;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1519052657;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1519052657;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1519481114;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1520781441;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1521741862;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1521804759;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1522339661;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1532383539;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1532383539;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1537783992;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1538395078;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1539176686;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1542282018;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1547722029;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1549365080;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> public static <T> CompletableFuture<T> retryWithDelay( 			final Supplier<CompletableFuture<T>> operation, 			final int retries, 			final Time retryDelay, 			final Predicate<Throwable> retryPredicate, 			final ScheduledExecutor scheduledExecutor);1550220073;Retry the given operation with the given delay in between failures.__@param operation to retry_@param retries number of retries_@param retryDelay delay between retries_@param retryPredicate Predicate to test whether an exception is retryable_@param scheduledExecutor executor to be used for the retry operation_@param <T> type of the result_@return Future which retries the given operation a given amount of times and delays the retry in case of failures;public static <T> CompletableFuture<T> retryWithDelay(_			final Supplier<CompletableFuture<T>> operation,_			final int retries,_			final Time retryDelay,_			final Predicate<Throwable> retryPredicate,_			final ScheduledExecutor scheduledExecutor) {__		final CompletableFuture<T> resultFuture = new CompletableFuture<>()___		retryOperationWithDelay(_			resultFuture,_			operation,_			retries,_			retryDelay,_			retryPredicate,_			scheduledExecutor)___		return resultFuture__	};retry,the,given,operation,with,the,given,delay,in,between,failures,param,operation,to,retry,param,retries,number,of,retries,param,retry,delay,delay,between,retries,param,retry,predicate,predicate,to,test,whether,an,exception,is,retryable,param,scheduled,executor,executor,to,be,used,for,the,retry,operation,param,t,type,of,the,result,return,future,which,retries,the,given,operation,a,given,amount,of,times,and,delays,the,retry,in,case,of,failures;public,static,t,completable,future,t,retry,with,delay,final,supplier,completable,future,t,operation,final,int,retries,final,time,retry,delay,final,predicate,throwable,retry,predicate,final,scheduled,executor,scheduled,executor,final,completable,future,t,result,future,new,completable,future,retry,operation,with,delay,result,future,operation,retries,retry,delay,retry,predicate,scheduled,executor,return,result,future
FutureUtils -> @Deprecated 	public static <T> Future<T> toFlinkFuture(java.util.concurrent.CompletableFuture<T> javaFuture);1501620731;Converts a Java 8 {@link java.util.concurrent.CompletableFuture} into a Flink {@link Future}.__@param javaFuture to convert to a Flink future_@param <T> type of the future value_@return Flink future__@deprecated Will be removed once we completely remove Flink's futures;@Deprecated_	public static <T> Future<T> toFlinkFuture(java.util.concurrent.CompletableFuture<T> javaFuture) {_		FlinkCompletableFuture<T> result = new FlinkCompletableFuture<>()___		javaFuture.whenComplete(_			(value, throwable) -> {_				if (throwable == null) {_					result.complete(value)__				} else {_					result.completeExceptionally(throwable)__				}_			})___		return result__	};converts,a,java,8,link,java,util,concurrent,completable,future,into,a,flink,link,future,param,java,future,to,convert,to,a,flink,future,param,t,type,of,the,future,value,return,flink,future,deprecated,will,be,removed,once,we,completely,remove,flink,s,futures;deprecated,public,static,t,future,t,to,flink,future,java,util,concurrent,completable,future,t,java,future,flink,completable,future,t,result,new,flink,completable,future,java,future,when,complete,value,throwable,if,throwable,null,result,complete,value,else,result,complete,exceptionally,throwable,return,result
FutureUtils -> @Deprecated 	public static <T> Future<T> toFlinkFuture(java.util.concurrent.CompletableFuture<T> javaFuture);1501622876;Converts a Java 8 {@link java.util.concurrent.CompletableFuture} into a Flink {@link Future}.__@param javaFuture to convert to a Flink future_@param <T> type of the future value_@return Flink future__@deprecated Will be removed once we completely remove Flink's futures;@Deprecated_	public static <T> Future<T> toFlinkFuture(java.util.concurrent.CompletableFuture<T> javaFuture) {_		FlinkCompletableFuture<T> result = new FlinkCompletableFuture<>()___		javaFuture.whenComplete(_			(value, throwable) -> {_				if (throwable == null) {_					result.complete(value)__				} else {_					result.completeExceptionally(throwable)__				}_			})___		return result__	};converts,a,java,8,link,java,util,concurrent,completable,future,into,a,flink,link,future,param,java,future,to,convert,to,a,flink,future,param,t,type,of,the,future,value,return,flink,future,deprecated,will,be,removed,once,we,completely,remove,flink,s,futures;deprecated,public,static,t,future,t,to,flink,future,java,util,concurrent,completable,future,t,java,future,flink,completable,future,t,result,new,flink,completable,future,java,future,when,complete,value,throwable,if,throwable,null,result,complete,value,else,result,complete,exceptionally,throwable,return,result
FutureUtils -> @Deprecated 	public static <T> Future<T> toFlinkFuture(java.util.concurrent.CompletableFuture<T> javaFuture);1501660289;Converts a Java 8 {@link java.util.concurrent.CompletableFuture} into a Flink {@link Future}.__@param javaFuture to convert to a Flink future_@param <T> type of the future value_@return Flink future__@deprecated Will be removed once we completely remove Flink's futures;@Deprecated_	public static <T> Future<T> toFlinkFuture(java.util.concurrent.CompletableFuture<T> javaFuture) {_		FlinkCompletableFuture<T> result = new FlinkCompletableFuture<>()___		javaFuture.whenComplete(_			(value, throwable) -> {_				if (throwable == null) {_					result.complete(value)__				} else {_					result.completeExceptionally(throwable)__				}_			})___		return result__	};converts,a,java,8,link,java,util,concurrent,completable,future,into,a,flink,link,future,param,java,future,to,convert,to,a,flink,future,param,t,type,of,the,future,value,return,flink,future,deprecated,will,be,removed,once,we,completely,remove,flink,s,futures;deprecated,public,static,t,future,t,to,flink,future,java,util,concurrent,completable,future,t,java,future,flink,completable,future,t,result,new,flink,completable,future,java,future,when,complete,value,throwable,if,throwable,null,result,complete,value,else,result,complete,exceptionally,throwable,return,result
FutureUtils -> @Deprecated 	public static <T> Future<T> toFlinkFuture(java.util.concurrent.CompletableFuture<T> javaFuture);1501665499;Converts a Java 8 {@link java.util.concurrent.CompletableFuture} into a Flink {@link Future}.__@param javaFuture to convert to a Flink future_@param <T> type of the future value_@return Flink future__@deprecated Will be removed once we completely remove Flink's futures;@Deprecated_	public static <T> Future<T> toFlinkFuture(java.util.concurrent.CompletableFuture<T> javaFuture) {_		FlinkCompletableFuture<T> result = new FlinkCompletableFuture<>()___		javaFuture.whenComplete(_			(value, throwable) -> {_				if (throwable == null) {_					result.complete(value)__				} else {_					result.completeExceptionally(throwable)__				}_			})___		return result__	};converts,a,java,8,link,java,util,concurrent,completable,future,into,a,flink,link,future,param,java,future,to,convert,to,a,flink,future,param,t,type,of,the,future,value,return,flink,future,deprecated,will,be,removed,once,we,completely,remove,flink,s,futures;deprecated,public,static,t,future,t,to,flink,future,java,util,concurrent,completable,future,t,java,future,flink,completable,future,t,result,new,flink,completable,future,java,future,when,complete,value,throwable,if,throwable,null,result,complete,value,else,result,complete,exceptionally,throwable,return,result
FutureUtils -> public static <T, U extends T> CompletableFuture<T> toJava(Future<U> scalaFuture);1539176686;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@param <U> type of the original future_@return Java 8 CompletableFuture;public static <T, U extends T> CompletableFuture<T> toJava(Future<U> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<U>() {_			@Override_			public void onComplete(Throwable failure, U success) {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,param,u,type,of,the,original,future,return,java,8,completable,future;public,static,t,u,extends,t,completable,future,t,to,java,future,u,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,u,override,public,void,on,complete,throwable,failure,u,success,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T, U extends T> CompletableFuture<T> toJava(Future<U> scalaFuture);1542282018;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@param <U> type of the original future_@return Java 8 CompletableFuture;public static <T, U extends T> CompletableFuture<T> toJava(Future<U> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<U>() {_			@Override_			public void onComplete(Throwable failure, U success) {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,param,u,type,of,the,original,future,return,java,8,completable,future;public,static,t,u,extends,t,completable,future,t,to,java,future,u,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,u,override,public,void,on,complete,throwable,failure,u,success,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T, U extends T> CompletableFuture<T> toJava(Future<U> scalaFuture);1547722029;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@param <U> type of the original future_@return Java 8 CompletableFuture;public static <T, U extends T> CompletableFuture<T> toJava(Future<U> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<U>() {_			@Override_			public void onComplete(Throwable failure, U success) {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,param,u,type,of,the,original,future,return,java,8,completable,future;public,static,t,u,extends,t,completable,future,t,to,java,future,u,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,u,override,public,void,on,complete,throwable,failure,u,success,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T, U extends T> CompletableFuture<T> toJava(Future<U> scalaFuture);1549365080;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@param <U> type of the original future_@return Java 8 CompletableFuture;public static <T, U extends T> CompletableFuture<T> toJava(Future<U> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<U>() {_			@Override_			public void onComplete(Throwable failure, U success) {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,param,u,type,of,the,original,future,return,java,8,completable,future;public,static,t,u,extends,t,completable,future,t,to,java,future,u,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,u,override,public,void,on,complete,throwable,failure,u,success,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> public static <T, U extends T> CompletableFuture<T> toJava(Future<U> scalaFuture);1550220073;Converts a Scala {@link Future} to a {@link CompletableFuture}.__@param scalaFuture to convert to a Java 8 CompletableFuture_@param <T> type of the future value_@param <U> type of the original future_@return Java 8 CompletableFuture;public static <T, U extends T> CompletableFuture<T> toJava(Future<U> scalaFuture) {_		final CompletableFuture<T> result = new CompletableFuture<>()___		scalaFuture.onComplete(new OnComplete<U>() {_			@Override_			public void onComplete(Throwable failure, U success) {_				if (failure != null) {_					result.completeExceptionally(failure)__				} else {_					result.complete(success)__				}_			}_		}, Executors.directExecutionContext())___		return result__	};converts,a,scala,link,future,to,a,link,completable,future,param,scala,future,to,convert,to,a,java,8,completable,future,param,t,type,of,the,future,value,param,u,type,of,the,original,future,return,java,8,completable,future;public,static,t,u,extends,t,completable,future,t,to,java,future,u,scala,future,final,completable,future,t,result,new,completable,future,scala,future,on,complete,new,on,complete,u,override,public,void,on,complete,throwable,failure,u,success,if,failure,null,result,complete,exceptionally,failure,else,result,complete,success,executors,direct,execution,context,return,result
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1509404933;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			Preconditions.checkNotNull(runnable)__			Preconditions.checkNotNull(timeUnit)___			return delayer.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,preconditions,check,not,null,runnable,preconditions,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1516971024;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			Preconditions.checkNotNull(runnable)__			Preconditions.checkNotNull(timeUnit)___			return delayer.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,preconditions,check,not,null,runnable,preconditions,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1516971025;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			Preconditions.checkNotNull(runnable)__			Preconditions.checkNotNull(timeUnit)___			return delayer.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,preconditions,check,not,null,runnable,preconditions,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1518862304;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			Preconditions.checkNotNull(runnable)__			Preconditions.checkNotNull(timeUnit)___			return delayer.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,preconditions,check,not,null,runnable,preconditions,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1519052657;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			Preconditions.checkNotNull(runnable)__			Preconditions.checkNotNull(timeUnit)___			return delayer.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,preconditions,check,not,null,runnable,preconditions,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1519052657;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			Preconditions.checkNotNull(runnable)__			Preconditions.checkNotNull(timeUnit)___			return delayer.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,preconditions,check,not,null,runnable,preconditions,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1519481114;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			Preconditions.checkNotNull(runnable)__			Preconditions.checkNotNull(timeUnit)___			return delayer.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,preconditions,check,not,null,runnable,preconditions,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1520781441;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			Preconditions.checkNotNull(runnable)__			Preconditions.checkNotNull(timeUnit)___			return delayer.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,preconditions,check,not,null,runnable,preconditions,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1521741862;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			Preconditions.checkNotNull(runnable)__			Preconditions.checkNotNull(timeUnit)___			return delayer.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,preconditions,check,not,null,runnable,preconditions,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1521804759;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			Preconditions.checkNotNull(runnable)__			Preconditions.checkNotNull(timeUnit)___			return delayer.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,preconditions,check,not,null,runnable,preconditions,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1522339661;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			Preconditions.checkNotNull(runnable)__			Preconditions.checkNotNull(timeUnit)___			return delayer.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,preconditions,check,not,null,runnable,preconditions,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1532383539;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			Preconditions.checkNotNull(runnable)__			Preconditions.checkNotNull(timeUnit)___			return delayer.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,preconditions,check,not,null,runnable,preconditions,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1532383539;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			checkNotNull(runnable)__			checkNotNull(timeUnit)___			return DELAYER.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,check,not,null,runnable,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1537783992;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			checkNotNull(runnable)__			checkNotNull(timeUnit)___			return DELAYER.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,check,not,null,runnable,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1538395078;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			checkNotNull(runnable)__			checkNotNull(timeUnit)___			return DELAYER.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,check,not,null,runnable,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1539176686;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			checkNotNull(runnable)__			checkNotNull(timeUnit)___			return DELAYER.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,check,not,null,runnable,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1542282018;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			checkNotNull(runnable)__			checkNotNull(timeUnit)___			return DELAYER.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,check,not,null,runnable,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1547722029;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			checkNotNull(runnable)__			checkNotNull(timeUnit)___			return DELAYER.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,check,not,null,runnable,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1549365080;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			checkNotNull(runnable)__			checkNotNull(timeUnit)___			return DELAYER.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,check,not,null,runnable,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> Delayer -> private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit);1550220073;Delay the given action by the given delay.__@param runnable to execute after the given delay_@param delay after which to execute the runnable_@param timeUnit time unit of the delay_@return Future of the scheduled action;private static ScheduledFuture<?> delay(Runnable runnable, long delay, TimeUnit timeUnit) {_			checkNotNull(runnable)__			checkNotNull(timeUnit)___			return DELAYER.schedule(runnable, delay, timeUnit)__		};delay,the,given,action,by,the,given,delay,param,runnable,to,execute,after,the,given,delay,param,delay,after,which,to,execute,the,runnable,param,time,unit,time,unit,of,the,delay,return,future,of,the,scheduled,action;private,static,scheduled,future,delay,runnable,runnable,long,delay,time,unit,time,unit,check,not,null,runnable,check,not,null,time,unit,return,delayer,schedule,runnable,delay,time,unit
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1519052657;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1519481114;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1520781441;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1521741862;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1521804759;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1522339661;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1532383539;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1532383539;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1537783992;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1538395078;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1539176686;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1542282018;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1547722029;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1549365080;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable);1550220073;Run the given action after the completion of the given future. The given future can be_completed normally or exceptionally. In case of an exceptional completion the, the_action's exception will be added to the initial exception.__@param future to wait for its completion_@param runnable action which is triggered after the future's completion_@return Future which is completed after the action has completed. This future can contain an exception,_if an error occurred in the given future or action.;public static CompletableFuture<Void> runAfterwardsAsync(CompletableFuture<?> future, RunnableWithException runnable) {_		return runAfterwardsAsync(future, runnable, ForkJoinPool.commonPool())__	};run,the,given,action,after,the,completion,of,the,given,future,the,given,future,can,be,completed,normally,or,exceptionally,in,case,of,an,exceptional,completion,the,the,action,s,exception,will,be,added,to,the,initial,exception,param,future,to,wait,for,its,completion,param,runnable,action,which,is,triggered,after,the,future,s,completion,return,future,which,is,completed,after,the,action,has,completed,this,future,can,contain,an,exception,if,an,error,occurred,in,the,given,future,or,action;public,static,completable,future,void,run,afterwards,async,completable,future,future,runnable,with,exception,runnable,return,run,afterwards,async,future,runnable,fork,join,pool,common,pool
FutureUtils -> public static <T> T runIfNotDoneAndGet(RunnableFuture<T> future) throws ExecutionException, InterruptedException;1547722029;Run the given {@code RunnableFuture} if it is not done, and then retrieves its result._@param future to run if not done and get_@param <T> type of the result_@return the result after running the future_@throws ExecutionException if a problem occurred_@throws InterruptedException if the current thread has been interrupted;public static <T> T runIfNotDoneAndGet(RunnableFuture<T> future) throws ExecutionException, InterruptedException {__		if (null == future) {_			return null__		}__		if (!future.isDone()) {_			future.run()__		}__		return future.get()__	};run,the,given,code,runnable,future,if,it,is,not,done,and,then,retrieves,its,result,param,future,to,run,if,not,done,and,get,param,t,type,of,the,result,return,the,result,after,running,the,future,throws,execution,exception,if,a,problem,occurred,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;public,static,t,t,run,if,not,done,and,get,runnable,future,t,future,throws,execution,exception,interrupted,exception,if,null,future,return,null,if,future,is,done,future,run,return,future,get
FutureUtils -> public static <T> T runIfNotDoneAndGet(RunnableFuture<T> future) throws ExecutionException, InterruptedException;1549365080;Run the given {@code RunnableFuture} if it is not done, and then retrieves its result._@param future to run if not done and get_@param <T> type of the result_@return the result after running the future_@throws ExecutionException if a problem occurred_@throws InterruptedException if the current thread has been interrupted;public static <T> T runIfNotDoneAndGet(RunnableFuture<T> future) throws ExecutionException, InterruptedException {__		if (null == future) {_			return null__		}__		if (!future.isDone()) {_			future.run()__		}__		return future.get()__	};run,the,given,code,runnable,future,if,it,is,not,done,and,then,retrieves,its,result,param,future,to,run,if,not,done,and,get,param,t,type,of,the,result,return,the,result,after,running,the,future,throws,execution,exception,if,a,problem,occurred,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;public,static,t,t,run,if,not,done,and,get,runnable,future,t,future,throws,execution,exception,interrupted,exception,if,null,future,return,null,if,future,is,done,future,run,return,future,get
FutureUtils -> public static <T> T runIfNotDoneAndGet(RunnableFuture<T> future) throws ExecutionException, InterruptedException;1550220073;Run the given {@code RunnableFuture} if it is not done, and then retrieves its result._@param future to run if not done and get_@param <T> type of the result_@return the result after running the future_@throws ExecutionException if a problem occurred_@throws InterruptedException if the current thread has been interrupted;public static <T> T runIfNotDoneAndGet(RunnableFuture<T> future) throws ExecutionException, InterruptedException {__		if (null == future) {_			return null__		}__		if (!future.isDone()) {_			future.run()__		}__		return future.get()__	};run,the,given,code,runnable,future,if,it,is,not,done,and,then,retrieves,its,result,param,future,to,run,if,not,done,and,get,param,t,type,of,the,result,return,the,result,after,running,the,future,throws,execution,exception,if,a,problem,occurred,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;public,static,t,t,run,if,not,done,and,get,runnable,future,t,future,throws,execution,exception,interrupted,exception,if,null,future,return,null,if,future,is,done,future,run,return,future,get
