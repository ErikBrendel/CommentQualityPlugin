# id;timestamp;commentText;codeText;commentWords;codeWords
ZooKeeperStateHandleStore -> public Collection<String> getAllPaths() throws Exception;1480437068;Return a list of all valid paths for state handles.__@return List of valid state handle paths in ZooKeeper_@throws Exception if a ZooKeeper operation fails;public Collection<String> getAllPaths() throws Exception {_		final String path = "/"___		while(true) {_			Stat stat = client.checkExists().forPath(path)___			if (stat == null) {_				return Collections.emptyList()__			} else {_				try {_					return client.getChildren().forPath(path)__				} catch (KeeperException.NoNodeException ignored) {_					_				}_			}_		}_	};return,a,list,of,all,valid,paths,for,state,handles,return,list,of,valid,state,handle,paths,in,zoo,keeper,throws,exception,if,a,zoo,keeper,operation,fails;public,collection,string,get,all,paths,throws,exception,final,string,path,while,true,stat,stat,client,check,exists,for,path,path,if,stat,null,return,collections,empty,list,else,try,return,client,get,children,for,path,path,catch,keeper,exception,no,node,exception,ignored
ZooKeeperStateHandleStore -> public Collection<String> getAllPaths() throws Exception;1488387821;Return a list of all valid paths for state handles.__@return List of valid state handle paths in ZooKeeper_@throws Exception if a ZooKeeper operation fails;public Collection<String> getAllPaths() throws Exception {_		final String path = "/"___		while(true) {_			Stat stat = client.checkExists().forPath(path)___			if (stat == null) {_				return Collections.emptyList()__			} else {_				try {_					return client.getChildren().forPath(path)__				} catch (KeeperException.NoNodeException ignored) {_					_				}_			}_		}_	};return,a,list,of,all,valid,paths,for,state,handles,return,list,of,valid,state,handle,paths,in,zoo,keeper,throws,exception,if,a,zoo,keeper,operation,fails;public,collection,string,get,all,paths,throws,exception,final,string,path,while,true,stat,stat,client,check,exists,for,path,path,if,stat,null,return,collections,empty,list,else,try,return,client,get,children,for,path,path,catch,keeper,exception,no,node,exception,ignored
ZooKeeperStateHandleStore -> public Collection<String> getAllPaths() throws Exception;1495025524;Return a list of all valid paths for state handles.__@return List of valid state handle paths in ZooKeeper_@throws Exception if a ZooKeeper operation fails;public Collection<String> getAllPaths() throws Exception {_		final String path = "/"___		while(true) {_			Stat stat = client.checkExists().forPath(path)___			if (stat == null) {_				return Collections.emptyList()__			} else {_				try {_					return client.getChildren().forPath(path)__				} catch (KeeperException.NoNodeException ignored) {_					_				}_			}_		}_	};return,a,list,of,all,valid,paths,for,state,handles,return,list,of,valid,state,handle,paths,in,zoo,keeper,throws,exception,if,a,zoo,keeper,operation,fails;public,collection,string,get,all,paths,throws,exception,final,string,path,while,true,stat,stat,client,check,exists,for,path,path,if,stat,null,return,collections,empty,list,else,try,return,client,get,children,for,path,path,catch,keeper,exception,no,node,exception,ignored
ZooKeeperStateHandleStore -> public Collection<String> getAllPaths() throws Exception;1508665243;Return a list of all valid paths for state handles.__@return List of valid state handle paths in ZooKeeper_@throws Exception if a ZooKeeper operation fails;public Collection<String> getAllPaths() throws Exception {_		final String path = "/"___		while(true) {_			Stat stat = client.checkExists().forPath(path)___			if (stat == null) {_				return Collections.emptyList()__			} else {_				try {_					return client.getChildren().forPath(path)__				} catch (KeeperException.NoNodeException ignored) {_					_				}_			}_		}_	};return,a,list,of,all,valid,paths,for,state,handles,return,list,of,valid,state,handle,paths,in,zoo,keeper,throws,exception,if,a,zoo,keeper,operation,fails;public,collection,string,get,all,paths,throws,exception,final,string,path,while,true,stat,stat,client,check,exists,for,path,path,if,stat,null,return,collections,empty,list,else,try,return,client,get,children,for,path,path,catch,keeper,exception,no,node,exception,ignored
ZooKeeperStateHandleStore -> public Collection<String> getAllPaths() throws Exception;1509630459;Return a list of all valid paths for state handles.__@return List of valid state handle paths in ZooKeeper_@throws Exception if a ZooKeeper operation fails;public Collection<String> getAllPaths() throws Exception {_		final String path = "/"___		while(true) {_			Stat stat = client.checkExists().forPath(path)___			if (stat == null) {_				return Collections.emptyList()__			} else {_				try {_					return client.getChildren().forPath(path)__				} catch (KeeperException.NoNodeException ignored) {_					_				}_			}_		}_	};return,a,list,of,all,valid,paths,for,state,handles,return,list,of,valid,state,handle,paths,in,zoo,keeper,throws,exception,if,a,zoo,keeper,operation,fails;public,collection,string,get,all,paths,throws,exception,final,string,path,while,true,stat,stat,client,check,exists,for,path,path,if,stat,null,return,collections,empty,list,else,try,return,client,get,children,for,path,path,catch,keeper,exception,no,node,exception,ignored
ZooKeeperStateHandleStore -> public Collection<String> getAllPaths() throws Exception;1529161094;Return a list of all valid paths for state handles.__@return List of valid state handle paths in ZooKeeper_@throws Exception if a ZooKeeper operation fails;public Collection<String> getAllPaths() throws Exception {_		final String path = "/"___		while(true) {_			Stat stat = client.checkExists().forPath(path)___			if (stat == null) {_				return Collections.emptyList()__			} else {_				try {_					return client.getChildren().forPath(path)__				} catch (KeeperException.NoNodeException ignored) {_					_				}_			}_		}_	};return,a,list,of,all,valid,paths,for,state,handles,return,list,of,valid,state,handle,paths,in,zoo,keeper,throws,exception,if,a,zoo,keeper,operation,fails;public,collection,string,get,all,paths,throws,exception,final,string,path,while,true,stat,stat,client,check,exists,for,path,path,if,stat,null,return,collections,empty,list,else,try,return,client,get,children,for,path,path,catch,keeper,exception,no,node,exception,ignored
ZooKeeperStateHandleStore -> public Collection<String> getAllPaths() throws Exception;1534751191;Return a list of all valid paths for state handles.__@return List of valid state handle paths in ZooKeeper_@throws Exception if a ZooKeeper operation fails;public Collection<String> getAllPaths() throws Exception {_		final String path = "/"___		while (true) {_			Stat stat = client.checkExists().forPath(path)___			if (stat == null) {_				return Collections.emptyList()__			} else {_				try {_					return client.getChildren().forPath(path)__				} catch (KeeperException.NoNodeException ignored) {_					_				}_			}_		}_	};return,a,list,of,all,valid,paths,for,state,handles,return,list,of,valid,state,handle,paths,in,zoo,keeper,throws,exception,if,a,zoo,keeper,operation,fails;public,collection,string,get,all,paths,throws,exception,final,string,path,while,true,stat,stat,client,check,exists,for,path,path,if,stat,null,return,collections,empty,list,else,try,return,client,get,children,for,path,path,catch,keeper,exception,no,node,exception,ignored
ZooKeeperStateHandleStore -> public Collection<String> getAllPaths() throws Exception;1534756758;Return a list of all valid paths for state handles.__@return List of valid state handle paths in ZooKeeper_@throws Exception if a ZooKeeper operation fails;public Collection<String> getAllPaths() throws Exception {_		final String path = "/"___		while (true) {_			Stat stat = client.checkExists().forPath(path)___			if (stat == null) {_				return Collections.emptyList()__			} else {_				try {_					return client.getChildren().forPath(path)__				} catch (KeeperException.NoNodeException ignored) {_					_				}_			}_		}_	};return,a,list,of,all,valid,paths,for,state,handles,return,list,of,valid,state,handle,paths,in,zoo,keeper,throws,exception,if,a,zoo,keeper,operation,fails;public,collection,string,get,all,paths,throws,exception,final,string,path,while,true,stat,stat,client,check,exists,for,path,path,if,stat,null,return,collections,empty,list,else,try,return,client,get,children,for,path,path,catch,keeper,exception,no,node,exception,ignored
ZooKeeperStateHandleStore -> public Collection<String> getAllPaths() throws Exception;1536412777;Return a list of all valid paths for state handles.__@return List of valid state handle paths in ZooKeeper_@throws Exception if a ZooKeeper operation fails;public Collection<String> getAllPaths() throws Exception {_		final String path = "/"___		while (true) {_			Stat stat = client.checkExists().forPath(path)___			if (stat == null) {_				return Collections.emptyList()__			} else {_				try {_					return client.getChildren().forPath(path)__				} catch (KeeperException.NoNodeException ignored) {_					_				}_			}_		}_	};return,a,list,of,all,valid,paths,for,state,handles,return,list,of,valid,state,handle,paths,in,zoo,keeper,throws,exception,if,a,zoo,keeper,operation,fails;public,collection,string,get,all,paths,throws,exception,final,string,path,while,true,stat,stat,client,check,exists,for,path,path,if,stat,null,return,collections,empty,list,else,try,return,client,get,children,for,path,path,catch,keeper,exception,no,node,exception,ignored
ZooKeeperStateHandleStore -> public Collection<String> getAllPaths() throws Exception;1536746131;Return a list of all valid paths for state handles.__@return List of valid state handle paths in ZooKeeper_@throws Exception if a ZooKeeper operation fails;public Collection<String> getAllPaths() throws Exception {_		final String path = "/"___		while (true) {_			Stat stat = client.checkExists().forPath(path)___			if (stat == null) {_				return Collections.emptyList()__			} else {_				try {_					return client.getChildren().forPath(path)__				} catch (KeeperException.NoNodeException ignored) {_					_				}_			}_		}_	};return,a,list,of,all,valid,paths,for,state,handles,return,list,of,valid,state,handle,paths,in,zoo,keeper,throws,exception,if,a,zoo,keeper,operation,fails;public,collection,string,get,all,paths,throws,exception,final,string,path,while,true,stat,stat,client,check,exists,for,path,path,if,stat,null,return,collections,empty,list,else,try,return,client,get,children,for,path,path,catch,keeper,exception,no,node,exception,ignored
ZooKeeperStateHandleStore -> public Collection<String> getAllPaths() throws Exception;1546977736;Return a list of all valid paths for state handles.__@return List of valid state handle paths in ZooKeeper_@throws Exception if a ZooKeeper operation fails;public Collection<String> getAllPaths() throws Exception {_		final String path = "/"___		while (true) {_			Stat stat = client.checkExists().forPath(path)___			if (stat == null) {_				return Collections.emptyList()__			} else {_				try {_					return client.getChildren().forPath(path)__				} catch (KeeperException.NoNodeException ignored) {_					_				}_			}_		}_	};return,a,list,of,all,valid,paths,for,state,handles,return,list,of,valid,state,handle,paths,in,zoo,keeper,throws,exception,if,a,zoo,keeper,operation,fails;public,collection,string,get,all,paths,throws,exception,final,string,path,while,true,stat,stat,client,check,exists,for,path,path,if,stat,null,return,collections,empty,list,else,try,return,client,get,children,for,path,path,catch,keeper,exception,no,node,exception,ignored
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<StateHandle<T>, String>> getAll() throws Exception;1441121146;Gets all available state handles from ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<StateHandle<T>, String>> getAll() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			_			int initialCVersion = client.checkExists().forPath("/").getCversion()___			List<String> children = client.getChildren().forPath("/")___			for (String path : children) {_				path = "/" + path___				try {_					final StateHandle<T> stateHandle = get(path)__					stateHandles.add(new Tuple2<>(stateHandle, path))__				}_				catch (KeeperException.NoNodeException ignored) {_					_					continue retry__				}_			}__			int finalCVersion = client.checkExists().forPath("/").getCversion()___			_			success = initialCVersion == finalCVersion__		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,state,handle,t,string,get,all,throws,exception,final,list,tuple2,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,int,initial,cversion,client,check,exists,for,path,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<StateHandle<T>, String>> getAll() throws Exception;1445247002;Gets all available state handles from ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<StateHandle<T>, String>> getAll() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			_			int initialCVersion = client.checkExists().forPath("/").getCversion()___			List<String> children = client.getChildren().forPath("/")___			for (String path : children) {_				path = "/" + path___				try {_					final StateHandle<T> stateHandle = get(path)__					stateHandles.add(new Tuple2<>(stateHandle, path))__				}_				catch (KeeperException.NoNodeException ignored) {_					_					continue retry__				}_			}__			int finalCVersion = client.checkExists().forPath("/").getCversion()___			_			success = initialCVersion == finalCVersion__		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,state,handle,t,string,get,all,throws,exception,final,list,tuple2,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,int,initial,cversion,client,check,exists,for,path,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<StateHandle<T>, String>> getAll() throws Exception;1445550685;Gets all available state handles from ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<StateHandle<T>, String>> getAll() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			_			int initialCVersion = client.checkExists().forPath("/").getCversion()___			List<String> children = client.getChildren().forPath("/")___			for (String path : children) {_				path = "/" + path___				try {_					final StateHandle<T> stateHandle = get(path)__					stateHandles.add(new Tuple2<>(stateHandle, path))__				}_				catch (KeeperException.NoNodeException ignored) {_					_					continue retry__				}_			}__			int finalCVersion = client.checkExists().forPath("/").getCversion()___			_			success = initialCVersion == finalCVersion__		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,state,handle,t,string,get,all,throws,exception,final,list,tuple2,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,int,initial,cversion,client,check,exists,for,path,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<StateHandle<T>, String>> getAll() throws Exception;1465394479;Gets all available state handles from ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<StateHandle<T>, String>> getAll() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			_			int initialCVersion = client.checkExists().forPath("/").getCversion()___			List<String> children = client.getChildren().forPath("/")___			for (String path : children) {_				path = "/" + path___				try {_					final StateHandle<T> stateHandle = get(path)__					stateHandles.add(new Tuple2<>(stateHandle, path))__				}_				catch (KeeperException.NoNodeException ignored) {_					_					continue retry__				}_			}__			int finalCVersion = client.checkExists().forPath("/").getCversion()___			_			success = initialCVersion == finalCVersion__		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,state,handle,t,string,get,all,throws,exception,final,list,tuple2,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,int,initial,cversion,client,check,exists,for,path,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<StateHandle<T>, String>> getAll() throws Exception;1468938623;Gets all available state handles from ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<StateHandle<T>, String>> getAll() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final StateHandle<T> stateHandle = get(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,state,handle,t,string,get,all,throws,exception,final,list,tuple2,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> public void releaseAndTryRemoveAll() throws Exception;1495025524;Releases all lock nodes of this ZooKeeperStateHandleStores and tries to remove all state nodes which_are not locked anymore.__<p>The delete operation is executed asynchronously__@throws Exception if the delete operation fails;public void releaseAndTryRemoveAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child : children) {_			try {_				releaseAndTryRemove('/' + child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release and try removing all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,stores,and,tries,to,remove,all,state,nodes,which,are,not,locked,anymore,p,the,delete,operation,is,executed,asynchronously,throws,exception,if,the,delete,operation,fails;public,void,release,and,try,remove,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,and,try,remove,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,and,try,removing,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAndTryRemoveAll() throws Exception;1508665243;Releases all lock nodes of this ZooKeeperStateHandleStores and tries to remove all state nodes which_are not locked anymore.__<p>The delete operation is executed asynchronously__@throws Exception if the delete operation fails;public void releaseAndTryRemoveAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child : children) {_			try {_				releaseAndTryRemove('/' + child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release and try removing all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,stores,and,tries,to,remove,all,state,nodes,which,are,not,locked,anymore,p,the,delete,operation,is,executed,asynchronously,throws,exception,if,the,delete,operation,fails;public,void,release,and,try,remove,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,and,try,remove,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,and,try,removing,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAndTryRemoveAll() throws Exception;1509630459;Releases all lock nodes of this ZooKeeperStateHandleStores and tries to remove all state nodes which_are not locked anymore.__<p>The delete operation is executed asynchronously__@throws Exception if the delete operation fails;public void releaseAndTryRemoveAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child : children) {_			try {_				releaseAndTryRemove('/' + child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release and try removing all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,stores,and,tries,to,remove,all,state,nodes,which,are,not,locked,anymore,p,the,delete,operation,is,executed,asynchronously,throws,exception,if,the,delete,operation,fails;public,void,release,and,try,remove,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,and,try,remove,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,and,try,removing,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAndTryRemoveAll() throws Exception;1529161094;Releases all lock nodes of this ZooKeeperStateHandleStores and tries to remove all state nodes which_are not locked anymore.__<p>The delete operation is executed asynchronously__@throws Exception if the delete operation fails;public void releaseAndTryRemoveAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child : children) {_			try {_				releaseAndTryRemove('/' + child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release and try removing all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,stores,and,tries,to,remove,all,state,nodes,which,are,not,locked,anymore,p,the,delete,operation,is,executed,asynchronously,throws,exception,if,the,delete,operation,fails;public,void,release,and,try,remove,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,and,try,remove,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,and,try,removing,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAndTryRemoveAll() throws Exception;1534751191;Releases all lock nodes of this ZooKeeperStateHandleStores and tries to remove all state nodes which_are not locked anymore.__<p>The delete operation is executed asynchronously__@throws Exception if the delete operation fails;public void releaseAndTryRemoveAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child : children) {_			try {_				releaseAndTryRemove('/' + child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release and try removing all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,stores,and,tries,to,remove,all,state,nodes,which,are,not,locked,anymore,p,the,delete,operation,is,executed,asynchronously,throws,exception,if,the,delete,operation,fails;public,void,release,and,try,remove,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,and,try,remove,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,and,try,removing,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAndTryRemoveAll() throws Exception;1534756758;Releases all lock nodes of this ZooKeeperStateHandleStores and tries to remove all state nodes which_are not locked anymore.__<p>The delete operation is executed asynchronously__@throws Exception if the delete operation fails;public void releaseAndTryRemoveAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child : children) {_			try {_				releaseAndTryRemove('/' + child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release and try removing all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,stores,and,tries,to,remove,all,state,nodes,which,are,not,locked,anymore,p,the,delete,operation,is,executed,asynchronously,throws,exception,if,the,delete,operation,fails;public,void,release,and,try,remove,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,and,try,remove,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,and,try,removing,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAndTryRemoveAll() throws Exception;1536412777;Releases all lock nodes of this ZooKeeperStateHandleStores and tries to remove all state nodes which_are not locked anymore.__<p>The delete operation is executed asynchronously__@throws Exception if the delete operation fails;public void releaseAndTryRemoveAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child : children) {_			try {_				releaseAndTryRemove('/' + child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release and try removing all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,stores,and,tries,to,remove,all,state,nodes,which,are,not,locked,anymore,p,the,delete,operation,is,executed,asynchronously,throws,exception,if,the,delete,operation,fails;public,void,release,and,try,remove,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,and,try,remove,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,and,try,removing,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAndTryRemoveAll() throws Exception;1536746131;Releases all lock nodes of this ZooKeeperStateHandleStores and tries to remove all state nodes which_are not locked anymore.__<p>The delete operation is executed asynchronously__@throws Exception if the delete operation fails;public void releaseAndTryRemoveAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child : children) {_			try {_				releaseAndTryRemove('/' + child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release and try removing all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,stores,and,tries,to,remove,all,state,nodes,which,are,not,locked,anymore,p,the,delete,operation,is,executed,asynchronously,throws,exception,if,the,delete,operation,fails;public,void,release,and,try,remove,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,and,try,remove,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,and,try,removing,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAndTryRemoveAll() throws Exception;1546977736;Releases all lock nodes of this ZooKeeperStateHandleStores and tries to remove all state nodes which_are not locked anymore.__<p>The delete operation is executed asynchronously__@throws Exception if the delete operation fails;public void releaseAndTryRemoveAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child : children) {_			try {_				releaseAndTryRemove('/' + child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release and try removing all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,stores,and,tries,to,remove,all,state,nodes,which,are,not,locked,anymore,p,the,delete,operation,is,executed,asynchronously,throws,exception,if,the,delete,operation,fails;public,void,release,and,try,remove,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,and,try,remove,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,and,try,removing,all,state,nodes,exception
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByName() throws Exception;1470909547;Gets all available state handles from ZooKeeper sorted by name (ascending).__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByName() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = ZKPaths.getSortedChildren(_						client.getZookeeperClient().getZooKeeper(),_						ZKPaths.fixForNamespace(client.getNamespace(), "/"))___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = get(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,sorted,by,name,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByName() throws Exception;1475656513;Gets all available state handles from ZooKeeper sorted by name (ascending).__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByName() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = ZKPaths.getSortedChildren(_						client.getZookeeperClient().getZooKeeper(),_						ZKPaths.fixForNamespace(client.getNamespace(), "/"))___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = get(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,sorted,by,name,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByName() throws Exception;1479246304;Gets all available state handles from ZooKeeper sorted by name (ascending).__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByName() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = ZKPaths.getSortedChildren(_						client.getZookeeperClient().getZooKeeper(),_						ZKPaths.fixForNamespace(client.getNamespace(), "/"))___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = get(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,sorted,by,name,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByName() throws Exception;1480437068;Gets all available state handles from ZooKeeper sorted by name (ascending).__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByName() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = ZKPaths.getSortedChildren(_						client.getZookeeperClient().getZooKeeper(),_						ZKPaths.fixForNamespace(client.getNamespace(), "/"))___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = get(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,sorted,by,name,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByName() throws Exception;1488387821;Gets all available state handles from ZooKeeper sorted by name (ascending).__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByName() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = ZKPaths.getSortedChildren(_						client.getZookeeperClient().getZooKeeper(),_						ZKPaths.fixForNamespace(client.getNamespace(), "/"))___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = get(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Ignoring this node.", path, ioException)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,sorted,by,name,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,ignoring,this,node,path,io,exception,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage);1534756758;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>_@param storage to persist the actual state and whose returned state handle is then written_to ZooKeeper;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage) {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")___		_		lockNode = UUID.randomUUID().toString()__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code,param,storage,to,persist,the,actual,state,and,whose,returned,state,handle,is,then,written,to,zoo,keeper;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage,lock,node,uuid,random,uuid,to,string
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage);1536412777;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>_@param storage to persist the actual state and whose returned state handle is then written_to ZooKeeper;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage) {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")___		_		lockNode = UUID.randomUUID().toString()__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code,param,storage,to,persist,the,actual,state,and,whose,returned,state,handle,is,then,written,to,zoo,keeper;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage,lock,node,uuid,random,uuid,to,string
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage);1536746131;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>_@param storage to persist the actual state and whose returned state handle is then written_to ZooKeeper;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage) {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")___		_		lockNode = UUID.randomUUID().toString()__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code,param,storage,to,persist,the,actual,state,and,whose,returned,state,handle,is,then,written,to,zoo,keeper;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage,lock,node,uuid,random,uuid,to,string
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage);1546977736;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>_@param storage to persist the actual state and whose returned state handle is then written_to ZooKeeper;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage) {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")___		_		lockNode = UUID.randomUUID().toString()__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code,param,storage,to,persist,the,actual,state,and,whose,returned,state,handle,is,then,written,to,zoo,keeper;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage,lock,node,uuid,random,uuid,to,string
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception;1495025524;Gets the {@link RetrievableStateHandle} stored in the given ZooKeeper node and locks it. A_locked node cannot be removed by another {@link ZooKeeperStateHandleStore} instance as long_as this instance remains connected to ZooKeeper.__@param pathInZooKeeper Path to the ZooKeeper node which contains the state handle_@return The retrieved state handle from the specified ZooKeeper node_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception {_		return get(pathInZooKeeper, true)__	};gets,the,link,retrievable,state,handle,stored,in,the,given,zoo,keeper,node,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,param,path,in,zoo,keeper,path,to,the,zoo,keeper,node,which,contains,the,state,handle,return,the,retrieved,state,handle,from,the,specified,zoo,keeper,node,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;public,retrievable,state,handle,t,get,and,lock,string,path,in,zoo,keeper,throws,exception,return,get,path,in,zoo,keeper,true
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception;1508665243;Gets the {@link RetrievableStateHandle} stored in the given ZooKeeper node and locks it. A_locked node cannot be removed by another {@link ZooKeeperStateHandleStore} instance as long_as this instance remains connected to ZooKeeper.__@param pathInZooKeeper Path to the ZooKeeper node which contains the state handle_@return The retrieved state handle from the specified ZooKeeper node_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception {_		return get(pathInZooKeeper, true)__	};gets,the,link,retrievable,state,handle,stored,in,the,given,zoo,keeper,node,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,param,path,in,zoo,keeper,path,to,the,zoo,keeper,node,which,contains,the,state,handle,return,the,retrieved,state,handle,from,the,specified,zoo,keeper,node,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;public,retrievable,state,handle,t,get,and,lock,string,path,in,zoo,keeper,throws,exception,return,get,path,in,zoo,keeper,true
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception;1509630459;Gets the {@link RetrievableStateHandle} stored in the given ZooKeeper node and locks it. A_locked node cannot be removed by another {@link ZooKeeperStateHandleStore} instance as long_as this instance remains connected to ZooKeeper.__@param pathInZooKeeper Path to the ZooKeeper node which contains the state handle_@return The retrieved state handle from the specified ZooKeeper node_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception {_		return get(pathInZooKeeper, true)__	};gets,the,link,retrievable,state,handle,stored,in,the,given,zoo,keeper,node,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,param,path,in,zoo,keeper,path,to,the,zoo,keeper,node,which,contains,the,state,handle,return,the,retrieved,state,handle,from,the,specified,zoo,keeper,node,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;public,retrievable,state,handle,t,get,and,lock,string,path,in,zoo,keeper,throws,exception,return,get,path,in,zoo,keeper,true
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception;1529161094;Gets the {@link RetrievableStateHandle} stored in the given ZooKeeper node and locks it. A_locked node cannot be removed by another {@link ZooKeeperStateHandleStore} instance as long_as this instance remains connected to ZooKeeper.__@param pathInZooKeeper Path to the ZooKeeper node which contains the state handle_@return The retrieved state handle from the specified ZooKeeper node_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception {_		return get(pathInZooKeeper, true)__	};gets,the,link,retrievable,state,handle,stored,in,the,given,zoo,keeper,node,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,param,path,in,zoo,keeper,path,to,the,zoo,keeper,node,which,contains,the,state,handle,return,the,retrieved,state,handle,from,the,specified,zoo,keeper,node,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;public,retrievable,state,handle,t,get,and,lock,string,path,in,zoo,keeper,throws,exception,return,get,path,in,zoo,keeper,true
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception;1534751191;Gets the {@link RetrievableStateHandle} stored in the given ZooKeeper node and locks it. A_locked node cannot be removed by another {@link ZooKeeperStateHandleStore} instance as long_as this instance remains connected to ZooKeeper.__@param pathInZooKeeper Path to the ZooKeeper node which contains the state handle_@return The retrieved state handle from the specified ZooKeeper node_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception {_		return get(pathInZooKeeper, true)__	};gets,the,link,retrievable,state,handle,stored,in,the,given,zoo,keeper,node,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,param,path,in,zoo,keeper,path,to,the,zoo,keeper,node,which,contains,the,state,handle,return,the,retrieved,state,handle,from,the,specified,zoo,keeper,node,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;public,retrievable,state,handle,t,get,and,lock,string,path,in,zoo,keeper,throws,exception,return,get,path,in,zoo,keeper,true
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception;1534756758;Gets the {@link RetrievableStateHandle} stored in the given ZooKeeper node and locks it. A_locked node cannot be removed by another {@link ZooKeeperStateHandleStore} instance as long_as this instance remains connected to ZooKeeper.__@param pathInZooKeeper Path to the ZooKeeper node which contains the state handle_@return The retrieved state handle from the specified ZooKeeper node_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception {_		return get(pathInZooKeeper, true)__	};gets,the,link,retrievable,state,handle,stored,in,the,given,zoo,keeper,node,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,param,path,in,zoo,keeper,path,to,the,zoo,keeper,node,which,contains,the,state,handle,return,the,retrieved,state,handle,from,the,specified,zoo,keeper,node,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;public,retrievable,state,handle,t,get,and,lock,string,path,in,zoo,keeper,throws,exception,return,get,path,in,zoo,keeper,true
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception;1536412777;Gets the {@link RetrievableStateHandle} stored in the given ZooKeeper node and locks it. A_locked node cannot be removed by another {@link ZooKeeperStateHandleStore} instance as long_as this instance remains connected to ZooKeeper.__@param pathInZooKeeper Path to the ZooKeeper node which contains the state handle_@return The retrieved state handle from the specified ZooKeeper node_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception {_		return get(pathInZooKeeper, true)__	};gets,the,link,retrievable,state,handle,stored,in,the,given,zoo,keeper,node,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,param,path,in,zoo,keeper,path,to,the,zoo,keeper,node,which,contains,the,state,handle,return,the,retrieved,state,handle,from,the,specified,zoo,keeper,node,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;public,retrievable,state,handle,t,get,and,lock,string,path,in,zoo,keeper,throws,exception,return,get,path,in,zoo,keeper,true
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception;1536746131;Gets the {@link RetrievableStateHandle} stored in the given ZooKeeper node and locks it. A_locked node cannot be removed by another {@link ZooKeeperStateHandleStore} instance as long_as this instance remains connected to ZooKeeper.__@param pathInZooKeeper Path to the ZooKeeper node which contains the state handle_@return The retrieved state handle from the specified ZooKeeper node_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception {_		return get(pathInZooKeeper, true)__	};gets,the,link,retrievable,state,handle,stored,in,the,given,zoo,keeper,node,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,param,path,in,zoo,keeper,path,to,the,zoo,keeper,node,which,contains,the,state,handle,return,the,retrieved,state,handle,from,the,specified,zoo,keeper,node,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;public,retrievable,state,handle,t,get,and,lock,string,path,in,zoo,keeper,throws,exception,return,get,path,in,zoo,keeper,true
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception;1546977736;Gets the {@link RetrievableStateHandle} stored in the given ZooKeeper node and locks it. A_locked node cannot be removed by another {@link ZooKeeperStateHandleStore} instance as long_as this instance remains connected to ZooKeeper.__@param pathInZooKeeper Path to the ZooKeeper node which contains the state handle_@return The retrieved state handle from the specified ZooKeeper node_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;public RetrievableStateHandle<T> getAndLock(String pathInZooKeeper) throws Exception {_		return get(pathInZooKeeper, true)__	};gets,the,link,retrievable,state,handle,stored,in,the,given,zoo,keeper,node,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,param,path,in,zoo,keeper,path,to,the,zoo,keeper,node,which,contains,the,state,handle,return,the,retrieved,state,handle,from,the,specified,zoo,keeper,node,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;public,retrievable,state,handle,t,get,and,lock,string,path,in,zoo,keeper,throws,exception,return,get,path,in,zoo,keeper,true
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public RetrievableStateHandle<T> get(String pathInZooKeeper) throws Exception;1470909547;Gets a state handle from ZooKeeper.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from (expected to_exist and start with a '/')._@return The state handle_@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public RetrievableStateHandle<T> get(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		byte[] data = client.getData().forPath(pathInZooKeeper)__		return InstantiationUtil.deserializeObject(data)__	};gets,a,state,handle,from,zoo,keeper,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,expected,to,exist,and,start,with,a,return,the,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,retrievable,state,handle,t,get,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,byte,data,client,get,data,for,path,path,in,zoo,keeper,return,instantiation,util,deserialize,object,data
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public RetrievableStateHandle<T> get(String pathInZooKeeper) throws Exception;1475656513;Gets a state handle from ZooKeeper.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from (expected to_exist and start with a '/')._@return The state handle_@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public RetrievableStateHandle<T> get(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		byte[] data = client.getData().forPath(pathInZooKeeper)__		return InstantiationUtil.deserializeObject(data, Thread.currentThread().getContextClassLoader())__	};gets,a,state,handle,from,zoo,keeper,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,expected,to,exist,and,start,with,a,return,the,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,retrievable,state,handle,t,get,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,byte,data,client,get,data,for,path,path,in,zoo,keeper,return,instantiation,util,deserialize,object,data,thread,current,thread,get,context,class,loader
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public RetrievableStateHandle<T> get(String pathInZooKeeper) throws Exception;1479246304;Gets a state handle from ZooKeeper.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from (expected to_exist and start with a '/')._@return The state handle_@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public RetrievableStateHandle<T> get(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		byte[] data = client.getData().forPath(pathInZooKeeper)__		return InstantiationUtil.deserializeObject(data, Thread.currentThread().getContextClassLoader())__	};gets,a,state,handle,from,zoo,keeper,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,expected,to,exist,and,start,with,a,return,the,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,retrievable,state,handle,t,get,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,byte,data,client,get,data,for,path,path,in,zoo,keeper,return,instantiation,util,deserialize,object,data,thread,current,thread,get,context,class,loader
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public RetrievableStateHandle<T> get(String pathInZooKeeper) throws Exception;1480437068;Gets a state handle from ZooKeeper.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from (expected to_exist and start with a '/')._@return The state handle_@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public RetrievableStateHandle<T> get(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		byte[] data___		try {_			data = client.getData().forPath(pathInZooKeeper)__		} catch (Exception e) {_			throw new Exception("Failed to retrieve state handle data under " + pathInZooKeeper +_				" from ZooKeeper.", e)__		}__		try {_			return InstantiationUtil.deserializeObject(data, Thread.currentThread().getContextClassLoader())__		} catch (IOException | ClassNotFoundException e) {_			throw new Exception("Failed to deserialize state handle from ZooKeeper data from " +_				pathInZooKeeper + '.', e)__		}_	};gets,a,state,handle,from,zoo,keeper,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,expected,to,exist,and,start,with,a,return,the,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,retrievable,state,handle,t,get,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,byte,data,try,data,client,get,data,for,path,path,in,zoo,keeper,catch,exception,e,throw,new,exception,failed,to,retrieve,state,handle,data,under,path,in,zoo,keeper,from,zoo,keeper,e,try,return,instantiation,util,deserialize,object,data,thread,current,thread,get,context,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,exception,failed,to,deserialize,state,handle,from,zoo,keeper,data,from,path,in,zoo,keeper,e
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public RetrievableStateHandle<T> get(String pathInZooKeeper) throws Exception;1488387821;Gets a state handle from ZooKeeper.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from (expected to_exist and start with a '/')._@return The state handle_@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public RetrievableStateHandle<T> get(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		byte[] data___		try {_			data = client.getData().forPath(pathInZooKeeper)__		} catch (Exception e) {_			throw new Exception("Failed to retrieve state handle data under " + pathInZooKeeper +_				" from ZooKeeper.", e)__		}__		try {_			return InstantiationUtil.deserializeObject(data, Thread.currentThread().getContextClassLoader())__		} catch (IOException | ClassNotFoundException e) {_			throw new IOException("Failed to deserialize state handle from ZooKeeper data from " +_				pathInZooKeeper + '.', e)__		}_	};gets,a,state,handle,from,zoo,keeper,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,expected,to,exist,and,start,with,a,return,the,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,retrievable,state,handle,t,get,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,byte,data,try,data,client,get,data,for,path,path,in,zoo,keeper,catch,exception,e,throw,new,exception,failed,to,retrieve,state,handle,data,under,path,in,zoo,keeper,from,zoo,keeper,e,try,return,instantiation,util,deserialize,object,data,thread,current,thread,get,context,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,ioexception,failed,to,deserialize,state,handle,from,zoo,keeper,data,from,path,in,zoo,keeper,e
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception;1495025524;Gets all available state handles from ZooKeeper and locks the respective state nodes.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Ignoring this node.", path, ioException)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,and,locks,the,respective,state,nodes,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,ignoring,this,node,path,io,exception,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception;1508665243;Gets all available state handles from ZooKeeper and locks the respective state nodes.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Ignoring this node.", path, ioException)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,and,locks,the,respective,state,nodes,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,ignoring,this,node,path,io,exception,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception;1509630459;Gets all available state handles from ZooKeeper and locks the respective state nodes.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Ignoring this node.", path, ioException)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,and,locks,the,respective,state,nodes,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,ignoring,this,node,path,io,exception,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception;1529161094;Gets all available state handles from ZooKeeper and locks the respective state nodes.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Ignoring this node.", path, ioException)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,and,locks,the,respective,state,nodes,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,ignoring,this,node,path,io,exception,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception;1534751191;Gets all available state handles from ZooKeeper and locks the respective state nodes.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Ignoring this node.", path, ioException)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,and,locks,the,respective,state,nodes,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,ignoring,this,node,path,io,exception,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception;1534756758;Gets all available state handles from ZooKeeper and locks the respective state nodes.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Ignoring this node.", path, ioException)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,and,locks,the,respective,state,nodes,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,ignoring,this,node,path,io,exception,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception;1536412777;Gets all available state handles from ZooKeeper and locks the respective state nodes.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Ignoring this node.", path, ioException)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,and,locks,the,respective,state,nodes,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,ignoring,this,node,path,io,exception,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception;1536746131;Gets all available state handles from ZooKeeper and locks the respective state nodes.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Ignoring this node.", path, ioException)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,and,locks,the,respective,state,nodes,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,ignoring,this,node,path,io,exception,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception;1546977736;Gets all available state handles from ZooKeeper and locks the respective state nodes.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Ignoring this node.", path, ioException)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,and,locks,the,respective,state,nodes,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,ignoring,this,node,path,io,exception,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public StateHandle<T> get(String pathInZooKeeper) throws Exception;1441121146;Gets a state handle from ZooKeeper.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from (expected to_exist and start with a '/')._@return The state handle_@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public StateHandle<T> get(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		byte[] data = client.getData().forPath(pathInZooKeeper)___		return (StateHandle<T>) InstantiationUtil_				.deserializeObject(data, ClassLoader.getSystemClassLoader())__	};gets,a,state,handle,from,zoo,keeper,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,expected,to,exist,and,start,with,a,return,the,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,state,handle,t,get,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,byte,data,client,get,data,for,path,path,in,zoo,keeper,return,state,handle,t,instantiation,util,deserialize,object,data,class,loader,get,system,class,loader
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public StateHandle<T> get(String pathInZooKeeper) throws Exception;1445247002;Gets a state handle from ZooKeeper.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from (expected to_exist and start with a '/')._@return The state handle_@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public StateHandle<T> get(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		byte[] data = client.getData().forPath(pathInZooKeeper)___		return (StateHandle<T>) InstantiationUtil_				.deserializeObject(data, ClassLoader.getSystemClassLoader())__	};gets,a,state,handle,from,zoo,keeper,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,expected,to,exist,and,start,with,a,return,the,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,state,handle,t,get,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,byte,data,client,get,data,for,path,path,in,zoo,keeper,return,state,handle,t,instantiation,util,deserialize,object,data,class,loader,get,system,class,loader
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public StateHandle<T> get(String pathInZooKeeper) throws Exception;1445550685;Gets a state handle from ZooKeeper.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from (expected to_exist and start with a '/')._@return The state handle_@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public StateHandle<T> get(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		byte[] data = client.getData().forPath(pathInZooKeeper)___		return (StateHandle<T>) InstantiationUtil_				.deserializeObject(data, ClassLoader.getSystemClassLoader())__	};gets,a,state,handle,from,zoo,keeper,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,expected,to,exist,and,start,with,a,return,the,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,state,handle,t,get,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,byte,data,client,get,data,for,path,path,in,zoo,keeper,return,state,handle,t,instantiation,util,deserialize,object,data,class,loader,get,system,class,loader
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public StateHandle<T> get(String pathInZooKeeper) throws Exception;1465394479;Gets a state handle from ZooKeeper.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from (expected to_exist and start with a '/')._@return The state handle_@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public StateHandle<T> get(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		byte[] data = client.getData().forPath(pathInZooKeeper)___		return (StateHandle<T>) InstantiationUtil_				.deserializeObject(data, ClassLoader.getSystemClassLoader())__	};gets,a,state,handle,from,zoo,keeper,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,expected,to,exist,and,start,with,a,return,the,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,state,handle,t,get,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,byte,data,client,get,data,for,path,path,in,zoo,keeper,return,state,handle,t,instantiation,util,deserialize,object,data,class,loader,get,system,class,loader
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public StateHandle<T> get(String pathInZooKeeper) throws Exception;1468938623;Gets a state handle from ZooKeeper.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from (expected to_exist and start with a '/')._@return The state handle_@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public StateHandle<T> get(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		byte[] data = client.getData().forPath(pathInZooKeeper)___		return (StateHandle<T>) InstantiationUtil_				.deserializeObject(data, ClassLoader.getSystemClassLoader())__	};gets,a,state,handle,from,zoo,keeper,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,expected,to,exist,and,start,with,a,return,the,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,state,handle,t,get,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,byte,data,client,get,data,for,path,path,in,zoo,keeper,return,state,handle,t,instantiation,util,deserialize,object,data,class,loader,get,system,class,loader
ZooKeeperStateHandleStore -> private static String normalizePath(String path);1495025524;Makes sure that every path starts with a "/"__@param path Path to normalize_@return Normalized path such that it starts with a "/";private static String normalizePath(String path) {_		if (path.startsWith("/")) {_			return path__		} else {_			return '/' + path__		}_	};makes,sure,that,every,path,starts,with,a,param,path,path,to,normalize,return,normalized,path,such,that,it,starts,with,a;private,static,string,normalize,path,string,path,if,path,starts,with,return,path,else,return,path
ZooKeeperStateHandleStore -> private static String normalizePath(String path);1508665243;Makes sure that every path starts with a "/"__@param path Path to normalize_@return Normalized path such that it starts with a "/";private static String normalizePath(String path) {_		if (path.startsWith("/")) {_			return path__		} else {_			return '/' + path__		}_	};makes,sure,that,every,path,starts,with,a,param,path,path,to,normalize,return,normalized,path,such,that,it,starts,with,a;private,static,string,normalize,path,string,path,if,path,starts,with,return,path,else,return,path
ZooKeeperStateHandleStore -> private static String normalizePath(String path);1509630459;Makes sure that every path starts with a "/"__@param path Path to normalize_@return Normalized path such that it starts with a "/";private static String normalizePath(String path) {_		if (path.startsWith("/")) {_			return path__		} else {_			return '/' + path__		}_	};makes,sure,that,every,path,starts,with,a,param,path,path,to,normalize,return,normalized,path,such,that,it,starts,with,a;private,static,string,normalize,path,string,path,if,path,starts,with,return,path,else,return,path
ZooKeeperStateHandleStore -> private static String normalizePath(String path);1529161094;Makes sure that every path starts with a "/"__@param path Path to normalize_@return Normalized path such that it starts with a "/";private static String normalizePath(String path) {_		if (path.startsWith("/")) {_			return path__		} else {_			return '/' + path__		}_	};makes,sure,that,every,path,starts,with,a,param,path,path,to,normalize,return,normalized,path,such,that,it,starts,with,a;private,static,string,normalize,path,string,path,if,path,starts,with,return,path,else,return,path
ZooKeeperStateHandleStore -> private static String normalizePath(String path);1534751191;Makes sure that every path starts with a "/".__@param path Path to normalize_@return Normalized path such that it starts with a "/";private static String normalizePath(String path) {_		if (path.startsWith("/")) {_			return path__		} else {_			return '/' + path__		}_	};makes,sure,that,every,path,starts,with,a,param,path,path,to,normalize,return,normalized,path,such,that,it,starts,with,a;private,static,string,normalize,path,string,path,if,path,starts,with,return,path,else,return,path
ZooKeeperStateHandleStore -> private static String normalizePath(String path);1534756758;Makes sure that every path starts with a "/".__@param path Path to normalize_@return Normalized path such that it starts with a "/";private static String normalizePath(String path) {_		if (path.startsWith("/")) {_			return path__		} else {_			return '/' + path__		}_	};makes,sure,that,every,path,starts,with,a,param,path,path,to,normalize,return,normalized,path,such,that,it,starts,with,a;private,static,string,normalize,path,string,path,if,path,starts,with,return,path,else,return,path
ZooKeeperStateHandleStore -> private static String normalizePath(String path);1536412777;Makes sure that every path starts with a "/".__@param path Path to normalize_@return Normalized path such that it starts with a "/";private static String normalizePath(String path) {_		if (path.startsWith("/")) {_			return path__		} else {_			return '/' + path__		}_	};makes,sure,that,every,path,starts,with,a,param,path,path,to,normalize,return,normalized,path,such,that,it,starts,with,a;private,static,string,normalize,path,string,path,if,path,starts,with,return,path,else,return,path
ZooKeeperStateHandleStore -> private static String normalizePath(String path);1536746131;Makes sure that every path starts with a "/".__@param path Path to normalize_@return Normalized path such that it starts with a "/";private static String normalizePath(String path) {_		if (path.startsWith("/")) {_			return path__		} else {_			return '/' + path__		}_	};makes,sure,that,every,path,starts,with,a,param,path,path,to,normalize,return,normalized,path,such,that,it,starts,with,a;private,static,string,normalize,path,string,path,if,path,starts,with,return,path,else,return,path
ZooKeeperStateHandleStore -> private static String normalizePath(String path);1546977736;Makes sure that every path starts with a "/".__@param path Path to normalize_@return Normalized path such that it starts with a "/";private static String normalizePath(String path) {_		if (path.startsWith("/")) {_			return path__		} else {_			return '/' + path__		}_	};makes,sure,that,every,path,starts,with,a,param,path,path,to,normalize,return,normalized,path,such,that,it,starts,with,a;private,static,string,normalize,path,string,path,if,path,starts,with,return,path,else,return,path
ZooKeeperStateHandleStore -> public void release(String pathInZooKeeper) throws Exception;1495025524;Releases the lock from the node under the given ZooKeeper path. If no lock exists, then nothing happens.__@param pathInZooKeeper Path describing the ZooKeeper node_@throws Exception if the delete operation of the lock node fails;public void release(String pathInZooKeeper) throws Exception {_		final String path = normalizePath(pathInZooKeeper)___		try {_			client.delete().forPath(getLockPath(path))__		} catch (KeeperException.NoNodeException ignored) {_			_		} catch (Exception e) {_			throw new Exception("Could not release the lock: " + getLockPath(pathInZooKeeper) + '.', e)__		}_	};releases,the,lock,from,the,node,under,the,given,zoo,keeper,path,if,no,lock,exists,then,nothing,happens,param,path,in,zoo,keeper,path,describing,the,zoo,keeper,node,throws,exception,if,the,delete,operation,of,the,lock,node,fails;public,void,release,string,path,in,zoo,keeper,throws,exception,final,string,path,normalize,path,path,in,zoo,keeper,try,client,delete,for,path,get,lock,path,path,catch,keeper,exception,no,node,exception,ignored,catch,exception,e,throw,new,exception,could,not,release,the,lock,get,lock,path,path,in,zoo,keeper,e
ZooKeeperStateHandleStore -> public void release(String pathInZooKeeper) throws Exception;1508665243;Releases the lock from the node under the given ZooKeeper path. If no lock exists, then nothing happens.__@param pathInZooKeeper Path describing the ZooKeeper node_@throws Exception if the delete operation of the lock node fails;public void release(String pathInZooKeeper) throws Exception {_		final String path = normalizePath(pathInZooKeeper)___		try {_			client.delete().forPath(getLockPath(path))__		} catch (KeeperException.NoNodeException ignored) {_			_		} catch (Exception e) {_			throw new Exception("Could not release the lock: " + getLockPath(pathInZooKeeper) + '.', e)__		}_	};releases,the,lock,from,the,node,under,the,given,zoo,keeper,path,if,no,lock,exists,then,nothing,happens,param,path,in,zoo,keeper,path,describing,the,zoo,keeper,node,throws,exception,if,the,delete,operation,of,the,lock,node,fails;public,void,release,string,path,in,zoo,keeper,throws,exception,final,string,path,normalize,path,path,in,zoo,keeper,try,client,delete,for,path,get,lock,path,path,catch,keeper,exception,no,node,exception,ignored,catch,exception,e,throw,new,exception,could,not,release,the,lock,get,lock,path,path,in,zoo,keeper,e
ZooKeeperStateHandleStore -> public void release(String pathInZooKeeper) throws Exception;1509630459;Releases the lock from the node under the given ZooKeeper path. If no lock exists, then nothing happens.__@param pathInZooKeeper Path describing the ZooKeeper node_@throws Exception if the delete operation of the lock node fails;public void release(String pathInZooKeeper) throws Exception {_		final String path = normalizePath(pathInZooKeeper)___		try {_			client.delete().forPath(getLockPath(path))__		} catch (KeeperException.NoNodeException ignored) {_			_		} catch (Exception e) {_			throw new Exception("Could not release the lock: " + getLockPath(pathInZooKeeper) + '.', e)__		}_	};releases,the,lock,from,the,node,under,the,given,zoo,keeper,path,if,no,lock,exists,then,nothing,happens,param,path,in,zoo,keeper,path,describing,the,zoo,keeper,node,throws,exception,if,the,delete,operation,of,the,lock,node,fails;public,void,release,string,path,in,zoo,keeper,throws,exception,final,string,path,normalize,path,path,in,zoo,keeper,try,client,delete,for,path,get,lock,path,path,catch,keeper,exception,no,node,exception,ignored,catch,exception,e,throw,new,exception,could,not,release,the,lock,get,lock,path,path,in,zoo,keeper,e
ZooKeeperStateHandleStore -> public void release(String pathInZooKeeper) throws Exception;1529161094;Releases the lock from the node under the given ZooKeeper path. If no lock exists, then nothing happens.__@param pathInZooKeeper Path describing the ZooKeeper node_@throws Exception if the delete operation of the lock node fails;public void release(String pathInZooKeeper) throws Exception {_		final String path = normalizePath(pathInZooKeeper)___		try {_			client.delete().forPath(getLockPath(path))__		} catch (KeeperException.NoNodeException ignored) {_			_		} catch (Exception e) {_			throw new Exception("Could not release the lock: " + getLockPath(pathInZooKeeper) + '.', e)__		}_	};releases,the,lock,from,the,node,under,the,given,zoo,keeper,path,if,no,lock,exists,then,nothing,happens,param,path,in,zoo,keeper,path,describing,the,zoo,keeper,node,throws,exception,if,the,delete,operation,of,the,lock,node,fails;public,void,release,string,path,in,zoo,keeper,throws,exception,final,string,path,normalize,path,path,in,zoo,keeper,try,client,delete,for,path,get,lock,path,path,catch,keeper,exception,no,node,exception,ignored,catch,exception,e,throw,new,exception,could,not,release,the,lock,get,lock,path,path,in,zoo,keeper,e
ZooKeeperStateHandleStore -> public void release(String pathInZooKeeper) throws Exception;1534751191;Releases the lock from the node under the given ZooKeeper path. If no lock exists, then nothing happens.__@param pathInZooKeeper Path describing the ZooKeeper node_@throws Exception if the delete operation of the lock node fails;public void release(String pathInZooKeeper) throws Exception {_		final String path = normalizePath(pathInZooKeeper)___		try {_			client.delete().forPath(getLockPath(path))__		} catch (KeeperException.NoNodeException ignored) {_			_		} catch (Exception e) {_			throw new Exception("Could not release the lock: " + getLockPath(pathInZooKeeper) + '.', e)__		}_	};releases,the,lock,from,the,node,under,the,given,zoo,keeper,path,if,no,lock,exists,then,nothing,happens,param,path,in,zoo,keeper,path,describing,the,zoo,keeper,node,throws,exception,if,the,delete,operation,of,the,lock,node,fails;public,void,release,string,path,in,zoo,keeper,throws,exception,final,string,path,normalize,path,path,in,zoo,keeper,try,client,delete,for,path,get,lock,path,path,catch,keeper,exception,no,node,exception,ignored,catch,exception,e,throw,new,exception,could,not,release,the,lock,get,lock,path,path,in,zoo,keeper,e
ZooKeeperStateHandleStore -> public void release(String pathInZooKeeper) throws Exception;1534756758;Releases the lock from the node under the given ZooKeeper path. If no lock exists, then nothing happens.__@param pathInZooKeeper Path describing the ZooKeeper node_@throws Exception if the delete operation of the lock node fails;public void release(String pathInZooKeeper) throws Exception {_		final String path = normalizePath(pathInZooKeeper)___		try {_			client.delete().forPath(getLockPath(path))__		} catch (KeeperException.NoNodeException ignored) {_			_		} catch (Exception e) {_			throw new Exception("Could not release the lock: " + getLockPath(pathInZooKeeper) + '.', e)__		}_	};releases,the,lock,from,the,node,under,the,given,zoo,keeper,path,if,no,lock,exists,then,nothing,happens,param,path,in,zoo,keeper,path,describing,the,zoo,keeper,node,throws,exception,if,the,delete,operation,of,the,lock,node,fails;public,void,release,string,path,in,zoo,keeper,throws,exception,final,string,path,normalize,path,path,in,zoo,keeper,try,client,delete,for,path,get,lock,path,path,catch,keeper,exception,no,node,exception,ignored,catch,exception,e,throw,new,exception,could,not,release,the,lock,get,lock,path,path,in,zoo,keeper,e
ZooKeeperStateHandleStore -> public void release(String pathInZooKeeper) throws Exception;1536412777;Releases the lock from the node under the given ZooKeeper path. If no lock exists, then nothing happens.__@param pathInZooKeeper Path describing the ZooKeeper node_@throws Exception if the delete operation of the lock node fails;public void release(String pathInZooKeeper) throws Exception {_		final String path = normalizePath(pathInZooKeeper)___		try {_			client.delete().forPath(getLockPath(path))__		} catch (KeeperException.NoNodeException ignored) {_			_		} catch (Exception e) {_			throw new Exception("Could not release the lock: " + getLockPath(pathInZooKeeper) + '.', e)__		}_	};releases,the,lock,from,the,node,under,the,given,zoo,keeper,path,if,no,lock,exists,then,nothing,happens,param,path,in,zoo,keeper,path,describing,the,zoo,keeper,node,throws,exception,if,the,delete,operation,of,the,lock,node,fails;public,void,release,string,path,in,zoo,keeper,throws,exception,final,string,path,normalize,path,path,in,zoo,keeper,try,client,delete,for,path,get,lock,path,path,catch,keeper,exception,no,node,exception,ignored,catch,exception,e,throw,new,exception,could,not,release,the,lock,get,lock,path,path,in,zoo,keeper,e
ZooKeeperStateHandleStore -> public void release(String pathInZooKeeper) throws Exception;1536746131;Releases the lock from the node under the given ZooKeeper path. If no lock exists, then nothing happens.__@param pathInZooKeeper Path describing the ZooKeeper node_@throws Exception if the delete operation of the lock node fails;public void release(String pathInZooKeeper) throws Exception {_		final String path = normalizePath(pathInZooKeeper)___		try {_			client.delete().forPath(getLockPath(path))__		} catch (KeeperException.NoNodeException ignored) {_			_		} catch (Exception e) {_			throw new Exception("Could not release the lock: " + getLockPath(pathInZooKeeper) + '.', e)__		}_	};releases,the,lock,from,the,node,under,the,given,zoo,keeper,path,if,no,lock,exists,then,nothing,happens,param,path,in,zoo,keeper,path,describing,the,zoo,keeper,node,throws,exception,if,the,delete,operation,of,the,lock,node,fails;public,void,release,string,path,in,zoo,keeper,throws,exception,final,string,path,normalize,path,path,in,zoo,keeper,try,client,delete,for,path,get,lock,path,path,catch,keeper,exception,no,node,exception,ignored,catch,exception,e,throw,new,exception,could,not,release,the,lock,get,lock,path,path,in,zoo,keeper,e
ZooKeeperStateHandleStore -> public void release(String pathInZooKeeper) throws Exception;1546977736;Releases the lock from the node under the given ZooKeeper path. If no lock exists, then nothing happens.__@param pathInZooKeeper Path describing the ZooKeeper node_@throws Exception if the delete operation of the lock node fails;public void release(String pathInZooKeeper) throws Exception {_		final String path = normalizePath(pathInZooKeeper)___		try {_			client.delete().forPath(getLockPath(path))__		} catch (KeeperException.NoNodeException ignored) {_			_		} catch (Exception e) {_			throw new Exception("Could not release the lock: " + getLockPath(pathInZooKeeper) + '.', e)__		}_	};releases,the,lock,from,the,node,under,the,given,zoo,keeper,path,if,no,lock,exists,then,nothing,happens,param,path,in,zoo,keeper,path,describing,the,zoo,keeper,node,throws,exception,if,the,delete,operation,of,the,lock,node,fails;public,void,release,string,path,in,zoo,keeper,throws,exception,final,string,path,normalize,path,path,in,zoo,keeper,try,client,delete,for,path,get,lock,path,path,catch,keeper,exception,no,node,exception,ignored,catch,exception,e,throw,new,exception,could,not,release,the,lock,get,lock,path,path,in,zoo,keeper,e
ZooKeeperStateHandleStore -> protected String getLockPath(String rootPath);1495025524;Returns the path for the lock node relative to the given path.__@param rootPath Root path under which the lock node shall be created_@return Path for the lock node;protected String getLockPath(String rootPath) {_		return rootPath + '/' + lockNode__	};returns,the,path,for,the,lock,node,relative,to,the,given,path,param,root,path,root,path,under,which,the,lock,node,shall,be,created,return,path,for,the,lock,node;protected,string,get,lock,path,string,root,path,return,root,path,lock,node
ZooKeeperStateHandleStore -> protected String getLockPath(String rootPath);1508665243;Returns the path for the lock node relative to the given path.__@param rootPath Root path under which the lock node shall be created_@return Path for the lock node;protected String getLockPath(String rootPath) {_		return rootPath + '/' + lockNode__	};returns,the,path,for,the,lock,node,relative,to,the,given,path,param,root,path,root,path,under,which,the,lock,node,shall,be,created,return,path,for,the,lock,node;protected,string,get,lock,path,string,root,path,return,root,path,lock,node
ZooKeeperStateHandleStore -> protected String getLockPath(String rootPath);1509630459;Returns the path for the lock node relative to the given path.__@param rootPath Root path under which the lock node shall be created_@return Path for the lock node;protected String getLockPath(String rootPath) {_		return rootPath + '/' + lockNode__	};returns,the,path,for,the,lock,node,relative,to,the,given,path,param,root,path,root,path,under,which,the,lock,node,shall,be,created,return,path,for,the,lock,node;protected,string,get,lock,path,string,root,path,return,root,path,lock,node
ZooKeeperStateHandleStore -> protected String getLockPath(String rootPath);1529161094;Returns the path for the lock node relative to the given path.__@param rootPath Root path under which the lock node shall be created_@return Path for the lock node;protected String getLockPath(String rootPath) {_		return rootPath + '/' + lockNode__	};returns,the,path,for,the,lock,node,relative,to,the,given,path,param,root,path,root,path,under,which,the,lock,node,shall,be,created,return,path,for,the,lock,node;protected,string,get,lock,path,string,root,path,return,root,path,lock,node
ZooKeeperStateHandleStore -> protected String getLockPath(String rootPath);1534751191;Returns the path for the lock node relative to the given path.__@param rootPath Root path under which the lock node shall be created_@return Path for the lock node;protected String getLockPath(String rootPath) {_		return rootPath + '/' + lockNode__	};returns,the,path,for,the,lock,node,relative,to,the,given,path,param,root,path,root,path,under,which,the,lock,node,shall,be,created,return,path,for,the,lock,node;protected,string,get,lock,path,string,root,path,return,root,path,lock,node
ZooKeeperStateHandleStore -> protected String getLockPath(String rootPath);1534756758;Returns the path for the lock node relative to the given path.__@param rootPath Root path under which the lock node shall be created_@return Path for the lock node;protected String getLockPath(String rootPath) {_		return rootPath + '/' + lockNode__	};returns,the,path,for,the,lock,node,relative,to,the,given,path,param,root,path,root,path,under,which,the,lock,node,shall,be,created,return,path,for,the,lock,node;protected,string,get,lock,path,string,root,path,return,root,path,lock,node
ZooKeeperStateHandleStore -> protected String getLockPath(String rootPath);1536412777;Returns the path for the lock node relative to the given path.__@param rootPath Root path under which the lock node shall be created_@return Path for the lock node;protected String getLockPath(String rootPath) {_		return rootPath + '/' + lockNode__	};returns,the,path,for,the,lock,node,relative,to,the,given,path,param,root,path,root,path,under,which,the,lock,node,shall,be,created,return,path,for,the,lock,node;protected,string,get,lock,path,string,root,path,return,root,path,lock,node
ZooKeeperStateHandleStore -> protected String getLockPath(String rootPath);1536746131;Returns the path for the lock node relative to the given path.__@param rootPath Root path under which the lock node shall be created_@return Path for the lock node;protected String getLockPath(String rootPath) {_		return rootPath + '/' + lockNode__	};returns,the,path,for,the,lock,node,relative,to,the,given,path,param,root,path,root,path,under,which,the,lock,node,shall,be,created,return,path,for,the,lock,node;protected,string,get,lock,path,string,root,path,return,root,path,lock,node
ZooKeeperStateHandleStore -> protected String getLockPath(String rootPath);1546977736;Returns the path for the lock node relative to the given path.__@param rootPath Root path under which the lock node shall be created_@return Path for the lock node;protected String getLockPath(String rootPath) {_		return rootPath + '/' + lockNode__	};returns,the,path,for,the,lock,node,relative,to,the,given,path,param,root,path,root,path,under,which,the,lock,node,shall,be,created,return,path,for,the,lock,node;protected,string,get,lock,path,string,root,path,return,root,path,lock,node
ZooKeeperStateHandleStore -> public void removeAndDiscardAllState() throws Exception;1441121146;Discards all available state handles and removes them from ZooKeeper.__@throws Exception If a ZooKeeper or state handle operation fails;public void removeAndDiscardAllState() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> allStateHandles = getAll()___		ZKPaths.deleteChildren(_				client.getZookeeperClient().getZooKeeper(),_				ZKPaths.fixForNamespace(client.getNamespace(), "/"),_				false)___		_		for (Tuple2<StateHandle<T>, String> stateHandleAndPath : allStateHandles) {_			stateHandleAndPath.f0.discardState()__		}_	};discards,all,available,state,handles,and,removes,them,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,all,state,throws,exception,final,list,tuple2,state,handle,t,string,all,state,handles,get,all,zkpaths,delete,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,false,for,tuple2,state,handle,t,string,state,handle,and,path,all,state,handles,state,handle,and,path,f0,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardAllState() throws Exception;1445247002;Discards all available state handles and removes them from ZooKeeper.__@throws Exception If a ZooKeeper or state handle operation fails;public void removeAndDiscardAllState() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> allStateHandles = getAll()___		ZKPaths.deleteChildren(_				client.getZookeeperClient().getZooKeeper(),_				ZKPaths.fixForNamespace(client.getNamespace(), "/"),_				false)___		_		for (Tuple2<StateHandle<T>, String> stateHandleAndPath : allStateHandles) {_			stateHandleAndPath.f0.discardState()__		}_	};discards,all,available,state,handles,and,removes,them,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,all,state,throws,exception,final,list,tuple2,state,handle,t,string,all,state,handles,get,all,zkpaths,delete,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,false,for,tuple2,state,handle,t,string,state,handle,and,path,all,state,handles,state,handle,and,path,f0,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardAllState() throws Exception;1445550685;Discards all available state handles and removes them from ZooKeeper.__@throws Exception If a ZooKeeper or state handle operation fails;public void removeAndDiscardAllState() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> allStateHandles = getAll()___		ZKPaths.deleteChildren(_				client.getZookeeperClient().getZooKeeper(),_				ZKPaths.fixForNamespace(client.getNamespace(), "/"),_				false)___		_		for (Tuple2<StateHandle<T>, String> stateHandleAndPath : allStateHandles) {_			stateHandleAndPath.f0.discardState()__		}_	};discards,all,available,state,handles,and,removes,them,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,all,state,throws,exception,final,list,tuple2,state,handle,t,string,all,state,handles,get,all,zkpaths,delete,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,false,for,tuple2,state,handle,t,string,state,handle,and,path,all,state,handles,state,handle,and,path,f0,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardAllState() throws Exception;1465394479;Discards all available state handles and removes them from ZooKeeper.__@throws Exception If a ZooKeeper or state handle operation fails;public void removeAndDiscardAllState() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> allStateHandles = getAll()___		ZKPaths.deleteChildren(_				client.getZookeeperClient().getZooKeeper(),_				ZKPaths.fixForNamespace(client.getNamespace(), "/"),_				false)___		_		for (Tuple2<StateHandle<T>, String> stateHandleAndPath : allStateHandles) {_			stateHandleAndPath.f0.discardState()__		}_	};discards,all,available,state,handles,and,removes,them,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,all,state,throws,exception,final,list,tuple2,state,handle,t,string,all,state,handles,get,all,zkpaths,delete,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,false,for,tuple2,state,handle,t,string,state,handle,and,path,all,state,handles,state,handle,and,path,f0,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardAllState() throws Exception;1468938623;Discards all available state handles and removes them from ZooKeeper.__@throws Exception If a ZooKeeper or state handle operation fails;public void removeAndDiscardAllState() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> allStateHandles = getAll()___		ZKPaths.deleteChildren(_				client.getZookeeperClient().getZooKeeper(),_				ZKPaths.fixForNamespace(client.getNamespace(), "/"),_				false)___		_		for (Tuple2<StateHandle<T>, String> stateHandleAndPath : allStateHandles) {_			stateHandleAndPath.f0.discardState()__		}_	};discards,all,available,state,handles,and,removes,them,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,all,state,throws,exception,final,list,tuple2,state,handle,t,string,all,state,handles,get,all,zkpaths,delete,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,false,for,tuple2,state,handle,t,string,state,handle,and,path,all,state,handles,state,handle,and,path,f0,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardAllState() throws Exception;1470909547;Discards all available state handles and removes them from ZooKeeper.__@throws Exception If a ZooKeeper or state handle operation fails;public void removeAndDiscardAllState() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> allStateHandles = getAll()___		ZKPaths.deleteChildren(_				client.getZookeeperClient().getZooKeeper(),_				ZKPaths.fixForNamespace(client.getNamespace(), "/"),_				false)___		_		for (Tuple2<RetrievableStateHandle<T>, String> stateHandleAndPath : allStateHandles) {_			stateHandleAndPath.f0.discardState()__		}_	};discards,all,available,state,handles,and,removes,them,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,all,state,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,all,state,handles,get,all,zkpaths,delete,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,false,for,tuple2,retrievable,state,handle,t,string,state,handle,and,path,all,state,handles,state,handle,and,path,f0,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardAllState() throws Exception;1475656513;Discards all available state handles and removes them from ZooKeeper.__@throws Exception If a ZooKeeper or state handle operation fails;public void removeAndDiscardAllState() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> allStateHandles = getAll()___		ZKPaths.deleteChildren(_				client.getZookeeperClient().getZooKeeper(),_				ZKPaths.fixForNamespace(client.getNamespace(), "/"),_				false)___		_		for (Tuple2<RetrievableStateHandle<T>, String> stateHandleAndPath : allStateHandles) {_			stateHandleAndPath.f0.discardState()__		}_	};discards,all,available,state,handles,and,removes,them,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,all,state,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,all,state,handles,get,all,zkpaths,delete,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,false,for,tuple2,retrievable,state,handle,t,string,state,handle,and,path,all,state,handles,state,handle,and,path,f0,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardAllState() throws Exception;1479246304;Discards all available state handles and removes them from ZooKeeper.__@throws Exception If a ZooKeeper or state handle operation fails;public void removeAndDiscardAllState() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> allStateHandles = getAll()___		ZKPaths.deleteChildren(_				client.getZookeeperClient().getZooKeeper(),_				ZKPaths.fixForNamespace(client.getNamespace(), "/"),_				false)___		_		for (Tuple2<RetrievableStateHandle<T>, String> stateHandleAndPath : allStateHandles) {_			stateHandleAndPath.f0.discardState()__		}_	};discards,all,available,state,handles,and,removes,them,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,all,state,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,all,state,handles,get,all,zkpaths,delete,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,false,for,tuple2,retrievable,state,handle,t,string,state,handle,and,path,all,state,handles,state,handle,and,path,f0,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardAllState() throws Exception;1480437068;Discards all available state handles and removes them from ZooKeeper.__@throws Exception If a ZooKeeper or state handle operation fails;public void removeAndDiscardAllState() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> allStateHandles = getAll()___		ZKPaths.deleteChildren(_				client.getZookeeperClient().getZooKeeper(),_				ZKPaths.fixForNamespace(client.getNamespace(), "/"),_				false)___		_		for (Tuple2<RetrievableStateHandle<T>, String> stateHandleAndPath : allStateHandles) {_			stateHandleAndPath.f0.discardState()__		}_	};discards,all,available,state,handles,and,removes,them,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,all,state,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,all,state,handles,get,all,zkpaths,delete,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,false,for,tuple2,retrievable,state,handle,t,string,state,handle,and,path,all,state,handles,state,handle,and,path,f0,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardAllState() throws Exception;1488387821;Discards all available state handles and removes them from ZooKeeper.__@throws Exception If a ZooKeeper or state handle operation fails;public void removeAndDiscardAllState() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> allStateHandles = getAll()___		ZKPaths.deleteChildren(_				client.getZookeeperClient().getZooKeeper(),_				ZKPaths.fixForNamespace(client.getNamespace(), "/"),_				false)___		_		for (Tuple2<RetrievableStateHandle<T>, String> stateHandleAndPath : allStateHandles) {_			stateHandleAndPath.f0.discardState()__		}_	};discards,all,available,state,handles,and,removes,them,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,all,state,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,all,state,handles,get,all,zkpaths,delete,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,false,for,tuple2,retrievable,state,handle,t,string,state,handle,and,path,all,state,handles,state,handle,and,path,f0,discard,state
ZooKeeperStateHandleStore -> public void releaseAndTryRemove( 			String pathInZooKeeper, 			@Nullable final RemoveCallback<T> callback) throws Exception;1495025524;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._The deletion of the state node is executed asynchronously. After the state node has been deleted, the given_callback is called with the {@link RetrievableStateHandle} of the deleted state node.__<p><strong>Important</strong>: This also discards the stored state handle after the given action_has been executed.__@param pathInZooKeeper Path of state handle to remove_@param callback The callback to execute after a successful deletion. Null if no action needs to be executed._@throws Exception If the ZooKeeper operation fails;public void releaseAndTryRemove(_			String pathInZooKeeper,_			@Nullable final RemoveCallback<T> callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> stateHandle = null___		try {_			stateHandle = get(path, false)__		} catch (Exception e) {_			LOG.warn("Could not retrieve the state handle from node " + path + '.', e)__		}__		release(pathInZooKeeper)___		final BackgroundCallback backgroundCallback = new RemoveBackgroundCallback<>(stateHandle, callback, path)___		client.delete().inBackground(backgroundCallback, executor).forPath(path)__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,the,deletion,of,the,state,node,is,executed,asynchronously,after,the,state,node,has,been,deleted,the,given,callback,is,called,with,the,link,retrievable,state,handle,of,the,deleted,state,node,p,strong,important,strong,this,also,discards,the,stored,state,handle,after,the,given,action,has,been,executed,param,path,in,zoo,keeper,path,of,state,handle,to,remove,param,callback,the,callback,to,execute,after,a,successful,deletion,null,if,no,action,needs,to,be,executed,throws,exception,if,the,zoo,keeper,operation,fails;public,void,release,and,try,remove,string,path,in,zoo,keeper,nullable,final,remove,callback,t,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,null,try,state,handle,get,path,false,catch,exception,e,log,warn,could,not,retrieve,the,state,handle,from,node,path,e,release,path,in,zoo,keeper,final,background,callback,background,callback,new,remove,background,callback,state,handle,callback,path,client,delete,in,background,background,callback,executor,for,path,path
ZooKeeperStateHandleStore -> public void releaseAndTryRemove( 			String pathInZooKeeper, 			@Nullable final RemoveCallback<T> callback) throws Exception;1508665243;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._The deletion of the state node is executed asynchronously. After the state node has been deleted, the given_callback is called with the {@link RetrievableStateHandle} of the deleted state node.__<p><strong>Important</strong>: This also discards the stored state handle after the given action_has been executed.__@param pathInZooKeeper Path of state handle to remove_@param callback The callback to execute after a successful deletion. Null if no action needs to be executed._@throws Exception If the ZooKeeper operation fails;public void releaseAndTryRemove(_			String pathInZooKeeper,_			@Nullable final RemoveCallback<T> callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> stateHandle = null___		try {_			stateHandle = get(path, false)__		} catch (Exception e) {_			LOG.warn("Could not retrieve the state handle from node " + path + '.', e)__		}__		release(pathInZooKeeper)___		final BackgroundCallback backgroundCallback = new RemoveBackgroundCallback<>(stateHandle, callback, path)___		client.delete().inBackground(backgroundCallback, executor).forPath(path)__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,the,deletion,of,the,state,node,is,executed,asynchronously,after,the,state,node,has,been,deleted,the,given,callback,is,called,with,the,link,retrievable,state,handle,of,the,deleted,state,node,p,strong,important,strong,this,also,discards,the,stored,state,handle,after,the,given,action,has,been,executed,param,path,in,zoo,keeper,path,of,state,handle,to,remove,param,callback,the,callback,to,execute,after,a,successful,deletion,null,if,no,action,needs,to,be,executed,throws,exception,if,the,zoo,keeper,operation,fails;public,void,release,and,try,remove,string,path,in,zoo,keeper,nullable,final,remove,callback,t,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,null,try,state,handle,get,path,false,catch,exception,e,log,warn,could,not,retrieve,the,state,handle,from,node,path,e,release,path,in,zoo,keeper,final,background,callback,background,callback,new,remove,background,callback,state,handle,callback,path,client,delete,in,background,background,callback,executor,for,path,path
ZooKeeperStateHandleStore -> public void releaseAndTryRemove( 			String pathInZooKeeper, 			@Nullable final RemoveCallback<T> callback) throws Exception;1509630459;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._The deletion of the state node is executed asynchronously. After the state node has been deleted, the given_callback is called with the {@link RetrievableStateHandle} of the deleted state node.__<p><strong>Important</strong>: This also discards the stored state handle after the given action_has been executed.__@param pathInZooKeeper Path of state handle to remove_@param callback The callback to execute after a successful deletion. Null if no action needs to be executed._@throws Exception If the ZooKeeper operation fails;public void releaseAndTryRemove(_			String pathInZooKeeper,_			@Nullable final RemoveCallback<T> callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> stateHandle = null___		try {_			stateHandle = get(path, false)__		} catch (Exception e) {_			LOG.warn("Could not retrieve the state handle from node " + path + '.', e)__		}__		release(pathInZooKeeper)___		final BackgroundCallback backgroundCallback = new RemoveBackgroundCallback<>(stateHandle, callback, path)___		client.delete().inBackground(backgroundCallback, executor).forPath(path)__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,the,deletion,of,the,state,node,is,executed,asynchronously,after,the,state,node,has,been,deleted,the,given,callback,is,called,with,the,link,retrievable,state,handle,of,the,deleted,state,node,p,strong,important,strong,this,also,discards,the,stored,state,handle,after,the,given,action,has,been,executed,param,path,in,zoo,keeper,path,of,state,handle,to,remove,param,callback,the,callback,to,execute,after,a,successful,deletion,null,if,no,action,needs,to,be,executed,throws,exception,if,the,zoo,keeper,operation,fails;public,void,release,and,try,remove,string,path,in,zoo,keeper,nullable,final,remove,callback,t,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,null,try,state,handle,get,path,false,catch,exception,e,log,warn,could,not,retrieve,the,state,handle,from,node,path,e,release,path,in,zoo,keeper,final,background,callback,background,callback,new,remove,background,callback,state,handle,callback,path,client,delete,in,background,background,callback,executor,for,path,path
ZooKeeperStateHandleStore -> public void releaseAndTryRemove( 			String pathInZooKeeper, 			@Nullable final RemoveCallback<T> callback) throws Exception;1529161094;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._The deletion of the state node is executed asynchronously. After the state node has been deleted, the given_callback is called with the {@link RetrievableStateHandle} of the deleted state node.__<p><strong>Important</strong>: This also discards the stored state handle after the given action_has been executed.__@param pathInZooKeeper Path of state handle to remove_@param callback The callback to execute after a successful deletion. Null if no action needs to be executed._@throws Exception If the ZooKeeper operation fails;public void releaseAndTryRemove(_			String pathInZooKeeper,_			@Nullable final RemoveCallback<T> callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> stateHandle = null___		try {_			stateHandle = get(path, false)__		} catch (Exception e) {_			LOG.warn("Could not retrieve the state handle from node " + path + '.', e)__		}__		release(pathInZooKeeper)___		final BackgroundCallback backgroundCallback = new RemoveBackgroundCallback<>(stateHandle, callback, path)___		client.delete().inBackground(backgroundCallback, executor).forPath(path)__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,the,deletion,of,the,state,node,is,executed,asynchronously,after,the,state,node,has,been,deleted,the,given,callback,is,called,with,the,link,retrievable,state,handle,of,the,deleted,state,node,p,strong,important,strong,this,also,discards,the,stored,state,handle,after,the,given,action,has,been,executed,param,path,in,zoo,keeper,path,of,state,handle,to,remove,param,callback,the,callback,to,execute,after,a,successful,deletion,null,if,no,action,needs,to,be,executed,throws,exception,if,the,zoo,keeper,operation,fails;public,void,release,and,try,remove,string,path,in,zoo,keeper,nullable,final,remove,callback,t,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,null,try,state,handle,get,path,false,catch,exception,e,log,warn,could,not,retrieve,the,state,handle,from,node,path,e,release,path,in,zoo,keeper,final,background,callback,background,callback,new,remove,background,callback,state,handle,callback,path,client,delete,in,background,background,callback,executor,for,path,path
ZooKeeperStateHandleStore -> public void releaseAndTryRemove( 			String pathInZooKeeper, 			@Nullable final RemoveCallback<T> callback) throws Exception;1534751191;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._The deletion of the state node is executed asynchronously. After the state node has been deleted, the given_callback is called with the {@link RetrievableStateHandle} of the deleted state node.__<p><strong>Important</strong>: This also discards the stored state handle after the given action_has been executed.__@param pathInZooKeeper Path of state handle to remove_@param callback The callback to execute after a successful deletion. Null if no action needs to be executed._@throws Exception If the ZooKeeper operation fails;public void releaseAndTryRemove(_			String pathInZooKeeper,_			@Nullable final RemoveCallback<T> callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> stateHandle = null___		try {_			stateHandle = get(path, false)__		} catch (Exception e) {_			LOG.warn("Could not retrieve the state handle from node " + path + '.', e)__		}__		release(pathInZooKeeper)___		final BackgroundCallback backgroundCallback = new RemoveBackgroundCallback<>(stateHandle, callback, path)___		client.delete().inBackground(backgroundCallback, executor).forPath(path)__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,the,deletion,of,the,state,node,is,executed,asynchronously,after,the,state,node,has,been,deleted,the,given,callback,is,called,with,the,link,retrievable,state,handle,of,the,deleted,state,node,p,strong,important,strong,this,also,discards,the,stored,state,handle,after,the,given,action,has,been,executed,param,path,in,zoo,keeper,path,of,state,handle,to,remove,param,callback,the,callback,to,execute,after,a,successful,deletion,null,if,no,action,needs,to,be,executed,throws,exception,if,the,zoo,keeper,operation,fails;public,void,release,and,try,remove,string,path,in,zoo,keeper,nullable,final,remove,callback,t,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,null,try,state,handle,get,path,false,catch,exception,e,log,warn,could,not,retrieve,the,state,handle,from,node,path,e,release,path,in,zoo,keeper,final,background,callback,background,callback,new,remove,background,callback,state,handle,callback,path,client,delete,in,background,background,callback,executor,for,path,path
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception;1441121146;Removes a state handle from ZooKeeper asynchronously.__<p><stong>Important</stong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@param callback        The callback after the operation finishes_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(callback, "Background callback")___		client.delete().deletingChildrenIfNeeded().inBackground(callback).forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,asynchronously,p,stong,important,stong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,param,callback,the,callback,after,the,operation,finishes,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,background,callback,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,callback,background,callback,client,delete,deleting,children,if,needed,in,background,callback,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception;1445247002;Removes a state handle from ZooKeeper asynchronously.__<p><stong>Important</stong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@param callback        The callback after the operation finishes_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(callback, "Background callback")___		client.delete().deletingChildrenIfNeeded().inBackground(callback).forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,asynchronously,p,stong,important,stong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,param,callback,the,callback,after,the,operation,finishes,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,background,callback,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,callback,background,callback,client,delete,deleting,children,if,needed,in,background,callback,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception;1445550685;Removes a state handle from ZooKeeper asynchronously.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@param callback        The callback after the operation finishes_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(callback, "Background callback")___		client.delete().deletingChildrenIfNeeded().inBackground(callback).forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,asynchronously,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,param,callback,the,callback,after,the,operation,finishes,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,background,callback,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,callback,background,callback,client,delete,deleting,children,if,needed,in,background,callback,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception;1465394479;Removes a state handle from ZooKeeper asynchronously.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@param callback        The callback after the operation finishes_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(callback, "Background callback")___		client.delete().deletingChildrenIfNeeded().inBackground(callback).forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,asynchronously,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,param,callback,the,callback,after,the,operation,finishes,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,background,callback,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,callback,background,callback,client,delete,deleting,children,if,needed,in,background,callback,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception;1468938623;Removes a state handle from ZooKeeper asynchronously.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@param callback        The callback after the operation finishes_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(callback, "Background callback")___		client.delete().deletingChildrenIfNeeded().inBackground(callback).forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,asynchronously,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,param,callback,the,callback,after,the,operation,finishes,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,background,callback,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,callback,background,callback,client,delete,deleting,children,if,needed,in,background,callback,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception;1470909547;Removes a state handle from ZooKeeper asynchronously.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@param callback        The callback after the operation finishes_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(callback, "Background callback")___		client.delete().deletingChildrenIfNeeded().inBackground(callback).forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,asynchronously,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,param,callback,the,callback,after,the,operation,finishes,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,background,callback,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,callback,background,callback,client,delete,deleting,children,if,needed,in,background,callback,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception;1475656513;Removes a state handle from ZooKeeper asynchronously.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@param callback        The callback after the operation finishes_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(callback, "Background callback")___		client.delete().deletingChildrenIfNeeded().inBackground(callback).forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,asynchronously,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,param,callback,the,callback,after,the,operation,finishes,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,background,callback,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,callback,background,callback,client,delete,deleting,children,if,needed,in,background,callback,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception;1479246304;Removes a state handle from ZooKeeper asynchronously.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@param callback        The callback after the operation finishes_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(callback, "Background callback")___		client.delete().deletingChildrenIfNeeded().inBackground(callback, executor).forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,asynchronously,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,param,callback,the,callback,after,the,operation,finishes,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,background,callback,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,callback,background,callback,client,delete,deleting,children,if,needed,in,background,callback,executor,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception;1480437068;Removes a state handle from ZooKeeper asynchronously.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@param callback        The callback after the operation finishes_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(callback, "Background callback")___		client.delete().deletingChildrenIfNeeded().inBackground(callback, executor).forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,asynchronously,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,param,callback,the,callback,after,the,operation,finishes,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,background,callback,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,callback,background,callback,client,delete,deleting,children,if,needed,in,background,callback,executor,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception;1488387821;Removes a state handle from ZooKeeper asynchronously.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@param callback        The callback after the operation finishes_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper, BackgroundCallback callback) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(callback, "Background callback")___		client.delete().deletingChildrenIfNeeded().inBackground(callback, executor).forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,asynchronously,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,param,callback,the,callback,after,the,operation,finishes,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,background,callback,callback,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,callback,background,callback,client,delete,deleting,children,if,needed,in,background,callback,executor,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public StateHandle<T> add(String pathInZooKeeper, T state) throws Exception;1441121146;Creates a state handle and stores it in ZooKeeper with create mode {@link_CreateMode#PERSISTENT}.__@see #add(String, Serializable, CreateMode);public StateHandle<T> add(String pathInZooKeeper, T state) throws Exception {_		return add(pathInZooKeeper, state, CreateMode.PERSISTENT)__	};creates,a,state,handle,and,stores,it,in,zoo,keeper,with,create,mode,link,create,mode,persistent,see,add,string,serializable,create,mode;public,state,handle,t,add,string,path,in,zoo,keeper,t,state,throws,exception,return,add,path,in,zoo,keeper,state,create,mode,persistent
ZooKeeperStateHandleStore -> public StateHandle<T> add(String pathInZooKeeper, T state) throws Exception;1445247002;Creates a state handle and stores it in ZooKeeper with create mode {@link_CreateMode#PERSISTENT}.__@see #add(String, Serializable, CreateMode);public StateHandle<T> add(String pathInZooKeeper, T state) throws Exception {_		return add(pathInZooKeeper, state, CreateMode.PERSISTENT)__	};creates,a,state,handle,and,stores,it,in,zoo,keeper,with,create,mode,link,create,mode,persistent,see,add,string,serializable,create,mode;public,state,handle,t,add,string,path,in,zoo,keeper,t,state,throws,exception,return,add,path,in,zoo,keeper,state,create,mode,persistent
ZooKeeperStateHandleStore -> public StateHandle<T> add(String pathInZooKeeper, T state) throws Exception;1445550685;Creates a state handle and stores it in ZooKeeper with create mode {@link_CreateMode#PERSISTENT}.__@see #add(String, Serializable, CreateMode);public StateHandle<T> add(String pathInZooKeeper, T state) throws Exception {_		return add(pathInZooKeeper, state, CreateMode.PERSISTENT)__	};creates,a,state,handle,and,stores,it,in,zoo,keeper,with,create,mode,link,create,mode,persistent,see,add,string,serializable,create,mode;public,state,handle,t,add,string,path,in,zoo,keeper,t,state,throws,exception,return,add,path,in,zoo,keeper,state,create,mode,persistent
ZooKeeperStateHandleStore -> public StateHandle<T> add(String pathInZooKeeper, T state) throws Exception;1465394479;Creates a state handle and stores it in ZooKeeper with create mode {@link_CreateMode#PERSISTENT}.__@see #add(String, Serializable, CreateMode);public StateHandle<T> add(String pathInZooKeeper, T state) throws Exception {_		return add(pathInZooKeeper, state, CreateMode.PERSISTENT)__	};creates,a,state,handle,and,stores,it,in,zoo,keeper,with,create,mode,link,create,mode,persistent,see,add,string,serializable,create,mode;public,state,handle,t,add,string,path,in,zoo,keeper,t,state,throws,exception,return,add,path,in,zoo,keeper,state,create,mode,persistent
ZooKeeperStateHandleStore -> public StateHandle<T> add(String pathInZooKeeper, T state) throws Exception;1468938623;Creates a state handle and stores it in ZooKeeper with create mode {@link_CreateMode#PERSISTENT}.__@see #add(String, Serializable, CreateMode);public StateHandle<T> add(String pathInZooKeeper, T state) throws Exception {_		return add(pathInZooKeeper, state, CreateMode.PERSISTENT)__	};creates,a,state,handle,and,stores,it,in,zoo,keeper,with,create,mode,link,create,mode,persistent,see,add,string,serializable,create,mode;public,state,handle,t,add,string,path,in,zoo,keeper,t,state,throws,exception,return,add,path,in,zoo,keeper,state,create,mode,persistent
ZooKeeperStateHandleStore -> public void removeAndDiscardState(String pathInZooKeeper) throws Exception;1441121146;Discards a state handle and removes it from ZooKeeper.__<p>If you only want to remove the state handle in ZooKeeper call {@link #remove(String)}.__@param pathInZooKeeper Path of state handle to discard (expected to start with a '/')_@throws Exception If the ZooKeeper or state handle operation fails;public void removeAndDiscardState(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		StateHandle<T> stateHandle = get(pathInZooKeeper)___		_		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)___		_		_		_		stateHandle.discardState()__	};discards,a,state,handle,and,removes,it,from,zoo,keeper,p,if,you,only,want,to,remove,the,state,handle,in,zoo,keeper,call,link,remove,string,param,path,in,zoo,keeper,path,of,state,handle,to,discard,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,state,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,state,handle,t,state,handle,get,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper,state,handle,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardState(String pathInZooKeeper) throws Exception;1445247002;Discards a state handle and removes it from ZooKeeper.__<p>If you only want to remove the state handle in ZooKeeper call {@link #remove(String)}.__@param pathInZooKeeper Path of state handle to discard (expected to start with a '/')_@throws Exception If the ZooKeeper or state handle operation fails;public void removeAndDiscardState(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		StateHandle<T> stateHandle = get(pathInZooKeeper)___		_		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)___		_		_		_		stateHandle.discardState()__	};discards,a,state,handle,and,removes,it,from,zoo,keeper,p,if,you,only,want,to,remove,the,state,handle,in,zoo,keeper,call,link,remove,string,param,path,in,zoo,keeper,path,of,state,handle,to,discard,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,state,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,state,handle,t,state,handle,get,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper,state,handle,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardState(String pathInZooKeeper) throws Exception;1445550685;Discards a state handle and removes it from ZooKeeper.__<p>If you only want to remove the state handle in ZooKeeper call {@link #remove(String)}.__@param pathInZooKeeper Path of state handle to discard (expected to start with a '/')_@throws Exception If the ZooKeeper or state handle operation fails;public void removeAndDiscardState(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		StateHandle<T> stateHandle = get(pathInZooKeeper)___		_		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)___		_		_		_		stateHandle.discardState()__	};discards,a,state,handle,and,removes,it,from,zoo,keeper,p,if,you,only,want,to,remove,the,state,handle,in,zoo,keeper,call,link,remove,string,param,path,in,zoo,keeper,path,of,state,handle,to,discard,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,state,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,state,handle,t,state,handle,get,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper,state,handle,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardState(String pathInZooKeeper) throws Exception;1465394479;Discards a state handle and removes it from ZooKeeper.__<p>If you only want to remove the state handle in ZooKeeper call {@link #remove(String)}.__@param pathInZooKeeper Path of state handle to discard (expected to start with a '/')_@throws Exception If the ZooKeeper or state handle operation fails;public void removeAndDiscardState(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		StateHandle<T> stateHandle = get(pathInZooKeeper)___		_		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)___		_		_		_		stateHandle.discardState()__	};discards,a,state,handle,and,removes,it,from,zoo,keeper,p,if,you,only,want,to,remove,the,state,handle,in,zoo,keeper,call,link,remove,string,param,path,in,zoo,keeper,path,of,state,handle,to,discard,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,state,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,state,handle,t,state,handle,get,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper,state,handle,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardState(String pathInZooKeeper) throws Exception;1468938623;Discards a state handle and removes it from ZooKeeper.__<p>If you only want to remove the state handle in ZooKeeper call {@link #remove(String)}.__@param pathInZooKeeper Path of state handle to discard (expected to start with a '/')_@throws Exception If the ZooKeeper or state handle operation fails;public void removeAndDiscardState(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		StateHandle<T> stateHandle = get(pathInZooKeeper)___		_		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)___		_		_		_		stateHandle.discardState()__	};discards,a,state,handle,and,removes,it,from,zoo,keeper,p,if,you,only,want,to,remove,the,state,handle,in,zoo,keeper,call,link,remove,string,param,path,in,zoo,keeper,path,of,state,handle,to,discard,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,state,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,state,handle,t,state,handle,get,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper,state,handle,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardState(String pathInZooKeeper) throws Exception;1470909547;Discards a state handle and removes it from ZooKeeper.__<p>If you only want to remove the state handle in ZooKeeper call {@link #remove(String)}.__@param pathInZooKeeper Path of state handle to discard (expected to start with a '/')_@throws Exception If the ZooKeeper or state handle operation fails;public void removeAndDiscardState(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		RetrievableStateHandle<T> stateHandle = get(pathInZooKeeper)___		_		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)___		_		_		_		stateHandle.discardState()__	};discards,a,state,handle,and,removes,it,from,zoo,keeper,p,if,you,only,want,to,remove,the,state,handle,in,zoo,keeper,call,link,remove,string,param,path,in,zoo,keeper,path,of,state,handle,to,discard,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,state,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,get,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper,state,handle,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardState(String pathInZooKeeper) throws Exception;1475656513;Discards a state handle and removes it from ZooKeeper.__<p>If you only want to remove the state handle in ZooKeeper call {@link #remove(String)}.__@param pathInZooKeeper Path of state handle to discard (expected to start with a '/')_@throws Exception If the ZooKeeper or state handle operation fails;public void removeAndDiscardState(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		RetrievableStateHandle<T> stateHandle = get(pathInZooKeeper)___		_		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)___		_		_		_		stateHandle.discardState()__	};discards,a,state,handle,and,removes,it,from,zoo,keeper,p,if,you,only,want,to,remove,the,state,handle,in,zoo,keeper,call,link,remove,string,param,path,in,zoo,keeper,path,of,state,handle,to,discard,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,state,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,get,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper,state,handle,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardState(String pathInZooKeeper) throws Exception;1479246304;Discards a state handle and removes it from ZooKeeper.__<p>If you only want to remove the state handle in ZooKeeper call {@link #remove(String)}.__@param pathInZooKeeper Path of state handle to discard (expected to start with a '/')_@throws Exception If the ZooKeeper or state handle operation fails;public void removeAndDiscardState(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		RetrievableStateHandle<T> stateHandle = get(pathInZooKeeper)___		_		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)___		_		_		_		stateHandle.discardState()__	};discards,a,state,handle,and,removes,it,from,zoo,keeper,p,if,you,only,want,to,remove,the,state,handle,in,zoo,keeper,call,link,remove,string,param,path,in,zoo,keeper,path,of,state,handle,to,discard,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,state,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,get,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper,state,handle,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardState(String pathInZooKeeper) throws Exception;1480437068;Discards a state handle and removes it from ZooKeeper.__<p>If you only want to remove the state handle in ZooKeeper call {@link #remove(String)}.__@param pathInZooKeeper Path of state handle to discard (expected to start with a '/')_@throws Exception If the ZooKeeper or state handle operation fails;public void removeAndDiscardState(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		RetrievableStateHandle<T> stateHandle = get(pathInZooKeeper)___		_		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)___		_		_		_		stateHandle.discardState()__	};discards,a,state,handle,and,removes,it,from,zoo,keeper,p,if,you,only,want,to,remove,the,state,handle,in,zoo,keeper,call,link,remove,string,param,path,in,zoo,keeper,path,of,state,handle,to,discard,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,state,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,get,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper,state,handle,discard,state
ZooKeeperStateHandleStore -> public void removeAndDiscardState(String pathInZooKeeper) throws Exception;1488387821;Discards a state handle and removes it from ZooKeeper.__<p>If you only want to remove the state handle in ZooKeeper call {@link #remove(String)}.__@param pathInZooKeeper Path of state handle to discard (expected to start with a '/')_@throws Exception If the ZooKeeper or state handle operation fails;public void removeAndDiscardState(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		RetrievableStateHandle<T> stateHandle = get(pathInZooKeeper)___		_		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)___		_		_		_		stateHandle.discardState()__	};discards,a,state,handle,and,removes,it,from,zoo,keeper,p,if,you,only,want,to,remove,the,state,handle,in,zoo,keeper,call,link,remove,string,param,path,in,zoo,keeper,path,of,state,handle,to,discard,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,or,state,handle,operation,fails;public,void,remove,and,discard,state,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,get,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper,state,handle,discard,state
ZooKeeperStateHandleStore -> public void releaseAndTryRemove(String pathInZooKeeper) throws Exception;1495025524;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._The deletion of the state node is executed asynchronously.__<p><strong>Important</strong>: This also discards the stored state handle after the given action_has been executed.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void releaseAndTryRemove(String pathInZooKeeper) throws Exception {_		releaseAndTryRemove(pathInZooKeeper, null)__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,the,deletion,of,the,state,node,is,executed,asynchronously,p,strong,important,strong,this,also,discards,the,stored,state,handle,after,the,given,action,has,been,executed,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,release,and,try,remove,string,path,in,zoo,keeper,throws,exception,release,and,try,remove,path,in,zoo,keeper,null
ZooKeeperStateHandleStore -> public void releaseAndTryRemove(String pathInZooKeeper) throws Exception;1508665243;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._The deletion of the state node is executed asynchronously.__<p><strong>Important</strong>: This also discards the stored state handle after the given action_has been executed.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void releaseAndTryRemove(String pathInZooKeeper) throws Exception {_		releaseAndTryRemove(pathInZooKeeper, null)__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,the,deletion,of,the,state,node,is,executed,asynchronously,p,strong,important,strong,this,also,discards,the,stored,state,handle,after,the,given,action,has,been,executed,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,release,and,try,remove,string,path,in,zoo,keeper,throws,exception,release,and,try,remove,path,in,zoo,keeper,null
ZooKeeperStateHandleStore -> public void releaseAndTryRemove(String pathInZooKeeper) throws Exception;1509630459;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._The deletion of the state node is executed asynchronously.__<p><strong>Important</strong>: This also discards the stored state handle after the given action_has been executed.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void releaseAndTryRemove(String pathInZooKeeper) throws Exception {_		releaseAndTryRemove(pathInZooKeeper, null)__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,the,deletion,of,the,state,node,is,executed,asynchronously,p,strong,important,strong,this,also,discards,the,stored,state,handle,after,the,given,action,has,been,executed,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,release,and,try,remove,string,path,in,zoo,keeper,throws,exception,release,and,try,remove,path,in,zoo,keeper,null
ZooKeeperStateHandleStore -> public void releaseAndTryRemove(String pathInZooKeeper) throws Exception;1529161094;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._The deletion of the state node is executed asynchronously.__<p><strong>Important</strong>: This also discards the stored state handle after the given action_has been executed.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void releaseAndTryRemove(String pathInZooKeeper) throws Exception {_		releaseAndTryRemove(pathInZooKeeper, null)__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,the,deletion,of,the,state,node,is,executed,asynchronously,p,strong,important,strong,this,also,discards,the,stored,state,handle,after,the,given,action,has,been,executed,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,release,and,try,remove,string,path,in,zoo,keeper,throws,exception,release,and,try,remove,path,in,zoo,keeper,null
ZooKeeperStateHandleStore -> public void releaseAndTryRemove(String pathInZooKeeper) throws Exception;1534751191;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._The deletion of the state node is executed asynchronously.__<p><strong>Important</strong>: This also discards the stored state handle after the given action_has been executed.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void releaseAndTryRemove(String pathInZooKeeper) throws Exception {_		releaseAndTryRemove(pathInZooKeeper, null)__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,the,deletion,of,the,state,node,is,executed,asynchronously,p,strong,important,strong,this,also,discards,the,stored,state,handle,after,the,given,action,has,been,executed,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,release,and,try,remove,string,path,in,zoo,keeper,throws,exception,release,and,try,remove,path,in,zoo,keeper,null
ZooKeeperStateHandleStore -> RemoveCallback -> void apply(@Nullable RetrievableStateHandle<T> value) throws FlinkException_;1495025524;Callback method. The parameter can be null if the {@link RetrievableStateHandle} could not be retrieved_from ZooKeeper.__@param value RetrievableStateHandle retrieved from ZooKeeper, null if it was not retrievable_@throws FlinkException If the callback failed;void apply(@Nullable RetrievableStateHandle<T> value) throws FlinkException_;callback,method,the,parameter,can,be,null,if,the,link,retrievable,state,handle,could,not,be,retrieved,from,zoo,keeper,param,value,retrievable,state,handle,retrieved,from,zoo,keeper,null,if,it,was,not,retrievable,throws,flink,exception,if,the,callback,failed;void,apply,nullable,retrievable,state,handle,t,value,throws,flink,exception
ZooKeeperStateHandleStore -> RemoveCallback -> void apply(@Nullable RetrievableStateHandle<T> value) throws FlinkException_;1508665243;Callback method. The parameter can be null if the {@link RetrievableStateHandle} could not be retrieved_from ZooKeeper.__@param value RetrievableStateHandle retrieved from ZooKeeper, null if it was not retrievable_@throws FlinkException If the callback failed;void apply(@Nullable RetrievableStateHandle<T> value) throws FlinkException_;callback,method,the,parameter,can,be,null,if,the,link,retrievable,state,handle,could,not,be,retrieved,from,zoo,keeper,param,value,retrievable,state,handle,retrieved,from,zoo,keeper,null,if,it,was,not,retrievable,throws,flink,exception,if,the,callback,failed;void,apply,nullable,retrievable,state,handle,t,value,throws,flink,exception
ZooKeeperStateHandleStore -> RemoveCallback -> void apply(@Nullable RetrievableStateHandle<T> value) throws FlinkException_;1509630459;Callback method. The parameter can be null if the {@link RetrievableStateHandle} could not be retrieved_from ZooKeeper.__@param value RetrievableStateHandle retrieved from ZooKeeper, null if it was not retrievable_@throws FlinkException If the callback failed;void apply(@Nullable RetrievableStateHandle<T> value) throws FlinkException_;callback,method,the,parameter,can,be,null,if,the,link,retrievable,state,handle,could,not,be,retrieved,from,zoo,keeper,param,value,retrievable,state,handle,retrieved,from,zoo,keeper,null,if,it,was,not,retrievable,throws,flink,exception,if,the,callback,failed;void,apply,nullable,retrievable,state,handle,t,value,throws,flink,exception
ZooKeeperStateHandleStore -> RemoveCallback -> void apply(@Nullable RetrievableStateHandle<T> value) throws FlinkException_;1529161094;Callback method. The parameter can be null if the {@link RetrievableStateHandle} could not be retrieved_from ZooKeeper.__@param value RetrievableStateHandle retrieved from ZooKeeper, null if it was not retrievable_@throws FlinkException If the callback failed;void apply(@Nullable RetrievableStateHandle<T> value) throws FlinkException_;callback,method,the,parameter,can,be,null,if,the,link,retrievable,state,handle,could,not,be,retrieved,from,zoo,keeper,param,value,retrievable,state,handle,retrieved,from,zoo,keeper,null,if,it,was,not,retrievable,throws,flink,exception,if,the,callback,failed;void,apply,nullable,retrievable,state,handle,t,value,throws,flink,exception
ZooKeeperStateHandleStore -> RemoveCallback -> void apply(@Nullable RetrievableStateHandle<T> value) throws FlinkException_;1534751191;Callback method. The parameter can be null if the {@link RetrievableStateHandle} could not be retrieved_from ZooKeeper.__@param value RetrievableStateHandle retrieved from ZooKeeper, null if it was not retrievable_@throws FlinkException If the callback failed;void apply(@Nullable RetrievableStateHandle<T> value) throws FlinkException_;callback,method,the,parameter,can,be,null,if,the,link,retrievable,state,handle,could,not,be,retrieved,from,zoo,keeper,param,value,retrievable,state,handle,retrieved,from,zoo,keeper,null,if,it,was,not,retrievable,throws,flink,exception,if,the,callback,failed;void,apply,nullable,retrievable,state,handle,t,value,throws,flink,exception
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> add(String pathInZooKeeper, T state) throws Exception;1470909547;Creates a state handle and stores it in ZooKeeper with create mode {@link_CreateMode#PERSISTENT}.__@see #add(String, T, CreateMode);public RetrievableStateHandle<T> add(String pathInZooKeeper, T state) throws Exception {_		return add(pathInZooKeeper, state, CreateMode.PERSISTENT)__	};creates,a,state,handle,and,stores,it,in,zoo,keeper,with,create,mode,link,create,mode,persistent,see,add,string,t,create,mode;public,retrievable,state,handle,t,add,string,path,in,zoo,keeper,t,state,throws,exception,return,add,path,in,zoo,keeper,state,create,mode,persistent
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> add(String pathInZooKeeper, T state) throws Exception;1475656513;Creates a state handle and stores it in ZooKeeper with create mode {@link_CreateMode#PERSISTENT}.__@see #add(String, T, CreateMode);public RetrievableStateHandle<T> add(String pathInZooKeeper, T state) throws Exception {_		return add(pathInZooKeeper, state, CreateMode.PERSISTENT)__	};creates,a,state,handle,and,stores,it,in,zoo,keeper,with,create,mode,link,create,mode,persistent,see,add,string,t,create,mode;public,retrievable,state,handle,t,add,string,path,in,zoo,keeper,t,state,throws,exception,return,add,path,in,zoo,keeper,state,create,mode,persistent
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> add(String pathInZooKeeper, T state) throws Exception;1479246304;Creates a state handle and stores it in ZooKeeper with create mode {@link_CreateMode#PERSISTENT}.__@see #add(String, T, CreateMode);public RetrievableStateHandle<T> add(String pathInZooKeeper, T state) throws Exception {_		return add(pathInZooKeeper, state, CreateMode.PERSISTENT)__	};creates,a,state,handle,and,stores,it,in,zoo,keeper,with,create,mode,link,create,mode,persistent,see,add,string,t,create,mode;public,retrievable,state,handle,t,add,string,path,in,zoo,keeper,t,state,throws,exception,return,add,path,in,zoo,keeper,state,create,mode,persistent
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> add(String pathInZooKeeper, T state) throws Exception;1480437068;Creates a state handle and stores it in ZooKeeper with create mode {@link_CreateMode#PERSISTENT}.__@see #add(String, T, CreateMode);public RetrievableStateHandle<T> add(String pathInZooKeeper, T state) throws Exception {_		return add(pathInZooKeeper, state, CreateMode.PERSISTENT)__	};creates,a,state,handle,and,stores,it,in,zoo,keeper,with,create,mode,link,create,mode,persistent,see,add,string,t,create,mode;public,retrievable,state,handle,t,add,string,path,in,zoo,keeper,t,state,throws,exception,return,add,path,in,zoo,keeper,state,create,mode,persistent
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> add(String pathInZooKeeper, T state) throws Exception;1488387821;Creates a state handle and stores it in ZooKeeper with create mode {@link_CreateMode#PERSISTENT}.__@see #add(String, T, CreateMode);public RetrievableStateHandle<T> add(String pathInZooKeeper, T state) throws Exception {_		return add(pathInZooKeeper, state, CreateMode.PERSISTENT)__	};creates,a,state,handle,and,stores,it,in,zoo,keeper,with,create,mode,link,create,mode,persistent,see,add,string,t,create,mode;public,retrievable,state,handle,t,add,string,path,in,zoo,keeper,t,state,throws,exception,return,add,path,in,zoo,keeper,state,create,mode,persistent
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAll() throws Exception;1470909547;Gets all available state handles from ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAll() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = get(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAll() throws Exception;1475656513;Gets all available state handles from ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAll() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = get(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAll() throws Exception;1479246304;Gets all available state handles from ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAll() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = get(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAll() throws Exception;1480437068;Gets all available state handles from ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAll() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = get(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAll() throws Exception;1488387821;Gets all available state handles from ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles from ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAll() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = client.getChildren().forPath("/")___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = get(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Ignoring this node.", path, ioException)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,from,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,client,get,children,for,path,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,ignoring,this,node,path,io,exception,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage, 		Executor executor);1479246304;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>_@param storage to persist the actual state and whose returned state handle is then written_to ZooKeeper_@param executor to run the ZooKeeper callbacks;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage,_		Executor executor) {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__		this.executor = checkNotNull(executor)__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code,param,storage,to,persist,the,actual,state,and,whose,returned,state,handle,is,then,written,to,zoo,keeper,param,executor,to,run,the,zoo,keeper,callbacks;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,executor,executor,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage,this,executor,check,not,null,executor
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage, 		Executor executor);1480437068;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>_@param storage to persist the actual state and whose returned state handle is then written_to ZooKeeper_@param executor to run the ZooKeeper callbacks;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage,_		Executor executor) {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__		this.executor = checkNotNull(executor)__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code,param,storage,to,persist,the,actual,state,and,whose,returned,state,handle,is,then,written,to,zoo,keeper,param,executor,to,run,the,zoo,keeper,callbacks;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,executor,executor,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage,this,executor,check,not,null,executor
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage, 		Executor executor);1488387821;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>_@param storage to persist the actual state and whose returned state handle is then written_to ZooKeeper_@param executor to run the ZooKeeper callbacks;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage,_		Executor executor) {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__		this.executor = checkNotNull(executor)__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code,param,storage,to,persist,the,actual,state,and,whose,returned,state,handle,is,then,written,to,zoo,keeper,param,executor,to,run,the,zoo,keeper,callbacks;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,executor,executor,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage,this,executor,check,not,null,executor
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage, 		Executor executor);1495025524;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>_@param storage to persist the actual state and whose returned state handle is then written_to ZooKeeper_@param executor to run the ZooKeeper callbacks;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage,_		Executor executor) {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__		this.executor = checkNotNull(executor)___		_		lockNode = UUID.randomUUID().toString()__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code,param,storage,to,persist,the,actual,state,and,whose,returned,state,handle,is,then,written,to,zoo,keeper,param,executor,to,run,the,zoo,keeper,callbacks;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,executor,executor,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage,this,executor,check,not,null,executor,lock,node,uuid,random,uuid,to,string
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage, 		Executor executor);1508665243;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>_@param storage to persist the actual state and whose returned state handle is then written_to ZooKeeper_@param executor to run the ZooKeeper callbacks;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage,_		Executor executor) {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__		this.executor = checkNotNull(executor)___		_		lockNode = UUID.randomUUID().toString()__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code,param,storage,to,persist,the,actual,state,and,whose,returned,state,handle,is,then,written,to,zoo,keeper,param,executor,to,run,the,zoo,keeper,callbacks;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,executor,executor,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage,this,executor,check,not,null,executor,lock,node,uuid,random,uuid,to,string
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage, 		Executor executor);1509630459;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>_@param storage to persist the actual state and whose returned state handle is then written_to ZooKeeper_@param executor to run the ZooKeeper callbacks;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage,_		Executor executor) {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__		this.executor = checkNotNull(executor)___		_		lockNode = UUID.randomUUID().toString()__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code,param,storage,to,persist,the,actual,state,and,whose,returned,state,handle,is,then,written,to,zoo,keeper,param,executor,to,run,the,zoo,keeper,callbacks;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,executor,executor,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage,this,executor,check,not,null,executor,lock,node,uuid,random,uuid,to,string
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage, 		Executor executor);1529161094;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>_@param storage to persist the actual state and whose returned state handle is then written_to ZooKeeper_@param executor to run the ZooKeeper callbacks;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage,_		Executor executor) {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__		this.executor = checkNotNull(executor)___		_		lockNode = UUID.randomUUID().toString()__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code,param,storage,to,persist,the,actual,state,and,whose,returned,state,handle,is,then,written,to,zoo,keeper,param,executor,to,run,the,zoo,keeper,callbacks;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,executor,executor,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage,this,executor,check,not,null,executor,lock,node,uuid,random,uuid,to,string
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage, 		Executor executor);1534751191;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>_@param storage to persist the actual state and whose returned state handle is then written_to ZooKeeper_@param executor to run the ZooKeeper callbacks;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage,_		Executor executor) {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__		this.executor = checkNotNull(executor)___		_		lockNode = UUID.randomUUID().toString()__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code,param,storage,to,persist,the,actual,state,and,whose,returned,state,handle,is,then,written,to,zoo,keeper,param,executor,to,run,the,zoo,keeper,callbacks;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,executor,executor,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage,this,executor,check,not,null,executor,lock,node,uuid,random,uuid,to,string
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1441121146;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		StateHandle<T> oldStateHandle = get(pathInZooKeeper)___		StateHandle<T> stateHandle = stateHandleProvider.createStateHandle(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(stateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(pathInZooKeeper, serializedStateHandle)___			success = true__		}_		finally {_			if (success) {_				oldStateHandle.discardState()__			}_			else {_				stateHandle.discardState()__			}_		}_	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,state,handle,t,old,state,handle,get,path,in,zoo,keeper,state,handle,t,state,handle,state,handle,provider,create,state,handle,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,state,handle,client,set,data,with,version,expected,version,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,finally,if,success,old,state,handle,discard,state,else,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1445247002;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		StateHandle<T> oldStateHandle = get(pathInZooKeeper)___		StateHandle<T> stateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(stateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(pathInZooKeeper, serializedStateHandle)___			success = true__		}_		finally {_			if (success) {_				oldStateHandle.discardState()__			}_			else {_				stateHandle.discardState()__			}_		}_	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,state,handle,t,old,state,handle,get,path,in,zoo,keeper,state,handle,t,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,state,handle,client,set,data,with,version,expected,version,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,finally,if,success,old,state,handle,discard,state,else,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1445550685;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		StateHandle<T> oldStateHandle = get(pathInZooKeeper)___		StateHandle<T> stateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(stateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(pathInZooKeeper, serializedStateHandle)___			success = true__		}_		finally {_			if (success) {_				oldStateHandle.discardState()__			}_			else {_				stateHandle.discardState()__			}_		}_	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,state,handle,t,old,state,handle,get,path,in,zoo,keeper,state,handle,t,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,state,handle,client,set,data,with,version,expected,version,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,finally,if,success,old,state,handle,discard,state,else,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1465394479;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		StateHandle<T> oldStateHandle = get(pathInZooKeeper)___		StateHandle<T> stateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(stateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(pathInZooKeeper, serializedStateHandle)___			success = true__		}_		finally {_			if (success) {_				oldStateHandle.discardState()__			}_			else {_				stateHandle.discardState()__			}_		}_	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,state,handle,t,old,state,handle,get,path,in,zoo,keeper,state,handle,t,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,state,handle,client,set,data,with,version,expected,version,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,finally,if,success,old,state,handle,discard,state,else,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1468938623;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		StateHandle<T> oldStateHandle = get(pathInZooKeeper)___		StateHandle<T> stateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(stateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(pathInZooKeeper, serializedStateHandle)___			success = true__		}_		finally {_			if (success) {_				oldStateHandle.discardState()__			}_			else {_				stateHandle.discardState()__			}_		}_	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,state,handle,t,old,state,handle,get,path,in,zoo,keeper,state,handle,t,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,state,handle,client,set,data,with,version,expected,version,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,finally,if,success,old,state,handle,discard,state,else,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1470909547;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		RetrievableStateHandle<T> oldStateHandle = get(pathInZooKeeper)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(pathInZooKeeper, serializedStateHandle)__			success = true__		} finally {_			if(success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,retrievable,state,handle,t,old,state,handle,get,path,in,zoo,keeper,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1475656513;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		RetrievableStateHandle<T> oldStateHandle = get(pathInZooKeeper)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(pathInZooKeeper, serializedStateHandle)__			success = true__		} finally {_			if(success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,retrievable,state,handle,t,old,state,handle,get,path,in,zoo,keeper,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1479246304;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		RetrievableStateHandle<T> oldStateHandle = get(pathInZooKeeper)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(pathInZooKeeper, serializedStateHandle)__			success = true__		} finally {_			if(success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,retrievable,state,handle,t,old,state,handle,get,path,in,zoo,keeper,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1480437068;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		RetrievableStateHandle<T> oldStateHandle = get(pathInZooKeeper)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(pathInZooKeeper, serializedStateHandle)__			success = true__		} finally {_			if(success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,retrievable,state,handle,t,old,state,handle,get,path,in,zoo,keeper,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1488387821;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		RetrievableStateHandle<T> oldStateHandle = get(pathInZooKeeper)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(pathInZooKeeper, serializedStateHandle)__			success = true__		} finally {_			if(success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,retrievable,state,handle,t,old,state,handle,get,path,in,zoo,keeper,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1495025524;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> oldStateHandle = get(path, false)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(path, serializedStateHandle)__			success = true__		} finally {_			if(success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,old,state,handle,get,path,false,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,serialized,state,handle,success,true,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1508665243;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> oldStateHandle = get(path, false)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(path, serializedStateHandle)__			success = true__		} finally {_			if(success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,old,state,handle,get,path,false,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,serialized,state,handle,success,true,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1509630459;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> oldStateHandle = get(path, false)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(path, serializedStateHandle)__			success = true__		} catch (KeeperException.NoNodeException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		} finally {_			if (success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,old,state,handle,get,path,false,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,serialized,state,handle,success,true,catch,keeper,exception,no,node,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1529161094;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> oldStateHandle = get(path, false)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(path, serializedStateHandle)__			success = true__		} catch (KeeperException.NoNodeException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		} finally {_			if (success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,old,state,handle,get,path,false,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,serialized,state,handle,success,true,catch,keeper,exception,no,node,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1534751191;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> oldStateHandle = get(path, false)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(path, serializedStateHandle)__			success = true__		} catch (KeeperException.NoNodeException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		} finally {_			if (success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,old,state,handle,get,path,false,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,serialized,state,handle,success,true,catch,keeper,exception,no,node,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1534756758;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> oldStateHandle = get(path, false)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(path, serializedStateHandle)__			success = true__		} catch (KeeperException.NoNodeException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		} finally {_			if (success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,old,state,handle,get,path,false,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,serialized,state,handle,success,true,catch,keeper,exception,no,node,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1536412777;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> oldStateHandle = get(path, false)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(path, serializedStateHandle)__			success = true__		} catch (KeeperException.NoNodeException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		} finally {_			if (success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,old,state,handle,get,path,false,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,serialized,state,handle,success,true,catch,keeper,exception,no,node,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1536746131;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> oldStateHandle = get(path, false)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(path, serializedStateHandle)__			success = true__		} catch (KeeperException.NoNodeException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		} finally {_			if (success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,old,state,handle,get,path,false,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,serialized,state,handle,success,true,catch,keeper,exception,no,node,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception;1546977736;Replaces a state handle in ZooKeeper and discards the old state handle.__@param pathInZooKeeper Destination path in ZooKeeper (expected to exist and start with a '/')_@param expectedVersion Expected version of the node to replace_@param state           The new state to replace the old one_@throws Exception If a ZooKeeper or state handle operation fails;public void replace(String pathInZooKeeper, int expectedVersion, T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> oldStateHandle = get(path, false)___		RetrievableStateHandle<T> newStateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(newStateHandle)___			_			client.setData()_					.withVersion(expectedVersion)_					.forPath(path, serializedStateHandle)__			success = true__		} catch (KeeperException.NoNodeException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		} finally {_			if (success) {_				oldStateHandle.discardState()__			} else {_				newStateHandle.discardState()__			}_		}__	};replaces,a,state,handle,in,zoo,keeper,and,discards,the,old,state,handle,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,exist,and,start,with,a,param,expected,version,expected,version,of,the,node,to,replace,param,state,the,new,state,to,replace,the,old,one,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,void,replace,string,path,in,zoo,keeper,int,expected,version,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,old,state,handle,get,path,false,retrievable,state,handle,t,new,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,new,state,handle,client,set,data,with,version,expected,version,for,path,path,serialized,state,handle,success,true,catch,keeper,exception,no,node,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,old,state,handle,discard,state,else,new,state,handle,discard,state
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception;1495025524;Gets a state handle from ZooKeeper and optionally locks it.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from_@param lock True if we should lock the node_ otherwise false_@return The state handle_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;@SuppressWarnings("unchecked")_	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		if (lock) {_			_			try {_				client.create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))__			} catch (KeeperException.NodeExistsException ignored) {_				_			} catch (KeeperException.NoNodeException e) {_				throw new Exception("Cannot lock the node " + path + " since it does not exist.", e)__			}_		}__		boolean success = false___		try {_			byte[] data___			try {_				data = client.getData().forPath(path)__			} catch (Exception e) {_				throw new Exception("Failed to retrieve state handle data under " + path +_					" from ZooKeeper.", e)__			}__			try {_				RetrievableStateHandle<T> retrievableStateHandle = InstantiationUtil.deserializeObject(_					data,_					Thread.currentThread().getContextClassLoader())___				success = true___				return retrievableStateHandle__			} catch (IOException | ClassNotFoundException e) {_				throw new IOException("Failed to deserialize state handle from ZooKeeper data from " +_					path + '.', e)__			}_		} finally {_			if (!success && lock) {_				_				release(path)__			}_		}_	};gets,a,state,handle,from,zoo,keeper,and,optionally,locks,it,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,param,lock,true,if,we,should,lock,the,node,otherwise,false,return,the,state,handle,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;suppress,warnings,unchecked,private,retrievable,state,handle,t,get,string,path,in,zoo,keeper,boolean,lock,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,if,lock,try,client,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,catch,keeper,exception,node,exists,exception,ignored,catch,keeper,exception,no,node,exception,e,throw,new,exception,cannot,lock,the,node,path,since,it,does,not,exist,e,boolean,success,false,try,byte,data,try,data,client,get,data,for,path,path,catch,exception,e,throw,new,exception,failed,to,retrieve,state,handle,data,under,path,from,zoo,keeper,e,try,retrievable,state,handle,t,retrievable,state,handle,instantiation,util,deserialize,object,data,thread,current,thread,get,context,class,loader,success,true,return,retrievable,state,handle,catch,ioexception,class,not,found,exception,e,throw,new,ioexception,failed,to,deserialize,state,handle,from,zoo,keeper,data,from,path,e,finally,if,success,lock,release,path
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception;1508665243;Gets a state handle from ZooKeeper and optionally locks it.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from_@param lock True if we should lock the node_ otherwise false_@return The state handle_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;@SuppressWarnings("unchecked")_	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		if (lock) {_			_			try {_				client.create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))__			} catch (KeeperException.NodeExistsException ignored) {_				_			} catch (KeeperException.NoNodeException e) {_				throw new Exception("Cannot lock the node " + path + " since it does not exist.", e)__			}_		}__		boolean success = false___		try {_			byte[] data___			try {_				data = client.getData().forPath(path)__			} catch (Exception e) {_				throw new Exception("Failed to retrieve state handle data under " + path +_					" from ZooKeeper.", e)__			}__			try {_				RetrievableStateHandle<T> retrievableStateHandle = InstantiationUtil.deserializeObject(_					data,_					Thread.currentThread().getContextClassLoader())___				success = true___				return retrievableStateHandle__			} catch (IOException | ClassNotFoundException e) {_				throw new IOException("Failed to deserialize state handle from ZooKeeper data from " +_					path + '.', e)__			}_		} finally {_			if (!success && lock) {_				_				release(path)__			}_		}_	};gets,a,state,handle,from,zoo,keeper,and,optionally,locks,it,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,param,lock,true,if,we,should,lock,the,node,otherwise,false,return,the,state,handle,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;suppress,warnings,unchecked,private,retrievable,state,handle,t,get,string,path,in,zoo,keeper,boolean,lock,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,if,lock,try,client,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,catch,keeper,exception,node,exists,exception,ignored,catch,keeper,exception,no,node,exception,e,throw,new,exception,cannot,lock,the,node,path,since,it,does,not,exist,e,boolean,success,false,try,byte,data,try,data,client,get,data,for,path,path,catch,exception,e,throw,new,exception,failed,to,retrieve,state,handle,data,under,path,from,zoo,keeper,e,try,retrievable,state,handle,t,retrievable,state,handle,instantiation,util,deserialize,object,data,thread,current,thread,get,context,class,loader,success,true,return,retrievable,state,handle,catch,ioexception,class,not,found,exception,e,throw,new,ioexception,failed,to,deserialize,state,handle,from,zoo,keeper,data,from,path,e,finally,if,success,lock,release,path
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception;1509630459;Gets a state handle from ZooKeeper and optionally locks it.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from_@param lock True if we should lock the node_ otherwise false_@return The state handle_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;@SuppressWarnings("unchecked")_	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		if (lock) {_			_			try {_				client.create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))__			} catch (KeeperException.NodeExistsException ignored) {_				_			} catch (KeeperException.NoNodeException e) {_				throw new Exception("Cannot lock the node " + path + " since it does not exist.", e)__			}_		}__		boolean success = false___		try {_			byte[] data___			try {_				data = client.getData().forPath(path)__			} catch (Exception e) {_				throw new Exception("Failed to retrieve state handle data under " + path +_					" from ZooKeeper.", e)__			}__			try {_				RetrievableStateHandle<T> retrievableStateHandle = InstantiationUtil.deserializeObject(_					data,_					Thread.currentThread().getContextClassLoader())___				success = true___				return retrievableStateHandle__			} catch (IOException | ClassNotFoundException e) {_				throw new IOException("Failed to deserialize state handle from ZooKeeper data from " +_					path + '.', e)__			}_		} finally {_			if (!success && lock) {_				_				release(path)__			}_		}_	};gets,a,state,handle,from,zoo,keeper,and,optionally,locks,it,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,param,lock,true,if,we,should,lock,the,node,otherwise,false,return,the,state,handle,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;suppress,warnings,unchecked,private,retrievable,state,handle,t,get,string,path,in,zoo,keeper,boolean,lock,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,if,lock,try,client,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,catch,keeper,exception,node,exists,exception,ignored,catch,keeper,exception,no,node,exception,e,throw,new,exception,cannot,lock,the,node,path,since,it,does,not,exist,e,boolean,success,false,try,byte,data,try,data,client,get,data,for,path,path,catch,exception,e,throw,new,exception,failed,to,retrieve,state,handle,data,under,path,from,zoo,keeper,e,try,retrievable,state,handle,t,retrievable,state,handle,instantiation,util,deserialize,object,data,thread,current,thread,get,context,class,loader,success,true,return,retrievable,state,handle,catch,ioexception,class,not,found,exception,e,throw,new,ioexception,failed,to,deserialize,state,handle,from,zoo,keeper,data,from,path,e,finally,if,success,lock,release,path
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception;1529161094;Gets a state handle from ZooKeeper and optionally locks it.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from_@param lock True if we should lock the node_ otherwise false_@return The state handle_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;@SuppressWarnings("unchecked")_	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		if (lock) {_			_			try {_				client.create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))__			} catch (KeeperException.NodeExistsException ignored) {_				_			} catch (KeeperException.NoNodeException e) {_				throw new Exception("Cannot lock the node " + path + " since it does not exist.", e)__			}_		}__		boolean success = false___		try {_			byte[] data___			try {_				data = client.getData().forPath(path)__			} catch (Exception e) {_				throw new Exception("Failed to retrieve state handle data under " + path +_					" from ZooKeeper.", e)__			}__			try {_				RetrievableStateHandle<T> retrievableStateHandle = InstantiationUtil.deserializeObject(_					data,_					Thread.currentThread().getContextClassLoader())___				success = true___				return retrievableStateHandle__			} catch (IOException | ClassNotFoundException e) {_				throw new IOException("Failed to deserialize state handle from ZooKeeper data from " +_					path + '.', e)__			}_		} finally {_			if (!success && lock) {_				_				release(path)__			}_		}_	};gets,a,state,handle,from,zoo,keeper,and,optionally,locks,it,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,param,lock,true,if,we,should,lock,the,node,otherwise,false,return,the,state,handle,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;suppress,warnings,unchecked,private,retrievable,state,handle,t,get,string,path,in,zoo,keeper,boolean,lock,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,if,lock,try,client,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,catch,keeper,exception,node,exists,exception,ignored,catch,keeper,exception,no,node,exception,e,throw,new,exception,cannot,lock,the,node,path,since,it,does,not,exist,e,boolean,success,false,try,byte,data,try,data,client,get,data,for,path,path,catch,exception,e,throw,new,exception,failed,to,retrieve,state,handle,data,under,path,from,zoo,keeper,e,try,retrievable,state,handle,t,retrievable,state,handle,instantiation,util,deserialize,object,data,thread,current,thread,get,context,class,loader,success,true,return,retrievable,state,handle,catch,ioexception,class,not,found,exception,e,throw,new,ioexception,failed,to,deserialize,state,handle,from,zoo,keeper,data,from,path,e,finally,if,success,lock,release,path
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception;1534751191;Gets a state handle from ZooKeeper and optionally locks it.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from_@param lock True if we should lock the node_ otherwise false_@return The state handle_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;@SuppressWarnings("unchecked")_	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		if (lock) {_			_			try {_				client.create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))__			} catch (KeeperException.NodeExistsException ignored) {_				_			} catch (KeeperException.NoNodeException e) {_				throw new Exception("Cannot lock the node " + path + " since it does not exist.", e)__			}_		}__		boolean success = false___		try {_			byte[] data___			try {_				data = client.getData().forPath(path)__			} catch (Exception e) {_				throw new Exception("Failed to retrieve state handle data under " + path +_					" from ZooKeeper.", e)__			}__			try {_				RetrievableStateHandle<T> retrievableStateHandle = InstantiationUtil.deserializeObject(_					data,_					Thread.currentThread().getContextClassLoader())___				success = true___				return retrievableStateHandle__			} catch (IOException | ClassNotFoundException e) {_				throw new IOException("Failed to deserialize state handle from ZooKeeper data from " +_					path + '.', e)__			}_		} finally {_			if (!success && lock) {_				_				release(path)__			}_		}_	};gets,a,state,handle,from,zoo,keeper,and,optionally,locks,it,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,param,lock,true,if,we,should,lock,the,node,otherwise,false,return,the,state,handle,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;suppress,warnings,unchecked,private,retrievable,state,handle,t,get,string,path,in,zoo,keeper,boolean,lock,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,if,lock,try,client,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,catch,keeper,exception,node,exists,exception,ignored,catch,keeper,exception,no,node,exception,e,throw,new,exception,cannot,lock,the,node,path,since,it,does,not,exist,e,boolean,success,false,try,byte,data,try,data,client,get,data,for,path,path,catch,exception,e,throw,new,exception,failed,to,retrieve,state,handle,data,under,path,from,zoo,keeper,e,try,retrievable,state,handle,t,retrievable,state,handle,instantiation,util,deserialize,object,data,thread,current,thread,get,context,class,loader,success,true,return,retrievable,state,handle,catch,ioexception,class,not,found,exception,e,throw,new,ioexception,failed,to,deserialize,state,handle,from,zoo,keeper,data,from,path,e,finally,if,success,lock,release,path
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception;1534756758;Gets a state handle from ZooKeeper and optionally locks it.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from_@param lock True if we should lock the node_ otherwise false_@return The state handle_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;@SuppressWarnings("unchecked")_	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		if (lock) {_			_			try {_				client.create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))__			} catch (KeeperException.NodeExistsException ignored) {_				_			} catch (KeeperException.NoNodeException e) {_				throw new Exception("Cannot lock the node " + path + " since it does not exist.", e)__			}_		}__		boolean success = false___		try {_			byte[] data___			try {_				data = client.getData().forPath(path)__			} catch (Exception e) {_				throw new Exception("Failed to retrieve state handle data under " + path +_					" from ZooKeeper.", e)__			}__			try {_				RetrievableStateHandle<T> retrievableStateHandle = InstantiationUtil.deserializeObject(_					data,_					Thread.currentThread().getContextClassLoader())___				success = true___				return retrievableStateHandle__			} catch (IOException | ClassNotFoundException e) {_				throw new IOException("Failed to deserialize state handle from ZooKeeper data from " +_					path + '.', e)__			}_		} finally {_			if (!success && lock) {_				_				release(path)__			}_		}_	};gets,a,state,handle,from,zoo,keeper,and,optionally,locks,it,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,param,lock,true,if,we,should,lock,the,node,otherwise,false,return,the,state,handle,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;suppress,warnings,unchecked,private,retrievable,state,handle,t,get,string,path,in,zoo,keeper,boolean,lock,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,if,lock,try,client,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,catch,keeper,exception,node,exists,exception,ignored,catch,keeper,exception,no,node,exception,e,throw,new,exception,cannot,lock,the,node,path,since,it,does,not,exist,e,boolean,success,false,try,byte,data,try,data,client,get,data,for,path,path,catch,exception,e,throw,new,exception,failed,to,retrieve,state,handle,data,under,path,from,zoo,keeper,e,try,retrievable,state,handle,t,retrievable,state,handle,instantiation,util,deserialize,object,data,thread,current,thread,get,context,class,loader,success,true,return,retrievable,state,handle,catch,ioexception,class,not,found,exception,e,throw,new,ioexception,failed,to,deserialize,state,handle,from,zoo,keeper,data,from,path,e,finally,if,success,lock,release,path
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception;1536412777;Gets a state handle from ZooKeeper and optionally locks it.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from_@param lock True if we should lock the node_ otherwise false_@return The state handle_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;@SuppressWarnings("unchecked")_	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		if (lock) {_			_			try {_				client.create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))__			} catch (KeeperException.NodeExistsException ignored) {_				_			}_		}__		boolean success = false___		try {_			byte[] data = client.getData().forPath(path)___			try {_				RetrievableStateHandle<T> retrievableStateHandle = InstantiationUtil.deserializeObject(_					data,_					Thread.currentThread().getContextClassLoader())___				success = true___				return retrievableStateHandle__			} catch (IOException | ClassNotFoundException e) {_				throw new IOException("Failed to deserialize state handle from ZooKeeper data from " +_					path + '.', e)__			}_		} finally {_			if (!success && lock) {_				_				release(path)__			}_		}_	};gets,a,state,handle,from,zoo,keeper,and,optionally,locks,it,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,param,lock,true,if,we,should,lock,the,node,otherwise,false,return,the,state,handle,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;suppress,warnings,unchecked,private,retrievable,state,handle,t,get,string,path,in,zoo,keeper,boolean,lock,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,if,lock,try,client,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,catch,keeper,exception,node,exists,exception,ignored,boolean,success,false,try,byte,data,client,get,data,for,path,path,try,retrievable,state,handle,t,retrievable,state,handle,instantiation,util,deserialize,object,data,thread,current,thread,get,context,class,loader,success,true,return,retrievable,state,handle,catch,ioexception,class,not,found,exception,e,throw,new,ioexception,failed,to,deserialize,state,handle,from,zoo,keeper,data,from,path,e,finally,if,success,lock,release,path
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception;1536746131;Gets a state handle from ZooKeeper and optionally locks it.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from_@param lock True if we should lock the node_ otherwise false_@return The state handle_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;@SuppressWarnings("unchecked")_	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		if (lock) {_			_			try {_				client.create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))__			} catch (KeeperException.NodeExistsException ignored) {_				_			}_		}__		boolean success = false___		try {_			byte[] data = client.getData().forPath(path)___			try {_				RetrievableStateHandle<T> retrievableStateHandle = InstantiationUtil.deserializeObject(_					data,_					Thread.currentThread().getContextClassLoader())___				success = true___				return retrievableStateHandle__			} catch (IOException | ClassNotFoundException e) {_				throw new IOException("Failed to deserialize state handle from ZooKeeper data from " +_					path + '.', e)__			}_		} finally {_			if (!success && lock) {_				_				release(path)__			}_		}_	};gets,a,state,handle,from,zoo,keeper,and,optionally,locks,it,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,param,lock,true,if,we,should,lock,the,node,otherwise,false,return,the,state,handle,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;suppress,warnings,unchecked,private,retrievable,state,handle,t,get,string,path,in,zoo,keeper,boolean,lock,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,if,lock,try,client,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,catch,keeper,exception,node,exists,exception,ignored,boolean,success,false,try,byte,data,client,get,data,for,path,path,try,retrievable,state,handle,t,retrievable,state,handle,instantiation,util,deserialize,object,data,thread,current,thread,get,context,class,loader,success,true,return,retrievable,state,handle,catch,ioexception,class,not,found,exception,e,throw,new,ioexception,failed,to,deserialize,state,handle,from,zoo,keeper,data,from,path,e,finally,if,success,lock,release,path
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception;1546977736;Gets a state handle from ZooKeeper and optionally locks it.__@param pathInZooKeeper Path in ZooKeeper to get the state handle from_@param lock True if we should lock the node_ otherwise false_@return The state handle_@throws IOException Thrown if the method failed to deserialize the stored state handle_@throws Exception Thrown if a ZooKeeper operation failed;@SuppressWarnings("unchecked")_	private RetrievableStateHandle<T> get(String pathInZooKeeper, boolean lock) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		if (lock) {_			_			try {_				client.create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))__			} catch (KeeperException.NodeExistsException ignored) {_				_			}_		}__		boolean success = false___		try {_			byte[] data = client.getData().forPath(path)___			try {_				RetrievableStateHandle<T> retrievableStateHandle = InstantiationUtil.deserializeObject(_					data,_					Thread.currentThread().getContextClassLoader())___				success = true___				return retrievableStateHandle__			} catch (IOException | ClassNotFoundException e) {_				throw new IOException("Failed to deserialize state handle from ZooKeeper data from " +_					path + '.', e)__			}_		} finally {_			if (!success && lock) {_				_				release(path)__			}_		}_	};gets,a,state,handle,from,zoo,keeper,and,optionally,locks,it,param,path,in,zoo,keeper,path,in,zoo,keeper,to,get,the,state,handle,from,param,lock,true,if,we,should,lock,the,node,otherwise,false,return,the,state,handle,throws,ioexception,thrown,if,the,method,failed,to,deserialize,the,stored,state,handle,throws,exception,thrown,if,a,zoo,keeper,operation,failed;suppress,warnings,unchecked,private,retrievable,state,handle,t,get,string,path,in,zoo,keeper,boolean,lock,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,if,lock,try,client,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,catch,keeper,exception,node,exists,exception,ignored,boolean,success,false,try,byte,data,client,get,data,for,path,path,try,retrievable,state,handle,t,retrievable,state,handle,instantiation,util,deserialize,object,data,thread,current,thread,get,context,class,loader,success,true,return,retrievable,state,handle,catch,ioexception,class,not,found,exception,e,throw,new,ioexception,failed,to,deserialize,state,handle,from,zoo,keeper,data,from,path,e,finally,if,success,lock,release,path
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> add( 			String pathInZooKeeper, 			T state, 			CreateMode createMode) throws Exception;1470909547;Creates a state handle and stores it in ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet and_start with a '/')_@param state           State to be added_@param createMode      The create mode for the new path in ZooKeeper__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> add(_			String pathInZooKeeper,_			T state,_			CreateMode createMode) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			client.create().withMode(createMode).forPath(pathInZooKeeper, serializedStoreHandle)___			success = true__			return storeHandle__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,and,stores,it,in,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,and,start,with,a,param,state,state,to,be,added,param,create,mode,the,create,mode,for,the,new,path,in,zoo,keeper,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,string,path,in,zoo,keeper,t,state,create,mode,create,mode,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,create,with,mode,create,mode,for,path,path,in,zoo,keeper,serialized,store,handle,success,true,return,store,handle,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> add( 			String pathInZooKeeper, 			T state, 			CreateMode createMode) throws Exception;1475656513;Creates a state handle and stores it in ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet and_start with a '/')_@param state           State to be added_@param createMode      The create mode for the new path in ZooKeeper__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> add(_			String pathInZooKeeper,_			T state,_			CreateMode createMode) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			client.create().withMode(createMode).forPath(pathInZooKeeper, serializedStoreHandle)___			success = true__			return storeHandle__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,and,stores,it,in,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,and,start,with,a,param,state,state,to,be,added,param,create,mode,the,create,mode,for,the,new,path,in,zoo,keeper,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,string,path,in,zoo,keeper,t,state,create,mode,create,mode,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,create,with,mode,create,mode,for,path,path,in,zoo,keeper,serialized,store,handle,success,true,return,store,handle,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> add( 			String pathInZooKeeper, 			T state, 			CreateMode createMode) throws Exception;1479246304;Creates a state handle and stores it in ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet and_start with a '/')_@param state           State to be added_@param createMode      The create mode for the new path in ZooKeeper__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> add(_			String pathInZooKeeper,_			T state,_			CreateMode createMode) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			client.create().withMode(createMode).forPath(pathInZooKeeper, serializedStoreHandle)___			success = true__			return storeHandle__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,and,stores,it,in,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,and,start,with,a,param,state,state,to,be,added,param,create,mode,the,create,mode,for,the,new,path,in,zoo,keeper,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,string,path,in,zoo,keeper,t,state,create,mode,create,mode,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,create,with,mode,create,mode,for,path,path,in,zoo,keeper,serialized,store,handle,success,true,return,store,handle,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> add( 			String pathInZooKeeper, 			T state, 			CreateMode createMode) throws Exception;1480437068;Creates a state handle and stores it in ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet and_start with a '/')_@param state           State to be added_@param createMode      The create mode for the new path in ZooKeeper__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> add(_			String pathInZooKeeper,_			T state,_			CreateMode createMode) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			client.create().withMode(createMode).forPath(pathInZooKeeper, serializedStoreHandle)___			success = true__			return storeHandle__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,and,stores,it,in,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,and,start,with,a,param,state,state,to,be,added,param,create,mode,the,create,mode,for,the,new,path,in,zoo,keeper,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,string,path,in,zoo,keeper,t,state,create,mode,create,mode,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,create,with,mode,create,mode,for,path,path,in,zoo,keeper,serialized,store,handle,success,true,return,store,handle,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> add( 			String pathInZooKeeper, 			T state, 			CreateMode createMode) throws Exception;1488387821;Creates a state handle and stores it in ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet and_start with a '/')_@param state           State to be added_@param createMode      The create mode for the new path in ZooKeeper__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> add(_			String pathInZooKeeper,_			T state,_			CreateMode createMode) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			client.create().withMode(createMode).forPath(pathInZooKeeper, serializedStoreHandle)___			success = true__			return storeHandle__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,and,stores,it,in,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,and,start,with,a,param,state,state,to,be,added,param,create,mode,the,create,mode,for,the,new,path,in,zoo,keeper,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,string,path,in,zoo,keeper,t,state,create,mode,create,mode,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,create,with,mode,create,mode,for,path,path,in,zoo,keeper,serialized,store,handle,success,true,return,store,handle,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception;1495025524;Gets all available state handles from ZooKeeper sorted by name (ascending) and locks the_respective state nodes.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = ZKPaths.getSortedChildren(_						client.getZookeeperClient().getZooKeeper(),_						ZKPaths.fixForNamespace(client.getNamespace(), "/"))___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Releasing and trying to remove this node.", path, ioException)___						releaseAndTryRemove(path)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion___				_				_			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,and,locks,the,respective,state,nodes,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,sorted,by,name,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,releasing,and,trying,to,remove,this,node,path,io,exception,release,and,try,remove,path,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception;1508665243;Gets all available state handles from ZooKeeper sorted by name (ascending) and locks the_respective state nodes. The result tuples contain the retrieved state and the path to the_node in ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = ZKPaths.getSortedChildren(_						client.getZookeeperClient().getZooKeeper(),_						ZKPaths.fixForNamespace(client.getNamespace(), "/"))___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Releasing and trying to remove this node.", path, ioException)___						releaseAndTryRemove(path)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion___				_				_			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,and,locks,the,respective,state,nodes,the,result,tuples,contain,the,retrieved,state,and,the,path,to,the,node,in,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,sorted,by,name,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,releasing,and,trying,to,remove,this,node,path,io,exception,release,and,try,remove,path,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception;1509630459;Gets all available state handles from ZooKeeper sorted by name (ascending) and locks the_respective state nodes. The result tuples contain the retrieved state and the path to the_node in ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = ZKPaths.getSortedChildren(_						client.getZookeeperClient().getZooKeeper(),_						ZKPaths.fixForNamespace(client.getNamespace(), "/"))___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Releasing and trying to remove this node.", path, ioException)___						releaseAndTryRemove(path)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion___				_				_			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,and,locks,the,respective,state,nodes,the,result,tuples,contain,the,retrieved,state,and,the,path,to,the,node,in,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,sorted,by,name,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,releasing,and,trying,to,remove,this,node,path,io,exception,release,and,try,remove,path,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception;1529161094;Gets all available state handles from ZooKeeper sorted by name (ascending) and locks the_respective state nodes. The result tuples contain the retrieved state and the path to the_node in ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = ZKPaths.getSortedChildren(_						client.getZookeeperClient().getZooKeeper(),_						ZKPaths.fixForNamespace(client.getNamespace(), "/"))___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Releasing and trying to remove this node.", path, ioException)___						releaseAndTryRemove(path)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion___				_				_			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,and,locks,the,respective,state,nodes,the,result,tuples,contain,the,retrieved,state,and,the,path,to,the,node,in,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,sorted,by,name,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,releasing,and,trying,to,remove,this,node,path,io,exception,release,and,try,remove,path,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception;1534751191;Gets all available state handles from ZooKeeper sorted by name (ascending) and locks the_respective state nodes. The result tuples contain the retrieved state and the path to the_node in ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = ZKPaths.getSortedChildren(_						client.getZookeeperClient().getZooKeeper(),_						ZKPaths.fixForNamespace(client.getNamespace(), "/"))___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Releasing and trying to remove this node.", path, ioException)___						releaseAndTryRemove(path)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion___				_				_			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,and,locks,the,respective,state,nodes,the,result,tuples,contain,the,retrieved,state,and,the,path,to,the,node,in,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,sorted,by,name,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,releasing,and,trying,to,remove,this,node,path,io,exception,release,and,try,remove,path,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception;1534756758;Gets all available state handles from ZooKeeper sorted by name (ascending) and locks the_respective state nodes. The result tuples contain the retrieved state and the path to the_node in ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = ZKPaths.getSortedChildren(_						client.getZookeeperClient().getZooKeeper(),_						ZKPaths.fixForNamespace(client.getNamespace(), "/"))___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Releasing and trying to remove this node.", path, ioException)___						releaseAndTryRemove(path)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion___				_				_			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,and,locks,the,respective,state,nodes,the,result,tuples,contain,the,retrieved,state,and,the,path,to,the,node,in,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,sorted,by,name,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,releasing,and,trying,to,remove,this,node,path,io,exception,release,and,try,remove,path,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception;1536412777;Gets all available state handles from ZooKeeper sorted by name (ascending) and locks the_respective state nodes. The result tuples contain the retrieved state and the path to the_node in ZooKeeper.__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<RetrievableStateHandle<T>, String>> getAllSortedByNameAndLock() throws Exception {_		final List<Tuple2<RetrievableStateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			stateHandles.clear()___			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = ZKPaths.getSortedChildren(_						client.getZookeeperClient().getZooKeeper(),_						ZKPaths.fixForNamespace(client.getNamespace(), "/"))___				for (String path : children) {_					path = "/" + path___					try {_						final RetrievableStateHandle<T> stateHandle = getAndLock(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					} catch (IOException ioException) {_						LOG.warn("Could not get all ZooKeeper children. Node {} contained " +_							"corrupted data. Releasing and trying to remove this node.", path, ioException)___						releaseAndTryRemove(path)__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion___				_				_			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,and,locks,the,respective,state,nodes,the,result,tuples,contain,the,retrieved,state,and,the,path,to,the,node,in,zoo,keeper,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,retrievable,state,handle,t,string,get,all,sorted,by,name,and,lock,throws,exception,final,list,tuple2,retrievable,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,state,handles,clear,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,retrievable,state,handle,t,state,handle,get,and,lock,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,catch,ioexception,io,exception,log,warn,could,not,get,all,zoo,keeper,children,node,contained,corrupted,data,releasing,and,trying,to,remove,this,node,path,io,exception,release,and,try,remove,path,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<StateHandle<T>, String>> getAllSortedByName() throws Exception;1441121146;Gets all available state handles from ZooKeeper sorted by name (ascending).__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<StateHandle<T>, String>> getAllSortedByName() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			_			int initialCVersion = client.checkExists().forPath("/").getCversion()___			List<String> children = ZKPaths.getSortedChildren(_					client.getZookeeperClient().getZooKeeper(),_					ZKPaths.fixForNamespace(client.getNamespace(), "/"))___			for (String path : children) {_				path = "/" + path___				try {_					final StateHandle<T> stateHandle = get(path)__					stateHandles.add(new Tuple2<>(stateHandle, path))__				}_				catch (KeeperException.NoNodeException ignored) {_					_					continue retry__				}_			}__			int finalCVersion = client.checkExists().forPath("/").getCversion()___			_			success = initialCVersion == finalCVersion__		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,state,handle,t,string,get,all,sorted,by,name,throws,exception,final,list,tuple2,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,int,initial,cversion,client,check,exists,for,path,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<StateHandle<T>, String>> getAllSortedByName() throws Exception;1445247002;Gets all available state handles from ZooKeeper sorted by name (ascending).__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<StateHandle<T>, String>> getAllSortedByName() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			_			int initialCVersion = client.checkExists().forPath("/").getCversion()___			List<String> children = ZKPaths.getSortedChildren(_					client.getZookeeperClient().getZooKeeper(),_					ZKPaths.fixForNamespace(client.getNamespace(), "/"))___			for (String path : children) {_				path = "/" + path___				try {_					final StateHandle<T> stateHandle = get(path)__					stateHandles.add(new Tuple2<>(stateHandle, path))__				}_				catch (KeeperException.NoNodeException ignored) {_					_					continue retry__				}_			}__			int finalCVersion = client.checkExists().forPath("/").getCversion()___			_			success = initialCVersion == finalCVersion__		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,state,handle,t,string,get,all,sorted,by,name,throws,exception,final,list,tuple2,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,int,initial,cversion,client,check,exists,for,path,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<StateHandle<T>, String>> getAllSortedByName() throws Exception;1445550685;Gets all available state handles from ZooKeeper sorted by name (ascending).__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<StateHandle<T>, String>> getAllSortedByName() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			_			int initialCVersion = client.checkExists().forPath("/").getCversion()___			List<String> children = ZKPaths.getSortedChildren(_					client.getZookeeperClient().getZooKeeper(),_					ZKPaths.fixForNamespace(client.getNamespace(), "/"))___			for (String path : children) {_				path = "/" + path___				try {_					final StateHandle<T> stateHandle = get(path)__					stateHandles.add(new Tuple2<>(stateHandle, path))__				}_				catch (KeeperException.NoNodeException ignored) {_					_					continue retry__				}_			}__			int finalCVersion = client.checkExists().forPath("/").getCversion()___			_			success = initialCVersion == finalCVersion__		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,state,handle,t,string,get,all,sorted,by,name,throws,exception,final,list,tuple2,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,int,initial,cversion,client,check,exists,for,path,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<StateHandle<T>, String>> getAllSortedByName() throws Exception;1465394479;Gets all available state handles from ZooKeeper sorted by name (ascending).__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<StateHandle<T>, String>> getAllSortedByName() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			_			int initialCVersion = client.checkExists().forPath("/").getCversion()___			List<String> children = ZKPaths.getSortedChildren(_					client.getZookeeperClient().getZooKeeper(),_					ZKPaths.fixForNamespace(client.getNamespace(), "/"))___			for (String path : children) {_				path = "/" + path___				try {_					final StateHandle<T> stateHandle = get(path)__					stateHandles.add(new Tuple2<>(stateHandle, path))__				}_				catch (KeeperException.NoNodeException ignored) {_					_					continue retry__				}_			}__			int finalCVersion = client.checkExists().forPath("/").getCversion()___			_			success = initialCVersion == finalCVersion__		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,state,handle,t,string,get,all,sorted,by,name,throws,exception,final,list,tuple2,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,int,initial,cversion,client,check,exists,for,path,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> @SuppressWarnings("unchecked") 	public List<Tuple2<StateHandle<T>, String>> getAllSortedByName() throws Exception;1468938623;Gets all available state handles from ZooKeeper sorted by name (ascending).__<p>If there is a concurrent modification, the operation is retried until it succeeds.__@return All state handles in ZooKeeper._@throws Exception If a ZooKeeper or state handle operation fails;@SuppressWarnings("unchecked")_	public List<Tuple2<StateHandle<T>, String>> getAllSortedByName() throws Exception {_		final List<Tuple2<StateHandle<T>, String>> stateHandles = new ArrayList<>()___		boolean success = false___		retry:_		while (!success) {_			Stat stat = client.checkExists().forPath("/")__			if (stat == null) {_				break_ _			} else {_				_				int initialCVersion = stat.getCversion()___				List<String> children = ZKPaths.getSortedChildren(_						client.getZookeeperClient().getZooKeeper(),_						ZKPaths.fixForNamespace(client.getNamespace(), "/"))___				for (String path : children) {_					path = "/" + path___					try {_						final StateHandle<T> stateHandle = get(path)__						stateHandles.add(new Tuple2<>(stateHandle, path))__					} catch (KeeperException.NoNodeException ignored) {_						_						continue retry__					}_				}__				int finalCVersion = client.checkExists().forPath("/").getCversion()___				_				success = initialCVersion == finalCVersion__			}_		}__		return stateHandles__	};gets,all,available,state,handles,from,zoo,keeper,sorted,by,name,ascending,p,if,there,is,a,concurrent,modification,the,operation,is,retried,until,it,succeeds,return,all,state,handles,in,zoo,keeper,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;suppress,warnings,unchecked,public,list,tuple2,state,handle,t,string,get,all,sorted,by,name,throws,exception,final,list,tuple2,state,handle,t,string,state,handles,new,array,list,boolean,success,false,retry,while,success,stat,stat,client,check,exists,for,path,if,stat,null,break,else,int,initial,cversion,stat,get,cversion,list,string,children,zkpaths,get,sorted,children,client,get,zookeeper,client,get,zoo,keeper,zkpaths,fix,for,namespace,client,get,namespace,for,string,path,children,path,path,try,final,state,handle,t,state,handle,get,path,state,handles,add,new,tuple2,state,handle,path,catch,keeper,exception,no,node,exception,ignored,continue,retry,int,final,cversion,client,check,exists,for,path,get,cversion,success,initial,cversion,final,cversion,return,state,handles
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1441121146;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		Stat stat = client.checkExists().forPath(pathInZooKeeper)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,in,zoo,keeper,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1445247002;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		Stat stat = client.checkExists().forPath(pathInZooKeeper)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,in,zoo,keeper,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1445550685;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		Stat stat = client.checkExists().forPath(pathInZooKeeper)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,in,zoo,keeper,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1465394479;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		Stat stat = client.checkExists().forPath(pathInZooKeeper)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,in,zoo,keeper,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1468938623;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		Stat stat = client.checkExists().forPath(pathInZooKeeper)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,in,zoo,keeper,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1470909547;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		Stat stat = client.checkExists().forPath(pathInZooKeeper)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,in,zoo,keeper,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1475656513;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		Stat stat = client.checkExists().forPath(pathInZooKeeper)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,in,zoo,keeper,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1479246304;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		Stat stat = client.checkExists().forPath(pathInZooKeeper)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,in,zoo,keeper,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1480437068;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		Stat stat = client.checkExists().forPath(pathInZooKeeper)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,in,zoo,keeper,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1488387821;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		Stat stat = client.checkExists().forPath(pathInZooKeeper)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,in,zoo,keeper,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1495025524;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		Stat stat = client.checkExists().forPath(path)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1508665243;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		Stat stat = client.checkExists().forPath(path)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1509630459;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		Stat stat = client.checkExists().forPath(path)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1529161094;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		Stat stat = client.checkExists().forPath(path)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1534751191;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		Stat stat = client.checkExists().forPath(path)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1534756758;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		Stat stat = client.checkExists().forPath(path)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1536412777;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		Stat stat = client.checkExists().forPath(path)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1536746131;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		Stat stat = client.checkExists().forPath(path)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public int exists(String pathInZooKeeper) throws Exception;1546977736;Returns the version of the node if it exists or <code>-1</code> if it doesn't.__@param pathInZooKeeper Path in ZooKeeper to check_@return Version of the ZNode if the path exists, <code>-1</code> otherwise._@throws Exception If the ZooKeeper operation fails;public int exists(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		Stat stat = client.checkExists().forPath(path)___		if (stat != null) {_			return stat.getVersion()__		}__		return -1__	};returns,the,version,of,the,node,if,it,exists,or,code,1,code,if,it,doesn,t,param,path,in,zoo,keeper,path,in,zoo,keeper,to,check,return,version,of,the,znode,if,the,path,exists,code,1,code,otherwise,throws,exception,if,the,zoo,keeper,operation,fails;public,int,exists,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,stat,stat,client,check,exists,for,path,path,if,stat,null,return,stat,get,version,return,1
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper) throws Exception;1441121146;Removes a state handle from ZooKeeper.__<p><stong>Important</stong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,p,stong,important,stong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper) throws Exception;1445247002;Removes a state handle from ZooKeeper.__<p><stong>Important</stong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,p,stong,important,stong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper) throws Exception;1445550685;Removes a state handle from ZooKeeper.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper) throws Exception;1465394479;Removes a state handle from ZooKeeper.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper) throws Exception;1468938623;Removes a state handle from ZooKeeper.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper) throws Exception;1470909547;Removes a state handle from ZooKeeper.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper) throws Exception;1475656513;Removes a state handle from ZooKeeper.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper) throws Exception;1479246304;Removes a state handle from ZooKeeper.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper) throws Exception;1480437068;Removes a state handle from ZooKeeper.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public void remove(String pathInZooKeeper) throws Exception;1488387821;Removes a state handle from ZooKeeper.__<p><strong>Important</strong>: this does not discard the state handle. If you want to_discard the state handle call {@link #removeAndDiscardState(String)}.__@param pathInZooKeeper Path of state handle to remove (expected to start with a '/')_@throws Exception If the ZooKeeper operation fails;public void remove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		client.delete().deletingChildrenIfNeeded().forPath(pathInZooKeeper)__	};removes,a,state,handle,from,zoo,keeper,p,strong,important,strong,this,does,not,discard,the,state,handle,if,you,want,to,discard,the,state,handle,call,link,remove,and,discard,state,string,param,path,in,zoo,keeper,path,of,state,handle,to,remove,expected,to,start,with,a,throws,exception,if,the,zoo,keeper,operation,fails;public,void,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,client,delete,deleting,children,if,needed,for,path,path,in,zoo,keeper
ZooKeeperStateHandleStore -> public StateHandle<T> add( 			String pathInZooKeeper, 			T state, 			CreateMode createMode) throws Exception;1445247002;Creates a state handle and stores it in ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet and_start with a '/')_@param state           State to be added_@param createMode      The create mode for the new path in ZooKeeper_@return Created {@link StateHandle}_@throws Exception If a ZooKeeper or state handle operation fails;public StateHandle<T> add(_			String pathInZooKeeper,_			T state,_			CreateMode createMode) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		StateHandle<T> stateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(stateHandle)___			_			_			_			_			client.create().withMode(createMode).forPath(pathInZooKeeper, serializedStateHandle)___			success = true___			return stateHandle__		}_		finally {_			if (!success) {_				_				if (stateHandle != null) {_					stateHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,and,stores,it,in,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,and,start,with,a,param,state,state,to,be,added,param,create,mode,the,create,mode,for,the,new,path,in,zoo,keeper,return,created,link,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,state,handle,t,add,string,path,in,zoo,keeper,t,state,create,mode,create,mode,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,state,handle,t,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,state,handle,client,create,with,mode,create,mode,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,return,state,handle,finally,if,success,if,state,handle,null,state,handle,discard,state
ZooKeeperStateHandleStore -> public StateHandle<T> add( 			String pathInZooKeeper, 			T state, 			CreateMode createMode) throws Exception;1445550685;Creates a state handle and stores it in ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet and_start with a '/')_@param state           State to be added_@param createMode      The create mode for the new path in ZooKeeper_@return Created {@link StateHandle}_@throws Exception If a ZooKeeper or state handle operation fails;public StateHandle<T> add(_			String pathInZooKeeper,_			T state,_			CreateMode createMode) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		StateHandle<T> stateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(stateHandle)___			_			_			_			_			client.create().withMode(createMode).forPath(pathInZooKeeper, serializedStateHandle)___			success = true___			return stateHandle__		}_		finally {_			if (!success) {_				_				if (stateHandle != null) {_					stateHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,and,stores,it,in,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,and,start,with,a,param,state,state,to,be,added,param,create,mode,the,create,mode,for,the,new,path,in,zoo,keeper,return,created,link,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,state,handle,t,add,string,path,in,zoo,keeper,t,state,create,mode,create,mode,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,state,handle,t,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,state,handle,client,create,with,mode,create,mode,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,return,state,handle,finally,if,success,if,state,handle,null,state,handle,discard,state
ZooKeeperStateHandleStore -> public StateHandle<T> add( 			String pathInZooKeeper, 			T state, 			CreateMode createMode) throws Exception;1465394479;Creates a state handle and stores it in ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet and_start with a '/')_@param state           State to be added_@param createMode      The create mode for the new path in ZooKeeper_@return Created {@link StateHandle}_@throws Exception If a ZooKeeper or state handle operation fails;public StateHandle<T> add(_			String pathInZooKeeper,_			T state,_			CreateMode createMode) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		StateHandle<T> stateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(stateHandle)___			_			_			_			_			client.create().withMode(createMode).forPath(pathInZooKeeper, serializedStateHandle)___			success = true___			return stateHandle__		}_		finally {_			if (!success) {_				_				if (stateHandle != null) {_					stateHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,and,stores,it,in,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,and,start,with,a,param,state,state,to,be,added,param,create,mode,the,create,mode,for,the,new,path,in,zoo,keeper,return,created,link,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,state,handle,t,add,string,path,in,zoo,keeper,t,state,create,mode,create,mode,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,state,handle,t,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,state,handle,client,create,with,mode,create,mode,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,return,state,handle,finally,if,success,if,state,handle,null,state,handle,discard,state
ZooKeeperStateHandleStore -> public StateHandle<T> add( 			String pathInZooKeeper, 			T state, 			CreateMode createMode) throws Exception;1468938623;Creates a state handle and stores it in ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet and_start with a '/')_@param state           State to be added_@param createMode      The create mode for the new path in ZooKeeper_@return Created {@link StateHandle}_@throws Exception If a ZooKeeper or state handle operation fails;public StateHandle<T> add(_			String pathInZooKeeper,_			T state,_			CreateMode createMode) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		StateHandle<T> stateHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStateHandle = InstantiationUtil.serializeObject(stateHandle)___			_			_			_			_			client.create().withMode(createMode).forPath(pathInZooKeeper, serializedStateHandle)___			success = true___			return stateHandle__		}_		finally {_			if (!success) {_				_				if (stateHandle != null) {_					stateHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,and,stores,it,in,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,and,start,with,a,param,state,state,to,be,added,param,create,mode,the,create,mode,for,the,new,path,in,zoo,keeper,return,created,link,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,state,handle,t,add,string,path,in,zoo,keeper,t,state,create,mode,create,mode,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,state,handle,t,state,handle,storage,store,state,boolean,success,false,try,byte,serialized,state,handle,instantiation,util,serialize,object,state,handle,client,create,with,mode,create,mode,for,path,path,in,zoo,keeper,serialized,state,handle,success,true,return,state,handle,finally,if,success,if,state,handle,null,state,handle,discard,state
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> addAndLock( 			String pathInZooKeeper, 			T state) throws Exception;1495025524;Creates a state handle, stores it in ZooKeeper and locks it. A locked node cannot be removed by_another {@link ZooKeeperStateHandleStore} instance as long as this instance remains connected_to ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__<p>The operation will fail if there is already an node under the given path__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet)_@param state           State to be added__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> addAndLock(_			String pathInZooKeeper,_			T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			_			_			client.inTransaction().create().withMode(CreateMode.PERSISTENT).forPath(path, serializedStoreHandle)_				.and().create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))_				.and().commit()___			success = true__			return storeHandle__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,stores,it,in,zoo,keeper,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,p,the,operation,will,fail,if,there,is,already,an,node,under,the,given,path,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,param,state,state,to,be,added,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,and,lock,string,path,in,zoo,keeper,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,in,transaction,create,with,mode,create,mode,persistent,for,path,path,serialized,store,handle,and,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,and,commit,success,true,return,store,handle,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> addAndLock( 			String pathInZooKeeper, 			T state) throws Exception;1508665243;Creates a state handle, stores it in ZooKeeper and locks it. A locked node cannot be removed by_another {@link ZooKeeperStateHandleStore} instance as long as this instance remains connected_to ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__<p>The operation will fail if there is already an node under the given path__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet)_@param state           State to be added__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> addAndLock(_			String pathInZooKeeper,_			T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			_			_			client.inTransaction().create().withMode(CreateMode.PERSISTENT).forPath(path, serializedStoreHandle)_				.and().create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))_				.and().commit()___			success = true__			return storeHandle__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,stores,it,in,zoo,keeper,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,p,the,operation,will,fail,if,there,is,already,an,node,under,the,given,path,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,param,state,state,to,be,added,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,and,lock,string,path,in,zoo,keeper,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,in,transaction,create,with,mode,create,mode,persistent,for,path,path,serialized,store,handle,and,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,and,commit,success,true,return,store,handle,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> addAndLock( 			String pathInZooKeeper, 			T state) throws Exception;1509630459;Creates a state handle, stores it in ZooKeeper and locks it. A locked node cannot be removed by_another {@link ZooKeeperStateHandleStore} instance as long as this instance remains connected_to ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__<p>The operation will fail if there is already an node under the given path__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet)_@param state           State to be added__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> addAndLock(_			String pathInZooKeeper,_			T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			_			_			client.inTransaction().create().withMode(CreateMode.PERSISTENT).forPath(path, serializedStoreHandle)_				.and().create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))_				.and().commit()___			success = true__			return storeHandle__		}_		catch (KeeperException.NodeExistsException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,stores,it,in,zoo,keeper,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,p,the,operation,will,fail,if,there,is,already,an,node,under,the,given,path,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,param,state,state,to,be,added,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,and,lock,string,path,in,zoo,keeper,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,in,transaction,create,with,mode,create,mode,persistent,for,path,path,serialized,store,handle,and,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,and,commit,success,true,return,store,handle,catch,keeper,exception,node,exists,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> addAndLock( 			String pathInZooKeeper, 			T state) throws Exception;1529161094;Creates a state handle, stores it in ZooKeeper and locks it. A locked node cannot be removed by_another {@link ZooKeeperStateHandleStore} instance as long as this instance remains connected_to ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__<p>The operation will fail if there is already an node under the given path__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet)_@param state           State to be added__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> addAndLock(_			String pathInZooKeeper,_			T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			_			_			client.inTransaction().create().withMode(CreateMode.PERSISTENT).forPath(path, serializedStoreHandle)_				.and().create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))_				.and().commit()___			success = true__			return storeHandle__		}_		catch (KeeperException.NodeExistsException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,stores,it,in,zoo,keeper,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,p,the,operation,will,fail,if,there,is,already,an,node,under,the,given,path,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,param,state,state,to,be,added,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,and,lock,string,path,in,zoo,keeper,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,in,transaction,create,with,mode,create,mode,persistent,for,path,path,serialized,store,handle,and,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,and,commit,success,true,return,store,handle,catch,keeper,exception,node,exists,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> addAndLock( 			String pathInZooKeeper, 			T state) throws Exception;1534751191;Creates a state handle, stores it in ZooKeeper and locks it. A locked node cannot be removed by_another {@link ZooKeeperStateHandleStore} instance as long as this instance remains connected_to ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__<p>The operation will fail if there is already an node under the given path__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet)_@param state           State to be added__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> addAndLock(_			String pathInZooKeeper,_			T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			_			_			client.inTransaction().create().withMode(CreateMode.PERSISTENT).forPath(path, serializedStoreHandle)_				.and().create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))_				.and().commit()___			success = true__			return storeHandle__		}_		catch (KeeperException.NodeExistsException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,stores,it,in,zoo,keeper,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,p,the,operation,will,fail,if,there,is,already,an,node,under,the,given,path,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,param,state,state,to,be,added,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,and,lock,string,path,in,zoo,keeper,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,in,transaction,create,with,mode,create,mode,persistent,for,path,path,serialized,store,handle,and,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,and,commit,success,true,return,store,handle,catch,keeper,exception,node,exists,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> addAndLock( 			String pathInZooKeeper, 			T state) throws Exception;1534756758;Creates a state handle, stores it in ZooKeeper and locks it. A locked node cannot be removed by_another {@link ZooKeeperStateHandleStore} instance as long as this instance remains connected_to ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__<p>The operation will fail if there is already an node under the given path__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet)_@param state           State to be added__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> addAndLock(_			String pathInZooKeeper,_			T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			_			_			client.inTransaction().create().withMode(CreateMode.PERSISTENT).forPath(path, serializedStoreHandle)_				.and().create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))_				.and().commit()___			success = true__			return storeHandle__		}_		catch (KeeperException.NodeExistsException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,stores,it,in,zoo,keeper,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,p,the,operation,will,fail,if,there,is,already,an,node,under,the,given,path,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,param,state,state,to,be,added,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,and,lock,string,path,in,zoo,keeper,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,in,transaction,create,with,mode,create,mode,persistent,for,path,path,serialized,store,handle,and,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,and,commit,success,true,return,store,handle,catch,keeper,exception,node,exists,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> addAndLock( 			String pathInZooKeeper, 			T state) throws Exception;1536412777;Creates a state handle, stores it in ZooKeeper and locks it. A locked node cannot be removed by_another {@link ZooKeeperStateHandleStore} instance as long as this instance remains connected_to ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__<p>The operation will fail if there is already an node under the given path__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet)_@param state           State to be added__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> addAndLock(_			String pathInZooKeeper,_			T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			_			_			client.inTransaction().create().withMode(CreateMode.PERSISTENT).forPath(path, serializedStoreHandle)_				.and().create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))_				.and().commit()___			success = true__			return storeHandle__		}_		catch (KeeperException.NodeExistsException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,stores,it,in,zoo,keeper,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,p,the,operation,will,fail,if,there,is,already,an,node,under,the,given,path,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,param,state,state,to,be,added,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,and,lock,string,path,in,zoo,keeper,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,in,transaction,create,with,mode,create,mode,persistent,for,path,path,serialized,store,handle,and,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,and,commit,success,true,return,store,handle,catch,keeper,exception,node,exists,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> addAndLock( 			String pathInZooKeeper, 			T state) throws Exception;1536746131;Creates a state handle, stores it in ZooKeeper and locks it. A locked node cannot be removed by_another {@link ZooKeeperStateHandleStore} instance as long as this instance remains connected_to ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__<p>The operation will fail if there is already an node under the given path__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet)_@param state           State to be added__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> addAndLock(_			String pathInZooKeeper,_			T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			_			_			client.inTransaction().create().withMode(CreateMode.PERSISTENT).forPath(path, serializedStoreHandle)_				.and().create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))_				.and().commit()___			success = true__			return storeHandle__		}_		catch (KeeperException.NodeExistsException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,stores,it,in,zoo,keeper,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,p,the,operation,will,fail,if,there,is,already,an,node,under,the,given,path,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,param,state,state,to,be,added,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,and,lock,string,path,in,zoo,keeper,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,in,transaction,create,with,mode,create,mode,persistent,for,path,path,serialized,store,handle,and,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,and,commit,success,true,return,store,handle,catch,keeper,exception,node,exists,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> public RetrievableStateHandle<T> addAndLock( 			String pathInZooKeeper, 			T state) throws Exception;1546977736;Creates a state handle, stores it in ZooKeeper and locks it. A locked node cannot be removed by_another {@link ZooKeeperStateHandleStore} instance as long as this instance remains connected_to ZooKeeper.__<p><strong>Important</strong>: This will <em>not</em> store the actual state in_ZooKeeper, but create a state handle and store it in ZooKeeper. This level of indirection_makes sure that data in ZooKeeper is small.__<p>The operation will fail if there is already an node under the given path__@param pathInZooKeeper Destination path in ZooKeeper (expected to *not* exist yet)_@param state           State to be added__@return The Created {@link RetrievableStateHandle}._@throws Exception If a ZooKeeper or state handle operation fails;public RetrievableStateHandle<T> addAndLock(_			String pathInZooKeeper,_			T state) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")__		checkNotNull(state, "State")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> storeHandle = storage.store(state)___		boolean success = false___		try {_			_			byte[] serializedStoreHandle = InstantiationUtil.serializeObject(storeHandle)___			_			_			_			_			_			_			client.inTransaction().create().withMode(CreateMode.PERSISTENT).forPath(path, serializedStoreHandle)_				.and().create().withMode(CreateMode.EPHEMERAL).forPath(getLockPath(path))_				.and().commit()___			success = true__			return storeHandle__		}_		catch (KeeperException.NodeExistsException e) {_			throw new ConcurrentModificationException("ZooKeeper unexpectedly modified", e)__		}_		finally {_			if (!success) {_				_				if (storeHandle != null) {_					storeHandle.discardState()__				}_			}_		}_	};creates,a,state,handle,stores,it,in,zoo,keeper,and,locks,it,a,locked,node,cannot,be,removed,by,another,link,zoo,keeper,state,handle,store,instance,as,long,as,this,instance,remains,connected,to,zoo,keeper,p,strong,important,strong,this,will,em,not,em,store,the,actual,state,in,zoo,keeper,but,create,a,state,handle,and,store,it,in,zoo,keeper,this,level,of,indirection,makes,sure,that,data,in,zoo,keeper,is,small,p,the,operation,will,fail,if,there,is,already,an,node,under,the,given,path,param,path,in,zoo,keeper,destination,path,in,zoo,keeper,expected,to,not,exist,yet,param,state,state,to,be,added,return,the,created,link,retrievable,state,handle,throws,exception,if,a,zoo,keeper,or,state,handle,operation,fails;public,retrievable,state,handle,t,add,and,lock,string,path,in,zoo,keeper,t,state,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,check,not,null,state,state,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,store,handle,storage,store,state,boolean,success,false,try,byte,serialized,store,handle,instantiation,util,serialize,object,store,handle,client,in,transaction,create,with,mode,create,mode,persistent,for,path,path,serialized,store,handle,and,create,with,mode,create,mode,ephemeral,for,path,get,lock,path,path,and,commit,success,true,return,store,handle,catch,keeper,exception,node,exists,exception,e,throw,new,concurrent,modification,exception,zoo,keeper,unexpectedly,modified,e,finally,if,success,if,store,handle,null,store,handle,discard,state
ZooKeeperStateHandleStore -> @Nullable 	public boolean releaseAndTryRemove(String pathInZooKeeper) throws Exception;1534756758;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._It returns the {@link RetrievableStateHandle} stored under the given state node if any.__@param pathInZooKeeper Path of state handle to remove_@return True if the state handle could be released_@throws Exception If the ZooKeeper operation or discarding the state handle fails;@Nullable_	public boolean releaseAndTryRemove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> stateHandle = null___		try {_			stateHandle = get(path, false)__		} catch (Exception e) {_			LOG.warn("Could not retrieve the state handle from node {}.", path, e)__		}__		release(pathInZooKeeper)___		try {_			client.delete().forPath(path)__		} catch (KeeperException.NotEmptyException ignored) {_			LOG.debug("Could not delete znode {} because it is still locked.", path)__			return false__		}__		if (stateHandle != null) {_			stateHandle.discardState()__		}__		return true__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,it,returns,the,link,retrievable,state,handle,stored,under,the,given,state,node,if,any,param,path,in,zoo,keeper,path,of,state,handle,to,remove,return,true,if,the,state,handle,could,be,released,throws,exception,if,the,zoo,keeper,operation,or,discarding,the,state,handle,fails;nullable,public,boolean,release,and,try,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,null,try,state,handle,get,path,false,catch,exception,e,log,warn,could,not,retrieve,the,state,handle,from,node,path,e,release,path,in,zoo,keeper,try,client,delete,for,path,path,catch,keeper,exception,not,empty,exception,ignored,log,debug,could,not,delete,znode,because,it,is,still,locked,path,return,false,if,state,handle,null,state,handle,discard,state,return,true
ZooKeeperStateHandleStore -> @Nullable 	public boolean releaseAndTryRemove(String pathInZooKeeper) throws Exception;1536412777;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._It returns the {@link RetrievableStateHandle} stored under the given state node if any.__@param pathInZooKeeper Path of state handle to remove_@return True if the state handle could be released_@throws Exception If the ZooKeeper operation or discarding the state handle fails;@Nullable_	public boolean releaseAndTryRemove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> stateHandle = null___		try {_			stateHandle = get(path, false)__		} catch (Exception e) {_			LOG.warn("Could not retrieve the state handle from node {}.", path, e)__		}__		release(pathInZooKeeper)___		try {_			client.delete().forPath(path)__		} catch (KeeperException.NotEmptyException ignored) {_			LOG.debug("Could not delete znode {} because it is still locked.", path)__			return false__		}__		if (stateHandle != null) {_			stateHandle.discardState()__		}__		return true__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,it,returns,the,link,retrievable,state,handle,stored,under,the,given,state,node,if,any,param,path,in,zoo,keeper,path,of,state,handle,to,remove,return,true,if,the,state,handle,could,be,released,throws,exception,if,the,zoo,keeper,operation,or,discarding,the,state,handle,fails;nullable,public,boolean,release,and,try,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,null,try,state,handle,get,path,false,catch,exception,e,log,warn,could,not,retrieve,the,state,handle,from,node,path,e,release,path,in,zoo,keeper,try,client,delete,for,path,path,catch,keeper,exception,not,empty,exception,ignored,log,debug,could,not,delete,znode,because,it,is,still,locked,path,return,false,if,state,handle,null,state,handle,discard,state,return,true
ZooKeeperStateHandleStore -> @Nullable 	public boolean releaseAndTryRemove(String pathInZooKeeper) throws Exception;1536746131;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._It returns the {@link RetrievableStateHandle} stored under the given state node if any.__@param pathInZooKeeper Path of state handle to remove_@return True if the state handle could be released_@throws Exception If the ZooKeeper operation or discarding the state handle fails;@Nullable_	public boolean releaseAndTryRemove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> stateHandle = null___		try {_			stateHandle = get(path, false)__		} catch (Exception e) {_			LOG.warn("Could not retrieve the state handle from node {}.", path, e)__		}__		release(pathInZooKeeper)___		try {_			client.delete().forPath(path)__		} catch (KeeperException.NotEmptyException ignored) {_			LOG.debug("Could not delete znode {} because it is still locked.", path)__			return false__		}__		if (stateHandle != null) {_			stateHandle.discardState()__		}__		return true__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,it,returns,the,link,retrievable,state,handle,stored,under,the,given,state,node,if,any,param,path,in,zoo,keeper,path,of,state,handle,to,remove,return,true,if,the,state,handle,could,be,released,throws,exception,if,the,zoo,keeper,operation,or,discarding,the,state,handle,fails;nullable,public,boolean,release,and,try,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,null,try,state,handle,get,path,false,catch,exception,e,log,warn,could,not,retrieve,the,state,handle,from,node,path,e,release,path,in,zoo,keeper,try,client,delete,for,path,path,catch,keeper,exception,not,empty,exception,ignored,log,debug,could,not,delete,znode,because,it,is,still,locked,path,return,false,if,state,handle,null,state,handle,discard,state,return,true
ZooKeeperStateHandleStore -> @Nullable 	public boolean releaseAndTryRemove(String pathInZooKeeper) throws Exception;1546977736;Releases the lock for the given state node and tries to remove the state node if it is no longer locked._It returns the {@link RetrievableStateHandle} stored under the given state node if any.__@param pathInZooKeeper Path of state handle to remove_@return True if the state handle could be released_@throws Exception If the ZooKeeper operation or discarding the state handle fails;@Nullable_	public boolean releaseAndTryRemove(String pathInZooKeeper) throws Exception {_		checkNotNull(pathInZooKeeper, "Path in ZooKeeper")___		final String path = normalizePath(pathInZooKeeper)___		RetrievableStateHandle<T> stateHandle = null___		try {_			stateHandle = get(path, false)__		} catch (Exception e) {_			LOG.warn("Could not retrieve the state handle from node {}.", path, e)__		}__		release(pathInZooKeeper)___		try {_			client.delete().forPath(path)__		} catch (KeeperException.NotEmptyException ignored) {_			LOG.debug("Could not delete znode {} because it is still locked.", path)__			return false__		}__		if (stateHandle != null) {_			stateHandle.discardState()__		}__		return true__	};releases,the,lock,for,the,given,state,node,and,tries,to,remove,the,state,node,if,it,is,no,longer,locked,it,returns,the,link,retrievable,state,handle,stored,under,the,given,state,node,if,any,param,path,in,zoo,keeper,path,of,state,handle,to,remove,return,true,if,the,state,handle,could,be,released,throws,exception,if,the,zoo,keeper,operation,or,discarding,the,state,handle,fails;nullable,public,boolean,release,and,try,remove,string,path,in,zoo,keeper,throws,exception,check,not,null,path,in,zoo,keeper,path,in,zoo,keeper,final,string,path,normalize,path,path,in,zoo,keeper,retrievable,state,handle,t,state,handle,null,try,state,handle,get,path,false,catch,exception,e,log,warn,could,not,retrieve,the,state,handle,from,node,path,e,release,path,in,zoo,keeper,try,client,delete,for,path,path,catch,keeper,exception,not,empty,exception,ignored,log,debug,could,not,delete,znode,because,it,is,still,locked,path,return,false,if,state,handle,null,state,handle,discard,state,return,true
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		StateStorageHelper storage) throws IOException;1445247002;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		StateStorageHelper storage) throws IOException {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code;public,zoo,keeper,state,handle,store,curator,framework,client,state,storage,helper,storage,throws,ioexception,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		StateStorageHelper storage) throws IOException;1445550685;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		StateStorageHelper storage) throws IOException {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code;public,zoo,keeper,state,handle,store,curator,framework,client,state,storage,helper,storage,throws,ioexception,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		StateStorageHelper storage) throws IOException;1465394479;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		StateStorageHelper storage) throws IOException {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code;public,zoo,keeper,state,handle,store,curator,framework,client,state,storage,helper,storage,throws,ioexception,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		StateStorageHelper storage) throws IOException;1468938623;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		StateStorageHelper storage) throws IOException {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code;public,zoo,keeper,state,handle,store,curator,framework,client,state,storage,helper,storage,throws,ioexception,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage) throws IOException;1470909547;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage) throws IOException {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,throws,ioexception,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage
ZooKeeperStateHandleStore -> public ZooKeeperStateHandleStore( 		CuratorFramework client, 		RetrievableStateStorageHelper<T> storage) throws IOException;1475656513;Creates a {@link ZooKeeperStateHandleStore}.__@param client              The Curator ZooKeeper client. <strong>Important:</strong> It is_expected that the client's namespace ensures that the root_path is exclusive for all state handles managed by this_instance, e.g. <code>client.usingNamespace("/stateHandles")</code>;public ZooKeeperStateHandleStore(_		CuratorFramework client,_		RetrievableStateStorageHelper<T> storage) throws IOException {__		this.client = checkNotNull(client, "Curator client")__		this.storage = checkNotNull(storage, "State storage")__	};creates,a,link,zoo,keeper,state,handle,store,param,client,the,curator,zoo,keeper,client,strong,important,strong,it,is,expected,that,the,client,s,namespace,ensures,that,the,root,path,is,exclusive,for,all,state,handles,managed,by,this,instance,e,g,code,client,using,namespace,state,handles,code;public,zoo,keeper,state,handle,store,curator,framework,client,retrievable,state,storage,helper,t,storage,throws,ioexception,this,client,check,not,null,client,curator,client,this,storage,check,not,null,storage,state,storage
ZooKeeperStateHandleStore -> public void releaseAll() throws Exception;1495025524;Releases all lock nodes of this ZooKeeperStateHandleStore.__@throws Exception if the delete operation of a lock file fails;public void releaseAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child: children) {_			try {_				release(child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,store,throws,exception,if,the,delete,operation,of,a,lock,file,fails;public,void,release,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAll() throws Exception;1508665243;Releases all lock nodes of this ZooKeeperStateHandleStore.__@throws Exception if the delete operation of a lock file fails;public void releaseAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child: children) {_			try {_				release(child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,store,throws,exception,if,the,delete,operation,of,a,lock,file,fails;public,void,release,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAll() throws Exception;1509630459;Releases all lock nodes of this ZooKeeperStateHandleStore.__@throws Exception if the delete operation of a lock file fails;public void releaseAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child: children) {_			try {_				release(child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,store,throws,exception,if,the,delete,operation,of,a,lock,file,fails;public,void,release,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAll() throws Exception;1529161094;Releases all lock nodes of this ZooKeeperStateHandleStore.__@throws Exception if the delete operation of a lock file fails;public void releaseAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child: children) {_			try {_				release(child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,store,throws,exception,if,the,delete,operation,of,a,lock,file,fails;public,void,release,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAll() throws Exception;1534751191;Releases all lock nodes of this ZooKeeperStateHandleStore.__@throws Exception if the delete operation of a lock file fails;public void releaseAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child: children) {_			try {_				release(child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,store,throws,exception,if,the,delete,operation,of,a,lock,file,fails;public,void,release,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAll() throws Exception;1534756758;Releases all lock nodes of this ZooKeeperStateHandleStore.__@throws Exception if the delete operation of a lock file fails;public void releaseAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child: children) {_			try {_				release(child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,store,throws,exception,if,the,delete,operation,of,a,lock,file,fails;public,void,release,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAll() throws Exception;1536412777;Releases all lock nodes of this ZooKeeperStateHandleStore.__@throws Exception if the delete operation of a lock file fails;public void releaseAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child: children) {_			try {_				release(child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,store,throws,exception,if,the,delete,operation,of,a,lock,file,fails;public,void,release,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAll() throws Exception;1536746131;Releases all lock nodes of this ZooKeeperStateHandleStore.__@throws Exception if the delete operation of a lock file fails;public void releaseAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child: children) {_			try {_				release(child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,store,throws,exception,if,the,delete,operation,of,a,lock,file,fails;public,void,release,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,all,state,nodes,exception
ZooKeeperStateHandleStore -> public void releaseAll() throws Exception;1546977736;Releases all lock nodes of this ZooKeeperStateHandleStore.__@throws Exception if the delete operation of a lock file fails;public void releaseAll() throws Exception {_		Collection<String> children = getAllPaths()___		Exception exception = null___		for (String child: children) {_			try {_				release(child)__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		if (exception != null) {_			throw new Exception("Could not properly release all state nodes.", exception)__		}_	};releases,all,lock,nodes,of,this,zoo,keeper,state,handle,store,throws,exception,if,the,delete,operation,of,a,lock,file,fails;public,void,release,all,throws,exception,collection,string,children,get,all,paths,exception,exception,null,for,string,child,children,try,release,child,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,exception,could,not,properly,release,all,state,nodes,exception
