# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractBlobCache -> public int getPort();1505901925;Returns the port the BLOB server is listening on.__@return BLOB server port;public int getPort() {_		return serverAddress.getPort()__	};returns,the,port,the,blob,server,is,listening,on,return,blob,server,port;public,int,get,port,return,server,address,get,port
AbstractBlobCache -> public int getPort();1507188807;Returns the port the BLOB server is listening on.__@return BLOB server port;public int getPort() {_		return serverAddress.getPort()__	};returns,the,port,the,blob,server,is,listening,on,return,blob,server,port;public,int,get,port,return,server,address,get,port
AbstractBlobCache -> public int getPort();1513603142;Returns the port the BLOB server is listening on.__@return BLOB server port;public int getPort() {_		return serverAddress.getPort()__	};returns,the,port,the,blob,server,is,listening,on,return,blob,server,port;public,int,get,port,return,server,address,get,port
AbstractBlobCache -> public int getPort();1517911296;Returns the port the BLOB server is listening on.__@return BLOB server port or {@code -1} if no server address;public int getPort() {_		final InetSocketAddress currentServerAddress = serverAddress___		if (currentServerAddress != null) {_			return serverAddress.getPort()__		} else {_			return -1__		}_	};returns,the,port,the,blob,server,is,listening,on,return,blob,server,port,or,code,1,if,no,server,address;public,int,get,port,final,inet,socket,address,current,server,address,server,address,if,current,server,address,null,return,server,address,get,port,else,return,1
AbstractBlobCache -> public int getPort();1517911540;Returns the port the BLOB server is listening on.__@return BLOB server port or {@code -1} if no server address;public int getPort() {_		final InetSocketAddress currentServerAddress = serverAddress___		if (currentServerAddress != null) {_			return currentServerAddress.getPort()__		} else {_			return -1__		}_	};returns,the,port,the,blob,server,is,listening,on,return,blob,server,port,or,code,1,if,no,server,address;public,int,get,port,final,inet,socket,address,current,server,address,server,address,if,current,server,address,null,return,current,server,address,get,port,else,return,1
AbstractBlobCache -> public int getPort();1519384290;Returns the port the BLOB server is listening on.__@return BLOB server port or {@code -1} if no server address;public int getPort() {_		final InetSocketAddress currentServerAddress = serverAddress___		if (currentServerAddress != null) {_			return currentServerAddress.getPort()__		} else {_			return -1__		}_	};returns,the,port,the,blob,server,is,listening,on,return,blob,server,port,or,code,1,if,no,server,address;public,int,get,port,final,inet,socket,address,current,server,address,server,address,if,current,server,address,null,return,current,server,address,get,port,else,return,1
AbstractBlobCache -> File createTemporaryFilename() throws IOException;1505901925;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_			String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
AbstractBlobCache -> File createTemporaryFilename() throws IOException;1507188807;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_			String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
AbstractBlobCache -> File createTemporaryFilename() throws IOException;1513603142;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_			String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
AbstractBlobCache -> File createTemporaryFilename() throws IOException;1517911296;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_			String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
AbstractBlobCache -> File createTemporaryFilename() throws IOException;1517911540;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_			String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
AbstractBlobCache -> File createTemporaryFilename() throws IOException;1519384290;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_			String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
AbstractBlobCache -> protected File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1505901925;Returns local copy of the file for the BLOB with the given key.__<p>The method will first attempt to serve the BLOB from its local cache. If the BLOB is not_in the cache, the method will try to download it from this cache's BLOB server via a_distributed BLOB store (if available) or direct end-to-end download.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_The key of the desired BLOB.__@return file referring to the local storage location of the BLOB.__@throws IOException_Thrown if an I/O error occurs while downloading the BLOBs from the BLOB server.;protected File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			if (localFile.exists()) {_				return localFile__			}_		} finally {_			readWriteLock.readLock().unlock()__		}__		_		_		File incomingFile = createTemporaryFilename()__		try {_			try {_				if (blobView.get(jobId, blobKey, incomingFile)) {_					_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, readWriteLock.writeLock(), log, null)___					return localFile__				}_			} catch (Exception e) {_				log.info("Failed to copy from blob store. Downloading from BLOB server instead.", e)__			}__			_			BlobClient.downloadFromBlobServer(_				jobId, blobKey, incomingFile, serverAddress, blobClientConfig, numFetchRetries)___			BlobUtils.moveTempFileToStore(_				incomingFile, jobId, blobKey, localFile, readWriteLock.writeLock(), log, null)___			return localFile__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};returns,local,copy,of,the,file,for,the,blob,with,the,given,key,p,the,method,will,first,attempt,to,serve,the,blob,from,its,local,cache,if,the,blob,is,not,in,the,cache,the,method,will,try,to,download,it,from,this,cache,s,blob,server,via,a,distributed,blob,store,if,available,or,direct,end,to,end,download,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,the,key,of,the,desired,blob,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,downloading,the,blobs,from,the,blob,server;protected,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,if,local,file,exists,return,local,file,finally,read,write,lock,read,lock,unlock,file,incoming,file,create,temporary,filename,try,try,if,blob,view,get,job,id,blob,key,incoming,file,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,read,write,lock,write,lock,log,null,return,local,file,catch,exception,e,log,info,failed,to,copy,from,blob,store,downloading,from,blob,server,instead,e,blob,client,download,from,blob,server,job,id,blob,key,incoming,file,server,address,blob,client,config,num,fetch,retries,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,read,write,lock,write,lock,log,null,return,local,file,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
AbstractBlobCache -> protected File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1507188807;Returns local copy of the file for the BLOB with the given key.__<p>The method will first attempt to serve the BLOB from its local cache. If the BLOB is not_in the cache, the method will try to download it from this cache's BLOB server via a_distributed BLOB store (if available) or direct end-to-end download.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_The key of the desired BLOB.__@return file referring to the local storage location of the BLOB.__@throws IOException_Thrown if an I/O error occurs while downloading the BLOBs from the BLOB server.;protected File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			if (localFile.exists()) {_				return localFile__			}_		} finally {_			readWriteLock.readLock().unlock()__		}__		_		_		File incomingFile = createTemporaryFilename()__		try {_			try {_				if (blobView.get(jobId, blobKey, incomingFile)) {_					_					readWriteLock.writeLock().lock()__					try {_						BlobUtils.moveTempFileToStore(_							incomingFile, jobId, blobKey, localFile, log, null)__					} finally {_						readWriteLock.writeLock().unlock()__					}__					return localFile__				}_			} catch (Exception e) {_				log.info("Failed to copy from blob store. Downloading from BLOB server instead.", e)__			}__			_			BlobClient.downloadFromBlobServer(_				jobId, blobKey, incomingFile, serverAddress, blobClientConfig, numFetchRetries)___			readWriteLock.writeLock().lock()__			try {_				BlobUtils.moveTempFileToStore(_					incomingFile, jobId, blobKey, localFile, log, null)__			} finally {_				readWriteLock.writeLock().unlock()__			}__			return localFile__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};returns,local,copy,of,the,file,for,the,blob,with,the,given,key,p,the,method,will,first,attempt,to,serve,the,blob,from,its,local,cache,if,the,blob,is,not,in,the,cache,the,method,will,try,to,download,it,from,this,cache,s,blob,server,via,a,distributed,blob,store,if,available,or,direct,end,to,end,download,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,the,key,of,the,desired,blob,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,downloading,the,blobs,from,the,blob,server;protected,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,if,local,file,exists,return,local,file,finally,read,write,lock,read,lock,unlock,file,incoming,file,create,temporary,filename,try,try,if,blob,view,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,local,file,catch,exception,e,log,info,failed,to,copy,from,blob,store,downloading,from,blob,server,instead,e,blob,client,download,from,blob,server,job,id,blob,key,incoming,file,server,address,blob,client,config,num,fetch,retries,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,local,file,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
AbstractBlobCache -> protected File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1513603142;Returns local copy of the file for the BLOB with the given key.__<p>The method will first attempt to serve the BLOB from its local cache. If the BLOB is not_in the cache, the method will try to download it from this cache's BLOB server via a_distributed BLOB store (if available) or direct end-to-end download.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_The key of the desired BLOB.__@return file referring to the local storage location of the BLOB.__@throws IOException_Thrown if an I/O error occurs while downloading the BLOBs from the BLOB server.;protected File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			if (localFile.exists()) {_				return localFile__			}_		} finally {_			readWriteLock.readLock().unlock()__		}__		_		_		File incomingFile = createTemporaryFilename()__		try {_			try {_				if (blobView.get(jobId, blobKey, incomingFile)) {_					_					readWriteLock.writeLock().lock()__					try {_						BlobUtils.moveTempFileToStore(_							incomingFile, jobId, blobKey, localFile, log, null)__					} finally {_						readWriteLock.writeLock().unlock()__					}__					return localFile__				}_			} catch (Exception e) {_				log.info("Failed to copy from blob store. Downloading from BLOB server instead.", e)__			}__			_			BlobClient.downloadFromBlobServer(_				jobId, blobKey, incomingFile, serverAddress, blobClientConfig, numFetchRetries)___			readWriteLock.writeLock().lock()__			try {_				BlobUtils.moveTempFileToStore(_					incomingFile, jobId, blobKey, localFile, log, null)__			} finally {_				readWriteLock.writeLock().unlock()__			}__			return localFile__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};returns,local,copy,of,the,file,for,the,blob,with,the,given,key,p,the,method,will,first,attempt,to,serve,the,blob,from,its,local,cache,if,the,blob,is,not,in,the,cache,the,method,will,try,to,download,it,from,this,cache,s,blob,server,via,a,distributed,blob,store,if,available,or,direct,end,to,end,download,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,the,key,of,the,desired,blob,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,downloading,the,blobs,from,the,blob,server;protected,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,if,local,file,exists,return,local,file,finally,read,write,lock,read,lock,unlock,file,incoming,file,create,temporary,filename,try,try,if,blob,view,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,local,file,catch,exception,e,log,info,failed,to,copy,from,blob,store,downloading,from,blob,server,instead,e,blob,client,download,from,blob,server,job,id,blob,key,incoming,file,server,address,blob,client,config,num,fetch,retries,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,local,file,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
AbstractBlobCache -> protected File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1517911296;Returns local copy of the file for the BLOB with the given key.__<p>The method will first attempt to serve the BLOB from its local cache. If the BLOB is not_in the cache, the method will try to download it from this cache's BLOB server via a_distributed BLOB store (if available) or direct end-to-end download.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_The key of the desired BLOB.__@return file referring to the local storage location of the BLOB.__@throws IOException_Thrown if an I/O error occurs while downloading the BLOBs from the BLOB server.;protected File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			if (localFile.exists()) {_				return localFile__			}_		} finally {_			readWriteLock.readLock().unlock()__		}__		_		_		File incomingFile = createTemporaryFilename()__		try {_			try {_				if (blobView.get(jobId, blobKey, incomingFile)) {_					_					readWriteLock.writeLock().lock()__					try {_						BlobUtils.moveTempFileToStore(_							incomingFile, jobId, blobKey, localFile, log, null)__					} finally {_						readWriteLock.writeLock().unlock()__					}__					return localFile__				}_			} catch (Exception e) {_				log.info("Failed to copy from blob store. Downloading from BLOB server instead.", e)__			}__			final InetSocketAddress currentServerAddress = serverAddress___			if (currentServerAddress != null) {_				_				BlobClient.downloadFromBlobServer(_					jobId, blobKey, incomingFile, currentServerAddress, blobClientConfig, numFetchRetries)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, log, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}_			} else {_				throw new IOException("Cannot download from BlobServer, because the server address is unknown.")__			}__			return localFile__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};returns,local,copy,of,the,file,for,the,blob,with,the,given,key,p,the,method,will,first,attempt,to,serve,the,blob,from,its,local,cache,if,the,blob,is,not,in,the,cache,the,method,will,try,to,download,it,from,this,cache,s,blob,server,via,a,distributed,blob,store,if,available,or,direct,end,to,end,download,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,the,key,of,the,desired,blob,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,downloading,the,blobs,from,the,blob,server;protected,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,if,local,file,exists,return,local,file,finally,read,write,lock,read,lock,unlock,file,incoming,file,create,temporary,filename,try,try,if,blob,view,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,local,file,catch,exception,e,log,info,failed,to,copy,from,blob,store,downloading,from,blob,server,instead,e,final,inet,socket,address,current,server,address,server,address,if,current,server,address,null,blob,client,download,from,blob,server,job,id,blob,key,incoming,file,current,server,address,blob,client,config,num,fetch,retries,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,else,throw,new,ioexception,cannot,download,from,blob,server,because,the,server,address,is,unknown,return,local,file,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
AbstractBlobCache -> protected File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1517911540;Returns local copy of the file for the BLOB with the given key.__<p>The method will first attempt to serve the BLOB from its local cache. If the BLOB is not_in the cache, the method will try to download it from this cache's BLOB server via a_distributed BLOB store (if available) or direct end-to-end download.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_The key of the desired BLOB.__@return file referring to the local storage location of the BLOB.__@throws IOException_Thrown if an I/O error occurs while downloading the BLOBs from the BLOB server.;protected File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			if (localFile.exists()) {_				return localFile__			}_		} finally {_			readWriteLock.readLock().unlock()__		}__		_		_		File incomingFile = createTemporaryFilename()__		try {_			try {_				if (blobView.get(jobId, blobKey, incomingFile)) {_					_					readWriteLock.writeLock().lock()__					try {_						BlobUtils.moveTempFileToStore(_							incomingFile, jobId, blobKey, localFile, log, null)__					} finally {_						readWriteLock.writeLock().unlock()__					}__					return localFile__				}_			} catch (Exception e) {_				log.info("Failed to copy from blob store. Downloading from BLOB server instead.", e)__			}__			final InetSocketAddress currentServerAddress = serverAddress___			if (currentServerAddress != null) {_				_				BlobClient.downloadFromBlobServer(_					jobId, blobKey, incomingFile, currentServerAddress, blobClientConfig, numFetchRetries)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, log, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}_			} else {_				throw new IOException("Cannot download from BlobServer, because the server address is unknown.")__			}__			return localFile__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};returns,local,copy,of,the,file,for,the,blob,with,the,given,key,p,the,method,will,first,attempt,to,serve,the,blob,from,its,local,cache,if,the,blob,is,not,in,the,cache,the,method,will,try,to,download,it,from,this,cache,s,blob,server,via,a,distributed,blob,store,if,available,or,direct,end,to,end,download,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,the,key,of,the,desired,blob,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,downloading,the,blobs,from,the,blob,server;protected,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,if,local,file,exists,return,local,file,finally,read,write,lock,read,lock,unlock,file,incoming,file,create,temporary,filename,try,try,if,blob,view,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,local,file,catch,exception,e,log,info,failed,to,copy,from,blob,store,downloading,from,blob,server,instead,e,final,inet,socket,address,current,server,address,server,address,if,current,server,address,null,blob,client,download,from,blob,server,job,id,blob,key,incoming,file,current,server,address,blob,client,config,num,fetch,retries,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,else,throw,new,ioexception,cannot,download,from,blob,server,because,the,server,address,is,unknown,return,local,file,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
AbstractBlobCache -> protected File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1519384290;Returns local copy of the file for the BLOB with the given key.__<p>The method will first attempt to serve the BLOB from its local cache. If the BLOB is not_in the cache, the method will try to download it from this cache's BLOB server via a_distributed BLOB store (if available) or direct end-to-end download.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_The key of the desired BLOB.__@return file referring to the local storage location of the BLOB.__@throws IOException_Thrown if an I/O error occurs while downloading the BLOBs from the BLOB server.;protected File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			if (localFile.exists()) {_				return localFile__			}_		} finally {_			readWriteLock.readLock().unlock()__		}__		_		_		File incomingFile = createTemporaryFilename()__		try {_			try {_				if (blobView.get(jobId, blobKey, incomingFile)) {_					_					readWriteLock.writeLock().lock()__					try {_						BlobUtils.moveTempFileToStore(_							incomingFile, jobId, blobKey, localFile, log, null)__					} finally {_						readWriteLock.writeLock().unlock()__					}__					return localFile__				}_			} catch (Exception e) {_				log.info("Failed to copy from blob store. Downloading from BLOB server instead.", e)__			}__			final InetSocketAddress currentServerAddress = serverAddress___			if (currentServerAddress != null) {_				_				BlobClient.downloadFromBlobServer(_					jobId, blobKey, incomingFile, currentServerAddress, blobClientConfig, numFetchRetries)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, log, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}_			} else {_				throw new IOException("Cannot download from BlobServer, because the server address is unknown.")__			}__			return localFile__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};returns,local,copy,of,the,file,for,the,blob,with,the,given,key,p,the,method,will,first,attempt,to,serve,the,blob,from,its,local,cache,if,the,blob,is,not,in,the,cache,the,method,will,try,to,download,it,from,this,cache,s,blob,server,via,a,distributed,blob,store,if,available,or,direct,end,to,end,download,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,the,key,of,the,desired,blob,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,downloading,the,blobs,from,the,blob,server;protected,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,if,local,file,exists,return,local,file,finally,read,write,lock,read,lock,unlock,file,incoming,file,create,temporary,filename,try,try,if,blob,view,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,local,file,catch,exception,e,log,info,failed,to,copy,from,blob,store,downloading,from,blob,server,instead,e,final,inet,socket,address,current,server,address,server,address,if,current,server,address,null,blob,client,download,from,blob,server,job,id,blob,key,incoming,file,current,server,address,blob,client,config,num,fetch,retries,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,else,throw,new,ioexception,cannot,download,from,blob,server,because,the,server,address,is,unknown,return,local,file,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
AbstractBlobCache -> public void setBlobServerAddress(InetSocketAddress blobServerAddress);1517911296;Sets the address of the {@link BlobServer}.__@param blobServerAddress address of the {@link BlobServer}.;public void setBlobServerAddress(InetSocketAddress blobServerAddress) {_		serverAddress = checkNotNull(blobServerAddress)__	};sets,the,address,of,the,link,blob,server,param,blob,server,address,address,of,the,link,blob,server;public,void,set,blob,server,address,inet,socket,address,blob,server,address,server,address,check,not,null,blob,server,address
AbstractBlobCache -> public void setBlobServerAddress(InetSocketAddress blobServerAddress);1517911540;Sets the address of the {@link BlobServer}.__@param blobServerAddress address of the {@link BlobServer}.;public void setBlobServerAddress(InetSocketAddress blobServerAddress) {_		serverAddress = checkNotNull(blobServerAddress)__	};sets,the,address,of,the,link,blob,server,param,blob,server,address,address,of,the,link,blob,server;public,void,set,blob,server,address,inet,socket,address,blob,server,address,server,address,check,not,null,blob,server,address
AbstractBlobCache -> public void setBlobServerAddress(InetSocketAddress blobServerAddress);1519384290;Sets the address of the {@link BlobServer}.__@param blobServerAddress address of the {@link BlobServer}.;public void setBlobServerAddress(InetSocketAddress blobServerAddress) {_		serverAddress = checkNotNull(blobServerAddress)__	};sets,the,address,of,the,link,blob,server,param,blob,server,address,address,of,the,link,blob,server;public,void,set,blob,server,address,inet,socket,address,blob,server,address,server,address,check,not,null,blob,server,address
AbstractBlobCache -> protected abstract void cancelCleanupTask()_;1505901925;Cancels any cleanup task that subclasses may be executing.__<p>This is called during {@link #close()}.;protected abstract void cancelCleanupTask()_;cancels,any,cleanup,task,that,subclasses,may,be,executing,p,this,is,called,during,link,close;protected,abstract,void,cancel,cleanup,task
AbstractBlobCache -> protected abstract void cancelCleanupTask()_;1507188807;Cancels any cleanup task that subclasses may be executing.__<p>This is called during {@link #close()}.;protected abstract void cancelCleanupTask()_;cancels,any,cleanup,task,that,subclasses,may,be,executing,p,this,is,called,during,link,close;protected,abstract,void,cancel,cleanup,task
AbstractBlobCache -> protected abstract void cancelCleanupTask()_;1513603142;Cancels any cleanup task that subclasses may be executing.__<p>This is called during {@link #close()}.;protected abstract void cancelCleanupTask()_;cancels,any,cleanup,task,that,subclasses,may,be,executing,p,this,is,called,during,link,close;protected,abstract,void,cancel,cleanup,task
AbstractBlobCache -> protected abstract void cancelCleanupTask()_;1517911296;Cancels any cleanup task that subclasses may be executing.__<p>This is called during {@link #close()}.;protected abstract void cancelCleanupTask()_;cancels,any,cleanup,task,that,subclasses,may,be,executing,p,this,is,called,during,link,close;protected,abstract,void,cancel,cleanup,task
AbstractBlobCache -> protected abstract void cancelCleanupTask()_;1517911540;Cancels any cleanup task that subclasses may be executing.__<p>This is called during {@link #close()}.;protected abstract void cancelCleanupTask()_;cancels,any,cleanup,task,that,subclasses,may,be,executing,p,this,is,called,during,link,close;protected,abstract,void,cancel,cleanup,task
AbstractBlobCache -> protected abstract void cancelCleanupTask()_;1519384290;Cancels any cleanup task that subclasses may be executing.__<p>This is called during {@link #close()}.;protected abstract void cancelCleanupTask()_;cancels,any,cleanup,task,that,subclasses,may,be,executing,p,this,is,called,during,link,close;protected,abstract,void,cancel,cleanup,task
