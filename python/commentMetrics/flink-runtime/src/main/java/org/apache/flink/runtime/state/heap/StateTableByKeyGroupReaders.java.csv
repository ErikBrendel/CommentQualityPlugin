# id;timestamp;commentText;codeText;commentWords;codeWords
StateTableByKeyGroupReaders -> static <K, N, S> StateSnapshotKeyGroupReader readerForVersion(StateTable<K, N, S> stateTable, int version);1531771917;Creates a new StateTableByKeyGroupReader that inserts de-serialized mappings into the given table, using the_de-serialization algorithm that matches the given version.__@param stateTable the {@link StateTable} into which de-serialized mappings are inserted._@param version version for the de-serialization algorithm._@param <K> type of key._@param <N> type of namespace._@param <S> type of state._@return the appropriate reader.;static <K, N, S> StateSnapshotKeyGroupReader readerForVersion(StateTable<K, N, S> stateTable, int version) {_		switch (version) {_			case 1:_				return new StateTableByKeyGroupReaderV1<>(stateTable)__			case 2:_			case 3:_			case 4:_			case 5:_				return createV2PlusReader(stateTable)__			default:_				throw new IllegalArgumentException("Unknown version: " + version)__		}_	};creates,a,new,state,table,by,key,group,reader,that,inserts,de,serialized,mappings,into,the,given,table,using,the,de,serialization,algorithm,that,matches,the,given,version,param,state,table,the,link,state,table,into,which,de,serialized,mappings,are,inserted,param,version,version,for,the,de,serialization,algorithm,param,k,type,of,key,param,n,type,of,namespace,param,s,type,of,state,return,the,appropriate,reader;static,k,n,s,state,snapshot,key,group,reader,reader,for,version,state,table,k,n,s,state,table,int,version,switch,version,case,1,return,new,state,table,by,key,group,reader,v1,state,table,case,2,case,3,case,4,case,5,return,create,v2plus,reader,state,table,default,throw,new,illegal,argument,exception,unknown,version,version
StateTableByKeyGroupReaders -> static <K, N, S> StateSnapshotKeyGroupReader readerForVersion(StateTable<K, N, S> stateTable, int version);1539149054;Creates a new StateTableByKeyGroupReader that inserts de-serialized mappings into the given table, using the_de-serialization algorithm that matches the given version.__@param stateTable the {@link StateTable} into which de-serialized mappings are inserted._@param version version for the de-serialization algorithm._@param <K> type of key._@param <N> type of namespace._@param <S> type of state._@return the appropriate reader.;static <K, N, S> StateSnapshotKeyGroupReader readerForVersion(StateTable<K, N, S> stateTable, int version) {_		switch (version) {_			case 1:_				return new StateTableByKeyGroupReaderV1<>(stateTable)__			case 2:_			case 3:_			case 4:_			case 5:_			case 6:_				return createV2PlusReader(stateTable)__			default:_				throw new IllegalArgumentException("Unknown version: " + version)__		}_	};creates,a,new,state,table,by,key,group,reader,that,inserts,de,serialized,mappings,into,the,given,table,using,the,de,serialization,algorithm,that,matches,the,given,version,param,state,table,the,link,state,table,into,which,de,serialized,mappings,are,inserted,param,version,version,for,the,de,serialization,algorithm,param,k,type,of,key,param,n,type,of,namespace,param,s,type,of,state,return,the,appropriate,reader;static,k,n,s,state,snapshot,key,group,reader,reader,for,version,state,table,k,n,s,state,table,int,version,switch,version,case,1,return,new,state,table,by,key,group,reader,v1,state,table,case,2,case,3,case,4,case,5,case,6,return,create,v2plus,reader,state,table,default,throw,new,illegal,argument,exception,unknown,version,version
StateTableByKeyGroupReaders -> static <K, N, S> StateTableByKeyGroupReader readerForVersion(StateTable<K, N, S> table, int version);1489685642;Creates a new StateTableByKeyGroupReader that inserts de-serialized mappings into the given table, using the_de-serialization algorithm that matches the given version.__@param table the {@link StateTable} into which de-serialized mappings are inserted._@param version version for the de-serialization algorithm._@param <K> type of key._@param <N> type of namespace._@param <S> type of state._@return the appropriate reader.;static <K, N, S> StateTableByKeyGroupReader readerForVersion(StateTable<K, N, S> table, int version) {_		switch (version) {_			case 1:_				return new StateTableByKeyGroupReaderV1<>(table)__			case 2:_				return new StateTableByKeyGroupReaderV2<>(table)__			default:_				throw new IllegalArgumentException("Unknown version: " + version)__		}_	};creates,a,new,state,table,by,key,group,reader,that,inserts,de,serialized,mappings,into,the,given,table,using,the,de,serialization,algorithm,that,matches,the,given,version,param,table,the,link,state,table,into,which,de,serialized,mappings,are,inserted,param,version,version,for,the,de,serialization,algorithm,param,k,type,of,key,param,n,type,of,namespace,param,s,type,of,state,return,the,appropriate,reader;static,k,n,s,state,table,by,key,group,reader,reader,for,version,state,table,k,n,s,table,int,version,switch,version,case,1,return,new,state,table,by,key,group,reader,v1,table,case,2,return,new,state,table,by,key,group,reader,v2,table,default,throw,new,illegal,argument,exception,unknown,version,version
StateTableByKeyGroupReaders -> static <K, N, S> StateTableByKeyGroupReader readerForVersion(StateTable<K, N, S> table, int version);1494180263;Creates a new StateTableByKeyGroupReader that inserts de-serialized mappings into the given table, using the_de-serialization algorithm that matches the given version.__@param table the {@link StateTable} into which de-serialized mappings are inserted._@param version version for the de-serialization algorithm._@param <K> type of key._@param <N> type of namespace._@param <S> type of state._@return the appropriate reader.;static <K, N, S> StateTableByKeyGroupReader readerForVersion(StateTable<K, N, S> table, int version) {_		switch (version) {_			case 1:_				return new StateTableByKeyGroupReaderV1<>(table)__			case 2:_			case 3:_				return new StateTableByKeyGroupReaderV2V3<>(table)__			default:_				throw new IllegalArgumentException("Unknown version: " + version)__		}_	};creates,a,new,state,table,by,key,group,reader,that,inserts,de,serialized,mappings,into,the,given,table,using,the,de,serialization,algorithm,that,matches,the,given,version,param,table,the,link,state,table,into,which,de,serialized,mappings,are,inserted,param,version,version,for,the,de,serialization,algorithm,param,k,type,of,key,param,n,type,of,namespace,param,s,type,of,state,return,the,appropriate,reader;static,k,n,s,state,table,by,key,group,reader,reader,for,version,state,table,k,n,s,table,int,version,switch,version,case,1,return,new,state,table,by,key,group,reader,v1,table,case,2,case,3,return,new,state,table,by,key,group,reader,v2v3,table,default,throw,new,illegal,argument,exception,unknown,version,version
StateTableByKeyGroupReaders -> static <K, N, S> StateTableByKeyGroupReader readerForVersion(StateTable<K, N, S> table, int version);1499156246;Creates a new StateTableByKeyGroupReader that inserts de-serialized mappings into the given table, using the_de-serialization algorithm that matches the given version.__@param table the {@link StateTable} into which de-serialized mappings are inserted._@param version version for the de-serialization algorithm._@param <K> type of key._@param <N> type of namespace._@param <S> type of state._@return the appropriate reader.;static <K, N, S> StateTableByKeyGroupReader readerForVersion(StateTable<K, N, S> table, int version) {_		switch (version) {_			case 1:_				return new StateTableByKeyGroupReaderV1<>(table)__			case 2:_			case 3:_			case 4:_				return new StateTableByKeyGroupReaderV2V3<>(table)__			default:_				throw new IllegalArgumentException("Unknown version: " + version)__		}_	};creates,a,new,state,table,by,key,group,reader,that,inserts,de,serialized,mappings,into,the,given,table,using,the,de,serialization,algorithm,that,matches,the,given,version,param,table,the,link,state,table,into,which,de,serialized,mappings,are,inserted,param,version,version,for,the,de,serialization,algorithm,param,k,type,of,key,param,n,type,of,namespace,param,s,type,of,state,return,the,appropriate,reader;static,k,n,s,state,table,by,key,group,reader,reader,for,version,state,table,k,n,s,table,int,version,switch,version,case,1,return,new,state,table,by,key,group,reader,v1,table,case,2,case,3,case,4,return,new,state,table,by,key,group,reader,v2v3,table,default,throw,new,illegal,argument,exception,unknown,version,version
StateTableByKeyGroupReaders -> static <K, N, S> StateTableByKeyGroupReader readerForVersion(StateTable<K, N, S> table, int version);1531404901;Creates a new StateTableByKeyGroupReader that inserts de-serialized mappings into the given table, using the_de-serialization algorithm that matches the given version.__@param table the {@link StateTable} into which de-serialized mappings are inserted._@param version version for the de-serialization algorithm._@param <K> type of key._@param <N> type of namespace._@param <S> type of state._@return the appropriate reader.;static <K, N, S> StateTableByKeyGroupReader readerForVersion(StateTable<K, N, S> table, int version) {_		switch (version) {_			case 1:_				return new StateTableByKeyGroupReaderV1<>(table)__			case 2:_			case 3:_			case 4:_			case 5:_				return new StateTableByKeyGroupReaderV2V3<>(table)__			default:_				throw new IllegalArgumentException("Unknown version: " + version)__		}_	};creates,a,new,state,table,by,key,group,reader,that,inserts,de,serialized,mappings,into,the,given,table,using,the,de,serialization,algorithm,that,matches,the,given,version,param,table,the,link,state,table,into,which,de,serialized,mappings,are,inserted,param,version,version,for,the,de,serialization,algorithm,param,k,type,of,key,param,n,type,of,namespace,param,s,type,of,state,return,the,appropriate,reader;static,k,n,s,state,table,by,key,group,reader,reader,for,version,state,table,k,n,s,table,int,version,switch,version,case,1,return,new,state,table,by,key,group,reader,v1,table,case,2,case,3,case,4,case,5,return,new,state,table,by,key,group,reader,v2v3,table,default,throw,new,illegal,argument,exception,unknown,version,version
