# id;timestamp;commentText;codeText;commentWords;codeWords
PartitionRequestQueue -> SequenceNumberingSubpartitionView -> @Override 		public void onNotification();1420560668;Enqueue this iterator again after a notification.;@Override_		public void onNotification() {_			numOutstandingSubscribeCalls.decrementAndGet()__			ctx.pipeline().fireUserEventTriggered(this)__		};enqueue,this,iterator,again,after,a,notification;override,public,void,on,notification,num,outstanding,subscribe,calls,decrement,and,get,ctx,pipeline,fire,user,event,triggered,this
PartitionRequestQueue -> SequenceNumberingSubpartitionView -> @Override 		public void onNotification();1432127765;Enqueue this iterator again after a notification.;@Override_		public void onNotification() {_			ctx.pipeline().fireUserEventTriggered(this)__		};enqueue,this,iterator,again,after,a,notification;override,public,void,on,notification,ctx,pipeline,fire,user,event,triggered,this
PartitionRequestQueue -> SequenceNumberingSubpartitionView -> @Override 		public void onNotification();1432806352;Enqueue this iterator again after a notification.;@Override_		public void onNotification() {_			ctx.pipeline().fireUserEventTriggered(this)__		};enqueue,this,iterator,again,after,a,notification;override,public,void,on,notification,ctx,pipeline,fire,user,event,triggered,this
PartitionRequestQueue -> SequenceNumberingSubpartitionView -> @Override 		public void onNotification();1432817911;Enqueue this iterator again after a notification.;@Override_		public void onNotification() {_			ctx.pipeline().fireUserEventTriggered(this)__		};enqueue,this,iterator,again,after,a,notification;override,public,void,on,notification,ctx,pipeline,fire,user,event,triggered,this
PartitionRequestQueue -> SequenceNumberingSubpartitionView -> @Override 		public void onNotification();1432821459;Enqueue this iterator again after a notification.;@Override_		public void onNotification() {_			ctx.pipeline().fireUserEventTriggered(this)__		};enqueue,this,iterator,again,after,a,notification;override,public,void,on,notification,ctx,pipeline,fire,user,event,triggered,this
PartitionRequestQueue -> SequenceNumberingSubpartitionView -> @Override 		public void onNotification();1433349700;Enqueue this iterator again after a notification.;@Override_		public void onNotification() {_			ctx.pipeline().fireUserEventTriggered(this)__		};enqueue,this,iterator,again,after,a,notification;override,public,void,on,notification,ctx,pipeline,fire,user,event,triggered,this
PartitionRequestQueue -> SequenceNumberingSubpartitionView -> @Override 		public void onNotification();1465394479;Enqueue this iterator again after a notification.;@Override_		public void onNotification() {_			ctx.pipeline().fireUserEventTriggered(this)__		};enqueue,this,iterator,again,after,a,notification;override,public,void,on,notification,ctx,pipeline,fire,user,event,triggered,this
PartitionRequestQueue -> private void enqueueAvailableReader(final NetworkSequenceViewReader reader) throws Exception;1516169704;Try to enqueue the reader once receiving credit notification from the consumer or receiving_non-empty reader notification from the producer.__<p>NOTE: Only one thread would trigger the actual enqueue after checking the reader's_availability, so there is no race condition here.;private void enqueueAvailableReader(final NetworkSequenceViewReader reader) throws Exception {_		if (!reader.isRegisteredAsAvailable() && reader.isAvailable()) {_			_			_			_			boolean triggerWrite = availableReaders.isEmpty()__			availableReaders.add(reader)___			reader.setRegisteredAsAvailable(true)___			if (triggerWrite) {_				writeAndFlushNextMessageIfPossible(ctx.channel())__			}_		}_	};try,to,enqueue,the,reader,once,receiving,credit,notification,from,the,consumer,or,receiving,non,empty,reader,notification,from,the,producer,p,note,only,one,thread,would,trigger,the,actual,enqueue,after,checking,the,reader,s,availability,so,there,is,no,race,condition,here;private,void,enqueue,available,reader,final,network,sequence,view,reader,reader,throws,exception,if,reader,is,registered,as,available,reader,is,available,boolean,trigger,write,available,readers,is,empty,available,readers,add,reader,reader,set,registered,as,available,true,if,trigger,write,write,and,flush,next,message,if,possible,ctx,channel
PartitionRequestQueue -> private void enqueueAvailableReader(final NetworkSequenceViewReader reader) throws Exception;1516801403;Try to enqueue the reader once receiving credit notification from the consumer or receiving_non-empty reader notification from the producer.__<p>NOTE: Only one thread would trigger the actual enqueue after checking the reader's_availability, so there is no race condition here.;private void enqueueAvailableReader(final NetworkSequenceViewReader reader) throws Exception {_		if (reader.isRegisteredAsAvailable() || !reader.isAvailable()) {_			return__		}_		_		_		_		boolean triggerWrite = availableReaders.isEmpty()__		registerAvailableReader(reader)___		if (triggerWrite) {_			writeAndFlushNextMessageIfPossible(ctx.channel())__		}_	};try,to,enqueue,the,reader,once,receiving,credit,notification,from,the,consumer,or,receiving,non,empty,reader,notification,from,the,producer,p,note,only,one,thread,would,trigger,the,actual,enqueue,after,checking,the,reader,s,availability,so,there,is,no,race,condition,here;private,void,enqueue,available,reader,final,network,sequence,view,reader,reader,throws,exception,if,reader,is,registered,as,available,reader,is,available,return,boolean,trigger,write,available,readers,is,empty,register,available,reader,reader,if,trigger,write,write,and,flush,next,message,if,possible,ctx,channel
PartitionRequestQueue -> private void enqueueAvailableReader(final NetworkSequenceViewReader reader) throws Exception;1519305426;Try to enqueue the reader once receiving credit notification from the consumer or receiving_non-empty reader notification from the producer.__<p>NOTE: Only one thread would trigger the actual enqueue after checking the reader's_availability, so there is no race condition here.;private void enqueueAvailableReader(final NetworkSequenceViewReader reader) throws Exception {_		if (reader.isRegisteredAsAvailable() || !reader.isAvailable()) {_			return__		}_		_		_		_		boolean triggerWrite = availableReaders.isEmpty()__		registerAvailableReader(reader)___		if (triggerWrite) {_			writeAndFlushNextMessageIfPossible(ctx.channel())__		}_	};try,to,enqueue,the,reader,once,receiving,credit,notification,from,the,consumer,or,receiving,non,empty,reader,notification,from,the,producer,p,note,only,one,thread,would,trigger,the,actual,enqueue,after,checking,the,reader,s,availability,so,there,is,no,race,condition,here;private,void,enqueue,available,reader,final,network,sequence,view,reader,reader,throws,exception,if,reader,is,registered,as,available,reader,is,available,return,boolean,trigger,write,available,readers,is,empty,register,available,reader,reader,if,trigger,write,write,and,flush,next,message,if,possible,ctx,channel
PartitionRequestQueue -> private void enqueueAvailableReader(final NetworkSequenceViewReader reader) throws Exception;1519657986;Try to enqueue the reader once receiving credit notification from the consumer or receiving_non-empty reader notification from the producer.__<p>NOTE: Only one thread would trigger the actual enqueue after checking the reader's_availability, so there is no race condition here.;private void enqueueAvailableReader(final NetworkSequenceViewReader reader) throws Exception {_		if (reader.isRegisteredAsAvailable() || !reader.isAvailable()) {_			return__		}_		_		_		_		boolean triggerWrite = availableReaders.isEmpty()__		registerAvailableReader(reader)___		if (triggerWrite) {_			writeAndFlushNextMessageIfPossible(ctx.channel())__		}_	};try,to,enqueue,the,reader,once,receiving,credit,notification,from,the,consumer,or,receiving,non,empty,reader,notification,from,the,producer,p,note,only,one,thread,would,trigger,the,actual,enqueue,after,checking,the,reader,s,availability,so,there,is,no,race,condition,here;private,void,enqueue,available,reader,final,network,sequence,view,reader,reader,throws,exception,if,reader,is,registered,as,available,reader,is,available,return,boolean,trigger,write,available,readers,is,empty,register,available,reader,reader,if,trigger,write,write,and,flush,next,message,if,possible,ctx,channel
PartitionRequestQueue -> private void enqueueAvailableReader(final NetworkSequenceViewReader reader) throws Exception;1533422462;Try to enqueue the reader once receiving credit notification from the consumer or receiving_non-empty reader notification from the producer.__<p>NOTE: Only one thread would trigger the actual enqueue after checking the reader's_availability, so there is no race condition here.;private void enqueueAvailableReader(final NetworkSequenceViewReader reader) throws Exception {_		if (reader.isRegisteredAsAvailable() || !reader.isAvailable()) {_			return__		}_		_		_		_		boolean triggerWrite = availableReaders.isEmpty()__		registerAvailableReader(reader)___		if (triggerWrite) {_			writeAndFlushNextMessageIfPossible(ctx.channel())__		}_	};try,to,enqueue,the,reader,once,receiving,credit,notification,from,the,consumer,or,receiving,non,empty,reader,notification,from,the,producer,p,note,only,one,thread,would,trigger,the,actual,enqueue,after,checking,the,reader,s,availability,so,there,is,no,race,condition,here;private,void,enqueue,available,reader,final,network,sequence,view,reader,reader,throws,exception,if,reader,is,registered,as,available,reader,is,available,return,boolean,trigger,write,available,readers,is,empty,register,available,reader,reader,if,trigger,write,write,and,flush,next,message,if,possible,ctx,channel
PartitionRequestQueue -> void addCredit(InputChannelID receiverId, int credit) throws Exception;1506753379;Adds unannounced credits from the consumer and enqueues the corresponding reader for this_consumer (if not enqueued yet).__@param receiverId The input channel id to identify the consumer._@param credit The unannounced credits of the consumer.;void addCredit(InputChannelID receiverId, int credit) throws Exception {_		if (fatalError) {_			return__		}__		SequenceNumberingViewReader reader = allReaders.get(receiverId)__		if (reader != null) {_			reader.addCredit(credit)___			enqueueAvailableReader(reader)__		} else {_			throw new IllegalStateException("No reader for receiverId = " + receiverId + " exists.")__		}_	};adds,unannounced,credits,from,the,consumer,and,enqueues,the,corresponding,reader,for,this,consumer,if,not,enqueued,yet,param,receiver,id,the,input,channel,id,to,identify,the,consumer,param,credit,the,unannounced,credits,of,the,consumer;void,add,credit,input,channel,id,receiver,id,int,credit,throws,exception,if,fatal,error,return,sequence,numbering,view,reader,reader,all,readers,get,receiver,id,if,reader,null,reader,add,credit,credit,enqueue,available,reader,reader,else,throw,new,illegal,state,exception,no,reader,for,receiver,id,receiver,id,exists
PartitionRequestQueue -> void addCredit(InputChannelID receiverId, int credit) throws Exception;1516169704;Adds unannounced credits from the consumer and enqueues the corresponding reader for this_consumer (if not enqueued yet).__@param receiverId The input channel id to identify the consumer._@param credit The unannounced credits of the consumer.;void addCredit(InputChannelID receiverId, int credit) throws Exception {_		if (fatalError) {_			return__		}__		NetworkSequenceViewReader reader = allReaders.get(receiverId)__		if (reader != null) {_			reader.addCredit(credit)___			enqueueAvailableReader(reader)__		} else {_			throw new IllegalStateException("No reader for receiverId = " + receiverId + " exists.")__		}_	};adds,unannounced,credits,from,the,consumer,and,enqueues,the,corresponding,reader,for,this,consumer,if,not,enqueued,yet,param,receiver,id,the,input,channel,id,to,identify,the,consumer,param,credit,the,unannounced,credits,of,the,consumer;void,add,credit,input,channel,id,receiver,id,int,credit,throws,exception,if,fatal,error,return,network,sequence,view,reader,reader,all,readers,get,receiver,id,if,reader,null,reader,add,credit,credit,enqueue,available,reader,reader,else,throw,new,illegal,state,exception,no,reader,for,receiver,id,receiver,id,exists
PartitionRequestQueue -> void addCredit(InputChannelID receiverId, int credit) throws Exception;1516801403;Adds unannounced credits from the consumer and enqueues the corresponding reader for this_consumer (if not enqueued yet).__@param receiverId The input channel id to identify the consumer._@param credit The unannounced credits of the consumer.;void addCredit(InputChannelID receiverId, int credit) throws Exception {_		if (fatalError) {_			return__		}__		NetworkSequenceViewReader reader = allReaders.get(receiverId)__		if (reader != null) {_			reader.addCredit(credit)___			enqueueAvailableReader(reader)__		} else {_			throw new IllegalStateException("No reader for receiverId = " + receiverId + " exists.")__		}_	};adds,unannounced,credits,from,the,consumer,and,enqueues,the,corresponding,reader,for,this,consumer,if,not,enqueued,yet,param,receiver,id,the,input,channel,id,to,identify,the,consumer,param,credit,the,unannounced,credits,of,the,consumer;void,add,credit,input,channel,id,receiver,id,int,credit,throws,exception,if,fatal,error,return,network,sequence,view,reader,reader,all,readers,get,receiver,id,if,reader,null,reader,add,credit,credit,enqueue,available,reader,reader,else,throw,new,illegal,state,exception,no,reader,for,receiver,id,receiver,id,exists
PartitionRequestQueue -> void addCredit(InputChannelID receiverId, int credit) throws Exception;1519305426;Adds unannounced credits from the consumer and enqueues the corresponding reader for this_consumer (if not enqueued yet).__@param receiverId The input channel id to identify the consumer._@param credit The unannounced credits of the consumer.;void addCredit(InputChannelID receiverId, int credit) throws Exception {_		if (fatalError) {_			return__		}__		NetworkSequenceViewReader reader = allReaders.get(receiverId)__		if (reader != null) {_			reader.addCredit(credit)___			enqueueAvailableReader(reader)__		} else {_			throw new IllegalStateException("No reader for receiverId = " + receiverId + " exists.")__		}_	};adds,unannounced,credits,from,the,consumer,and,enqueues,the,corresponding,reader,for,this,consumer,if,not,enqueued,yet,param,receiver,id,the,input,channel,id,to,identify,the,consumer,param,credit,the,unannounced,credits,of,the,consumer;void,add,credit,input,channel,id,receiver,id,int,credit,throws,exception,if,fatal,error,return,network,sequence,view,reader,reader,all,readers,get,receiver,id,if,reader,null,reader,add,credit,credit,enqueue,available,reader,reader,else,throw,new,illegal,state,exception,no,reader,for,receiver,id,receiver,id,exists
PartitionRequestQueue -> void addCredit(InputChannelID receiverId, int credit) throws Exception;1519657986;Adds unannounced credits from the consumer and enqueues the corresponding reader for this_consumer (if not enqueued yet).__@param receiverId The input channel id to identify the consumer._@param credit The unannounced credits of the consumer.;void addCredit(InputChannelID receiverId, int credit) throws Exception {_		if (fatalError) {_			return__		}__		NetworkSequenceViewReader reader = allReaders.get(receiverId)__		if (reader != null) {_			reader.addCredit(credit)___			enqueueAvailableReader(reader)__		} else {_			throw new IllegalStateException("No reader for receiverId = " + receiverId + " exists.")__		}_	};adds,unannounced,credits,from,the,consumer,and,enqueues,the,corresponding,reader,for,this,consumer,if,not,enqueued,yet,param,receiver,id,the,input,channel,id,to,identify,the,consumer,param,credit,the,unannounced,credits,of,the,consumer;void,add,credit,input,channel,id,receiver,id,int,credit,throws,exception,if,fatal,error,return,network,sequence,view,reader,reader,all,readers,get,receiver,id,if,reader,null,reader,add,credit,credit,enqueue,available,reader,reader,else,throw,new,illegal,state,exception,no,reader,for,receiver,id,receiver,id,exists
PartitionRequestQueue -> void addCredit(InputChannelID receiverId, int credit) throws Exception;1533422462;Adds unannounced credits from the consumer and enqueues the corresponding reader for this_consumer (if not enqueued yet).__@param receiverId The input channel id to identify the consumer._@param credit The unannounced credits of the consumer.;void addCredit(InputChannelID receiverId, int credit) throws Exception {_		if (fatalError) {_			return__		}__		NetworkSequenceViewReader reader = allReaders.get(receiverId)__		if (reader != null) {_			reader.addCredit(credit)___			enqueueAvailableReader(reader)__		} else {_			throw new IllegalStateException("No reader for receiverId = " + receiverId + " exists.")__		}_	};adds,unannounced,credits,from,the,consumer,and,enqueues,the,corresponding,reader,for,this,consumer,if,not,enqueued,yet,param,receiver,id,the,input,channel,id,to,identify,the,consumer,param,credit,the,unannounced,credits,of,the,consumer;void,add,credit,input,channel,id,receiver,id,int,credit,throws,exception,if,fatal,error,return,network,sequence,view,reader,reader,all,readers,get,receiver,id,if,reader,null,reader,add,credit,credit,enqueue,available,reader,reader,else,throw,new,illegal,state,exception,no,reader,for,receiver,id,receiver,id,exists
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1432806352;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1432817911;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1432821459;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1433349700;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1465394479;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1480323569;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1481203054;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1481624807;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1498566436;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1501592283;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1502342953;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1506753379;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1515534998;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1516169704;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1516801403;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1519305426;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1519657986;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> private void markAsReleased(InputChannelID receiverId);1533422462;Marks a receiver as released.;private void markAsReleased(InputChannelID receiverId) {_		released.add(receiverId)__	};marks,a,receiver,as,released;private,void,mark,as,released,input,channel,id,receiver,id,released,add,receiver,id
PartitionRequestQueue -> @VisibleForTesting 	ArrayDeque<NetworkSequenceViewReader> getAvailableReaders();1516169704;Accesses internal state to verify reader registration in the unit tests.__<p><strong>Do not use anywhere else!</strong>__@return readers which are enqueued available for transferring data;@VisibleForTesting_	ArrayDeque<NetworkSequenceViewReader> getAvailableReaders() {_		return availableReaders__	};accesses,internal,state,to,verify,reader,registration,in,the,unit,tests,p,strong,do,not,use,anywhere,else,strong,return,readers,which,are,enqueued,available,for,transferring,data;visible,for,testing,array,deque,network,sequence,view,reader,get,available,readers,return,available,readers
PartitionRequestQueue -> @VisibleForTesting 	ArrayDeque<NetworkSequenceViewReader> getAvailableReaders();1516801403;Accesses internal state to verify reader registration in the unit tests.__<p><strong>Do not use anywhere else!</strong>__@return readers which are enqueued available for transferring data;@VisibleForTesting_	ArrayDeque<NetworkSequenceViewReader> getAvailableReaders() {_		return availableReaders__	};accesses,internal,state,to,verify,reader,registration,in,the,unit,tests,p,strong,do,not,use,anywhere,else,strong,return,readers,which,are,enqueued,available,for,transferring,data;visible,for,testing,array,deque,network,sequence,view,reader,get,available,readers,return,available,readers
PartitionRequestQueue -> @VisibleForTesting 	ArrayDeque<NetworkSequenceViewReader> getAvailableReaders();1519305426;Accesses internal state to verify reader registration in the unit tests.__<p><strong>Do not use anywhere else!</strong>__@return readers which are enqueued available for transferring data;@VisibleForTesting_	ArrayDeque<NetworkSequenceViewReader> getAvailableReaders() {_		return availableReaders__	};accesses,internal,state,to,verify,reader,registration,in,the,unit,tests,p,strong,do,not,use,anywhere,else,strong,return,readers,which,are,enqueued,available,for,transferring,data;visible,for,testing,array,deque,network,sequence,view,reader,get,available,readers,return,available,readers
PartitionRequestQueue -> @VisibleForTesting 	ArrayDeque<NetworkSequenceViewReader> getAvailableReaders();1519657986;Accesses internal state to verify reader registration in the unit tests.__<p><strong>Do not use anywhere else!</strong>__@return readers which are enqueued available for transferring data;@VisibleForTesting_	ArrayDeque<NetworkSequenceViewReader> getAvailableReaders() {_		return availableReaders__	};accesses,internal,state,to,verify,reader,registration,in,the,unit,tests,p,strong,do,not,use,anywhere,else,strong,return,readers,which,are,enqueued,available,for,transferring,data;visible,for,testing,array,deque,network,sequence,view,reader,get,available,readers,return,available,readers
PartitionRequestQueue -> @VisibleForTesting 	ArrayDeque<NetworkSequenceViewReader> getAvailableReaders();1533422462;Accesses internal state to verify reader registration in the unit tests.__<p><strong>Do not use anywhere else!</strong>__@return readers which are enqueued available for transferring data;@VisibleForTesting_	ArrayDeque<NetworkSequenceViewReader> getAvailableReaders() {_		return availableReaders__	};accesses,internal,state,to,verify,reader,registration,in,the,unit,tests,p,strong,do,not,use,anywhere,else,strong,return,readers,which,are,enqueued,available,for,transferring,data;visible,for,testing,array,deque,network,sequence,view,reader,get,available,readers,return,available,readers
