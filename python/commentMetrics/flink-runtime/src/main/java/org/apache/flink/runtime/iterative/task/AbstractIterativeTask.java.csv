# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractIterativeTask -> protected Collector<OT> createWorksetUpdateOutputCollector(Collector<OT> delegate);1444144446;Creates a new {@link WorksetUpdateOutputCollector}._<p>_This collector is used by {@link IterationIntermediateTask} or {@link IterationTailTask} to update the_workset._<p>_If a non-null delegate is given, the new {@link Collector} will write to the solution set and also call_collect(T) of the delegate.__@param delegate null -OR- the delegate on which to call collect() by the newly created collector_@return a new {@link WorksetUpdateOutputCollector};protected Collector<OT> createWorksetUpdateOutputCollector(Collector<OT> delegate) {_		DataOutputView outputView = worksetBackChannel.getWriteEnd()__		TypeSerializer<OT> serializer = getOutputSerializer()__		return new WorksetUpdateOutputCollector<OT>(outputView, serializer, delegate)__	};creates,a,new,link,workset,update,output,collector,p,this,collector,is,used,by,link,iteration,intermediate,task,or,link,iteration,tail,task,to,update,the,workset,p,if,a,non,null,delegate,is,given,the,new,link,collector,will,write,to,the,solution,set,and,also,call,collect,t,of,the,delegate,param,delegate,null,or,the,delegate,on,which,to,call,collect,by,the,newly,created,collector,return,a,new,link,workset,update,output,collector;protected,collector,ot,create,workset,update,output,collector,collector,ot,delegate,data,output,view,output,view,workset,back,channel,get,write,end,type,serializer,ot,serializer,get,output,serializer,return,new,workset,update,output,collector,ot,output,view,serializer,delegate
AbstractIterativeTask -> protected Collector<OT> createWorksetUpdateOutputCollector(Collector<OT> delegate);1447951095;Creates a new {@link WorksetUpdateOutputCollector}._<p>_This collector is used by {@link IterationIntermediateTask} or {@link IterationTailTask} to update the_workset._<p>_If a non-null delegate is given, the new {@link Collector} will write to the solution set and also call_collect(T) of the delegate.__@param delegate null -OR- the delegate on which to call collect() by the newly created collector_@return a new {@link WorksetUpdateOutputCollector};protected Collector<OT> createWorksetUpdateOutputCollector(Collector<OT> delegate) {_		DataOutputView outputView = worksetBackChannel.getWriteEnd()__		TypeSerializer<OT> serializer = getOutputSerializer()__		return new WorksetUpdateOutputCollector<OT>(outputView, serializer, delegate)__	};creates,a,new,link,workset,update,output,collector,p,this,collector,is,used,by,link,iteration,intermediate,task,or,link,iteration,tail,task,to,update,the,workset,p,if,a,non,null,delegate,is,given,the,new,link,collector,will,write,to,the,solution,set,and,also,call,collect,t,of,the,delegate,param,delegate,null,or,the,delegate,on,which,to,call,collect,by,the,newly,created,collector,return,a,new,link,workset,update,output,collector;protected,collector,ot,create,workset,update,output,collector,collector,ot,delegate,data,output,view,output,view,workset,back,channel,get,write,end,type,serializer,ot,serializer,get,output,serializer,return,new,workset,update,output,collector,ot,output,view,serializer,delegate
AbstractIterativeTask -> protected Collector<OT> createWorksetUpdateOutputCollector(Collector<OT> delegate);1462798472;Creates a new {@link WorksetUpdateOutputCollector}._<p>_This collector is used by {@link IterationIntermediateTask} or {@link IterationTailTask} to update the_workset._<p>_If a non-null delegate is given, the new {@link Collector} will write to the solution set and also call_collect(T) of the delegate.__@param delegate null -OR- the delegate on which to call collect() by the newly created collector_@return a new {@link WorksetUpdateOutputCollector};protected Collector<OT> createWorksetUpdateOutputCollector(Collector<OT> delegate) {_		DataOutputView outputView = worksetBackChannel.getWriteEnd()__		TypeSerializer<OT> serializer = getOutputSerializer()__		return new WorksetUpdateOutputCollector<OT>(outputView, serializer, delegate)__	};creates,a,new,link,workset,update,output,collector,p,this,collector,is,used,by,link,iteration,intermediate,task,or,link,iteration,tail,task,to,update,the,workset,p,if,a,non,null,delegate,is,given,the,new,link,collector,will,write,to,the,solution,set,and,also,call,collect,t,of,the,delegate,param,delegate,null,or,the,delegate,on,which,to,call,collect,by,the,newly,created,collector,return,a,new,link,workset,update,output,collector;protected,collector,ot,create,workset,update,output,collector,collector,ot,delegate,data,output,view,output,view,workset,back,channel,get,write,end,type,serializer,ot,serializer,get,output,serializer,return,new,workset,update,output,collector,ot,output,view,serializer,delegate
AbstractIterativeTask -> protected Collector<OT> createWorksetUpdateOutputCollector(Collector<OT> delegate);1489547621;Creates a new {@link WorksetUpdateOutputCollector}.__<p>This collector is used by {@link IterationIntermediateTask} or {@link IterationTailTask} to update the_workset.__<p>If a non-null delegate is given, the new {@link Collector} will write to the solution set and also call_collect(T) of the delegate.__@param delegate null -OR- the delegate on which to call collect() by the newly created collector_@return a new {@link WorksetUpdateOutputCollector};protected Collector<OT> createWorksetUpdateOutputCollector(Collector<OT> delegate) {_		DataOutputView outputView = worksetBackChannel.getWriteEnd()__		TypeSerializer<OT> serializer = getOutputSerializer()__		return new WorksetUpdateOutputCollector<OT>(outputView, serializer, delegate)__	};creates,a,new,link,workset,update,output,collector,p,this,collector,is,used,by,link,iteration,intermediate,task,or,link,iteration,tail,task,to,update,the,workset,p,if,a,non,null,delegate,is,given,the,new,link,collector,will,write,to,the,solution,set,and,also,call,collect,t,of,the,delegate,param,delegate,null,or,the,delegate,on,which,to,call,collect,by,the,newly,created,collector,return,a,new,link,workset,update,output,collector;protected,collector,ot,create,workset,update,output,collector,collector,ot,delegate,data,output,view,output,view,workset,back,channel,get,write,end,type,serializer,ot,serializer,get,output,serializer,return,new,workset,update,output,collector,ot,output,view,serializer,delegate
AbstractIterativeTask -> protected Collector<OT> createWorksetUpdateOutputCollector(Collector<OT> delegate);1497027221;Creates a new {@link WorksetUpdateOutputCollector}.__<p>This collector is used by {@link IterationIntermediateTask} or {@link IterationTailTask} to update the_workset.__<p>If a non-null delegate is given, the new {@link Collector} will write to the solution set and also call_collect(T) of the delegate.__@param delegate null -OR- the delegate on which to call collect() by the newly created collector_@return a new {@link WorksetUpdateOutputCollector};protected Collector<OT> createWorksetUpdateOutputCollector(Collector<OT> delegate) {_		DataOutputView outputView = worksetBackChannel.getWriteEnd()__		TypeSerializer<OT> serializer = getOutputSerializer()__		return new WorksetUpdateOutputCollector<OT>(outputView, serializer, delegate)__	};creates,a,new,link,workset,update,output,collector,p,this,collector,is,used,by,link,iteration,intermediate,task,or,link,iteration,tail,task,to,update,the,workset,p,if,a,non,null,delegate,is,given,the,new,link,collector,will,write,to,the,solution,set,and,also,call,collect,t,of,the,delegate,param,delegate,null,or,the,delegate,on,which,to,call,collect,by,the,newly,created,collector,return,a,new,link,workset,update,output,collector;protected,collector,ot,create,workset,update,output,collector,collector,ot,delegate,data,output,view,output,view,workset,back,channel,get,write,end,type,serializer,ot,serializer,get,output,serializer,return,new,workset,update,output,collector,ot,output,view,serializer,delegate
AbstractIterativeTask -> protected Collector<OT> createWorksetUpdateOutputCollector(Collector<OT> delegate);1515007198;Creates a new {@link WorksetUpdateOutputCollector}.__<p>This collector is used by {@link IterationIntermediateTask} or {@link IterationTailTask} to update the_workset.__<p>If a non-null delegate is given, the new {@link Collector} will write to the solution set and also call_collect(T) of the delegate.__@param delegate null -OR- the delegate on which to call collect() by the newly created collector_@return a new {@link WorksetUpdateOutputCollector};protected Collector<OT> createWorksetUpdateOutputCollector(Collector<OT> delegate) {_		DataOutputView outputView = worksetBackChannel.getWriteEnd()__		TypeSerializer<OT> serializer = getOutputSerializer()__		return new WorksetUpdateOutputCollector<OT>(outputView, serializer, delegate)__	};creates,a,new,link,workset,update,output,collector,p,this,collector,is,used,by,link,iteration,intermediate,task,or,link,iteration,tail,task,to,update,the,workset,p,if,a,non,null,delegate,is,given,the,new,link,collector,will,write,to,the,solution,set,and,also,call,collect,t,of,the,delegate,param,delegate,null,or,the,delegate,on,which,to,call,collect,by,the,newly,created,collector,return,a,new,link,workset,update,output,collector;protected,collector,ot,create,workset,update,output,collector,collector,ot,delegate,data,output,view,output,view,workset,back,channel,get,write,end,type,serializer,ot,serializer,get,output,serializer,return,new,workset,update,output,collector,ot,output,view,serializer,delegate
AbstractIterativeTask -> private TypeSerializer<OT> getOutputSerializer();1444144446;@return output serializer of this task;private TypeSerializer<OT> getOutputSerializer() {_		TypeSerializerFactory<OT> serializerFactory___		if ((serializerFactory = getLastTasksConfig().getOutputSerializer(getUserCodeClassLoader())) ==_				null) {_			throw new RuntimeException("Missing output serializer for workset update.")__		}__		return serializerFactory.getSerializer()__	};return,output,serializer,of,this,task;private,type,serializer,ot,get,output,serializer,type,serializer,factory,ot,serializer,factory,if,serializer,factory,get,last,tasks,config,get,output,serializer,get,user,code,class,loader,null,throw,new,runtime,exception,missing,output,serializer,for,workset,update,return,serializer,factory,get,serializer
AbstractIterativeTask -> private TypeSerializer<OT> getOutputSerializer();1447951095;@return output serializer of this task;private TypeSerializer<OT> getOutputSerializer() {_		TypeSerializerFactory<OT> serializerFactory___		if ((serializerFactory = getLastTasksConfig().getOutputSerializer(getUserCodeClassLoader())) ==_				null) {_			throw new RuntimeException("Missing output serializer for workset update.")__		}__		return serializerFactory.getSerializer()__	};return,output,serializer,of,this,task;private,type,serializer,ot,get,output,serializer,type,serializer,factory,ot,serializer,factory,if,serializer,factory,get,last,tasks,config,get,output,serializer,get,user,code,class,loader,null,throw,new,runtime,exception,missing,output,serializer,for,workset,update,return,serializer,factory,get,serializer
AbstractIterativeTask -> private TypeSerializer<OT> getOutputSerializer();1462798472;@return output serializer of this task;private TypeSerializer<OT> getOutputSerializer() {_		TypeSerializerFactory<OT> serializerFactory___		if ((serializerFactory = getLastTasksConfig().getOutputSerializer(getUserCodeClassLoader())) ==_				null) {_			throw new RuntimeException("Missing output serializer for workset update.")__		}__		return serializerFactory.getSerializer()__	};return,output,serializer,of,this,task;private,type,serializer,ot,get,output,serializer,type,serializer,factory,ot,serializer,factory,if,serializer,factory,get,last,tasks,config,get,output,serializer,get,user,code,class,loader,null,throw,new,runtime,exception,missing,output,serializer,for,workset,update,return,serializer,factory,get,serializer
AbstractIterativeTask -> private TypeSerializer<OT> getOutputSerializer();1489547621;@return output serializer of this task;private TypeSerializer<OT> getOutputSerializer() {_		TypeSerializerFactory<OT> serializerFactory___		if ((serializerFactory = getLastTasksConfig().getOutputSerializer(getUserCodeClassLoader())) ==_				null) {_			throw new RuntimeException("Missing output serializer for workset update.")__		}__		return serializerFactory.getSerializer()__	};return,output,serializer,of,this,task;private,type,serializer,ot,get,output,serializer,type,serializer,factory,ot,serializer,factory,if,serializer,factory,get,last,tasks,config,get,output,serializer,get,user,code,class,loader,null,throw,new,runtime,exception,missing,output,serializer,for,workset,update,return,serializer,factory,get,serializer
AbstractIterativeTask -> private TypeSerializer<OT> getOutputSerializer();1497027221;@return output serializer of this task;private TypeSerializer<OT> getOutputSerializer() {_		TypeSerializerFactory<OT> serializerFactory___		if ((serializerFactory = getLastTasksConfig().getOutputSerializer(getUserCodeClassLoader())) ==_				null) {_			throw new RuntimeException("Missing output serializer for workset update.")__		}__		return serializerFactory.getSerializer()__	};return,output,serializer,of,this,task;private,type,serializer,ot,get,output,serializer,type,serializer,factory,ot,serializer,factory,if,serializer,factory,get,last,tasks,config,get,output,serializer,get,user,code,class,loader,null,throw,new,runtime,exception,missing,output,serializer,for,workset,update,return,serializer,factory,get,serializer
AbstractIterativeTask -> private TypeSerializer<OT> getOutputSerializer();1515007198;@return output serializer of this task;private TypeSerializer<OT> getOutputSerializer() {_		TypeSerializerFactory<OT> serializerFactory___		if ((serializerFactory = getLastTasksConfig().getOutputSerializer(getUserCodeClassLoader())) ==_				null) {_			throw new RuntimeException("Missing output serializer for workset update.")__		}__		return serializerFactory.getSerializer()__	};return,output,serializer,of,this,task;private,type,serializer,ot,get,output,serializer,type,serializer,factory,ot,serializer,factory,if,serializer,factory,get,last,tasks,config,get,output,serializer,get,user,code,class,loader,null,throw,new,runtime,exception,missing,output,serializer,for,workset,update,return,serializer,factory,get,serializer
AbstractIterativeTask -> protected Collector<OT> createSolutionSetUpdateOutputCollector(Collector<OT> delegate);1444144446;Creates a new solution set update output collector._<p>_This collector is used by {@link IterationIntermediateTask} or {@link IterationTailTask} to update the_solution set of workset iterations. Depending on the task configuration, either a fast (non-probing)_{@link org.apache.flink.runtime.iterative.io.SolutionSetFastUpdateOutputCollector} or normal (re-probing)_{@link SolutionSetUpdateOutputCollector} is created._<p>_If a non-null delegate is given, the new {@link Collector} will write back to the solution set and also call_collect(T) of the delegate.__@param delegate null -OR- a delegate collector to be called by the newly created collector_@return a new {@link org.apache.flink.runtime.iterative.io.SolutionSetFastUpdateOutputCollector} or_{@link SolutionSetUpdateOutputCollector};protected Collector<OT> createSolutionSetUpdateOutputCollector(Collector<OT> delegate) {_		Broker<Object> solutionSetBroker = SolutionSetBroker.instance()__		_		Object ss = solutionSetBroker.get(brokerKey())__		if (ss instanceof CompactingHashTable) {_			@SuppressWarnings("unchecked")_			CompactingHashTable<OT> solutionSet = (CompactingHashTable<OT>) ss__			return new SolutionSetUpdateOutputCollector<OT>(solutionSet, delegate)__		}_		else if (ss instanceof JoinHashMap) {_			@SuppressWarnings("unchecked")_			JoinHashMap<OT> map = (JoinHashMap<OT>) ss__			return new SolutionSetObjectsUpdateOutputCollector<OT>(map, delegate)__		} else {_			throw new RuntimeException("Unrecognized solution set handle: " + ss)__		}_	};creates,a,new,solution,set,update,output,collector,p,this,collector,is,used,by,link,iteration,intermediate,task,or,link,iteration,tail,task,to,update,the,solution,set,of,workset,iterations,depending,on,the,task,configuration,either,a,fast,non,probing,link,org,apache,flink,runtime,iterative,io,solution,set,fast,update,output,collector,or,normal,re,probing,link,solution,set,update,output,collector,is,created,p,if,a,non,null,delegate,is,given,the,new,link,collector,will,write,back,to,the,solution,set,and,also,call,collect,t,of,the,delegate,param,delegate,null,or,a,delegate,collector,to,be,called,by,the,newly,created,collector,return,a,new,link,org,apache,flink,runtime,iterative,io,solution,set,fast,update,output,collector,or,link,solution,set,update,output,collector;protected,collector,ot,create,solution,set,update,output,collector,collector,ot,delegate,broker,object,solution,set,broker,solution,set,broker,instance,object,ss,solution,set,broker,get,broker,key,if,ss,instanceof,compacting,hash,table,suppress,warnings,unchecked,compacting,hash,table,ot,solution,set,compacting,hash,table,ot,ss,return,new,solution,set,update,output,collector,ot,solution,set,delegate,else,if,ss,instanceof,join,hash,map,suppress,warnings,unchecked,join,hash,map,ot,map,join,hash,map,ot,ss,return,new,solution,set,objects,update,output,collector,ot,map,delegate,else,throw,new,runtime,exception,unrecognized,solution,set,handle,ss
AbstractIterativeTask -> protected Collector<OT> createSolutionSetUpdateOutputCollector(Collector<OT> delegate);1447951095;Creates a new solution set update output collector._<p>_This collector is used by {@link IterationIntermediateTask} or {@link IterationTailTask} to update the_solution set of workset iterations. Depending on the task configuration, either a fast (non-probing)_{@link org.apache.flink.runtime.iterative.io.SolutionSetFastUpdateOutputCollector} or normal (re-probing)_{@link SolutionSetUpdateOutputCollector} is created._<p>_If a non-null delegate is given, the new {@link Collector} will write back to the solution set and also call_collect(T) of the delegate.__@param delegate null -OR- a delegate collector to be called by the newly created collector_@return a new {@link org.apache.flink.runtime.iterative.io.SolutionSetFastUpdateOutputCollector} or_{@link SolutionSetUpdateOutputCollector};protected Collector<OT> createSolutionSetUpdateOutputCollector(Collector<OT> delegate) {_		Broker<Object> solutionSetBroker = SolutionSetBroker.instance()__		_		Object ss = solutionSetBroker.get(brokerKey())__		if (ss instanceof CompactingHashTable) {_			@SuppressWarnings("unchecked")_			CompactingHashTable<OT> solutionSet = (CompactingHashTable<OT>) ss__			return new SolutionSetUpdateOutputCollector<OT>(solutionSet, delegate)__		}_		else if (ss instanceof JoinHashMap) {_			@SuppressWarnings("unchecked")_			JoinHashMap<OT> map = (JoinHashMap<OT>) ss__			return new SolutionSetObjectsUpdateOutputCollector<OT>(map, delegate)__		} else {_			throw new RuntimeException("Unrecognized solution set handle: " + ss)__		}_	};creates,a,new,solution,set,update,output,collector,p,this,collector,is,used,by,link,iteration,intermediate,task,or,link,iteration,tail,task,to,update,the,solution,set,of,workset,iterations,depending,on,the,task,configuration,either,a,fast,non,probing,link,org,apache,flink,runtime,iterative,io,solution,set,fast,update,output,collector,or,normal,re,probing,link,solution,set,update,output,collector,is,created,p,if,a,non,null,delegate,is,given,the,new,link,collector,will,write,back,to,the,solution,set,and,also,call,collect,t,of,the,delegate,param,delegate,null,or,a,delegate,collector,to,be,called,by,the,newly,created,collector,return,a,new,link,org,apache,flink,runtime,iterative,io,solution,set,fast,update,output,collector,or,link,solution,set,update,output,collector;protected,collector,ot,create,solution,set,update,output,collector,collector,ot,delegate,broker,object,solution,set,broker,solution,set,broker,instance,object,ss,solution,set,broker,get,broker,key,if,ss,instanceof,compacting,hash,table,suppress,warnings,unchecked,compacting,hash,table,ot,solution,set,compacting,hash,table,ot,ss,return,new,solution,set,update,output,collector,ot,solution,set,delegate,else,if,ss,instanceof,join,hash,map,suppress,warnings,unchecked,join,hash,map,ot,map,join,hash,map,ot,ss,return,new,solution,set,objects,update,output,collector,ot,map,delegate,else,throw,new,runtime,exception,unrecognized,solution,set,handle,ss
AbstractIterativeTask -> protected Collector<OT> createSolutionSetUpdateOutputCollector(Collector<OT> delegate);1462798472;Creates a new solution set update output collector._<p>_This collector is used by {@link IterationIntermediateTask} or {@link IterationTailTask} to update the_solution set of workset iterations. Depending on the task configuration, either a fast (non-probing)_{@link org.apache.flink.runtime.iterative.io.SolutionSetFastUpdateOutputCollector} or normal (re-probing)_{@link SolutionSetUpdateOutputCollector} is created._<p>_If a non-null delegate is given, the new {@link Collector} will write back to the solution set and also call_collect(T) of the delegate.__@param delegate null -OR- a delegate collector to be called by the newly created collector_@return a new {@link org.apache.flink.runtime.iterative.io.SolutionSetFastUpdateOutputCollector} or_{@link SolutionSetUpdateOutputCollector};protected Collector<OT> createSolutionSetUpdateOutputCollector(Collector<OT> delegate) {_		Broker<Object> solutionSetBroker = SolutionSetBroker.instance()__		_		Object ss = solutionSetBroker.get(brokerKey())__		if (ss instanceof CompactingHashTable) {_			@SuppressWarnings("unchecked")_			CompactingHashTable<OT> solutionSet = (CompactingHashTable<OT>) ss__			return new SolutionSetUpdateOutputCollector<OT>(solutionSet, delegate)__		}_		else if (ss instanceof JoinHashMap) {_			@SuppressWarnings("unchecked")_			JoinHashMap<OT> map = (JoinHashMap<OT>) ss__			return new SolutionSetObjectsUpdateOutputCollector<OT>(map, delegate)__		} else {_			throw new RuntimeException("Unrecognized solution set handle: " + ss)__		}_	};creates,a,new,solution,set,update,output,collector,p,this,collector,is,used,by,link,iteration,intermediate,task,or,link,iteration,tail,task,to,update,the,solution,set,of,workset,iterations,depending,on,the,task,configuration,either,a,fast,non,probing,link,org,apache,flink,runtime,iterative,io,solution,set,fast,update,output,collector,or,normal,re,probing,link,solution,set,update,output,collector,is,created,p,if,a,non,null,delegate,is,given,the,new,link,collector,will,write,back,to,the,solution,set,and,also,call,collect,t,of,the,delegate,param,delegate,null,or,a,delegate,collector,to,be,called,by,the,newly,created,collector,return,a,new,link,org,apache,flink,runtime,iterative,io,solution,set,fast,update,output,collector,or,link,solution,set,update,output,collector;protected,collector,ot,create,solution,set,update,output,collector,collector,ot,delegate,broker,object,solution,set,broker,solution,set,broker,instance,object,ss,solution,set,broker,get,broker,key,if,ss,instanceof,compacting,hash,table,suppress,warnings,unchecked,compacting,hash,table,ot,solution,set,compacting,hash,table,ot,ss,return,new,solution,set,update,output,collector,ot,solution,set,delegate,else,if,ss,instanceof,join,hash,map,suppress,warnings,unchecked,join,hash,map,ot,map,join,hash,map,ot,ss,return,new,solution,set,objects,update,output,collector,ot,map,delegate,else,throw,new,runtime,exception,unrecognized,solution,set,handle,ss
AbstractIterativeTask -> protected Collector<OT> createSolutionSetUpdateOutputCollector(Collector<OT> delegate);1489547621;Creates a new solution set update output collector.__<p>This collector is used by {@link IterationIntermediateTask} or {@link IterationTailTask} to update the_solution set of workset iterations. Depending on the task configuration, either a fast (non-probing)_{@link org.apache.flink.runtime.iterative.io.SolutionSetFastUpdateOutputCollector} or normal (re-probing)_{@link SolutionSetUpdateOutputCollector} is created.__<p>If a non-null delegate is given, the new {@link Collector} will write back to the solution set and also call_collect(T) of the delegate.__@param delegate null -OR- a delegate collector to be called by the newly created collector_@return a new {@link org.apache.flink.runtime.iterative.io.SolutionSetFastUpdateOutputCollector} or_{@link SolutionSetUpdateOutputCollector};protected Collector<OT> createSolutionSetUpdateOutputCollector(Collector<OT> delegate) {_		Broker<Object> solutionSetBroker = SolutionSetBroker.instance()___		Object ss = solutionSetBroker.get(brokerKey())__		if (ss instanceof CompactingHashTable) {_			@SuppressWarnings("unchecked")_			CompactingHashTable<OT> solutionSet = (CompactingHashTable<OT>) ss__			return new SolutionSetUpdateOutputCollector<OT>(solutionSet, delegate)__		}_		else if (ss instanceof JoinHashMap) {_			@SuppressWarnings("unchecked")_			JoinHashMap<OT> map = (JoinHashMap<OT>) ss__			return new SolutionSetObjectsUpdateOutputCollector<OT>(map, delegate)__		} else {_			throw new RuntimeException("Unrecognized solution set handle: " + ss)__		}_	};creates,a,new,solution,set,update,output,collector,p,this,collector,is,used,by,link,iteration,intermediate,task,or,link,iteration,tail,task,to,update,the,solution,set,of,workset,iterations,depending,on,the,task,configuration,either,a,fast,non,probing,link,org,apache,flink,runtime,iterative,io,solution,set,fast,update,output,collector,or,normal,re,probing,link,solution,set,update,output,collector,is,created,p,if,a,non,null,delegate,is,given,the,new,link,collector,will,write,back,to,the,solution,set,and,also,call,collect,t,of,the,delegate,param,delegate,null,or,a,delegate,collector,to,be,called,by,the,newly,created,collector,return,a,new,link,org,apache,flink,runtime,iterative,io,solution,set,fast,update,output,collector,or,link,solution,set,update,output,collector;protected,collector,ot,create,solution,set,update,output,collector,collector,ot,delegate,broker,object,solution,set,broker,solution,set,broker,instance,object,ss,solution,set,broker,get,broker,key,if,ss,instanceof,compacting,hash,table,suppress,warnings,unchecked,compacting,hash,table,ot,solution,set,compacting,hash,table,ot,ss,return,new,solution,set,update,output,collector,ot,solution,set,delegate,else,if,ss,instanceof,join,hash,map,suppress,warnings,unchecked,join,hash,map,ot,map,join,hash,map,ot,ss,return,new,solution,set,objects,update,output,collector,ot,map,delegate,else,throw,new,runtime,exception,unrecognized,solution,set,handle,ss
AbstractIterativeTask -> protected Collector<OT> createSolutionSetUpdateOutputCollector(Collector<OT> delegate);1497027221;Creates a new solution set update output collector.__<p>This collector is used by {@link IterationIntermediateTask} or {@link IterationTailTask} to update the_solution set of workset iterations. Depending on the task configuration, either a fast (non-probing)_{@link org.apache.flink.runtime.iterative.io.SolutionSetFastUpdateOutputCollector} or normal (re-probing)_{@link SolutionSetUpdateOutputCollector} is created.__<p>If a non-null delegate is given, the new {@link Collector} will write back to the solution set and also call_collect(T) of the delegate.__@param delegate null -OR- a delegate collector to be called by the newly created collector_@return a new {@link org.apache.flink.runtime.iterative.io.SolutionSetFastUpdateOutputCollector} or_{@link SolutionSetUpdateOutputCollector};protected Collector<OT> createSolutionSetUpdateOutputCollector(Collector<OT> delegate) {_		Broker<Object> solutionSetBroker = SolutionSetBroker.instance()___		Object ss = solutionSetBroker.get(brokerKey())__		if (ss instanceof CompactingHashTable) {_			@SuppressWarnings("unchecked")_			CompactingHashTable<OT> solutionSet = (CompactingHashTable<OT>) ss__			return new SolutionSetUpdateOutputCollector<OT>(solutionSet, delegate)__		}_		else if (ss instanceof JoinHashMap) {_			@SuppressWarnings("unchecked")_			JoinHashMap<OT> map = (JoinHashMap<OT>) ss__			return new SolutionSetObjectsUpdateOutputCollector<OT>(map, delegate)__		} else {_			throw new RuntimeException("Unrecognized solution set handle: " + ss)__		}_	};creates,a,new,solution,set,update,output,collector,p,this,collector,is,used,by,link,iteration,intermediate,task,or,link,iteration,tail,task,to,update,the,solution,set,of,workset,iterations,depending,on,the,task,configuration,either,a,fast,non,probing,link,org,apache,flink,runtime,iterative,io,solution,set,fast,update,output,collector,or,normal,re,probing,link,solution,set,update,output,collector,is,created,p,if,a,non,null,delegate,is,given,the,new,link,collector,will,write,back,to,the,solution,set,and,also,call,collect,t,of,the,delegate,param,delegate,null,or,a,delegate,collector,to,be,called,by,the,newly,created,collector,return,a,new,link,org,apache,flink,runtime,iterative,io,solution,set,fast,update,output,collector,or,link,solution,set,update,output,collector;protected,collector,ot,create,solution,set,update,output,collector,collector,ot,delegate,broker,object,solution,set,broker,solution,set,broker,instance,object,ss,solution,set,broker,get,broker,key,if,ss,instanceof,compacting,hash,table,suppress,warnings,unchecked,compacting,hash,table,ot,solution,set,compacting,hash,table,ot,ss,return,new,solution,set,update,output,collector,ot,solution,set,delegate,else,if,ss,instanceof,join,hash,map,suppress,warnings,unchecked,join,hash,map,ot,map,join,hash,map,ot,ss,return,new,solution,set,objects,update,output,collector,ot,map,delegate,else,throw,new,runtime,exception,unrecognized,solution,set,handle,ss
AbstractIterativeTask -> protected Collector<OT> createSolutionSetUpdateOutputCollector(Collector<OT> delegate);1515007198;Creates a new solution set update output collector.__<p>This collector is used by {@link IterationIntermediateTask} or {@link IterationTailTask} to update the_solution set of workset iterations. Depending on the task configuration, either a fast (non-probing)_{@link org.apache.flink.runtime.iterative.io.SolutionSetFastUpdateOutputCollector} or normal (re-probing)_{@link SolutionSetUpdateOutputCollector} is created.__<p>If a non-null delegate is given, the new {@link Collector} will write back to the solution set and also call_collect(T) of the delegate.__@param delegate null -OR- a delegate collector to be called by the newly created collector_@return a new {@link org.apache.flink.runtime.iterative.io.SolutionSetFastUpdateOutputCollector} or_{@link SolutionSetUpdateOutputCollector};protected Collector<OT> createSolutionSetUpdateOutputCollector(Collector<OT> delegate) {_		Broker<Object> solutionSetBroker = SolutionSetBroker.instance()___		Object ss = solutionSetBroker.get(brokerKey())__		if (ss instanceof CompactingHashTable) {_			@SuppressWarnings("unchecked")_			CompactingHashTable<OT> solutionSet = (CompactingHashTable<OT>) ss__			return new SolutionSetUpdateOutputCollector<OT>(solutionSet, delegate)__		}_		else if (ss instanceof JoinHashMap) {_			@SuppressWarnings("unchecked")_			JoinHashMap<OT> map = (JoinHashMap<OT>) ss__			return new SolutionSetObjectsUpdateOutputCollector<OT>(map, delegate)__		} else {_			throw new RuntimeException("Unrecognized solution set handle: " + ss)__		}_	};creates,a,new,solution,set,update,output,collector,p,this,collector,is,used,by,link,iteration,intermediate,task,or,link,iteration,tail,task,to,update,the,solution,set,of,workset,iterations,depending,on,the,task,configuration,either,a,fast,non,probing,link,org,apache,flink,runtime,iterative,io,solution,set,fast,update,output,collector,or,normal,re,probing,link,solution,set,update,output,collector,is,created,p,if,a,non,null,delegate,is,given,the,new,link,collector,will,write,back,to,the,solution,set,and,also,call,collect,t,of,the,delegate,param,delegate,null,or,a,delegate,collector,to,be,called,by,the,newly,created,collector,return,a,new,link,org,apache,flink,runtime,iterative,io,solution,set,fast,update,output,collector,or,link,solution,set,update,output,collector;protected,collector,ot,create,solution,set,update,output,collector,collector,ot,delegate,broker,object,solution,set,broker,solution,set,broker,instance,object,ss,solution,set,broker,get,broker,key,if,ss,instanceof,compacting,hash,table,suppress,warnings,unchecked,compacting,hash,table,ot,solution,set,compacting,hash,table,ot,ss,return,new,solution,set,update,output,collector,ot,solution,set,delegate,else,if,ss,instanceof,join,hash,map,suppress,warnings,unchecked,join,hash,map,ot,map,join,hash,map,ot,ss,return,new,solution,set,objects,update,output,collector,ot,map,delegate,else,throw,new,runtime,exception,unrecognized,solution,set,handle,ss
