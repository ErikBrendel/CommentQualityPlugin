# id;timestamp;commentText;codeText;commentWords;codeWords
ContaineredTaskManagerParameters -> public static long calculateCutoffMB(Configuration config, long containerMemoryMB);1521532773;calcuate cutoff memory size used by container, it will throw an {@link IllegalArgumentException}_if the config is invalid or return the cutoff value if valid.__@param config The Flink configuration._@param containerMemoryMB The size of the complete container, in megabytes.__@return cutoff memory size used by container.;public static long calculateCutoffMB(Configuration config, long containerMemoryMB) {_		Preconditions.checkArgument(containerMemoryMB > 0)___		_		final float memoryCutoffRatio = config.getFloat(_			ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)___		if (memoryCutoffRatio >= 1 || memoryCutoffRatio <= 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key() + "' must be between 0 and 1. Value given="_				+ memoryCutoffRatio)__		}__		_		final int minCutoff = config.getInteger(_			ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (minCutoff >= containerMemoryMB) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key() + "'='" + minCutoff_				+ "' is larger than the total container memory " + containerMemoryMB)__		}__		_		long cutoff = (long) (containerMemoryMB * memoryCutoffRatio)__		if (cutoff < minCutoff) {_			cutoff = minCutoff__		}_		return cutoff__	};calcuate,cutoff,memory,size,used,by,container,it,will,throw,an,link,illegal,argument,exception,if,the,config,is,invalid,or,return,the,cutoff,value,if,valid,param,config,the,flink,configuration,param,container,memory,mb,the,size,of,the,complete,container,in,megabytes,return,cutoff,memory,size,used,by,container;public,static,long,calculate,cutoff,mb,configuration,config,long,container,memory,mb,preconditions,check,argument,container,memory,mb,0,final,float,memory,cutoff,ratio,config,get,float,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,final,int,min,cutoff,config,get,integer,resource,manager,options,if,min,cutoff,container,memory,mb,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,min,cutoff,is,larger,than,the,total,container,memory,container,memory,mb,long,cutoff,long,container,memory,mb,memory,cutoff,ratio,if,cutoff,min,cutoff,cutoff,min,cutoff,return,cutoff
ContaineredTaskManagerParameters -> public static long calculateCutoffMB(Configuration config, long containerMemoryMB);1521556682;Calcuate cutoff memory size used by container, it will throw an {@link IllegalArgumentException}_if the config is invalid or return the cutoff value if valid.__@param config The Flink configuration._@param containerMemoryMB The size of the complete container, in megabytes.__@return cutoff memory size used by container.;public static long calculateCutoffMB(Configuration config, long containerMemoryMB) {_		Preconditions.checkArgument(containerMemoryMB > 0)___		_		final float memoryCutoffRatio = config.getFloat(_			ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)___		if (memoryCutoffRatio >= 1 || memoryCutoffRatio <= 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key() + "' must be between 0 and 1. Value given="_				+ memoryCutoffRatio)__		}__		_		final int minCutoff = config.getInteger(_			ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (minCutoff >= containerMemoryMB) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key() + "'='" + minCutoff_				+ "' is larger than the total container memory " + containerMemoryMB)__		}__		_		long cutoff = (long) (containerMemoryMB * memoryCutoffRatio)__		if (cutoff < minCutoff) {_			cutoff = minCutoff__		}_		return cutoff__	};calcuate,cutoff,memory,size,used,by,container,it,will,throw,an,link,illegal,argument,exception,if,the,config,is,invalid,or,return,the,cutoff,value,if,valid,param,config,the,flink,configuration,param,container,memory,mb,the,size,of,the,complete,container,in,megabytes,return,cutoff,memory,size,used,by,container;public,static,long,calculate,cutoff,mb,configuration,config,long,container,memory,mb,preconditions,check,argument,container,memory,mb,0,final,float,memory,cutoff,ratio,config,get,float,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,final,int,min,cutoff,config,get,integer,resource,manager,options,if,min,cutoff,container,memory,mb,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,min,cutoff,is,larger,than,the,total,container,memory,container,memory,mb,long,cutoff,long,container,memory,mb,memory,cutoff,ratio,if,cutoff,min,cutoff,cutoff,min,cutoff,return,cutoff
ContaineredTaskManagerParameters -> public static ContaineredTaskManagerParameters create( 		Configuration config, long containerMemoryMB, int numSlots);1455013242;Computes the parameters to be used to start a TaskManager Java process.__@param config The Flink configuration._@param containerMemoryMB The size of the complete container, in megabytes._@return The parameters to start the TaskManager processes with.;public static ContaineredTaskManagerParameters create(_		Configuration config, long containerMemoryMB, int numSlots)_	{_		__		final float memoryCutoffRatio = config.getFloat(_			ConfigConstants.CONTAINERED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)___		final int minCutoff = config.getInteger(_			ConfigConstants.CONTAINERED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio >= 1 || memoryCutoffRatio <= 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERED_HEAP_CUTOFF_RATIO + "' must be between 0 and 1. Value given="_				+ memoryCutoffRatio)__		}__		if (minCutoff >= containerMemoryMB) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERED_HEAP_CUTOFF_MIN + "'='" + minCutoff_				+ "' is larger than the total container memory " + containerMemoryMB)__		}__		long cutoff = (long) (containerMemoryMB * memoryCutoffRatio)__		if (cutoff < minCutoff) {_			cutoff = minCutoff__		}__		final long javaMemorySizeMB = containerMemoryMB - cutoff___		__		final boolean useOffHeap = config.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)___		final long heapSizeMB__		if (useOffHeap) {_			long offHeapSize = config.getLong(_				ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)___			if (offHeapSize <= 0) {_				double fraction = config.getFloat(_					ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_					ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)____				offHeapSize = (long) (fraction * javaMemorySizeMB)__			}__			heapSizeMB = javaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = javaMemorySizeMB__		}_		_		_		final HashMap<String, String> envVars = new HashMap<>()__		final String prefix = ConfigConstants.CONTAINERED_TASK_MANAGER_ENV_PREFIX__		_		for (String key : config.keySet()) {_			if (key.startsWith(prefix) && key.length() > prefix.length()) {_				_				String envVarKey = key.substring(prefix.length())__				envVars.put(envVarKey, config.getString(key, null))__			}_		}_		_		_		return new ContaineredTaskManagerParameters(_			containerMemoryMB, heapSizeMB, javaMemorySizeMB, numSlots, envVars)__	};computes,the,parameters,to,be,used,to,start,a,task,manager,java,process,param,config,the,flink,configuration,param,container,memory,mb,the,size,of,the,complete,container,in,megabytes,return,the,parameters,to,start,the,task,manager,processes,with;public,static,containered,task,manager,parameters,create,configuration,config,long,container,memory,mb,int,num,slots,final,float,memory,cutoff,ratio,config,get,float,config,constants,config,constants,final,int,min,cutoff,config,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,container,memory,mb,throw,new,illegal,argument,exception,the,configuration,value,config,constants,min,cutoff,is,larger,than,the,total,container,memory,container,memory,mb,long,cutoff,long,container,memory,mb,memory,cutoff,ratio,if,cutoff,min,cutoff,cutoff,min,cutoff,final,long,java,memory,size,mb,container,memory,mb,cutoff,final,boolean,use,off,heap,config,get,boolean,config,constants,false,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,config,get,long,config,constants,1l,if,off,heap,size,0,double,fraction,config,get,float,config,constants,config,constants,off,heap,size,long,fraction,java,memory,size,mb,heap,size,mb,java,memory,size,mb,off,heap,size,else,heap,size,mb,java,memory,size,mb,final,hash,map,string,string,env,vars,new,hash,map,final,string,prefix,config,constants,for,string,key,config,key,set,if,key,starts,with,prefix,key,length,prefix,length,string,env,var,key,key,substring,prefix,length,env,vars,put,env,var,key,config,get,string,key,null,return,new,containered,task,manager,parameters,container,memory,mb,heap,size,mb,java,memory,size,mb,num,slots,env,vars
ContaineredTaskManagerParameters -> public static ContaineredTaskManagerParameters create( 		Configuration config, long containerMemoryMB, int numSlots);1467119525;Computes the parameters to be used to start a TaskManager Java process.__@param config The Flink configuration._@param containerMemoryMB The size of the complete container, in megabytes._@return The parameters to start the TaskManager processes with.;public static ContaineredTaskManagerParameters create(_		Configuration config, long containerMemoryMB, int numSlots)_	{_		__		final float memoryCutoffRatio = config.getFloat(_			ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)___		final int minCutoff = config.getInteger(_			ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio >= 1 || memoryCutoffRatio <= 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO + "' must be between 0 and 1. Value given="_				+ memoryCutoffRatio)__		}__		if (minCutoff >= containerMemoryMB) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN + "'='" + minCutoff_				+ "' is larger than the total container memory " + containerMemoryMB)__		}__		long cutoff = (long) (containerMemoryMB * memoryCutoffRatio)__		if (cutoff < minCutoff) {_			cutoff = minCutoff__		}__		final long javaMemorySizeMB = containerMemoryMB - cutoff___		__		final boolean useOffHeap = config.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)___		final long heapSizeMB__		if (useOffHeap) {_			long offHeapSize = config.getLong(_				ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)___			if (offHeapSize <= 0) {_				double fraction = config.getFloat(_					ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_					ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)____				offHeapSize = (long) (fraction * javaMemorySizeMB)__			}__			heapSizeMB = javaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = javaMemorySizeMB__		}_		_		_		final HashMap<String, String> envVars = new HashMap<>()__		final String prefix = ConfigConstants.CONTAINERIZED_TASK_MANAGER_ENV_PREFIX__		_		for (String key : config.keySet()) {_			if (key.startsWith(prefix) && key.length() > prefix.length()) {_				_				String envVarKey = key.substring(prefix.length())__				envVars.put(envVarKey, config.getString(key, null))__			}_		}_		_		_		return new ContaineredTaskManagerParameters(_			containerMemoryMB, heapSizeMB, javaMemorySizeMB, numSlots, envVars)__	};computes,the,parameters,to,be,used,to,start,a,task,manager,java,process,param,config,the,flink,configuration,param,container,memory,mb,the,size,of,the,complete,container,in,megabytes,return,the,parameters,to,start,the,task,manager,processes,with;public,static,containered,task,manager,parameters,create,configuration,config,long,container,memory,mb,int,num,slots,final,float,memory,cutoff,ratio,config,get,float,config,constants,config,constants,final,int,min,cutoff,config,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,container,memory,mb,throw,new,illegal,argument,exception,the,configuration,value,config,constants,min,cutoff,is,larger,than,the,total,container,memory,container,memory,mb,long,cutoff,long,container,memory,mb,memory,cutoff,ratio,if,cutoff,min,cutoff,cutoff,min,cutoff,final,long,java,memory,size,mb,container,memory,mb,cutoff,final,boolean,use,off,heap,config,get,boolean,config,constants,false,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,config,get,long,config,constants,1l,if,off,heap,size,0,double,fraction,config,get,float,config,constants,config,constants,off,heap,size,long,fraction,java,memory,size,mb,heap,size,mb,java,memory,size,mb,off,heap,size,else,heap,size,mb,java,memory,size,mb,final,hash,map,string,string,env,vars,new,hash,map,final,string,prefix,config,constants,for,string,key,config,key,set,if,key,starts,with,prefix,key,length,prefix,length,string,env,var,key,key,substring,prefix,length,env,vars,put,env,var,key,config,get,string,key,null,return,new,containered,task,manager,parameters,container,memory,mb,heap,size,mb,java,memory,size,mb,num,slots,env,vars
ContaineredTaskManagerParameters -> public static ContaineredTaskManagerParameters create( 		Configuration config, long containerMemoryMB, int numSlots);1490831872;Computes the parameters to be used to start a TaskManager Java process.__@param config The Flink configuration._@param containerMemoryMB The size of the complete container, in megabytes._@return The parameters to start the TaskManager processes with.;public static ContaineredTaskManagerParameters create(_		Configuration config, long containerMemoryMB, int numSlots)_	{_		__		final float memoryCutoffRatio = config.getFloat(_			ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)___		final int minCutoff = config.getInteger(_			ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio >= 1 || memoryCutoffRatio <= 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO + "' must be between 0 and 1. Value given="_				+ memoryCutoffRatio)__		}__		if (minCutoff >= containerMemoryMB) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN + "'='" + minCutoff_				+ "' is larger than the total container memory " + containerMemoryMB)__		}__		long cutoff = (long) (containerMemoryMB * memoryCutoffRatio)__		if (cutoff < minCutoff) {_			cutoff = minCutoff__		}__		final long javaMemorySizeMB = containerMemoryMB - cutoff___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		long offHeapSize = -1__		if (useOffHeap) {_			offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)___				offHeapSize = (long) (fraction * javaMemorySizeMB)__			}__			heapSizeMB = javaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = javaMemorySizeMB__		}_		_		_		final HashMap<String, String> envVars = new HashMap<>()__		final String prefix = ConfigConstants.CONTAINERIZED_TASK_MANAGER_ENV_PREFIX__		_		for (String key : config.keySet()) {_			if (key.startsWith(prefix) && key.length() > prefix.length()) {_				_				String envVarKey = key.substring(prefix.length())__				envVars.put(envVarKey, config.getString(key, null))__			}_		}_		_		_		return new ContaineredTaskManagerParameters(_			containerMemoryMB, heapSizeMB, offHeapSize, numSlots, envVars)__	};computes,the,parameters,to,be,used,to,start,a,task,manager,java,process,param,config,the,flink,configuration,param,container,memory,mb,the,size,of,the,complete,container,in,megabytes,return,the,parameters,to,start,the,task,manager,processes,with;public,static,containered,task,manager,parameters,create,configuration,config,long,container,memory,mb,int,num,slots,final,float,memory,cutoff,ratio,config,get,float,config,constants,config,constants,final,int,min,cutoff,config,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,container,memory,mb,throw,new,illegal,argument,exception,the,configuration,value,config,constants,min,cutoff,is,larger,than,the,total,container,memory,container,memory,mb,long,cutoff,long,container,memory,mb,memory,cutoff,ratio,if,cutoff,min,cutoff,cutoff,min,cutoff,final,long,java,memory,size,mb,container,memory,mb,cutoff,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,long,off,heap,size,1,if,use,off,heap,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,java,memory,size,mb,heap,size,mb,java,memory,size,mb,off,heap,size,else,heap,size,mb,java,memory,size,mb,final,hash,map,string,string,env,vars,new,hash,map,final,string,prefix,config,constants,for,string,key,config,key,set,if,key,starts,with,prefix,key,length,prefix,length,string,env,var,key,key,substring,prefix,length,env,vars,put,env,var,key,config,get,string,key,null,return,new,containered,task,manager,parameters,container,memory,mb,heap,size,mb,off,heap,size,num,slots,env,vars
ContaineredTaskManagerParameters -> public static ContaineredTaskManagerParameters create( 		Configuration config, long containerMemoryMB, int numSlots);1491385557;Computes the parameters to be used to start a TaskManager Java process.__@param config The Flink configuration._@param containerMemoryMB The size of the complete container, in megabytes._@return The parameters to start the TaskManager processes with.;public static ContaineredTaskManagerParameters create(_		Configuration config, long containerMemoryMB, int numSlots)_	{_		__		final float memoryCutoffRatio = config.getFloat(_			ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)___		final int minCutoff = config.getInteger(_			ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio >= 1 || memoryCutoffRatio <= 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO + "' must be between 0 and 1. Value given="_				+ memoryCutoffRatio)__		}__		if (minCutoff >= containerMemoryMB) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN + "'='" + minCutoff_				+ "' is larger than the total container memory " + containerMemoryMB)__		}__		long cutoff = (long) (containerMemoryMB * memoryCutoffRatio)__		if (cutoff < minCutoff) {_			cutoff = minCutoff__		}__		final long javaMemorySizeMB = containerMemoryMB - cutoff___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {_			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)___				offHeapSize = (long) (fraction * javaMemorySizeMB)__			}__			heapSizeMB = javaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = javaMemorySizeMB__		}_		_		_		final HashMap<String, String> envVars = new HashMap<>()__		final String prefix = ConfigConstants.CONTAINERIZED_TASK_MANAGER_ENV_PREFIX__		_		for (String key : config.keySet()) {_			if (key.startsWith(prefix) && key.length() > prefix.length()) {_				_				String envVarKey = key.substring(prefix.length())__				envVars.put(envVarKey, config.getString(key, null))__			}_		}_		_		_		return new ContaineredTaskManagerParameters(_			containerMemoryMB, heapSizeMB, javaMemorySizeMB, numSlots, envVars)__	};computes,the,parameters,to,be,used,to,start,a,task,manager,java,process,param,config,the,flink,configuration,param,container,memory,mb,the,size,of,the,complete,container,in,megabytes,return,the,parameters,to,start,the,task,manager,processes,with;public,static,containered,task,manager,parameters,create,configuration,config,long,container,memory,mb,int,num,slots,final,float,memory,cutoff,ratio,config,get,float,config,constants,config,constants,final,int,min,cutoff,config,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,container,memory,mb,throw,new,illegal,argument,exception,the,configuration,value,config,constants,min,cutoff,is,larger,than,the,total,container,memory,container,memory,mb,long,cutoff,long,container,memory,mb,memory,cutoff,ratio,if,cutoff,min,cutoff,cutoff,min,cutoff,final,long,java,memory,size,mb,container,memory,mb,cutoff,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,java,memory,size,mb,heap,size,mb,java,memory,size,mb,off,heap,size,else,heap,size,mb,java,memory,size,mb,final,hash,map,string,string,env,vars,new,hash,map,final,string,prefix,config,constants,for,string,key,config,key,set,if,key,starts,with,prefix,key,length,prefix,length,string,env,var,key,key,substring,prefix,length,env,vars,put,env,var,key,config,get,string,key,null,return,new,containered,task,manager,parameters,container,memory,mb,heap,size,mb,java,memory,size,mb,num,slots,env,vars
ContaineredTaskManagerParameters -> public static ContaineredTaskManagerParameters create( 		Configuration config, long containerMemoryMB, int numSlots);1491482512;Computes the parameters to be used to start a TaskManager Java process.__@param config The Flink configuration._@param containerMemoryMB The size of the complete container, in megabytes._@return The parameters to start the TaskManager processes with.;public static ContaineredTaskManagerParameters create(_		Configuration config, long containerMemoryMB, int numSlots)_	{_		__		final float memoryCutoffRatio = config.getFloat(_			ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)___		final int minCutoff = config.getInteger(_			ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio >= 1 || memoryCutoffRatio <= 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO + "' must be between 0 and 1. Value given="_				+ memoryCutoffRatio)__		}__		if (minCutoff >= containerMemoryMB) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN + "'='" + minCutoff_				+ "' is larger than the total container memory " + containerMemoryMB)__		}__		long cutoff = (long) (containerMemoryMB * memoryCutoffRatio)__		if (cutoff < minCutoff) {_			cutoff = minCutoff__		}__		final long javaMemorySizeMB = containerMemoryMB - cutoff___		_		final long heapSizeMB = TaskManagerServices.calculateHeapSizeMB(javaMemorySizeMB, config)__		final long offHeapSize = javaMemorySizeMB == heapSizeMB ? -1L : javaMemorySizeMB - heapSizeMB_ __		_		final HashMap<String, String> envVars = new HashMap<>()__		final String prefix = ConfigConstants.CONTAINERIZED_TASK_MANAGER_ENV_PREFIX__		_		for (String key : config.keySet()) {_			if (key.startsWith(prefix) && key.length() > prefix.length()) {_				_				String envVarKey = key.substring(prefix.length())__				envVars.put(envVarKey, config.getString(key, null))__			}_		}__		_		return new ContaineredTaskManagerParameters(_			containerMemoryMB, heapSizeMB, offHeapSize, numSlots, envVars)__	};computes,the,parameters,to,be,used,to,start,a,task,manager,java,process,param,config,the,flink,configuration,param,container,memory,mb,the,size,of,the,complete,container,in,megabytes,return,the,parameters,to,start,the,task,manager,processes,with;public,static,containered,task,manager,parameters,create,configuration,config,long,container,memory,mb,int,num,slots,final,float,memory,cutoff,ratio,config,get,float,config,constants,config,constants,final,int,min,cutoff,config,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,container,memory,mb,throw,new,illegal,argument,exception,the,configuration,value,config,constants,min,cutoff,is,larger,than,the,total,container,memory,container,memory,mb,long,cutoff,long,container,memory,mb,memory,cutoff,ratio,if,cutoff,min,cutoff,cutoff,min,cutoff,final,long,java,memory,size,mb,container,memory,mb,cutoff,final,long,heap,size,mb,task,manager,services,calculate,heap,size,mb,java,memory,size,mb,config,final,long,off,heap,size,java,memory,size,mb,heap,size,mb,1l,java,memory,size,mb,heap,size,mb,final,hash,map,string,string,env,vars,new,hash,map,final,string,prefix,config,constants,for,string,key,config,key,set,if,key,starts,with,prefix,key,length,prefix,length,string,env,var,key,key,substring,prefix,length,env,vars,put,env,var,key,config,get,string,key,null,return,new,containered,task,manager,parameters,container,memory,mb,heap,size,mb,off,heap,size,num,slots,env,vars
ContaineredTaskManagerParameters -> public static ContaineredTaskManagerParameters create( 		Configuration config, long containerMemoryMB, int numSlots);1496893136;Computes the parameters to be used to start a TaskManager Java process.__@param config The Flink configuration._@param containerMemoryMB The size of the complete container, in megabytes._@return The parameters to start the TaskManager processes with.;public static ContaineredTaskManagerParameters create(_		Configuration config, long containerMemoryMB, int numSlots)_	{_		__		final float memoryCutoffRatio = config.getFloat(_			ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)___		final int minCutoff = config.getInteger(_			ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio >= 1 || memoryCutoffRatio <= 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key() + "' must be between 0 and 1. Value given="_				+ memoryCutoffRatio)__		}__		if (minCutoff >= containerMemoryMB) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key() + "'='" + minCutoff_				+ "' is larger than the total container memory " + containerMemoryMB)__		}__		long cutoff = (long) (containerMemoryMB * memoryCutoffRatio)__		if (cutoff < minCutoff) {_			cutoff = minCutoff__		}__		final long javaMemorySizeMB = containerMemoryMB - cutoff___		_		final long heapSizeMB = TaskManagerServices.calculateHeapSizeMB(javaMemorySizeMB, config)__		final long offHeapSize = javaMemorySizeMB == heapSizeMB ? -1L : javaMemorySizeMB - heapSizeMB_ __		_		final HashMap<String, String> envVars = new HashMap<>()__		final String prefix = ResourceManagerOptions.CONTAINERIZED_TASK_MANAGER_ENV_PREFIX__		_		for (String key : config.keySet()) {_			if (key.startsWith(prefix) && key.length() > prefix.length()) {_				_				String envVarKey = key.substring(prefix.length())__				envVars.put(envVarKey, config.getString(key, null))__			}_		}__		_		return new ContaineredTaskManagerParameters(_			containerMemoryMB, heapSizeMB, offHeapSize, numSlots, envVars)__	};computes,the,parameters,to,be,used,to,start,a,task,manager,java,process,param,config,the,flink,configuration,param,container,memory,mb,the,size,of,the,complete,container,in,megabytes,return,the,parameters,to,start,the,task,manager,processes,with;public,static,containered,task,manager,parameters,create,configuration,config,long,container,memory,mb,int,num,slots,final,float,memory,cutoff,ratio,config,get,float,resource,manager,options,final,int,min,cutoff,config,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,container,memory,mb,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,min,cutoff,is,larger,than,the,total,container,memory,container,memory,mb,long,cutoff,long,container,memory,mb,memory,cutoff,ratio,if,cutoff,min,cutoff,cutoff,min,cutoff,final,long,java,memory,size,mb,container,memory,mb,cutoff,final,long,heap,size,mb,task,manager,services,calculate,heap,size,mb,java,memory,size,mb,config,final,long,off,heap,size,java,memory,size,mb,heap,size,mb,1l,java,memory,size,mb,heap,size,mb,final,hash,map,string,string,env,vars,new,hash,map,final,string,prefix,resource,manager,options,for,string,key,config,key,set,if,key,starts,with,prefix,key,length,prefix,length,string,env,var,key,key,substring,prefix,length,env,vars,put,env,var,key,config,get,string,key,null,return,new,containered,task,manager,parameters,container,memory,mb,heap,size,mb,off,heap,size,num,slots,env,vars
ContaineredTaskManagerParameters -> public static ContaineredTaskManagerParameters create( 		Configuration config, long containerMemoryMB, int numSlots);1501586640;Computes the parameters to be used to start a TaskManager Java process.__@param config The Flink configuration._@param containerMemoryMB The size of the complete container, in megabytes._@return The parameters to start the TaskManager processes with.;public static ContaineredTaskManagerParameters create(_		Configuration config, long containerMemoryMB, int numSlots)_	{_		__		final float memoryCutoffRatio = config.getFloat(_			ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)___		final int minCutoff = config.getInteger(_			ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio >= 1 || memoryCutoffRatio <= 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key() + "' must be between 0 and 1. Value given="_				+ memoryCutoffRatio)__		}__		if (minCutoff >= containerMemoryMB) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key() + "'='" + minCutoff_				+ "' is larger than the total container memory " + containerMemoryMB)__		}__		long cutoff = (long) (containerMemoryMB * memoryCutoffRatio)__		if (cutoff < minCutoff) {_			cutoff = minCutoff__		}__		final long javaMemorySizeMB = containerMemoryMB - cutoff___		_		final long heapSizeMB = TaskManagerServices.calculateHeapSizeMB(javaMemorySizeMB, config)__		_		final long offHeapSizeMB = containerMemoryMB - heapSizeMB___		_		final HashMap<String, String> envVars = new HashMap<>()__		final String prefix = ResourceManagerOptions.CONTAINERIZED_TASK_MANAGER_ENV_PREFIX__		_		for (String key : config.keySet()) {_			if (key.startsWith(prefix) && key.length() > prefix.length()) {_				_				String envVarKey = key.substring(prefix.length())__				envVars.put(envVarKey, config.getString(key, null))__			}_		}__		_		return new ContaineredTaskManagerParameters(_			containerMemoryMB, heapSizeMB, offHeapSizeMB, numSlots, envVars)__	};computes,the,parameters,to,be,used,to,start,a,task,manager,java,process,param,config,the,flink,configuration,param,container,memory,mb,the,size,of,the,complete,container,in,megabytes,return,the,parameters,to,start,the,task,manager,processes,with;public,static,containered,task,manager,parameters,create,configuration,config,long,container,memory,mb,int,num,slots,final,float,memory,cutoff,ratio,config,get,float,resource,manager,options,final,int,min,cutoff,config,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,container,memory,mb,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,min,cutoff,is,larger,than,the,total,container,memory,container,memory,mb,long,cutoff,long,container,memory,mb,memory,cutoff,ratio,if,cutoff,min,cutoff,cutoff,min,cutoff,final,long,java,memory,size,mb,container,memory,mb,cutoff,final,long,heap,size,mb,task,manager,services,calculate,heap,size,mb,java,memory,size,mb,config,final,long,off,heap,size,mb,container,memory,mb,heap,size,mb,final,hash,map,string,string,env,vars,new,hash,map,final,string,prefix,resource,manager,options,for,string,key,config,key,set,if,key,starts,with,prefix,key,length,prefix,length,string,env,var,key,key,substring,prefix,length,env,vars,put,env,var,key,config,get,string,key,null,return,new,containered,task,manager,parameters,container,memory,mb,heap,size,mb,off,heap,size,mb,num,slots,env,vars
ContaineredTaskManagerParameters -> public static ContaineredTaskManagerParameters create( 		Configuration config, long containerMemoryMB, int numSlots);1502272383;Computes the parameters to be used to start a TaskManager Java process.__@param config The Flink configuration._@param containerMemoryMB The size of the complete container, in megabytes._@return The parameters to start the TaskManager processes with.;public static ContaineredTaskManagerParameters create(_		Configuration config, long containerMemoryMB, int numSlots)_	{_		__		final float memoryCutoffRatio = config.getFloat(_			ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)___		final int minCutoff = config.getInteger(_			ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio >= 1 || memoryCutoffRatio <= 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key() + "' must be between 0 and 1. Value given="_				+ memoryCutoffRatio)__		}__		if (minCutoff >= containerMemoryMB) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key() + "'='" + minCutoff_				+ "' is larger than the total container memory " + containerMemoryMB)__		}__		long cutoff = (long) (containerMemoryMB * memoryCutoffRatio)__		if (cutoff < minCutoff) {_			cutoff = minCutoff__		}__		final long javaMemorySizeMB = containerMemoryMB - cutoff___		_		final long heapSizeMB = TaskManagerServices.calculateHeapSizeMB(javaMemorySizeMB, config)__		_		final long offHeapSize = javaMemorySizeMB == heapSizeMB ? -1L : containerMemoryMB - heapSizeMB___		_		final HashMap<String, String> envVars = new HashMap<>()__		final String prefix = ResourceManagerOptions.CONTAINERIZED_TASK_MANAGER_ENV_PREFIX__		_		for (String key : config.keySet()) {_			if (key.startsWith(prefix) && key.length() > prefix.length()) {_				_				String envVarKey = key.substring(prefix.length())__				envVars.put(envVarKey, config.getString(key, null))__			}_		}__		_		return new ContaineredTaskManagerParameters(_			containerMemoryMB, heapSizeMB, offHeapSize, numSlots, envVars)__	};computes,the,parameters,to,be,used,to,start,a,task,manager,java,process,param,config,the,flink,configuration,param,container,memory,mb,the,size,of,the,complete,container,in,megabytes,return,the,parameters,to,start,the,task,manager,processes,with;public,static,containered,task,manager,parameters,create,configuration,config,long,container,memory,mb,int,num,slots,final,float,memory,cutoff,ratio,config,get,float,resource,manager,options,final,int,min,cutoff,config,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,container,memory,mb,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,min,cutoff,is,larger,than,the,total,container,memory,container,memory,mb,long,cutoff,long,container,memory,mb,memory,cutoff,ratio,if,cutoff,min,cutoff,cutoff,min,cutoff,final,long,java,memory,size,mb,container,memory,mb,cutoff,final,long,heap,size,mb,task,manager,services,calculate,heap,size,mb,java,memory,size,mb,config,final,long,off,heap,size,java,memory,size,mb,heap,size,mb,1l,container,memory,mb,heap,size,mb,final,hash,map,string,string,env,vars,new,hash,map,final,string,prefix,resource,manager,options,for,string,key,config,key,set,if,key,starts,with,prefix,key,length,prefix,length,string,env,var,key,key,substring,prefix,length,env,vars,put,env,var,key,config,get,string,key,null,return,new,containered,task,manager,parameters,container,memory,mb,heap,size,mb,off,heap,size,num,slots,env,vars
ContaineredTaskManagerParameters -> public static ContaineredTaskManagerParameters create( 		Configuration config, long containerMemoryMB, int numSlots);1521532773;Computes the parameters to be used to start a TaskManager Java process.__@param config The Flink configuration._@param containerMemoryMB The size of the complete container, in megabytes._@return The parameters to start the TaskManager processes with.;public static ContaineredTaskManagerParameters create(_		Configuration config, long containerMemoryMB, int numSlots)_	{_		_		final long cutoffMB = calculateCutoffMB(config, containerMemoryMB)___		_		final long heapSizeMB = TaskManagerServices.calculateHeapSizeMB(containerMemoryMB - cutoffMB, config)__		_		final long offHeapSizeMB = containerMemoryMB - heapSizeMB___		_		final HashMap<String, String> envVars = new HashMap<>()__		final String prefix = ResourceManagerOptions.CONTAINERIZED_TASK_MANAGER_ENV_PREFIX__		_		for (String key : config.keySet()) {_			if (key.startsWith(prefix) && key.length() > prefix.length()) {_				_				String envVarKey = key.substring(prefix.length())__				envVars.put(envVarKey, config.getString(key, null))__			}_		}__		_		return new ContaineredTaskManagerParameters(_			containerMemoryMB, heapSizeMB, offHeapSizeMB, numSlots, envVars)__	};computes,the,parameters,to,be,used,to,start,a,task,manager,java,process,param,config,the,flink,configuration,param,container,memory,mb,the,size,of,the,complete,container,in,megabytes,return,the,parameters,to,start,the,task,manager,processes,with;public,static,containered,task,manager,parameters,create,configuration,config,long,container,memory,mb,int,num,slots,final,long,cutoff,mb,calculate,cutoff,mb,config,container,memory,mb,final,long,heap,size,mb,task,manager,services,calculate,heap,size,mb,container,memory,mb,cutoff,mb,config,final,long,off,heap,size,mb,container,memory,mb,heap,size,mb,final,hash,map,string,string,env,vars,new,hash,map,final,string,prefix,resource,manager,options,for,string,key,config,key,set,if,key,starts,with,prefix,key,length,prefix,length,string,env,var,key,key,substring,prefix,length,env,vars,put,env,var,key,config,get,string,key,null,return,new,containered,task,manager,parameters,container,memory,mb,heap,size,mb,off,heap,size,mb,num,slots,env,vars
