# id;timestamp;commentText;codeText;commentWords;codeWords
BufferPoolFactoryTest -> @Test 	public void testRequireMoreThanPossible1() throws IOException;1509981552;Tests creating one buffer pool which requires more buffers than available.;@Test_	public void testRequireMoreThanPossible1() throws IOException {_		expectedException.expect(IOException.class)__		expectedException.expectMessage("Insufficient number of network buffers")___		networkBufferPool.createBufferPool(networkBufferPool.getTotalNumberOfMemorySegments() + 1,_			Integer.MAX_VALUE)__	};tests,creating,one,buffer,pool,which,requires,more,buffers,than,available;test,public,void,test,require,more,than,possible1,throws,ioexception,expected,exception,expect,ioexception,class,expected,exception,expect,message,insufficient,number,of,network,buffers,network,buffer,pool,create,buffer,pool,network,buffer,pool,get,total,number,of,memory,segments,1,integer
BufferPoolFactoryTest -> @Test 	public void testRequireMoreThanPossible1() throws IOException;1511516912;Tests creating one buffer pool which requires more buffers than available.;@Test_	public void testRequireMoreThanPossible1() throws IOException {_		expectedException.expect(IOException.class)__		expectedException.expectMessage("Insufficient number of network buffers")___		networkBufferPool.createBufferPool(networkBufferPool.getTotalNumberOfMemorySegments() + 1,_			Integer.MAX_VALUE)__	};tests,creating,one,buffer,pool,which,requires,more,buffers,than,available;test,public,void,test,require,more,than,possible1,throws,ioexception,expected,exception,expect,ioexception,class,expected,exception,expect,message,insufficient,number,of,network,buffers,network,buffer,pool,create,buffer,pool,network,buffer,pool,get,total,number,of,memory,segments,1,integer
BufferPoolFactoryTest -> @Test 	public void testRequireMoreThanPossible1() throws IOException;1516285878;Tests creating one buffer pool which requires more buffers than available.;@Test_	public void testRequireMoreThanPossible1() throws IOException {_		expectedException.expect(IOException.class)__		expectedException.expectMessage("Insufficient number of network buffers")___		networkBufferPool.createBufferPool(networkBufferPool.getTotalNumberOfMemorySegments() + 1,_			Integer.MAX_VALUE)__	};tests,creating,one,buffer,pool,which,requires,more,buffers,than,available;test,public,void,test,require,more,than,possible1,throws,ioexception,expected,exception,expect,ioexception,class,expected,exception,expect,message,insufficient,number,of,network,buffers,network,buffer,pool,create,buffer,pool,network,buffer,pool,get,total,number,of,memory,segments,1,integer
BufferPoolFactoryTest -> @Test 	public void testUniformDistributionAllBuffers() throws IOException;1489149058;Tests that buffers, once given to an initial buffer pool, get re-distributed to a second one_in case both buffer pools request half of the available buffer count.;@Test_	public void testUniformDistributionAllBuffers() throws IOException {_		BufferPool first = networkBufferPool_			.createBufferPool(networkBufferPool.getTotalNumberOfMemorySegments() / 2, Integer.MAX_VALUE)__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments(), first.getNumBuffers())___		BufferPool second = networkBufferPool_			.createBufferPool(networkBufferPool.getTotalNumberOfMemorySegments() / 2, Integer.MAX_VALUE)__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments() / 2, first.getNumBuffers())__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments() / 2,_			second.getNumBuffers())__	};tests,that,buffers,once,given,to,an,initial,buffer,pool,get,re,distributed,to,a,second,one,in,case,both,buffer,pools,request,half,of,the,available,buffer,count;test,public,void,test,uniform,distribution,all,buffers,throws,ioexception,buffer,pool,first,network,buffer,pool,create,buffer,pool,network,buffer,pool,get,total,number,of,memory,segments,2,integer,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,first,get,num,buffers,buffer,pool,second,network,buffer,pool,create,buffer,pool,network,buffer,pool,get,total,number,of,memory,segments,2,integer,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,2,first,get,num,buffers,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,2,second,get,num,buffers
BufferPoolFactoryTest -> @Test 	public void testUniformDistributionAllBuffers() throws IOException;1507647199;Tests that buffers, once given to an initial buffer pool, get re-distributed to a second one_in case both buffer pools request half of the available buffer count.;@Test_	public void testUniformDistributionAllBuffers() throws IOException {_		BufferPool first = networkBufferPool_			.createBufferPool(networkBufferPool.getTotalNumberOfMemorySegments() / 2, Integer.MAX_VALUE)__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments(), first.getNumBuffers())___		BufferPool second = networkBufferPool_			.createBufferPool(networkBufferPool.getTotalNumberOfMemorySegments() / 2, Integer.MAX_VALUE)__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments() / 2, first.getNumBuffers())__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments() / 2,_			second.getNumBuffers())__	};tests,that,buffers,once,given,to,an,initial,buffer,pool,get,re,distributed,to,a,second,one,in,case,both,buffer,pools,request,half,of,the,available,buffer,count;test,public,void,test,uniform,distribution,all,buffers,throws,ioexception,buffer,pool,first,network,buffer,pool,create,buffer,pool,network,buffer,pool,get,total,number,of,memory,segments,2,integer,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,first,get,num,buffers,buffer,pool,second,network,buffer,pool,create,buffer,pool,network,buffer,pool,get,total,number,of,memory,segments,2,integer,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,2,first,get,num,buffers,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,2,second,get,num,buffers
BufferPoolFactoryTest -> @Test 	public void testUniformDistributionAllBuffers() throws IOException;1509981552;Tests that buffers, once given to an initial buffer pool, get re-distributed to a second one_in case both buffer pools request half of the available buffer count.;@Test_	public void testUniformDistributionAllBuffers() throws IOException {_		BufferPool first = networkBufferPool_			.createBufferPool(networkBufferPool.getTotalNumberOfMemorySegments() / 2, Integer.MAX_VALUE)__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments(), first.getNumBuffers())___		BufferPool second = networkBufferPool_			.createBufferPool(networkBufferPool.getTotalNumberOfMemorySegments() / 2, Integer.MAX_VALUE)__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments() / 2, first.getNumBuffers())__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments() / 2,_			second.getNumBuffers())__	};tests,that,buffers,once,given,to,an,initial,buffer,pool,get,re,distributed,to,a,second,one,in,case,both,buffer,pools,request,half,of,the,available,buffer,count;test,public,void,test,uniform,distribution,all,buffers,throws,ioexception,buffer,pool,first,network,buffer,pool,create,buffer,pool,network,buffer,pool,get,total,number,of,memory,segments,2,integer,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,first,get,num,buffers,buffer,pool,second,network,buffer,pool,create,buffer,pool,network,buffer,pool,get,total,number,of,memory,segments,2,integer,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,2,first,get,num,buffers,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,2,second,get,num,buffers
BufferPoolFactoryTest -> @Test 	public void testUniformDistributionAllBuffers() throws IOException;1511516912;Tests that buffers, once given to an initial buffer pool, get re-distributed to a second one_in case both buffer pools request half of the available buffer count.;@Test_	public void testUniformDistributionAllBuffers() throws IOException {_		BufferPool first = networkBufferPool_			.createBufferPool(networkBufferPool.getTotalNumberOfMemorySegments() / 2, Integer.MAX_VALUE)__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments(), first.getNumBuffers())___		BufferPool second = networkBufferPool_			.createBufferPool(networkBufferPool.getTotalNumberOfMemorySegments() / 2, Integer.MAX_VALUE)__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments() / 2, first.getNumBuffers())__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments() / 2,_			second.getNumBuffers())__	};tests,that,buffers,once,given,to,an,initial,buffer,pool,get,re,distributed,to,a,second,one,in,case,both,buffer,pools,request,half,of,the,available,buffer,count;test,public,void,test,uniform,distribution,all,buffers,throws,ioexception,buffer,pool,first,network,buffer,pool,create,buffer,pool,network,buffer,pool,get,total,number,of,memory,segments,2,integer,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,first,get,num,buffers,buffer,pool,second,network,buffer,pool,create,buffer,pool,network,buffer,pool,get,total,number,of,memory,segments,2,integer,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,2,first,get,num,buffers,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,2,second,get,num,buffers
BufferPoolFactoryTest -> @Test 	public void testUniformDistributionAllBuffers() throws IOException;1516285878;Tests that buffers, once given to an initial buffer pool, get re-distributed to a second one_in case both buffer pools request half of the available buffer count.;@Test_	public void testUniformDistributionAllBuffers() throws IOException {_		BufferPool first = networkBufferPool_			.createBufferPool(networkBufferPool.getTotalNumberOfMemorySegments() / 2, Integer.MAX_VALUE)__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments(), first.getNumBuffers())___		BufferPool second = networkBufferPool_			.createBufferPool(networkBufferPool.getTotalNumberOfMemorySegments() / 2, Integer.MAX_VALUE)__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments() / 2, first.getNumBuffers())__		assertEquals(networkBufferPool.getTotalNumberOfMemorySegments() / 2,_			second.getNumBuffers())__	};tests,that,buffers,once,given,to,an,initial,buffer,pool,get,re,distributed,to,a,second,one,in,case,both,buffer,pools,request,half,of,the,available,buffer,count;test,public,void,test,uniform,distribution,all,buffers,throws,ioexception,buffer,pool,first,network,buffer,pool,create,buffer,pool,network,buffer,pool,get,total,number,of,memory,segments,2,integer,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,first,get,num,buffers,buffer,pool,second,network,buffer,pool,create,buffer,pool,network,buffer,pool,get,total,number,of,memory,segments,2,integer,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,2,first,get,num,buffers,assert,equals,network,buffer,pool,get,total,number,of,memory,segments,2,second,get,num,buffers
BufferPoolFactoryTest -> @Test 	public void testUniformDistributionBounded4() throws IOException;1507647199;Tests the interaction of requesting memory segments and creating local buffer pool and_verifies the number of assigned buffers match after redistributing buffers because of newly_requested memory segments or new buffer pools created.;@Test_	public void testUniformDistributionBounded4() throws IOException {_		NetworkBufferPool globalPool = new NetworkBufferPool(10, 128, MemoryType.HEAP)__		try {_			BufferPool first = globalPool.createBufferPool(0, 10)__			assertEquals(10, first.getNumBuffers())___			List<MemorySegment> segmentList1 = globalPool.requestMemorySegments(2)__			assertEquals(2, segmentList1.size())__			assertEquals(8, first.getNumBuffers())___			BufferPool second = globalPool.createBufferPool(0, 10)__			assertEquals(4, first.getNumBuffers())__			assertEquals(4, second.getNumBuffers())___			List<MemorySegment> segmentList2 = globalPool.requestMemorySegments(2)__			assertEquals(2, segmentList2.size())__			assertEquals(3, first.getNumBuffers())__			assertEquals(3, second.getNumBuffers())___			List<MemorySegment> segmentList3 = globalPool.requestMemorySegments(2)__			assertEquals(2, segmentList3.size())__			assertEquals(2, first.getNumBuffers())__			assertEquals(2, second.getNumBuffers())___			String msg = "Wrong number of available segments after creating buffer pools and requesting segments."__			assertEquals(msg, 4, globalPool.getNumberOfAvailableMemorySegments())___			globalPool.recycleMemorySegments(segmentList1)__			assertEquals(msg, 6, globalPool.getNumberOfAvailableMemorySegments())__			assertEquals(3, first.getNumBuffers())__			assertEquals(3, second.getNumBuffers())___			globalPool.recycleMemorySegments(segmentList2)__			assertEquals(msg, 8, globalPool.getNumberOfAvailableMemorySegments())__			assertEquals(4, first.getNumBuffers())__			assertEquals(4, second.getNumBuffers())___			globalPool.recycleMemorySegments(segmentList3)__			assertEquals(msg, 10, globalPool.getNumberOfAvailableMemorySegments())__			assertEquals(5, first.getNumBuffers())__			assertEquals(5, second.getNumBuffers())__		} finally {_			globalPool.destroyAllBufferPools()__			globalPool.destroy()__		}_	};tests,the,interaction,of,requesting,memory,segments,and,creating,local,buffer,pool,and,verifies,the,number,of,assigned,buffers,match,after,redistributing,buffers,because,of,newly,requested,memory,segments,or,new,buffer,pools,created;test,public,void,test,uniform,distribution,bounded4,throws,ioexception,network,buffer,pool,global,pool,new,network,buffer,pool,10,128,memory,type,heap,try,buffer,pool,first,global,pool,create,buffer,pool,0,10,assert,equals,10,first,get,num,buffers,list,memory,segment,segment,list1,global,pool,request,memory,segments,2,assert,equals,2,segment,list1,size,assert,equals,8,first,get,num,buffers,buffer,pool,second,global,pool,create,buffer,pool,0,10,assert,equals,4,first,get,num,buffers,assert,equals,4,second,get,num,buffers,list,memory,segment,segment,list2,global,pool,request,memory,segments,2,assert,equals,2,segment,list2,size,assert,equals,3,first,get,num,buffers,assert,equals,3,second,get,num,buffers,list,memory,segment,segment,list3,global,pool,request,memory,segments,2,assert,equals,2,segment,list3,size,assert,equals,2,first,get,num,buffers,assert,equals,2,second,get,num,buffers,string,msg,wrong,number,of,available,segments,after,creating,buffer,pools,and,requesting,segments,assert,equals,msg,4,global,pool,get,number,of,available,memory,segments,global,pool,recycle,memory,segments,segment,list1,assert,equals,msg,6,global,pool,get,number,of,available,memory,segments,assert,equals,3,first,get,num,buffers,assert,equals,3,second,get,num,buffers,global,pool,recycle,memory,segments,segment,list2,assert,equals,msg,8,global,pool,get,number,of,available,memory,segments,assert,equals,4,first,get,num,buffers,assert,equals,4,second,get,num,buffers,global,pool,recycle,memory,segments,segment,list3,assert,equals,msg,10,global,pool,get,number,of,available,memory,segments,assert,equals,5,first,get,num,buffers,assert,equals,5,second,get,num,buffers,finally,global,pool,destroy,all,buffer,pools,global,pool,destroy
BufferPoolFactoryTest -> @Test 	public void testUniformDistributionBounded4() throws IOException;1509981552;Tests the interaction of requesting memory segments and creating local buffer pool and_verifies the number of assigned buffers match after redistributing buffers because of newly_requested memory segments or new buffer pools created.;@Test_	public void testUniformDistributionBounded4() throws IOException {_		NetworkBufferPool globalPool = new NetworkBufferPool(10, 128, MemoryType.HEAP)__		try {_			BufferPool first = globalPool.createBufferPool(0, 10)__			assertEquals(10, first.getNumBuffers())___			List<MemorySegment> segmentList1 = globalPool.requestMemorySegments(2)__			assertEquals(2, segmentList1.size())__			assertEquals(8, first.getNumBuffers())___			BufferPool second = globalPool.createBufferPool(0, 10)__			assertEquals(4, first.getNumBuffers())__			assertEquals(4, second.getNumBuffers())___			List<MemorySegment> segmentList2 = globalPool.requestMemorySegments(2)__			assertEquals(2, segmentList2.size())__			assertEquals(3, first.getNumBuffers())__			assertEquals(3, second.getNumBuffers())___			List<MemorySegment> segmentList3 = globalPool.requestMemorySegments(2)__			assertEquals(2, segmentList3.size())__			assertEquals(2, first.getNumBuffers())__			assertEquals(2, second.getNumBuffers())___			String msg = "Wrong number of available segments after creating buffer pools and requesting segments."__			assertEquals(msg, 4, globalPool.getNumberOfAvailableMemorySegments())___			globalPool.recycleMemorySegments(segmentList1)__			assertEquals(msg, 6, globalPool.getNumberOfAvailableMemorySegments())__			assertEquals(3, first.getNumBuffers())__			assertEquals(3, second.getNumBuffers())___			globalPool.recycleMemorySegments(segmentList2)__			assertEquals(msg, 8, globalPool.getNumberOfAvailableMemorySegments())__			assertEquals(4, first.getNumBuffers())__			assertEquals(4, second.getNumBuffers())___			globalPool.recycleMemorySegments(segmentList3)__			assertEquals(msg, 10, globalPool.getNumberOfAvailableMemorySegments())__			assertEquals(5, first.getNumBuffers())__			assertEquals(5, second.getNumBuffers())__		} finally {_			globalPool.destroyAllBufferPools()__			globalPool.destroy()__		}_	};tests,the,interaction,of,requesting,memory,segments,and,creating,local,buffer,pool,and,verifies,the,number,of,assigned,buffers,match,after,redistributing,buffers,because,of,newly,requested,memory,segments,or,new,buffer,pools,created;test,public,void,test,uniform,distribution,bounded4,throws,ioexception,network,buffer,pool,global,pool,new,network,buffer,pool,10,128,memory,type,heap,try,buffer,pool,first,global,pool,create,buffer,pool,0,10,assert,equals,10,first,get,num,buffers,list,memory,segment,segment,list1,global,pool,request,memory,segments,2,assert,equals,2,segment,list1,size,assert,equals,8,first,get,num,buffers,buffer,pool,second,global,pool,create,buffer,pool,0,10,assert,equals,4,first,get,num,buffers,assert,equals,4,second,get,num,buffers,list,memory,segment,segment,list2,global,pool,request,memory,segments,2,assert,equals,2,segment,list2,size,assert,equals,3,first,get,num,buffers,assert,equals,3,second,get,num,buffers,list,memory,segment,segment,list3,global,pool,request,memory,segments,2,assert,equals,2,segment,list3,size,assert,equals,2,first,get,num,buffers,assert,equals,2,second,get,num,buffers,string,msg,wrong,number,of,available,segments,after,creating,buffer,pools,and,requesting,segments,assert,equals,msg,4,global,pool,get,number,of,available,memory,segments,global,pool,recycle,memory,segments,segment,list1,assert,equals,msg,6,global,pool,get,number,of,available,memory,segments,assert,equals,3,first,get,num,buffers,assert,equals,3,second,get,num,buffers,global,pool,recycle,memory,segments,segment,list2,assert,equals,msg,8,global,pool,get,number,of,available,memory,segments,assert,equals,4,first,get,num,buffers,assert,equals,4,second,get,num,buffers,global,pool,recycle,memory,segments,segment,list3,assert,equals,msg,10,global,pool,get,number,of,available,memory,segments,assert,equals,5,first,get,num,buffers,assert,equals,5,second,get,num,buffers,finally,global,pool,destroy,all,buffer,pools,global,pool,destroy
BufferPoolFactoryTest -> @Test 	public void testUniformDistributionBounded4() throws IOException;1511516912;Tests the interaction of requesting memory segments and creating local buffer pool and_verifies the number of assigned buffers match after redistributing buffers because of newly_requested memory segments or new buffer pools created.;@Test_	public void testUniformDistributionBounded4() throws IOException {_		NetworkBufferPool globalPool = new NetworkBufferPool(10, 128)__		try {_			BufferPool first = globalPool.createBufferPool(0, 10)__			assertEquals(10, first.getNumBuffers())___			List<MemorySegment> segmentList1 = globalPool.requestMemorySegments(2)__			assertEquals(2, segmentList1.size())__			assertEquals(8, first.getNumBuffers())___			BufferPool second = globalPool.createBufferPool(0, 10)__			assertEquals(4, first.getNumBuffers())__			assertEquals(4, second.getNumBuffers())___			List<MemorySegment> segmentList2 = globalPool.requestMemorySegments(2)__			assertEquals(2, segmentList2.size())__			assertEquals(3, first.getNumBuffers())__			assertEquals(3, second.getNumBuffers())___			List<MemorySegment> segmentList3 = globalPool.requestMemorySegments(2)__			assertEquals(2, segmentList3.size())__			assertEquals(2, first.getNumBuffers())__			assertEquals(2, second.getNumBuffers())___			String msg = "Wrong number of available segments after creating buffer pools and requesting segments."__			assertEquals(msg, 4, globalPool.getNumberOfAvailableMemorySegments())___			globalPool.recycleMemorySegments(segmentList1)__			assertEquals(msg, 6, globalPool.getNumberOfAvailableMemorySegments())__			assertEquals(3, first.getNumBuffers())__			assertEquals(3, second.getNumBuffers())___			globalPool.recycleMemorySegments(segmentList2)__			assertEquals(msg, 8, globalPool.getNumberOfAvailableMemorySegments())__			assertEquals(4, first.getNumBuffers())__			assertEquals(4, second.getNumBuffers())___			globalPool.recycleMemorySegments(segmentList3)__			assertEquals(msg, 10, globalPool.getNumberOfAvailableMemorySegments())__			assertEquals(5, first.getNumBuffers())__			assertEquals(5, second.getNumBuffers())__		} finally {_			globalPool.destroyAllBufferPools()__			globalPool.destroy()__		}_	};tests,the,interaction,of,requesting,memory,segments,and,creating,local,buffer,pool,and,verifies,the,number,of,assigned,buffers,match,after,redistributing,buffers,because,of,newly,requested,memory,segments,or,new,buffer,pools,created;test,public,void,test,uniform,distribution,bounded4,throws,ioexception,network,buffer,pool,global,pool,new,network,buffer,pool,10,128,try,buffer,pool,first,global,pool,create,buffer,pool,0,10,assert,equals,10,first,get,num,buffers,list,memory,segment,segment,list1,global,pool,request,memory,segments,2,assert,equals,2,segment,list1,size,assert,equals,8,first,get,num,buffers,buffer,pool,second,global,pool,create,buffer,pool,0,10,assert,equals,4,first,get,num,buffers,assert,equals,4,second,get,num,buffers,list,memory,segment,segment,list2,global,pool,request,memory,segments,2,assert,equals,2,segment,list2,size,assert,equals,3,first,get,num,buffers,assert,equals,3,second,get,num,buffers,list,memory,segment,segment,list3,global,pool,request,memory,segments,2,assert,equals,2,segment,list3,size,assert,equals,2,first,get,num,buffers,assert,equals,2,second,get,num,buffers,string,msg,wrong,number,of,available,segments,after,creating,buffer,pools,and,requesting,segments,assert,equals,msg,4,global,pool,get,number,of,available,memory,segments,global,pool,recycle,memory,segments,segment,list1,assert,equals,msg,6,global,pool,get,number,of,available,memory,segments,assert,equals,3,first,get,num,buffers,assert,equals,3,second,get,num,buffers,global,pool,recycle,memory,segments,segment,list2,assert,equals,msg,8,global,pool,get,number,of,available,memory,segments,assert,equals,4,first,get,num,buffers,assert,equals,4,second,get,num,buffers,global,pool,recycle,memory,segments,segment,list3,assert,equals,msg,10,global,pool,get,number,of,available,memory,segments,assert,equals,5,first,get,num,buffers,assert,equals,5,second,get,num,buffers,finally,global,pool,destroy,all,buffer,pools,global,pool,destroy
BufferPoolFactoryTest -> @Test 	public void testUniformDistributionBounded4() throws IOException;1516285878;Tests the interaction of requesting memory segments and creating local buffer pool and_verifies the number of assigned buffers match after redistributing buffers because of newly_requested memory segments or new buffer pools created.;@Test_	public void testUniformDistributionBounded4() throws IOException {_		NetworkBufferPool globalPool = new NetworkBufferPool(10, 128)__		try {_			BufferPool first = globalPool.createBufferPool(0, 10)__			assertEquals(10, first.getNumBuffers())___			List<MemorySegment> segmentList1 = globalPool.requestMemorySegments(2)__			assertEquals(2, segmentList1.size())__			assertEquals(8, first.getNumBuffers())___			BufferPool second = globalPool.createBufferPool(0, 10)__			assertEquals(4, first.getNumBuffers())__			assertEquals(4, second.getNumBuffers())___			List<MemorySegment> segmentList2 = globalPool.requestMemorySegments(2)__			assertEquals(2, segmentList2.size())__			assertEquals(3, first.getNumBuffers())__			assertEquals(3, second.getNumBuffers())___			List<MemorySegment> segmentList3 = globalPool.requestMemorySegments(2)__			assertEquals(2, segmentList3.size())__			assertEquals(2, first.getNumBuffers())__			assertEquals(2, second.getNumBuffers())___			String msg = "Wrong number of available segments after creating buffer pools and requesting segments."__			assertEquals(msg, 4, globalPool.getNumberOfAvailableMemorySegments())___			globalPool.recycleMemorySegments(segmentList1)__			assertEquals(msg, 6, globalPool.getNumberOfAvailableMemorySegments())__			assertEquals(3, first.getNumBuffers())__			assertEquals(3, second.getNumBuffers())___			globalPool.recycleMemorySegments(segmentList2)__			assertEquals(msg, 8, globalPool.getNumberOfAvailableMemorySegments())__			assertEquals(4, first.getNumBuffers())__			assertEquals(4, second.getNumBuffers())___			globalPool.recycleMemorySegments(segmentList3)__			assertEquals(msg, 10, globalPool.getNumberOfAvailableMemorySegments())__			assertEquals(5, first.getNumBuffers())__			assertEquals(5, second.getNumBuffers())__		} finally {_			globalPool.destroyAllBufferPools()__			globalPool.destroy()__		}_	};tests,the,interaction,of,requesting,memory,segments,and,creating,local,buffer,pool,and,verifies,the,number,of,assigned,buffers,match,after,redistributing,buffers,because,of,newly,requested,memory,segments,or,new,buffer,pools,created;test,public,void,test,uniform,distribution,bounded4,throws,ioexception,network,buffer,pool,global,pool,new,network,buffer,pool,10,128,try,buffer,pool,first,global,pool,create,buffer,pool,0,10,assert,equals,10,first,get,num,buffers,list,memory,segment,segment,list1,global,pool,request,memory,segments,2,assert,equals,2,segment,list1,size,assert,equals,8,first,get,num,buffers,buffer,pool,second,global,pool,create,buffer,pool,0,10,assert,equals,4,first,get,num,buffers,assert,equals,4,second,get,num,buffers,list,memory,segment,segment,list2,global,pool,request,memory,segments,2,assert,equals,2,segment,list2,size,assert,equals,3,first,get,num,buffers,assert,equals,3,second,get,num,buffers,list,memory,segment,segment,list3,global,pool,request,memory,segments,2,assert,equals,2,segment,list3,size,assert,equals,2,first,get,num,buffers,assert,equals,2,second,get,num,buffers,string,msg,wrong,number,of,available,segments,after,creating,buffer,pools,and,requesting,segments,assert,equals,msg,4,global,pool,get,number,of,available,memory,segments,global,pool,recycle,memory,segments,segment,list1,assert,equals,msg,6,global,pool,get,number,of,available,memory,segments,assert,equals,3,first,get,num,buffers,assert,equals,3,second,get,num,buffers,global,pool,recycle,memory,segments,segment,list2,assert,equals,msg,8,global,pool,get,number,of,available,memory,segments,assert,equals,4,first,get,num,buffers,assert,equals,4,second,get,num,buffers,global,pool,recycle,memory,segments,segment,list3,assert,equals,msg,10,global,pool,get,number,of,available,memory,segments,assert,equals,5,first,get,num,buffers,assert,equals,5,second,get,num,buffers,finally,global,pool,destroy,all,buffer,pools,global,pool,destroy
BufferPoolFactoryTest -> @Test 	public void testRequireMoreThanPossible2() throws IOException;1509981552;Tests creating two buffer pools which together require more buffers than available.;@Test_	public void testRequireMoreThanPossible2() throws IOException {_		expectedException.expect(IOException.class)__		expectedException.expectMessage("Insufficient number of network buffers")___		networkBufferPool.createBufferPool(numBuffers / 2 + 1, numBuffers)__		networkBufferPool.createBufferPool(numBuffers / 2 + 1, numBuffers)__	};tests,creating,two,buffer,pools,which,together,require,more,buffers,than,available;test,public,void,test,require,more,than,possible2,throws,ioexception,expected,exception,expect,ioexception,class,expected,exception,expect,message,insufficient,number,of,network,buffers,network,buffer,pool,create,buffer,pool,num,buffers,2,1,num,buffers,network,buffer,pool,create,buffer,pool,num,buffers,2,1,num,buffers
BufferPoolFactoryTest -> @Test 	public void testRequireMoreThanPossible2() throws IOException;1511516912;Tests creating two buffer pools which together require more buffers than available.;@Test_	public void testRequireMoreThanPossible2() throws IOException {_		expectedException.expect(IOException.class)__		expectedException.expectMessage("Insufficient number of network buffers")___		networkBufferPool.createBufferPool(numBuffers / 2 + 1, numBuffers)__		networkBufferPool.createBufferPool(numBuffers / 2 + 1, numBuffers)__	};tests,creating,two,buffer,pools,which,together,require,more,buffers,than,available;test,public,void,test,require,more,than,possible2,throws,ioexception,expected,exception,expect,ioexception,class,expected,exception,expect,message,insufficient,number,of,network,buffers,network,buffer,pool,create,buffer,pool,num,buffers,2,1,num,buffers,network,buffer,pool,create,buffer,pool,num,buffers,2,1,num,buffers
BufferPoolFactoryTest -> @Test 	public void testRequireMoreThanPossible2() throws IOException;1516285878;Tests creating two buffer pools which together require more buffers than available.;@Test_	public void testRequireMoreThanPossible2() throws IOException {_		expectedException.expect(IOException.class)__		expectedException.expectMessage("Insufficient number of network buffers")___		networkBufferPool.createBufferPool(numBuffers / 2 + 1, numBuffers)__		networkBufferPool.createBufferPool(numBuffers / 2 + 1, numBuffers)__	};tests,creating,two,buffer,pools,which,together,require,more,buffers,than,available;test,public,void,test,require,more,than,possible2,throws,ioexception,expected,exception,expect,ioexception,class,expected,exception,expect,message,insufficient,number,of,network,buffers,network,buffer,pool,create,buffer,pool,num,buffers,2,1,num,buffers,network,buffer,pool,create,buffer,pool,num,buffers,2,1,num,buffers
BufferPoolFactoryTest -> @Test 	public void testOverprovisioned() throws IOException;1509981552;Tests creating two buffer pools which together require as many buffers as available but where_there are less buffers available to the {@link NetworkBufferPool} at the time of the second_{@link LocalBufferPool} creation.;@Test_	public void testOverprovisioned() throws IOException {_		_		int buffersToTakeFromPool1 = numBuffers / 2 + 1__		_		int buffersToTakeFromPool2 = numBuffers - buffersToTakeFromPool1___		List<Buffer> buffers = new ArrayList<>(numBuffers)__		BufferPool bufferPool1 = null, bufferPool2 = null__		try {_			bufferPool1 = networkBufferPool.createBufferPool(buffersToTakeFromPool2, numBuffers)___			_			for (int i = 0_ i < buffersToTakeFromPool1_ ++i) {_				Buffer buffer = bufferPool1.requestBuffer()__				assertNotNull(buffer)__				buffers.add(buffer)__			}_			assertEquals(buffersToTakeFromPool1, bufferPool1.bestEffortGetNumOfUsedBuffers())__			assertEquals(numBuffers, bufferPool1.getNumBuffers())___			_			bufferPool2 = networkBufferPool.createBufferPool(buffersToTakeFromPool1, numBuffers)___			assertEquals(bufferPool2.getNumberOfRequiredMemorySegments(), bufferPool2.getNumBuffers())__			assertEquals(bufferPool1.getNumberOfRequiredMemorySegments(), bufferPool1.getNumBuffers())__			assertNull(bufferPool1.requestBuffer())___			_			for (int i = 0_ i < buffersToTakeFromPool2_ ++i) {_				Buffer buffer = bufferPool2.requestBuffer()__				assertNotNull(buffer)__				buffers.add(buffer)__			}_			assertEquals(buffersToTakeFromPool2, bufferPool2.bestEffortGetNumOfUsedBuffers())___			_			assertNull(bufferPool2.requestBuffer())___			_			buffers.remove(0).recycle()__			_			assertEquals(1, networkBufferPool.getNumberOfAvailableMemorySegments())__			_			assertEquals(buffersToTakeFromPool1 - 1,_				bufferPool1.bestEffortGetNumOfUsedBuffers() + bufferPool1.getNumberOfAvailableMemorySegments())__			assertEquals(buffersToTakeFromPool2,_				bufferPool2.bestEffortGetNumOfUsedBuffers() + bufferPool2.getNumberOfAvailableMemorySegments())___			Buffer buffer = bufferPool2.requestBuffer()__			assertNotNull(buffer)__			buffers.add(buffer)__			_			assertEquals(0, networkBufferPool.getNumberOfAvailableMemorySegments())__			assertEquals(buffersToTakeFromPool1 - 1,_				bufferPool1.bestEffortGetNumOfUsedBuffers() + bufferPool1.getNumberOfAvailableMemorySegments())__			assertEquals(buffersToTakeFromPool2 + 1,_				bufferPool2.bestEffortGetNumOfUsedBuffers() + bufferPool2.getNumberOfAvailableMemorySegments())__		} finally {_			for (Buffer buffer : buffers) {_				buffer.recycle()__			}_			if (bufferPool1 != null) {_				bufferPool1.lazyDestroy()__			}_			if (bufferPool2 != null) {_				bufferPool2.lazyDestroy()__			}_		}_	};tests,creating,two,buffer,pools,which,together,require,as,many,buffers,as,available,but,where,there,are,less,buffers,available,to,the,link,network,buffer,pool,at,the,time,of,the,second,link,local,buffer,pool,creation;test,public,void,test,overprovisioned,throws,ioexception,int,buffers,to,take,from,pool1,num,buffers,2,1,int,buffers,to,take,from,pool2,num,buffers,buffers,to,take,from,pool1,list,buffer,buffers,new,array,list,num,buffers,buffer,pool,buffer,pool1,null,buffer,pool2,null,try,buffer,pool1,network,buffer,pool,create,buffer,pool,buffers,to,take,from,pool2,num,buffers,for,int,i,0,i,buffers,to,take,from,pool1,i,buffer,buffer,buffer,pool1,request,buffer,assert,not,null,buffer,buffers,add,buffer,assert,equals,buffers,to,take,from,pool1,buffer,pool1,best,effort,get,num,of,used,buffers,assert,equals,num,buffers,buffer,pool1,get,num,buffers,buffer,pool2,network,buffer,pool,create,buffer,pool,buffers,to,take,from,pool1,num,buffers,assert,equals,buffer,pool2,get,number,of,required,memory,segments,buffer,pool2,get,num,buffers,assert,equals,buffer,pool1,get,number,of,required,memory,segments,buffer,pool1,get,num,buffers,assert,null,buffer,pool1,request,buffer,for,int,i,0,i,buffers,to,take,from,pool2,i,buffer,buffer,buffer,pool2,request,buffer,assert,not,null,buffer,buffers,add,buffer,assert,equals,buffers,to,take,from,pool2,buffer,pool2,best,effort,get,num,of,used,buffers,assert,null,buffer,pool2,request,buffer,buffers,remove,0,recycle,assert,equals,1,network,buffer,pool,get,number,of,available,memory,segments,assert,equals,buffers,to,take,from,pool1,1,buffer,pool1,best,effort,get,num,of,used,buffers,buffer,pool1,get,number,of,available,memory,segments,assert,equals,buffers,to,take,from,pool2,buffer,pool2,best,effort,get,num,of,used,buffers,buffer,pool2,get,number,of,available,memory,segments,buffer,buffer,buffer,pool2,request,buffer,assert,not,null,buffer,buffers,add,buffer,assert,equals,0,network,buffer,pool,get,number,of,available,memory,segments,assert,equals,buffers,to,take,from,pool1,1,buffer,pool1,best,effort,get,num,of,used,buffers,buffer,pool1,get,number,of,available,memory,segments,assert,equals,buffers,to,take,from,pool2,1,buffer,pool2,best,effort,get,num,of,used,buffers,buffer,pool2,get,number,of,available,memory,segments,finally,for,buffer,buffer,buffers,buffer,recycle,if,buffer,pool1,null,buffer,pool1,lazy,destroy,if,buffer,pool2,null,buffer,pool2,lazy,destroy
BufferPoolFactoryTest -> @Test 	public void testOverprovisioned() throws IOException;1511516912;Tests creating two buffer pools which together require as many buffers as available but where_there are less buffers available to the {@link NetworkBufferPool} at the time of the second_{@link LocalBufferPool} creation.;@Test_	public void testOverprovisioned() throws IOException {_		_		int buffersToTakeFromPool1 = numBuffers / 2 + 1__		_		int buffersToTakeFromPool2 = numBuffers - buffersToTakeFromPool1___		List<Buffer> buffers = new ArrayList<>(numBuffers)__		BufferPool bufferPool1 = null, bufferPool2 = null__		try {_			bufferPool1 = networkBufferPool.createBufferPool(buffersToTakeFromPool2, numBuffers)___			_			for (int i = 0_ i < buffersToTakeFromPool1_ ++i) {_				Buffer buffer = bufferPool1.requestBuffer()__				assertNotNull(buffer)__				buffers.add(buffer)__			}_			assertEquals(buffersToTakeFromPool1, bufferPool1.bestEffortGetNumOfUsedBuffers())__			assertEquals(numBuffers, bufferPool1.getNumBuffers())___			_			bufferPool2 = networkBufferPool.createBufferPool(buffersToTakeFromPool1, numBuffers)___			assertEquals(bufferPool2.getNumberOfRequiredMemorySegments(), bufferPool2.getNumBuffers())__			assertEquals(bufferPool1.getNumberOfRequiredMemorySegments(), bufferPool1.getNumBuffers())__			assertNull(bufferPool1.requestBuffer())___			_			for (int i = 0_ i < buffersToTakeFromPool2_ ++i) {_				Buffer buffer = bufferPool2.requestBuffer()__				assertNotNull(buffer)__				buffers.add(buffer)__			}_			assertEquals(buffersToTakeFromPool2, bufferPool2.bestEffortGetNumOfUsedBuffers())___			_			assertNull(bufferPool2.requestBuffer())___			_			buffers.remove(0).recycle()__			_			assertEquals(1, networkBufferPool.getNumberOfAvailableMemorySegments())__			_			assertEquals(buffersToTakeFromPool1 - 1,_				bufferPool1.bestEffortGetNumOfUsedBuffers() + bufferPool1.getNumberOfAvailableMemorySegments())__			assertEquals(buffersToTakeFromPool2,_				bufferPool2.bestEffortGetNumOfUsedBuffers() + bufferPool2.getNumberOfAvailableMemorySegments())___			Buffer buffer = bufferPool2.requestBuffer()__			assertNotNull(buffer)__			buffers.add(buffer)__			_			assertEquals(0, networkBufferPool.getNumberOfAvailableMemorySegments())__			assertEquals(buffersToTakeFromPool1 - 1,_				bufferPool1.bestEffortGetNumOfUsedBuffers() + bufferPool1.getNumberOfAvailableMemorySegments())__			assertEquals(buffersToTakeFromPool2 + 1,_				bufferPool2.bestEffortGetNumOfUsedBuffers() + bufferPool2.getNumberOfAvailableMemorySegments())__		} finally {_			for (Buffer buffer : buffers) {_				buffer.recycle()__			}_			if (bufferPool1 != null) {_				bufferPool1.lazyDestroy()__			}_			if (bufferPool2 != null) {_				bufferPool2.lazyDestroy()__			}_		}_	};tests,creating,two,buffer,pools,which,together,require,as,many,buffers,as,available,but,where,there,are,less,buffers,available,to,the,link,network,buffer,pool,at,the,time,of,the,second,link,local,buffer,pool,creation;test,public,void,test,overprovisioned,throws,ioexception,int,buffers,to,take,from,pool1,num,buffers,2,1,int,buffers,to,take,from,pool2,num,buffers,buffers,to,take,from,pool1,list,buffer,buffers,new,array,list,num,buffers,buffer,pool,buffer,pool1,null,buffer,pool2,null,try,buffer,pool1,network,buffer,pool,create,buffer,pool,buffers,to,take,from,pool2,num,buffers,for,int,i,0,i,buffers,to,take,from,pool1,i,buffer,buffer,buffer,pool1,request,buffer,assert,not,null,buffer,buffers,add,buffer,assert,equals,buffers,to,take,from,pool1,buffer,pool1,best,effort,get,num,of,used,buffers,assert,equals,num,buffers,buffer,pool1,get,num,buffers,buffer,pool2,network,buffer,pool,create,buffer,pool,buffers,to,take,from,pool1,num,buffers,assert,equals,buffer,pool2,get,number,of,required,memory,segments,buffer,pool2,get,num,buffers,assert,equals,buffer,pool1,get,number,of,required,memory,segments,buffer,pool1,get,num,buffers,assert,null,buffer,pool1,request,buffer,for,int,i,0,i,buffers,to,take,from,pool2,i,buffer,buffer,buffer,pool2,request,buffer,assert,not,null,buffer,buffers,add,buffer,assert,equals,buffers,to,take,from,pool2,buffer,pool2,best,effort,get,num,of,used,buffers,assert,null,buffer,pool2,request,buffer,buffers,remove,0,recycle,assert,equals,1,network,buffer,pool,get,number,of,available,memory,segments,assert,equals,buffers,to,take,from,pool1,1,buffer,pool1,best,effort,get,num,of,used,buffers,buffer,pool1,get,number,of,available,memory,segments,assert,equals,buffers,to,take,from,pool2,buffer,pool2,best,effort,get,num,of,used,buffers,buffer,pool2,get,number,of,available,memory,segments,buffer,buffer,buffer,pool2,request,buffer,assert,not,null,buffer,buffers,add,buffer,assert,equals,0,network,buffer,pool,get,number,of,available,memory,segments,assert,equals,buffers,to,take,from,pool1,1,buffer,pool1,best,effort,get,num,of,used,buffers,buffer,pool1,get,number,of,available,memory,segments,assert,equals,buffers,to,take,from,pool2,1,buffer,pool2,best,effort,get,num,of,used,buffers,buffer,pool2,get,number,of,available,memory,segments,finally,for,buffer,buffer,buffers,buffer,recycle,if,buffer,pool1,null,buffer,pool1,lazy,destroy,if,buffer,pool2,null,buffer,pool2,lazy,destroy
BufferPoolFactoryTest -> @Test 	public void testOverprovisioned() throws IOException;1516285878;Tests creating two buffer pools which together require as many buffers as available but where_there are less buffers available to the {@link NetworkBufferPool} at the time of the second_{@link LocalBufferPool} creation.;@Test_	public void testOverprovisioned() throws IOException {_		_		int buffersToTakeFromPool1 = numBuffers / 2 + 1__		_		int buffersToTakeFromPool2 = numBuffers - buffersToTakeFromPool1___		List<Buffer> buffers = new ArrayList<>(numBuffers)__		BufferPool bufferPool1 = null, bufferPool2 = null__		try {_			bufferPool1 = networkBufferPool.createBufferPool(buffersToTakeFromPool2, numBuffers)___			_			for (int i = 0_ i < buffersToTakeFromPool1_ ++i) {_				Buffer buffer = bufferPool1.requestBuffer()__				assertNotNull(buffer)__				buffers.add(buffer)__			}_			assertEquals(buffersToTakeFromPool1, bufferPool1.bestEffortGetNumOfUsedBuffers())__			assertEquals(numBuffers, bufferPool1.getNumBuffers())___			_			bufferPool2 = networkBufferPool.createBufferPool(buffersToTakeFromPool1, numBuffers)___			assertEquals(bufferPool2.getNumberOfRequiredMemorySegments(), bufferPool2.getNumBuffers())__			assertEquals(bufferPool1.getNumberOfRequiredMemorySegments(), bufferPool1.getNumBuffers())__			assertNull(bufferPool1.requestBuffer())___			_			for (int i = 0_ i < buffersToTakeFromPool2_ ++i) {_				Buffer buffer = bufferPool2.requestBuffer()__				assertNotNull(buffer)__				buffers.add(buffer)__			}_			assertEquals(buffersToTakeFromPool2, bufferPool2.bestEffortGetNumOfUsedBuffers())___			_			assertNull(bufferPool2.requestBuffer())___			_			buffers.remove(0).recycleBuffer()__			_			assertEquals(1, networkBufferPool.getNumberOfAvailableMemorySegments())__			_			assertEquals(buffersToTakeFromPool1 - 1,_				bufferPool1.bestEffortGetNumOfUsedBuffers() + bufferPool1.getNumberOfAvailableMemorySegments())__			assertEquals(buffersToTakeFromPool2,_				bufferPool2.bestEffortGetNumOfUsedBuffers() + bufferPool2.getNumberOfAvailableMemorySegments())___			Buffer buffer = bufferPool2.requestBuffer()__			assertNotNull(buffer)__			buffers.add(buffer)__			_			assertEquals(0, networkBufferPool.getNumberOfAvailableMemorySegments())__			assertEquals(buffersToTakeFromPool1 - 1,_				bufferPool1.bestEffortGetNumOfUsedBuffers() + bufferPool1.getNumberOfAvailableMemorySegments())__			assertEquals(buffersToTakeFromPool2 + 1,_				bufferPool2.bestEffortGetNumOfUsedBuffers() + bufferPool2.getNumberOfAvailableMemorySegments())__		} finally {_			for (Buffer buffer : buffers) {_				buffer.recycleBuffer()__			}_			if (bufferPool1 != null) {_				bufferPool1.lazyDestroy()__			}_			if (bufferPool2 != null) {_				bufferPool2.lazyDestroy()__			}_		}_	};tests,creating,two,buffer,pools,which,together,require,as,many,buffers,as,available,but,where,there,are,less,buffers,available,to,the,link,network,buffer,pool,at,the,time,of,the,second,link,local,buffer,pool,creation;test,public,void,test,overprovisioned,throws,ioexception,int,buffers,to,take,from,pool1,num,buffers,2,1,int,buffers,to,take,from,pool2,num,buffers,buffers,to,take,from,pool1,list,buffer,buffers,new,array,list,num,buffers,buffer,pool,buffer,pool1,null,buffer,pool2,null,try,buffer,pool1,network,buffer,pool,create,buffer,pool,buffers,to,take,from,pool2,num,buffers,for,int,i,0,i,buffers,to,take,from,pool1,i,buffer,buffer,buffer,pool1,request,buffer,assert,not,null,buffer,buffers,add,buffer,assert,equals,buffers,to,take,from,pool1,buffer,pool1,best,effort,get,num,of,used,buffers,assert,equals,num,buffers,buffer,pool1,get,num,buffers,buffer,pool2,network,buffer,pool,create,buffer,pool,buffers,to,take,from,pool1,num,buffers,assert,equals,buffer,pool2,get,number,of,required,memory,segments,buffer,pool2,get,num,buffers,assert,equals,buffer,pool1,get,number,of,required,memory,segments,buffer,pool1,get,num,buffers,assert,null,buffer,pool1,request,buffer,for,int,i,0,i,buffers,to,take,from,pool2,i,buffer,buffer,buffer,pool2,request,buffer,assert,not,null,buffer,buffers,add,buffer,assert,equals,buffers,to,take,from,pool2,buffer,pool2,best,effort,get,num,of,used,buffers,assert,null,buffer,pool2,request,buffer,buffers,remove,0,recycle,buffer,assert,equals,1,network,buffer,pool,get,number,of,available,memory,segments,assert,equals,buffers,to,take,from,pool1,1,buffer,pool1,best,effort,get,num,of,used,buffers,buffer,pool1,get,number,of,available,memory,segments,assert,equals,buffers,to,take,from,pool2,buffer,pool2,best,effort,get,num,of,used,buffers,buffer,pool2,get,number,of,available,memory,segments,buffer,buffer,buffer,pool2,request,buffer,assert,not,null,buffer,buffers,add,buffer,assert,equals,0,network,buffer,pool,get,number,of,available,memory,segments,assert,equals,buffers,to,take,from,pool1,1,buffer,pool1,best,effort,get,num,of,used,buffers,buffer,pool1,get,number,of,available,memory,segments,assert,equals,buffers,to,take,from,pool2,1,buffer,pool2,best,effort,get,num,of,used,buffers,buffer,pool2,get,number,of,available,memory,segments,finally,for,buffer,buffer,buffers,buffer,recycle,buffer,if,buffer,pool1,null,buffer,pool1,lazy,destroy,if,buffer,pool2,null,buffer,pool2,lazy,destroy
