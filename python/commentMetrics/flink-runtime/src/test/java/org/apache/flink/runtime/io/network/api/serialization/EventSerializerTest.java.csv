# id;timestamp;commentText;codeText;commentWords;codeWords
EventSerializerTest -> @Test 	public void testIsEventPeakOnly() throws Exception;1483975361;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)}_whether it peaks into the buffer only, i.e. after the call, the buffer_is still de-serializable.__@throws Exception;@Test_	public void testIsEventPeakOnly() throws Exception {_		final Buffer serializedEvent =_			EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			assertTrue(_				EventSerializer_					.isEvent(serializedEvent, EndOfPartitionEvent.class, cl))__			EndOfPartitionEvent event = (EndOfPartitionEvent) EventSerializer_				.fromBuffer(serializedEvent, cl)__			assertEquals(EndOfPartitionEvent.INSTANCE, event)__		} finally {_			serializedEvent.recycle()__		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,whether,it,peaks,into,the,buffer,only,i,e,after,the,call,the,buffer,is,still,de,serializable,throws,exception;test,public,void,test,is,event,peak,only,throws,exception,final,buffer,serialized,event,event,serializer,to,buffer,end,of,partition,event,instance,try,final,class,loader,cl,get,class,get,class,loader,assert,true,event,serializer,is,event,serialized,event,end,of,partition,event,class,cl,end,of,partition,event,event,end,of,partition,event,event,serializer,from,buffer,serialized,event,cl,assert,equals,end,of,partition,event,instance,event,finally,serialized,event,recycle
EventSerializerTest -> @Test 	public void testIsEventPeakOnly() throws Exception;1487871589;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)}_whether it peaks into the buffer only, i.e. after the call, the buffer_is still de-serializable.__@throws Exception;@Test_	public void testIsEventPeakOnly() throws Exception {_		final Buffer serializedEvent =_			EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			assertTrue(_				EventSerializer_					.isEvent(serializedEvent, EndOfPartitionEvent.class, cl))__			EndOfPartitionEvent event = (EndOfPartitionEvent) EventSerializer_				.fromBuffer(serializedEvent, cl)__			assertEquals(EndOfPartitionEvent.INSTANCE, event)__		} finally {_			serializedEvent.recycle()__		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,whether,it,peaks,into,the,buffer,only,i,e,after,the,call,the,buffer,is,still,de,serializable,throws,exception;test,public,void,test,is,event,peak,only,throws,exception,final,buffer,serialized,event,event,serializer,to,buffer,end,of,partition,event,instance,try,final,class,loader,cl,get,class,get,class,loader,assert,true,event,serializer,is,event,serialized,event,end,of,partition,event,class,cl,end,of,partition,event,event,end,of,partition,event,event,serializer,from,buffer,serialized,event,cl,assert,equals,end,of,partition,event,instance,event,finally,serialized,event,recycle
EventSerializerTest -> @Test 	public void testIsEventPeakOnly() throws Exception;1487871589;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)}_whether it peaks into the buffer only, i.e. after the call, the buffer_is still de-serializable.__@throws Exception;@Test_	public void testIsEventPeakOnly() throws Exception {_		final Buffer serializedEvent =_			EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			assertTrue(_				EventSerializer_					.isEvent(serializedEvent, EndOfPartitionEvent.class, cl))__			EndOfPartitionEvent event = (EndOfPartitionEvent) EventSerializer_				.fromBuffer(serializedEvent, cl)__			assertEquals(EndOfPartitionEvent.INSTANCE, event)__		} finally {_			serializedEvent.recycle()__		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,whether,it,peaks,into,the,buffer,only,i,e,after,the,call,the,buffer,is,still,de,serializable,throws,exception;test,public,void,test,is,event,peak,only,throws,exception,final,buffer,serialized,event,event,serializer,to,buffer,end,of,partition,event,instance,try,final,class,loader,cl,get,class,get,class,loader,assert,true,event,serializer,is,event,serialized,event,end,of,partition,event,class,cl,end,of,partition,event,event,end,of,partition,event,event,serializer,from,buffer,serialized,event,cl,assert,equals,end,of,partition,event,instance,event,finally,serialized,event,recycle
EventSerializerTest -> @Test 	public void testIsEventPeakOnly() throws Exception;1509118643;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)}_whether it peaks into the buffer only, i.e. after the call, the buffer_is still de-serializable.__@throws Exception;@Test_	public void testIsEventPeakOnly() throws Exception {_		final Buffer serializedEvent =_			EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			assertTrue(_				EventSerializer_					.isEvent(serializedEvent, EndOfPartitionEvent.class, cl))__			EndOfPartitionEvent event = (EndOfPartitionEvent) EventSerializer_				.fromBuffer(serializedEvent, cl)__			assertEquals(EndOfPartitionEvent.INSTANCE, event)__		} finally {_			serializedEvent.recycle()__		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,whether,it,peaks,into,the,buffer,only,i,e,after,the,call,the,buffer,is,still,de,serializable,throws,exception;test,public,void,test,is,event,peak,only,throws,exception,final,buffer,serialized,event,event,serializer,to,buffer,end,of,partition,event,instance,try,final,class,loader,cl,get,class,get,class,loader,assert,true,event,serializer,is,event,serialized,event,end,of,partition,event,class,cl,end,of,partition,event,event,end,of,partition,event,event,serializer,from,buffer,serialized,event,cl,assert,equals,end,of,partition,event,instance,event,finally,serialized,event,recycle
EventSerializerTest -> @Test 	public void testIsEventPeakOnly() throws Exception;1516285878;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)}_whether it peaks into the buffer only, i.e. after the call, the buffer_is still de-serializable.__@throws Exception;@Test_	public void testIsEventPeakOnly() throws Exception {_		final Buffer serializedEvent =_			EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			assertTrue(_				EventSerializer_					.isEvent(serializedEvent, EndOfPartitionEvent.class, cl))__			EndOfPartitionEvent event = (EndOfPartitionEvent) EventSerializer_				.fromBuffer(serializedEvent, cl)__			assertEquals(EndOfPartitionEvent.INSTANCE, event)__		} finally {_			serializedEvent.recycleBuffer()__		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,whether,it,peaks,into,the,buffer,only,i,e,after,the,call,the,buffer,is,still,de,serializable,throws,exception;test,public,void,test,is,event,peak,only,throws,exception,final,buffer,serialized,event,event,serializer,to,buffer,end,of,partition,event,instance,try,final,class,loader,cl,get,class,get,class,loader,assert,true,event,serializer,is,event,serialized,event,end,of,partition,event,class,cl,end,of,partition,event,event,end,of,partition,event,event,serializer,from,buffer,serialized,event,cl,assert,equals,end,of,partition,event,instance,event,finally,serialized,event,recycle,buffer
EventSerializerTest -> @Test 	public void testIsEventPeakOnly() throws Exception;1517489695;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)}_whether it peaks into the buffer only, i.e. after the call, the buffer_is still de-serializable.__@throws Exception;@Test_	public void testIsEventPeakOnly() throws Exception {_		final Buffer serializedEvent =_			EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			assertTrue(_				EventSerializer_					.isEvent(serializedEvent, EndOfPartitionEvent.class, cl))__			EndOfPartitionEvent event = (EndOfPartitionEvent) EventSerializer_				.fromBuffer(serializedEvent, cl)__			assertEquals(EndOfPartitionEvent.INSTANCE, event)__		} finally {_			serializedEvent.recycleBuffer()__		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,whether,it,peaks,into,the,buffer,only,i,e,after,the,call,the,buffer,is,still,de,serializable,throws,exception;test,public,void,test,is,event,peak,only,throws,exception,final,buffer,serialized,event,event,serializer,to,buffer,end,of,partition,event,instance,try,final,class,loader,cl,get,class,get,class,loader,assert,true,event,serializer,is,event,serialized,event,end,of,partition,event,class,cl,end,of,partition,event,event,end,of,partition,event,event,serializer,from,buffer,serialized,event,cl,assert,equals,end,of,partition,event,instance,event,finally,serialized,event,recycle,buffer
EventSerializerTest -> @Test 	public void testIsEventPeakOnly() throws Exception;1517489695;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)}_whether it peaks into the buffer only, i.e. after the call, the buffer_is still de-serializable.__@throws Exception;@Test_	public void testIsEventPeakOnly() throws Exception {_		final Buffer serializedEvent =_			EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			assertTrue(_				EventSerializer_					.isEvent(serializedEvent, EndOfPartitionEvent.class, cl))__			EndOfPartitionEvent event = (EndOfPartitionEvent) EventSerializer_				.fromBuffer(serializedEvent, cl)__			assertEquals(EndOfPartitionEvent.INSTANCE, event)__		} finally {_			serializedEvent.recycleBuffer()__		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,whether,it,peaks,into,the,buffer,only,i,e,after,the,call,the,buffer,is,still,de,serializable,throws,exception;test,public,void,test,is,event,peak,only,throws,exception,final,buffer,serialized,event,event,serializer,to,buffer,end,of,partition,event,instance,try,final,class,loader,cl,get,class,get,class,loader,assert,true,event,serializer,is,event,serialized,event,end,of,partition,event,class,cl,end,of,partition,event,event,end,of,partition,event,event,serializer,from,buffer,serialized,event,cl,assert,equals,end,of,partition,event,instance,event,finally,serialized,event,recycle,buffer
EventSerializerTest -> @Test 	public void testIsEventPeakOnly() throws Exception;1517489696;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)}_whether it peaks into the buffer only, i.e. after the call, the buffer_is still de-serializable.;@Test_	public void testIsEventPeakOnly() throws Exception {_		final Buffer serializedEvent =_			EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			assertTrue(_				EventSerializer_					.isEvent(serializedEvent, EndOfPartitionEvent.class, cl))__			EndOfPartitionEvent event = (EndOfPartitionEvent) EventSerializer_				.fromBuffer(serializedEvent, cl)__			assertEquals(EndOfPartitionEvent.INSTANCE, event)__		} finally {_			serializedEvent.recycleBuffer()__		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,whether,it,peaks,into,the,buffer,only,i,e,after,the,call,the,buffer,is,still,de,serializable;test,public,void,test,is,event,peak,only,throws,exception,final,buffer,serialized,event,event,serializer,to,buffer,end,of,partition,event,instance,try,final,class,loader,cl,get,class,get,class,loader,assert,true,event,serializer,is,event,serialized,event,end,of,partition,event,class,cl,end,of,partition,event,event,end,of,partition,event,event,serializer,from,buffer,serialized,event,cl,assert,equals,end,of,partition,event,instance,event,finally,serialized,event,recycle,buffer
EventSerializerTest -> @Test 	public void testIsEventPeakOnly() throws Exception;1519834372;Tests {@link EventSerializer#isEvent(Buffer, Class)}_whether it peaks into the buffer only, i.e. after the call, the buffer_is still de-serializable.;@Test_	public void testIsEventPeakOnly() throws Exception {_		final Buffer serializedEvent =_			EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			assertTrue(_				EventSerializer.isEvent(serializedEvent, EndOfPartitionEvent.class))__			EndOfPartitionEvent event = (EndOfPartitionEvent) EventSerializer_				.fromBuffer(serializedEvent, cl)__			assertEquals(EndOfPartitionEvent.INSTANCE, event)__		} finally {_			serializedEvent.recycleBuffer()__		}_	};tests,link,event,serializer,is,event,buffer,class,whether,it,peaks,into,the,buffer,only,i,e,after,the,call,the,buffer,is,still,de,serializable;test,public,void,test,is,event,peak,only,throws,exception,final,buffer,serialized,event,event,serializer,to,buffer,end,of,partition,event,instance,try,final,class,loader,cl,get,class,get,class,loader,assert,true,event,serializer,is,event,serialized,event,end,of,partition,event,class,end,of,partition,event,event,end,of,partition,event,event,serializer,from,buffer,serialized,event,cl,assert,equals,end,of,partition,event,instance,event,finally,serialized,event,recycle,buffer
EventSerializerTest -> private boolean checkIsEvent( 			AbstractEvent event, 			Class<? extends AbstractEvent> eventClass) throws IOException;1517489695;Returns the result of_{@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} on a buffer_that encodes the given <tt>event</tt>.__@param event the event to encode_@param eventClass the event class to check against__@return whether {@link EventSerializer#isEvent(ByteBuffer, Class, ClassLoader)}_thinks the encoded buffer matches the class_@throws IOException;private boolean checkIsEvent(_			AbstractEvent event,_			Class<? extends AbstractEvent> eventClass) throws IOException {__		final Buffer serializedEvent = EventSerializer.toBuffer(event)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			return EventSerializer.isEvent(serializedEvent, eventClass, cl)__		} finally {_			serializedEvent.recycleBuffer()__		}_	};returns,the,result,of,link,event,serializer,is,event,buffer,class,class,loader,on,a,buffer,that,encodes,the,given,tt,event,tt,param,event,the,event,to,encode,param,event,class,the,event,class,to,check,against,return,whether,link,event,serializer,is,event,byte,buffer,class,class,loader,thinks,the,encoded,buffer,matches,the,class,throws,ioexception;private,boolean,check,is,event,abstract,event,event,class,extends,abstract,event,event,class,throws,ioexception,final,buffer,serialized,event,event,serializer,to,buffer,event,try,final,class,loader,cl,get,class,get,class,loader,return,event,serializer,is,event,serialized,event,event,class,cl,finally,serialized,event,recycle,buffer
EventSerializerTest -> private boolean checkIsEvent( 			AbstractEvent event, 			Class<? extends AbstractEvent> eventClass) throws IOException;1517489696;Returns the result of_{@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} on a buffer_that encodes the given <tt>event</tt>.__@param event the event to encode_@param eventClass the event class to check against__@return whether {@link EventSerializer#isEvent(ByteBuffer, Class, ClassLoader)}_thinks the encoded buffer matches the class;private boolean checkIsEvent(_			AbstractEvent event,_			Class<? extends AbstractEvent> eventClass) throws IOException {__		final Buffer serializedEvent = EventSerializer.toBuffer(event)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			return EventSerializer.isEvent(serializedEvent, eventClass, cl)__		} finally {_			serializedEvent.recycleBuffer()__		}_	};returns,the,result,of,link,event,serializer,is,event,buffer,class,class,loader,on,a,buffer,that,encodes,the,given,tt,event,tt,param,event,the,event,to,encode,param,event,class,the,event,class,to,check,against,return,whether,link,event,serializer,is,event,byte,buffer,class,class,loader,thinks,the,encoded,buffer,matches,the,class;private,boolean,check,is,event,abstract,event,event,class,extends,abstract,event,event,class,throws,ioexception,final,buffer,serialized,event,event,serializer,to,buffer,event,try,final,class,loader,cl,get,class,get,class,loader,return,event,serializer,is,event,serialized,event,event,class,cl,finally,serialized,event,recycle,buffer
EventSerializerTest -> @Test 	public void testIsEvent() throws Exception;1483975361;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} returns_the correct answer for various encoded event buffers.__@throws Exception;@Test_	public void testIsEvent() throws Exception {_		AbstractEvent[] events = {_			EndOfPartitionEvent.INSTANCE,_			EndOfSuperstepEvent.INSTANCE,_			new CheckpointBarrier(1678L, 4623784L),_			new TestTaskEvent(Math.random(), 12361231273L),_			new CancelCheckpointMarker(287087987329842L)_		}___		for (AbstractEvent evt : events) {_			for (AbstractEvent evt2 : events) {_				if (evt == evt2) {_					assertTrue(checkIsEvent(evt, evt2.getClass()))__				} else {_					assertFalse(checkIsEvent(evt, evt2.getClass()))__				}_			}_		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,returns,the,correct,answer,for,various,encoded,event,buffers,throws,exception;test,public,void,test,is,event,throws,exception,abstract,event,events,end,of,partition,event,instance,end,of,superstep,event,instance,new,checkpoint,barrier,1678l,4623784l,new,test,task,event,math,random,12361231273l,new,cancel,checkpoint,marker,287087987329842l,for,abstract,event,evt,events,for,abstract,event,evt2,events,if,evt,evt2,assert,true,check,is,event,evt,evt2,get,class,else,assert,false,check,is,event,evt,evt2,get,class
EventSerializerTest -> @Test 	public void testIsEvent() throws Exception;1487871589;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} returns_the correct answer for various encoded event buffers.__@throws Exception;@Test_	public void testIsEvent() throws Exception {_		AbstractEvent[] events = {_			EndOfPartitionEvent.INSTANCE,_			EndOfSuperstepEvent.INSTANCE,_			new CheckpointBarrier(1678L, 4623784L, CheckpointOptions.forFullCheckpoint()),_			new TestTaskEvent(Math.random(), 12361231273L),_			new CancelCheckpointMarker(287087987329842L)_		}___		for (AbstractEvent evt : events) {_			for (AbstractEvent evt2 : events) {_				if (evt == evt2) {_					assertTrue(checkIsEvent(evt, evt2.getClass()))__				} else {_					assertFalse(checkIsEvent(evt, evt2.getClass()))__				}_			}_		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,returns,the,correct,answer,for,various,encoded,event,buffers,throws,exception;test,public,void,test,is,event,throws,exception,abstract,event,events,end,of,partition,event,instance,end,of,superstep,event,instance,new,checkpoint,barrier,1678l,4623784l,checkpoint,options,for,full,checkpoint,new,test,task,event,math,random,12361231273l,new,cancel,checkpoint,marker,287087987329842l,for,abstract,event,evt,events,for,abstract,event,evt2,events,if,evt,evt2,assert,true,check,is,event,evt,evt2,get,class,else,assert,false,check,is,event,evt,evt2,get,class
EventSerializerTest -> @Test 	public void testIsEvent() throws Exception;1487871589;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} returns_the correct answer for various encoded event buffers.__@throws Exception;@Test_	public void testIsEvent() throws Exception {_		AbstractEvent[] events = {_			EndOfPartitionEvent.INSTANCE,_			EndOfSuperstepEvent.INSTANCE,_			new CheckpointBarrier(1678L, 4623784L, CheckpointOptions.forFullCheckpoint()),_			new TestTaskEvent(Math.random(), 12361231273L),_			new CancelCheckpointMarker(287087987329842L)_		}___		for (AbstractEvent evt : events) {_			for (AbstractEvent evt2 : events) {_				if (evt == evt2) {_					assertTrue(checkIsEvent(evt, evt2.getClass()))__				} else {_					assertFalse(checkIsEvent(evt, evt2.getClass()))__				}_			}_		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,returns,the,correct,answer,for,various,encoded,event,buffers,throws,exception;test,public,void,test,is,event,throws,exception,abstract,event,events,end,of,partition,event,instance,end,of,superstep,event,instance,new,checkpoint,barrier,1678l,4623784l,checkpoint,options,for,full,checkpoint,new,test,task,event,math,random,12361231273l,new,cancel,checkpoint,marker,287087987329842l,for,abstract,event,evt,events,for,abstract,event,evt2,events,if,evt,evt2,assert,true,check,is,event,evt,evt2,get,class,else,assert,false,check,is,event,evt,evt2,get,class
EventSerializerTest -> @Test 	public void testIsEvent() throws Exception;1509118643;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} returns_the correct answer for various encoded event buffers.__@throws Exception;@Test_	public void testIsEvent() throws Exception {_		AbstractEvent[] events = {_			EndOfPartitionEvent.INSTANCE,_			EndOfSuperstepEvent.INSTANCE,_			new CheckpointBarrier(1678L, 4623784L, CheckpointOptions.forCheckpoint()),_			new TestTaskEvent(Math.random(), 12361231273L),_			new CancelCheckpointMarker(287087987329842L)_		}___		for (AbstractEvent evt : events) {_			for (AbstractEvent evt2 : events) {_				if (evt == evt2) {_					assertTrue(checkIsEvent(evt, evt2.getClass()))__				} else {_					assertFalse(checkIsEvent(evt, evt2.getClass()))__				}_			}_		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,returns,the,correct,answer,for,various,encoded,event,buffers,throws,exception;test,public,void,test,is,event,throws,exception,abstract,event,events,end,of,partition,event,instance,end,of,superstep,event,instance,new,checkpoint,barrier,1678l,4623784l,checkpoint,options,for,checkpoint,new,test,task,event,math,random,12361231273l,new,cancel,checkpoint,marker,287087987329842l,for,abstract,event,evt,events,for,abstract,event,evt2,events,if,evt,evt2,assert,true,check,is,event,evt,evt2,get,class,else,assert,false,check,is,event,evt,evt2,get,class
EventSerializerTest -> @Test 	public void testIsEvent() throws Exception;1516285878;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} returns_the correct answer for various encoded event buffers.__@throws Exception;@Test_	public void testIsEvent() throws Exception {_		AbstractEvent[] events = {_			EndOfPartitionEvent.INSTANCE,_			EndOfSuperstepEvent.INSTANCE,_			new CheckpointBarrier(1678L, 4623784L, CheckpointOptions.forCheckpoint()),_			new TestTaskEvent(Math.random(), 12361231273L),_			new CancelCheckpointMarker(287087987329842L)_		}___		for (AbstractEvent evt : events) {_			for (AbstractEvent evt2 : events) {_				if (evt == evt2) {_					assertTrue(checkIsEvent(evt, evt2.getClass()))__				} else {_					assertFalse(checkIsEvent(evt, evt2.getClass()))__				}_			}_		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,returns,the,correct,answer,for,various,encoded,event,buffers,throws,exception;test,public,void,test,is,event,throws,exception,abstract,event,events,end,of,partition,event,instance,end,of,superstep,event,instance,new,checkpoint,barrier,1678l,4623784l,checkpoint,options,for,checkpoint,new,test,task,event,math,random,12361231273l,new,cancel,checkpoint,marker,287087987329842l,for,abstract,event,evt,events,for,abstract,event,evt2,events,if,evt,evt2,assert,true,check,is,event,evt,evt2,get,class,else,assert,false,check,is,event,evt,evt2,get,class
EventSerializerTest -> @Test 	public void testIsEvent() throws Exception;1517489695;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} returns_the correct answer for various encoded event buffers.__@throws Exception;@Test_	public void testIsEvent() throws Exception {_		AbstractEvent[] events = {_			EndOfPartitionEvent.INSTANCE,_			EndOfSuperstepEvent.INSTANCE,_			new CheckpointBarrier(1678L, 4623784L, CheckpointOptions.forCheckpointWithDefaultLocation()),_			new TestTaskEvent(Math.random(), 12361231273L),_			new CancelCheckpointMarker(287087987329842L)_		}___		for (AbstractEvent evt : events) {_			for (AbstractEvent evt2 : events) {_				if (evt == evt2) {_					assertTrue(checkIsEvent(evt, evt2.getClass()))__				} else {_					assertFalse(checkIsEvent(evt, evt2.getClass()))__				}_			}_		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,returns,the,correct,answer,for,various,encoded,event,buffers,throws,exception;test,public,void,test,is,event,throws,exception,abstract,event,events,end,of,partition,event,instance,end,of,superstep,event,instance,new,checkpoint,barrier,1678l,4623784l,checkpoint,options,for,checkpoint,with,default,location,new,test,task,event,math,random,12361231273l,new,cancel,checkpoint,marker,287087987329842l,for,abstract,event,evt,events,for,abstract,event,evt2,events,if,evt,evt2,assert,true,check,is,event,evt,evt2,get,class,else,assert,false,check,is,event,evt,evt2,get,class
EventSerializerTest -> @Test 	public void testIsEvent() throws Exception;1517489695;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} returns_the correct answer for various encoded event buffers.__@throws Exception;@Test_	public void testIsEvent() throws Exception {_		AbstractEvent[] events = {_			EndOfPartitionEvent.INSTANCE,_			EndOfSuperstepEvent.INSTANCE,_			new CheckpointBarrier(1678L, 4623784L, CheckpointOptions.forCheckpointWithDefaultLocation()),_			new TestTaskEvent(Math.random(), 12361231273L),_			new CancelCheckpointMarker(287087987329842L)_		}___		for (AbstractEvent evt : events) {_			for (AbstractEvent evt2 : events) {_				if (evt == evt2) {_					assertTrue(checkIsEvent(evt, evt2.getClass()))__				} else {_					assertFalse(checkIsEvent(evt, evt2.getClass()))__				}_			}_		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,returns,the,correct,answer,for,various,encoded,event,buffers,throws,exception;test,public,void,test,is,event,throws,exception,abstract,event,events,end,of,partition,event,instance,end,of,superstep,event,instance,new,checkpoint,barrier,1678l,4623784l,checkpoint,options,for,checkpoint,with,default,location,new,test,task,event,math,random,12361231273l,new,cancel,checkpoint,marker,287087987329842l,for,abstract,event,evt,events,for,abstract,event,evt2,events,if,evt,evt2,assert,true,check,is,event,evt,evt2,get,class,else,assert,false,check,is,event,evt,evt2,get,class
EventSerializerTest -> @Test 	public void testIsEvent() throws Exception;1517489696;Tests {@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} returns_the correct answer for various encoded event buffers.;@Test_	public void testIsEvent() throws Exception {_		AbstractEvent[] events = {_			EndOfPartitionEvent.INSTANCE,_			EndOfSuperstepEvent.INSTANCE,_			new CheckpointBarrier(1678L, 4623784L, CheckpointOptions.forCheckpointWithDefaultLocation()),_			new TestTaskEvent(Math.random(), 12361231273L),_			new CancelCheckpointMarker(287087987329842L)_		}___		for (AbstractEvent evt : events) {_			for (AbstractEvent evt2 : events) {_				if (evt == evt2) {_					assertTrue(checkIsEvent(evt, evt2.getClass()))__				} else {_					assertFalse(checkIsEvent(evt, evt2.getClass()))__				}_			}_		}_	};tests,link,event,serializer,is,event,buffer,class,class,loader,returns,the,correct,answer,for,various,encoded,event,buffers;test,public,void,test,is,event,throws,exception,abstract,event,events,end,of,partition,event,instance,end,of,superstep,event,instance,new,checkpoint,barrier,1678l,4623784l,checkpoint,options,for,checkpoint,with,default,location,new,test,task,event,math,random,12361231273l,new,cancel,checkpoint,marker,287087987329842l,for,abstract,event,evt,events,for,abstract,event,evt2,events,if,evt,evt2,assert,true,check,is,event,evt,evt2,get,class,else,assert,false,check,is,event,evt,evt2,get,class
EventSerializerTest -> @Test 	public void testIsEvent() throws Exception;1519834372;Tests {@link EventSerializer#isEvent(Buffer, Class)} returns_the correct answer for various encoded event buffers.;@Test_	public void testIsEvent() throws Exception {_		AbstractEvent[] events = {_			EndOfPartitionEvent.INSTANCE,_			EndOfSuperstepEvent.INSTANCE,_			new CheckpointBarrier(1678L, 4623784L, CheckpointOptions.forCheckpointWithDefaultLocation()),_			new TestTaskEvent(Math.random(), 12361231273L),_			new CancelCheckpointMarker(287087987329842L)_		}___		Class[] expectedClasses = Arrays.stream(events)_			.map(AbstractEvent::getClass)_			.toArray(Class[]::new)___		for (AbstractEvent evt : events) {_			for (Class<?> expectedClass: expectedClasses) {_				if (expectedClass.equals(TestTaskEvent.class)) {_					try {_						checkIsEvent(evt, expectedClass)__						fail("This should fail")__					}_					catch (UnsupportedOperationException ex) {_						_					}_				}_				else if (evt.getClass().equals(expectedClass)) {_					assertTrue(checkIsEvent(evt, expectedClass))__				} else {_					assertFalse(checkIsEvent(evt, expectedClass))__				}_			}_		}_	};tests,link,event,serializer,is,event,buffer,class,returns,the,correct,answer,for,various,encoded,event,buffers;test,public,void,test,is,event,throws,exception,abstract,event,events,end,of,partition,event,instance,end,of,superstep,event,instance,new,checkpoint,barrier,1678l,4623784l,checkpoint,options,for,checkpoint,with,default,location,new,test,task,event,math,random,12361231273l,new,cancel,checkpoint,marker,287087987329842l,class,expected,classes,arrays,stream,events,map,abstract,event,get,class,to,array,class,new,for,abstract,event,evt,events,for,class,expected,class,expected,classes,if,expected,class,equals,test,task,event,class,try,check,is,event,evt,expected,class,fail,this,should,fail,catch,unsupported,operation,exception,ex,else,if,evt,get,class,equals,expected,class,assert,true,check,is,event,evt,expected,class,else,assert,false,check,is,event,evt,expected,class
EventSerializerTest -> private final boolean checkIsEvent(final AbstractEvent event, 		final Class<? extends AbstractEvent> eventClass) throws 		IOException;1483975361;Returns the result of_{@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} on a buffer_that encodes the given <tt>event</tt>.__@param event the event to encode_@param eventClass the event class to check against__@return whether {@link EventSerializer#isEvent(ByteBuffer, Class, ClassLoader)}_thinks the encoded buffer matches the class_@throws IOException;private final boolean checkIsEvent(final AbstractEvent event,_		final Class<? extends AbstractEvent> eventClass) throws_		IOException {_		final Buffer serializedEvent =_			EventSerializer.toBuffer(event)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			return EventSerializer_				.isEvent(serializedEvent, eventClass, cl)__		} finally {_			serializedEvent.recycle()__		}_	};returns,the,result,of,link,event,serializer,is,event,buffer,class,class,loader,on,a,buffer,that,encodes,the,given,tt,event,tt,param,event,the,event,to,encode,param,event,class,the,event,class,to,check,against,return,whether,link,event,serializer,is,event,byte,buffer,class,class,loader,thinks,the,encoded,buffer,matches,the,class,throws,ioexception;private,final,boolean,check,is,event,final,abstract,event,event,final,class,extends,abstract,event,event,class,throws,ioexception,final,buffer,serialized,event,event,serializer,to,buffer,event,try,final,class,loader,cl,get,class,get,class,loader,return,event,serializer,is,event,serialized,event,event,class,cl,finally,serialized,event,recycle
EventSerializerTest -> private final boolean checkIsEvent(final AbstractEvent event, 		final Class<? extends AbstractEvent> eventClass) throws 		IOException;1487871589;Returns the result of_{@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} on a buffer_that encodes the given <tt>event</tt>.__@param event the event to encode_@param eventClass the event class to check against__@return whether {@link EventSerializer#isEvent(ByteBuffer, Class, ClassLoader)}_thinks the encoded buffer matches the class_@throws IOException;private final boolean checkIsEvent(final AbstractEvent event,_		final Class<? extends AbstractEvent> eventClass) throws_		IOException {_		final Buffer serializedEvent =_			EventSerializer.toBuffer(event)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			return EventSerializer_				.isEvent(serializedEvent, eventClass, cl)__		} finally {_			serializedEvent.recycle()__		}_	};returns,the,result,of,link,event,serializer,is,event,buffer,class,class,loader,on,a,buffer,that,encodes,the,given,tt,event,tt,param,event,the,event,to,encode,param,event,class,the,event,class,to,check,against,return,whether,link,event,serializer,is,event,byte,buffer,class,class,loader,thinks,the,encoded,buffer,matches,the,class,throws,ioexception;private,final,boolean,check,is,event,final,abstract,event,event,final,class,extends,abstract,event,event,class,throws,ioexception,final,buffer,serialized,event,event,serializer,to,buffer,event,try,final,class,loader,cl,get,class,get,class,loader,return,event,serializer,is,event,serialized,event,event,class,cl,finally,serialized,event,recycle
EventSerializerTest -> private boolean checkIsEvent( 			AbstractEvent event,  			Class<? extends AbstractEvent> eventClass) throws IOException;1487871589;Returns the result of_{@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} on a buffer_that encodes the given <tt>event</tt>.__@param event the event to encode_@param eventClass the event class to check against__@return whether {@link EventSerializer#isEvent(ByteBuffer, Class, ClassLoader)}_thinks the encoded buffer matches the class_@throws IOException;private boolean checkIsEvent(_			AbstractEvent event, _			Class<? extends AbstractEvent> eventClass) throws IOException {__		final Buffer serializedEvent = EventSerializer.toBuffer(event)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			return EventSerializer.isEvent(serializedEvent, eventClass, cl)__		} finally {_			serializedEvent.recycle()__		}_	};returns,the,result,of,link,event,serializer,is,event,buffer,class,class,loader,on,a,buffer,that,encodes,the,given,tt,event,tt,param,event,the,event,to,encode,param,event,class,the,event,class,to,check,against,return,whether,link,event,serializer,is,event,byte,buffer,class,class,loader,thinks,the,encoded,buffer,matches,the,class,throws,ioexception;private,boolean,check,is,event,abstract,event,event,class,extends,abstract,event,event,class,throws,ioexception,final,buffer,serialized,event,event,serializer,to,buffer,event,try,final,class,loader,cl,get,class,get,class,loader,return,event,serializer,is,event,serialized,event,event,class,cl,finally,serialized,event,recycle
EventSerializerTest -> private boolean checkIsEvent( 			AbstractEvent event,  			Class<? extends AbstractEvent> eventClass) throws IOException;1509118643;Returns the result of_{@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} on a buffer_that encodes the given <tt>event</tt>.__@param event the event to encode_@param eventClass the event class to check against__@return whether {@link EventSerializer#isEvent(ByteBuffer, Class, ClassLoader)}_thinks the encoded buffer matches the class_@throws IOException;private boolean checkIsEvent(_			AbstractEvent event, _			Class<? extends AbstractEvent> eventClass) throws IOException {__		final Buffer serializedEvent = EventSerializer.toBuffer(event)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			return EventSerializer.isEvent(serializedEvent, eventClass, cl)__		} finally {_			serializedEvent.recycle()__		}_	};returns,the,result,of,link,event,serializer,is,event,buffer,class,class,loader,on,a,buffer,that,encodes,the,given,tt,event,tt,param,event,the,event,to,encode,param,event,class,the,event,class,to,check,against,return,whether,link,event,serializer,is,event,byte,buffer,class,class,loader,thinks,the,encoded,buffer,matches,the,class,throws,ioexception;private,boolean,check,is,event,abstract,event,event,class,extends,abstract,event,event,class,throws,ioexception,final,buffer,serialized,event,event,serializer,to,buffer,event,try,final,class,loader,cl,get,class,get,class,loader,return,event,serializer,is,event,serialized,event,event,class,cl,finally,serialized,event,recycle
EventSerializerTest -> private boolean checkIsEvent( 			AbstractEvent event,  			Class<? extends AbstractEvent> eventClass) throws IOException;1516285878;Returns the result of_{@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} on a buffer_that encodes the given <tt>event</tt>.__@param event the event to encode_@param eventClass the event class to check against__@return whether {@link EventSerializer#isEvent(ByteBuffer, Class, ClassLoader)}_thinks the encoded buffer matches the class_@throws IOException;private boolean checkIsEvent(_			AbstractEvent event, _			Class<? extends AbstractEvent> eventClass) throws IOException {__		final Buffer serializedEvent = EventSerializer.toBuffer(event)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			return EventSerializer.isEvent(serializedEvent, eventClass, cl)__		} finally {_			serializedEvent.recycleBuffer()__		}_	};returns,the,result,of,link,event,serializer,is,event,buffer,class,class,loader,on,a,buffer,that,encodes,the,given,tt,event,tt,param,event,the,event,to,encode,param,event,class,the,event,class,to,check,against,return,whether,link,event,serializer,is,event,byte,buffer,class,class,loader,thinks,the,encoded,buffer,matches,the,class,throws,ioexception;private,boolean,check,is,event,abstract,event,event,class,extends,abstract,event,event,class,throws,ioexception,final,buffer,serialized,event,event,serializer,to,buffer,event,try,final,class,loader,cl,get,class,get,class,loader,return,event,serializer,is,event,serialized,event,event,class,cl,finally,serialized,event,recycle,buffer
EventSerializerTest -> private boolean checkIsEvent( 			AbstractEvent event,  			Class<? extends AbstractEvent> eventClass) throws IOException;1517489695;Returns the result of_{@link EventSerializer#isEvent(Buffer, Class, ClassLoader)} on a buffer_that encodes the given <tt>event</tt>.__@param event the event to encode_@param eventClass the event class to check against__@return whether {@link EventSerializer#isEvent(ByteBuffer, Class, ClassLoader)}_thinks the encoded buffer matches the class_@throws IOException;private boolean checkIsEvent(_			AbstractEvent event, _			Class<? extends AbstractEvent> eventClass) throws IOException {__		final Buffer serializedEvent = EventSerializer.toBuffer(event)__		try {_			final ClassLoader cl = getClass().getClassLoader()__			return EventSerializer.isEvent(serializedEvent, eventClass, cl)__		} finally {_			serializedEvent.recycleBuffer()__		}_	};returns,the,result,of,link,event,serializer,is,event,buffer,class,class,loader,on,a,buffer,that,encodes,the,given,tt,event,tt,param,event,the,event,to,encode,param,event,class,the,event,class,to,check,against,return,whether,link,event,serializer,is,event,byte,buffer,class,class,loader,thinks,the,encoded,buffer,matches,the,class,throws,ioexception;private,boolean,check,is,event,abstract,event,event,class,extends,abstract,event,event,class,throws,ioexception,final,buffer,serialized,event,event,serializer,to,buffer,event,try,final,class,loader,cl,get,class,get,class,loader,return,event,serializer,is,event,serialized,event,event,class,cl,finally,serialized,event,recycle,buffer
