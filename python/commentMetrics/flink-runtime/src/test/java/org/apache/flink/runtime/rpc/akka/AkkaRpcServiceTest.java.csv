# id;timestamp;commentText;codeText;commentWords;codeWords
AkkaRpcServiceTest -> @Test(timeout = 1000) 	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException;1487944132;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 1000)_	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			new Runnable() {_				@Override_				public void run() {_					latch.trigger()__				}_			},_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,1000,public,void,test,scheduled,executor,service,simple,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,new,runnable,override,public,void,run,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 1000) 	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException;1487944132;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 1000)_	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			new Runnable() {_				@Override_				public void run() {_					latch.trigger()__				}_			},_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,1000,public,void,test,scheduled,executor,service,simple,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,new,runnable,override,public,void,run,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException;1488381280;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,60000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException;1499378241;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,60000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException;1501760738;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,60000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException;1507207963;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,60000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException;1515481550;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,60000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException;1515583670;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,60000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException;1519406526;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,60000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException;1522681180;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,60000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException;1526387042;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,60000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException;1526494919;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,60000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException;1488381280;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 60000)_	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,60000,public,void,test,scheduled,executor,service,periodic,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException;1499378241;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 60000)_	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,60000,public,void,test,scheduled,executor,service,periodic,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException;1501760738;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 60000)_	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,60000,public,void,test,scheduled,executor,service,periodic,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException;1507207963;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 60000)_	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,60000,public,void,test,scheduled,executor,service,periodic,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException;1515481550;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 60000)_	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,60000,public,void,test,scheduled,executor,service,periodic,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException;1515583670;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 60000)_	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,60000,public,void,test,scheduled,executor,service,periodic,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException;1519406526;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 60000)_	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,60000,public,void,test,scheduled,executor,service,periodic,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException;1522681180;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 60000)_	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,60000,public,void,test,scheduled,executor,service,periodic,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException;1526387042;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 60000)_	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,60000,public,void,test,scheduled,executor,service,periodic,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException;1526494919;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 60000)_	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,60000,public,void,test,scheduled,executor,service,periodic,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServicePeriodicSchedule() throws Exception;1548316608;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 60000)_	public void testScheduledExecutorServicePeriodicSchedule() throws Exception {_		ScheduledExecutor scheduledExecutor = AKKA_RPC_SERVICE.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			countDownLatch::countDown,_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,60000,public,void,test,scheduled,executor,service,periodic,schedule,throws,exception,scheduled,executor,scheduled,executor,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServicePeriodicSchedule() throws Exception;1548326020;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 60000)_	public void testScheduledExecutorServicePeriodicSchedule() throws Exception {_		ScheduledExecutor scheduledExecutor = AKKA_RPC_SERVICE.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			countDownLatch::countDown,_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,60000,public,void,test,scheduled,executor,service,periodic,schedule,throws,exception,scheduled,executor,scheduled,executor,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServicePeriodicSchedule() throws Exception;1550005039;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 60000)_	public void testScheduledExecutorServicePeriodicSchedule() throws Exception {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			countDownLatch::countDown,_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,60000,public,void,test,scheduled,executor,service,periodic,schedule,throws,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws Exception;1548316608;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws Exception {_		ScheduledExecutor scheduledExecutor = AKKA_RPC_SERVICE.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			countDownLatch::countDown,_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,60000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,exception,scheduled,executor,scheduled,executor,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws Exception;1548326020;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws Exception {_		ScheduledExecutor scheduledExecutor = AKKA_RPC_SERVICE.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			countDownLatch::countDown,_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,60000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,exception,scheduled,executor,scheduled,executor,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws Exception;1550005039;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws Exception {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			countDownLatch::countDown,_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,60000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testTerminationFuture() throws ExecutionException, InterruptedException;1488381280;Tests that we can wait for the termination of the rpc service__@throws ExecutionException_@throws InterruptedException;@Test(timeout = 60000)_	public void testTerminationFuture() throws ExecutionException, InterruptedException {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		Future<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		FlinkFuture.supplyAsync(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				rpcService.stopService()___				return null__			}_		}, actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service,throws,execution,exception,throws,interrupted,exception;test,timeout,60000,public,void,test,termination,future,throws,execution,exception,interrupted,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,rpc,service,stop,service,return,null,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testTerminationFuture() throws ExecutionException, InterruptedException;1499378241;Tests that we can wait for the termination of the rpc service__@throws ExecutionException_@throws InterruptedException;@Test(timeout = 60000)_	public void testTerminationFuture() throws ExecutionException, InterruptedException {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		Future<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		FlinkFuture.supplyAsync(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				rpcService.stopService()___				return null__			}_		}, actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service,throws,execution,exception,throws,interrupted,exception;test,timeout,60000,public,void,test,termination,future,throws,execution,exception,interrupted,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,rpc,service,stop,service,return,null,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testTerminationFuture() throws ExecutionException, InterruptedException;1501760738;Tests that we can wait for the termination of the rpc service__@throws ExecutionException_@throws InterruptedException;@Test(timeout = 60000)_	public void testTerminationFuture() throws ExecutionException, InterruptedException {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		CompletableFuture<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(() -> rpcService.stopService(), actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service,throws,execution,exception,throws,interrupted,exception;test,timeout,60000,public,void,test,termination,future,throws,execution,exception,interrupted,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,completable,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,service,stop,service,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testTerminationFuture() throws ExecutionException, InterruptedException;1507207963;Tests that we can wait for the termination of the rpc service__@throws ExecutionException_@throws InterruptedException;@Test(timeout = 60000)_	public void testTerminationFuture() throws ExecutionException, InterruptedException {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		CompletableFuture<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(() -> rpcService.stopService(), actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service,throws,execution,exception,throws,interrupted,exception;test,timeout,60000,public,void,test,termination,future,throws,execution,exception,interrupted,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,completable,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,service,stop,service,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testTerminationFuture() throws ExecutionException, InterruptedException;1515481550;Tests that we can wait for the termination of the rpc service__@throws ExecutionException_@throws InterruptedException;@Test(timeout = 60000)_	public void testTerminationFuture() throws ExecutionException, InterruptedException {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		CompletableFuture<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(() -> rpcService.stopService(), actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service,throws,execution,exception,throws,interrupted,exception;test,timeout,60000,public,void,test,termination,future,throws,execution,exception,interrupted,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,completable,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,service,stop,service,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException;1488381280;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			new Runnable() {_				@Override_				public void run() {_					latch.trigger()__				}_			},_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,60000,public,void,test,scheduled,executor,service,simple,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,new,runnable,override,public,void,run,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException;1499378241;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			new Runnable() {_				@Override_				public void run() {_					latch.trigger()__				}_			},_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,60000,public,void,test,scheduled,executor,service,simple,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,new,runnable,override,public,void,run,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException;1501760738;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			new Runnable() {_				@Override_				public void run() {_					latch.trigger()__				}_			},_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,60000,public,void,test,scheduled,executor,service,simple,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,new,runnable,override,public,void,run,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException;1507207963;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			new Runnable() {_				@Override_				public void run() {_					latch.trigger()__				}_			},_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,60000,public,void,test,scheduled,executor,service,simple,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,new,runnable,override,public,void,run,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException;1515481550;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			new Runnable() {_				@Override_				public void run() {_					latch.trigger()__				}_			},_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,60000,public,void,test,scheduled,executor,service,simple,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,new,runnable,override,public,void,run,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException;1515583670;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			new Runnable() {_				@Override_				public void run() {_					latch.trigger()__				}_			},_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,60000,public,void,test,scheduled,executor,service,simple,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,new,runnable,override,public,void,run,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException;1519406526;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			new Runnable() {_				@Override_				public void run() {_					latch.trigger()__				}_			},_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,60000,public,void,test,scheduled,executor,service,simple,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,new,runnable,override,public,void,run,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException;1522681180;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			new Runnable() {_				@Override_				public void run() {_					latch.trigger()__				}_			},_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,60000,public,void,test,scheduled,executor,service,simple,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,new,runnable,override,public,void,run,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException;1526387042;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			new Runnable() {_				@Override_				public void run() {_					latch.trigger()__				}_			},_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,60000,public,void,test,scheduled,executor,service,simple,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,new,runnable,override,public,void,run,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException;1526494919;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceSimpleSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			new Runnable() {_				@Override_				public void run() {_					latch.trigger()__				}_			},_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,60000,public,void,test,scheduled,executor,service,simple,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,new,runnable,override,public,void,run,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1487944132;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					try {_						if (!futureTask.isTriggered()) {_							_							futureTask.trigger()__							latch.await()__						} else {_							shouldNotBeTriggeredLatch.trigger()__						}_					} catch (InterruptedException e) {_						_					}_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,try,if,future,task,is,triggered,future,task,trigger,latch,await,else,should,not,be,triggered,latch,trigger,catch,interrupted,exception,e,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1487944132;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					try {_						if (!futureTask.isTriggered()) {_							_							futureTask.trigger()__							latch.await()__						} else {_							shouldNotBeTriggeredLatch.trigger()__						}_					} catch (InterruptedException e) {_						_					}_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,try,if,future,task,is,triggered,future,task,trigger,latch,await,else,should,not,be,triggered,latch,trigger,catch,interrupted,exception,e,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1488381280;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					try {_						if (!futureTask.isTriggered()) {_							_							futureTask.trigger()__							latch.await()__						} else {_							shouldNotBeTriggeredLatch.trigger()__						}_					} catch (InterruptedException e) {_						_					}_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,try,if,future,task,is,triggered,future,task,trigger,latch,await,else,should,not,be,triggered,latch,trigger,catch,interrupted,exception,e,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1499378241;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					try {_						if (!futureTask.isTriggered()) {_							_							futureTask.trigger()__							latch.await()__						} else {_							shouldNotBeTriggeredLatch.trigger()__						}_					} catch (InterruptedException e) {_						_					}_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,try,if,future,task,is,triggered,future,task,trigger,latch,await,else,should,not,be,triggered,latch,trigger,catch,interrupted,exception,e,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1501760738;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					try {_						if (!futureTask.isTriggered()) {_							_							futureTask.trigger()__							latch.await()__						} else {_							shouldNotBeTriggeredLatch.trigger()__						}_					} catch (InterruptedException e) {_						_					}_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,try,if,future,task,is,triggered,future,task,trigger,latch,await,else,should,not,be,triggered,latch,trigger,catch,interrupted,exception,e,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1507207963;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					try {_						if (!futureTask.isTriggered()) {_							_							futureTask.trigger()__							latch.await()__						} else {_							shouldNotBeTriggeredLatch.trigger()__						}_					} catch (InterruptedException e) {_						_					}_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,try,if,future,task,is,triggered,future,task,trigger,latch,await,else,should,not,be,triggered,latch,trigger,catch,interrupted,exception,e,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1515481550;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					try {_						if (!futureTask.isTriggered()) {_							_							futureTask.trigger()__							latch.await()__						} else {_							shouldNotBeTriggeredLatch.trigger()__						}_					} catch (InterruptedException e) {_						_					}_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,try,if,future,task,is,triggered,future,task,trigger,latch,await,else,should,not,be,triggered,latch,trigger,catch,interrupted,exception,e,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1515583670;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					try {_						if (!futureTask.isTriggered()) {_							_							futureTask.trigger()__							latch.await()__						} else {_							shouldNotBeTriggeredLatch.trigger()__						}_					} catch (InterruptedException e) {_						_					}_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,try,if,future,task,is,triggered,future,task,trigger,latch,await,else,should,not,be,triggered,latch,trigger,catch,interrupted,exception,e,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1519406526;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					try {_						if (!futureTask.isTriggered()) {_							_							futureTask.trigger()__							latch.await()__						} else {_							shouldNotBeTriggeredLatch.trigger()__						}_					} catch (InterruptedException e) {_						_					}_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,try,if,future,task,is,triggered,future,task,trigger,latch,await,else,should,not,be,triggered,latch,trigger,catch,interrupted,exception,e,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1522681180;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					try {_						if (!futureTask.isTriggered()) {_							_							futureTask.trigger()__							latch.await()__						} else {_							shouldNotBeTriggeredLatch.trigger()__						}_					} catch (InterruptedException e) {_						_					}_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,try,if,future,task,is,triggered,future,task,trigger,latch,await,else,should,not,be,triggered,latch,trigger,catch,interrupted,exception,e,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1526387042;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					try {_						if (!futureTask.isTriggered()) {_							_							futureTask.trigger()__							latch.await()__						} else {_							shouldNotBeTriggeredLatch.trigger()__						}_					} catch (InterruptedException e) {_						_					}_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,try,if,future,task,is,triggered,future,task,trigger,latch,await,else,should,not,be,triggered,latch,trigger,catch,interrupted,exception,e,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1526494919;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					try {_						if (!futureTask.isTriggered()) {_							_							futureTask.trigger()__							latch.await()__						} else {_							shouldNotBeTriggeredLatch.trigger()__						}_					} catch (InterruptedException e) {_						_					}_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,try,if,future,task,is,triggered,future,task,trigger,latch,await,else,should,not,be,triggered,latch,trigger,catch,interrupted,exception,e,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1548316608;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = AKKA_RPC_SERVICE.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			() -> {_				try {_					if (futureTask.isTriggered()) {_						shouldNotBeTriggeredLatch.trigger()__					} else {_						_						futureTask.trigger()__						latch.await()__					}_				} catch (InterruptedException ignored) {_					_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,try,if,future,task,is,triggered,should,not,be,triggered,latch,trigger,else,future,task,trigger,latch,await,catch,interrupted,exception,ignored,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1548326020;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = AKKA_RPC_SERVICE.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			() -> {_				try {_					if (futureTask.isTriggered()) {_						shouldNotBeTriggeredLatch.trigger()__					} else {_						_						futureTask.trigger()__						latch.await()__					}_				} catch (InterruptedException ignored) {_					_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,try,if,future,task,is,triggered,should,not,be,triggered,latch,trigger,else,future,task,trigger,latch,await,catch,interrupted,exception,ignored,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test 	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException;1550005039;Tests that canceling the returned future will stop the execution of the scheduled runnable.;@Test_	public void testScheduledExecutorServiceCancelWithFixedDelay() throws InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		long delay = 10L___		final OneShotLatch futureTask = new OneShotLatch()__		final OneShotLatch latch = new OneShotLatch()__		final OneShotLatch shouldNotBeTriggeredLatch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			() -> {_				try {_					if (futureTask.isTriggered()) {_						shouldNotBeTriggeredLatch.trigger()__					} else {_						_						futureTask.trigger()__						latch.await()__					}_				} catch (InterruptedException ignored) {_					_				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		_		futureTask.await()___		_		future.cancel(false)___		latch.trigger()___		try {_			shouldNotBeTriggeredLatch.await(5 * delay, TimeUnit.MILLISECONDS)__			fail("The shouldNotBeTriggeredLatch should never be triggered.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,canceling,the,returned,future,will,stop,the,execution,of,the,scheduled,runnable;test,public,void,test,scheduled,executor,service,cancel,with,fixed,delay,throws,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,long,delay,10l,final,one,shot,latch,future,task,new,one,shot,latch,final,one,shot,latch,latch,new,one,shot,latch,final,one,shot,latch,should,not,be,triggered,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,try,if,future,task,is,triggered,should,not,be,triggered,latch,trigger,else,future,task,trigger,latch,await,catch,interrupted,exception,ignored,delay,delay,time,unit,milliseconds,future,task,await,future,cancel,false,latch,trigger,try,should,not,be,triggered,latch,await,5,delay,time,unit,milliseconds,fail,the,should,not,be,triggered,latch,should,never,be,triggered,catch,timeout,exception,e
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testTerminationFuture() throws Exception;1515583670;Tests that we can wait for the termination of the rpc service;@Test(timeout = 60000)_	public void testTerminationFuture() throws Exception {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		CompletableFuture<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(rpcService::stopService, actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service;test,timeout,60000,public,void,test,termination,future,throws,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,completable,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,service,stop,service,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testTerminationFuture() throws Exception;1519406526;Tests that we can wait for the termination of the rpc service;@Test(timeout = 60000)_	public void testTerminationFuture() throws Exception {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		CompletableFuture<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(rpcService::stopService, actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service;test,timeout,60000,public,void,test,termination,future,throws,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,completable,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,service,stop,service,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testTerminationFuture() throws Exception;1522681180;Tests that we can wait for the termination of the rpc service;@Test(timeout = 60000)_	public void testTerminationFuture() throws Exception {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		CompletableFuture<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(rpcService::stopService, actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service;test,timeout,60000,public,void,test,termination,future,throws,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,completable,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,service,stop,service,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testTerminationFuture() throws Exception;1526387042;Tests that we can wait for the termination of the rpc service;@Test(timeout = 60000)_	public void testTerminationFuture() throws Exception {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		CompletableFuture<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(rpcService::stopService, actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service;test,timeout,60000,public,void,test,termination,future,throws,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,completable,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,service,stop,service,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testTerminationFuture() throws Exception;1526494919;Tests that we can wait for the termination of the rpc service;@Test(timeout = 60000)_	public void testTerminationFuture() throws Exception {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		CompletableFuture<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(rpcService::stopService, actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service;test,timeout,60000,public,void,test,termination,future,throws,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,completable,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,service,stop,service,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testTerminationFuture() throws Exception;1548316608;Tests that we can wait for the termination of the rpc service.;@Test(timeout = 60000)_	public void testTerminationFuture() throws Exception {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		CompletableFuture<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(rpcService::stopService, actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service;test,timeout,60000,public,void,test,termination,future,throws,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,completable,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,service,stop,service,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testTerminationFuture() throws Exception;1548326020;Tests that we can wait for the termination of the rpc service.;@Test(timeout = 60000)_	public void testTerminationFuture() throws Exception {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(_			actorSystem, AkkaRpcServiceConfiguration.defaultConfiguration())___		CompletableFuture<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(rpcService::stopService, actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service;test,timeout,60000,public,void,test,termination,future,throws,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,akka,rpc,service,configuration,default,configuration,completable,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,service,stop,service,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testTerminationFuture() throws Exception;1550005039;Tests that we can wait for the termination of the rpc service.;@Test(timeout = 60000)_	public void testTerminationFuture() throws Exception {_		final AkkaRpcService rpcService = startAkkaRpcService()___		CompletableFuture<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		rpcService.stopService()___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service;test,timeout,60000,public,void,test,termination,future,throws,exception,final,akka,rpc,service,rpc,service,start,akka,rpc,service,completable,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,rpc,service,stop,service,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 1000) 	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException;1487944132;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 1000)_	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,1000,public,void,test,scheduled,executor,service,periodic,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 1000) 	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException;1487944132;Tests that the RPC service's scheduled executor service can execute runnables at a fixed_rate.;@Test(timeout = 1000)_	public void testScheduledExecutorServicePeriodicSchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleAtFixedRate(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnables,at,a,fixed,rate;test,timeout,1000,public,void,test,scheduled,executor,service,periodic,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,at,fixed,rate,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test 	public void testJobMasterResourceManagerRegistration() throws Exception;1482522855;Tests that the {@link JobMaster} can connect to the {@link ResourceManager} using the_{@link AkkaRpcService}.;@Test_	public void testJobMasterResourceManagerRegistration() throws Exception {_		Timeout akkaTimeout = new Timeout(10, TimeUnit.SECONDS)__		ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		ActorSystem actorSystem2 = AkkaUtils.createDefaultActorSystem()__		AkkaRpcService akkaRpcService = new AkkaRpcService(actorSystem, akkaTimeout)__		AkkaRpcService akkaRpcService2 = new AkkaRpcService(actorSystem2, akkaTimeout)__		ExecutorService executorService = new ForkJoinPool()___		ResourceManager resourceManager = new ResourceManager(akkaRpcService, executorService)__		JobMaster jobMaster = new JobMaster(akkaRpcService2, executorService)___		resourceManager.start()___		ResourceManagerGateway rm = resourceManager.getSelf()___		assertTrue(rm instanceof AkkaGateway)___		AkkaGateway akkaClient = (AkkaGateway) rm___		jobMaster.start()__		jobMaster.registerAtResourceManager(AkkaUtils.getAkkaURL(actorSystem, akkaClient.getActorRef()))___		_		FiniteDuration timeout = new FiniteDuration(20, TimeUnit.SECONDS)__		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && !jobMaster.isConnected()) {_			Thread.sleep(100)__		}__		assertFalse(deadline.isOverdue())___		jobMaster.shutDown()__		resourceManager.shutDown()__	};tests,that,the,link,job,master,can,connect,to,the,link,resource,manager,using,the,link,akka,rpc,service;test,public,void,test,job,master,resource,manager,registration,throws,exception,timeout,akka,timeout,new,timeout,10,time,unit,seconds,actor,system,actor,system,akka,utils,create,default,actor,system,actor,system,actor,system2,akka,utils,create,default,actor,system,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,actor,system,akka,timeout,akka,rpc,service,akka,rpc,service2,new,akka,rpc,service,actor,system2,akka,timeout,executor,service,executor,service,new,fork,join,pool,resource,manager,resource,manager,new,resource,manager,akka,rpc,service,executor,service,job,master,job,master,new,job,master,akka,rpc,service2,executor,service,resource,manager,start,resource,manager,gateway,rm,resource,manager,get,self,assert,true,rm,instanceof,akka,gateway,akka,gateway,akka,client,akka,gateway,rm,job,master,start,job,master,register,at,resource,manager,akka,utils,get,akka,url,actor,system,akka,client,get,actor,ref,finite,duration,timeout,new,finite,duration,20,time,unit,seconds,deadline,deadline,timeout,from,now,while,deadline,has,time,left,job,master,is,connected,thread,sleep,100,assert,false,deadline,is,overdue,job,master,shut,down,resource,manager,shut,down
AkkaRpcServiceTest -> @Test 	public void testJobMasterResourceManagerRegistration() throws Exception;1482522855;Tests that the {@link JobMaster} can connect to the {@link ResourceManager} using the_{@link AkkaRpcService}.;@Test_	public void testJobMasterResourceManagerRegistration() throws Exception {_		Timeout akkaTimeout = new Timeout(10, TimeUnit.SECONDS)__		ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		ActorSystem actorSystem2 = AkkaUtils.createDefaultActorSystem()__		AkkaRpcService akkaRpcService = new AkkaRpcService(actorSystem, akkaTimeout)__		AkkaRpcService akkaRpcService2 = new AkkaRpcService(actorSystem2, akkaTimeout)__		ExecutorService executorService = new ForkJoinPool()___		ResourceManager resourceManager = new ResourceManager(akkaRpcService, executorService)__		JobMaster jobMaster = new JobMaster(akkaRpcService2, executorService)___		ResourceManagerGateway rm = resourceManager.getSelf()___		assertTrue(rm instanceof AkkaGateway)___		AkkaGateway akkaClient = (AkkaGateway) rm___		_		jobMaster.registerAtResourceManager(AkkaUtils.getAkkaURL(actorSystem, akkaClient.getActorRef()))___		_		FiniteDuration timeout = new FiniteDuration(20, TimeUnit.SECONDS)__		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && !jobMaster.isConnected()) {_			Thread.sleep(100)__		}__		assertFalse(deadline.isOverdue())___		jobMaster.shutDown()__		resourceManager.shutDown()__	};tests,that,the,link,job,master,can,connect,to,the,link,resource,manager,using,the,link,akka,rpc,service;test,public,void,test,job,master,resource,manager,registration,throws,exception,timeout,akka,timeout,new,timeout,10,time,unit,seconds,actor,system,actor,system,akka,utils,create,default,actor,system,actor,system,actor,system2,akka,utils,create,default,actor,system,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,actor,system,akka,timeout,akka,rpc,service,akka,rpc,service2,new,akka,rpc,service,actor,system2,akka,timeout,executor,service,executor,service,new,fork,join,pool,resource,manager,resource,manager,new,resource,manager,akka,rpc,service,executor,service,job,master,job,master,new,job,master,akka,rpc,service2,executor,service,resource,manager,gateway,rm,resource,manager,get,self,assert,true,rm,instanceof,akka,gateway,akka,gateway,akka,client,akka,gateway,rm,job,master,register,at,resource,manager,akka,utils,get,akka,url,actor,system,akka,client,get,actor,ref,finite,duration,timeout,new,finite,duration,20,time,unit,seconds,deadline,deadline,timeout,from,now,while,deadline,has,time,left,job,master,is,connected,thread,sleep,100,assert,false,deadline,is,overdue,job,master,shut,down,resource,manager,shut,down
AkkaRpcServiceTest -> @Test 	public void testJobMasterResourceManagerRegistration() throws Exception;1482522856;Tests that the {@link JobMaster} can connect to the {@link ResourceManager} using the_{@link AkkaRpcService}.;@Test_	public void testJobMasterResourceManagerRegistration() throws Exception {_		Timeout akkaTimeout = new Timeout(10, TimeUnit.SECONDS)__		ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		ActorSystem actorSystem2 = AkkaUtils.createDefaultActorSystem()__		AkkaRpcService akkaRpcService = new AkkaRpcService(actorSystem, akkaTimeout)__		AkkaRpcService akkaRpcService2 = new AkkaRpcService(actorSystem2, akkaTimeout)__		ExecutorService executorService = new ForkJoinPool()___		ResourceManager resourceManager = new ResourceManager(akkaRpcService, executorService)__		JobMaster jobMaster = new JobMaster(akkaRpcService2, executorService)___		ResourceManagerGateway rm = resourceManager.getSelf()___		assertTrue(rm instanceof AkkaGateway)___		AkkaGateway akkaClient = (AkkaGateway) rm___		_		jobMaster.registerAtResourceManager(AkkaUtils.getAkkaURL(actorSystem, akkaClient.getRpcServer()))___		_		FiniteDuration timeout = new FiniteDuration(200, TimeUnit.SECONDS)__		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && !jobMaster.isConnected()) {_			Thread.sleep(100)__		}__		assertFalse(deadline.isOverdue())___		jobMaster.shutDown()__		resourceManager.shutDown()__	};tests,that,the,link,job,master,can,connect,to,the,link,resource,manager,using,the,link,akka,rpc,service;test,public,void,test,job,master,resource,manager,registration,throws,exception,timeout,akka,timeout,new,timeout,10,time,unit,seconds,actor,system,actor,system,akka,utils,create,default,actor,system,actor,system,actor,system2,akka,utils,create,default,actor,system,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,actor,system,akka,timeout,akka,rpc,service,akka,rpc,service2,new,akka,rpc,service,actor,system2,akka,timeout,executor,service,executor,service,new,fork,join,pool,resource,manager,resource,manager,new,resource,manager,akka,rpc,service,executor,service,job,master,job,master,new,job,master,akka,rpc,service2,executor,service,resource,manager,gateway,rm,resource,manager,get,self,assert,true,rm,instanceof,akka,gateway,akka,gateway,akka,client,akka,gateway,rm,job,master,register,at,resource,manager,akka,utils,get,akka,url,actor,system,akka,client,get,rpc,server,finite,duration,timeout,new,finite,duration,200,time,unit,seconds,deadline,deadline,timeout,from,now,while,deadline,has,time,left,job,master,is,connected,thread,sleep,100,assert,false,deadline,is,overdue,job,master,shut,down,resource,manager,shut,down
AkkaRpcServiceTest -> @Test 	public void testJobMasterResourceManagerRegistration() throws Exception;1482522856;Tests that the {@link JobMaster} can connect to the {@link ResourceManager} using the_{@link AkkaRpcService}.;@Test_	public void testJobMasterResourceManagerRegistration() throws Exception {_		Timeout akkaTimeout = new Timeout(10, TimeUnit.SECONDS)__		ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		ActorSystem actorSystem2 = AkkaUtils.createDefaultActorSystem()__		AkkaRpcService akkaRpcService = new AkkaRpcService(actorSystem, akkaTimeout)__		AkkaRpcService akkaRpcService2 = new AkkaRpcService(actorSystem2, akkaTimeout)__		ExecutorService executorService = new ForkJoinPool()___		ResourceManager resourceManager = new ResourceManager(akkaRpcService, executorService)__		JobMaster jobMaster = new JobMaster(akkaRpcService2, executorService)___		ResourceManagerGateway rm = resourceManager.getSelf()___		assertTrue(rm instanceof AkkaGateway)___		AkkaGateway akkaClient = (AkkaGateway) rm___		_		jobMaster.registerAtResourceManager(AkkaUtils.getAkkaURL(actorSystem, akkaClient.getRpcServer()))___		_		FiniteDuration timeout = new FiniteDuration(200, TimeUnit.SECONDS)__		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && !jobMaster.isConnected()) {_			Thread.sleep(100)__		}__		assertFalse(deadline.isOverdue())___		jobMaster.shutDown()__		resourceManager.shutDown()__	};tests,that,the,link,job,master,can,connect,to,the,link,resource,manager,using,the,link,akka,rpc,service;test,public,void,test,job,master,resource,manager,registration,throws,exception,timeout,akka,timeout,new,timeout,10,time,unit,seconds,actor,system,actor,system,akka,utils,create,default,actor,system,actor,system,actor,system2,akka,utils,create,default,actor,system,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,actor,system,akka,timeout,akka,rpc,service,akka,rpc,service2,new,akka,rpc,service,actor,system2,akka,timeout,executor,service,executor,service,new,fork,join,pool,resource,manager,resource,manager,new,resource,manager,akka,rpc,service,executor,service,job,master,job,master,new,job,master,akka,rpc,service2,executor,service,resource,manager,gateway,rm,resource,manager,get,self,assert,true,rm,instanceof,akka,gateway,akka,gateway,akka,client,akka,gateway,rm,job,master,register,at,resource,manager,akka,utils,get,akka,url,actor,system,akka,client,get,rpc,server,finite,duration,timeout,new,finite,duration,200,time,unit,seconds,deadline,deadline,timeout,from,now,while,deadline,has,time,left,job,master,is,connected,thread,sleep,100,assert,false,deadline,is,overdue,job,master,shut,down,resource,manager,shut,down
AkkaRpcServiceTest -> @Test 	public void testJobMasterResourceManagerRegistration() throws Exception;1482522856;Tests that the {@link JobMaster} can connect to the {@link ResourceManager} using the_{@link AkkaRpcService}.;@Test_	public void testJobMasterResourceManagerRegistration() throws Exception {_		Timeout akkaTimeout = new Timeout(10, TimeUnit.SECONDS)__		ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		ActorSystem actorSystem2 = AkkaUtils.createDefaultActorSystem()__		AkkaRpcService akkaRpcService = new AkkaRpcService(actorSystem, akkaTimeout)__		AkkaRpcService akkaRpcService2 = new AkkaRpcService(actorSystem2, akkaTimeout)__		ExecutorService executorService = new ForkJoinPool()___		ResourceManager resourceManager = new ResourceManager(akkaRpcService, executorService)__		JobMaster jobMaster = new JobMaster(akkaRpcService2, executorService)___		ResourceManagerGateway rm = resourceManager.getSelf()___		assertTrue(rm instanceof AkkaGateway)___		AkkaGateway akkaClient = (AkkaGateway) rm___		_		jobMaster.registerAtResourceManager(AkkaUtils.getAkkaURL(actorSystem, akkaClient.getRpcEndpoint()))___		_		FiniteDuration timeout = new FiniteDuration(200, TimeUnit.SECONDS)__		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && !jobMaster.isConnected()) {_			Thread.sleep(100)__		}__		assertFalse(deadline.isOverdue())___		jobMaster.shutDown()__		resourceManager.shutDown()__	};tests,that,the,link,job,master,can,connect,to,the,link,resource,manager,using,the,link,akka,rpc,service;test,public,void,test,job,master,resource,manager,registration,throws,exception,timeout,akka,timeout,new,timeout,10,time,unit,seconds,actor,system,actor,system,akka,utils,create,default,actor,system,actor,system,actor,system2,akka,utils,create,default,actor,system,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,actor,system,akka,timeout,akka,rpc,service,akka,rpc,service2,new,akka,rpc,service,actor,system2,akka,timeout,executor,service,executor,service,new,fork,join,pool,resource,manager,resource,manager,new,resource,manager,akka,rpc,service,executor,service,job,master,job,master,new,job,master,akka,rpc,service2,executor,service,resource,manager,gateway,rm,resource,manager,get,self,assert,true,rm,instanceof,akka,gateway,akka,gateway,akka,client,akka,gateway,rm,job,master,register,at,resource,manager,akka,utils,get,akka,url,actor,system,akka,client,get,rpc,endpoint,finite,duration,timeout,new,finite,duration,200,time,unit,seconds,deadline,deadline,timeout,from,now,while,deadline,has,time,left,job,master,is,connected,thread,sleep,100,assert,false,deadline,is,overdue,job,master,shut,down,resource,manager,shut,down
AkkaRpcServiceTest -> @Test 	public void testJobMasterResourceManagerRegistration() throws Exception;1482522856;Tests that the {@link JobMaster} can connect to the {@link ResourceManager} using the_{@link AkkaRpcService}.;@Test_	public void testJobMasterResourceManagerRegistration() throws Exception {_		Timeout akkaTimeout = new Timeout(10, TimeUnit.SECONDS)__		ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		ActorSystem actorSystem2 = AkkaUtils.createDefaultActorSystem()__		AkkaRpcService akkaRpcService = new AkkaRpcService(actorSystem, akkaTimeout)__		AkkaRpcService akkaRpcService2 = new AkkaRpcService(actorSystem2, akkaTimeout)__		ExecutorService executorService = new ForkJoinPool()___		ResourceManager resourceManager = new ResourceManager(akkaRpcService, executorService)__		JobMaster jobMaster = new JobMaster(akkaRpcService2, executorService)___		resourceManager.start()__		jobMaster.start()___		ResourceManagerGateway rm = resourceManager.getSelf()___		assertTrue(rm instanceof AkkaGateway)___		AkkaGateway akkaClient = (AkkaGateway) rm___		_		jobMaster.registerAtResourceManager(AkkaUtils.getAkkaURL(actorSystem, akkaClient.getRpcEndpoint()))___		_		FiniteDuration timeout = new FiniteDuration(200, TimeUnit.SECONDS)__		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && !jobMaster.isConnected()) {_			Thread.sleep(100)__		}__		assertFalse(deadline.isOverdue())___		jobMaster.shutDown()__		resourceManager.shutDown()__	};tests,that,the,link,job,master,can,connect,to,the,link,resource,manager,using,the,link,akka,rpc,service;test,public,void,test,job,master,resource,manager,registration,throws,exception,timeout,akka,timeout,new,timeout,10,time,unit,seconds,actor,system,actor,system,akka,utils,create,default,actor,system,actor,system,actor,system2,akka,utils,create,default,actor,system,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,actor,system,akka,timeout,akka,rpc,service,akka,rpc,service2,new,akka,rpc,service,actor,system2,akka,timeout,executor,service,executor,service,new,fork,join,pool,resource,manager,resource,manager,new,resource,manager,akka,rpc,service,executor,service,job,master,job,master,new,job,master,akka,rpc,service2,executor,service,resource,manager,start,job,master,start,resource,manager,gateway,rm,resource,manager,get,self,assert,true,rm,instanceof,akka,gateway,akka,gateway,akka,client,akka,gateway,rm,job,master,register,at,resource,manager,akka,utils,get,akka,url,actor,system,akka,client,get,rpc,endpoint,finite,duration,timeout,new,finite,duration,200,time,unit,seconds,deadline,deadline,timeout,from,now,while,deadline,has,time,left,job,master,is,connected,thread,sleep,100,assert,false,deadline,is,overdue,job,master,shut,down,resource,manager,shut,down
AkkaRpcServiceTest -> @Test 	public void testJobMasterResourceManagerRegistration() throws Exception;1482522856;Tests that the {@link JobMaster} can connect to the {@link ResourceManager} using the_{@link AkkaRpcService}.;@Test_	public void testJobMasterResourceManagerRegistration() throws Exception {_		Timeout akkaTimeout = new Timeout(10, TimeUnit.SECONDS)__		ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		ActorSystem actorSystem2 = AkkaUtils.createDefaultActorSystem()__		AkkaRpcService akkaRpcService = new AkkaRpcService(actorSystem, akkaTimeout)__		AkkaRpcService akkaRpcService2 = new AkkaRpcService(actorSystem2, akkaTimeout)__		ExecutorService executorService = new ForkJoinPool()___		ResourceManager resourceManager = new ResourceManager(akkaRpcService, executorService)__		JobMaster jobMaster = new JobMaster(akkaRpcService2, executorService)___		resourceManager.start()__		jobMaster.start()___		ResourceManagerGateway rm = resourceManager.getSelf()___		assertTrue(rm instanceof AkkaGateway)___		AkkaGateway akkaClient = (AkkaGateway) rm___		_		jobMaster.registerAtResourceManager(AkkaUtils.getAkkaURL(actorSystem, akkaClient.getRpcEndpoint()))___		_		FiniteDuration timeout = new FiniteDuration(200, TimeUnit.SECONDS)__		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && !jobMaster.isConnected()) {_			Thread.sleep(100)__		}__		assertFalse(deadline.isOverdue())___		jobMaster.shutDown()__		resourceManager.shutDown()__	};tests,that,the,link,job,master,can,connect,to,the,link,resource,manager,using,the,link,akka,rpc,service;test,public,void,test,job,master,resource,manager,registration,throws,exception,timeout,akka,timeout,new,timeout,10,time,unit,seconds,actor,system,actor,system,akka,utils,create,default,actor,system,actor,system,actor,system2,akka,utils,create,default,actor,system,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,actor,system,akka,timeout,akka,rpc,service,akka,rpc,service2,new,akka,rpc,service,actor,system2,akka,timeout,executor,service,executor,service,new,fork,join,pool,resource,manager,resource,manager,new,resource,manager,akka,rpc,service,executor,service,job,master,job,master,new,job,master,akka,rpc,service2,executor,service,resource,manager,start,job,master,start,resource,manager,gateway,rm,resource,manager,get,self,assert,true,rm,instanceof,akka,gateway,akka,gateway,akka,client,akka,gateway,rm,job,master,register,at,resource,manager,akka,utils,get,akka,url,actor,system,akka,client,get,rpc,endpoint,finite,duration,timeout,new,finite,duration,200,time,unit,seconds,deadline,deadline,timeout,from,now,while,deadline,has,time,left,job,master,is,connected,thread,sleep,100,assert,false,deadline,is,overdue,job,master,shut,down,resource,manager,shut,down
AkkaRpcServiceTest -> @Test(timeout = 1000) 	public void testTerminationFuture() throws ExecutionException, InterruptedException;1482522861;Tests that we can wait for the termination of the rpc service__@throws ExecutionException_@throws InterruptedException;@Test(timeout = 1000)_	public void testTerminationFuture() throws ExecutionException, InterruptedException {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		Future<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		FlinkFuture.supplyAsync(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				rpcService.stopService()___				return null__			}_		}, actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service,throws,execution,exception,throws,interrupted,exception;test,timeout,1000,public,void,test,termination,future,throws,execution,exception,interrupted,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,rpc,service,stop,service,return,null,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 1000) 	public void testTerminationFuture() throws ExecutionException, InterruptedException;1487944132;Tests that we can wait for the termination of the rpc service__@throws ExecutionException_@throws InterruptedException;@Test(timeout = 1000)_	public void testTerminationFuture() throws ExecutionException, InterruptedException {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		Future<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		FlinkFuture.supplyAsync(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				rpcService.stopService()___				return null__			}_		}, actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service,throws,execution,exception,throws,interrupted,exception;test,timeout,1000,public,void,test,termination,future,throws,execution,exception,interrupted,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,rpc,service,stop,service,return,null,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test(timeout = 1000) 	public void testTerminationFuture() throws ExecutionException, InterruptedException;1487944132;Tests that we can wait for the termination of the rpc service__@throws ExecutionException_@throws InterruptedException;@Test(timeout = 1000)_	public void testTerminationFuture() throws ExecutionException, InterruptedException {_		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()__		final AkkaRpcService rpcService = new AkkaRpcService(actorSystem, Time.milliseconds(1000))___		Future<Void> terminationFuture = rpcService.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		FlinkFuture.supplyAsync(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				rpcService.stopService()___				return null__			}_		}, actorSystem.dispatcher())___		terminationFuture.get()__	};tests,that,we,can,wait,for,the,termination,of,the,rpc,service,throws,execution,exception,throws,interrupted,exception;test,timeout,1000,public,void,test,termination,future,throws,execution,exception,interrupted,exception,final,actor,system,actor,system,akka,utils,create,default,actor,system,final,akka,rpc,service,rpc,service,new,akka,rpc,service,actor,system,time,milliseconds,1000,future,void,termination,future,rpc,service,get,termination,future,assert,false,termination,future,is,done,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,rpc,service,stop,service,return,null,actor,system,dispatcher,termination,future,get
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1482522859;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(new Runnable() {_			@Override_			public void run() {_				latch.trigger()__			}_		})___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,new,runnable,override,public,void,run,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1482522860;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(new Runnable() {_			@Override_			public void run() {_				latch.trigger()__			}_		})___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,new,runnable,override,public,void,run,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1482522861;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(new Runnable() {_			@Override_			public void run() {_				latch.trigger()__			}_		})___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,new,runnable,override,public,void,run,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1487944132;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(new Runnable() {_			@Override_			public void run() {_				latch.trigger()__			}_		})___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,new,runnable,override,public,void,run,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1487944132;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(new Runnable() {_			@Override_			public void run() {_				latch.trigger()__			}_		})___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,new,runnable,override,public,void,run,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1488381280;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(new Runnable() {_			@Override_			public void run() {_				latch.trigger()__			}_		})___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,new,runnable,override,public,void,run,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1499378241;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(new Runnable() {_			@Override_			public void run() {_				latch.trigger()__			}_		})___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,new,runnable,override,public,void,run,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1501760738;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(() -> latch.trigger())___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1507207963;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(() -> latch.trigger())___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1515481550;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(() -> latch.trigger())___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1515583670;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(() -> latch.trigger())___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1519406526;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(() -> latch.trigger())___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1522681180;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(() -> latch.trigger())___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1526387042;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(() -> latch.trigger())___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1526494919;Tests that the {@link AkkaRpcService} can execute runnables;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(() -> latch.trigger())___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1548316608;Tests that the {@link AkkaRpcService} can execute runnables.;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		AKKA_RPC_SERVICE.execute(latch::trigger)___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,execute,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1548326020;Tests that the {@link AkkaRpcService} can execute runnables.;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		AKKA_RPC_SERVICE.execute(latch::trigger)___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,execute,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test 	public void testExecuteRunnable() throws Exception;1550005039;Tests that the {@link AkkaRpcService} can execute runnables.;@Test_	public void testExecuteRunnable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()___		akkaRpcService.execute(latch::trigger)___		latch.await(30L, TimeUnit.SECONDS)__	};tests,that,the,link,akka,rpc,service,can,execute,runnables;test,public,void,test,execute,runnable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,akka,rpc,service,execute,latch,trigger,latch,await,30l,time,unit,seconds
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceSimpleSchedule() throws Exception;1548316608;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceSimpleSchedule() throws Exception {_		ScheduledExecutor scheduledExecutor = AKKA_RPC_SERVICE.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			latch::trigger,_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,60000,public,void,test,scheduled,executor,service,simple,schedule,throws,exception,scheduled,executor,scheduled,executor,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceSimpleSchedule() throws Exception;1548326020;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceSimpleSchedule() throws Exception {_		ScheduledExecutor scheduledExecutor = AKKA_RPC_SERVICE.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			latch::trigger,_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,60000,public,void,test,scheduled,executor,service,simple,schedule,throws,exception,scheduled,executor,scheduled,executor,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 60000) 	public void testScheduledExecutorServiceSimpleSchedule() throws Exception;1550005039;Tests a simple scheduled runnable being executed by the RPC services scheduled executor_service.;@Test(timeout = 60000)_	public void testScheduledExecutorServiceSimpleSchedule() throws Exception {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final OneShotLatch latch = new OneShotLatch()___		ScheduledFuture<?> future = scheduledExecutor.schedule(_			latch::trigger,_			10L,_			TimeUnit.MILLISECONDS)___		future.get()___		_		assertTrue(latch.isTriggered())__	};tests,a,simple,scheduled,runnable,being,executed,by,the,rpc,services,scheduled,executor,service;test,timeout,60000,public,void,test,scheduled,executor,service,simple,schedule,throws,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,one,shot,latch,latch,new,one,shot,latch,scheduled,future,future,scheduled,executor,schedule,latch,trigger,10l,time,unit,milliseconds,future,get,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws Exception;1548316608;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link CompletableFuture}.;@Test_	public void testExecuteCallable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		CompletableFuture<Integer> result = AKKA_RPC_SERVICE.execute(() -> {_			latch.trigger()__			return expected__		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,completable,future;test,public,void,test,execute,callable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,completable,future,integer,result,execute,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws Exception;1548326020;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link CompletableFuture}.;@Test_	public void testExecuteCallable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		CompletableFuture<Integer> result = AKKA_RPC_SERVICE.execute(() -> {_			latch.trigger()__			return expected__		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,completable,future;test,public,void,test,execute,callable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,completable,future,integer,result,execute,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws Exception;1550005039;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link CompletableFuture}.;@Test_	public void testExecuteCallable() throws Exception {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		CompletableFuture<Integer> result = akkaRpcService.execute(() -> {_			latch.trigger()__			return expected__		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,completable,future;test,public,void,test,execute,callable,throws,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,completable,future,integer,result,akka,rpc,service,execute,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1482522859;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link Future}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		Future<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1482522860;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link Future}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		Future<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1482522861;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link Future}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		Future<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1487944132;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link Future}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		Future<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1487944132;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link Future}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		Future<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1488381280;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link Future}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		Future<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1499378241;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link Future}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		Future<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1501760738;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link CompletableFuture}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		CompletableFuture<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,completable,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,completable,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1507207963;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link CompletableFuture}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		CompletableFuture<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,completable,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,completable,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1515481550;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link CompletableFuture}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		CompletableFuture<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,completable,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,completable,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1515583670;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link CompletableFuture}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		CompletableFuture<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,completable,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,completable,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1519406526;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link CompletableFuture}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		CompletableFuture<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,completable,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,completable,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1522681180;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link CompletableFuture}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		CompletableFuture<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,completable,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,completable,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1526387042;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link CompletableFuture}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		CompletableFuture<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,completable,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,completable,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test 	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException;1526494919;Tests that the {@link AkkaRpcService} can execute callables and returns their result as_a {@link CompletableFuture}.;@Test_	public void testExecuteCallable() throws InterruptedException, ExecutionException, TimeoutException {_		final OneShotLatch latch = new OneShotLatch()__		final int expected = 42___		CompletableFuture<Integer> result = akkaRpcService.execute(new Callable<Integer>() {_			@Override_			public Integer call() throws Exception {_				latch.trigger()__				return expected__			}_		})___		int actual = result.get(30L, TimeUnit.SECONDS)___		assertEquals(expected, actual)__		assertTrue(latch.isTriggered())__	};tests,that,the,link,akka,rpc,service,can,execute,callables,and,returns,their,result,as,a,link,completable,future;test,public,void,test,execute,callable,throws,interrupted,exception,execution,exception,timeout,exception,final,one,shot,latch,latch,new,one,shot,latch,final,int,expected,42,completable,future,integer,result,akka,rpc,service,execute,new,callable,integer,override,public,integer,call,throws,exception,latch,trigger,return,expected,int,actual,result,get,30l,time,unit,seconds,assert,equals,expected,actual,assert,true,latch,is,triggered
AkkaRpcServiceTest -> @Test(timeout = 1000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException;1487944132;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 1000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,1000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
AkkaRpcServiceTest -> @Test(timeout = 1000) 	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException;1487944132;Tests that the RPC service's scheduled executor service can execute runnable with a fixed_delay.;@Test(timeout = 1000)_	public void testScheduledExecutorServiceWithFixedDelaySchedule() throws ExecutionException, InterruptedException {_		ScheduledExecutor scheduledExecutor = akkaRpcService.getScheduledExecutor()___		final int tries = 4__		final long delay = 10L__		final CountDownLatch countDownLatch = new CountDownLatch(tries)___		long currentTime = System.nanoTime()___		ScheduledFuture<?> future = scheduledExecutor.scheduleWithFixedDelay(_			new Runnable() {_				@Override_				public void run() {_					countDownLatch.countDown()__				}_			},_			delay,_			delay,_			TimeUnit.MILLISECONDS)___		assertTrue(!future.isDone())___		countDownLatch.await()___		_		assertTrue(!future.isDone())___		long finalTime = System.nanoTime() - currentTime___		_		assertTrue(finalTime >= tries * delay)___		future.cancel(true)__	};tests,that,the,rpc,service,s,scheduled,executor,service,can,execute,runnable,with,a,fixed,delay;test,timeout,1000,public,void,test,scheduled,executor,service,with,fixed,delay,schedule,throws,execution,exception,interrupted,exception,scheduled,executor,scheduled,executor,akka,rpc,service,get,scheduled,executor,final,int,tries,4,final,long,delay,10l,final,count,down,latch,count,down,latch,new,count,down,latch,tries,long,current,time,system,nano,time,scheduled,future,future,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,count,down,latch,count,down,delay,delay,time,unit,milliseconds,assert,true,future,is,done,count,down,latch,await,assert,true,future,is,done,long,final,time,system,nano,time,current,time,assert,true,final,time,tries,delay,future,cancel,true
