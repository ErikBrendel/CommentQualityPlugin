# id;timestamp;commentText;codeText;commentWords;codeWords
BlobServerRangeTest -> @Test(expected = IOException.class) 	public void testPortUnavailable() throws IOException;1448376996;Try allocating on an unavailable port_@throws IOException;@Test(expected = IOException.class)_	public void testPortUnavailable() throws IOException {_		_		ServerSocket socket = null__		try {_			socket = new ServerSocket(0)__		} catch (IOException e) {_			e.printStackTrace()__			Assert.fail("An exception was thrown while preparing the test " + e.getMessage())__		}__		Configuration conf = new Configuration()__		conf.setString(ConfigConstants.BLOB_SERVER_PORT, String.valueOf(socket.getLocalPort()))___		_		try {_			BlobServer srv = new BlobServer(conf)__		} finally {_			socket.close()__		}_	};try,allocating,on,an,unavailable,port,throws,ioexception;test,expected,ioexception,class,public,void,test,port,unavailable,throws,ioexception,server,socket,socket,null,try,socket,new,server,socket,0,catch,ioexception,e,e,print,stack,trace,assert,fail,an,exception,was,thrown,while,preparing,the,test,e,get,message,configuration,conf,new,configuration,conf,set,string,config,constants,string,value,of,socket,get,local,port,try,blob,server,srv,new,blob,server,conf,finally,socket,close
BlobServerRangeTest -> @Test(expected = IOException.class) 	public void testPortUnavailable() throws IOException;1487441974;Try allocating on an unavailable port_@throws IOException;@Test(expected = IOException.class)_	public void testPortUnavailable() throws IOException {_		_		ServerSocket socket = null__		try {_			socket = new ServerSocket(0)__		} catch (IOException e) {_			e.printStackTrace()__			Assert.fail("An exception was thrown while preparing the test " + e.getMessage())__		}__		Configuration conf = new Configuration()__		conf.setString(ConfigConstants.BLOB_SERVER_PORT, String.valueOf(socket.getLocalPort()))___		_		try {_			BlobServer srv = new BlobServer(conf)__		} finally {_			socket.close()__		}_	};try,allocating,on,an,unavailable,port,throws,ioexception;test,expected,ioexception,class,public,void,test,port,unavailable,throws,ioexception,server,socket,socket,null,try,socket,new,server,socket,0,catch,ioexception,e,e,print,stack,trace,assert,fail,an,exception,was,thrown,while,preparing,the,test,e,get,message,configuration,conf,new,configuration,conf,set,string,config,constants,string,value,of,socket,get,local,port,try,blob,server,srv,new,blob,server,conf,finally,socket,close
BlobServerRangeTest -> @Test(expected = IOException.class) 	public void testPortUnavailable() throws IOException;1494690800;Try allocating on an unavailable port_@throws IOException;@Test(expected = IOException.class)_	public void testPortUnavailable() throws IOException {_		_		ServerSocket socket = null__		try {_			socket = new ServerSocket(0)__		} catch (IOException e) {_			e.printStackTrace()__			Assert.fail("An exception was thrown while preparing the test " + e.getMessage())__		}__		Configuration conf = new Configuration()__		conf.setString(BlobServerOptions.PORT, String.valueOf(socket.getLocalPort()))___		_		try {_			BlobServer srv = new BlobServer(conf)__		} finally {_			socket.close()__		}_	};try,allocating,on,an,unavailable,port,throws,ioexception;test,expected,ioexception,class,public,void,test,port,unavailable,throws,ioexception,server,socket,socket,null,try,socket,new,server,socket,0,catch,ioexception,e,e,print,stack,trace,assert,fail,an,exception,was,thrown,while,preparing,the,test,e,get,message,configuration,conf,new,configuration,conf,set,string,blob,server,options,port,string,value,of,socket,get,local,port,try,blob,server,srv,new,blob,server,conf,finally,socket,close
BlobServerRangeTest -> @Test(expected = IOException.class) 	public void testPortUnavailable() throws IOException;1495001929;Try allocating on an unavailable port_@throws IOException;@Test(expected = IOException.class)_	public void testPortUnavailable() throws IOException {_		_		ServerSocket socket = null__		try {_			socket = new ServerSocket(0)__		} catch (IOException e) {_			e.printStackTrace()__			Assert.fail("An exception was thrown while preparing the test " + e.getMessage())__		}__		Configuration conf = new Configuration()__		conf.setString(BlobServerOptions.PORT, String.valueOf(socket.getLocalPort()))___		_		try {_			BlobServer srv = new BlobServer(conf, new VoidBlobStore())__		} finally {_			socket.close()__		}_	};try,allocating,on,an,unavailable,port,throws,ioexception;test,expected,ioexception,class,public,void,test,port,unavailable,throws,ioexception,server,socket,socket,null,try,socket,new,server,socket,0,catch,ioexception,e,e,print,stack,trace,assert,fail,an,exception,was,thrown,while,preparing,the,test,e,get,message,configuration,conf,new,configuration,conf,set,string,blob,server,options,port,string,value,of,socket,get,local,port,try,blob,server,srv,new,blob,server,conf,new,void,blob,store,finally,socket,close
BlobServerRangeTest -> @Test(expected = IOException.class) 	public void testPortUnavailable() throws IOException;1502100084;Try allocating on an unavailable port_@throws IOException;@Test(expected = IOException.class)_	public void testPortUnavailable() throws IOException {_		_		ServerSocket socket = null__		try {_			socket = new ServerSocket(0)__		} catch (IOException e) {_			e.printStackTrace()__			Assert.fail("An exception was thrown while preparing the test " + e.getMessage())__		}__		Configuration conf = new Configuration()__		conf.setString(BlobServerOptions.PORT, String.valueOf(socket.getLocalPort()))__		conf.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		_		try {_			BlobServer srv = new BlobServer(conf, new VoidBlobStore())__		} finally {_			socket.close()__		}_	};try,allocating,on,an,unavailable,port,throws,ioexception;test,expected,ioexception,class,public,void,test,port,unavailable,throws,ioexception,server,socket,socket,null,try,socket,new,server,socket,0,catch,ioexception,e,e,print,stack,trace,assert,fail,an,exception,was,thrown,while,preparing,the,test,e,get,message,configuration,conf,new,configuration,conf,set,string,blob,server,options,port,string,value,of,socket,get,local,port,conf,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,srv,new,blob,server,conf,new,void,blob,store,finally,socket,close
BlobServerRangeTest -> @Test(expected = IOException.class) 	public void testPortUnavailable() throws IOException;1507212387;Try allocating on an unavailable port.;@Test(expected = IOException.class)_	public void testPortUnavailable() throws IOException {_		_		ServerSocket socket = null__		try {_			socket = new ServerSocket(0)__		} catch (IOException e) {_			e.printStackTrace()__			Assert.fail("An exception was thrown while preparing the test " + e.getMessage())__		}__		Configuration conf = new Configuration()__		conf.setString(BlobServerOptions.PORT, String.valueOf(socket.getLocalPort()))__		conf.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		_		try {_			BlobServer server = new BlobServer(conf, new VoidBlobStore())__			server.start()__		} finally {_			socket.close()__		}_	};try,allocating,on,an,unavailable,port;test,expected,ioexception,class,public,void,test,port,unavailable,throws,ioexception,server,socket,socket,null,try,socket,new,server,socket,0,catch,ioexception,e,e,print,stack,trace,assert,fail,an,exception,was,thrown,while,preparing,the,test,e,get,message,configuration,conf,new,configuration,conf,set,string,blob,server,options,port,string,value,of,socket,get,local,port,conf,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,conf,new,void,blob,store,server,start,finally,socket,close
BlobServerRangeTest -> @Test 	public void testOnePortAvailable() throws IOException;1448376996;Give the BlobServer a choice of three ports, where two of them_are allocated;@Test_	public void testOnePortAvailable() throws IOException {_		int numAllocated = 2__		ServerSocket[] sockets = new ServerSocket[numAllocated]__		for(int i = 0_ i < numAllocated_ i++) {_			ServerSocket socket = null__			try {_				sockets[i] = new ServerSocket(0)__			} catch (IOException e) {_				e.printStackTrace()__				Assert.fail("An exception was thrown while preparing the test " + e.getMessage())__			}_		}_		int availablePort = NetUtils.getAvailablePort()__		Configuration conf = new Configuration()__		conf.setString(ConfigConstants.BLOB_SERVER_PORT, sockets[0].getLocalPort() + "," + sockets[1].getLocalPort() + "," + availablePort)___		_		try {_			BlobServer srv = new BlobServer(conf)__			Assert.assertEquals(availablePort, srv.getPort())__			srv.shutdown()__		} finally {_			sockets[0].close()__			sockets[1].close()__		}_	};give,the,blob,server,a,choice,of,three,ports,where,two,of,them,are,allocated;test,public,void,test,one,port,available,throws,ioexception,int,num,allocated,2,server,socket,sockets,new,server,socket,num,allocated,for,int,i,0,i,num,allocated,i,server,socket,socket,null,try,sockets,i,new,server,socket,0,catch,ioexception,e,e,print,stack,trace,assert,fail,an,exception,was,thrown,while,preparing,the,test,e,get,message,int,available,port,net,utils,get,available,port,configuration,conf,new,configuration,conf,set,string,config,constants,sockets,0,get,local,port,sockets,1,get,local,port,available,port,try,blob,server,srv,new,blob,server,conf,assert,assert,equals,available,port,srv,get,port,srv,shutdown,finally,sockets,0,close,sockets,1,close
BlobServerRangeTest -> @Test 	public void testOnePortAvailable() throws IOException;1487441974;Give the BlobServer a choice of three ports, where two of them_are allocated;@Test_	public void testOnePortAvailable() throws IOException {_		int numAllocated = 2__		ServerSocket[] sockets = new ServerSocket[numAllocated]__		for(int i = 0_ i < numAllocated_ i++) {_			ServerSocket socket = null__			try {_				sockets[i] = new ServerSocket(0)__			} catch (IOException e) {_				e.printStackTrace()__				Assert.fail("An exception was thrown while preparing the test " + e.getMessage())__			}_		}_		int availablePort = NetUtils.getAvailablePort()__		Configuration conf = new Configuration()__		conf.setString(ConfigConstants.BLOB_SERVER_PORT, sockets[0].getLocalPort() + "," + sockets[1].getLocalPort() + "," + availablePort)___		_		try {_			BlobServer srv = new BlobServer(conf)__			Assert.assertEquals(availablePort, srv.getPort())__			srv.shutdown()__		} finally {_			sockets[0].close()__			sockets[1].close()__		}_	};give,the,blob,server,a,choice,of,three,ports,where,two,of,them,are,allocated;test,public,void,test,one,port,available,throws,ioexception,int,num,allocated,2,server,socket,sockets,new,server,socket,num,allocated,for,int,i,0,i,num,allocated,i,server,socket,socket,null,try,sockets,i,new,server,socket,0,catch,ioexception,e,e,print,stack,trace,assert,fail,an,exception,was,thrown,while,preparing,the,test,e,get,message,int,available,port,net,utils,get,available,port,configuration,conf,new,configuration,conf,set,string,config,constants,sockets,0,get,local,port,sockets,1,get,local,port,available,port,try,blob,server,srv,new,blob,server,conf,assert,assert,equals,available,port,srv,get,port,srv,shutdown,finally,sockets,0,close,sockets,1,close
BlobServerRangeTest -> @Test 	public void testOnePortAvailable() throws IOException;1494690800;Give the BlobServer a choice of three ports, where two of them_are allocated;@Test_	public void testOnePortAvailable() throws IOException {_		int numAllocated = 2__		ServerSocket[] sockets = new ServerSocket[numAllocated]__		for(int i = 0_ i < numAllocated_ i++) {_			ServerSocket socket = null__			try {_				sockets[i] = new ServerSocket(0)__			} catch (IOException e) {_				e.printStackTrace()__				Assert.fail("An exception was thrown while preparing the test " + e.getMessage())__			}_		}_		int availablePort = NetUtils.getAvailablePort()__		Configuration conf = new Configuration()__		conf.setString(BlobServerOptions.PORT, sockets[0].getLocalPort() + "," + sockets[1].getLocalPort() + "," + availablePort)___		_		try {_			BlobServer srv = new BlobServer(conf)__			Assert.assertEquals(availablePort, srv.getPort())__			srv.shutdown()__		} finally {_			sockets[0].close()__			sockets[1].close()__		}_	};give,the,blob,server,a,choice,of,three,ports,where,two,of,them,are,allocated;test,public,void,test,one,port,available,throws,ioexception,int,num,allocated,2,server,socket,sockets,new,server,socket,num,allocated,for,int,i,0,i,num,allocated,i,server,socket,socket,null,try,sockets,i,new,server,socket,0,catch,ioexception,e,e,print,stack,trace,assert,fail,an,exception,was,thrown,while,preparing,the,test,e,get,message,int,available,port,net,utils,get,available,port,configuration,conf,new,configuration,conf,set,string,blob,server,options,port,sockets,0,get,local,port,sockets,1,get,local,port,available,port,try,blob,server,srv,new,blob,server,conf,assert,assert,equals,available,port,srv,get,port,srv,shutdown,finally,sockets,0,close,sockets,1,close
BlobServerRangeTest -> @Test 	public void testOnePortAvailable() throws IOException;1495001929;Give the BlobServer a choice of three ports, where two of them_are allocated;@Test_	public void testOnePortAvailable() throws IOException {_		int numAllocated = 2__		ServerSocket[] sockets = new ServerSocket[numAllocated]__		for(int i = 0_ i < numAllocated_ i++) {_			ServerSocket socket = null__			try {_				sockets[i] = new ServerSocket(0)__			} catch (IOException e) {_				e.printStackTrace()__				Assert.fail("An exception was thrown while preparing the test " + e.getMessage())__			}_		}_		int availablePort = NetUtils.getAvailablePort()__		Configuration conf = new Configuration()__		conf.setString(BlobServerOptions.PORT, sockets[0].getLocalPort() + "," + sockets[1].getLocalPort() + "," + availablePort)___		_		try {_			BlobServer srv = new BlobServer(conf, new VoidBlobStore())__			Assert.assertEquals(availablePort, srv.getPort())__			srv.close()__		} finally {_			sockets[0].close()__			sockets[1].close()__		}_	};give,the,blob,server,a,choice,of,three,ports,where,two,of,them,are,allocated;test,public,void,test,one,port,available,throws,ioexception,int,num,allocated,2,server,socket,sockets,new,server,socket,num,allocated,for,int,i,0,i,num,allocated,i,server,socket,socket,null,try,sockets,i,new,server,socket,0,catch,ioexception,e,e,print,stack,trace,assert,fail,an,exception,was,thrown,while,preparing,the,test,e,get,message,int,available,port,net,utils,get,available,port,configuration,conf,new,configuration,conf,set,string,blob,server,options,port,sockets,0,get,local,port,sockets,1,get,local,port,available,port,try,blob,server,srv,new,blob,server,conf,new,void,blob,store,assert,assert,equals,available,port,srv,get,port,srv,close,finally,sockets,0,close,sockets,1,close
BlobServerRangeTest -> @Test 	public void testOnePortAvailable() throws IOException;1502100084;Give the BlobServer a choice of three ports, where two of them_are allocated;@Test_	public void testOnePortAvailable() throws IOException {_		int numAllocated = 2__		ServerSocket[] sockets = new ServerSocket[numAllocated]__		for(int i = 0_ i < numAllocated_ i++) {_			ServerSocket socket = null__			try {_				sockets[i] = new ServerSocket(0)__			} catch (IOException e) {_				e.printStackTrace()__				Assert.fail("An exception was thrown while preparing the test " + e.getMessage())__			}_		}_		int availablePort = NetUtils.getAvailablePort()__		Configuration conf = new Configuration()__		conf.setString(BlobServerOptions.PORT, sockets[0].getLocalPort() + "," + sockets[1].getLocalPort() + "," + availablePort)__		conf.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		_		try {_			BlobServer srv = new BlobServer(conf, new VoidBlobStore())__			Assert.assertEquals(availablePort, srv.getPort())__			srv.close()__		} finally {_			sockets[0].close()__			sockets[1].close()__		}_	};give,the,blob,server,a,choice,of,three,ports,where,two,of,them,are,allocated;test,public,void,test,one,port,available,throws,ioexception,int,num,allocated,2,server,socket,sockets,new,server,socket,num,allocated,for,int,i,0,i,num,allocated,i,server,socket,socket,null,try,sockets,i,new,server,socket,0,catch,ioexception,e,e,print,stack,trace,assert,fail,an,exception,was,thrown,while,preparing,the,test,e,get,message,int,available,port,net,utils,get,available,port,configuration,conf,new,configuration,conf,set,string,blob,server,options,port,sockets,0,get,local,port,sockets,1,get,local,port,available,port,conf,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,srv,new,blob,server,conf,new,void,blob,store,assert,assert,equals,available,port,srv,get,port,srv,close,finally,sockets,0,close,sockets,1,close
BlobServerRangeTest -> @Test 	public void testOnePortAvailable() throws IOException;1507212387;Give the BlobServer a choice of three ports, where two of them_are allocated.;@Test_	public void testOnePortAvailable() throws IOException {_		int numAllocated = 2__		ServerSocket[] sockets = new ServerSocket[numAllocated]__		for (int i = 0_ i < numAllocated_ i++) {_			try {_				sockets[i] = new ServerSocket(0)__			} catch (IOException e) {_				e.printStackTrace()__				Assert.fail("An exception was thrown while preparing the test " + e.getMessage())__			}_		}_		int availablePort = NetUtils.getAvailablePort()__		Configuration conf = new Configuration()__		conf.setString(BlobServerOptions.PORT, sockets[0].getLocalPort() + "," + sockets[1].getLocalPort() + "," + availablePort)__		conf.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		_		try {_			BlobServer server = new BlobServer(conf, new VoidBlobStore())__			server.start()__			Assert.assertEquals(availablePort, server.getPort())__			server.close()__		} finally {_			for (int i = 0_ i < numAllocated_ ++i) {_				sockets[i].close()__			}_		}_	};give,the,blob,server,a,choice,of,three,ports,where,two,of,them,are,allocated;test,public,void,test,one,port,available,throws,ioexception,int,num,allocated,2,server,socket,sockets,new,server,socket,num,allocated,for,int,i,0,i,num,allocated,i,try,sockets,i,new,server,socket,0,catch,ioexception,e,e,print,stack,trace,assert,fail,an,exception,was,thrown,while,preparing,the,test,e,get,message,int,available,port,net,utils,get,available,port,configuration,conf,new,configuration,conf,set,string,blob,server,options,port,sockets,0,get,local,port,sockets,1,get,local,port,available,port,conf,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,conf,new,void,blob,store,server,start,assert,assert,equals,available,port,server,get,port,server,close,finally,for,int,i,0,i,num,allocated,i,sockets,i,close
BlobServerRangeTest -> @Test 	public void testOnEphemeralPort() throws IOException;1448376996;Start blob server on 0 = pick an ephemeral port;@Test_	public void testOnEphemeralPort() throws IOException {_		Configuration conf = new Configuration()__		conf.setString(ConfigConstants.BLOB_SERVER_PORT, "0")__		BlobServer srv = new BlobServer(conf)__	};start,blob,server,on,0,pick,an,ephemeral,port;test,public,void,test,on,ephemeral,port,throws,ioexception,configuration,conf,new,configuration,conf,set,string,config,constants,0,blob,server,srv,new,blob,server,conf
BlobServerRangeTest -> @Test 	public void testOnEphemeralPort() throws IOException;1487441974;Start blob server on 0 = pick an ephemeral port;@Test_	public void testOnEphemeralPort() throws IOException {_		Configuration conf = new Configuration()__		conf.setString(ConfigConstants.BLOB_SERVER_PORT, "0")__		BlobServer srv = new BlobServer(conf)__		srv.shutdown()__	};start,blob,server,on,0,pick,an,ephemeral,port;test,public,void,test,on,ephemeral,port,throws,ioexception,configuration,conf,new,configuration,conf,set,string,config,constants,0,blob,server,srv,new,blob,server,conf,srv,shutdown
BlobServerRangeTest -> @Test 	public void testOnEphemeralPort() throws IOException;1494690800;Start blob server on 0 = pick an ephemeral port;@Test_	public void testOnEphemeralPort() throws IOException {_		Configuration conf = new Configuration()__		conf.setString(BlobServerOptions.PORT, "0")__		BlobServer srv = new BlobServer(conf)__		srv.shutdown()__	};start,blob,server,on,0,pick,an,ephemeral,port;test,public,void,test,on,ephemeral,port,throws,ioexception,configuration,conf,new,configuration,conf,set,string,blob,server,options,port,0,blob,server,srv,new,blob,server,conf,srv,shutdown
BlobServerRangeTest -> @Test 	public void testOnEphemeralPort() throws IOException;1495001929;Start blob server on 0 = pick an ephemeral port;@Test_	public void testOnEphemeralPort() throws IOException {_		Configuration conf = new Configuration()__		conf.setString(BlobServerOptions.PORT, "0")__		BlobServer srv = new BlobServer(conf, new VoidBlobStore())__		srv.close()__	};start,blob,server,on,0,pick,an,ephemeral,port;test,public,void,test,on,ephemeral,port,throws,ioexception,configuration,conf,new,configuration,conf,set,string,blob,server,options,port,0,blob,server,srv,new,blob,server,conf,new,void,blob,store,srv,close
BlobServerRangeTest -> @Test 	public void testOnEphemeralPort() throws IOException;1502100084;Start blob server on 0 = pick an ephemeral port;@Test_	public void testOnEphemeralPort() throws IOException {_		Configuration conf = new Configuration()__		conf.setString(BlobServerOptions.PORT, "0")__		conf.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		BlobServer srv = new BlobServer(conf, new VoidBlobStore())__		srv.close()__	};start,blob,server,on,0,pick,an,ephemeral,port;test,public,void,test,on,ephemeral,port,throws,ioexception,configuration,conf,new,configuration,conf,set,string,blob,server,options,port,0,conf,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,blob,server,srv,new,blob,server,conf,new,void,blob,store,srv,close
BlobServerRangeTest -> @Test 	public void testOnEphemeralPort() throws IOException;1507212387;Start blob server on 0 = pick an ephemeral port.;@Test_	public void testOnEphemeralPort() throws IOException {_		Configuration conf = new Configuration()__		conf.setString(BlobServerOptions.PORT, "0")__		conf.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		BlobServer server = new BlobServer(conf, new VoidBlobStore())__		server.start()__		server.close()__	};start,blob,server,on,0,pick,an,ephemeral,port;test,public,void,test,on,ephemeral,port,throws,ioexception,configuration,conf,new,configuration,conf,set,string,blob,server,options,port,0,conf,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,blob,server,server,new,blob,server,conf,new,void,blob,store,server,start,server,close
