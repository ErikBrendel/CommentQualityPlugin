# id;timestamp;commentText;codeText;commentWords;codeWords
StateTableSnapshotCompatibilityTest -> @Test 	public void checkCompatibleSerializationFormats() throws IOException;1489685642;This test ensures that different implementations of {@link StateTable} are compatible in their serialization_format.;@Test_	public void checkCompatibleSerializationFormats() throws IOException {_		final Random r = new Random(42)__		RegisteredBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))___		final CopyOnWriteStateTableTest.MockInternalKeyContext<Integer> keyContext =_				new CopyOnWriteStateTableTest.MockInternalKeyContext<>(IntSerializer.INSTANCE)___		CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> cowStateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		for (int i = 0_ i < 100_ ++i) {_			ArrayList<Integer> list = new ArrayList<>(5)__			int end = r.nextInt(5)__			for (int j = 0_ j < end_ ++j) {_				list.add(r.nextInt(100))__			}__			cowStateTable.put(r.nextInt(10), r.nextInt(2), list)__		}__		StateTableSnapshot snapshot = cowStateTable.createSnapshot()___		final NestedMapsStateTable<Integer, Integer, ArrayList<Integer>> nestedMapsStateTable =_				new NestedMapsStateTable<>(keyContext, metaInfo)___		restoreStateTableFromSnapshot(nestedMapsStateTable, snapshot, keyContext.getKeyGroupRange())__		snapshot.release()____		Assert.assertEquals(cowStateTable.size(), nestedMapsStateTable.size())__		for (StateEntry<Integer, Integer, ArrayList<Integer>> entry : cowStateTable) {_			Assert.assertEquals(entry.getState(), nestedMapsStateTable.get(entry.getKey(), entry.getNamespace()))__		}__		snapshot = nestedMapsStateTable.createSnapshot()__		cowStateTable = new CopyOnWriteStateTable<>(keyContext, metaInfo)___		restoreStateTableFromSnapshot(cowStateTable, snapshot, keyContext.getKeyGroupRange())__		snapshot.release()___		Assert.assertEquals(nestedMapsStateTable.size(), cowStateTable.size())__		for (StateEntry<Integer, Integer, ArrayList<Integer>> entry : cowStateTable) {_			Assert.assertEquals(nestedMapsStateTable.get(entry.getKey(), entry.getNamespace()), entry.getState())__		}_	};this,test,ensures,that,different,implementations,of,link,state,table,are,compatible,in,their,serialization,format;test,public,void,check,compatible,serialization,formats,throws,ioexception,final,random,r,new,random,42,registered,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,copy,on,write,state,table,test,mock,internal,key,context,integer,key,context,new,copy,on,write,state,table,test,mock,internal,key,context,int,serializer,instance,copy,on,write,state,table,integer,integer,array,list,integer,cow,state,table,new,copy,on,write,state,table,key,context,meta,info,for,int,i,0,i,100,i,array,list,integer,list,new,array,list,5,int,end,r,next,int,5,for,int,j,0,j,end,j,list,add,r,next,int,100,cow,state,table,put,r,next,int,10,r,next,int,2,list,state,table,snapshot,snapshot,cow,state,table,create,snapshot,final,nested,maps,state,table,integer,integer,array,list,integer,nested,maps,state,table,new,nested,maps,state,table,key,context,meta,info,restore,state,table,from,snapshot,nested,maps,state,table,snapshot,key,context,get,key,group,range,snapshot,release,assert,assert,equals,cow,state,table,size,nested,maps,state,table,size,for,state,entry,integer,integer,array,list,integer,entry,cow,state,table,assert,assert,equals,entry,get,state,nested,maps,state,table,get,entry,get,key,entry,get,namespace,snapshot,nested,maps,state,table,create,snapshot,cow,state,table,new,copy,on,write,state,table,key,context,meta,info,restore,state,table,from,snapshot,cow,state,table,snapshot,key,context,get,key,group,range,snapshot,release,assert,assert,equals,nested,maps,state,table,size,cow,state,table,size,for,state,entry,integer,integer,array,list,integer,entry,cow,state,table,assert,assert,equals,nested,maps,state,table,get,entry,get,key,entry,get,namespace,entry,get,state
StateTableSnapshotCompatibilityTest -> @Test 	public void checkCompatibleSerializationFormats() throws IOException;1494180263;This test ensures that different implementations of {@link StateTable} are compatible in their serialization_format.;@Test_	public void checkCompatibleSerializationFormats() throws IOException {_		final Random r = new Random(42)__		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))___		final CopyOnWriteStateTableTest.MockInternalKeyContext<Integer> keyContext =_				new CopyOnWriteStateTableTest.MockInternalKeyContext<>(IntSerializer.INSTANCE)___		CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> cowStateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		for (int i = 0_ i < 100_ ++i) {_			ArrayList<Integer> list = new ArrayList<>(5)__			int end = r.nextInt(5)__			for (int j = 0_ j < end_ ++j) {_				list.add(r.nextInt(100))__			}__			cowStateTable.put(r.nextInt(10), r.nextInt(2), list)__		}__		StateTableSnapshot snapshot = cowStateTable.createSnapshot()___		final NestedMapsStateTable<Integer, Integer, ArrayList<Integer>> nestedMapsStateTable =_				new NestedMapsStateTable<>(keyContext, metaInfo)___		restoreStateTableFromSnapshot(nestedMapsStateTable, snapshot, keyContext.getKeyGroupRange())__		snapshot.release()____		Assert.assertEquals(cowStateTable.size(), nestedMapsStateTable.size())__		for (StateEntry<Integer, Integer, ArrayList<Integer>> entry : cowStateTable) {_			Assert.assertEquals(entry.getState(), nestedMapsStateTable.get(entry.getKey(), entry.getNamespace()))__		}__		snapshot = nestedMapsStateTable.createSnapshot()__		cowStateTable = new CopyOnWriteStateTable<>(keyContext, metaInfo)___		restoreStateTableFromSnapshot(cowStateTable, snapshot, keyContext.getKeyGroupRange())__		snapshot.release()___		Assert.assertEquals(nestedMapsStateTable.size(), cowStateTable.size())__		for (StateEntry<Integer, Integer, ArrayList<Integer>> entry : cowStateTable) {_			Assert.assertEquals(nestedMapsStateTable.get(entry.getKey(), entry.getNamespace()), entry.getState())__		}_	};this,test,ensures,that,different,implementations,of,link,state,table,are,compatible,in,their,serialization,format;test,public,void,check,compatible,serialization,formats,throws,ioexception,final,random,r,new,random,42,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,copy,on,write,state,table,test,mock,internal,key,context,integer,key,context,new,copy,on,write,state,table,test,mock,internal,key,context,int,serializer,instance,copy,on,write,state,table,integer,integer,array,list,integer,cow,state,table,new,copy,on,write,state,table,key,context,meta,info,for,int,i,0,i,100,i,array,list,integer,list,new,array,list,5,int,end,r,next,int,5,for,int,j,0,j,end,j,list,add,r,next,int,100,cow,state,table,put,r,next,int,10,r,next,int,2,list,state,table,snapshot,snapshot,cow,state,table,create,snapshot,final,nested,maps,state,table,integer,integer,array,list,integer,nested,maps,state,table,new,nested,maps,state,table,key,context,meta,info,restore,state,table,from,snapshot,nested,maps,state,table,snapshot,key,context,get,key,group,range,snapshot,release,assert,assert,equals,cow,state,table,size,nested,maps,state,table,size,for,state,entry,integer,integer,array,list,integer,entry,cow,state,table,assert,assert,equals,entry,get,state,nested,maps,state,table,get,entry,get,key,entry,get,namespace,snapshot,nested,maps,state,table,create,snapshot,cow,state,table,new,copy,on,write,state,table,key,context,meta,info,restore,state,table,from,snapshot,cow,state,table,snapshot,key,context,get,key,group,range,snapshot,release,assert,assert,equals,nested,maps,state,table,size,cow,state,table,size,for,state,entry,integer,integer,array,list,integer,entry,cow,state,table,assert,assert,equals,nested,maps,state,table,get,entry,get,key,entry,get,namespace,entry,get,state
StateTableSnapshotCompatibilityTest -> @Test 	public void checkCompatibleSerializationFormats() throws IOException;1529089579;This test ensures that different implementations of {@link StateTable} are compatible in their serialization_format.;@Test_	public void checkCompatibleSerializationFormats() throws IOException {_		final Random r = new Random(42)__		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))___		final CopyOnWriteStateTableTest.MockInternalKeyContext<Integer> keyContext =_				new CopyOnWriteStateTableTest.MockInternalKeyContext<>(IntSerializer.INSTANCE)___		CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> cowStateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		for (int i = 0_ i < 100_ ++i) {_			ArrayList<Integer> list = new ArrayList<>(5)__			int end = r.nextInt(5)__			for (int j = 0_ j < end_ ++j) {_				list.add(r.nextInt(100))__			}__			cowStateTable.put(r.nextInt(10), r.nextInt(2), list)__		}__		StateSnapshot snapshot = cowStateTable.createSnapshot()___		final NestedMapsStateTable<Integer, Integer, ArrayList<Integer>> nestedMapsStateTable =_				new NestedMapsStateTable<>(keyContext, metaInfo)___		restoreStateTableFromSnapshot(nestedMapsStateTable, snapshot, keyContext.getKeyGroupRange())__		snapshot.release()____		Assert.assertEquals(cowStateTable.size(), nestedMapsStateTable.size())__		for (StateEntry<Integer, Integer, ArrayList<Integer>> entry : cowStateTable) {_			Assert.assertEquals(entry.getState(), nestedMapsStateTable.get(entry.getKey(), entry.getNamespace()))__		}__		snapshot = nestedMapsStateTable.createSnapshot()__		cowStateTable = new CopyOnWriteStateTable<>(keyContext, metaInfo)___		restoreStateTableFromSnapshot(cowStateTable, snapshot, keyContext.getKeyGroupRange())__		snapshot.release()___		Assert.assertEquals(nestedMapsStateTable.size(), cowStateTable.size())__		for (StateEntry<Integer, Integer, ArrayList<Integer>> entry : cowStateTable) {_			Assert.assertEquals(nestedMapsStateTable.get(entry.getKey(), entry.getNamespace()), entry.getState())__		}_	};this,test,ensures,that,different,implementations,of,link,state,table,are,compatible,in,their,serialization,format;test,public,void,check,compatible,serialization,formats,throws,ioexception,final,random,r,new,random,42,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,copy,on,write,state,table,test,mock,internal,key,context,integer,key,context,new,copy,on,write,state,table,test,mock,internal,key,context,int,serializer,instance,copy,on,write,state,table,integer,integer,array,list,integer,cow,state,table,new,copy,on,write,state,table,key,context,meta,info,for,int,i,0,i,100,i,array,list,integer,list,new,array,list,5,int,end,r,next,int,5,for,int,j,0,j,end,j,list,add,r,next,int,100,cow,state,table,put,r,next,int,10,r,next,int,2,list,state,snapshot,snapshot,cow,state,table,create,snapshot,final,nested,maps,state,table,integer,integer,array,list,integer,nested,maps,state,table,new,nested,maps,state,table,key,context,meta,info,restore,state,table,from,snapshot,nested,maps,state,table,snapshot,key,context,get,key,group,range,snapshot,release,assert,assert,equals,cow,state,table,size,nested,maps,state,table,size,for,state,entry,integer,integer,array,list,integer,entry,cow,state,table,assert,assert,equals,entry,get,state,nested,maps,state,table,get,entry,get,key,entry,get,namespace,snapshot,nested,maps,state,table,create,snapshot,cow,state,table,new,copy,on,write,state,table,key,context,meta,info,restore,state,table,from,snapshot,cow,state,table,snapshot,key,context,get,key,group,range,snapshot,release,assert,assert,equals,nested,maps,state,table,size,cow,state,table,size,for,state,entry,integer,integer,array,list,integer,entry,cow,state,table,assert,assert,equals,nested,maps,state,table,get,entry,get,key,entry,get,namespace,entry,get,state
StateTableSnapshotCompatibilityTest -> @Test 	public void checkCompatibleSerializationFormats() throws IOException;1531404901;This test ensures that different implementations of {@link StateTable} are compatible in their serialization_format.;@Test_	public void checkCompatibleSerializationFormats() throws IOException {_		final Random r = new Random(42)__		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyedBackendStateMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))___		final CopyOnWriteStateTableTest.MockInternalKeyContext<Integer> keyContext =_			new CopyOnWriteStateTableTest.MockInternalKeyContext<>(IntSerializer.INSTANCE)___		CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> cowStateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		for (int i = 0_ i < 100_ ++i) {_			ArrayList<Integer> list = new ArrayList<>(5)__			int end = r.nextInt(5)__			for (int j = 0_ j < end_ ++j) {_				list.add(r.nextInt(100))__			}__			cowStateTable.put(r.nextInt(10), r.nextInt(2), list)__		}__		StateSnapshot snapshot = cowStateTable.createSnapshot()___		final NestedMapsStateTable<Integer, Integer, ArrayList<Integer>> nestedMapsStateTable =_			new NestedMapsStateTable<>(keyContext, metaInfo)___		restoreStateTableFromSnapshot(nestedMapsStateTable, snapshot, keyContext.getKeyGroupRange())__		snapshot.release()____		Assert.assertEquals(cowStateTable.size(), nestedMapsStateTable.size())__		for (StateEntry<Integer, Integer, ArrayList<Integer>> entry : cowStateTable) {_			Assert.assertEquals(entry.getState(), nestedMapsStateTable.get(entry.getKey(), entry.getNamespace()))__		}__		snapshot = nestedMapsStateTable.createSnapshot()__		cowStateTable = new CopyOnWriteStateTable<>(keyContext, metaInfo)___		restoreStateTableFromSnapshot(cowStateTable, snapshot, keyContext.getKeyGroupRange())__		snapshot.release()___		Assert.assertEquals(nestedMapsStateTable.size(), cowStateTable.size())__		for (StateEntry<Integer, Integer, ArrayList<Integer>> entry : cowStateTable) {_			Assert.assertEquals(nestedMapsStateTable.get(entry.getKey(), entry.getNamespace()), entry.getState())__		}_	};this,test,ensures,that,different,implementations,of,link,state,table,are,compatible,in,their,serialization,format;test,public,void,check,compatible,serialization,formats,throws,ioexception,final,random,r,new,random,42,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,copy,on,write,state,table,test,mock,internal,key,context,integer,key,context,new,copy,on,write,state,table,test,mock,internal,key,context,int,serializer,instance,copy,on,write,state,table,integer,integer,array,list,integer,cow,state,table,new,copy,on,write,state,table,key,context,meta,info,for,int,i,0,i,100,i,array,list,integer,list,new,array,list,5,int,end,r,next,int,5,for,int,j,0,j,end,j,list,add,r,next,int,100,cow,state,table,put,r,next,int,10,r,next,int,2,list,state,snapshot,snapshot,cow,state,table,create,snapshot,final,nested,maps,state,table,integer,integer,array,list,integer,nested,maps,state,table,new,nested,maps,state,table,key,context,meta,info,restore,state,table,from,snapshot,nested,maps,state,table,snapshot,key,context,get,key,group,range,snapshot,release,assert,assert,equals,cow,state,table,size,nested,maps,state,table,size,for,state,entry,integer,integer,array,list,integer,entry,cow,state,table,assert,assert,equals,entry,get,state,nested,maps,state,table,get,entry,get,key,entry,get,namespace,snapshot,nested,maps,state,table,create,snapshot,cow,state,table,new,copy,on,write,state,table,key,context,meta,info,restore,state,table,from,snapshot,cow,state,table,snapshot,key,context,get,key,group,range,snapshot,release,assert,assert,equals,nested,maps,state,table,size,cow,state,table,size,for,state,entry,integer,integer,array,list,integer,entry,cow,state,table,assert,assert,equals,nested,maps,state,table,get,entry,get,key,entry,get,namespace,entry,get,state
StateTableSnapshotCompatibilityTest -> @Test 	public void checkCompatibleSerializationFormats() throws IOException;1531771917;This test ensures that different implementations of {@link StateTable} are compatible in their serialization_format.;@Test_	public void checkCompatibleSerializationFormats() throws IOException {_		final Random r = new Random(42)__		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))___		final CopyOnWriteStateTableTest.MockInternalKeyContext<Integer> keyContext =_			new CopyOnWriteStateTableTest.MockInternalKeyContext<>(IntSerializer.INSTANCE)___		CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> cowStateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		for (int i = 0_ i < 100_ ++i) {_			ArrayList<Integer> list = new ArrayList<>(5)__			int end = r.nextInt(5)__			for (int j = 0_ j < end_ ++j) {_				list.add(r.nextInt(100))__			}__			cowStateTable.put(r.nextInt(10), r.nextInt(2), list)__		}__		StateSnapshot snapshot = cowStateTable.stateSnapshot()___		final NestedMapsStateTable<Integer, Integer, ArrayList<Integer>> nestedMapsStateTable =_			new NestedMapsStateTable<>(keyContext, metaInfo)___		restoreStateTableFromSnapshot(nestedMapsStateTable, snapshot, keyContext.getKeyGroupRange())__		snapshot.release()____		Assert.assertEquals(cowStateTable.size(), nestedMapsStateTable.size())__		for (StateEntry<Integer, Integer, ArrayList<Integer>> entry : cowStateTable) {_			Assert.assertEquals(entry.getState(), nestedMapsStateTable.get(entry.getKey(), entry.getNamespace()))__		}__		snapshot = nestedMapsStateTable.stateSnapshot()__		cowStateTable = new CopyOnWriteStateTable<>(keyContext, metaInfo)___		restoreStateTableFromSnapshot(cowStateTable, snapshot, keyContext.getKeyGroupRange())__		snapshot.release()___		Assert.assertEquals(nestedMapsStateTable.size(), cowStateTable.size())__		for (StateEntry<Integer, Integer, ArrayList<Integer>> entry : cowStateTable) {_			Assert.assertEquals(nestedMapsStateTable.get(entry.getKey(), entry.getNamespace()), entry.getState())__		}_	};this,test,ensures,that,different,implementations,of,link,state,table,are,compatible,in,their,serialization,format;test,public,void,check,compatible,serialization,formats,throws,ioexception,final,random,r,new,random,42,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,copy,on,write,state,table,test,mock,internal,key,context,integer,key,context,new,copy,on,write,state,table,test,mock,internal,key,context,int,serializer,instance,copy,on,write,state,table,integer,integer,array,list,integer,cow,state,table,new,copy,on,write,state,table,key,context,meta,info,for,int,i,0,i,100,i,array,list,integer,list,new,array,list,5,int,end,r,next,int,5,for,int,j,0,j,end,j,list,add,r,next,int,100,cow,state,table,put,r,next,int,10,r,next,int,2,list,state,snapshot,snapshot,cow,state,table,state,snapshot,final,nested,maps,state,table,integer,integer,array,list,integer,nested,maps,state,table,new,nested,maps,state,table,key,context,meta,info,restore,state,table,from,snapshot,nested,maps,state,table,snapshot,key,context,get,key,group,range,snapshot,release,assert,assert,equals,cow,state,table,size,nested,maps,state,table,size,for,state,entry,integer,integer,array,list,integer,entry,cow,state,table,assert,assert,equals,entry,get,state,nested,maps,state,table,get,entry,get,key,entry,get,namespace,snapshot,nested,maps,state,table,state,snapshot,cow,state,table,new,copy,on,write,state,table,key,context,meta,info,restore,state,table,from,snapshot,cow,state,table,snapshot,key,context,get,key,group,range,snapshot,release,assert,assert,equals,nested,maps,state,table,size,cow,state,table,size,for,state,entry,integer,integer,array,list,integer,entry,cow,state,table,assert,assert,equals,nested,maps,state,table,get,entry,get,key,entry,get,namespace,entry,get,state
StateTableSnapshotCompatibilityTest -> @Test 	public void checkCompatibleSerializationFormats() throws IOException;1548755874;This test ensures that different implementations of {@link StateTable} are compatible in their serialization_format.;@Test_	public void checkCompatibleSerializationFormats() throws IOException {_		final Random r = new Random(42)__		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))___		final CopyOnWriteStateTableTest.MockInternalKeyContext<Integer> keyContext =_			new CopyOnWriteStateTableTest.MockInternalKeyContext<>(IntSerializer.INSTANCE)___		CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> cowStateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		for (int i = 0_ i < 100_ ++i) {_			ArrayList<Integer> list = new ArrayList<>(5)__			int end = r.nextInt(5)__			for (int j = 0_ j < end_ ++j) {_				list.add(r.nextInt(100))__			}__			cowStateTable.put(r.nextInt(10), r.nextInt(2), list)__		}__		StateSnapshot snapshot = cowStateTable.stateSnapshot()___		final NestedMapsStateTable<Integer, Integer, ArrayList<Integer>> nestedMapsStateTable =_			new NestedMapsStateTable<>(keyContext, metaInfo)___		restoreStateTableFromSnapshot(nestedMapsStateTable, snapshot, keyContext.getKeyGroupRange())__		snapshot.release()____		Assert.assertEquals(cowStateTable.size(), nestedMapsStateTable.size())__		for (StateEntry<Integer, Integer, ArrayList<Integer>> entry : cowStateTable) {_			Assert.assertEquals(entry.getState(), nestedMapsStateTable.get(entry.getKey(), entry.getNamespace()))__		}__		snapshot = nestedMapsStateTable.stateSnapshot()__		cowStateTable = new CopyOnWriteStateTable<>(keyContext, metaInfo)___		restoreStateTableFromSnapshot(cowStateTable, snapshot, keyContext.getKeyGroupRange())__		snapshot.release()___		Assert.assertEquals(nestedMapsStateTable.size(), cowStateTable.size())__		for (StateEntry<Integer, Integer, ArrayList<Integer>> entry : cowStateTable) {_			Assert.assertEquals(nestedMapsStateTable.get(entry.getKey(), entry.getNamespace()), entry.getState())__		}_	};this,test,ensures,that,different,implementations,of,link,state,table,are,compatible,in,their,serialization,format;test,public,void,check,compatible,serialization,formats,throws,ioexception,final,random,r,new,random,42,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,copy,on,write,state,table,test,mock,internal,key,context,integer,key,context,new,copy,on,write,state,table,test,mock,internal,key,context,int,serializer,instance,copy,on,write,state,table,integer,integer,array,list,integer,cow,state,table,new,copy,on,write,state,table,key,context,meta,info,for,int,i,0,i,100,i,array,list,integer,list,new,array,list,5,int,end,r,next,int,5,for,int,j,0,j,end,j,list,add,r,next,int,100,cow,state,table,put,r,next,int,10,r,next,int,2,list,state,snapshot,snapshot,cow,state,table,state,snapshot,final,nested,maps,state,table,integer,integer,array,list,integer,nested,maps,state,table,new,nested,maps,state,table,key,context,meta,info,restore,state,table,from,snapshot,nested,maps,state,table,snapshot,key,context,get,key,group,range,snapshot,release,assert,assert,equals,cow,state,table,size,nested,maps,state,table,size,for,state,entry,integer,integer,array,list,integer,entry,cow,state,table,assert,assert,equals,entry,get,state,nested,maps,state,table,get,entry,get,key,entry,get,namespace,snapshot,nested,maps,state,table,state,snapshot,cow,state,table,new,copy,on,write,state,table,key,context,meta,info,restore,state,table,from,snapshot,cow,state,table,snapshot,key,context,get,key,group,range,snapshot,release,assert,assert,equals,nested,maps,state,table,size,cow,state,table,size,for,state,entry,integer,integer,array,list,integer,entry,cow,state,table,assert,assert,equals,nested,maps,state,table,get,entry,get,key,entry,get,namespace,entry,get,state
