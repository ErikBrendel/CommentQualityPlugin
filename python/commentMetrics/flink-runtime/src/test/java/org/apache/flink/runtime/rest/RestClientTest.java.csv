# id;timestamp;commentText;codeText;commentWords;codeWords
RestClientTest -> @Test 	public void testRestClientClosedHandling() throws Exception;1538061527;Tests that we fail the operation if the client closes.;@Test_	public void testRestClientClosedHandling() throws Exception {__		Socket connectionSocket = null___		try (final ServerSocket serverSocket = new ServerSocket(0)__			final RestClient restClient = new RestClient(RestClientConfiguration.fromConfiguration(new Configuration()), TestingUtils.defaultExecutor())) {__			final String targetAddress = "localhost"__			final int targetPort = serverSocket.getLocalPort()___			_			final CompletableFuture<Socket> socketCompletableFuture = CompletableFuture.supplyAsync(CheckedSupplier.unchecked(serverSocket::accept))___			final CompletableFuture<EmptyResponseBody> responseFuture = restClient.sendRequest(_				targetAddress,_				targetPort,_				new TestMessageHeaders(),_				EmptyMessageParameters.getInstance(),_				EmptyRequestBody.getInstance(),_				Collections.emptyList())___			try {_				connectionSocket = socketCompletableFuture.get(TIMEOUT, TimeUnit.SECONDS)__			} catch (TimeoutException ignored) {_				_				socketCompletableFuture.cancel(true)__			}__			restClient.close()___			try {_				responseFuture.get()__			} catch (ExecutionException ee) {_				if (!ExceptionUtils.findThrowable(ee, IOException.class).isPresent()) {_					throw ee__				}_			}_		} finally {_			if (connectionSocket != null) {_				connectionSocket.close()__			}_		}_	};tests,that,we,fail,the,operation,if,the,client,closes;test,public,void,test,rest,client,closed,handling,throws,exception,socket,connection,socket,null,try,final,server,socket,server,socket,new,server,socket,0,final,rest,client,rest,client,new,rest,client,rest,client,configuration,from,configuration,new,configuration,testing,utils,default,executor,final,string,target,address,localhost,final,int,target,port,server,socket,get,local,port,final,completable,future,socket,socket,completable,future,completable,future,supply,async,checked,supplier,unchecked,server,socket,accept,final,completable,future,empty,response,body,response,future,rest,client,send,request,target,address,target,port,new,test,message,headers,empty,message,parameters,get,instance,empty,request,body,get,instance,collections,empty,list,try,connection,socket,socket,completable,future,get,timeout,time,unit,seconds,catch,timeout,exception,ignored,socket,completable,future,cancel,true,rest,client,close,try,response,future,get,catch,execution,exception,ee,if,exception,utils,find,throwable,ee,ioexception,class,is,present,throw,ee,finally,if,connection,socket,null,connection,socket,close
RestClientTest -> @Test 	public void testRestClientClosedHandling() throws Exception;1538064457;Tests that we fail the operation if the client closes.;@Test_	public void testRestClientClosedHandling() throws Exception {_		final Configuration config = new Configuration()__		config.setLong(RestOptions.IDLENESS_TIMEOUT, 5000L)___		Socket connectionSocket = null___		try (final ServerSocket serverSocket = new ServerSocket(0)__			final RestClient restClient = new RestClient(RestClientConfiguration.fromConfiguration(config), TestingUtils.defaultExecutor())) {__			final String targetAddress = "localhost"__			final int targetPort = serverSocket.getLocalPort()___			_			final CompletableFuture<Socket> socketCompletableFuture = CompletableFuture.supplyAsync(CheckedSupplier.unchecked(serverSocket::accept))___			final CompletableFuture<EmptyResponseBody> responseFuture = restClient.sendRequest(_				targetAddress,_				targetPort,_				new TestMessageHeaders(),_				EmptyMessageParameters.getInstance(),_				EmptyRequestBody.getInstance(),_				Collections.emptyList())___			try {_				connectionSocket = socketCompletableFuture.get(TIMEOUT, TimeUnit.SECONDS)__			} catch (TimeoutException ignored) {_				_				socketCompletableFuture.cancel(true)__			}__			restClient.close()___			try {_				responseFuture.get()__			} catch (ExecutionException ee) {_				if (!ExceptionUtils.findThrowable(ee, IOException.class).isPresent()) {_					throw ee__				}_			}_		} finally {_			if (connectionSocket != null) {_				connectionSocket.close()__			}_		}_	};tests,that,we,fail,the,operation,if,the,client,closes;test,public,void,test,rest,client,closed,handling,throws,exception,final,configuration,config,new,configuration,config,set,long,rest,options,5000l,socket,connection,socket,null,try,final,server,socket,server,socket,new,server,socket,0,final,rest,client,rest,client,new,rest,client,rest,client,configuration,from,configuration,config,testing,utils,default,executor,final,string,target,address,localhost,final,int,target,port,server,socket,get,local,port,final,completable,future,socket,socket,completable,future,completable,future,supply,async,checked,supplier,unchecked,server,socket,accept,final,completable,future,empty,response,body,response,future,rest,client,send,request,target,address,target,port,new,test,message,headers,empty,message,parameters,get,instance,empty,request,body,get,instance,collections,empty,list,try,connection,socket,socket,completable,future,get,timeout,time,unit,seconds,catch,timeout,exception,ignored,socket,completable,future,cancel,true,rest,client,close,try,response,future,get,catch,execution,exception,ee,if,exception,utils,find,throwable,ee,ioexception,class,is,present,throw,ee,finally,if,connection,socket,null,connection,socket,close
RestClientTest -> @Test 	public void testConnectionClosedHandling() throws Exception;1538061527;Tests that we fail the operation if the remote connection closes.;@Test_	public void testConnectionClosedHandling() throws Exception {_		try (final ServerSocket serverSocket = new ServerSocket(0)__			final RestClient restClient = new RestClient(RestClientConfiguration.fromConfiguration(new Configuration()), TestingUtils.defaultExecutor())) {__			final String targetAddress = "localhost"__			final int targetPort = serverSocket.getLocalPort()___			_			final CompletableFuture<Socket> socketCompletableFuture = CompletableFuture.supplyAsync(CheckedSupplier.unchecked(serverSocket::accept))___			final CompletableFuture<EmptyResponseBody> responseFuture = restClient.sendRequest(_				targetAddress,_				targetPort,_				new TestMessageHeaders(),_				EmptyMessageParameters.getInstance(),_				EmptyRequestBody.getInstance(),_				Collections.emptyList())___			Socket connectionSocket = null___			try {_				connectionSocket = socketCompletableFuture.get(TIMEOUT, TimeUnit.SECONDS)__			} catch (TimeoutException ignored) {_				_				socketCompletableFuture.cancel(true)__			}__			if (connectionSocket != null) {_				_				connectionSocket.close()__			}__			try {_				responseFuture.get()__			} catch (ExecutionException ee) {_				if (!ExceptionUtils.findThrowable(ee, IOException.class).isPresent()) {_					throw ee__				}_			}_		}_	};tests,that,we,fail,the,operation,if,the,remote,connection,closes;test,public,void,test,connection,closed,handling,throws,exception,try,final,server,socket,server,socket,new,server,socket,0,final,rest,client,rest,client,new,rest,client,rest,client,configuration,from,configuration,new,configuration,testing,utils,default,executor,final,string,target,address,localhost,final,int,target,port,server,socket,get,local,port,final,completable,future,socket,socket,completable,future,completable,future,supply,async,checked,supplier,unchecked,server,socket,accept,final,completable,future,empty,response,body,response,future,rest,client,send,request,target,address,target,port,new,test,message,headers,empty,message,parameters,get,instance,empty,request,body,get,instance,collections,empty,list,socket,connection,socket,null,try,connection,socket,socket,completable,future,get,timeout,time,unit,seconds,catch,timeout,exception,ignored,socket,completable,future,cancel,true,if,connection,socket,null,connection,socket,close,try,response,future,get,catch,execution,exception,ee,if,exception,utils,find,throwable,ee,ioexception,class,is,present,throw,ee
RestClientTest -> @Test 	public void testConnectionClosedHandling() throws Exception;1538064457;Tests that we fail the operation if the remote connection closes.;@Test_	public void testConnectionClosedHandling() throws Exception {_		final Configuration config = new Configuration()__		config.setLong(RestOptions.IDLENESS_TIMEOUT, 5000L)__		try (final ServerSocket serverSocket = new ServerSocket(0)__			final RestClient restClient = new RestClient(RestClientConfiguration.fromConfiguration(config), TestingUtils.defaultExecutor())) {__			final String targetAddress = "localhost"__			final int targetPort = serverSocket.getLocalPort()___			_			final CompletableFuture<Socket> socketCompletableFuture = CompletableFuture.supplyAsync(CheckedSupplier.unchecked(serverSocket::accept))___			final CompletableFuture<EmptyResponseBody> responseFuture = restClient.sendRequest(_				targetAddress,_				targetPort,_				new TestMessageHeaders(),_				EmptyMessageParameters.getInstance(),_				EmptyRequestBody.getInstance(),_				Collections.emptyList())___			Socket connectionSocket = null___			try {_				connectionSocket = socketCompletableFuture.get(TIMEOUT, TimeUnit.SECONDS)__			} catch (TimeoutException ignored) {_				_				socketCompletableFuture.cancel(true)__			}__			if (connectionSocket != null) {_				_				connectionSocket.close()__			}__			try {_				responseFuture.get()__			} catch (ExecutionException ee) {_				if (!ExceptionUtils.findThrowable(ee, IOException.class).isPresent()) {_					throw ee__				}_			}_		}_	};tests,that,we,fail,the,operation,if,the,remote,connection,closes;test,public,void,test,connection,closed,handling,throws,exception,final,configuration,config,new,configuration,config,set,long,rest,options,5000l,try,final,server,socket,server,socket,new,server,socket,0,final,rest,client,rest,client,new,rest,client,rest,client,configuration,from,configuration,config,testing,utils,default,executor,final,string,target,address,localhost,final,int,target,port,server,socket,get,local,port,final,completable,future,socket,socket,completable,future,completable,future,supply,async,checked,supplier,unchecked,server,socket,accept,final,completable,future,empty,response,body,response,future,rest,client,send,request,target,address,target,port,new,test,message,headers,empty,message,parameters,get,instance,empty,request,body,get,instance,collections,empty,list,socket,connection,socket,null,try,connection,socket,socket,completable,future,get,timeout,time,unit,seconds,catch,timeout,exception,ignored,socket,completable,future,cancel,true,if,connection,socket,null,connection,socket,close,try,response,future,get,catch,execution,exception,ee,if,exception,utils,find,throwable,ee,ioexception,class,is,present,throw,ee
