# id;timestamp;commentText;codeText;commentWords;codeWords
DispatcherHATest -> @Test 	public void testGrantingRevokingLeadership() throws Exception;1528982883;Tests that interleaved granting and revoking of the leadership won't interfere_with the job recovery and the resulting internal state of the Dispatcher.;@Test_	public void testGrantingRevokingLeadership() throws Exception {__		final Configuration configuration = new Configuration()__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final JobGraph nonEmptyJobGraph = createNonEmptyJobGraph()__		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(nonEmptyJobGraph, null)___		final OneShotLatch enterGetJobIdsLatch = new OneShotLatch()__		final OneShotLatch proceedGetJobIdsLatch = new OneShotLatch()__		highAvailabilityServices.setSubmittedJobGraphStore(new BlockingSubmittedJobGraphStore(submittedJobGraph, enterGetJobIdsLatch, proceedGetJobIdsLatch))__		final TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)___		final BlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)___		final HATestingDispatcher dispatcher = new HATestingDispatcher(_			rpcService,_			UUID.randomUUID().toString(),_			configuration,_			highAvailabilityServices,_			new TestingResourceManagerGateway(),_			new BlobServer(configuration, new VoidBlobStore()),_			new HeartbeatServices(1000L, 1000L),_			UnregisteredMetricGroups.createUnregisteredJobManagerMetricGroup(),_			null,_			new MemoryArchivedExecutionGraphStore(),_			new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>()),_			testingFatalErrorHandler,_			fencingTokens)___		dispatcher.start()___		try {_			final UUID leaderId = UUID.randomUUID()__			dispatcherLeaderElectionService.isLeader(leaderId)___			dispatcherLeaderElectionService.notLeader()___			final DispatcherId firstFencingToken = fencingTokens.take()___			assertThat(firstFencingToken, equalTo(NULL_FENCING_TOKEN))___			enterGetJobIdsLatch.await()__			proceedGetJobIdsLatch.trigger()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))___		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,interleaved,granting,and,revoking,of,the,leadership,won,t,interfere,with,the,job,recovery,and,the,resulting,internal,state,of,the,dispatcher;test,public,void,test,granting,revoking,leadership,throws,exception,final,configuration,configuration,new,configuration,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,job,graph,non,empty,job,graph,create,non,empty,job,graph,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,non,empty,job,graph,null,final,one,shot,latch,enter,get,job,ids,latch,new,one,shot,latch,final,one,shot,latch,proceed,get,job,ids,latch,new,one,shot,latch,high,availability,services,set,submitted,job,graph,store,new,blocking,submitted,job,graph,store,submitted,job,graph,enter,get,job,ids,latch,proceed,get,job,ids,latch,final,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,final,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,new,hatesting,dispatcher,rpc,service,uuid,random,uuid,to,string,configuration,high,availability,services,new,testing,resource,manager,gateway,new,blob,server,configuration,new,void,blob,store,new,heartbeat,services,1000l,1000l,unregistered,metric,groups,create,unregistered,job,manager,metric,group,null,new,memory,archived,execution,graph,store,new,testing,job,manager,runner,factory,new,completable,future,new,completable,future,testing,fatal,error,handler,fencing,tokens,dispatcher,start,try,final,uuid,leader,id,uuid,random,uuid,dispatcher,leader,election,service,is,leader,leader,id,dispatcher,leader,election,service,not,leader,final,dispatcher,id,first,fencing,token,fencing,tokens,take,assert,that,first,fencing,token,equal,to,enter,get,job,ids,latch,await,proceed,get,job,ids,latch,trigger,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testGrantingRevokingLeadership() throws Exception;1536763193;Tests that interleaved granting and revoking of the leadership won't interfere_with the job recovery and the resulting internal state of the Dispatcher.;@Test_	public void testGrantingRevokingLeadership() throws Exception {__		final Configuration configuration = new Configuration()__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final JobGraph nonEmptyJobGraph = createNonEmptyJobGraph()__		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(nonEmptyJobGraph, null)___		final OneShotLatch enterGetJobIdsLatch = new OneShotLatch()__		final OneShotLatch proceedGetJobIdsLatch = new OneShotLatch()__		highAvailabilityServices.setSubmittedJobGraphStore(new BlockingSubmittedJobGraphStore(submittedJobGraph, enterGetJobIdsLatch, proceedGetJobIdsLatch))__		final TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)___		final BlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)___		final HATestingDispatcher dispatcher = new HATestingDispatcher(_			rpcService,_			UUID.randomUUID().toString(),_			configuration,_			highAvailabilityServices,_			new TestingResourceManagerGateway(),_			new BlobServer(configuration, new VoidBlobStore()),_			new HeartbeatServices(1000L, 1000L),_			UnregisteredMetricGroups.createUnregisteredJobManagerMetricGroup(),_			null,_			new MemoryArchivedExecutionGraphStore(),_			new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>()),_			testingFatalErrorHandler,_			fencingTokens)___		dispatcher.start()___		try {_			final UUID leaderId = UUID.randomUUID()__			dispatcherLeaderElectionService.isLeader(leaderId)___			dispatcherLeaderElectionService.notLeader()___			final DispatcherId firstFencingToken = fencingTokens.take()___			assertThat(firstFencingToken, equalTo(NULL_FENCING_TOKEN))___			enterGetJobIdsLatch.await()__			proceedGetJobIdsLatch.trigger()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))___		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,interleaved,granting,and,revoking,of,the,leadership,won,t,interfere,with,the,job,recovery,and,the,resulting,internal,state,of,the,dispatcher;test,public,void,test,granting,revoking,leadership,throws,exception,final,configuration,configuration,new,configuration,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,job,graph,non,empty,job,graph,create,non,empty,job,graph,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,non,empty,job,graph,null,final,one,shot,latch,enter,get,job,ids,latch,new,one,shot,latch,final,one,shot,latch,proceed,get,job,ids,latch,new,one,shot,latch,high,availability,services,set,submitted,job,graph,store,new,blocking,submitted,job,graph,store,submitted,job,graph,enter,get,job,ids,latch,proceed,get,job,ids,latch,final,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,final,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,new,hatesting,dispatcher,rpc,service,uuid,random,uuid,to,string,configuration,high,availability,services,new,testing,resource,manager,gateway,new,blob,server,configuration,new,void,blob,store,new,heartbeat,services,1000l,1000l,unregistered,metric,groups,create,unregistered,job,manager,metric,group,null,new,memory,archived,execution,graph,store,new,testing,job,manager,runner,factory,new,completable,future,new,completable,future,testing,fatal,error,handler,fencing,tokens,dispatcher,start,try,final,uuid,leader,id,uuid,random,uuid,dispatcher,leader,election,service,is,leader,leader,id,dispatcher,leader,election,service,not,leader,final,dispatcher,id,first,fencing,token,fencing,tokens,take,assert,that,first,fencing,token,equal,to,enter,get,job,ids,latch,await,proceed,get,job,ids,latch,trigger,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testGrantingRevokingLeadership() throws Exception;1536763193;Tests that interleaved granting and revoking of the leadership won't interfere_with the job recovery and the resulting internal state of the Dispatcher.;@Test_	public void testGrantingRevokingLeadership() throws Exception {__		final Configuration configuration = new Configuration()__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final JobGraph nonEmptyJobGraph = createNonEmptyJobGraph()__		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(nonEmptyJobGraph, null)___		final OneShotLatch enterGetJobIdsLatch = new OneShotLatch()__		final OneShotLatch proceedGetJobIdsLatch = new OneShotLatch()__		highAvailabilityServices.setSubmittedJobGraphStore(new BlockingSubmittedJobGraphStore(submittedJobGraph, enterGetJobIdsLatch, proceedGetJobIdsLatch))__		final TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)___		final BlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)___		final HATestingDispatcher dispatcher = new HATestingDispatcher(_			rpcService,_			UUID.randomUUID().toString(),_			configuration,_			highAvailabilityServices,_			new TestingResourceManagerGateway(),_			new BlobServer(configuration, new VoidBlobStore()),_			new HeartbeatServices(1000L, 1000L),_			UnregisteredMetricGroups.createUnregisteredJobManagerMetricGroup(),_			null,_			new MemoryArchivedExecutionGraphStore(),_			new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>()),_			testingFatalErrorHandler,_			fencingTokens)___		dispatcher.start()___		try {_			final UUID leaderId = UUID.randomUUID()__			dispatcherLeaderElectionService.isLeader(leaderId)___			dispatcherLeaderElectionService.notLeader()___			final DispatcherId firstFencingToken = fencingTokens.take()___			assertThat(firstFencingToken, equalTo(NULL_FENCING_TOKEN))___			enterGetJobIdsLatch.await()__			proceedGetJobIdsLatch.trigger()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))___		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,interleaved,granting,and,revoking,of,the,leadership,won,t,interfere,with,the,job,recovery,and,the,resulting,internal,state,of,the,dispatcher;test,public,void,test,granting,revoking,leadership,throws,exception,final,configuration,configuration,new,configuration,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,job,graph,non,empty,job,graph,create,non,empty,job,graph,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,non,empty,job,graph,null,final,one,shot,latch,enter,get,job,ids,latch,new,one,shot,latch,final,one,shot,latch,proceed,get,job,ids,latch,new,one,shot,latch,high,availability,services,set,submitted,job,graph,store,new,blocking,submitted,job,graph,store,submitted,job,graph,enter,get,job,ids,latch,proceed,get,job,ids,latch,final,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,final,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,new,hatesting,dispatcher,rpc,service,uuid,random,uuid,to,string,configuration,high,availability,services,new,testing,resource,manager,gateway,new,blob,server,configuration,new,void,blob,store,new,heartbeat,services,1000l,1000l,unregistered,metric,groups,create,unregistered,job,manager,metric,group,null,new,memory,archived,execution,graph,store,new,testing,job,manager,runner,factory,new,completable,future,new,completable,future,testing,fatal,error,handler,fencing,tokens,dispatcher,start,try,final,uuid,leader,id,uuid,random,uuid,dispatcher,leader,election,service,is,leader,leader,id,dispatcher,leader,election,service,not,leader,final,dispatcher,id,first,fencing,token,fencing,tokens,take,assert,that,first,fencing,token,equal,to,enter,get,job,ids,latch,await,proceed,get,job,ids,latch,trigger,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testGrantingRevokingLeadership() throws Exception;1536763194;Tests that interleaved granting and revoking of the leadership won't interfere_with the job recovery and the resulting internal state of the Dispatcher.;@Test_	public void testGrantingRevokingLeadership() throws Exception {_		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final JobGraph nonEmptyJobGraph = createNonEmptyJobGraph()__		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(nonEmptyJobGraph, null)___		final OneShotLatch enterGetJobIdsLatch = new OneShotLatch()__		final OneShotLatch proceedGetJobIdsLatch = new OneShotLatch()__		highAvailabilityServices.setSubmittedJobGraphStore(new BlockingSubmittedJobGraphStore(submittedJobGraph, enterGetJobIdsLatch, proceedGetJobIdsLatch))__		final TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)___		final BlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)___		final HATestingDispatcher dispatcher = createHADispatcher(highAvailabilityServices, fencingTokens)___		dispatcher.start()___		try {_			final UUID leaderId = UUID.randomUUID()__			dispatcherLeaderElectionService.isLeader(leaderId)___			dispatcherLeaderElectionService.notLeader()___			final DispatcherId firstFencingToken = fencingTokens.take()___			assertThat(firstFencingToken, equalTo(NULL_FENCING_TOKEN))___			enterGetJobIdsLatch.await()__			proceedGetJobIdsLatch.trigger()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))___		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,interleaved,granting,and,revoking,of,the,leadership,won,t,interfere,with,the,job,recovery,and,the,resulting,internal,state,of,the,dispatcher;test,public,void,test,granting,revoking,leadership,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,job,graph,non,empty,job,graph,create,non,empty,job,graph,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,non,empty,job,graph,null,final,one,shot,latch,enter,get,job,ids,latch,new,one,shot,latch,final,one,shot,latch,proceed,get,job,ids,latch,new,one,shot,latch,high,availability,services,set,submitted,job,graph,store,new,blocking,submitted,job,graph,store,submitted,job,graph,enter,get,job,ids,latch,proceed,get,job,ids,latch,final,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,final,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,hadispatcher,high,availability,services,fencing,tokens,dispatcher,start,try,final,uuid,leader,id,uuid,random,uuid,dispatcher,leader,election,service,is,leader,leader,id,dispatcher,leader,election,service,not,leader,final,dispatcher,id,first,fencing,token,fencing,tokens,take,assert,that,first,fencing,token,equal,to,enter,get,job,ids,latch,await,proceed,get,job,ids,latch,trigger,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testGrantingRevokingLeadership() throws Exception;1536930103;Tests that interleaved granting and revoking of the leadership won't interfere_with the job recovery and the resulting internal state of the Dispatcher.;@Test_	public void testGrantingRevokingLeadership() throws Exception {_		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final JobGraph nonEmptyJobGraph = createNonEmptyJobGraph()__		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(nonEmptyJobGraph, null)___		final OneShotLatch enterGetJobIdsLatch = new OneShotLatch()__		final OneShotLatch proceedGetJobIdsLatch = new OneShotLatch()__		highAvailabilityServices.setSubmittedJobGraphStore(new BlockingSubmittedJobGraphStore(submittedJobGraph, enterGetJobIdsLatch, proceedGetJobIdsLatch))__		final TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)___		final BlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)___		final HATestingDispatcher dispatcher = createHADispatcher(highAvailabilityServices, fencingTokens)___		dispatcher.start()___		try {_			final UUID leaderId = UUID.randomUUID()__			dispatcherLeaderElectionService.isLeader(leaderId)___			dispatcherLeaderElectionService.notLeader()___			final DispatcherId firstFencingToken = fencingTokens.take()___			assertThat(firstFencingToken, equalTo(NULL_FENCING_TOKEN))___			enterGetJobIdsLatch.await()__			proceedGetJobIdsLatch.trigger()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))___		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,interleaved,granting,and,revoking,of,the,leadership,won,t,interfere,with,the,job,recovery,and,the,resulting,internal,state,of,the,dispatcher;test,public,void,test,granting,revoking,leadership,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,job,graph,non,empty,job,graph,create,non,empty,job,graph,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,non,empty,job,graph,null,final,one,shot,latch,enter,get,job,ids,latch,new,one,shot,latch,final,one,shot,latch,proceed,get,job,ids,latch,new,one,shot,latch,high,availability,services,set,submitted,job,graph,store,new,blocking,submitted,job,graph,store,submitted,job,graph,enter,get,job,ids,latch,proceed,get,job,ids,latch,final,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,final,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,hadispatcher,high,availability,services,fencing,tokens,dispatcher,start,try,final,uuid,leader,id,uuid,random,uuid,dispatcher,leader,election,service,is,leader,leader,id,dispatcher,leader,election,service,not,leader,final,dispatcher,id,first,fencing,token,fencing,tokens,take,assert,that,first,fencing,token,equal,to,enter,get,job,ids,latch,await,proceed,get,job,ids,latch,trigger,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testGrantingRevokingLeadership() throws Exception;1536954663;Tests that interleaved granting and revoking of the leadership won't interfere_with the job recovery and the resulting internal state of the Dispatcher.;@Test_	public void testGrantingRevokingLeadership() throws Exception {_		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final JobGraph nonEmptyJobGraph = createNonEmptyJobGraph()__		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(nonEmptyJobGraph, null)___		final OneShotLatch enterGetJobIdsLatch = new OneShotLatch()__		final OneShotLatch proceedGetJobIdsLatch = new OneShotLatch()__		highAvailabilityServices.setSubmittedJobGraphStore(new BlockingSubmittedJobGraphStore(submittedJobGraph, enterGetJobIdsLatch, proceedGetJobIdsLatch))__		final TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)___		final BlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)___		final HATestingDispatcher dispatcher = createHADispatcher(highAvailabilityServices, fencingTokens)___		dispatcher.start()___		try {_			final UUID leaderId = UUID.randomUUID()__			dispatcherLeaderElectionService.isLeader(leaderId)___			dispatcherLeaderElectionService.notLeader()___			final DispatcherId firstFencingToken = fencingTokens.take()___			assertThat(firstFencingToken, equalTo(NULL_FENCING_TOKEN))___			enterGetJobIdsLatch.await()__			proceedGetJobIdsLatch.trigger()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))___		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,interleaved,granting,and,revoking,of,the,leadership,won,t,interfere,with,the,job,recovery,and,the,resulting,internal,state,of,the,dispatcher;test,public,void,test,granting,revoking,leadership,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,job,graph,non,empty,job,graph,create,non,empty,job,graph,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,non,empty,job,graph,null,final,one,shot,latch,enter,get,job,ids,latch,new,one,shot,latch,final,one,shot,latch,proceed,get,job,ids,latch,new,one,shot,latch,high,availability,services,set,submitted,job,graph,store,new,blocking,submitted,job,graph,store,submitted,job,graph,enter,get,job,ids,latch,proceed,get,job,ids,latch,final,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,final,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,hadispatcher,high,availability,services,fencing,tokens,dispatcher,start,try,final,uuid,leader,id,uuid,random,uuid,dispatcher,leader,election,service,is,leader,leader,id,dispatcher,leader,election,service,not,leader,final,dispatcher,id,first,fencing,token,fencing,tokens,take,assert,that,first,fencing,token,equal,to,enter,get,job,ids,latch,await,proceed,get,job,ids,latch,trigger,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testGrantingRevokingLeadership() throws Exception;1547736239;Tests that interleaved granting and revoking of the leadership won't interfere_with the job recovery and the resulting internal state of the Dispatcher.;@Test_	public void testGrantingRevokingLeadership() throws Exception {_		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final JobGraph nonEmptyJobGraph = createNonEmptyJobGraph()__		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(nonEmptyJobGraph)___		final OneShotLatch enterGetJobIdsLatch = new OneShotLatch()__		final OneShotLatch proceedGetJobIdsLatch = new OneShotLatch()__		highAvailabilityServices.setSubmittedJobGraphStore(new BlockingSubmittedJobGraphStore(submittedJobGraph, enterGetJobIdsLatch, proceedGetJobIdsLatch))__		final TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)___		final BlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)___		final HATestingDispatcher dispatcher = createHADispatcher(highAvailabilityServices, fencingTokens)___		dispatcher.start()___		try {_			final UUID leaderId = UUID.randomUUID()__			dispatcherLeaderElectionService.isLeader(leaderId)___			dispatcherLeaderElectionService.notLeader()___			final DispatcherId firstFencingToken = fencingTokens.take()___			assertThat(firstFencingToken, equalTo(NULL_FENCING_TOKEN))___			enterGetJobIdsLatch.await()__			proceedGetJobIdsLatch.trigger()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))___		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,interleaved,granting,and,revoking,of,the,leadership,won,t,interfere,with,the,job,recovery,and,the,resulting,internal,state,of,the,dispatcher;test,public,void,test,granting,revoking,leadership,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,job,graph,non,empty,job,graph,create,non,empty,job,graph,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,non,empty,job,graph,final,one,shot,latch,enter,get,job,ids,latch,new,one,shot,latch,final,one,shot,latch,proceed,get,job,ids,latch,new,one,shot,latch,high,availability,services,set,submitted,job,graph,store,new,blocking,submitted,job,graph,store,submitted,job,graph,enter,get,job,ids,latch,proceed,get,job,ids,latch,final,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,final,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,hadispatcher,high,availability,services,fencing,tokens,dispatcher,start,try,final,uuid,leader,id,uuid,random,uuid,dispatcher,leader,election,service,is,leader,leader,id,dispatcher,leader,election,service,not,leader,final,dispatcher,id,first,fencing,token,fencing,tokens,take,assert,that,first,fencing,token,equal,to,enter,get,job,ids,latch,await,proceed,get,job,ids,latch,trigger,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testGrantingRevokingLeadership() throws Exception;1548322471;Tests that interleaved granting and revoking of the leadership won't interfere_with the job recovery and the resulting internal state of the Dispatcher.;@Test_	public void testGrantingRevokingLeadership() throws Exception {_		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final JobGraph nonEmptyJobGraph = createNonEmptyJobGraph()__		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(nonEmptyJobGraph)___		final OneShotLatch enterGetJobIdsLatch = new OneShotLatch()__		final OneShotLatch proceedGetJobIdsLatch = new OneShotLatch()__		highAvailabilityServices.setSubmittedJobGraphStore(new BlockingSubmittedJobGraphStore(submittedJobGraph, enterGetJobIdsLatch, proceedGetJobIdsLatch))__		final TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)___		final BlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)___		final HATestingDispatcher dispatcher = createDispatcher(highAvailabilityServices, fencingTokens)___		dispatcher.start()___		try {_			final UUID leaderId = UUID.randomUUID()__			dispatcherLeaderElectionService.isLeader(leaderId)___			dispatcherLeaderElectionService.notLeader()___			final DispatcherId firstFencingToken = fencingTokens.take()___			assertThat(firstFencingToken, equalTo(NULL_FENCING_TOKEN))___			enterGetJobIdsLatch.await()__			proceedGetJobIdsLatch.trigger()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))___		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,interleaved,granting,and,revoking,of,the,leadership,won,t,interfere,with,the,job,recovery,and,the,resulting,internal,state,of,the,dispatcher;test,public,void,test,granting,revoking,leadership,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,job,graph,non,empty,job,graph,create,non,empty,job,graph,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,non,empty,job,graph,final,one,shot,latch,enter,get,job,ids,latch,new,one,shot,latch,final,one,shot,latch,proceed,get,job,ids,latch,new,one,shot,latch,high,availability,services,set,submitted,job,graph,store,new,blocking,submitted,job,graph,store,submitted,job,graph,enter,get,job,ids,latch,proceed,get,job,ids,latch,final,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,final,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,high,availability,services,fencing,tokens,dispatcher,start,try,final,uuid,leader,id,uuid,random,uuid,dispatcher,leader,election,service,is,leader,leader,id,dispatcher,leader,election,service,not,leader,final,dispatcher,id,first,fencing,token,fencing,tokens,take,assert,that,first,fencing,token,equal,to,enter,get,job,ids,latch,await,proceed,get,job,ids,latch,trigger,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testGrantingRevokingLeadership() throws Exception;1548350243;Tests that interleaved granting and revoking of the leadership won't interfere_with the job recovery and the resulting internal state of the Dispatcher.;@Test_	public void testGrantingRevokingLeadership() throws Exception {_		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final JobGraph nonEmptyJobGraph = createNonEmptyJobGraph()__		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(nonEmptyJobGraph)___		final OneShotLatch enterGetJobIdsLatch = new OneShotLatch()__		final OneShotLatch proceedGetJobIdsLatch = new OneShotLatch()__		highAvailabilityServices.setSubmittedJobGraphStore(new BlockingSubmittedJobGraphStore(submittedJobGraph, enterGetJobIdsLatch, proceedGetJobIdsLatch))__		final TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)___		final BlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)___		final HATestingDispatcher dispatcher = createDispatcher(highAvailabilityServices, fencingTokens)___		dispatcher.start()___		try {_			final UUID leaderId = UUID.randomUUID()__			dispatcherLeaderElectionService.isLeader(leaderId)___			dispatcherLeaderElectionService.notLeader()___			final DispatcherId firstFencingToken = fencingTokens.take()___			assertThat(firstFencingToken, equalTo(NULL_FENCING_TOKEN))___			enterGetJobIdsLatch.await()__			proceedGetJobIdsLatch.trigger()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))___		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,interleaved,granting,and,revoking,of,the,leadership,won,t,interfere,with,the,job,recovery,and,the,resulting,internal,state,of,the,dispatcher;test,public,void,test,granting,revoking,leadership,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,job,graph,non,empty,job,graph,create,non,empty,job,graph,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,non,empty,job,graph,final,one,shot,latch,enter,get,job,ids,latch,new,one,shot,latch,final,one,shot,latch,proceed,get,job,ids,latch,new,one,shot,latch,high,availability,services,set,submitted,job,graph,store,new,blocking,submitted,job,graph,store,submitted,job,graph,enter,get,job,ids,latch,proceed,get,job,ids,latch,final,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,final,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,high,availability,services,fencing,tokens,dispatcher,start,try,final,uuid,leader,id,uuid,random,uuid,dispatcher,leader,election,service,is,leader,leader,id,dispatcher,leader,election,service,not,leader,final,dispatcher,id,first,fencing,token,fencing,tokens,take,assert,that,first,fencing,token,equal,to,enter,get,job,ids,latch,await,proceed,get,job,ids,latch,trigger,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testGrantingRevokingLeadership() throws Exception;1548350350;Tests that interleaved granting and revoking of the leadership won't interfere_with the job recovery and the resulting internal state of the Dispatcher.;@Test_	public void testGrantingRevokingLeadership() throws Exception {_		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final JobGraph nonEmptyJobGraph = createNonEmptyJobGraph()__		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(nonEmptyJobGraph)___		final OneShotLatch enterGetJobIdsLatch = new OneShotLatch()__		final OneShotLatch proceedGetJobIdsLatch = new OneShotLatch()__		highAvailabilityServices.setSubmittedJobGraphStore(new BlockingSubmittedJobGraphStore(submittedJobGraph, enterGetJobIdsLatch, proceedGetJobIdsLatch))__		final TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)___		final BlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)___		final HATestingDispatcher dispatcher = createDispatcherWithObservableFencingTokens(highAvailabilityServices, fencingTokens)___		dispatcher.start()___		try {_			final UUID leaderId = UUID.randomUUID()__			dispatcherLeaderElectionService.isLeader(leaderId)___			dispatcherLeaderElectionService.notLeader()___			final DispatcherId firstFencingToken = fencingTokens.take()___			assertThat(firstFencingToken, equalTo(NULL_FENCING_TOKEN))___			enterGetJobIdsLatch.await()__			proceedGetJobIdsLatch.trigger()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))___		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,interleaved,granting,and,revoking,of,the,leadership,won,t,interfere,with,the,job,recovery,and,the,resulting,internal,state,of,the,dispatcher;test,public,void,test,granting,revoking,leadership,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,job,graph,non,empty,job,graph,create,non,empty,job,graph,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,non,empty,job,graph,final,one,shot,latch,enter,get,job,ids,latch,new,one,shot,latch,final,one,shot,latch,proceed,get,job,ids,latch,new,one,shot,latch,high,availability,services,set,submitted,job,graph,store,new,blocking,submitted,job,graph,store,submitted,job,graph,enter,get,job,ids,latch,proceed,get,job,ids,latch,final,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,final,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,with,observable,fencing,tokens,high,availability,services,fencing,tokens,dispatcher,start,try,final,uuid,leader,id,uuid,random,uuid,dispatcher,leader,election,service,is,leader,leader,id,dispatcher,leader,election,service,not,leader,final,dispatcher,id,first,fencing,token,fencing,tokens,take,assert,that,first,fencing,token,equal,to,enter,get,job,ids,latch,await,proceed,get,job,ids,latch,trigger,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testGrantingRevokingLeadership() throws Exception;1548846699;Tests that interleaved granting and revoking of the leadership won't interfere_with the job recovery and the resulting internal state of the Dispatcher.;@Test_	public void testGrantingRevokingLeadership() throws Exception {_		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final JobGraph nonEmptyJobGraph = createNonEmptyJobGraph()__		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(nonEmptyJobGraph)___		final OneShotLatch enterGetJobIdsLatch = new OneShotLatch()__		final OneShotLatch proceedGetJobIdsLatch = new OneShotLatch()__		highAvailabilityServices.setSubmittedJobGraphStore(new BlockingSubmittedJobGraphStore(submittedJobGraph, enterGetJobIdsLatch, proceedGetJobIdsLatch))__		final TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)___		final BlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)___		final HATestingDispatcher dispatcher = createDispatcherWithObservableFencingTokens(highAvailabilityServices, fencingTokens)___		dispatcher.start()___		try {_			final UUID leaderId = UUID.randomUUID()__			dispatcherLeaderElectionService.isLeader(leaderId)___			dispatcherLeaderElectionService.notLeader()___			final DispatcherId firstFencingToken = fencingTokens.take()___			assertThat(firstFencingToken, equalTo(NULL_FENCING_TOKEN))___			enterGetJobIdsLatch.await()__			proceedGetJobIdsLatch.trigger()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))___		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,interleaved,granting,and,revoking,of,the,leadership,won,t,interfere,with,the,job,recovery,and,the,resulting,internal,state,of,the,dispatcher;test,public,void,test,granting,revoking,leadership,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,job,graph,non,empty,job,graph,create,non,empty,job,graph,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,non,empty,job,graph,final,one,shot,latch,enter,get,job,ids,latch,new,one,shot,latch,final,one,shot,latch,proceed,get,job,ids,latch,new,one,shot,latch,high,availability,services,set,submitted,job,graph,store,new,blocking,submitted,job,graph,store,submitted,job,graph,enter,get,job,ids,latch,proceed,get,job,ids,latch,final,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,final,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,with,observable,fencing,tokens,high,availability,services,fencing,tokens,dispatcher,start,try,final,uuid,leader,id,uuid,random,uuid,dispatcher,leader,election,service,is,leader,leader,id,dispatcher,leader,election,service,not,leader,final,dispatcher,id,first,fencing,token,fencing,tokens,take,assert,that,first,fencing,token,equal,to,enter,get,job,ids,latch,await,proceed,get,job,ids,latch,trigger,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testGrantingRevokingLeadership() throws Exception;1549360057;Tests that interleaved granting and revoking of the leadership won't interfere_with the job recovery and the resulting internal state of the Dispatcher.;@Test_	public void testGrantingRevokingLeadership() throws Exception {_		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final JobGraph nonEmptyJobGraph = createNonEmptyJobGraph()__		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(nonEmptyJobGraph)___		final OneShotLatch enterGetJobIdsLatch = new OneShotLatch()__		final OneShotLatch proceedGetJobIdsLatch = new OneShotLatch()__		highAvailabilityServices.setSubmittedJobGraphStore(new BlockingSubmittedJobGraphStore(submittedJobGraph, enterGetJobIdsLatch, proceedGetJobIdsLatch))__		final TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)___		final BlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)___		final HATestingDispatcher dispatcher = createDispatcherWithObservableFencingTokens(highAvailabilityServices, fencingTokens)___		dispatcher.start()___		try {_			final UUID leaderId = UUID.randomUUID()__			dispatcherLeaderElectionService.isLeader(leaderId)___			dispatcherLeaderElectionService.notLeader()___			final DispatcherId firstFencingToken = fencingTokens.take()___			assertThat(firstFencingToken, equalTo(NULL_FENCING_TOKEN))___			enterGetJobIdsLatch.await()__			proceedGetJobIdsLatch.trigger()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))___		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,interleaved,granting,and,revoking,of,the,leadership,won,t,interfere,with,the,job,recovery,and,the,resulting,internal,state,of,the,dispatcher;test,public,void,test,granting,revoking,leadership,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,job,graph,non,empty,job,graph,create,non,empty,job,graph,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,non,empty,job,graph,final,one,shot,latch,enter,get,job,ids,latch,new,one,shot,latch,final,one,shot,latch,proceed,get,job,ids,latch,new,one,shot,latch,high,availability,services,set,submitted,job,graph,store,new,blocking,submitted,job,graph,store,submitted,job,graph,enter,get,job,ids,latch,proceed,get,job,ids,latch,final,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,final,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,with,observable,fencing,tokens,high,availability,services,fencing,tokens,dispatcher,start,try,final,uuid,leader,id,uuid,random,uuid,dispatcher,leader,election,service,is,leader,leader,id,dispatcher,leader,election,service,not,leader,final,dispatcher,id,first,fencing,token,fencing,tokens,take,assert,that,first,fencing,token,equal,to,enter,get,job,ids,latch,await,proceed,get,job,ids,latch,trigger,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testGrantingRevokingLeadership() throws Exception;1549635583;Tests that interleaved granting and revoking of the leadership won't interfere_with the job recovery and the resulting internal state of the Dispatcher.;@Test_	public void testGrantingRevokingLeadership() throws Exception {_		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final JobGraph nonEmptyJobGraph = createNonEmptyJobGraph()__		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(nonEmptyJobGraph)___		final OneShotLatch enterGetJobIdsLatch = new OneShotLatch()__		final OneShotLatch proceedGetJobIdsLatch = new OneShotLatch()__		highAvailabilityServices.setSubmittedJobGraphStore(new BlockingSubmittedJobGraphStore(submittedJobGraph, enterGetJobIdsLatch, proceedGetJobIdsLatch))__		final TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)___		final BlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)___		final HATestingDispatcher dispatcher = createDispatcherWithObservableFencingTokens(highAvailabilityServices, fencingTokens)___		dispatcher.start()___		try {_			final UUID leaderId = UUID.randomUUID()__			dispatcherLeaderElectionService.isLeader(leaderId)___			dispatcherLeaderElectionService.notLeader()___			final DispatcherId firstFencingToken = fencingTokens.take()___			assertThat(firstFencingToken, equalTo(NULL_FENCING_TOKEN))___			enterGetJobIdsLatch.await()__			proceedGetJobIdsLatch.trigger()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))___		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,interleaved,granting,and,revoking,of,the,leadership,won,t,interfere,with,the,job,recovery,and,the,resulting,internal,state,of,the,dispatcher;test,public,void,test,granting,revoking,leadership,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,job,graph,non,empty,job,graph,create,non,empty,job,graph,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,non,empty,job,graph,final,one,shot,latch,enter,get,job,ids,latch,new,one,shot,latch,final,one,shot,latch,proceed,get,job,ids,latch,new,one,shot,latch,high,availability,services,set,submitted,job,graph,store,new,blocking,submitted,job,graph,store,submitted,job,graph,enter,get,job,ids,latch,proceed,get,job,ids,latch,final,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,final,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,with,observable,fencing,tokens,high,availability,services,fencing,tokens,dispatcher,start,try,final,uuid,leader,id,uuid,random,uuid,dispatcher,leader,election,service,is,leader,leader,id,dispatcher,leader,election,service,not,leader,final,dispatcher,id,first,fencing,token,fencing,tokens,take,assert,that,first,fencing,token,equal,to,enter,get,job,ids,latch,await,proceed,get,job,ids,latch,trigger,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception;1536763194;Tests that all JobManagerRunner are terminated if the leadership of the_Dispatcher is revoked.;@Test_	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception {__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		highAvailabilityServices.setSubmittedJobGraphStore(new StandaloneSubmittedJobGraphStore())___		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(leaderElectionService)___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createHADispatcher(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()___			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(createNonEmptyJobGraph(), timeout)___			submissionFuture.get()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(1))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,all,job,manager,runner,are,terminated,if,the,leadership,of,the,dispatcher,is,revoked;test,public,void,test,revoke,leadership,terminates,job,manager,runners,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,high,availability,services,set,submitted,job,graph,store,new,standalone,submitted,job,graph,store,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,leader,election,service,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,hadispatcher,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,create,non,empty,job,graph,timeout,submission,future,get,assert,that,dispatcher,get,number,jobs,timeout,get,is,1,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception;1536930103;Tests that all JobManagerRunner are terminated if the leadership of the_Dispatcher is revoked.;@Test_	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception {__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		highAvailabilityServices.setSubmittedJobGraphStore(new StandaloneSubmittedJobGraphStore())___		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(leaderElectionService)___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createHADispatcher(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()___			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(createNonEmptyJobGraph(), timeout)___			submissionFuture.get()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(1))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,all,job,manager,runner,are,terminated,if,the,leadership,of,the,dispatcher,is,revoked;test,public,void,test,revoke,leadership,terminates,job,manager,runners,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,high,availability,services,set,submitted,job,graph,store,new,standalone,submitted,job,graph,store,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,leader,election,service,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,hadispatcher,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,create,non,empty,job,graph,timeout,submission,future,get,assert,that,dispatcher,get,number,jobs,timeout,get,is,1,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception;1536954663;Tests that all JobManagerRunner are terminated if the leadership of the_Dispatcher is revoked.;@Test_	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception {__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		highAvailabilityServices.setSubmittedJobGraphStore(new StandaloneSubmittedJobGraphStore())___		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(leaderElectionService)___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createHADispatcher(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()___			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(createNonEmptyJobGraph(), timeout)___			submissionFuture.get()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(1))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,all,job,manager,runner,are,terminated,if,the,leadership,of,the,dispatcher,is,revoked;test,public,void,test,revoke,leadership,terminates,job,manager,runners,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,high,availability,services,set,submitted,job,graph,store,new,standalone,submitted,job,graph,store,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,leader,election,service,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,hadispatcher,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,create,non,empty,job,graph,timeout,submission,future,get,assert,that,dispatcher,get,number,jobs,timeout,get,is,1,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception;1547736239;Tests that all JobManagerRunner are terminated if the leadership of the_Dispatcher is revoked.;@Test_	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception {__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		highAvailabilityServices.setSubmittedJobGraphStore(new StandaloneSubmittedJobGraphStore())___		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(leaderElectionService)___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createHADispatcher(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()___			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(createNonEmptyJobGraph(), timeout)___			submissionFuture.get()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(1))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,all,job,manager,runner,are,terminated,if,the,leadership,of,the,dispatcher,is,revoked;test,public,void,test,revoke,leadership,terminates,job,manager,runners,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,high,availability,services,set,submitted,job,graph,store,new,standalone,submitted,job,graph,store,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,leader,election,service,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,hadispatcher,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,create,non,empty,job,graph,timeout,submission,future,get,assert,that,dispatcher,get,number,jobs,timeout,get,is,1,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception;1548322471;Tests that all JobManagerRunner are terminated if the leadership of the_Dispatcher is revoked.;@Test_	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception {__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		highAvailabilityServices.setSubmittedJobGraphStore(new StandaloneSubmittedJobGraphStore())___		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setDispatcherLeaderElectionService(leaderElectionService)___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createDispatcher(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()___			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(createNonEmptyJobGraph(), timeout)___			submissionFuture.get()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(1))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,all,job,manager,runner,are,terminated,if,the,leadership,of,the,dispatcher,is,revoked;test,public,void,test,revoke,leadership,terminates,job,manager,runners,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,high,availability,services,set,submitted,job,graph,store,new,standalone,submitted,job,graph,store,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,high,availability,services,set,dispatcher,leader,election,service,leader,election,service,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,create,non,empty,job,graph,timeout,submission,future,get,assert,that,dispatcher,get,number,jobs,timeout,get,is,1,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception;1548350243;Tests that all JobManagerRunner are terminated if the leadership of the_Dispatcher is revoked.;@Test_	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception {__		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServicesBuilder()_			.setDispatcherLeaderElectionService(leaderElectionService)_			.build()___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createDispatcher(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()___			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(createNonEmptyJobGraph(), timeout)___			submissionFuture.get()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(1))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,all,job,manager,runner,are,terminated,if,the,leadership,of,the,dispatcher,is,revoked;test,public,void,test,revoke,leadership,terminates,job,manager,runners,throws,exception,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,builder,set,dispatcher,leader,election,service,leader,election,service,build,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,create,non,empty,job,graph,timeout,submission,future,get,assert,that,dispatcher,get,number,jobs,timeout,get,is,1,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception;1548350350;Tests that all JobManagerRunner are terminated if the leadership of the_Dispatcher is revoked.;@Test_	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception {__		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServicesBuilder()_			.setDispatcherLeaderElectionService(leaderElectionService)_			.build()___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createDispatcherWithObservableFencingTokens(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()___			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(createNonEmptyJobGraph(), timeout)___			submissionFuture.get()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(1))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,all,job,manager,runner,are,terminated,if,the,leadership,of,the,dispatcher,is,revoked;test,public,void,test,revoke,leadership,terminates,job,manager,runners,throws,exception,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,builder,set,dispatcher,leader,election,service,leader,election,service,build,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,with,observable,fencing,tokens,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,create,non,empty,job,graph,timeout,submission,future,get,assert,that,dispatcher,get,number,jobs,timeout,get,is,1,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception;1548846699;Tests that all JobManagerRunner are terminated if the leadership of the_Dispatcher is revoked.;@Test_	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception {__		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServicesBuilder()_			.setDispatcherLeaderElectionService(leaderElectionService)_			.build()___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createDispatcherWithObservableFencingTokens(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()___			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(createNonEmptyJobGraph(), timeout)___			submissionFuture.get()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(1))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,all,job,manager,runner,are,terminated,if,the,leadership,of,the,dispatcher,is,revoked;test,public,void,test,revoke,leadership,terminates,job,manager,runners,throws,exception,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,builder,set,dispatcher,leader,election,service,leader,election,service,build,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,with,observable,fencing,tokens,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,create,non,empty,job,graph,timeout,submission,future,get,assert,that,dispatcher,get,number,jobs,timeout,get,is,1,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception;1549360057;Tests that all JobManagerRunner are terminated if the leadership of the_Dispatcher is revoked.;@Test_	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception {__		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServicesBuilder()_			.setDispatcherLeaderElectionService(leaderElectionService)_			.build()___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createDispatcherWithObservableFencingTokens(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()___			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(createNonEmptyJobGraph(), timeout)___			submissionFuture.get()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(1))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,all,job,manager,runner,are,terminated,if,the,leadership,of,the,dispatcher,is,revoked;test,public,void,test,revoke,leadership,terminates,job,manager,runners,throws,exception,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,builder,set,dispatcher,leader,election,service,leader,election,service,build,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,with,observable,fencing,tokens,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,create,non,empty,job,graph,timeout,submission,future,get,assert,that,dispatcher,get,number,jobs,timeout,get,is,1,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception;1549635583;Tests that all JobManagerRunner are terminated if the leadership of the_Dispatcher is revoked.;@Test_	public void testRevokeLeadershipTerminatesJobManagerRunners() throws Exception {__		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServicesBuilder()_			.setDispatcherLeaderElectionService(leaderElectionService)_			.build()___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createDispatcherWithObservableFencingTokens(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()___			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(createNonEmptyJobGraph(), timeout)___			submissionFuture.get()___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(1))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(dispatcher.getNumberJobs(timeout).get(), is(0))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,all,job,manager,runner,are,terminated,if,the,leadership,of,the,dispatcher,is,revoked;test,public,void,test,revoke,leadership,terminates,job,manager,runners,throws,exception,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,builder,set,dispatcher,leader,election,service,leader,election,service,build,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,with,observable,fencing,tokens,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,create,non,empty,job,graph,timeout,submission,future,get,assert,that,dispatcher,get,number,jobs,timeout,get,is,1,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,dispatcher,get,number,jobs,timeout,get,is,0,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testJobRecoveryWhenChangingLeadership() throws Exception;1548350350;Tests that a Dispatcher does not remove the JobGraph from the submitted job graph store_when losing leadership and recovers it when regaining leadership.;@Test_	public void testJobRecoveryWhenChangingLeadership() throws Exception {_		final InMemorySubmittedJobGraphStore submittedJobGraphStore = new InMemorySubmittedJobGraphStore()___		final CompletableFuture<JobID> recoveredJobFuture = new CompletableFuture<>()__		submittedJobGraphStore.setRecoverJobGraphFunction((jobID, jobIDSubmittedJobGraphMap) -> {_			recoveredJobFuture.complete(jobID)__			return jobIDSubmittedJobGraphMap.get(jobID)__		})___		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()___		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServicesBuilder()_			.setSubmittedJobGraphStore(submittedJobGraphStore)_			.setDispatcherLeaderElectionService(leaderElectionService)_			.build()___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createDispatcherWithObservableFencingTokens(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()__			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final JobGraph jobGraph = createNonEmptyJobGraph()__			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			submissionFuture.get()___			final JobID jobId = jobGraph.getJobID()__			assertThat(submittedJobGraphStore.contains(jobId), is(true))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(submittedJobGraphStore.contains(jobId), is(true))___			assertThat(recoveredJobFuture.isDone(), is(false))___			_			leaderElectionService.isLeader(DispatcherId.generate().toUUID())___			assertThat(recoveredJobFuture.get(), is(equalTo(jobId)))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,a,dispatcher,does,not,remove,the,job,graph,from,the,submitted,job,graph,store,when,losing,leadership,and,recovers,it,when,regaining,leadership;test,public,void,test,job,recovery,when,changing,leadership,throws,exception,final,in,memory,submitted,job,graph,store,submitted,job,graph,store,new,in,memory,submitted,job,graph,store,final,completable,future,job,id,recovered,job,future,new,completable,future,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,idsubmitted,job,graph,map,recovered,job,future,complete,job,id,return,job,idsubmitted,job,graph,map,get,job,id,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,builder,set,submitted,job,graph,store,submitted,job,graph,store,set,dispatcher,leader,election,service,leader,election,service,build,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,with,observable,fencing,tokens,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,graph,job,graph,create,non,empty,job,graph,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,submission,future,get,final,job,id,job,id,job,graph,get,job,id,assert,that,submitted,job,graph,store,contains,job,id,is,true,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,submitted,job,graph,store,contains,job,id,is,true,assert,that,recovered,job,future,is,done,is,false,leader,election,service,is,leader,dispatcher,id,generate,to,uuid,assert,that,recovered,job,future,get,is,equal,to,job,id,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testJobRecoveryWhenChangingLeadership() throws Exception;1548846699;Tests that a Dispatcher does not remove the JobGraph from the submitted job graph store_when losing leadership and recovers it when regaining leadership.;@Test_	public void testJobRecoveryWhenChangingLeadership() throws Exception {_		final InMemorySubmittedJobGraphStore submittedJobGraphStore = new InMemorySubmittedJobGraphStore()___		final CompletableFuture<JobID> recoveredJobFuture = new CompletableFuture<>()__		submittedJobGraphStore.setRecoverJobGraphFunction((jobID, jobIDSubmittedJobGraphMap) -> {_			recoveredJobFuture.complete(jobID)__			return jobIDSubmittedJobGraphMap.get(jobID)__		})___		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()___		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServicesBuilder()_			.setSubmittedJobGraphStore(submittedJobGraphStore)_			.setDispatcherLeaderElectionService(leaderElectionService)_			.build()___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createDispatcherWithObservableFencingTokens(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()__			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final JobGraph jobGraph = createNonEmptyJobGraph()__			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			submissionFuture.get()___			final JobID jobId = jobGraph.getJobID()__			assertThat(submittedJobGraphStore.contains(jobId), is(true))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(submittedJobGraphStore.contains(jobId), is(true))___			assertThat(recoveredJobFuture.isDone(), is(false))___			_			leaderElectionService.isLeader(DispatcherId.generate().toUUID())___			assertThat(recoveredJobFuture.get(), is(equalTo(jobId)))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,a,dispatcher,does,not,remove,the,job,graph,from,the,submitted,job,graph,store,when,losing,leadership,and,recovers,it,when,regaining,leadership;test,public,void,test,job,recovery,when,changing,leadership,throws,exception,final,in,memory,submitted,job,graph,store,submitted,job,graph,store,new,in,memory,submitted,job,graph,store,final,completable,future,job,id,recovered,job,future,new,completable,future,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,idsubmitted,job,graph,map,recovered,job,future,complete,job,id,return,job,idsubmitted,job,graph,map,get,job,id,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,builder,set,submitted,job,graph,store,submitted,job,graph,store,set,dispatcher,leader,election,service,leader,election,service,build,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,with,observable,fencing,tokens,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,graph,job,graph,create,non,empty,job,graph,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,submission,future,get,final,job,id,job,id,job,graph,get,job,id,assert,that,submitted,job,graph,store,contains,job,id,is,true,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,submitted,job,graph,store,contains,job,id,is,true,assert,that,recovered,job,future,is,done,is,false,leader,election,service,is,leader,dispatcher,id,generate,to,uuid,assert,that,recovered,job,future,get,is,equal,to,job,id,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testJobRecoveryWhenChangingLeadership() throws Exception;1549360057;Tests that a Dispatcher does not remove the JobGraph from the submitted job graph store_when losing leadership and recovers it when regaining leadership.;@Test_	public void testJobRecoveryWhenChangingLeadership() throws Exception {_		final InMemorySubmittedJobGraphStore submittedJobGraphStore = new InMemorySubmittedJobGraphStore()___		final CompletableFuture<JobID> recoveredJobFuture = new CompletableFuture<>()__		submittedJobGraphStore.setRecoverJobGraphFunction((jobID, jobIDSubmittedJobGraphMap) -> {_			recoveredJobFuture.complete(jobID)__			return jobIDSubmittedJobGraphMap.get(jobID)__		})___		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()___		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServicesBuilder()_			.setSubmittedJobGraphStore(submittedJobGraphStore)_			.setDispatcherLeaderElectionService(leaderElectionService)_			.build()___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createDispatcherWithObservableFencingTokens(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()__			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final JobGraph jobGraph = createNonEmptyJobGraph()__			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			submissionFuture.get()___			final JobID jobId = jobGraph.getJobID()__			assertThat(submittedJobGraphStore.contains(jobId), is(true))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(submittedJobGraphStore.contains(jobId), is(true))___			assertThat(recoveredJobFuture.isDone(), is(false))___			_			leaderElectionService.isLeader(DispatcherId.generate().toUUID())___			assertThat(recoveredJobFuture.get(), is(equalTo(jobId)))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,a,dispatcher,does,not,remove,the,job,graph,from,the,submitted,job,graph,store,when,losing,leadership,and,recovers,it,when,regaining,leadership;test,public,void,test,job,recovery,when,changing,leadership,throws,exception,final,in,memory,submitted,job,graph,store,submitted,job,graph,store,new,in,memory,submitted,job,graph,store,final,completable,future,job,id,recovered,job,future,new,completable,future,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,idsubmitted,job,graph,map,recovered,job,future,complete,job,id,return,job,idsubmitted,job,graph,map,get,job,id,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,builder,set,submitted,job,graph,store,submitted,job,graph,store,set,dispatcher,leader,election,service,leader,election,service,build,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,with,observable,fencing,tokens,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,graph,job,graph,create,non,empty,job,graph,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,submission,future,get,final,job,id,job,id,job,graph,get,job,id,assert,that,submitted,job,graph,store,contains,job,id,is,true,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,submitted,job,graph,store,contains,job,id,is,true,assert,that,recovered,job,future,is,done,is,false,leader,election,service,is,leader,dispatcher,id,generate,to,uuid,assert,that,recovered,job,future,get,is,equal,to,job,id,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testJobRecoveryWhenChangingLeadership() throws Exception;1549635583;Tests that a Dispatcher does not remove the JobGraph from the submitted job graph store_when losing leadership and recovers it when regaining leadership.;@Test_	public void testJobRecoveryWhenChangingLeadership() throws Exception {_		final InMemorySubmittedJobGraphStore submittedJobGraphStore = new InMemorySubmittedJobGraphStore()___		final CompletableFuture<JobID> recoveredJobFuture = new CompletableFuture<>()__		submittedJobGraphStore.setRecoverJobGraphFunction((jobID, jobIDSubmittedJobGraphMap) -> {_			recoveredJobFuture.complete(jobID)__			return jobIDSubmittedJobGraphMap.get(jobID)__		})___		final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()___		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServicesBuilder()_			.setSubmittedJobGraphStore(submittedJobGraphStore)_			.setDispatcherLeaderElectionService(leaderElectionService)_			.build()___		final ArrayBlockingQueue<DispatcherId> fencingTokens = new ArrayBlockingQueue<>(2)__		final HATestingDispatcher dispatcher = createDispatcherWithObservableFencingTokens(_			highAvailabilityServices,_			fencingTokens)___		dispatcher.start()___		try {_			_			final DispatcherId expectedDispatcherId = DispatcherId.generate()__			leaderElectionService.isLeader(expectedDispatcherId.toUUID()).get()___			assertThat(fencingTokens.take(), is(equalTo(expectedDispatcherId)))___			final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			final JobGraph jobGraph = createNonEmptyJobGraph()__			final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			submissionFuture.get()___			final JobID jobId = jobGraph.getJobID()__			assertThat(submittedJobGraphStore.contains(jobId), is(true))___			_			leaderElectionService.notLeader()___			assertThat(fencingTokens.take(), is(equalTo(NULL_FENCING_TOKEN)))___			assertThat(submittedJobGraphStore.contains(jobId), is(true))___			assertThat(recoveredJobFuture.isDone(), is(false))___			_			leaderElectionService.isLeader(DispatcherId.generate().toUUID())___			assertThat(recoveredJobFuture.get(), is(equalTo(jobId)))__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,a,dispatcher,does,not,remove,the,job,graph,from,the,submitted,job,graph,store,when,losing,leadership,and,recovers,it,when,regaining,leadership;test,public,void,test,job,recovery,when,changing,leadership,throws,exception,final,in,memory,submitted,job,graph,store,submitted,job,graph,store,new,in,memory,submitted,job,graph,store,final,completable,future,job,id,recovered,job,future,new,completable,future,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,idsubmitted,job,graph,map,recovered,job,future,complete,job,id,return,job,idsubmitted,job,graph,map,get,job,id,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,builder,set,submitted,job,graph,store,submitted,job,graph,store,set,dispatcher,leader,election,service,leader,election,service,build,final,array,blocking,queue,dispatcher,id,fencing,tokens,new,array,blocking,queue,2,final,hatesting,dispatcher,dispatcher,create,dispatcher,with,observable,fencing,tokens,high,availability,services,fencing,tokens,dispatcher,start,try,final,dispatcher,id,expected,dispatcher,id,dispatcher,id,generate,leader,election,service,is,leader,expected,dispatcher,id,to,uuid,get,assert,that,fencing,tokens,take,is,equal,to,expected,dispatcher,id,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,graph,job,graph,create,non,empty,job,graph,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,submission,future,get,final,job,id,job,id,job,graph,get,job,id,assert,that,submitted,job,graph,store,contains,job,id,is,true,leader,election,service,not,leader,assert,that,fencing,tokens,take,is,equal,to,assert,that,submitted,job,graph,store,contains,job,id,is,true,assert,that,recovered,job,future,is,done,is,false,leader,election,service,is,leader,dispatcher,id,generate,to,uuid,assert,that,recovered,job,future,get,is,equal,to,job,id,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherHATest -> @Test 	public void testFailingRecoveryIsAFatalError() throws Exception;1548350350;Tests that a fatal error is reported if the job recovery fails.;@Test_	public void testFailingRecoveryIsAFatalError() throws Exception {_		final String exceptionMessage = "Job recovery test failure."__		final Supplier<Exception> exceptionSupplier = () -> new FlinkException(exceptionMessage)__		final TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServicesBuilder()_			.setSubmittedJobGraphStore(new FailingSubmittedJobGraphStore(exceptionSupplier))_			.build()___		final HATestingDispatcher dispatcher = createDispatcher(haServices)__		dispatcher.start()___		final Throwable failure = testingFatalErrorHandler.getErrorFuture().get()___		assertThat(ExceptionUtils.findThrowableWithMessage(failure, exceptionMessage).isPresent(), is(true))___		testingFatalErrorHandler.clearError()__	};tests,that,a,fatal,error,is,reported,if,the,job,recovery,fails;test,public,void,test,failing,recovery,is,afatal,error,throws,exception,final,string,exception,message,job,recovery,test,failure,final,supplier,exception,exception,supplier,new,flink,exception,exception,message,final,testing,high,availability,services,ha,services,new,testing,high,availability,services,builder,set,submitted,job,graph,store,new,failing,submitted,job,graph,store,exception,supplier,build,final,hatesting,dispatcher,dispatcher,create,dispatcher,ha,services,dispatcher,start,final,throwable,failure,testing,fatal,error,handler,get,error,future,get,assert,that,exception,utils,find,throwable,with,message,failure,exception,message,is,present,is,true,testing,fatal,error,handler,clear,error
DispatcherHATest -> @Test 	public void testFailingRecoveryIsAFatalError() throws Exception;1548846699;Tests that a fatal error is reported if the job recovery fails.;@Test_	public void testFailingRecoveryIsAFatalError() throws Exception {_		final String exceptionMessage = "Job recovery test failure."__		final Supplier<Exception> exceptionSupplier = () -> new FlinkException(exceptionMessage)__		final TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServicesBuilder()_			.setSubmittedJobGraphStore(new FailingSubmittedJobGraphStore(exceptionSupplier))_			.build()___		final HATestingDispatcher dispatcher = createDispatcher(haServices)__		dispatcher.start()___		final Throwable failure = testingFatalErrorHandler.getErrorFuture().get()___		assertThat(ExceptionUtils.findThrowableWithMessage(failure, exceptionMessage).isPresent(), is(true))___		testingFatalErrorHandler.clearError()__	};tests,that,a,fatal,error,is,reported,if,the,job,recovery,fails;test,public,void,test,failing,recovery,is,afatal,error,throws,exception,final,string,exception,message,job,recovery,test,failure,final,supplier,exception,exception,supplier,new,flink,exception,exception,message,final,testing,high,availability,services,ha,services,new,testing,high,availability,services,builder,set,submitted,job,graph,store,new,failing,submitted,job,graph,store,exception,supplier,build,final,hatesting,dispatcher,dispatcher,create,dispatcher,ha,services,dispatcher,start,final,throwable,failure,testing,fatal,error,handler,get,error,future,get,assert,that,exception,utils,find,throwable,with,message,failure,exception,message,is,present,is,true,testing,fatal,error,handler,clear,error
DispatcherHATest -> @Test 	public void testFailingRecoveryIsAFatalError() throws Exception;1549360057;Tests that a fatal error is reported if the job recovery fails.;@Test_	public void testFailingRecoveryIsAFatalError() throws Exception {_		final String exceptionMessage = "Job recovery test failure."__		final Supplier<Exception> exceptionSupplier = () -> new FlinkException(exceptionMessage)__		final TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServicesBuilder()_			.setSubmittedJobGraphStore(new FailingSubmittedJobGraphStore(exceptionSupplier))_			.build()___		final HATestingDispatcher dispatcher = createDispatcher(haServices)__		dispatcher.start()___		final Throwable failure = testingFatalErrorHandler.getErrorFuture().get()___		assertThat(ExceptionUtils.findThrowableWithMessage(failure, exceptionMessage).isPresent(), is(true))___		testingFatalErrorHandler.clearError()__	};tests,that,a,fatal,error,is,reported,if,the,job,recovery,fails;test,public,void,test,failing,recovery,is,afatal,error,throws,exception,final,string,exception,message,job,recovery,test,failure,final,supplier,exception,exception,supplier,new,flink,exception,exception,message,final,testing,high,availability,services,ha,services,new,testing,high,availability,services,builder,set,submitted,job,graph,store,new,failing,submitted,job,graph,store,exception,supplier,build,final,hatesting,dispatcher,dispatcher,create,dispatcher,ha,services,dispatcher,start,final,throwable,failure,testing,fatal,error,handler,get,error,future,get,assert,that,exception,utils,find,throwable,with,message,failure,exception,message,is,present,is,true,testing,fatal,error,handler,clear,error
DispatcherHATest -> @Test 	public void testFailingRecoveryIsAFatalError() throws Exception;1549635583;Tests that a fatal error is reported if the job recovery fails.;@Test_	public void testFailingRecoveryIsAFatalError() throws Exception {_		final String exceptionMessage = "Job recovery test failure."__		final Supplier<Exception> exceptionSupplier = () -> new FlinkException(exceptionMessage)__		final TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServicesBuilder()_			.setSubmittedJobGraphStore(new FailingSubmittedJobGraphStore(exceptionSupplier))_			.build()___		final HATestingDispatcher dispatcher = createDispatcher(haServices)__		dispatcher.start()___		final Throwable failure = testingFatalErrorHandler.getErrorFuture().get()___		assertThat(ExceptionUtils.findThrowableWithMessage(failure, exceptionMessage).isPresent(), is(true))___		testingFatalErrorHandler.clearError()__	};tests,that,a,fatal,error,is,reported,if,the,job,recovery,fails;test,public,void,test,failing,recovery,is,afatal,error,throws,exception,final,string,exception,message,job,recovery,test,failure,final,supplier,exception,exception,supplier,new,flink,exception,exception,message,final,testing,high,availability,services,ha,services,new,testing,high,availability,services,builder,set,submitted,job,graph,store,new,failing,submitted,job,graph,store,exception,supplier,build,final,hatesting,dispatcher,dispatcher,create,dispatcher,ha,services,dispatcher,start,final,throwable,failure,testing,fatal,error,handler,get,error,future,get,assert,that,exception,utils,find,throwable,with,message,failure,exception,message,is,present,is,true,testing,fatal,error,handler,clear,error
