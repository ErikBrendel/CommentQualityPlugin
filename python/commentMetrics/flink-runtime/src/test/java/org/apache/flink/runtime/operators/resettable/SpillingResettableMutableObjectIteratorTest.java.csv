# id;timestamp;commentText;codeText;commentWords;codeWords
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIteratorInMemory();1405024514;Tests the resettable iterator with enough memory so that all data is kept locally in memory.;@Test_	public void testResettableIteratorInMemory() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 20, memOwner)__			_			_			iterator.open()___			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,memory;test,public,void,test,resettable,iterator,in,memory,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,20,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIteratorInMemory();1405090423;Tests the resettable iterator with enough memory so that all data is kept locally in memory.;@Test_	public void testResettableIteratorInMemory() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 20, memOwner)__			_			_			iterator.open()___			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,memory;test,public,void,test,resettable,iterator,in,memory,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,20,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIteratorInMemory();1406674317;Tests the resettable iterator with enough memory so that all data is kept locally in memory.;@Test_	public void testResettableIteratorInMemory() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 20, memOwner)__			_			_			iterator.open()___			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,memory;test,public,void,test,resettable,iterator,in,memory,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,20,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIteratorInMemory();1411399886;Tests the resettable iterator with enough memory so that all data is kept locally in memory.;@Test_	public void testResettableIteratorInMemory() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 20, memOwner)__			_			_			iterator.open()___			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,memory;test,public,void,test,resettable,iterator,in,memory,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,20,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIteratorInMemory();1411473593;Tests the resettable iterator with enough memory so that all data is kept locally in memory.;@Test_	public void testResettableIteratorInMemory() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 20, memOwner)__			_			_			iterator.open()___			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,memory;test,public,void,test,resettable,iterator,in,memory,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,20,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIteratorInMemory();1415702894;Tests the resettable iterator with enough memory so that all data is kept locally in memory.;@Test_	public void testResettableIteratorInMemory() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 20, memOwner)__			_			_			iterator.open()___			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,memory;test,public,void,test,resettable,iterator,in,memory,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,20,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIteratorInMemory();1421050512;Tests the resettable iterator with enough memory so that all data is kept locally in memory.;@Test_	public void testResettableIteratorInMemory() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 20, memOwner)__			_			_			iterator.open()___			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,memory;test,public,void,test,resettable,iterator,in,memory,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,20,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIteratorInMemory();1441738685;Tests the resettable iterator with enough memory so that all data is kept locally in memory.;@Test_	public void testResettableIteratorInMemory() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 20, memOwner)__			_			_			iterator.open()___			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,memory;test,public,void,test,resettable,iterator,in,memory,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,20,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIteratorInMemory();1450111722;Tests the resettable iterator with enough memory so that all data is kept locally in memory.;@Test_	public void testResettableIteratorInMemory() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 20, memOwner)__			_			_			iterator.open()___			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,memory;test,public,void,test,resettable,iterator,in,memory,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,20,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIterator();1405024514;Tests the resettable iterator with too little memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 2, memOwner)__	_			_			iterator.open()__			_			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,little,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,2,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIterator();1405090423;Tests the resettable iterator with too little memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 2, memOwner)__	_			_			iterator.open()__			_			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,little,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,2,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIterator();1406674317;Tests the resettable iterator with too little memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 2, memOwner)__	_			_			iterator.open()__			_			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,little,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,2,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIterator();1411399886;Tests the resettable iterator with too little memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 2, memOwner)__	_			_			iterator.open()__			_			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,little,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,2,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIterator();1411473593;Tests the resettable iterator with too little memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 2, memOwner)__	_			_			iterator.open()__			_			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,little,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,2,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIterator();1415702894;Tests the resettable iterator with too little memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 2, memOwner)__	_			_			iterator.open()__			_			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,little,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,2,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIterator();1421050512;Tests the resettable iterator with too little memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 2, memOwner)__	_			_			iterator.open()__			_			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,little,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,2,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIterator();1441738685;Tests the resettable iterator with too little memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 2, memOwner)__	_			_			iterator.open()__			_			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,little,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,2,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableMutableObjectIteratorTest -> @Test 	public void testResettableIterator();1450111722;Tests the resettable iterator with too little memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			final AbstractInvokable memOwner = new DummyInvokable()__	_			_			SpillingResettableMutableObjectIterator<Record> iterator = new SpillingResettableMutableObjectIterator<Record>(_				this.reader, this.serializer, this.memman, this.ioman, 2, memOwner)__	_			_			iterator.open()__			_			_			int count = 0__			Record target = new Record()__			while ((target = iterator.next(target)) != null) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					target.getField(0, IntValue.class).getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				target = new Record()__				_				while ((target = iterator.next(target)) != null) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, target.getField(0, IntValue.class).getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,little,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,final,abstract,invokable,mem,owner,new,dummy,invokable,spilling,resettable,mutable,object,iterator,record,iterator,new,spilling,resettable,mutable,object,iterator,record,this,reader,this,serializer,this,memman,this,ioman,2,mem,owner,iterator,open,int,count,0,record,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,target,new,record,while,target,iterator,next,target,null,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,target,get,field,0,int,value,class,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
