# id;timestamp;commentText;codeText;commentWords;codeWords
StandaloneHaServicesTest -> @Test 	public void testLeaderElection() throws Exception;1493975155;Tests that the standalone leader election services return a fixed address and leader session_id.;@Test_	public void testLeaderElection() throws Exception {_		JobID jobId = new JobID()__		LeaderContender jmLeaderContender = mock(LeaderContender.class)__		LeaderContender rmLeaderContender = mock(LeaderContender.class)___		LeaderElectionService jmLeaderElectionService = standaloneHaServices.getJobManagerLeaderElectionService(jobId)__		LeaderElectionService rmLeaderElectionService = standaloneHaServices.getResourceManagerLeaderElectionService()___		jmLeaderElectionService.start(jmLeaderContender)__		rmLeaderElectionService.start(rmLeaderContender)___		verify(jmLeaderContender).grantLeadership(eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(rmLeaderContender).grantLeadership(eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__	};tests,that,the,standalone,leader,election,services,return,a,fixed,address,and,leader,session,id;test,public,void,test,leader,election,throws,exception,job,id,job,id,new,job,id,leader,contender,jm,leader,contender,mock,leader,contender,class,leader,contender,rm,leader,contender,mock,leader,contender,class,leader,election,service,jm,leader,election,service,standalone,ha,services,get,job,manager,leader,election,service,job,id,leader,election,service,rm,leader,election,service,standalone,ha,services,get,resource,manager,leader,election,service,jm,leader,election,service,start,jm,leader,contender,rm,leader,election,service,start,rm,leader,contender,verify,jm,leader,contender,grant,leadership,eq,high,availability,services,verify,rm,leader,contender,grant,leadership,eq,high,availability,services
StandaloneHaServicesTest -> @Test 	public void testLeaderElection() throws Exception;1499381502;Tests that the standalone leader election services return a fixed address and leader session_id.;@Test_	public void testLeaderElection() throws Exception {_		JobID jobId = new JobID()__		LeaderContender jmLeaderContender = mock(LeaderContender.class)__		LeaderContender rmLeaderContender = mock(LeaderContender.class)___		LeaderElectionService jmLeaderElectionService = standaloneHaServices.getJobManagerLeaderElectionService(jobId)__		LeaderElectionService rmLeaderElectionService = standaloneHaServices.getResourceManagerLeaderElectionService()___		jmLeaderElectionService.start(jmLeaderContender)__		rmLeaderElectionService.start(rmLeaderContender)___		verify(jmLeaderContender).grantLeadership(eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(rmLeaderContender).grantLeadership(eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__	};tests,that,the,standalone,leader,election,services,return,a,fixed,address,and,leader,session,id;test,public,void,test,leader,election,throws,exception,job,id,job,id,new,job,id,leader,contender,jm,leader,contender,mock,leader,contender,class,leader,contender,rm,leader,contender,mock,leader,contender,class,leader,election,service,jm,leader,election,service,standalone,ha,services,get,job,manager,leader,election,service,job,id,leader,election,service,rm,leader,election,service,standalone,ha,services,get,resource,manager,leader,election,service,jm,leader,election,service,start,jm,leader,contender,rm,leader,election,service,start,rm,leader,contender,verify,jm,leader,contender,grant,leadership,eq,high,availability,services,verify,rm,leader,contender,grant,leadership,eq,high,availability,services
StandaloneHaServicesTest -> @Test 	public void testLeaderElection() throws Exception;1504472365;Tests that the standalone leader election services return a fixed address and leader session_id.;@Test_	public void testLeaderElection() throws Exception {_		JobID jobId = new JobID()__		LeaderContender jmLeaderContender = mock(LeaderContender.class)__		LeaderContender rmLeaderContender = mock(LeaderContender.class)___		LeaderElectionService jmLeaderElectionService = standaloneHaServices.getJobManagerLeaderElectionService(jobId)__		LeaderElectionService rmLeaderElectionService = standaloneHaServices.getResourceManagerLeaderElectionService()___		jmLeaderElectionService.start(jmLeaderContender)__		rmLeaderElectionService.start(rmLeaderContender)___		verify(jmLeaderContender).grantLeadership(eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(rmLeaderContender).grantLeadership(eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__	};tests,that,the,standalone,leader,election,services,return,a,fixed,address,and,leader,session,id;test,public,void,test,leader,election,throws,exception,job,id,job,id,new,job,id,leader,contender,jm,leader,contender,mock,leader,contender,class,leader,contender,rm,leader,contender,mock,leader,contender,class,leader,election,service,jm,leader,election,service,standalone,ha,services,get,job,manager,leader,election,service,job,id,leader,election,service,rm,leader,election,service,standalone,ha,services,get,resource,manager,leader,election,service,jm,leader,election,service,start,jm,leader,contender,rm,leader,election,service,start,rm,leader,contender,verify,jm,leader,contender,grant,leadership,eq,high,availability,services,verify,rm,leader,contender,grant,leadership,eq,high,availability,services
StandaloneHaServicesTest -> @Test 	public void testLeaderElection() throws Exception;1516971025;Tests that the standalone leader election services return a fixed address and leader session_id.;@Test_	public void testLeaderElection() throws Exception {_		JobID jobId = new JobID()__		LeaderContender jmLeaderContender = mock(LeaderContender.class)__		LeaderContender rmLeaderContender = mock(LeaderContender.class)___		LeaderElectionService jmLeaderElectionService = standaloneHaServices.getJobManagerLeaderElectionService(jobId)__		LeaderElectionService rmLeaderElectionService = standaloneHaServices.getResourceManagerLeaderElectionService()___		jmLeaderElectionService.start(jmLeaderContender)__		rmLeaderElectionService.start(rmLeaderContender)___		verify(jmLeaderContender).grantLeadership(eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(rmLeaderContender).grantLeadership(eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__	};tests,that,the,standalone,leader,election,services,return,a,fixed,address,and,leader,session,id;test,public,void,test,leader,election,throws,exception,job,id,job,id,new,job,id,leader,contender,jm,leader,contender,mock,leader,contender,class,leader,contender,rm,leader,contender,mock,leader,contender,class,leader,election,service,jm,leader,election,service,standalone,ha,services,get,job,manager,leader,election,service,job,id,leader,election,service,rm,leader,election,service,standalone,ha,services,get,resource,manager,leader,election,service,jm,leader,election,service,start,jm,leader,contender,rm,leader,election,service,start,rm,leader,contender,verify,jm,leader,contender,grant,leadership,eq,high,availability,services,verify,rm,leader,contender,grant,leadership,eq,high,availability,services
StandaloneHaServicesTest -> @Test 	public void testLeaderElection() throws Exception;1522681180;Tests that the standalone leader election services return a fixed address and leader session_id.;@Test_	public void testLeaderElection() throws Exception {_		JobID jobId = new JobID()__		LeaderContender jmLeaderContender = mock(LeaderContender.class)__		LeaderContender rmLeaderContender = mock(LeaderContender.class)___		LeaderElectionService jmLeaderElectionService = standaloneHaServices.getJobManagerLeaderElectionService(jobId)__		LeaderElectionService rmLeaderElectionService = standaloneHaServices.getResourceManagerLeaderElectionService()___		jmLeaderElectionService.start(jmLeaderContender)__		rmLeaderElectionService.start(rmLeaderContender)___		verify(jmLeaderContender).grantLeadership(eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(rmLeaderContender).grantLeadership(eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__	};tests,that,the,standalone,leader,election,services,return,a,fixed,address,and,leader,session,id;test,public,void,test,leader,election,throws,exception,job,id,job,id,new,job,id,leader,contender,jm,leader,contender,mock,leader,contender,class,leader,contender,rm,leader,contender,mock,leader,contender,class,leader,election,service,jm,leader,election,service,standalone,ha,services,get,job,manager,leader,election,service,job,id,leader,election,service,rm,leader,election,service,standalone,ha,services,get,resource,manager,leader,election,service,jm,leader,election,service,start,jm,leader,contender,rm,leader,election,service,start,rm,leader,contender,verify,jm,leader,contender,grant,leadership,eq,high,availability,services,verify,rm,leader,contender,grant,leadership,eq,high,availability,services
StandaloneHaServicesTest -> @Test 	public void testJobManagerLeaderRetrievalFlip6() throws Exception;1499381502;Tests that the standalone leader retrieval services return the given address and the_fixed leader session id.;@Test_	public void testJobManagerLeaderRetrievalFlip6() throws Exception {_		JobID jobId1 = new JobID()__		JobID jobId2 = new JobID()__		final String jobManagerAddress1 = "foobar"__		final String jobManagerAddress2 = "barfoo"__		LeaderRetrievalListener jmListener1 = mock(LeaderRetrievalListener.class)__		LeaderRetrievalListener jmListener2 = mock(LeaderRetrievalListener.class)___		LeaderRetrievalService jmLeaderRetrievalService1 = standaloneHaServices.getJobManagerLeaderRetriever(jobId1, jobManagerAddress1)__		LeaderRetrievalService jmLeaderRetrievalService2 = standaloneHaServices.getJobManagerLeaderRetriever(jobId2, jobManagerAddress2)___		jmLeaderRetrievalService1.start(jmListener1)__		jmLeaderRetrievalService2.start(jmListener2)___		verify(jmListener1).notifyLeaderAddress(eq(jobManagerAddress1), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(jmListener2).notifyLeaderAddress(eq(jobManagerAddress2), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__	};tests,that,the,standalone,leader,retrieval,services,return,the,given,address,and,the,fixed,leader,session,id;test,public,void,test,job,manager,leader,retrieval,flip6,throws,exception,job,id,job,id1,new,job,id,job,id,job,id2,new,job,id,final,string,job,manager,address1,foobar,final,string,job,manager,address2,barfoo,leader,retrieval,listener,jm,listener1,mock,leader,retrieval,listener,class,leader,retrieval,listener,jm,listener2,mock,leader,retrieval,listener,class,leader,retrieval,service,jm,leader,retrieval,service1,standalone,ha,services,get,job,manager,leader,retriever,job,id1,job,manager,address1,leader,retrieval,service,jm,leader,retrieval,service2,standalone,ha,services,get,job,manager,leader,retriever,job,id2,job,manager,address2,jm,leader,retrieval,service1,start,jm,listener1,jm,leader,retrieval,service2,start,jm,listener2,verify,jm,listener1,notify,leader,address,eq,job,manager,address1,eq,high,availability,services,verify,jm,listener2,notify,leader,address,eq,job,manager,address2,eq,high,availability,services
StandaloneHaServicesTest -> @Test 	public void testJobManagerLeaderRetrievalFlip6() throws Exception;1504472365;Tests that the standalone leader retrieval services return the given address and the_fixed leader session id.;@Test_	public void testJobManagerLeaderRetrievalFlip6() throws Exception {_		JobID jobId1 = new JobID()__		JobID jobId2 = new JobID()__		final String jobManagerAddress1 = "foobar"__		final String jobManagerAddress2 = "barfoo"__		LeaderRetrievalListener jmListener1 = mock(LeaderRetrievalListener.class)__		LeaderRetrievalListener jmListener2 = mock(LeaderRetrievalListener.class)___		LeaderRetrievalService jmLeaderRetrievalService1 = standaloneHaServices.getJobManagerLeaderRetriever(jobId1, jobManagerAddress1)__		LeaderRetrievalService jmLeaderRetrievalService2 = standaloneHaServices.getJobManagerLeaderRetriever(jobId2, jobManagerAddress2)___		jmLeaderRetrievalService1.start(jmListener1)__		jmLeaderRetrievalService2.start(jmListener2)___		verify(jmListener1).notifyLeaderAddress(eq(jobManagerAddress1), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(jmListener2).notifyLeaderAddress(eq(jobManagerAddress2), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__	};tests,that,the,standalone,leader,retrieval,services,return,the,given,address,and,the,fixed,leader,session,id;test,public,void,test,job,manager,leader,retrieval,flip6,throws,exception,job,id,job,id1,new,job,id,job,id,job,id2,new,job,id,final,string,job,manager,address1,foobar,final,string,job,manager,address2,barfoo,leader,retrieval,listener,jm,listener1,mock,leader,retrieval,listener,class,leader,retrieval,listener,jm,listener2,mock,leader,retrieval,listener,class,leader,retrieval,service,jm,leader,retrieval,service1,standalone,ha,services,get,job,manager,leader,retriever,job,id1,job,manager,address1,leader,retrieval,service,jm,leader,retrieval,service2,standalone,ha,services,get,job,manager,leader,retriever,job,id2,job,manager,address2,jm,leader,retrieval,service1,start,jm,listener1,jm,leader,retrieval,service2,start,jm,listener2,verify,jm,listener1,notify,leader,address,eq,job,manager,address1,eq,high,availability,services,verify,jm,listener2,notify,leader,address,eq,job,manager,address2,eq,high,availability,services
StandaloneHaServicesTest -> @Test 	public void testJobManagerLeaderRetrievalFlip6() throws Exception;1516971025;Tests that the standalone leader retrieval services return the given address and the_fixed leader session id.;@Test_	public void testJobManagerLeaderRetrievalFlip6() throws Exception {_		JobID jobId1 = new JobID()__		JobID jobId2 = new JobID()__		final String jobManagerAddress1 = "foobar"__		final String jobManagerAddress2 = "barfoo"__		LeaderRetrievalListener jmListener1 = mock(LeaderRetrievalListener.class)__		LeaderRetrievalListener jmListener2 = mock(LeaderRetrievalListener.class)___		LeaderRetrievalService jmLeaderRetrievalService1 = standaloneHaServices.getJobManagerLeaderRetriever(jobId1, jobManagerAddress1)__		LeaderRetrievalService jmLeaderRetrievalService2 = standaloneHaServices.getJobManagerLeaderRetriever(jobId2, jobManagerAddress2)___		jmLeaderRetrievalService1.start(jmListener1)__		jmLeaderRetrievalService2.start(jmListener2)___		verify(jmListener1).notifyLeaderAddress(eq(jobManagerAddress1), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(jmListener2).notifyLeaderAddress(eq(jobManagerAddress2), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__	};tests,that,the,standalone,leader,retrieval,services,return,the,given,address,and,the,fixed,leader,session,id;test,public,void,test,job,manager,leader,retrieval,flip6,throws,exception,job,id,job,id1,new,job,id,job,id,job,id2,new,job,id,final,string,job,manager,address1,foobar,final,string,job,manager,address2,barfoo,leader,retrieval,listener,jm,listener1,mock,leader,retrieval,listener,class,leader,retrieval,listener,jm,listener2,mock,leader,retrieval,listener,class,leader,retrieval,service,jm,leader,retrieval,service1,standalone,ha,services,get,job,manager,leader,retriever,job,id1,job,manager,address1,leader,retrieval,service,jm,leader,retrieval,service2,standalone,ha,services,get,job,manager,leader,retriever,job,id2,job,manager,address2,jm,leader,retrieval,service1,start,jm,listener1,jm,leader,retrieval,service2,start,jm,listener2,verify,jm,listener1,notify,leader,address,eq,job,manager,address1,eq,high,availability,services,verify,jm,listener2,notify,leader,address,eq,job,manager,address2,eq,high,availability,services
StandaloneHaServicesTest -> @Test 	public void testJobManagerLeaderRetrieval() throws Exception;1493975155;Tests that the standalone leader retrieval services return the specified address and the_fixed leader session id.;@Test_	public void testJobManagerLeaderRetrieval() throws Exception {_		JobID jobId1 = new JobID()__		JobID jobId2 = new JobID()__		LeaderRetrievalListener jmListener1 = mock(LeaderRetrievalListener.class)__		LeaderRetrievalListener jmListener2 = mock(LeaderRetrievalListener.class)__		LeaderRetrievalListener rmListener = mock(LeaderRetrievalListener.class)___		LeaderRetrievalService jmLeaderRetrievalService1 = standaloneHaServices.getJobManagerLeaderRetriever(jobId1)__		LeaderRetrievalService jmLeaderRetrievalService2 = standaloneHaServices.getJobManagerLeaderRetriever(jobId2)__		LeaderRetrievalService rmLeaderRetrievalService = standaloneHaServices.getResourceManagerLeaderRetriever()___		jmLeaderRetrievalService1.start(jmListener1)__		jmLeaderRetrievalService2.start(jmListener2)__		rmLeaderRetrievalService.start(rmListener)___		verify(jmListener1).notifyLeaderAddress(eq(jobManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(jmListener2).notifyLeaderAddress(eq(jobManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(rmListener).notifyLeaderAddress(eq(resourceManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__	};tests,that,the,standalone,leader,retrieval,services,return,the,specified,address,and,the,fixed,leader,session,id;test,public,void,test,job,manager,leader,retrieval,throws,exception,job,id,job,id1,new,job,id,job,id,job,id2,new,job,id,leader,retrieval,listener,jm,listener1,mock,leader,retrieval,listener,class,leader,retrieval,listener,jm,listener2,mock,leader,retrieval,listener,class,leader,retrieval,listener,rm,listener,mock,leader,retrieval,listener,class,leader,retrieval,service,jm,leader,retrieval,service1,standalone,ha,services,get,job,manager,leader,retriever,job,id1,leader,retrieval,service,jm,leader,retrieval,service2,standalone,ha,services,get,job,manager,leader,retriever,job,id2,leader,retrieval,service,rm,leader,retrieval,service,standalone,ha,services,get,resource,manager,leader,retriever,jm,leader,retrieval,service1,start,jm,listener1,jm,leader,retrieval,service2,start,jm,listener2,rm,leader,retrieval,service,start,rm,listener,verify,jm,listener1,notify,leader,address,eq,job,manager,address,eq,high,availability,services,verify,jm,listener2,notify,leader,address,eq,job,manager,address,eq,high,availability,services,verify,rm,listener,notify,leader,address,eq,resource,manager,address,eq,high,availability,services
StandaloneHaServicesTest -> @Test 	public void testJobManagerLeaderRetrieval() throws Exception;1499381502;Tests that the standalone leader retrieval services return the specified address and the_fixed leader session id.;@Test_	public void testJobManagerLeaderRetrieval() throws Exception {_		JobID jobId1 = new JobID()__		JobID jobId2 = new JobID()__		LeaderRetrievalListener jmListener1 = mock(LeaderRetrievalListener.class)__		LeaderRetrievalListener jmListener2 = mock(LeaderRetrievalListener.class)__		LeaderRetrievalListener rmListener = mock(LeaderRetrievalListener.class)___		LeaderRetrievalService jmLeaderRetrievalService1 = standaloneHaServices.getJobManagerLeaderRetriever(jobId1)__		LeaderRetrievalService jmLeaderRetrievalService2 = standaloneHaServices.getJobManagerLeaderRetriever(jobId2)__		LeaderRetrievalService rmLeaderRetrievalService = standaloneHaServices.getResourceManagerLeaderRetriever()___		jmLeaderRetrievalService1.start(jmListener1)__		jmLeaderRetrievalService2.start(jmListener2)__		rmLeaderRetrievalService.start(rmListener)___		verify(jmListener1).notifyLeaderAddress(eq(jobManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(jmListener2).notifyLeaderAddress(eq(jobManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(rmListener).notifyLeaderAddress(eq(resourceManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__	};tests,that,the,standalone,leader,retrieval,services,return,the,specified,address,and,the,fixed,leader,session,id;test,public,void,test,job,manager,leader,retrieval,throws,exception,job,id,job,id1,new,job,id,job,id,job,id2,new,job,id,leader,retrieval,listener,jm,listener1,mock,leader,retrieval,listener,class,leader,retrieval,listener,jm,listener2,mock,leader,retrieval,listener,class,leader,retrieval,listener,rm,listener,mock,leader,retrieval,listener,class,leader,retrieval,service,jm,leader,retrieval,service1,standalone,ha,services,get,job,manager,leader,retriever,job,id1,leader,retrieval,service,jm,leader,retrieval,service2,standalone,ha,services,get,job,manager,leader,retriever,job,id2,leader,retrieval,service,rm,leader,retrieval,service,standalone,ha,services,get,resource,manager,leader,retriever,jm,leader,retrieval,service1,start,jm,listener1,jm,leader,retrieval,service2,start,jm,listener2,rm,leader,retrieval,service,start,rm,listener,verify,jm,listener1,notify,leader,address,eq,job,manager,address,eq,high,availability,services,verify,jm,listener2,notify,leader,address,eq,job,manager,address,eq,high,availability,services,verify,rm,listener,notify,leader,address,eq,resource,manager,address,eq,high,availability,services
StandaloneHaServicesTest -> @Test 	public void testJobManagerLeaderRetrieval() throws Exception;1504472365;Tests that the standalone leader retrieval services return the specified address and the_fixed leader session id.;@Test_	public void testJobManagerLeaderRetrieval() throws Exception {_		JobID jobId1 = new JobID()__		JobID jobId2 = new JobID()__		LeaderRetrievalListener jmListener1 = mock(LeaderRetrievalListener.class)__		LeaderRetrievalListener jmListener2 = mock(LeaderRetrievalListener.class)__		LeaderRetrievalListener rmListener = mock(LeaderRetrievalListener.class)___		LeaderRetrievalService jmLeaderRetrievalService1 = standaloneHaServices.getJobManagerLeaderRetriever(jobId1)__		LeaderRetrievalService jmLeaderRetrievalService2 = standaloneHaServices.getJobManagerLeaderRetriever(jobId2)__		LeaderRetrievalService rmLeaderRetrievalService = standaloneHaServices.getResourceManagerLeaderRetriever()___		jmLeaderRetrievalService1.start(jmListener1)__		jmLeaderRetrievalService2.start(jmListener2)__		rmLeaderRetrievalService.start(rmListener)___		verify(jmListener1).notifyLeaderAddress(eq(jobManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(jmListener2).notifyLeaderAddress(eq(jobManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(rmListener).notifyLeaderAddress(eq(resourceManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__	};tests,that,the,standalone,leader,retrieval,services,return,the,specified,address,and,the,fixed,leader,session,id;test,public,void,test,job,manager,leader,retrieval,throws,exception,job,id,job,id1,new,job,id,job,id,job,id2,new,job,id,leader,retrieval,listener,jm,listener1,mock,leader,retrieval,listener,class,leader,retrieval,listener,jm,listener2,mock,leader,retrieval,listener,class,leader,retrieval,listener,rm,listener,mock,leader,retrieval,listener,class,leader,retrieval,service,jm,leader,retrieval,service1,standalone,ha,services,get,job,manager,leader,retriever,job,id1,leader,retrieval,service,jm,leader,retrieval,service2,standalone,ha,services,get,job,manager,leader,retriever,job,id2,leader,retrieval,service,rm,leader,retrieval,service,standalone,ha,services,get,resource,manager,leader,retriever,jm,leader,retrieval,service1,start,jm,listener1,jm,leader,retrieval,service2,start,jm,listener2,rm,leader,retrieval,service,start,rm,listener,verify,jm,listener1,notify,leader,address,eq,job,manager,address,eq,high,availability,services,verify,jm,listener2,notify,leader,address,eq,job,manager,address,eq,high,availability,services,verify,rm,listener,notify,leader,address,eq,resource,manager,address,eq,high,availability,services
StandaloneHaServicesTest -> @Test 	public void testJobManagerLeaderRetrieval() throws Exception;1516971025;Tests that the standalone leader retrieval services return the specified address and the_fixed leader session id.;@Test_	public void testJobManagerLeaderRetrieval() throws Exception {_		JobID jobId1 = new JobID()__		JobID jobId2 = new JobID()__		LeaderRetrievalListener jmListener1 = mock(LeaderRetrievalListener.class)__		LeaderRetrievalListener jmListener2 = mock(LeaderRetrievalListener.class)__		LeaderRetrievalListener rmListener = mock(LeaderRetrievalListener.class)___		LeaderRetrievalService jmLeaderRetrievalService1 = standaloneHaServices.getJobManagerLeaderRetriever(jobId1)__		LeaderRetrievalService jmLeaderRetrievalService2 = standaloneHaServices.getJobManagerLeaderRetriever(jobId2)__		LeaderRetrievalService rmLeaderRetrievalService = standaloneHaServices.getResourceManagerLeaderRetriever()___		jmLeaderRetrievalService1.start(jmListener1)__		jmLeaderRetrievalService2.start(jmListener2)__		rmLeaderRetrievalService.start(rmListener)___		verify(jmListener1).notifyLeaderAddress(eq(jobManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(jmListener2).notifyLeaderAddress(eq(jobManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(rmListener).notifyLeaderAddress(eq(resourceManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__	};tests,that,the,standalone,leader,retrieval,services,return,the,specified,address,and,the,fixed,leader,session,id;test,public,void,test,job,manager,leader,retrieval,throws,exception,job,id,job,id1,new,job,id,job,id,job,id2,new,job,id,leader,retrieval,listener,jm,listener1,mock,leader,retrieval,listener,class,leader,retrieval,listener,jm,listener2,mock,leader,retrieval,listener,class,leader,retrieval,listener,rm,listener,mock,leader,retrieval,listener,class,leader,retrieval,service,jm,leader,retrieval,service1,standalone,ha,services,get,job,manager,leader,retriever,job,id1,leader,retrieval,service,jm,leader,retrieval,service2,standalone,ha,services,get,job,manager,leader,retriever,job,id2,leader,retrieval,service,rm,leader,retrieval,service,standalone,ha,services,get,resource,manager,leader,retriever,jm,leader,retrieval,service1,start,jm,listener1,jm,leader,retrieval,service2,start,jm,listener2,rm,leader,retrieval,service,start,rm,listener,verify,jm,listener1,notify,leader,address,eq,job,manager,address,eq,high,availability,services,verify,jm,listener2,notify,leader,address,eq,job,manager,address,eq,high,availability,services,verify,rm,listener,notify,leader,address,eq,resource,manager,address,eq,high,availability,services
StandaloneHaServicesTest -> @Test 	public void testJobManagerLeaderRetrieval() throws Exception;1522681180;Tests that the standalone leader retrieval services return the specified address and the_fixed leader session id.;@Test_	public void testJobManagerLeaderRetrieval() throws Exception {_		JobID jobId1 = new JobID()__		JobID jobId2 = new JobID()__		LeaderRetrievalListener jmListener1 = mock(LeaderRetrievalListener.class)__		LeaderRetrievalListener jmListener2 = mock(LeaderRetrievalListener.class)__		LeaderRetrievalListener rmListener = mock(LeaderRetrievalListener.class)___		LeaderRetrievalService jmLeaderRetrievalService1 = standaloneHaServices.getJobManagerLeaderRetriever(jobId1)__		LeaderRetrievalService jmLeaderRetrievalService2 = standaloneHaServices.getJobManagerLeaderRetriever(jobId2)__		LeaderRetrievalService rmLeaderRetrievalService = standaloneHaServices.getResourceManagerLeaderRetriever()___		jmLeaderRetrievalService1.start(jmListener1)__		jmLeaderRetrievalService2.start(jmListener2)__		rmLeaderRetrievalService.start(rmListener)___		verify(jmListener1).notifyLeaderAddress(eq(jobManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(jmListener2).notifyLeaderAddress(eq(jobManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__		verify(rmListener).notifyLeaderAddress(eq(resourceManagerAddress), eq(HighAvailabilityServices.DEFAULT_LEADER_ID))__	};tests,that,the,standalone,leader,retrieval,services,return,the,specified,address,and,the,fixed,leader,session,id;test,public,void,test,job,manager,leader,retrieval,throws,exception,job,id,job,id1,new,job,id,job,id,job,id2,new,job,id,leader,retrieval,listener,jm,listener1,mock,leader,retrieval,listener,class,leader,retrieval,listener,jm,listener2,mock,leader,retrieval,listener,class,leader,retrieval,listener,rm,listener,mock,leader,retrieval,listener,class,leader,retrieval,service,jm,leader,retrieval,service1,standalone,ha,services,get,job,manager,leader,retriever,job,id1,leader,retrieval,service,jm,leader,retrieval,service2,standalone,ha,services,get,job,manager,leader,retriever,job,id2,leader,retrieval,service,rm,leader,retrieval,service,standalone,ha,services,get,resource,manager,leader,retriever,jm,leader,retrieval,service1,start,jm,listener1,jm,leader,retrieval,service2,start,jm,listener2,rm,leader,retrieval,service,start,rm,listener,verify,jm,listener1,notify,leader,address,eq,job,manager,address,eq,high,availability,services,verify,jm,listener2,notify,leader,address,eq,job,manager,address,eq,high,availability,services,verify,rm,listener,notify,leader,address,eq,resource,manager,address,eq,high,availability,services
