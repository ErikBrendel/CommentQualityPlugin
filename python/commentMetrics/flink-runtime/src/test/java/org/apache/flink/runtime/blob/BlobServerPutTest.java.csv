# id;timestamp;commentText;codeText;commentWords;codeWords
BlobServerPutTest -> private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1507212387;Uploads a byte array to a server which cannot create incoming files via the {@link_BlobServer}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage(" (Permission denied)")___			try {_				put(server, jobId, data, blobType)__			} finally {_				File storageDir = tempFileDir.getParentFile()__				_				assertArrayEquals(new String[] {"incoming"}, storageDir.list())__			}_		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,incoming,files,via,the,link,blob,server,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,incoming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,permission,denied,try,put,server,job,id,data,blob,type,finally,file,storage,dir,temp,file,dir,get,parent,file,assert,array,equals,new,string,incoming,storage,dir,list,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobServerPutTest -> private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1508138617;Uploads a byte array to a server which cannot create incoming files via the {@link_BlobServer}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage(" (Permission denied)")___			try {_				put(server, jobId, data, blobType)__			} finally {_				File storageDir = tempFileDir.getParentFile()__				_				assertArrayEquals(new String[] {"incoming"}, storageDir.list())__			}_		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,incoming,files,via,the,link,blob,server,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,incoming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,permission,denied,try,put,server,job,id,data,blob,type,finally,file,storage,dir,temp,file,dir,get,parent,file,assert,array,equals,new,string,incoming,storage,dir,list,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobServerPutTest -> private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1525420604;Uploads a byte array to a server which cannot create incoming files via the {@link_BlobServer}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage(" (Permission denied)")___			try {_				put(server, jobId, data, blobType)__			} finally {_				File storageDir = tempFileDir.getParentFile()__				_				assertArrayEquals(new String[] {"incoming"}, storageDir.list())__			}_		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,incoming,files,via,the,link,blob,server,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,incoming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,permission,denied,try,put,server,job,id,data,blob,type,finally,file,storage,dir,temp,file,dir,get,parent,file,assert,array,equals,new,string,incoming,storage,dir,list,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobServerPutTest -> private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1537787646;Uploads a byte array to a server which cannot create incoming files via the {@link_BlobServer}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage(" (Permission denied)")___			try {_				put(server, jobId, data, blobType)__			} finally {_				File storageDir = tempFileDir.getParentFile()__				_				assertArrayEquals(new String[] {"incoming"}, storageDir.list())__			}_		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,incoming,files,via,the,link,blob,server,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,incoming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,permission,denied,try,put,server,job,id,data,blob,type,finally,file,storage,dir,temp,file,dir,get,parent,file,assert,array,equals,new,string,incoming,storage,dir,list,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobServerPutTest -> static BlobKey put(BlobService service, @Nullable JobID jobId, byte[] data, BlobKey.BlobType blobType) 			throws IOException;1507212387;Helper to choose the right {@link BlobServer#putTransient} method.__@param blobType_whether the BLOB should become permanent or transient__@return blob key for the uploaded data;static BlobKey put(BlobService service, @Nullable JobID jobId, byte[] data, BlobKey.BlobType blobType)_			throws IOException {_		if (blobType == PERMANENT_BLOB) {_			if (service instanceof BlobServer) {_				return ((BlobServer) service).putPermanent(jobId, data)__			} else {_				_				File tmpFile = Files.createTempFile("blob", ".jar").toFile()__				try {_					FileUtils.writeByteArrayToFile(tmpFile, data)__					InetSocketAddress serverAddress = new InetSocketAddress("localhost", service.getPort())__					_					Configuration clientConfig = new Configuration()__					List<Path> jars = Collections.singletonList(new Path(tmpFile.getAbsolutePath()))__					List<PermanentBlobKey> keys = BlobClient.uploadJarFiles(serverAddress, clientConfig, jobId, jars)__					assertEquals(1, keys.size())__					return keys.get(0)__				} finally {_					_					tmpFile.delete()__				}_			}_		} else if (jobId == null) {_			return service.getTransientBlobService().putTransient(data)__		} else {_			return service.getTransientBlobService().putTransient(jobId, data)__		}_	};helper,to,choose,the,right,link,blob,server,put,transient,method,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,blob,key,for,the,uploaded,data;static,blob,key,put,blob,service,service,nullable,job,id,job,id,byte,data,blob,key,blob,type,blob,type,throws,ioexception,if,blob,type,if,service,instanceof,blob,server,return,blob,server,service,put,permanent,job,id,data,else,file,tmp,file,files,create,temp,file,blob,jar,to,file,try,file,utils,write,byte,array,to,file,tmp,file,data,inet,socket,address,server,address,new,inet,socket,address,localhost,service,get,port,configuration,client,config,new,configuration,list,path,jars,collections,singleton,list,new,path,tmp,file,get,absolute,path,list,permanent,blob,key,keys,blob,client,upload,jar,files,server,address,client,config,job,id,jars,assert,equals,1,keys,size,return,keys,get,0,finally,tmp,file,delete,else,if,job,id,null,return,service,get,transient,blob,service,put,transient,data,else,return,service,get,transient,blob,service,put,transient,job,id,data
BlobServerPutTest -> static BlobKey put(BlobService service, @Nullable JobID jobId, byte[] data, BlobKey.BlobType blobType) 			throws IOException;1508138617;Helper to choose the right {@link BlobServer#putTransient} method.__@param blobType_whether the BLOB should become permanent or transient__@return blob key for the uploaded data;static BlobKey put(BlobService service, @Nullable JobID jobId, byte[] data, BlobKey.BlobType blobType)_			throws IOException {_		if (blobType == PERMANENT_BLOB) {_			if (service instanceof BlobServer) {_				return ((BlobServer) service).putPermanent(jobId, data)__			} else {_				_				File tmpFile = Files.createTempFile("blob", ".jar").toFile()__				try {_					FileUtils.writeByteArrayToFile(tmpFile, data)__					InetSocketAddress serverAddress = new InetSocketAddress("localhost", service.getPort())__					_					Configuration clientConfig = new Configuration()__					List<Path> jars = Collections.singletonList(new Path(tmpFile.getAbsolutePath()))__					List<PermanentBlobKey> keys = BlobClient.uploadJarFiles(serverAddress, clientConfig, jobId, jars)__					assertEquals(1, keys.size())__					return keys.get(0)__				} finally {_					_					tmpFile.delete()__				}_			}_		} else if (jobId == null) {_			return service.getTransientBlobService().putTransient(data)__		} else {_			return service.getTransientBlobService().putTransient(jobId, data)__		}_	};helper,to,choose,the,right,link,blob,server,put,transient,method,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,blob,key,for,the,uploaded,data;static,blob,key,put,blob,service,service,nullable,job,id,job,id,byte,data,blob,key,blob,type,blob,type,throws,ioexception,if,blob,type,if,service,instanceof,blob,server,return,blob,server,service,put,permanent,job,id,data,else,file,tmp,file,files,create,temp,file,blob,jar,to,file,try,file,utils,write,byte,array,to,file,tmp,file,data,inet,socket,address,server,address,new,inet,socket,address,localhost,service,get,port,configuration,client,config,new,configuration,list,path,jars,collections,singleton,list,new,path,tmp,file,get,absolute,path,list,permanent,blob,key,keys,blob,client,upload,jar,files,server,address,client,config,job,id,jars,assert,equals,1,keys,size,return,keys,get,0,finally,tmp,file,delete,else,if,job,id,null,return,service,get,transient,blob,service,put,transient,data,else,return,service,get,transient,blob,service,put,transient,job,id,data
BlobServerPutTest -> static BlobKey put(BlobService service, @Nullable JobID jobId, byte[] data, BlobKey.BlobType blobType) 			throws IOException;1525420604;Helper to choose the right {@link BlobServer#putTransient} method.__@param blobType_whether the BLOB should become permanent or transient__@return blob key for the uploaded data;static BlobKey put(BlobService service, @Nullable JobID jobId, byte[] data, BlobKey.BlobType blobType)_			throws IOException {_		if (blobType == PERMANENT_BLOB) {_			if (service instanceof BlobServer) {_				return ((BlobServer) service).putPermanent(jobId, data)__			} else {_				_				File tmpFile = Files.createTempFile("blob", ".jar").toFile()__				try {_					FileUtils.writeByteArrayToFile(tmpFile, data)__					InetSocketAddress serverAddress = new InetSocketAddress("localhost", service.getPort())__					_					Configuration clientConfig = new Configuration()__					List<Path> jars = Collections.singletonList(new Path(tmpFile.getAbsolutePath()))__					List<PermanentBlobKey> keys = BlobClient.uploadFiles(serverAddress, clientConfig, jobId, jars)__					assertEquals(1, keys.size())__					return keys.get(0)__				} finally {_					_					tmpFile.delete()__				}_			}_		} else if (jobId == null) {_			return service.getTransientBlobService().putTransient(data)__		} else {_			return service.getTransientBlobService().putTransient(jobId, data)__		}_	};helper,to,choose,the,right,link,blob,server,put,transient,method,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,blob,key,for,the,uploaded,data;static,blob,key,put,blob,service,service,nullable,job,id,job,id,byte,data,blob,key,blob,type,blob,type,throws,ioexception,if,blob,type,if,service,instanceof,blob,server,return,blob,server,service,put,permanent,job,id,data,else,file,tmp,file,files,create,temp,file,blob,jar,to,file,try,file,utils,write,byte,array,to,file,tmp,file,data,inet,socket,address,server,address,new,inet,socket,address,localhost,service,get,port,configuration,client,config,new,configuration,list,path,jars,collections,singleton,list,new,path,tmp,file,get,absolute,path,list,permanent,blob,key,keys,blob,client,upload,files,server,address,client,config,job,id,jars,assert,equals,1,keys,size,return,keys,get,0,finally,tmp,file,delete,else,if,job,id,null,return,service,get,transient,blob,service,put,transient,data,else,return,service,get,transient,blob,service,put,transient,job,id,data
BlobServerPutTest -> static BlobKey put(BlobService service, @Nullable JobID jobId, byte[] data, BlobKey.BlobType blobType) 			throws IOException;1537787646;Helper to choose the right {@link BlobServer#putTransient} method.__@param blobType_whether the BLOB should become permanent or transient__@return blob key for the uploaded data;static BlobKey put(BlobService service, @Nullable JobID jobId, byte[] data, BlobKey.BlobType blobType)_			throws IOException {_		if (blobType == PERMANENT_BLOB) {_			if (service instanceof BlobServer) {_				return ((BlobServer) service).putPermanent(jobId, data)__			} else {_				_				File tmpFile = Files.createTempFile("blob", ".jar").toFile()__				try {_					FileUtils.writeByteArrayToFile(tmpFile, data)__					InetSocketAddress serverAddress = new InetSocketAddress("localhost", service.getPort())__					_					Configuration clientConfig = new Configuration()__					List<Path> jars = Collections.singletonList(new Path(tmpFile.getAbsolutePath()))__					List<PermanentBlobKey> keys = BlobClient.uploadFiles(serverAddress, clientConfig, jobId, jars)__					assertEquals(1, keys.size())__					return keys.get(0)__				} finally {_					_					tmpFile.delete()__				}_			}_		} else if (jobId == null) {_			return service.getTransientBlobService().putTransient(data)__		} else {_			return service.getTransientBlobService().putTransient(jobId, data)__		}_	};helper,to,choose,the,right,link,blob,server,put,transient,method,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,blob,key,for,the,uploaded,data;static,blob,key,put,blob,service,service,nullable,job,id,job,id,byte,data,blob,key,blob,type,blob,type,throws,ioexception,if,blob,type,if,service,instanceof,blob,server,return,blob,server,service,put,permanent,job,id,data,else,file,tmp,file,files,create,temp,file,blob,jar,to,file,try,file,utils,write,byte,array,to,file,tmp,file,data,inet,socket,address,server,address,new,inet,socket,address,localhost,service,get,port,configuration,client,config,new,configuration,list,path,jars,collections,singleton,list,new,path,tmp,file,get,absolute,path,list,permanent,blob,key,keys,blob,client,upload,files,server,address,client,config,job,id,jars,assert,equals,1,keys,size,return,keys,get,0,finally,tmp,file,delete,else,if,job,id,null,return,service,get,transient,blob,service,put,transient,data,else,return,service,get,transient,blob,service,put,transient,job,id,data
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception;1502701584;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,for,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,new,job,id
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception;1503041358;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,for,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,new,job,id
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception;1506417942;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,for,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,new,job,id
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception;1507212387;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,for,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,new,job,id
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception;1507212387;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,for,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,new,job,id
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception;1508138617;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,for,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,new,job,id
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception;1525420604;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,for,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,new,job,id
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception;1537787646;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentForJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,for,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,new,job,id
BlobServerPutTest -> private static void testPutBufferSuccessfulGet( 			JobID jobId, BlobKey key1, BlobKey key2, byte[] data, 			InetSocketAddress serverAddress, Configuration config) throws IOException;1502701584;GET the data stored at the two keys and check that it is equal to <tt>data</tt>.__@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key1_first key_@param key2_second key_@param data_expected data_@param serverAddress_BlobServer address to connect to_@param config_client configuration;private static void testPutBufferSuccessfulGet(_			JobID jobId, BlobKey key1, BlobKey key2, byte[] data,_			InetSocketAddress serverAddress, Configuration config) throws IOException {__		BlobClient client = new BlobClient(serverAddress, config)__		InputStream is1 = null__		InputStream is2 = null___		try {_			_			is1 = getFileHelper(client, jobId, key2)__			byte[] result1 = new byte[44]__			BlobUtils.readFully(is1, result1, 0, result1.length, null)__			is1.close()___			for (int i = 0, j = 10_ i < result1.length_ i++, j++) {_				assertEquals(data[j], result1[i])__			}__			_			client.close()__			client = new BlobClient(serverAddress, config)___			is2 = getFileHelper(client, jobId, key1)__			BlobClientTest.validateGet(is2, data)__			is2.close()__		} finally {_			if (is1 != null) {_				is1.close()__			}_			if (is2 != null) {_				is1.close()__			}_			client.close()__		}_	};get,the,data,stored,at,the,two,keys,and,check,that,it,is,equal,to,tt,data,tt,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key1,first,key,param,key2,second,key,param,data,expected,data,param,server,address,blob,server,address,to,connect,to,param,config,client,configuration;private,static,void,test,put,buffer,successful,get,job,id,job,id,blob,key,key1,blob,key,key2,byte,data,inet,socket,address,server,address,configuration,config,throws,ioexception,blob,client,client,new,blob,client,server,address,config,input,stream,is1,null,input,stream,is2,null,try,is1,get,file,helper,client,job,id,key2,byte,result1,new,byte,44,blob,utils,read,fully,is1,result1,0,result1,length,null,is1,close,for,int,i,0,j,10,i,result1,length,i,j,assert,equals,data,j,result1,i,client,close,client,new,blob,client,server,address,config,is2,get,file,helper,client,job,id,key1,blob,client,test,validate,get,is2,data,is2,close,finally,if,is1,null,is1,close,if,is2,null,is1,close,client,close
BlobServerPutTest -> private static void testPutBufferSuccessfulGet( 			JobID jobId, BlobKey key1, BlobKey key2, byte[] data, 			InetSocketAddress serverAddress, Configuration config) throws IOException;1503041358;GET the data stored at the two keys and check that it is equal to <tt>data</tt>.__@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key1_first key for 44 bytes starting at byte 10 of data in the BLOB_@param key2_second key for the complete data in the BLOB_@param data_expected data_@param serverAddress_BlobServer address to connect to_@param config_client configuration;private static void testPutBufferSuccessfulGet(_			JobID jobId, BlobKey key1, BlobKey key2, byte[] data,_			InetSocketAddress serverAddress, Configuration config) throws IOException {__		BlobClient client = new BlobClient(serverAddress, config)___		_		try (InputStream is1 = getFileHelper(client, jobId, key2)) {_			byte[] result1 = new byte[44]__			BlobUtils.readFully(is1, result1, 0, result1.length, null)__			is1.close()___			for (int i = 0, j = 10_ i < result1.length_ i++, j++) {_				assertEquals(data[j], result1[i])__			}__			_			client.close()__			client = new BlobClient(serverAddress, config)___			validateGetAndClose(getFileHelper(client, jobId, key1), data)__		} finally {_			client.close()__		}_	};get,the,data,stored,at,the,two,keys,and,check,that,it,is,equal,to,tt,data,tt,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key1,first,key,for,44,bytes,starting,at,byte,10,of,data,in,the,blob,param,key2,second,key,for,the,complete,data,in,the,blob,param,data,expected,data,param,server,address,blob,server,address,to,connect,to,param,config,client,configuration;private,static,void,test,put,buffer,successful,get,job,id,job,id,blob,key,key1,blob,key,key2,byte,data,inet,socket,address,server,address,configuration,config,throws,ioexception,blob,client,client,new,blob,client,server,address,config,try,input,stream,is1,get,file,helper,client,job,id,key2,byte,result1,new,byte,44,blob,utils,read,fully,is1,result1,0,result1,length,null,is1,close,for,int,i,0,j,10,i,result1,length,i,j,assert,equals,data,j,result1,i,client,close,client,new,blob,client,server,address,config,validate,get,and,close,get,file,helper,client,job,id,key1,data,finally,client,close
BlobServerPutTest -> private static void testPutBufferSuccessfulGet( 			JobID jobId, BlobKey key1, BlobKey key2, byte[] data, 			InetSocketAddress serverAddress, Configuration config) throws IOException;1506417942;GET the data stored at the two keys and check that it is equal to <tt>data</tt>.__@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key1_first key for 44 bytes starting at byte 10 of data in the BLOB_@param key2_second key for the complete data in the BLOB_@param data_expected data_@param serverAddress_BlobServer address to connect to_@param config_client configuration;private static void testPutBufferSuccessfulGet(_			JobID jobId, BlobKey key1, BlobKey key2, byte[] data,_			InetSocketAddress serverAddress, Configuration config) throws IOException {__		BlobClient client = new BlobClient(serverAddress, config)___		_		try (InputStream is1 = getFileHelper(client, jobId, key2)) {_			byte[] result1 = new byte[44]__			BlobUtils.readFully(is1, result1, 0, result1.length, null)__			is1.close()___			for (int i = 0, j = 10_ i < result1.length_ i++, j++) {_				assertEquals(data[j], result1[i])__			}__			_			client.close()__			client = new BlobClient(serverAddress, config)___			validateGetAndClose(getFileHelper(client, jobId, key1), data)__		} finally {_			client.close()__		}_	};get,the,data,stored,at,the,two,keys,and,check,that,it,is,equal,to,tt,data,tt,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key1,first,key,for,44,bytes,starting,at,byte,10,of,data,in,the,blob,param,key2,second,key,for,the,complete,data,in,the,blob,param,data,expected,data,param,server,address,blob,server,address,to,connect,to,param,config,client,configuration;private,static,void,test,put,buffer,successful,get,job,id,job,id,blob,key,key1,blob,key,key2,byte,data,inet,socket,address,server,address,configuration,config,throws,ioexception,blob,client,client,new,blob,client,server,address,config,try,input,stream,is1,get,file,helper,client,job,id,key2,byte,result1,new,byte,44,blob,utils,read,fully,is1,result1,0,result1,length,null,is1,close,for,int,i,0,j,10,i,result1,length,i,j,assert,equals,data,j,result1,i,client,close,client,new,blob,client,server,address,config,validate,get,and,close,get,file,helper,client,job,id,key1,data,finally,client,close
BlobServerPutTest -> private void testConcurrentPutOperations( 			@Nullable final JobID jobId, final BlobKey.BlobType blobType) 			throws IOException, InterruptedException, ExecutionException;1507212387;[FLINK-6020]_Tests that concurrent put operations will only upload the file once to the {@link BlobStore}_and that the files are not corrupt at any time.__@param jobId_job ID to use (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient;private void testConcurrentPutOperations(_			@Nullable final JobID jobId, final BlobKey.BlobType blobType)_			throws IOException, InterruptedException, ExecutionException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		BlobStore blobStore = mock(BlobStore.class)__		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		ArrayList<CompletableFuture<BlobKey>> allFutures = new ArrayList<>(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (final BlobServer server = new BlobServer(config, blobStore)) {__			server.start()___			for (int i = 0_ i < concurrentPutOperations_ i++) {_				CompletableFuture<BlobKey> putFuture = CompletableFuture_					.supplyAsync(_						() -> {_							try {_								BlockingInputStream inputStream =_									new BlockingInputStream(countDownLatch, data)__								BlobKey uploadedKey = put(server, jobId, inputStream, blobType)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_						},_						executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while (blobKeyIterator.hasNext()) {_				assertEquals(blobKey, blobKeyIterator.next())__			}__			_			verifyContents(server, jobId, blobKey, data)___			_			if (blobType == PERMANENT_BLOB) {_				verify(blobStore, times(1)).put(any(File.class), eq(jobId), eq(blobKey))__			} else {_				_				_				verify(blobStore, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__			}_		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store,and,that,the,files,are,not,corrupt,at,any,time,param,job,id,job,id,to,use,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,concurrent,put,operations,nullable,final,job,id,job,id,final,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,execution,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,blob,store,blob,store,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,array,list,completable,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,server,new,blob,server,config,blob,store,server,start,for,int,i,0,i,concurrent,put,operations,i,completable,future,blob,key,put,future,completable,future,supply,async,try,blocking,input,stream,input,stream,new,blocking,input,stream,count,down,latch,data,blob,key,uploaded,key,put,server,job,id,input,stream,blob,type,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,assert,equals,blob,key,blob,key,iterator,next,verify,contents,server,job,id,blob,key,data,if,blob,type,verify,blob,store,times,1,put,any,file,class,eq,job,id,eq,blob,key,else,verify,blob,store,times,0,put,any,file,class,eq,job,id,eq,blob,key,finally,executor,shutdown,now
BlobServerPutTest -> private void testConcurrentPutOperations( 			@Nullable final JobID jobId, final BlobKey.BlobType blobType) 			throws IOException, InterruptedException, ExecutionException;1508138617;[FLINK-6020]_Tests that concurrent put operations will only upload the file once to the {@link BlobStore}_and that the files are not corrupt at any time.__@param jobId_job ID to use (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient;private void testConcurrentPutOperations(_			@Nullable final JobID jobId, final BlobKey.BlobType blobType)_			throws IOException, InterruptedException, ExecutionException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		BlobStore blobStore = mock(BlobStore.class)__		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		ArrayList<CompletableFuture<BlobKey>> allFutures = new ArrayList<>(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (final BlobServer server = new BlobServer(config, blobStore)) {__			server.start()___			for (int i = 0_ i < concurrentPutOperations_ i++) {_				CompletableFuture<BlobKey> putFuture = CompletableFuture_					.supplyAsync(_						() -> {_							try {_								BlockingInputStream inputStream =_									new BlockingInputStream(countDownLatch, data)__								BlobKey uploadedKey = put(server, jobId, inputStream, blobType)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_						},_						executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while (blobKeyIterator.hasNext()) {_				verifyKeyDifferentHashEquals(blobKey, blobKeyIterator.next())__			}__			_			verifyContents(server, jobId, blobKey, data)___			_			if (blobType == PERMANENT_BLOB) {_				verify(blobStore, times(1)).put(any(File.class), eq(jobId), eq(blobKey))__			} else {_				_				_				verify(blobStore, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__			}_		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store,and,that,the,files,are,not,corrupt,at,any,time,param,job,id,job,id,to,use,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,concurrent,put,operations,nullable,final,job,id,job,id,final,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,execution,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,blob,store,blob,store,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,array,list,completable,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,server,new,blob,server,config,blob,store,server,start,for,int,i,0,i,concurrent,put,operations,i,completable,future,blob,key,put,future,completable,future,supply,async,try,blocking,input,stream,input,stream,new,blocking,input,stream,count,down,latch,data,blob,key,uploaded,key,put,server,job,id,input,stream,blob,type,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,verify,key,different,hash,equals,blob,key,blob,key,iterator,next,verify,contents,server,job,id,blob,key,data,if,blob,type,verify,blob,store,times,1,put,any,file,class,eq,job,id,eq,blob,key,else,verify,blob,store,times,0,put,any,file,class,eq,job,id,eq,blob,key,finally,executor,shutdown,now
BlobServerPutTest -> private void testConcurrentPutOperations( 			@Nullable final JobID jobId, final BlobKey.BlobType blobType) 			throws IOException, InterruptedException, ExecutionException;1525420604;[FLINK-6020]_Tests that concurrent put operations will only upload the file once to the {@link BlobStore}_and that the files are not corrupt at any time.__@param jobId_job ID to use (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient;private void testConcurrentPutOperations(_			@Nullable final JobID jobId, final BlobKey.BlobType blobType)_			throws IOException, InterruptedException, ExecutionException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		BlobStore blobStore = mock(BlobStore.class)__		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		ArrayList<CompletableFuture<BlobKey>> allFutures = new ArrayList<>(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (final BlobServer server = new BlobServer(config, blobStore)) {__			server.start()___			for (int i = 0_ i < concurrentPutOperations_ i++) {_				CompletableFuture<BlobKey> putFuture = CompletableFuture_					.supplyAsync(_						() -> {_							try {_								BlockingInputStream inputStream =_									new BlockingInputStream(countDownLatch, data)__								BlobKey uploadedKey = put(server, jobId, inputStream, blobType)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_						},_						executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while (blobKeyIterator.hasNext()) {_				verifyKeyDifferentHashEquals(blobKey, blobKeyIterator.next())__			}__			_			verifyContents(server, jobId, blobKey, data)___			_			if (blobType == PERMANENT_BLOB) {_				verify(blobStore, times(1)).put(any(File.class), eq(jobId), eq(blobKey))__			} else {_				_				_				verify(blobStore, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__			}_		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store,and,that,the,files,are,not,corrupt,at,any,time,param,job,id,job,id,to,use,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,concurrent,put,operations,nullable,final,job,id,job,id,final,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,execution,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,blob,store,blob,store,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,array,list,completable,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,server,new,blob,server,config,blob,store,server,start,for,int,i,0,i,concurrent,put,operations,i,completable,future,blob,key,put,future,completable,future,supply,async,try,blocking,input,stream,input,stream,new,blocking,input,stream,count,down,latch,data,blob,key,uploaded,key,put,server,job,id,input,stream,blob,type,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,verify,key,different,hash,equals,blob,key,blob,key,iterator,next,verify,contents,server,job,id,blob,key,data,if,blob,type,verify,blob,store,times,1,put,any,file,class,eq,job,id,eq,blob,key,else,verify,blob,store,times,0,put,any,file,class,eq,job,id,eq,blob,key,finally,executor,shutdown,now
BlobServerPutTest -> private void testConcurrentPutOperations( 			@Nullable final JobID jobId, final BlobKey.BlobType blobType) 			throws IOException, InterruptedException, ExecutionException;1537787646;[FLINK-6020]_Tests that concurrent put operations will only upload the file once to the {@link BlobStore}_and that the files are not corrupt at any time.__@param jobId_job ID to use (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient;private void testConcurrentPutOperations(_			@Nullable final JobID jobId, final BlobKey.BlobType blobType)_			throws IOException, InterruptedException, ExecutionException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		BlobStore blobStore = mock(BlobStore.class)__		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		ArrayList<CompletableFuture<BlobKey>> allFutures = new ArrayList<>(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (final BlobServer server = new BlobServer(config, blobStore)) {__			server.start()___			for (int i = 0_ i < concurrentPutOperations_ i++) {_				CompletableFuture<BlobKey> putFuture = CompletableFuture_					.supplyAsync(_						() -> {_							try {_								BlockingInputStream inputStream =_									new BlockingInputStream(countDownLatch, data)__								BlobKey uploadedKey = put(server, jobId, inputStream, blobType)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_						},_						executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while (blobKeyIterator.hasNext()) {_				verifyKeyDifferentHashEquals(blobKey, blobKeyIterator.next())__			}__			_			verifyContents(server, jobId, blobKey, data)___			_			if (blobType == PERMANENT_BLOB) {_				verify(blobStore, times(1)).put(any(File.class), eq(jobId), eq(blobKey))__			} else {_				_				_				verify(blobStore, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__			}_		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store,and,that,the,files,are,not,corrupt,at,any,time,param,job,id,job,id,to,use,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,concurrent,put,operations,nullable,final,job,id,job,id,final,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,execution,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,blob,store,blob,store,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,array,list,completable,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,server,new,blob,server,config,blob,store,server,start,for,int,i,0,i,concurrent,put,operations,i,completable,future,blob,key,put,future,completable,future,supply,async,try,blocking,input,stream,input,stream,new,blocking,input,stream,count,down,latch,data,blob,key,uploaded,key,put,server,job,id,input,stream,blob,type,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,verify,key,different,hash,equals,blob,key,blob,key,iterator,next,verify,contents,server,job,id,blob,key,data,if,blob,type,verify,blob,store,times,1,put,any,file,class,eq,job,id,eq,blob,key,else,verify,blob,store,times,0,put,any,file,class,eq,job,id,eq,blob,key,finally,executor,shutdown,now
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrent() throws Exception;1499173045;Tests concurrent calls to {@link BlobServer#getStorageLocation(BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrent() throws Exception {_		BlobServer server = new BlobServer(new Configuration(), new VoidBlobStore())___		try {_			BlobKey key = new BlobKey()__			CheckedThread[] threads = new CheckedThread[] {_				new ContentAddressableGetStorageLocation(server, key),_				new ContentAddressableGetStorageLocation(server, key),_				new ContentAddressableGetStorageLocation(server, key)_			}__			checkedThreadSimpleTest(threads)__		} finally {_			server.close()__		}_	};tests,concurrent,calls,to,link,blob,server,get,storage,location,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,throws,exception,blob,server,server,new,blob,server,new,configuration,new,void,blob,store,try,blob,key,key,new,blob,key,checked,thread,threads,new,checked,thread,new,content,addressable,get,storage,location,server,key,new,content,addressable,get,storage,location,server,key,new,content,addressable,get,storage,location,server,key,checked,thread,simple,test,threads,finally,server,close
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrent() throws Exception;1499789965;Tests concurrent calls to {@link BlobServer#getStorageLocation(BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrent() throws Exception {_		BlobServer server = new BlobServer(new Configuration(), new VoidBlobStore())___		try {_			BlobKey key = new BlobKey()__			CheckedThread[] threads = new CheckedThread[] {_				new ContentAddressableGetStorageLocation(server, key),_				new ContentAddressableGetStorageLocation(server, key),_				new ContentAddressableGetStorageLocation(server, key)_			}__			checkedThreadSimpleTest(threads)__		} finally {_			server.close()__		}_	};tests,concurrent,calls,to,link,blob,server,get,storage,location,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,throws,exception,blob,server,server,new,blob,server,new,configuration,new,void,blob,store,try,blob,key,key,new,blob,key,checked,thread,threads,new,checked,thread,new,content,addressable,get,storage,location,server,key,new,content,addressable,get,storage,location,server,key,new,content,addressable,get,storage,location,server,key,checked,thread,simple,test,threads,finally,server,close
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrent() throws Exception;1501622876;Tests concurrent calls to {@link BlobServer#getStorageLocation(BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrent() throws Exception {_		BlobServer server = new BlobServer(new Configuration(), new VoidBlobStore())___		try {_			BlobKey key = new BlobKey()__			CheckedThread[] threads = new CheckedThread[] {_				new ContentAddressableGetStorageLocation(server, key),_				new ContentAddressableGetStorageLocation(server, key),_				new ContentAddressableGetStorageLocation(server, key)_			}__			checkedThreadSimpleTest(threads)__		} finally {_			server.close()__		}_	};tests,concurrent,calls,to,link,blob,server,get,storage,location,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,throws,exception,blob,server,server,new,blob,server,new,configuration,new,void,blob,store,try,blob,key,key,new,blob,key,checked,thread,threads,new,checked,thread,new,content,addressable,get,storage,location,server,key,new,content,addressable,get,storage,location,server,key,new,content,addressable,get,storage,location,server,key,checked,thread,simple,test,threads,finally,server,close
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrent() throws Exception;1502100084;Tests concurrent calls to {@link BlobServer#getStorageLocation(BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrent() throws Exception {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		BlobServer server = new BlobServer(config, new VoidBlobStore())___		try {_			BlobKey key = new BlobKey()__			CheckedThread[] threads = new CheckedThread[] {_				new ContentAddressableGetStorageLocation(server, key),_				new ContentAddressableGetStorageLocation(server, key),_				new ContentAddressableGetStorageLocation(server, key)_			}__			checkedThreadSimpleTest(threads)__		} finally {_			server.close()__		}_	};tests,concurrent,calls,to,link,blob,server,get,storage,location,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,throws,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,blob,server,server,new,blob,server,config,new,void,blob,store,try,blob,key,key,new,blob,key,checked,thread,threads,new,checked,thread,new,content,addressable,get,storage,location,server,key,new,content,addressable,get,storage,location,server,key,new,content,addressable,get,storage,location,server,key,checked,thread,simple,test,threads,finally,server,close
BlobServerPutTest -> private void testPutBufferSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1507212387;Uploads two byte arrays for different jobs into the server via the {@link BlobServer}. File_transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(server, jobId1, data, blobType)__			assertNotNull(key1a)___			BlobKey key1b = put(server, jobId1, data2, blobType)__			assertNotNull(key1b)___			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(server, jobId2, data, blobType)__			assertNotNull(key2a)__			assertEquals(key1a, key2a)___			BlobKey key2b = put(server, jobId2, data2, blobType)__			assertNotNull(key2b)__			assertEquals(key1b, key2b)___			_			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)__		}_	};uploads,two,byte,arrays,for,different,jobs,into,the,server,via,the,link,blob,server,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,server,job,id1,data,blob,type,assert,not,null,key1a,blob,key,key1b,put,server,job,id1,data2,blob,type,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,server,job,id2,data,blob,type,assert,not,null,key2a,assert,equals,key1a,key2a,blob,key,key2b,put,server,job,id2,data2,blob,type,assert,not,null,key2b,assert,equals,key1b,key2b,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobServerPutTest -> private void testPutBufferSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1508138617;Uploads two byte arrays for different jobs into the server via the {@link BlobServer}. File_transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(server, jobId1, data, blobType)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(server, jobId1, data, blobType)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			BlobKey key1b = put(server, jobId1, data2, blobType)__			assertNotNull(key1b)___			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(server, jobId2, data, blobType)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			BlobKey key2b = put(server, jobId2, data2, blobType)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)__		}_	};uploads,two,byte,arrays,for,different,jobs,into,the,server,via,the,link,blob,server,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,server,job,id1,data,blob,type,assert,not,null,key1a,blob,key,key1a2,put,server,job,id1,data,blob,type,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,blob,key,key1b,put,server,job,id1,data2,blob,type,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,server,job,id2,data,blob,type,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,blob,key,key2b,put,server,job,id2,data2,blob,type,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobServerPutTest -> private void testPutBufferSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1525420604;Uploads two byte arrays for different jobs into the server via the {@link BlobServer}. File_transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(server, jobId1, data, blobType)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(server, jobId1, data, blobType)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			BlobKey key1b = put(server, jobId1, data2, blobType)__			assertNotNull(key1b)___			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(server, jobId2, data, blobType)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			BlobKey key2b = put(server, jobId2, data2, blobType)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)__		}_	};uploads,two,byte,arrays,for,different,jobs,into,the,server,via,the,link,blob,server,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,server,job,id1,data,blob,type,assert,not,null,key1a,blob,key,key1a2,put,server,job,id1,data,blob,type,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,blob,key,key1b,put,server,job,id1,data2,blob,type,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,server,job,id2,data,blob,type,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,blob,key,key2b,put,server,job,id2,data2,blob,type,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobServerPutTest -> private void testPutBufferSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1537787646;Uploads two byte arrays for different jobs into the server via the {@link BlobServer}. File_transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(server, jobId1, data, blobType)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(server, jobId1, data, blobType)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			BlobKey key1b = put(server, jobId1, data2, blobType)__			assertNotNull(key1b)___			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(server, jobId2, data, blobType)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			BlobKey key2b = put(server, jobId2, data2, blobType)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)__		}_	};uploads,two,byte,arrays,for,different,jobs,into,the,server,via,the,link,blob,server,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,server,job,id1,data,blob,type,assert,not,null,key1a,blob,key,key1a2,put,server,job,id1,data,blob,type,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,blob,key,key1b,put,server,job,id1,data2,blob,type,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,server,job,id2,data,blob,type,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,blob,key,key2b,put,server,job,id2,data2,blob,type,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobServerPutTest -> static BlobKey put(BlobService service, @Nullable JobID jobId, InputStream data, BlobKey.BlobType blobType) 			throws IOException;1507212387;Helper to choose the right {@link BlobServer#putTransient} method.__@param blobType_whether the BLOB should become permanent or transient__@return blob key for the uploaded data;static BlobKey put(BlobService service, @Nullable JobID jobId, InputStream data, BlobKey.BlobType blobType)_			throws IOException {_		if (blobType == PERMANENT_BLOB) {_			if (service instanceof BlobServer) {_				return ((BlobServer) service).putPermanent(jobId, data)__			} else {_				throw new UnsupportedOperationException("uploading streams is only possible at the BlobServer")__			}_		} else if (jobId == null) {_			return service.getTransientBlobService().putTransient(data)__		} else {_			return service.getTransientBlobService().putTransient(jobId, data)__		}_	};helper,to,choose,the,right,link,blob,server,put,transient,method,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,blob,key,for,the,uploaded,data;static,blob,key,put,blob,service,service,nullable,job,id,job,id,input,stream,data,blob,key,blob,type,blob,type,throws,ioexception,if,blob,type,if,service,instanceof,blob,server,return,blob,server,service,put,permanent,job,id,data,else,throw,new,unsupported,operation,exception,uploading,streams,is,only,possible,at,the,blob,server,else,if,job,id,null,return,service,get,transient,blob,service,put,transient,data,else,return,service,get,transient,blob,service,put,transient,job,id,data
BlobServerPutTest -> static BlobKey put(BlobService service, @Nullable JobID jobId, InputStream data, BlobKey.BlobType blobType) 			throws IOException;1508138617;Helper to choose the right {@link BlobServer#putTransient} method.__@param blobType_whether the BLOB should become permanent or transient__@return blob key for the uploaded data;static BlobKey put(BlobService service, @Nullable JobID jobId, InputStream data, BlobKey.BlobType blobType)_			throws IOException {_		if (blobType == PERMANENT_BLOB) {_			if (service instanceof BlobServer) {_				return ((BlobServer) service).putPermanent(jobId, data)__			} else {_				throw new UnsupportedOperationException("uploading streams is only possible at the BlobServer")__			}_		} else if (jobId == null) {_			return service.getTransientBlobService().putTransient(data)__		} else {_			return service.getTransientBlobService().putTransient(jobId, data)__		}_	};helper,to,choose,the,right,link,blob,server,put,transient,method,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,blob,key,for,the,uploaded,data;static,blob,key,put,blob,service,service,nullable,job,id,job,id,input,stream,data,blob,key,blob,type,blob,type,throws,ioexception,if,blob,type,if,service,instanceof,blob,server,return,blob,server,service,put,permanent,job,id,data,else,throw,new,unsupported,operation,exception,uploading,streams,is,only,possible,at,the,blob,server,else,if,job,id,null,return,service,get,transient,blob,service,put,transient,data,else,return,service,get,transient,blob,service,put,transient,job,id,data
BlobServerPutTest -> static BlobKey put(BlobService service, @Nullable JobID jobId, InputStream data, BlobKey.BlobType blobType) 			throws IOException;1525420604;Helper to choose the right {@link BlobServer#putTransient} method.__@param blobType_whether the BLOB should become permanent or transient__@return blob key for the uploaded data;static BlobKey put(BlobService service, @Nullable JobID jobId, InputStream data, BlobKey.BlobType blobType)_			throws IOException {_		if (blobType == PERMANENT_BLOB) {_			if (service instanceof BlobServer) {_				return ((BlobServer) service).putPermanent(jobId, data)__			} else {_				throw new UnsupportedOperationException("uploading streams is only possible at the BlobServer")__			}_		} else if (jobId == null) {_			return service.getTransientBlobService().putTransient(data)__		} else {_			return service.getTransientBlobService().putTransient(jobId, data)__		}_	};helper,to,choose,the,right,link,blob,server,put,transient,method,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,blob,key,for,the,uploaded,data;static,blob,key,put,blob,service,service,nullable,job,id,job,id,input,stream,data,blob,key,blob,type,blob,type,throws,ioexception,if,blob,type,if,service,instanceof,blob,server,return,blob,server,service,put,permanent,job,id,data,else,throw,new,unsupported,operation,exception,uploading,streams,is,only,possible,at,the,blob,server,else,if,job,id,null,return,service,get,transient,blob,service,put,transient,data,else,return,service,get,transient,blob,service,put,transient,job,id,data
BlobServerPutTest -> static BlobKey put(BlobService service, @Nullable JobID jobId, InputStream data, BlobKey.BlobType blobType) 			throws IOException;1537787646;Helper to choose the right {@link BlobServer#putTransient} method.__@param blobType_whether the BLOB should become permanent or transient__@return blob key for the uploaded data;static BlobKey put(BlobService service, @Nullable JobID jobId, InputStream data, BlobKey.BlobType blobType)_			throws IOException {_		if (blobType == PERMANENT_BLOB) {_			if (service instanceof BlobServer) {_				return ((BlobServer) service).putPermanent(jobId, data)__			} else {_				throw new UnsupportedOperationException("uploading streams is only possible at the BlobServer")__			}_		} else if (jobId == null) {_			return service.getTransientBlobService().putTransient(data)__		} else {_			return service.getTransientBlobService().putTransient(jobId, data)__		}_	};helper,to,choose,the,right,link,blob,server,put,transient,method,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,blob,key,for,the,uploaded,data;static,blob,key,put,blob,service,service,nullable,job,id,job,id,input,stream,data,blob,key,blob,type,blob,type,throws,ioexception,if,blob,type,if,service,instanceof,blob,server,return,blob,server,service,put,permanent,job,id,data,else,throw,new,unsupported,operation,exception,uploading,streams,is,only,possible,at,the,blob,server,else,if,job,id,null,return,service,get,transient,blob,service,put,transient,data,else,return,service,get,transient,blob,service,put,transient,job,id,data
BlobServerPutTest -> private void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1507212387;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;private void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;private,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobServerPutTest -> private void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1507212387;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;private void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;private,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobServerPutTest -> private void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1508138617;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;private void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;private,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobServerPutTest -> private void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1525420604;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;private void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;private,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobServerPutTest -> private void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1537787646;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;private void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;private,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobServerPutTest -> protected void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1499173045;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;protected void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;protected,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobServerPutTest -> protected void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1499789965;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;protected void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;protected,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobServerPutTest -> protected void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1501622876;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;protected void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;protected,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobServerPutTest -> protected void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1502100084;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;protected void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;protected,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobServerPutTest -> protected void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1502701584;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;protected void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;protected,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobServerPutTest -> protected void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1503041358;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;protected void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;protected,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobServerPutTest -> protected void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1506417942;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;protected void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;protected,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobServerPutTest -> @Test 	public void testConcurrentPutOperationsNoJob() throws IOException, ExecutionException, InterruptedException;1502701584;FLINK-6020__Tests that concurrent put operations will only upload the file once to the {@link BlobStore}.;@Test_	public void testConcurrentPutOperationsNoJob() throws IOException, ExecutionException, InterruptedException {_		testConcurrentPutOperations(null)__	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store;test,public,void,test,concurrent,put,operations,no,job,throws,ioexception,execution,exception,interrupted,exception,test,concurrent,put,operations,null
BlobServerPutTest -> @Test 	public void testConcurrentPutOperationsNoJob() throws IOException, ExecutionException, InterruptedException;1503041358;FLINK-6020__Tests that concurrent put operations will only upload the file once to the {@link BlobStore}.;@Test_	public void testConcurrentPutOperationsNoJob() throws IOException, ExecutionException, InterruptedException {_		testConcurrentPutOperations(null)__	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store;test,public,void,test,concurrent,put,operations,no,job,throws,ioexception,execution,exception,interrupted,exception,test,concurrent,put,operations,null
BlobServerPutTest -> @Test 	public void testConcurrentPutOperationsNoJob() throws IOException, ExecutionException, InterruptedException;1506417942;FLINK-6020__Tests that concurrent put operations will only upload the file once to the {@link BlobStore}.;@Test_	public void testConcurrentPutOperationsNoJob() throws IOException, ExecutionException, InterruptedException {_		testConcurrentPutOperations(null)__	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store;test,public,void,test,concurrent,put,operations,no,job,throws,ioexception,execution,exception,interrupted,exception,test,concurrent,put,operations,null
BlobServerPutTest -> static void verifyContents( 			BlobService blobService, @Nullable JobID jobId, BlobKey key, InputStream data) 			throws IOException;1507212387;GET the data stored at the two keys and check that it is equal to <tt>data</tt>.__@param blobService_BlobServer to use_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_blob key_@param data_expected data;static void verifyContents(_			BlobService blobService, @Nullable JobID jobId, BlobKey key, InputStream data)_			throws IOException {__		File file = get(blobService, jobId, key)__		validateGetAndClose(new FileInputStream(file), data)__	};get,the,data,stored,at,the,two,keys,and,check,that,it,is,equal,to,tt,data,tt,param,blob,service,blob,server,to,use,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,blob,key,param,data,expected,data;static,void,verify,contents,blob,service,blob,service,nullable,job,id,job,id,blob,key,key,input,stream,data,throws,ioexception,file,file,get,blob,service,job,id,key,validate,get,and,close,new,file,input,stream,file,data
BlobServerPutTest -> static void verifyContents( 			BlobService blobService, @Nullable JobID jobId, BlobKey key, InputStream data) 			throws IOException;1508138617;GET the data stored at the two keys and check that it is equal to <tt>data</tt>.__@param blobService_BlobServer to use_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_blob key_@param data_expected data;static void verifyContents(_			BlobService blobService, @Nullable JobID jobId, BlobKey key, InputStream data)_			throws IOException {__		File file = get(blobService, jobId, key)__		validateGetAndClose(new FileInputStream(file), data)__	};get,the,data,stored,at,the,two,keys,and,check,that,it,is,equal,to,tt,data,tt,param,blob,service,blob,server,to,use,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,blob,key,param,data,expected,data;static,void,verify,contents,blob,service,blob,service,nullable,job,id,job,id,blob,key,key,input,stream,data,throws,ioexception,file,file,get,blob,service,job,id,key,validate,get,and,close,new,file,input,stream,file,data
BlobServerPutTest -> static void verifyContents( 			BlobService blobService, @Nullable JobID jobId, BlobKey key, InputStream data) 			throws IOException;1525420604;GET the data stored at the two keys and check that it is equal to <tt>data</tt>.__@param blobService_BlobServer to use_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_blob key_@param data_expected data;static void verifyContents(_			BlobService blobService, @Nullable JobID jobId, BlobKey key, InputStream data)_			throws IOException {__		File file = get(blobService, jobId, key)__		validateGetAndClose(new FileInputStream(file), data)__	};get,the,data,stored,at,the,two,keys,and,check,that,it,is,equal,to,tt,data,tt,param,blob,service,blob,server,to,use,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,blob,key,param,data,expected,data;static,void,verify,contents,blob,service,blob,service,nullable,job,id,job,id,blob,key,key,input,stream,data,throws,ioexception,file,file,get,blob,service,job,id,key,validate,get,and,close,new,file,input,stream,file,data
BlobServerPutTest -> static void verifyContents( 			BlobService blobService, @Nullable JobID jobId, BlobKey key, InputStream data) 			throws IOException;1537787646;GET the data stored at the two keys and check that it is equal to <tt>data</tt>.__@param blobService_BlobServer to use_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_blob key_@param data_expected data;static void verifyContents(_			BlobService blobService, @Nullable JobID jobId, BlobKey key, InputStream data)_			throws IOException {__		File file = get(blobService, jobId, key)__		validateGetAndClose(new FileInputStream(file), data)__	};get,the,data,stored,at,the,two,keys,and,check,that,it,is,equal,to,tt,data,tt,param,blob,service,blob,server,to,use,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,blob,key,param,data,expected,data;static,void,verify,contents,blob,service,blob,service,nullable,job,id,job,id,blob,key,key,input,stream,data,throws,ioexception,file,file,get,blob,service,job,id,key,validate,get,and,close,new,file,input,stream,file,data
BlobServerPutTest -> @Test 	public void testConcurrentPutOperationsForJob() throws IOException, ExecutionException, InterruptedException;1502701584;FLINK-6020__Tests that concurrent put operations will only upload the file once to the {@link BlobStore}.;@Test_	public void testConcurrentPutOperationsForJob() throws IOException, ExecutionException, InterruptedException {_		testConcurrentPutOperations(new JobID())__	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store;test,public,void,test,concurrent,put,operations,for,job,throws,ioexception,execution,exception,interrupted,exception,test,concurrent,put,operations,new,job,id
BlobServerPutTest -> @Test 	public void testConcurrentPutOperationsForJob() throws IOException, ExecutionException, InterruptedException;1503041358;FLINK-6020__Tests that concurrent put operations will only upload the file once to the {@link BlobStore}.;@Test_	public void testConcurrentPutOperationsForJob() throws IOException, ExecutionException, InterruptedException {_		testConcurrentPutOperations(new JobID())__	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store;test,public,void,test,concurrent,put,operations,for,job,throws,ioexception,execution,exception,interrupted,exception,test,concurrent,put,operations,new,job,id
BlobServerPutTest -> @Test 	public void testConcurrentPutOperationsForJob() throws IOException, ExecutionException, InterruptedException;1506417942;FLINK-6020__Tests that concurrent put operations will only upload the file once to the {@link BlobStore}.;@Test_	public void testConcurrentPutOperationsForJob() throws IOException, ExecutionException, InterruptedException {_		testConcurrentPutOperations(new JobID())__	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store;test,public,void,test,concurrent,put,operations,for,job,throws,ioexception,execution,exception,interrupted,exception,test,concurrent,put,operations,new,job,id
BlobServerPutTest -> private void testPutChunkedStreamSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1507212387;Uploads two chunked file streams for different jobs into the server via the {@link_BlobServer}. File transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutChunkedStreamSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(server, jobId1, new ChunkedInputStream(data, 19), blobType)__			assertNotNull(key1a)___			BlobKey key1b = put(server, jobId1, new ChunkedInputStream(data2, 19), blobType)__			assertNotNull(key1b)___			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(server, jobId2, new ChunkedInputStream(data, 19), blobType)__			assertNotNull(key2a)__			assertEquals(key1a, key2a)___			BlobKey key2b = put(server, jobId2, new ChunkedInputStream(data2, 19), blobType)__			assertNotNull(key2b)__			assertEquals(key1b, key2b)___			_			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)__		}_	};uploads,two,chunked,file,streams,for,different,jobs,into,the,server,via,the,link,blob,server,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,chunked,stream,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,server,job,id1,new,chunked,input,stream,data,19,blob,type,assert,not,null,key1a,blob,key,key1b,put,server,job,id1,new,chunked,input,stream,data2,19,blob,type,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,server,job,id2,new,chunked,input,stream,data,19,blob,type,assert,not,null,key2a,assert,equals,key1a,key2a,blob,key,key2b,put,server,job,id2,new,chunked,input,stream,data2,19,blob,type,assert,not,null,key2b,assert,equals,key1b,key2b,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobServerPutTest -> private void testPutChunkedStreamSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1508138617;Uploads two chunked file streams for different jobs into the server via the {@link_BlobServer}. File transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutChunkedStreamSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(server, jobId1, new ChunkedInputStream(data, 19), blobType)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(server, jobId1, new ChunkedInputStream(data, 19), blobType)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			BlobKey key1b = put(server, jobId1, new ChunkedInputStream(data2, 19), blobType)__			assertNotNull(key1b)___			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(server, jobId2, new ChunkedInputStream(data, 19), blobType)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			BlobKey key2b = put(server, jobId2, new ChunkedInputStream(data2, 19), blobType)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)__		}_	};uploads,two,chunked,file,streams,for,different,jobs,into,the,server,via,the,link,blob,server,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,chunked,stream,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,server,job,id1,new,chunked,input,stream,data,19,blob,type,assert,not,null,key1a,blob,key,key1a2,put,server,job,id1,new,chunked,input,stream,data,19,blob,type,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,blob,key,key1b,put,server,job,id1,new,chunked,input,stream,data2,19,blob,type,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,server,job,id2,new,chunked,input,stream,data,19,blob,type,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,blob,key,key2b,put,server,job,id2,new,chunked,input,stream,data2,19,blob,type,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobServerPutTest -> private void testPutChunkedStreamSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1525420604;Uploads two chunked file streams for different jobs into the server via the {@link_BlobServer}. File transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutChunkedStreamSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(server, jobId1, new ChunkedInputStream(data, 19), blobType)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(server, jobId1, new ChunkedInputStream(data, 19), blobType)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			BlobKey key1b = put(server, jobId1, new ChunkedInputStream(data2, 19), blobType)__			assertNotNull(key1b)___			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(server, jobId2, new ChunkedInputStream(data, 19), blobType)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			BlobKey key2b = put(server, jobId2, new ChunkedInputStream(data2, 19), blobType)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)__		}_	};uploads,two,chunked,file,streams,for,different,jobs,into,the,server,via,the,link,blob,server,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,chunked,stream,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,server,job,id1,new,chunked,input,stream,data,19,blob,type,assert,not,null,key1a,blob,key,key1a2,put,server,job,id1,new,chunked,input,stream,data,19,blob,type,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,blob,key,key1b,put,server,job,id1,new,chunked,input,stream,data2,19,blob,type,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,server,job,id2,new,chunked,input,stream,data,19,blob,type,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,blob,key,key2b,put,server,job,id2,new,chunked,input,stream,data2,19,blob,type,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobServerPutTest -> private void testPutChunkedStreamSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1537787646;Uploads two chunked file streams for different jobs into the server via the {@link_BlobServer}. File transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutChunkedStreamSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(server, jobId1, new ChunkedInputStream(data, 19), blobType)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(server, jobId1, new ChunkedInputStream(data, 19), blobType)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			BlobKey key1b = put(server, jobId1, new ChunkedInputStream(data2, 19), blobType)__			assertNotNull(key1b)___			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(server, jobId2, new ChunkedInputStream(data, 19), blobType)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			BlobKey key2b = put(server, jobId2, new ChunkedInputStream(data2, 19), blobType)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)__		}_	};uploads,two,chunked,file,streams,for,different,jobs,into,the,server,via,the,link,blob,server,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,chunked,stream,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,server,job,id1,new,chunked,input,stream,data,19,blob,type,assert,not,null,key1a,blob,key,key1a2,put,server,job,id1,new,chunked,input,stream,data,19,blob,type,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,blob,key,key1b,put,server,job,id1,new,chunked,input,stream,data2,19,blob,type,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,server,job,id2,new,chunked,input,stream,data,19,blob,type,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,blob,key,key2b,put,server,job,id2,new,chunked,input,stream,data2,19,blob,type,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobServerPutTest -> private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1507212387;Uploads a byte array to a server which cannot create any files via the {@link BlobServer}._File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("Cannot create directory ")___			put(server, jobId, data, blobType)___		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,any,files,via,the,link,blob,server,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,cannot,create,directory,put,server,job,id,data,blob,type,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobServerPutTest -> private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1508138617;Uploads a byte array to a server which cannot create any files via the {@link BlobServer}._File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("Cannot create directory ")___			put(server, jobId, data, blobType)___		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,any,files,via,the,link,blob,server,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,cannot,create,directory,put,server,job,id,data,blob,type,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobServerPutTest -> private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1525420604;Uploads a byte array to a server which cannot create any files via the {@link BlobServer}._File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("Cannot create directory ")___			put(server, jobId, data, blobType)___		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,any,files,via,the,link,blob,server,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,cannot,create,directory,put,server,job,id,data,blob,type,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobServerPutTest -> private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1537787646;Uploads a byte array to a server which cannot create any files via the {@link BlobServer}._File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(AccessDeniedException.class)___			put(server, jobId, data, blobType)___		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,any,files,via,the,link,blob,server,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,access,denied,exception,class,put,server,job,id,data,blob,type,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobServerPutTest -> @Test 	public void testConcurrentPutOperations() throws IOException, ExecutionException, InterruptedException;1495001945;FLINK-6020__Tests that concurrent put operations will only upload the file once to the {@link BlobStore}.;@Test_	public void testConcurrentPutOperations() throws IOException, ExecutionException, InterruptedException {_		final Configuration configuration = new Configuration()__		BlobStore blobStore = mock(BlobStore.class)__		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		ArrayList<Future<BlobKey>> allFutures = new ArrayList(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (_			final BlobServer blobServer = new BlobServer(configuration, blobStore)) {__			for (int i = 0_ i < concurrentPutOperations_ i++) {_				Future<BlobKey> putFuture = FlinkCompletableFuture.supplyAsync(new Callable<BlobKey>() {_					@Override_					public BlobKey call() throws Exception {_						try (BlobClient blobClient = blobServer.createClient()) {_							return blobClient.put(new BlockingInputStream(countDownLatch, data))__						}_					}_				}, executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while(blobKeyIterator.hasNext()) {_				assertEquals(blobKey, blobKeyIterator.next())__			}__			_			verify(blobStore, times(1)).put(any(File.class), eq(blobKey))__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store;test,public,void,test,concurrent,put,operations,throws,ioexception,execution,exception,interrupted,exception,final,configuration,configuration,new,configuration,blob,store,blob,store,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,array,list,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,blob,server,new,blob,server,configuration,blob,store,for,int,i,0,i,concurrent,put,operations,i,future,blob,key,put,future,flink,completable,future,supply,async,new,callable,blob,key,override,public,blob,key,call,throws,exception,try,blob,client,blob,client,blob,server,create,client,return,blob,client,put,new,blocking,input,stream,count,down,latch,data,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,assert,equals,blob,key,blob,key,iterator,next,verify,blob,store,times,1,put,any,file,class,eq,blob,key,finally,executor,shutdown,now
BlobServerPutTest -> @Test 	public void testConcurrentPutOperations() throws IOException, ExecutionException, InterruptedException;1499173045;FLINK-6020__Tests that concurrent put operations will only upload the file once to the {@link BlobStore}.;@Test_	public void testConcurrentPutOperations() throws IOException, ExecutionException, InterruptedException {_		final Configuration configuration = new Configuration()__		BlobStore blobStore = mock(BlobStore.class)__		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		ArrayList<Future<BlobKey>> allFutures = new ArrayList(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (_			final BlobServer blobServer = new BlobServer(configuration, blobStore)) {__			for (int i = 0_ i < concurrentPutOperations_ i++) {_				Future<BlobKey> putFuture = FlinkCompletableFuture.supplyAsync(new Callable<BlobKey>() {_					@Override_					public BlobKey call() throws Exception {_						try (BlobClient blobClient = blobServer.createClient()) {_							return blobClient.put(new BlockingInputStream(countDownLatch, data))__						}_					}_				}, executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while(blobKeyIterator.hasNext()) {_				assertEquals(blobKey, blobKeyIterator.next())__			}__			_			verify(blobStore, times(1)).put(any(File.class), eq(blobKey))__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store;test,public,void,test,concurrent,put,operations,throws,ioexception,execution,exception,interrupted,exception,final,configuration,configuration,new,configuration,blob,store,blob,store,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,array,list,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,blob,server,new,blob,server,configuration,blob,store,for,int,i,0,i,concurrent,put,operations,i,future,blob,key,put,future,flink,completable,future,supply,async,new,callable,blob,key,override,public,blob,key,call,throws,exception,try,blob,client,blob,client,blob,server,create,client,return,blob,client,put,new,blocking,input,stream,count,down,latch,data,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,assert,equals,blob,key,blob,key,iterator,next,verify,blob,store,times,1,put,any,file,class,eq,blob,key,finally,executor,shutdown,now
BlobServerPutTest -> @Test 	public void testConcurrentPutOperations() throws IOException, ExecutionException, InterruptedException;1499789965;FLINK-6020__Tests that concurrent put operations will only upload the file once to the {@link BlobStore}.;@Test_	public void testConcurrentPutOperations() throws IOException, ExecutionException, InterruptedException {_		final Configuration configuration = new Configuration()__		BlobStore blobStore = mock(BlobStore.class)__		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		ArrayList<Future<BlobKey>> allFutures = new ArrayList(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (_			final BlobServer blobServer = new BlobServer(configuration, blobStore)) {__			for (int i = 0_ i < concurrentPutOperations_ i++) {_				Future<BlobKey> putFuture = FlinkCompletableFuture.supplyAsync(new Callable<BlobKey>() {_					@Override_					public BlobKey call() throws Exception {_						try (BlobClient blobClient = blobServer.createClient()) {_							return blobClient.put(new BlockingInputStream(countDownLatch, data))__						}_					}_				}, executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while(blobKeyIterator.hasNext()) {_				assertEquals(blobKey, blobKeyIterator.next())__			}__			_			verify(blobStore, times(1)).put(any(File.class), eq(blobKey))__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store;test,public,void,test,concurrent,put,operations,throws,ioexception,execution,exception,interrupted,exception,final,configuration,configuration,new,configuration,blob,store,blob,store,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,array,list,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,blob,server,new,blob,server,configuration,blob,store,for,int,i,0,i,concurrent,put,operations,i,future,blob,key,put,future,flink,completable,future,supply,async,new,callable,blob,key,override,public,blob,key,call,throws,exception,try,blob,client,blob,client,blob,server,create,client,return,blob,client,put,new,blocking,input,stream,count,down,latch,data,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,assert,equals,blob,key,blob,key,iterator,next,verify,blob,store,times,1,put,any,file,class,eq,blob,key,finally,executor,shutdown,now
BlobServerPutTest -> @Test 	public void testConcurrentPutOperations() throws IOException, ExecutionException, InterruptedException;1501622876;FLINK-6020__Tests that concurrent put operations will only upload the file once to the {@link BlobStore}.;@Test_	public void testConcurrentPutOperations() throws IOException, ExecutionException, InterruptedException {_		final Configuration configuration = new Configuration()__		BlobStore blobStore = mock(BlobStore.class)__		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		ArrayList<CompletableFuture<BlobKey>> allFutures = new ArrayList(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (_			final BlobServer blobServer = new BlobServer(configuration, blobStore)) {__			for (int i = 0_ i < concurrentPutOperations_ i++) {_				CompletableFuture<BlobKey> putFuture = CompletableFuture.supplyAsync(_					() -> {_						try (BlobClient blobClient = blobServer.createClient()) {_							return blobClient.put(new BlockingInputStream(countDownLatch, data))__						} catch (IOException e) {_							throw new FlinkFutureException("Could not upload blob.", e)__						}_					},_					executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while(blobKeyIterator.hasNext()) {_				assertEquals(blobKey, blobKeyIterator.next())__			}__			_			verify(blobStore, times(1)).put(any(File.class), eq(blobKey))__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store;test,public,void,test,concurrent,put,operations,throws,ioexception,execution,exception,interrupted,exception,final,configuration,configuration,new,configuration,blob,store,blob,store,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,array,list,completable,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,blob,server,new,blob,server,configuration,blob,store,for,int,i,0,i,concurrent,put,operations,i,completable,future,blob,key,put,future,completable,future,supply,async,try,blob,client,blob,client,blob,server,create,client,return,blob,client,put,new,blocking,input,stream,count,down,latch,data,catch,ioexception,e,throw,new,flink,future,exception,could,not,upload,blob,e,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,assert,equals,blob,key,blob,key,iterator,next,verify,blob,store,times,1,put,any,file,class,eq,blob,key,finally,executor,shutdown,now
BlobServerPutTest -> @Test 	public void testConcurrentPutOperations() throws IOException, ExecutionException, InterruptedException;1502100084;FLINK-6020__Tests that concurrent put operations will only upload the file once to the {@link BlobStore}.;@Test_	public void testConcurrentPutOperations() throws IOException, ExecutionException, InterruptedException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		BlobStore blobStore = mock(BlobStore.class)__		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		ArrayList<CompletableFuture<BlobKey>> allFutures = new ArrayList(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (_			final BlobServer blobServer = new BlobServer(config, blobStore)) {__			for (int i = 0_ i < concurrentPutOperations_ i++) {_				CompletableFuture<BlobKey> putFuture = CompletableFuture.supplyAsync(_					() -> {_						try (BlobClient blobClient = blobServer.createClient()) {_							return blobClient.put(new BlockingInputStream(countDownLatch, data))__						} catch (IOException e) {_							throw new FlinkFutureException("Could not upload blob.", e)__						}_					},_					executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while(blobKeyIterator.hasNext()) {_				assertEquals(blobKey, blobKeyIterator.next())__			}__			_			verify(blobStore, times(1)).put(any(File.class), eq(blobKey))__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store;test,public,void,test,concurrent,put,operations,throws,ioexception,execution,exception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,blob,store,blob,store,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,array,list,completable,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,blob,server,new,blob,server,config,blob,store,for,int,i,0,i,concurrent,put,operations,i,completable,future,blob,key,put,future,completable,future,supply,async,try,blob,client,blob,client,blob,server,create,client,return,blob,client,put,new,blocking,input,stream,count,down,latch,data,catch,ioexception,e,throw,new,flink,future,exception,could,not,upload,blob,e,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,assert,equals,blob,key,blob,key,iterator,next,verify,blob,store,times,1,put,any,file,class,eq,blob,key,finally,executor,shutdown,now
BlobServerPutTest -> static void verifyContents( 			BlobService blobService, @Nullable JobID jobId, BlobKey key, byte[] data) 			throws IOException;1507212387;GET the data stored at the two keys and check that it is equal to <tt>data</tt>.__@param blobService_BlobServer to use_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_blob key_@param data_expected data;static void verifyContents(_			BlobService blobService, @Nullable JobID jobId, BlobKey key, byte[] data)_			throws IOException {__		File file = get(blobService, jobId, key)__		validateGetAndClose(new FileInputStream(file), data)__	};get,the,data,stored,at,the,two,keys,and,check,that,it,is,equal,to,tt,data,tt,param,blob,service,blob,server,to,use,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,blob,key,param,data,expected,data;static,void,verify,contents,blob,service,blob,service,nullable,job,id,job,id,blob,key,key,byte,data,throws,ioexception,file,file,get,blob,service,job,id,key,validate,get,and,close,new,file,input,stream,file,data
BlobServerPutTest -> static void verifyContents( 			BlobService blobService, @Nullable JobID jobId, BlobKey key, byte[] data) 			throws IOException;1508138617;GET the data stored at the two keys and check that it is equal to <tt>data</tt>.__@param blobService_BlobServer to use_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_blob key_@param data_expected data;static void verifyContents(_			BlobService blobService, @Nullable JobID jobId, BlobKey key, byte[] data)_			throws IOException {__		File file = get(blobService, jobId, key)__		validateGetAndClose(new FileInputStream(file), data)__	};get,the,data,stored,at,the,two,keys,and,check,that,it,is,equal,to,tt,data,tt,param,blob,service,blob,server,to,use,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,blob,key,param,data,expected,data;static,void,verify,contents,blob,service,blob,service,nullable,job,id,job,id,blob,key,key,byte,data,throws,ioexception,file,file,get,blob,service,job,id,key,validate,get,and,close,new,file,input,stream,file,data
BlobServerPutTest -> static void verifyContents( 			BlobService blobService, @Nullable JobID jobId, BlobKey key, byte[] data) 			throws IOException;1525420604;GET the data stored at the two keys and check that it is equal to <tt>data</tt>.__@param blobService_BlobServer to use_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_blob key_@param data_expected data;static void verifyContents(_			BlobService blobService, @Nullable JobID jobId, BlobKey key, byte[] data)_			throws IOException {__		File file = get(blobService, jobId, key)__		validateGetAndClose(new FileInputStream(file), data)__	};get,the,data,stored,at,the,two,keys,and,check,that,it,is,equal,to,tt,data,tt,param,blob,service,blob,server,to,use,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,blob,key,param,data,expected,data;static,void,verify,contents,blob,service,blob,service,nullable,job,id,job,id,blob,key,key,byte,data,throws,ioexception,file,file,get,blob,service,job,id,key,validate,get,and,close,new,file,input,stream,file,data
BlobServerPutTest -> static void verifyContents( 			BlobService blobService, @Nullable JobID jobId, BlobKey key, byte[] data) 			throws IOException;1537787646;GET the data stored at the two keys and check that it is equal to <tt>data</tt>.__@param blobService_BlobServer to use_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_blob key_@param data_expected data;static void verifyContents(_			BlobService blobService, @Nullable JobID jobId, BlobKey key, byte[] data)_			throws IOException {__		File file = get(blobService, jobId, key)__		validateGetAndClose(new FileInputStream(file), data)__	};get,the,data,stored,at,the,two,keys,and,check,that,it,is,equal,to,tt,data,tt,param,blob,service,blob,server,to,use,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,blob,key,param,data,expected,data;static,void,verify,contents,blob,service,blob,service,nullable,job,id,job,id,blob,key,key,byte,data,throws,ioexception,file,file,get,blob,service,job,id,key,validate,get,and,close,new,file,input,stream,file,data
BlobServerPutTest -> private void testPutStreamSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1507212387;Uploads two file streams for different jobs into the server via the {@link BlobServer}. File_transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutStreamSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(server, jobId1, new ByteArrayInputStream(data), blobType)__			assertNotNull(key1a)___			BlobKey key1b = put(server, jobId1, new ByteArrayInputStream(data2), blobType)__			assertNotNull(key1b)___			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(server, jobId2, new ByteArrayInputStream(data), blobType)__			assertNotNull(key2a)__			assertEquals(key1a, key2a)___			BlobKey key2b = put(server, jobId2, new ByteArrayInputStream(data2), blobType)__			assertNotNull(key2b)__			assertEquals(key1b, key2b)___			_			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)__		}_	};uploads,two,file,streams,for,different,jobs,into,the,server,via,the,link,blob,server,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,stream,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,server,job,id1,new,byte,array,input,stream,data,blob,type,assert,not,null,key1a,blob,key,key1b,put,server,job,id1,new,byte,array,input,stream,data2,blob,type,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,server,job,id2,new,byte,array,input,stream,data,blob,type,assert,not,null,key2a,assert,equals,key1a,key2a,blob,key,key2b,put,server,job,id2,new,byte,array,input,stream,data2,blob,type,assert,not,null,key2b,assert,equals,key1b,key2b,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobServerPutTest -> private void testPutStreamSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1508138617;Uploads two file streams for different jobs into the server via the {@link BlobServer}. File_transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutStreamSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(server, jobId1, new ByteArrayInputStream(data), blobType)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(server, jobId1, new ByteArrayInputStream(data), blobType)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			BlobKey key1b = put(server, jobId1, new ByteArrayInputStream(data2), blobType)__			assertNotNull(key1b)___			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(server, jobId2, new ByteArrayInputStream(data), blobType)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			BlobKey key2b = put(server, jobId2, new ByteArrayInputStream(data2), blobType)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)__		}_	};uploads,two,file,streams,for,different,jobs,into,the,server,via,the,link,blob,server,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,stream,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,server,job,id1,new,byte,array,input,stream,data,blob,type,assert,not,null,key1a,blob,key,key1a2,put,server,job,id1,new,byte,array,input,stream,data,blob,type,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,blob,key,key1b,put,server,job,id1,new,byte,array,input,stream,data2,blob,type,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,server,job,id2,new,byte,array,input,stream,data,blob,type,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,blob,key,key2b,put,server,job,id2,new,byte,array,input,stream,data2,blob,type,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobServerPutTest -> private void testPutStreamSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1525420604;Uploads two file streams for different jobs into the server via the {@link BlobServer}. File_transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutStreamSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(server, jobId1, new ByteArrayInputStream(data), blobType)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(server, jobId1, new ByteArrayInputStream(data), blobType)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			BlobKey key1b = put(server, jobId1, new ByteArrayInputStream(data2), blobType)__			assertNotNull(key1b)___			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(server, jobId2, new ByteArrayInputStream(data), blobType)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			BlobKey key2b = put(server, jobId2, new ByteArrayInputStream(data2), blobType)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)__		}_	};uploads,two,file,streams,for,different,jobs,into,the,server,via,the,link,blob,server,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,stream,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,server,job,id1,new,byte,array,input,stream,data,blob,type,assert,not,null,key1a,blob,key,key1a2,put,server,job,id1,new,byte,array,input,stream,data,blob,type,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,blob,key,key1b,put,server,job,id1,new,byte,array,input,stream,data2,blob,type,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,server,job,id2,new,byte,array,input,stream,data,blob,type,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,blob,key,key2b,put,server,job,id2,new,byte,array,input,stream,data2,blob,type,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobServerPutTest -> private void testPutStreamSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1537787646;Uploads two file streams for different jobs into the server via the {@link BlobServer}. File_transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutStreamSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(server, jobId1, new ByteArrayInputStream(data), blobType)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(server, jobId1, new ByteArrayInputStream(data), blobType)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			BlobKey key1b = put(server, jobId1, new ByteArrayInputStream(data2), blobType)__			assertNotNull(key1b)___			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(server, jobId2, new ByteArrayInputStream(data), blobType)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			BlobKey key2b = put(server, jobId2, new ByteArrayInputStream(data2), blobType)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)__		}_	};uploads,two,file,streams,for,different,jobs,into,the,server,via,the,link,blob,server,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,stream,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,server,job,id1,new,byte,array,input,stream,data,blob,type,assert,not,null,key1a,blob,key,key1a2,put,server,job,id1,new,byte,array,input,stream,data,blob,type,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,blob,key,key1b,put,server,job,id1,new,byte,array,input,stream,data2,blob,type,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,server,job,id2,new,byte,array,input,stream,data,blob,type,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,blob,key,key2b,put,server,job,id2,new,byte,array,input,stream,data2,blob,type,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception;1502701584;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,no,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,null
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception;1503041358;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,no,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,null
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception;1506417942;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,no,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,null
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception;1507212387;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,no,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,null
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception;1507212387;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,no,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,null
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception;1508138617;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,no,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,null
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception;1525420604;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,no,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,null
BlobServerPutTest -> @Test 	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception;1537787646;Tests concurrent calls to {@link BlobServer#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testServerContentAddressableGetStorageLocationConcurrentNoJob() throws Exception {_		testServerContentAddressableGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,blob,server,get,storage,location,job,id,blob,key;test,public,void,test,server,content,addressable,get,storage,location,concurrent,no,job,throws,exception,test,server,content,addressable,get,storage,location,concurrent,null
BlobServerPutTest -> private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1507212387;Uploads a byte array to a server which cannot move incoming files to the final blob store via_the {@link BlobServer}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File jobStoreDir = null__		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			jobStoreDir = server.getStorageLocation(jobId,_				BlobKey.createKey(blobType)).getParentFile()__			assertTrue(jobStoreDir.setExecutable(true, false))__			assertTrue(jobStoreDir.setReadable(true, false))__			assertTrue(jobStoreDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(AccessDeniedException.class)___			try {_				put(server, jobId, data, blobType)__			} finally {_				_				File incomingFileDir = new File(jobStoreDir.getParent(), "incoming")__				assertArrayEquals(new String[] {}, incomingFileDir.list())___				_				assertArrayEquals(new String[] {}, jobStoreDir.list())__			}_		} finally {_			_			if (jobStoreDir != null) {_				_				jobStoreDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,move,incoming,files,to,the,final,blob,store,via,the,link,blob,server,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,store,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,job,store,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,job,store,dir,server,get,storage,location,job,id,blob,key,create,key,blob,type,get,parent,file,assert,true,job,store,dir,set,executable,true,false,assert,true,job,store,dir,set,readable,true,false,assert,true,job,store,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,access,denied,exception,class,try,put,server,job,id,data,blob,type,finally,file,incoming,file,dir,new,file,job,store,dir,get,parent,incoming,assert,array,equals,new,string,incoming,file,dir,list,assert,array,equals,new,string,job,store,dir,list,finally,if,job,store,dir,null,job,store,dir,set,writable,true,false
BlobServerPutTest -> private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1508138617;Uploads a byte array to a server which cannot move incoming files to the final blob store via_the {@link BlobServer}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File jobStoreDir = null__		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			jobStoreDir = server.getStorageLocation(jobId,_				BlobKey.createKey(blobType)).getParentFile()__			assertTrue(jobStoreDir.setExecutable(true, false))__			assertTrue(jobStoreDir.setReadable(true, false))__			assertTrue(jobStoreDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(AccessDeniedException.class)___			try {_				put(server, jobId, data, blobType)__			} finally {_				_				File incomingFileDir = new File(jobStoreDir.getParent(), "incoming")__				assertArrayEquals(new String[] {}, incomingFileDir.list())___				_				assertArrayEquals(new String[] {}, jobStoreDir.list())__			}_		} finally {_			_			if (jobStoreDir != null) {_				_				jobStoreDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,move,incoming,files,to,the,final,blob,store,via,the,link,blob,server,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,store,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,job,store,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,job,store,dir,server,get,storage,location,job,id,blob,key,create,key,blob,type,get,parent,file,assert,true,job,store,dir,set,executable,true,false,assert,true,job,store,dir,set,readable,true,false,assert,true,job,store,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,access,denied,exception,class,try,put,server,job,id,data,blob,type,finally,file,incoming,file,dir,new,file,job,store,dir,get,parent,incoming,assert,array,equals,new,string,incoming,file,dir,list,assert,array,equals,new,string,job,store,dir,list,finally,if,job,store,dir,null,job,store,dir,set,writable,true,false
BlobServerPutTest -> private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1525420604;Uploads a byte array to a server which cannot move incoming files to the final blob store via_the {@link BlobServer}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File jobStoreDir = null__		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			jobStoreDir = server.getStorageLocation(jobId,_				BlobKey.createKey(blobType)).getParentFile()__			assertTrue(jobStoreDir.setExecutable(true, false))__			assertTrue(jobStoreDir.setReadable(true, false))__			assertTrue(jobStoreDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(AccessDeniedException.class)___			try {_				put(server, jobId, data, blobType)__			} finally {_				_				File incomingFileDir = new File(jobStoreDir.getParent(), "incoming")__				assertArrayEquals(new String[] {}, incomingFileDir.list())___				_				assertArrayEquals(new String[] {}, jobStoreDir.list())__			}_		} finally {_			_			if (jobStoreDir != null) {_				_				jobStoreDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,move,incoming,files,to,the,final,blob,store,via,the,link,blob,server,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,store,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,job,store,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,job,store,dir,server,get,storage,location,job,id,blob,key,create,key,blob,type,get,parent,file,assert,true,job,store,dir,set,executable,true,false,assert,true,job,store,dir,set,readable,true,false,assert,true,job,store,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,access,denied,exception,class,try,put,server,job,id,data,blob,type,finally,file,incoming,file,dir,new,file,job,store,dir,get,parent,incoming,assert,array,equals,new,string,incoming,file,dir,list,assert,array,equals,new,string,job,store,dir,list,finally,if,job,store,dir,null,job,store,dir,set,writable,true,false
BlobServerPutTest -> private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1537787646;Uploads a byte array to a server which cannot move incoming files to the final blob store via_the {@link BlobServer}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File jobStoreDir = null__		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			jobStoreDir = server.getStorageLocation(jobId,_				BlobKey.createKey(blobType)).getParentFile()__			assertTrue(jobStoreDir.setExecutable(true, false))__			assertTrue(jobStoreDir.setReadable(true, false))__			assertTrue(jobStoreDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(AccessDeniedException.class)___			try {_				put(server, jobId, data, blobType)__			} finally {_				_				File incomingFileDir = new File(jobStoreDir.getParent(), "incoming")__				assertArrayEquals(new String[] {}, incomingFileDir.list())___				_				assertArrayEquals(new String[] {}, jobStoreDir.list())__			}_		} finally {_			_			if (jobStoreDir != null) {_				_				jobStoreDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,move,incoming,files,to,the,final,blob,store,via,the,link,blob,server,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,store,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,job,store,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,job,store,dir,server,get,storage,location,job,id,blob,key,create,key,blob,type,get,parent,file,assert,true,job,store,dir,set,executable,true,false,assert,true,job,store,dir,set,readable,true,false,assert,true,job,store,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,access,denied,exception,class,try,put,server,job,id,data,blob,type,finally,file,incoming,file,dir,new,file,job,store,dir,get,parent,incoming,assert,array,equals,new,string,incoming,file,dir,list,assert,array,equals,new,string,job,store,dir,list,finally,if,job,store,dir,null,job,store,dir,set,writable,true,false
