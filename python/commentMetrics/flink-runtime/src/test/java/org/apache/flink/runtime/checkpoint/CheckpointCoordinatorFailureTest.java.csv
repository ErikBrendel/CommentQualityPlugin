# id;timestamp;commentText;codeText;commentWords;codeWords
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1481295943;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			null,_			new DisabledCheckpointStatsTracker(),_			Executors.directExecutor())___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId =coord.getPendingCheckpoints().keySet().iterator().next()___		final CheckpointMetaData checkpointMetaData = new CheckpointMetaData(checkpointId, triggerTimestamp)__		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointMetaData)___		CompletedCheckpoint completedCheckpoint = mock(CompletedCheckpoint.class)__		PowerMockito.whenNew(CompletedCheckpoint.class).withAnyArguments().thenReturn(completedCheckpoint)___		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		verify(completedCheckpoint).discard()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,null,new,disabled,checkpoint,stats,tracker,executors,direct,executor,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,final,checkpoint,meta,data,checkpoint,meta,data,new,checkpoint,meta,data,checkpoint,id,trigger,timestamp,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,meta,data,completed,checkpoint,completed,checkpoint,mock,completed,checkpoint,class,power,mockito,when,new,completed,checkpoint,class,with,any,arguments,then,return,completed,checkpoint,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,completed,checkpoint,discard
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1484038131;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			null,_			Executors.directExecutor())___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()___		final CheckpointMetaData checkpointMetaData = new CheckpointMetaData(checkpointId, triggerTimestamp)__		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointMetaData)___		CompletedCheckpoint completedCheckpoint = mock(CompletedCheckpoint.class)__		PowerMockito.whenNew(CompletedCheckpoint.class).withAnyArguments().thenReturn(completedCheckpoint)___		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		verify(completedCheckpoint).discard()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,null,executors,direct,executor,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,final,checkpoint,meta,data,checkpoint,meta,data,new,checkpoint,meta,data,checkpoint,id,trigger,timestamp,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,meta,data,completed,checkpoint,completed,checkpoint,mock,completed,checkpoint,class,power,mockito,when,new,completed,checkpoint,class,with,any,arguments,then,return,completed,checkpoint,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,completed,checkpoint,discard
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1487762095;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			null,_			Executors.directExecutor())___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()___		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointId)___		CompletedCheckpoint completedCheckpoint = mock(CompletedCheckpoint.class)__		PowerMockito.whenNew(CompletedCheckpoint.class).withAnyArguments().thenReturn(completedCheckpoint)___		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		verify(completedCheckpoint).discard()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,null,executors,direct,executor,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,id,completed,checkpoint,completed,checkpoint,mock,completed,checkpoint,class,power,mockito,when,new,completed,checkpoint,class,with,any,arguments,then,return,completed,checkpoint,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,completed,checkpoint,discard
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1488304750;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			null,_			Executors.directExecutor())___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()___		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointId)___		CompletedCheckpoint completedCheckpoint = mock(CompletedCheckpoint.class)__		PowerMockito.whenNew(CompletedCheckpoint.class).withAnyArguments().thenReturn(completedCheckpoint)___		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		verify(completedCheckpoint).discard()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,null,executors,direct,executor,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,id,completed,checkpoint,completed,checkpoint,mock,completed,checkpoint,class,power,mockito,when,new,completed,checkpoint,class,with,any,arguments,then,return,completed,checkpoint,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,completed,checkpoint,discard
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1489671807;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			null,_			Executors.directExecutor())___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()___		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointId)___		CompletedCheckpoint completedCheckpoint = mock(CompletedCheckpoint.class)__		PowerMockito.whenNew(CompletedCheckpoint.class).withAnyArguments().thenReturn(completedCheckpoint)___		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		verify(completedCheckpoint).discard()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,null,executors,direct,executor,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,id,completed,checkpoint,completed,checkpoint,mock,completed,checkpoint,class,power,mockito,when,new,completed,checkpoint,class,with,any,arguments,then,return,completed,checkpoint,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,completed,checkpoint,discard
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1492867556;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			null,_			Executors.directExecutor())___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()__		_		SubtaskState subtaskState = mock(SubtaskState.class)__		PowerMockito.when(subtaskState.getLegacyOperatorState()).thenReturn(null)__		PowerMockito.when(subtaskState.getManagedOperatorState()).thenReturn(null)__		_		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointId, new CheckpointMetrics(), subtaskState)__		_		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		_		verify(subtaskState, times(1)).discardSharedStatesOnFail()__		verify(subtaskState).discardState()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,null,executors,direct,executor,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,subtask,state,subtask,state,mock,subtask,state,class,power,mockito,when,subtask,state,get,legacy,operator,state,then,return,null,power,mockito,when,subtask,state,get,managed,operator,state,then,return,null,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,state,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,subtask,state,times,1,discard,shared,states,on,fail,verify,subtask,state,discard,state
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1492867556;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			null,_			Executors.directExecutor())___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()__		_		SubtaskState subtaskState = mock(SubtaskState.class)__		PowerMockito.when(subtaskState.getLegacyOperatorState()).thenReturn(null)__		PowerMockito.when(subtaskState.getManagedOperatorState()).thenReturn(null)__		_		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointId, new CheckpointMetrics(), subtaskState)__		_		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		_		verify(subtaskState).discardState()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,null,executors,direct,executor,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,subtask,state,subtask,state,mock,subtask,state,class,power,mockito,when,subtask,state,get,legacy,operator,state,then,return,null,power,mockito,when,subtask,state,get,managed,operator,state,then,return,null,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,state,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,subtask,state,discard,state
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1493403095;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			null,_			Executors.directExecutor())___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()__		_		SubtaskState subtaskState = mock(SubtaskState.class)___		StreamStateHandle legacyHandle = mock(StreamStateHandle.class)__		ChainedStateHandle<StreamStateHandle> chainedLegacyHandle = mock(ChainedStateHandle.class)__		when(chainedLegacyHandle.get(anyInt())).thenReturn(legacyHandle)__		when(subtaskState.getLegacyOperatorState()).thenReturn(chainedLegacyHandle)___		OperatorStateHandle managedHandle = mock(OperatorStateHandle.class)__		ChainedStateHandle<OperatorStateHandle> chainedManagedHandle = mock(ChainedStateHandle.class)__		when(chainedManagedHandle.get(anyInt())).thenReturn(managedHandle)__		when(subtaskState.getManagedOperatorState()).thenReturn(chainedManagedHandle)___		OperatorStateHandle rawHandle = mock(OperatorStateHandle.class)__		ChainedStateHandle<OperatorStateHandle> chainedRawHandle = mock(ChainedStateHandle.class)__		when(chainedRawHandle.get(anyInt())).thenReturn(rawHandle)__		when(subtaskState.getRawOperatorState()).thenReturn(chainedRawHandle)___		KeyedStateHandle managedKeyedHandle = mock(KeyedStateHandle.class)__		when(subtaskState.getRawKeyedState()).thenReturn(managedKeyedHandle)__		KeyedStateHandle managedRawHandle = mock(KeyedStateHandle.class)__		when(subtaskState.getManagedKeyedState()).thenReturn(managedRawHandle)__		_		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointId, new CheckpointMetrics(), subtaskState)__		_		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		_		verify(subtaskState.getLegacyOperatorState().get(0)).discardState()__		verify(subtaskState.getManagedOperatorState().get(0)).discardState()__		verify(subtaskState.getRawOperatorState().get(0)).discardState()__		verify(subtaskState.getManagedKeyedState()).discardState()__		verify(subtaskState.getRawKeyedState()).discardState()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,null,executors,direct,executor,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,subtask,state,subtask,state,mock,subtask,state,class,stream,state,handle,legacy,handle,mock,stream,state,handle,class,chained,state,handle,stream,state,handle,chained,legacy,handle,mock,chained,state,handle,class,when,chained,legacy,handle,get,any,int,then,return,legacy,handle,when,subtask,state,get,legacy,operator,state,then,return,chained,legacy,handle,operator,state,handle,managed,handle,mock,operator,state,handle,class,chained,state,handle,operator,state,handle,chained,managed,handle,mock,chained,state,handle,class,when,chained,managed,handle,get,any,int,then,return,managed,handle,when,subtask,state,get,managed,operator,state,then,return,chained,managed,handle,operator,state,handle,raw,handle,mock,operator,state,handle,class,chained,state,handle,operator,state,handle,chained,raw,handle,mock,chained,state,handle,class,when,chained,raw,handle,get,any,int,then,return,raw,handle,when,subtask,state,get,raw,operator,state,then,return,chained,raw,handle,keyed,state,handle,managed,keyed,handle,mock,keyed,state,handle,class,when,subtask,state,get,raw,keyed,state,then,return,managed,keyed,handle,keyed,state,handle,managed,raw,handle,mock,keyed,state,handle,class,when,subtask,state,get,managed,keyed,state,then,return,managed,raw,handle,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,state,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,subtask,state,get,legacy,operator,state,get,0,discard,state,verify,subtask,state,get,managed,operator,state,get,0,discard,state,verify,subtask,state,get,raw,operator,state,get,0,discard,state,verify,subtask,state,get,managed,keyed,state,discard,state,verify,subtask,state,get,raw,keyed,state,discard,state
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1495287945;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			null,_			Executors.directExecutor())___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()__		_		SubtaskState subtaskState = mock(SubtaskState.class)___		StreamStateHandle legacyHandle = mock(StreamStateHandle.class)__		ChainedStateHandle<StreamStateHandle> chainedLegacyHandle = mock(ChainedStateHandle.class)__		when(chainedLegacyHandle.get(anyInt())).thenReturn(legacyHandle)__		when(subtaskState.getLegacyOperatorState()).thenReturn(chainedLegacyHandle)___		OperatorStateHandle managedHandle = mock(OperatorStateHandle.class)__		ChainedStateHandle<OperatorStateHandle> chainedManagedHandle = mock(ChainedStateHandle.class)__		when(chainedManagedHandle.get(anyInt())).thenReturn(managedHandle)__		when(subtaskState.getManagedOperatorState()).thenReturn(chainedManagedHandle)___		OperatorStateHandle rawHandle = mock(OperatorStateHandle.class)__		ChainedStateHandle<OperatorStateHandle> chainedRawHandle = mock(ChainedStateHandle.class)__		when(chainedRawHandle.get(anyInt())).thenReturn(rawHandle)__		when(subtaskState.getRawOperatorState()).thenReturn(chainedRawHandle)___		KeyedStateHandle managedKeyedHandle = mock(KeyedStateHandle.class)__		when(subtaskState.getRawKeyedState()).thenReturn(managedKeyedHandle)__		KeyedStateHandle managedRawHandle = mock(KeyedStateHandle.class)__		when(subtaskState.getManagedKeyedState()).thenReturn(managedRawHandle)__		_		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointId, new CheckpointMetrics(), subtaskState)__		_		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		_		verify(subtaskState.getLegacyOperatorState().get(0)).discardState()__		verify(subtaskState.getManagedOperatorState().get(0)).discardState()__		verify(subtaskState.getRawOperatorState().get(0)).discardState()__		verify(subtaskState.getManagedKeyedState()).discardState()__		verify(subtaskState.getRawKeyedState()).discardState()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,null,executors,direct,executor,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,subtask,state,subtask,state,mock,subtask,state,class,stream,state,handle,legacy,handle,mock,stream,state,handle,class,chained,state,handle,stream,state,handle,chained,legacy,handle,mock,chained,state,handle,class,when,chained,legacy,handle,get,any,int,then,return,legacy,handle,when,subtask,state,get,legacy,operator,state,then,return,chained,legacy,handle,operator,state,handle,managed,handle,mock,operator,state,handle,class,chained,state,handle,operator,state,handle,chained,managed,handle,mock,chained,state,handle,class,when,chained,managed,handle,get,any,int,then,return,managed,handle,when,subtask,state,get,managed,operator,state,then,return,chained,managed,handle,operator,state,handle,raw,handle,mock,operator,state,handle,class,chained,state,handle,operator,state,handle,chained,raw,handle,mock,chained,state,handle,class,when,chained,raw,handle,get,any,int,then,return,raw,handle,when,subtask,state,get,raw,operator,state,then,return,chained,raw,handle,keyed,state,handle,managed,keyed,handle,mock,keyed,state,handle,class,when,subtask,state,get,raw,keyed,state,then,return,managed,keyed,handle,keyed,state,handle,managed,raw,handle,mock,keyed,state,handle,class,when,subtask,state,get,managed,keyed,state,then,return,managed,raw,handle,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,state,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,subtask,state,get,legacy,operator,state,get,0,discard,state,verify,subtask,state,get,managed,operator,state,get,0,discard,state,verify,subtask,state,get,raw,operator,state,get,0,discard,state,verify,subtask,state,get,managed,keyed,state,discard,state,verify,subtask,state,get,raw,keyed,state,discard,state
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1502801814;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			null,_			Executors.directExecutor())___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()____		StreamStateHandle legacyHandle = mock(StreamStateHandle.class)__		KeyedStateHandle managedKeyedHandle = mock(KeyedStateHandle.class)__		KeyedStateHandle rawKeyedHandle = mock(KeyedStateHandle.class)__		OperatorStateHandle managedOpHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle rawOpHandle = mock(OperatorStateHandle.class)___		final OperatorSubtaskState operatorSubtaskState = spy(new OperatorSubtaskState(_			legacyHandle,_			managedOpHandle,_			rawOpHandle,_			managedKeyedHandle,_			rawKeyedHandle))___		TaskStateSnapshot subtaskState = spy(new TaskStateSnapshot())__		subtaskState.putSubtaskStateByOperatorID(new OperatorID(), operatorSubtaskState)___		when(subtaskState.getSubtaskStateByOperatorID(OperatorID.fromJobVertexID(vertex.getJobvertexId()))).thenReturn(operatorSubtaskState)___		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointId, new CheckpointMetrics(), subtaskState)__		_		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		_		verify(operatorSubtaskState).discardState()__		verify(operatorSubtaskState.getLegacyOperatorState()).discardState()__		verify(operatorSubtaskState.getManagedOperatorState().iterator().next()).discardState()__		verify(operatorSubtaskState.getRawOperatorState().iterator().next()).discardState()__		verify(operatorSubtaskState.getManagedKeyedState().iterator().next()).discardState()__		verify(operatorSubtaskState.getRawKeyedState().iterator().next()).discardState()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,null,executors,direct,executor,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,stream,state,handle,legacy,handle,mock,stream,state,handle,class,keyed,state,handle,managed,keyed,handle,mock,keyed,state,handle,class,keyed,state,handle,raw,keyed,handle,mock,keyed,state,handle,class,operator,state,handle,managed,op,handle,mock,operator,state,handle,class,operator,state,handle,raw,op,handle,mock,operator,state,handle,class,final,operator,subtask,state,operator,subtask,state,spy,new,operator,subtask,state,legacy,handle,managed,op,handle,raw,op,handle,managed,keyed,handle,raw,keyed,handle,task,state,snapshot,subtask,state,spy,new,task,state,snapshot,subtask,state,put,subtask,state,by,operator,id,new,operator,id,operator,subtask,state,when,subtask,state,get,subtask,state,by,operator,id,operator,id,from,job,vertex,id,vertex,get,jobvertex,id,then,return,operator,subtask,state,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,state,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,operator,subtask,state,discard,state,verify,operator,subtask,state,get,legacy,operator,state,discard,state,verify,operator,subtask,state,get,managed,operator,state,iterator,next,discard,state,verify,operator,subtask,state,get,raw,operator,state,iterator,next,discard,state,verify,operator,subtask,state,get,managed,keyed,state,iterator,next,discard,state,verify,operator,subtask,state,get,raw,keyed,state,iterator,next,discard,state
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1502801814;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			null,_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()____		StreamStateHandle legacyHandle = mock(StreamStateHandle.class)__		KeyedStateHandle managedKeyedHandle = mock(KeyedStateHandle.class)__		KeyedStateHandle rawKeyedHandle = mock(KeyedStateHandle.class)__		OperatorStateHandle managedOpHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle rawOpHandle = mock(OperatorStateHandle.class)___		final OperatorSubtaskState operatorSubtaskState = spy(new OperatorSubtaskState(_			legacyHandle,_			managedOpHandle,_			rawOpHandle,_			managedKeyedHandle,_			rawKeyedHandle))___		TaskStateSnapshot subtaskState = spy(new TaskStateSnapshot())__		subtaskState.putSubtaskStateByOperatorID(new OperatorID(), operatorSubtaskState)___		when(subtaskState.getSubtaskStateByOperatorID(OperatorID.fromJobVertexID(vertex.getJobvertexId()))).thenReturn(operatorSubtaskState)___		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointId, new CheckpointMetrics(), subtaskState)___		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		_		verify(operatorSubtaskState).discardState()__		verify(operatorSubtaskState.getLegacyOperatorState()).discardState()__		verify(operatorSubtaskState.getManagedOperatorState().iterator().next()).discardState()__		verify(operatorSubtaskState.getRawOperatorState().iterator().next()).discardState()__		verify(operatorSubtaskState.getManagedKeyedState().iterator().next()).discardState()__		verify(operatorSubtaskState.getRawKeyedState().iterator().next()).discardState()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,null,executors,direct,executor,shared,state,registry,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,stream,state,handle,legacy,handle,mock,stream,state,handle,class,keyed,state,handle,managed,keyed,handle,mock,keyed,state,handle,class,keyed,state,handle,raw,keyed,handle,mock,keyed,state,handle,class,operator,state,handle,managed,op,handle,mock,operator,state,handle,class,operator,state,handle,raw,op,handle,mock,operator,state,handle,class,final,operator,subtask,state,operator,subtask,state,spy,new,operator,subtask,state,legacy,handle,managed,op,handle,raw,op,handle,managed,keyed,handle,raw,keyed,handle,task,state,snapshot,subtask,state,spy,new,task,state,snapshot,subtask,state,put,subtask,state,by,operator,id,new,operator,id,operator,subtask,state,when,subtask,state,get,subtask,state,by,operator,id,operator,id,from,job,vertex,id,vertex,get,jobvertex,id,then,return,operator,subtask,state,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,state,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,operator,subtask,state,discard,state,verify,operator,subtask,state,get,legacy,operator,state,discard,state,verify,operator,subtask,state,get,managed,operator,state,iterator,next,discard,state,verify,operator,subtask,state,get,raw,operator,state,iterator,next,discard,state,verify,operator,subtask,state,get,managed,keyed,state,iterator,next,discard,state,verify,operator,subtask,state,get,raw,keyed,state,iterator,next,discard,state
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1503598628;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			null,_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()___		KeyedStateHandle managedKeyedHandle = mock(KeyedStateHandle.class)__		KeyedStateHandle rawKeyedHandle = mock(KeyedStateHandle.class)__		OperatorStateHandle managedOpHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle rawOpHandle = mock(OperatorStateHandle.class)___		final OperatorSubtaskState operatorSubtaskState = spy(new OperatorSubtaskState(_			managedOpHandle,_			rawOpHandle,_			managedKeyedHandle,_			rawKeyedHandle))___		TaskStateSnapshot subtaskState = spy(new TaskStateSnapshot())__		subtaskState.putSubtaskStateByOperatorID(new OperatorID(), operatorSubtaskState)___		when(subtaskState.getSubtaskStateByOperatorID(OperatorID.fromJobVertexID(vertex.getJobvertexId()))).thenReturn(operatorSubtaskState)___		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointId, new CheckpointMetrics(), subtaskState)___		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		_		verify(operatorSubtaskState).discardState()__		verify(operatorSubtaskState.getManagedOperatorState().iterator().next()).discardState()__		verify(operatorSubtaskState.getRawOperatorState().iterator().next()).discardState()__		verify(operatorSubtaskState.getManagedKeyedState().iterator().next()).discardState()__		verify(operatorSubtaskState.getRawKeyedState().iterator().next()).discardState()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,null,executors,direct,executor,shared,state,registry,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,keyed,state,handle,managed,keyed,handle,mock,keyed,state,handle,class,keyed,state,handle,raw,keyed,handle,mock,keyed,state,handle,class,operator,state,handle,managed,op,handle,mock,operator,state,handle,class,operator,state,handle,raw,op,handle,mock,operator,state,handle,class,final,operator,subtask,state,operator,subtask,state,spy,new,operator,subtask,state,managed,op,handle,raw,op,handle,managed,keyed,handle,raw,keyed,handle,task,state,snapshot,subtask,state,spy,new,task,state,snapshot,subtask,state,put,subtask,state,by,operator,id,new,operator,id,operator,subtask,state,when,subtask,state,get,subtask,state,by,operator,id,operator,id,from,job,vertex,id,vertex,get,jobvertex,id,then,return,operator,subtask,state,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,state,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,operator,subtask,state,discard,state,verify,operator,subtask,state,get,managed,operator,state,iterator,next,discard,state,verify,operator,subtask,state,get,raw,operator,state,iterator,next,discard,state,verify,operator,subtask,state,get,managed,keyed,state,iterator,next,discard,state,verify,operator,subtask,state,get,raw,keyed,state,iterator,next,discard,state
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1516295283;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			null,_			new MemoryStateBackend(),_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()___		KeyedStateHandle managedKeyedHandle = mock(KeyedStateHandle.class)__		KeyedStateHandle rawKeyedHandle = mock(KeyedStateHandle.class)__		OperatorStateHandle managedOpHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle rawOpHandle = mock(OperatorStateHandle.class)___		final OperatorSubtaskState operatorSubtaskState = spy(new OperatorSubtaskState(_			managedOpHandle,_			rawOpHandle,_			managedKeyedHandle,_			rawKeyedHandle))___		TaskStateSnapshot subtaskState = spy(new TaskStateSnapshot())__		subtaskState.putSubtaskStateByOperatorID(new OperatorID(), operatorSubtaskState)___		when(subtaskState.getSubtaskStateByOperatorID(OperatorID.fromJobVertexID(vertex.getJobvertexId()))).thenReturn(operatorSubtaskState)___		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointId, new CheckpointMetrics(), subtaskState)___		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		_		verify(operatorSubtaskState).discardState()__		verify(operatorSubtaskState.getManagedOperatorState().iterator().next()).discardState()__		verify(operatorSubtaskState.getRawOperatorState().iterator().next()).discardState()__		verify(operatorSubtaskState.getManagedKeyedState().iterator().next()).discardState()__		verify(operatorSubtaskState.getRawKeyedState().iterator().next()).discardState()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,null,new,memory,state,backend,executors,direct,executor,shared,state,registry,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,keyed,state,handle,managed,keyed,handle,mock,keyed,state,handle,class,keyed,state,handle,raw,keyed,handle,mock,keyed,state,handle,class,operator,state,handle,managed,op,handle,mock,operator,state,handle,class,operator,state,handle,raw,op,handle,mock,operator,state,handle,class,final,operator,subtask,state,operator,subtask,state,spy,new,operator,subtask,state,managed,op,handle,raw,op,handle,managed,keyed,handle,raw,keyed,handle,task,state,snapshot,subtask,state,spy,new,task,state,snapshot,subtask,state,put,subtask,state,by,operator,id,new,operator,id,operator,subtask,state,when,subtask,state,get,subtask,state,by,operator,id,operator,id,from,job,vertex,id,vertex,get,jobvertex,id,then,return,operator,subtask,state,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,state,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,operator,subtask,state,discard,state,verify,operator,subtask,state,get,managed,operator,state,iterator,next,discard,state,verify,operator,subtask,state,get,raw,operator,state,iterator,next,discard,state,verify,operator,subtask,state,get,managed,keyed,state,iterator,next,discard,state,verify,operator,subtask,state,get,raw,keyed,state,iterator,next,discard,state
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1516295283;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			new MemoryStateBackend(),_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()___		KeyedStateHandle managedKeyedHandle = mock(KeyedStateHandle.class)__		KeyedStateHandle rawKeyedHandle = mock(KeyedStateHandle.class)__		OperatorStateHandle managedOpHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle rawOpHandle = mock(OperatorStateHandle.class)___		final OperatorSubtaskState operatorSubtaskState = spy(new OperatorSubtaskState(_			managedOpHandle,_			rawOpHandle,_			managedKeyedHandle,_			rawKeyedHandle))___		TaskStateSnapshot subtaskState = spy(new TaskStateSnapshot())__		subtaskState.putSubtaskStateByOperatorID(new OperatorID(), operatorSubtaskState)___		when(subtaskState.getSubtaskStateByOperatorID(OperatorID.fromJobVertexID(vertex.getJobvertexId()))).thenReturn(operatorSubtaskState)___		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointId, new CheckpointMetrics(), subtaskState)___		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		_		verify(operatorSubtaskState).discardState()__		verify(operatorSubtaskState.getManagedOperatorState().iterator().next()).discardState()__		verify(operatorSubtaskState.getRawOperatorState().iterator().next()).discardState()__		verify(operatorSubtaskState.getManagedKeyedState().iterator().next()).discardState()__		verify(operatorSubtaskState.getRawKeyedState().iterator().next()).discardState()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,checkpoint,retention,policy,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,new,memory,state,backend,executors,direct,executor,shared,state,registry,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,keyed,state,handle,managed,keyed,handle,mock,keyed,state,handle,class,keyed,state,handle,raw,keyed,handle,mock,keyed,state,handle,class,operator,state,handle,managed,op,handle,mock,operator,state,handle,class,operator,state,handle,raw,op,handle,mock,operator,state,handle,class,final,operator,subtask,state,operator,subtask,state,spy,new,operator,subtask,state,managed,op,handle,raw,op,handle,managed,keyed,handle,raw,keyed,handle,task,state,snapshot,subtask,state,spy,new,task,state,snapshot,subtask,state,put,subtask,state,by,operator,id,new,operator,id,operator,subtask,state,when,subtask,state,get,subtask,state,by,operator,id,operator,id,from,job,vertex,id,vertex,get,jobvertex,id,then,return,operator,subtask,state,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,state,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,operator,subtask,state,discard,state,verify,operator,subtask,state,get,managed,operator,state,iterator,next,discard,state,verify,operator,subtask,state,get,raw,operator,state,iterator,next,discard,state,verify,operator,subtask,state,get,managed,keyed,state,iterator,next,discard,state,verify,operator,subtask,state,get,raw,keyed,state,iterator,next,discard,state
CheckpointCoordinatorFailureTest -> @Test 	public void testFailingCompletedCheckpointStoreAdd() throws Exception;1519568061;Tests that a failure while storing a completed checkpoint in the completed checkpoint store_will properly fail the originating pending checkpoint and clean upt the completed checkpoint.;@Test_	public void testFailingCompletedCheckpointStoreAdd() throws Exception {_		JobID jid = new JobID()___		final ExecutionAttemptID executionAttemptId = new ExecutionAttemptID()__		final ExecutionVertex vertex = CheckpointCoordinatorTest.mockExecutionVertex(executionAttemptId)___		final long triggerTimestamp = 1L___		_		CheckpointCoordinator coord = new CheckpointCoordinator(_			jid,_			600000,_			600000,_			0,_			Integer.MAX_VALUE,_			CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new ExecutionVertex[]{vertex},_			new StandaloneCheckpointIDCounter(),_			new FailingCompletedCheckpointStore(),_			new MemoryStateBackend(),_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		coord.triggerCheckpoint(triggerTimestamp, false)___		assertEquals(1, coord.getNumberOfPendingCheckpoints())___		PendingCheckpoint pendingCheckpoint = coord.getPendingCheckpoints().values().iterator().next()___		assertFalse(pendingCheckpoint.isDiscarded())___		final long checkpointId = coord.getPendingCheckpoints().keySet().iterator().next()___		KeyedStateHandle managedKeyedHandle = mock(KeyedStateHandle.class)__		KeyedStateHandle rawKeyedHandle = mock(KeyedStateHandle.class)__		OperatorStateHandle managedOpHandle = mock(OperatorStreamStateHandle.class)__		OperatorStateHandle rawOpHandle = mock(OperatorStreamStateHandle.class)___		final OperatorSubtaskState operatorSubtaskState = spy(new OperatorSubtaskState(_			managedOpHandle,_			rawOpHandle,_			managedKeyedHandle,_			rawKeyedHandle))___		TaskStateSnapshot subtaskState = spy(new TaskStateSnapshot())__		subtaskState.putSubtaskStateByOperatorID(new OperatorID(), operatorSubtaskState)___		when(subtaskState.getSubtaskStateByOperatorID(OperatorID.fromJobVertexID(vertex.getJobvertexId()))).thenReturn(operatorSubtaskState)___		AcknowledgeCheckpoint acknowledgeMessage = new AcknowledgeCheckpoint(jid, executionAttemptId, checkpointId, new CheckpointMetrics(), subtaskState)___		try {_			coord.receiveAcknowledgeMessage(acknowledgeMessage)__			fail("Expected a checkpoint exception because the completed checkpoint store could not " +_				"store the completed checkpoint.")__		} catch (CheckpointException e) {_			_		}__		_		assertTrue(pendingCheckpoint.isDiscarded())___		_		verify(operatorSubtaskState).discardState()__		verify(operatorSubtaskState.getManagedOperatorState().iterator().next()).discardState()__		verify(operatorSubtaskState.getRawOperatorState().iterator().next()).discardState()__		verify(operatorSubtaskState.getManagedKeyedState().iterator().next()).discardState()__		verify(operatorSubtaskState.getRawKeyedState().iterator().next()).discardState()__	};tests,that,a,failure,while,storing,a,completed,checkpoint,in,the,completed,checkpoint,store,will,properly,fail,the,originating,pending,checkpoint,and,clean,upt,the,completed,checkpoint;test,public,void,test,failing,completed,checkpoint,store,add,throws,exception,job,id,jid,new,job,id,final,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,final,execution,vertex,vertex,checkpoint,coordinator,test,mock,execution,vertex,execution,attempt,id,final,long,trigger,timestamp,1l,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,600000,600000,0,integer,checkpoint,retention,policy,new,execution,vertex,vertex,new,execution,vertex,vertex,new,execution,vertex,vertex,new,standalone,checkpoint,idcounter,new,failing,completed,checkpoint,store,new,memory,state,backend,executors,direct,executor,shared,state,registry,coord,trigger,checkpoint,trigger,timestamp,false,assert,equals,1,coord,get,number,of,pending,checkpoints,pending,checkpoint,pending,checkpoint,coord,get,pending,checkpoints,values,iterator,next,assert,false,pending,checkpoint,is,discarded,final,long,checkpoint,id,coord,get,pending,checkpoints,key,set,iterator,next,keyed,state,handle,managed,keyed,handle,mock,keyed,state,handle,class,keyed,state,handle,raw,keyed,handle,mock,keyed,state,handle,class,operator,state,handle,managed,op,handle,mock,operator,stream,state,handle,class,operator,state,handle,raw,op,handle,mock,operator,stream,state,handle,class,final,operator,subtask,state,operator,subtask,state,spy,new,operator,subtask,state,managed,op,handle,raw,op,handle,managed,keyed,handle,raw,keyed,handle,task,state,snapshot,subtask,state,spy,new,task,state,snapshot,subtask,state,put,subtask,state,by,operator,id,new,operator,id,operator,subtask,state,when,subtask,state,get,subtask,state,by,operator,id,operator,id,from,job,vertex,id,vertex,get,jobvertex,id,then,return,operator,subtask,state,acknowledge,checkpoint,acknowledge,message,new,acknowledge,checkpoint,jid,execution,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,state,try,coord,receive,acknowledge,message,acknowledge,message,fail,expected,a,checkpoint,exception,because,the,completed,checkpoint,store,could,not,store,the,completed,checkpoint,catch,checkpoint,exception,e,assert,true,pending,checkpoint,is,discarded,verify,operator,subtask,state,discard,state,verify,operator,subtask,state,get,managed,operator,state,iterator,next,discard,state,verify,operator,subtask,state,get,raw,operator,state,iterator,next,discard,state,verify,operator,subtask,state,get,managed,keyed,state,iterator,next,discard,state,verify,operator,subtask,state,get,raw,keyed,state,iterator,next,discard,state
