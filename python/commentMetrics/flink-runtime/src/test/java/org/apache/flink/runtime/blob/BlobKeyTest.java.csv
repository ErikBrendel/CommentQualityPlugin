# id;timestamp;commentText;codeText;commentWords;codeWords
BlobKeyTest -> @Test 	public void testStreams() throws Exception;1453730836;Test the serialization/deserialization using input/output streams.;@Test_	public void testStreams() throws Exception {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final ByteArrayOutputStream baos = new ByteArrayOutputStream(20)__		_		k1.writeToOutputStream(baos)__		baos.close()__		_		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		final BlobKey k2 = BlobKey.readFromInputStream(bais)___		assertEquals(k1, k2)__	};test,the,serialization,deserialization,using,input,output,streams;test,public,void,test,streams,throws,exception,final,blob,key,k1,new,blob,key,final,byte,array,output,stream,baos,new,byte,array,output,stream,20,k1,write,to,output,stream,baos,baos,close,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,blob,key,k2,blob,key,read,from,input,stream,bais,assert,equals,k1,k2
BlobKeyTest -> @Test 	public void testStreams() throws Exception;1503041372;Test the serialization/deserialization using input/output streams.;@Test_	public void testStreams() throws Exception {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final ByteArrayOutputStream baos = new ByteArrayOutputStream(20)__		_		k1.writeToOutputStream(baos)__		baos.close()__		_		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		final BlobKey k2 = BlobKey.readFromInputStream(bais)___		assertEquals(k1, k2)__	};test,the,serialization,deserialization,using,input,output,streams;test,public,void,test,streams,throws,exception,final,blob,key,k1,new,blob,key,final,byte,array,output,stream,baos,new,byte,array,output,stream,20,k1,write,to,output,stream,baos,baos,close,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,blob,key,k2,blob,key,read,from,input,stream,bais,assert,equals,k1,k2
BlobKeyTest -> @Test 	public void testStreams() throws Exception;1507212387;Test the serialization/deserialization using input/output streams.;@Test_	public void testStreams() throws Exception {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final ByteArrayOutputStream baos = new ByteArrayOutputStream(20)___		k1.writeToOutputStream(baos)__		baos.close()___		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		final BlobKey k2 = BlobKey.readFromInputStream(bais)___		assertEquals(k1, k2)__	};test,the,serialization,deserialization,using,input,output,streams;test,public,void,test,streams,throws,exception,final,blob,key,k1,new,blob,key,final,byte,array,output,stream,baos,new,byte,array,output,stream,20,k1,write,to,output,stream,baos,baos,close,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,blob,key,k2,blob,key,read,from,input,stream,bais,assert,equals,k1,k2
BlobKeyTest -> private void testStreams(BlobKey.BlobType blobType) throws IOException;1507212387;Test the serialization/deserialization using input/output streams.;private void testStreams(BlobKey.BlobType blobType) throws IOException {_		final BlobKey k1 = BlobKey.createKey(blobType, KEY_ARRAY_1)__		final ByteArrayOutputStream baos = new ByteArrayOutputStream(20)___		k1.writeToOutputStream(baos)__		baos.close()___		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		final BlobKey k2 = BlobKey.readFromInputStream(bais)___		assertEquals(k1, k2)__	};test,the,serialization,deserialization,using,input,output,streams;private,void,test,streams,blob,key,blob,type,blob,type,throws,ioexception,final,blob,key,k1,blob,key,create,key,blob,type,final,byte,array,output,stream,baos,new,byte,array,output,stream,20,k1,write,to,output,stream,baos,baos,close,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,blob,key,k2,blob,key,read,from,input,stream,bais,assert,equals,k1,k2
BlobKeyTest -> private void testStreams(BlobKey.BlobType blobType) throws IOException;1508138617;Test the serialization/deserialization using input/output streams.;private void testStreams(BlobKey.BlobType blobType) throws IOException {_		final BlobKey k1 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_1)__		final ByteArrayOutputStream baos = new ByteArrayOutputStream(20)___		k1.writeToOutputStream(baos)__		baos.close()___		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		final BlobKey k2 = BlobKey.readFromInputStream(bais)___		assertEquals(k1, k2)__	};test,the,serialization,deserialization,using,input,output,streams;private,void,test,streams,blob,key,blob,type,blob,type,throws,ioexception,final,blob,key,k1,blob,key,create,key,blob,type,final,byte,array,output,stream,baos,new,byte,array,output,stream,20,k1,write,to,output,stream,baos,baos,close,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,blob,key,k2,blob,key,read,from,input,stream,bais,assert,equals,k1,k2
BlobKeyTest -> @Test 	public void testEquals();1412605211;Tests the equals method.;@Test_	public void testEquals() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.equals(k2))__		assertFalse(k1.equals(k3))__	};tests,the,equals,method;test,public,void,test,equals,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,equals,k2,assert,false,k1,equals,k3
BlobKeyTest -> @Test 	public void testEquals();1415702894;Tests the equals method.;@Test_	public void testEquals() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.equals(k2))__		assertFalse(k1.equals(k3))__	};tests,the,equals,method;test,public,void,test,equals,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,equals,k2,assert,false,k1,equals,k3
BlobKeyTest -> @Test 	public void testEquals();1418925508;Tests the equals method.;@Test_	public void testEquals() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.equals(k2))__		assertFalse(k1.equals(k3))__	};tests,the,equals,method;test,public,void,test,equals,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,equals,k2,assert,false,k1,equals,k3
BlobKeyTest -> @Test 	public void testEquals();1418925512;Tests the equals method.;@Test_	public void testEquals() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.equals(k2))__		assertFalse(k1.equals(k3))__	};tests,the,equals,method;test,public,void,test,equals,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,equals,k2,assert,false,k1,equals,k3
BlobKeyTest -> @Test 	public void testEquals();1441027768;Tests the equals method.;@Test_	public void testEquals() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.equals(k2))__		assertFalse(k1.equals(k3))__	};tests,the,equals,method;test,public,void,test,equals,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,equals,k2,assert,false,k1,equals,k3
BlobKeyTest -> @Test 	public void testEquals();1453730836;Tests the equals method.;@Test_	public void testEquals() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.equals(k2))__		assertFalse(k1.equals(k3))__	};tests,the,equals,method;test,public,void,test,equals,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,equals,k2,assert,false,k1,equals,k3
BlobKeyTest -> @Test 	public void testEquals();1503041372;Tests the equals method.;@Test_	public void testEquals() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.equals(k2))__		assertFalse(k1.equals(k3))__	};tests,the,equals,method;test,public,void,test,equals,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,equals,k2,assert,false,k1,equals,k3
BlobKeyTest -> @Test 	public void testEquals();1507212387;Tests the equals method.;@Test_	public void testEquals() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.equals(k2))__		assertFalse(k1.equals(k3))__	};tests,the,equals,method;test,public,void,test,equals,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,equals,k2,assert,false,k1,equals,k3
BlobKeyTest -> @Test 	public void testEqualsDifferentBlobType();1507212387;Tests the equals method.;@Test_	public void testEqualsDifferentBlobType() {_		final BlobKey k1 = BlobKey.createKey(TRANSIENT_BLOB, KEY_ARRAY_1)__		final BlobKey k2 = BlobKey.createKey(PERMANENT_BLOB, KEY_ARRAY_1)__		assertFalse(k1.equals(k2))__		assertFalse(k2.equals(k1))__	};tests,the,equals,method;test,public,void,test,equals,different,blob,type,final,blob,key,k1,blob,key,create,key,final,blob,key,k2,blob,key,create,key,assert,false,k1,equals,k2,assert,false,k2,equals,k1
BlobKeyTest -> @Test 	public void testEqualsDifferentBlobType();1508138617;Tests the equals method.;@Test_	public void testEqualsDifferentBlobType() {_		final BlobKey k1 = BlobKey.createKey(TRANSIENT_BLOB, KEY_ARRAY_1, RANDOM_ARRAY_1)__		final BlobKey k2 = BlobKey.createKey(PERMANENT_BLOB, KEY_ARRAY_1, RANDOM_ARRAY_1)__		assertFalse(k1.equals(k2))__		assertFalse(k2.equals(k1))__	};tests,the,equals,method;test,public,void,test,equals,different,blob,type,final,blob,key,k1,blob,key,create,key,final,blob,key,k2,blob,key,create,key,assert,false,k1,equals,k2,assert,false,k2,equals,k1
BlobKeyTest -> static void verifyType(BlobKey.BlobType expected, BlobKey key);1507212387;Verifies that the given <tt>key</tt> is of an expected type.__@param expected the type the key should have_@param key      the key to verify;static void verifyType(BlobKey.BlobType expected, BlobKey key) {_		if (expected == PERMANENT_BLOB) {_			assertThat(key, is(instanceOf(PermanentBlobKey.class)))__		} else {_			assertThat(key, is(instanceOf(TransientBlobKey.class)))__		}_	};verifies,that,the,given,tt,key,tt,is,of,an,expected,type,param,expected,the,type,the,key,should,have,param,key,the,key,to,verify;static,void,verify,type,blob,key,blob,type,expected,blob,key,key,if,expected,assert,that,key,is,instance,of,permanent,blob,key,class,else,assert,that,key,is,instance,of,transient,blob,key,class
BlobKeyTest -> static void verifyType(BlobKey.BlobType expected, BlobKey key);1508138617;Verifies that the given <tt>key</tt> is of an expected type.__@param expected the type the key should have_@param key      the key to verify;static void verifyType(BlobKey.BlobType expected, BlobKey key) {_		if (expected == PERMANENT_BLOB) {_			assertThat(key, is(instanceOf(PermanentBlobKey.class)))__		} else {_			assertThat(key, is(instanceOf(TransientBlobKey.class)))__		}_	};verifies,that,the,given,tt,key,tt,is,of,an,expected,type,param,expected,the,type,the,key,should,have,param,key,the,key,to,verify;static,void,verify,type,blob,key,blob,type,expected,blob,key,key,if,expected,assert,that,key,is,instance,of,permanent,blob,key,class,else,assert,that,key,is,instance,of,transient,blob,key,class
BlobKeyTest -> @Test 	public void testSerialization();1412605211;Tests the serialization/deserialization of BLOB keys using the regular {@link IOReadableWritable} API.;@Test_	public void testSerialization() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2__		try {_			k2 = ServerTestUtils.createCopy(k1)__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		assertEquals(k1, k2)__		assertEquals(k1.hashCode(), k2.hashCode())__		assertEquals(0, k1.compareTo(k2))__	};tests,the,serialization,deserialization,of,blob,keys,using,the,regular,link,ioreadable,writable,api;test,public,void,test,serialization,final,blob,key,k1,new,blob,key,final,blob,key,k2,try,k2,server,test,utils,create,copy,k1,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,assert,equals,k1,k2,assert,equals,k1,hash,code,k2,hash,code,assert,equals,0,k1,compare,to,k2
BlobKeyTest -> @Test 	public void testSerialization();1415702894;Tests the serialization/deserialization of BLOB keys using the regular {@link org.apache.flink.core.io.IOReadableWritable} API.;@Test_	public void testSerialization() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2__		try {_			k2 = ServerTestUtils.createCopy(k1)__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		assertEquals(k1, k2)__		assertEquals(k1.hashCode(), k2.hashCode())__		assertEquals(0, k1.compareTo(k2))__	};tests,the,serialization,deserialization,of,blob,keys,using,the,regular,link,org,apache,flink,core,io,ioreadable,writable,api;test,public,void,test,serialization,final,blob,key,k1,new,blob,key,final,blob,key,k2,try,k2,server,test,utils,create,copy,k1,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,assert,equals,k1,k2,assert,equals,k1,hash,code,k2,hash,code,assert,equals,0,k1,compare,to,k2
BlobKeyTest -> @Test 	public void testSerialization();1418925508;Tests the serialization/deserialization of BLOB keys;@Test_	public void testSerialization() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2__		try {_			k2 = CommonTestUtils.createCopySerializable(k1)__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		assertEquals(k1, k2)__		assertEquals(k1.hashCode(), k2.hashCode())__		assertEquals(0, k1.compareTo(k2))__	};tests,the,serialization,deserialization,of,blob,keys;test,public,void,test,serialization,final,blob,key,k1,new,blob,key,final,blob,key,k2,try,k2,common,test,utils,create,copy,serializable,k1,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,assert,equals,k1,k2,assert,equals,k1,hash,code,k2,hash,code,assert,equals,0,k1,compare,to,k2
BlobKeyTest -> @Test 	public void testSerialization();1418925512;Tests the serialization/deserialization of BLOB keys;@Test_	public void testSerialization() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2__		try {_			k2 = CommonTestUtils.createCopySerializable(k1)__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		assertEquals(k1, k2)__		assertEquals(k1.hashCode(), k2.hashCode())__		assertEquals(0, k1.compareTo(k2))__	};tests,the,serialization,deserialization,of,blob,keys;test,public,void,test,serialization,final,blob,key,k1,new,blob,key,final,blob,key,k2,try,k2,common,test,utils,create,copy,serializable,k1,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,assert,equals,k1,k2,assert,equals,k1,hash,code,k2,hash,code,assert,equals,0,k1,compare,to,k2
BlobKeyTest -> @Test 	public void testSerialization();1441027768;Tests the serialization/deserialization of BLOB keys;@Test_	public void testSerialization() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2__		try {_			k2 = CommonTestUtils.createCopySerializable(k1)__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		assertEquals(k1, k2)__		assertEquals(k1.hashCode(), k2.hashCode())__		assertEquals(0, k1.compareTo(k2))__	};tests,the,serialization,deserialization,of,blob,keys;test,public,void,test,serialization,final,blob,key,k1,new,blob,key,final,blob,key,k2,try,k2,common,test,utils,create,copy,serializable,k1,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,assert,equals,k1,k2,assert,equals,k1,hash,code,k2,hash,code,assert,equals,0,k1,compare,to,k2
BlobKeyTest -> @Test 	public void testSerialization() throws Exception;1453730836;Tests the serialization/deserialization of BLOB keys;@Test_	public void testSerialization() throws Exception {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = CommonTestUtils.createCopySerializable(k1)__		assertEquals(k1, k2)__		assertEquals(k1.hashCode(), k2.hashCode())__		assertEquals(0, k1.compareTo(k2))__	};tests,the,serialization,deserialization,of,blob,keys;test,public,void,test,serialization,throws,exception,final,blob,key,k1,new,blob,key,final,blob,key,k2,common,test,utils,create,copy,serializable,k1,assert,equals,k1,k2,assert,equals,k1,hash,code,k2,hash,code,assert,equals,0,k1,compare,to,k2
BlobKeyTest -> @Test 	public void testSerialization() throws Exception;1503041372;Tests the serialization/deserialization of BLOB keys;@Test_	public void testSerialization() throws Exception {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = CommonTestUtils.createCopySerializable(k1)__		assertEquals(k1, k2)__		assertEquals(k1.hashCode(), k2.hashCode())__		assertEquals(0, k1.compareTo(k2))__	};tests,the,serialization,deserialization,of,blob,keys;test,public,void,test,serialization,throws,exception,final,blob,key,k1,new,blob,key,final,blob,key,k2,common,test,utils,create,copy,serializable,k1,assert,equals,k1,k2,assert,equals,k1,hash,code,k2,hash,code,assert,equals,0,k1,compare,to,k2
BlobKeyTest -> @Test 	public void testSerialization() throws Exception;1507212387;Tests the serialization/deserialization of BLOB keys.;@Test_	public void testSerialization() throws Exception {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = CommonTestUtils.createCopySerializable(k1)__		assertEquals(k1, k2)__		assertEquals(k1.hashCode(), k2.hashCode())__		assertEquals(0, k1.compareTo(k2))__	};tests,the,serialization,deserialization,of,blob,keys;test,public,void,test,serialization,throws,exception,final,blob,key,k1,new,blob,key,final,blob,key,k2,common,test,utils,create,copy,serializable,k1,assert,equals,k1,k2,assert,equals,k1,hash,code,k2,hash,code,assert,equals,0,k1,compare,to,k2
BlobKeyTest -> private void testSerialization(BlobKey.BlobType blobType) throws Exception;1507212387;Tests the serialization/deserialization of BLOB keys.;private void testSerialization(BlobKey.BlobType blobType) throws Exception {_		final BlobKey k1 = BlobKey.createKey(blobType, KEY_ARRAY_1)__		final BlobKey k2 = CommonTestUtils.createCopySerializable(k1)__		assertEquals(k1, k2)__		assertEquals(k1.hashCode(), k2.hashCode())__		assertEquals(0, k1.compareTo(k2))__	};tests,the,serialization,deserialization,of,blob,keys;private,void,test,serialization,blob,key,blob,type,blob,type,throws,exception,final,blob,key,k1,blob,key,create,key,blob,type,final,blob,key,k2,common,test,utils,create,copy,serializable,k1,assert,equals,k1,k2,assert,equals,k1,hash,code,k2,hash,code,assert,equals,0,k1,compare,to,k2
BlobKeyTest -> private void testSerialization(BlobKey.BlobType blobType) throws Exception;1508138617;Tests the serialization/deserialization of BLOB keys.;private void testSerialization(BlobKey.BlobType blobType) throws Exception {_		final BlobKey k1 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_1)__		final BlobKey k2 = CommonTestUtils.createCopySerializable(k1)__		assertEquals(k1, k2)__		assertEquals(k1.hashCode(), k2.hashCode())__		assertEquals(0, k1.compareTo(k2))__	};tests,the,serialization,deserialization,of,blob,keys;private,void,test,serialization,blob,key,blob,type,blob,type,throws,exception,final,blob,key,k1,blob,key,create,key,blob,type,final,blob,key,k2,common,test,utils,create,copy,serializable,k1,assert,equals,k1,k2,assert,equals,k1,hash,code,k2,hash,code,assert,equals,0,k1,compare,to,k2
BlobKeyTest -> private void testCompares(BlobKey.BlobType blobType);1507212387;Tests the compares method.;private void testCompares(BlobKey.BlobType blobType) {_		final BlobKey k1 = BlobKey.createKey(blobType, KEY_ARRAY_1)__		final BlobKey k2 = BlobKey.createKey(blobType, KEY_ARRAY_1)__		final BlobKey k3 = BlobKey.createKey(blobType, KEY_ARRAY_2)__		assertThat(k1.compareTo(k2), is(0))__		assertThat(k2.compareTo(k1), is(0))__		assertThat(k1.compareTo(k3), lessThan(0))__		assertThat(k3.compareTo(k1), greaterThan(0))__	};tests,the,compares,method;private,void,test,compares,blob,key,blob,type,blob,type,final,blob,key,k1,blob,key,create,key,blob,type,final,blob,key,k2,blob,key,create,key,blob,type,final,blob,key,k3,blob,key,create,key,blob,type,assert,that,k1,compare,to,k2,is,0,assert,that,k2,compare,to,k1,is,0,assert,that,k1,compare,to,k3,less,than,0,assert,that,k3,compare,to,k1,greater,than,0
BlobKeyTest -> private void testCompares(BlobKey.BlobType blobType);1508138617;Tests the compares method.;private void testCompares(BlobKey.BlobType blobType) {_		final BlobKey k1 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_1)__		final BlobKey k2 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_1)__		final BlobKey k3 = BlobKey.createKey(blobType, KEY_ARRAY_2, RANDOM_ARRAY_1)__		final BlobKey k4 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_2)__		assertThat(k1.compareTo(k2), is(0))__		assertThat(k2.compareTo(k1), is(0))__		assertThat(k1.compareTo(k3), lessThan(0))__		assertThat(k1.compareTo(k4), lessThan(0))__		assertThat(k3.compareTo(k1), greaterThan(0))__		assertThat(k4.compareTo(k1), greaterThan(0))__	};tests,the,compares,method;private,void,test,compares,blob,key,blob,type,blob,type,final,blob,key,k1,blob,key,create,key,blob,type,final,blob,key,k2,blob,key,create,key,blob,type,final,blob,key,k3,blob,key,create,key,blob,type,final,blob,key,k4,blob,key,create,key,blob,type,assert,that,k1,compare,to,k2,is,0,assert,that,k2,compare,to,k1,is,0,assert,that,k1,compare,to,k3,less,than,0,assert,that,k1,compare,to,k4,less,than,0,assert,that,k3,compare,to,k1,greater,than,0,assert,that,k4,compare,to,k1,greater,than,0
BlobKeyTest -> @Test 	public void testCompares();1412605211;Tests the compares method.;@Test_	public void testCompares() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.compareTo(k2) == 0)__		assertTrue(k1.compareTo(k3) < 0)__	};tests,the,compares,method;test,public,void,test,compares,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,compare,to,k2,0,assert,true,k1,compare,to,k3,0
BlobKeyTest -> @Test 	public void testCompares();1415702894;Tests the compares method.;@Test_	public void testCompares() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.compareTo(k2) == 0)__		assertTrue(k1.compareTo(k3) < 0)__	};tests,the,compares,method;test,public,void,test,compares,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,compare,to,k2,0,assert,true,k1,compare,to,k3,0
BlobKeyTest -> @Test 	public void testCompares();1418925508;Tests the compares method.;@Test_	public void testCompares() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.compareTo(k2) == 0)__		assertTrue(k1.compareTo(k3) < 0)__	};tests,the,compares,method;test,public,void,test,compares,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,compare,to,k2,0,assert,true,k1,compare,to,k3,0
BlobKeyTest -> @Test 	public void testCompares();1418925512;Tests the compares method.;@Test_	public void testCompares() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.compareTo(k2) == 0)__		assertTrue(k1.compareTo(k3) < 0)__	};tests,the,compares,method;test,public,void,test,compares,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,compare,to,k2,0,assert,true,k1,compare,to,k3,0
BlobKeyTest -> @Test 	public void testCompares();1441027768;Tests the compares method.;@Test_	public void testCompares() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.compareTo(k2) == 0)__		assertTrue(k1.compareTo(k3) < 0)__	};tests,the,compares,method;test,public,void,test,compares,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,compare,to,k2,0,assert,true,k1,compare,to,k3,0
BlobKeyTest -> @Test 	public void testCompares();1453730836;Tests the compares method.;@Test_	public void testCompares() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.compareTo(k2) == 0)__		assertTrue(k1.compareTo(k3) < 0)__	};tests,the,compares,method;test,public,void,test,compares,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,compare,to,k2,0,assert,true,k1,compare,to,k3,0
BlobKeyTest -> @Test 	public void testCompares();1503041372;Tests the compares method.;@Test_	public void testCompares() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.compareTo(k2) == 0)__		assertTrue(k1.compareTo(k3) < 0)__	};tests,the,compares,method;test,public,void,test,compares,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,compare,to,k2,0,assert,true,k1,compare,to,k3,0
BlobKeyTest -> @Test 	public void testCompares();1507212387;Tests the compares method.;@Test_	public void testCompares() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k2 = new BlobKey(KEY_ARRAY_1)__		final BlobKey k3 = new BlobKey(KEY_ARRAY_2)__		assertTrue(k1.compareTo(k2) == 0)__		assertTrue(k1.compareTo(k3) < 0)__	};tests,the,compares,method;test,public,void,test,compares,final,blob,key,k1,new,blob,key,final,blob,key,k2,new,blob,key,final,blob,key,k3,new,blob,key,assert,true,k1,compare,to,k2,0,assert,true,k1,compare,to,k3,0
BlobKeyTest -> private void testEquals(BlobKey.BlobType blobType);1507212387;Tests the equals method.;private void testEquals(BlobKey.BlobType blobType) {_		final BlobKey k1 = BlobKey.createKey(blobType, KEY_ARRAY_1)__		final BlobKey k2 = BlobKey.createKey(blobType, KEY_ARRAY_1)__		final BlobKey k3 = BlobKey.createKey(blobType, KEY_ARRAY_2)__		assertTrue(k1.equals(k2))__		assertTrue(k2.equals(k1))__		assertFalse(k1.equals(k3))__		assertFalse(k3.equals(k1))__	};tests,the,equals,method;private,void,test,equals,blob,key,blob,type,blob,type,final,blob,key,k1,blob,key,create,key,blob,type,final,blob,key,k2,blob,key,create,key,blob,type,final,blob,key,k3,blob,key,create,key,blob,type,assert,true,k1,equals,k2,assert,true,k2,equals,k1,assert,false,k1,equals,k3,assert,false,k3,equals,k1
BlobKeyTest -> private void testEquals(BlobKey.BlobType blobType);1508138617;Tests the {@link BlobKey#equals(Object)} and {@link BlobKey#hashCode()} methods.;private void testEquals(BlobKey.BlobType blobType) {_		final BlobKey k1 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_1)__		final BlobKey k2 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_1)__		final BlobKey k3 = BlobKey.createKey(blobType, KEY_ARRAY_2, RANDOM_ARRAY_1)__		final BlobKey k4 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_2)__		assertTrue(k1.equals(k2))__		assertTrue(k2.equals(k1))__		assertEquals(k1.hashCode(), k2.hashCode())__		assertFalse(k1.equals(k3))__		assertFalse(k3.equals(k1))__		assertFalse(k1.equals(k4))__		assertFalse(k4.equals(k1))___		_		assertFalse(k1.equals(null))__		_		assertFalse(k1.equals(this))__	};tests,the,link,blob,key,equals,object,and,link,blob,key,hash,code,methods;private,void,test,equals,blob,key,blob,type,blob,type,final,blob,key,k1,blob,key,create,key,blob,type,final,blob,key,k2,blob,key,create,key,blob,type,final,blob,key,k3,blob,key,create,key,blob,type,final,blob,key,k4,blob,key,create,key,blob,type,assert,true,k1,equals,k2,assert,true,k2,equals,k1,assert,equals,k1,hash,code,k2,hash,code,assert,false,k1,equals,k3,assert,false,k3,equals,k1,assert,false,k1,equals,k4,assert,false,k4,equals,k1,assert,false,k1,equals,null,assert,false,k1,equals,this
BlobKeyTest -> @Test 	public void testStreams();1412605211;Test the serialization/deserialization using input/output streams.;@Test_	public void testStreams() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final ByteArrayOutputStream baos = new ByteArrayOutputStream(20)__		try {_			k1.writeToOutputStream(baos)__			baos.close()__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		final ByteArrayInputStream bais = new ByteArrayInputStream(_			baos.toByteArray())__		final BlobKey k2__		try {_			k2 = BlobKey.readFromInputStream(bais)__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		assertEquals(k1, k2)__	};test,the,serialization,deserialization,using,input,output,streams;test,public,void,test,streams,final,blob,key,k1,new,blob,key,final,byte,array,output,stream,baos,new,byte,array,output,stream,20,try,k1,write,to,output,stream,baos,baos,close,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,blob,key,k2,try,k2,blob,key,read,from,input,stream,bais,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,assert,equals,k1,k2
BlobKeyTest -> @Test 	public void testStreams();1415702894;Test the serialization/deserialization using input/output streams.;@Test_	public void testStreams() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final ByteArrayOutputStream baos = new ByteArrayOutputStream(20)__		try {_			k1.writeToOutputStream(baos)__			baos.close()__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		final ByteArrayInputStream bais = new ByteArrayInputStream(_			baos.toByteArray())__		final BlobKey k2__		try {_			k2 = BlobKey.readFromInputStream(bais)__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		assertEquals(k1, k2)__	};test,the,serialization,deserialization,using,input,output,streams;test,public,void,test,streams,final,blob,key,k1,new,blob,key,final,byte,array,output,stream,baos,new,byte,array,output,stream,20,try,k1,write,to,output,stream,baos,baos,close,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,blob,key,k2,try,k2,blob,key,read,from,input,stream,bais,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,assert,equals,k1,k2
BlobKeyTest -> @Test 	public void testStreams();1418925508;Test the serialization/deserialization using input/output streams.;@Test_	public void testStreams() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final ByteArrayOutputStream baos = new ByteArrayOutputStream(20)__		try {_			k1.writeToOutputStream(baos)__			baos.close()__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		final ByteArrayInputStream bais = new ByteArrayInputStream(_			baos.toByteArray())__		final BlobKey k2__		try {_			k2 = BlobKey.readFromInputStream(bais)__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		assertEquals(k1, k2)__	};test,the,serialization,deserialization,using,input,output,streams;test,public,void,test,streams,final,blob,key,k1,new,blob,key,final,byte,array,output,stream,baos,new,byte,array,output,stream,20,try,k1,write,to,output,stream,baos,baos,close,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,blob,key,k2,try,k2,blob,key,read,from,input,stream,bais,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,assert,equals,k1,k2
BlobKeyTest -> @Test 	public void testStreams();1418925512;Test the serialization/deserialization using input/output streams.;@Test_	public void testStreams() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final ByteArrayOutputStream baos = new ByteArrayOutputStream(20)__		try {_			k1.writeToOutputStream(baos)__			baos.close()__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		final ByteArrayInputStream bais = new ByteArrayInputStream(_			baos.toByteArray())__		final BlobKey k2__		try {_			k2 = BlobKey.readFromInputStream(bais)__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		assertEquals(k1, k2)__	};test,the,serialization,deserialization,using,input,output,streams;test,public,void,test,streams,final,blob,key,k1,new,blob,key,final,byte,array,output,stream,baos,new,byte,array,output,stream,20,try,k1,write,to,output,stream,baos,baos,close,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,blob,key,k2,try,k2,blob,key,read,from,input,stream,bais,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,assert,equals,k1,k2
BlobKeyTest -> @Test 	public void testStreams();1441027768;Test the serialization/deserialization using input/output streams.;@Test_	public void testStreams() {_		final BlobKey k1 = new BlobKey(KEY_ARRAY_1)__		final ByteArrayOutputStream baos = new ByteArrayOutputStream(20)__		try {_			k1.writeToOutputStream(baos)__			baos.close()__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		final ByteArrayInputStream bais = new ByteArrayInputStream(_			baos.toByteArray())__		final BlobKey k2__		try {_			k2 = BlobKey.readFromInputStream(bais)__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__			return__		}_		assertEquals(k1, k2)__	};test,the,serialization,deserialization,using,input,output,streams;test,public,void,test,streams,final,blob,key,k1,new,blob,key,final,byte,array,output,stream,baos,new,byte,array,output,stream,20,try,k1,write,to,output,stream,baos,baos,close,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,blob,key,k2,try,k2,blob,key,read,from,input,stream,bais,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,return,assert,equals,k1,k2
