# id;timestamp;commentText;codeText;commentWords;codeWords
BlobCachePutTest -> private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1507212387;Uploads a byte array to a server which cannot create incoming files via the {@link_BlobCacheService}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			try {_				put(cache, jobId, data, blobType)__			} finally {_				File storageDir = tempFileDir.getParentFile()__				_				assertArrayEquals(new String[] {"incoming"}, storageDir.list())__			}_		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,incoming,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,incoming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,try,put,cache,job,id,data,blob,type,finally,file,storage,dir,temp,file,dir,get,parent,file,assert,array,equals,new,string,incoming,storage,dir,list,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1508138617;Uploads a byte array to a server which cannot create incoming files via the {@link_BlobCacheService}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			try {_				put(cache, jobId, data, blobType)__			} finally {_				File storageDir = tempFileDir.getParentFile()__				_				assertArrayEquals(new String[] {"incoming"}, storageDir.list())__			}_		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,incoming,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,incoming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,try,put,cache,job,id,data,blob,type,finally,file,storage,dir,temp,file,dir,get,parent,file,assert,array,equals,new,string,incoming,storage,dir,list,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1508578816;Uploads a byte array to a server which cannot create incoming files via the {@link_BlobCacheService}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			try {_				put(cache, jobId, data, blobType)__			} finally {_				File storageDir = tempFileDir.getParentFile()__				_				assertArrayEquals(new String[] {"incoming"}, storageDir.list())__			}_		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,incoming,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,incoming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,try,put,cache,job,id,data,blob,type,finally,file,storage,dir,temp,file,dir,get,parent,file,assert,array,equals,new,string,incoming,storage,dir,list,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1517915730;Uploads a byte array to a server which cannot create incoming files via the {@link_BlobCacheService}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			try {_				put(cache, jobId, data, blobType)__			} finally {_				File storageDir = tempFileDir.getParentFile()__				_				assertArrayEquals(new String[] {"incoming"}, storageDir.list())__			}_		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,incoming,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,incoming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,try,put,cache,job,id,data,blob,type,finally,file,storage,dir,temp,file,dir,get,parent,file,assert,array,equals,new,string,incoming,storage,dir,list,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1525420604;Uploads a byte array to a server which cannot create incoming files via the {@link_BlobCacheService}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsIncoming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			try {_				put(cache, jobId, data, blobType)__			} finally {_				File storageDir = tempFileDir.getParentFile()__				_				assertArrayEquals(new String[] {"incoming"}, storageDir.list())__			}_		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,incoming,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,incoming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,try,put,cache,job,id,data,blob,type,finally,file,storage,dir,temp,file,dir,get,parent,file,assert,array,equals,new,string,incoming,storage,dir,list,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1507212387;Uploads two byte arrays for different jobs into the server via the {@link BlobCacheService}._File transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(cache, jobId1, data, blobType)__			assertNotNull(key1a)__			verifyType(blobType, key1a)___			BlobKey key1b = put(cache, jobId1, data2, blobType)__			assertNotNull(key1b)__			verifyType(blobType, key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(cache, jobId2, data, blobType)__			assertNotNull(key2a)__			assertEquals(key1a, key2a)___			BlobKey key2b = put(cache, jobId2, data2, blobType)__			assertNotNull(key2b)__			assertEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			if (blobType == TRANSIENT_BLOB) {_				verifyDeletedEventually(server, jobId1, key1a)__				verifyDeletedEventually(server, jobId1, key1b)__				verifyDeletedEventually(server, jobId2, key2a)__				verifyDeletedEventually(server, jobId2, key2b)___				_				verifyContents(cache, jobId1, key1a, data)__				verifyContents(cache, jobId1, key1b, data2)__				verifyContents(cache, jobId2, key2a, data)__				verifyContents(cache, jobId2, key2b, data2)__			} else {_				_				verifyContents(server, jobId1, key1a, data)__				verifyContents(server, jobId1, key1b, data2)__				verifyContents(server, jobId2, key2a, data)__				verifyContents(server, jobId2, key2b, data2)__			}_		}_	};uploads,two,byte,arrays,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,cache,job,id1,data,blob,type,assert,not,null,key1a,verify,type,blob,type,key1a,blob,key,key1b,put,cache,job,id1,data2,blob,type,assert,not,null,key1b,verify,type,blob,type,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,cache,job,id2,data,blob,type,assert,not,null,key2a,assert,equals,key1a,key2a,blob,key,key2b,put,cache,job,id2,data2,blob,type,assert,not,null,key2b,assert,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,if,blob,type,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,else,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobCachePutTest -> private void testPutBufferSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1508138617;Uploads two byte arrays for different jobs into the server via the {@link BlobCacheService}._File transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(cache, jobId1, data, blobType)__			assertNotNull(key1a)__			verifyType(blobType, key1a)__			_			BlobKey key1a2 = put(cache, jobId1, data, blobType)__			assertNotNull(key1a2)__			verifyType(blobType, key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			BlobKey key1b = put(cache, jobId1, data2, blobType)__			assertNotNull(key1b)__			verifyType(blobType, key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(cache, jobId2, data, blobType)__			assertNotNull(key2a)__			verifyType(blobType, key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			BlobKey key2b = put(cache, jobId2, data2, blobType)__			assertNotNull(key2b)__			verifyType(blobType, key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			if (blobType == TRANSIENT_BLOB) {_				verifyDeletedEventually(server, jobId1, key1a)__				verifyDeletedEventually(server, jobId1, key1b)__				verifyDeletedEventually(server, jobId2, key2a)__				verifyDeletedEventually(server, jobId2, key2b)___				_				verifyContents(cache, jobId1, key1a, data)__				verifyContents(cache, jobId1, key1b, data2)__				verifyContents(cache, jobId2, key2a, data)__				verifyContents(cache, jobId2, key2b, data2)__			} else {_				_				verifyContents(server, jobId1, key1a, data)__				verifyContents(server, jobId1, key1b, data2)__				verifyContents(server, jobId2, key2a, data)__				verifyContents(server, jobId2, key2b, data2)__			}_		}_	};uploads,two,byte,arrays,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,cache,job,id1,data,blob,type,assert,not,null,key1a,verify,type,blob,type,key1a,blob,key,key1a2,put,cache,job,id1,data,blob,type,assert,not,null,key1a2,verify,type,blob,type,key1a2,verify,key,different,hash,equals,key1a,key1a2,blob,key,key1b,put,cache,job,id1,data2,blob,type,assert,not,null,key1b,verify,type,blob,type,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,cache,job,id2,data,blob,type,assert,not,null,key2a,verify,type,blob,type,key2a,verify,key,different,hash,equals,key1a,key2a,blob,key,key2b,put,cache,job,id2,data2,blob,type,assert,not,null,key2b,verify,type,blob,type,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,if,blob,type,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,else,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobCachePutTest -> private void testPutBufferSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1508578816;Uploads two byte arrays for different jobs into the server via the {@link BlobCacheService}._File transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(cache, jobId1, data, blobType)__			assertNotNull(key1a)__			verifyType(blobType, key1a)__			_			BlobKey key1a2 = put(cache, jobId1, data, blobType)__			assertNotNull(key1a2)__			verifyType(blobType, key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			BlobKey key1b = put(cache, jobId1, data2, blobType)__			assertNotNull(key1b)__			verifyType(blobType, key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(cache, jobId2, data, blobType)__			assertNotNull(key2a)__			verifyType(blobType, key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			BlobKey key2b = put(cache, jobId2, data2, blobType)__			assertNotNull(key2b)__			verifyType(blobType, key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			if (blobType == TRANSIENT_BLOB) {_				verifyDeletedEventually(server, jobId1, key1a)__				verifyDeletedEventually(server, jobId1, key1b)__				verifyDeletedEventually(server, jobId2, key2a)__				verifyDeletedEventually(server, jobId2, key2b)___				_				verifyContents(cache, jobId1, key1a, data)__				verifyContents(cache, jobId1, key1b, data2)__				verifyContents(cache, jobId2, key2a, data)__				verifyContents(cache, jobId2, key2b, data2)__			} else {_				_				verifyContents(server, jobId1, key1a, data)__				verifyContents(server, jobId1, key1b, data2)__				verifyContents(server, jobId2, key2a, data)__				verifyContents(server, jobId2, key2b, data2)__			}_		}_	};uploads,two,byte,arrays,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,cache,job,id1,data,blob,type,assert,not,null,key1a,verify,type,blob,type,key1a,blob,key,key1a2,put,cache,job,id1,data,blob,type,assert,not,null,key1a2,verify,type,blob,type,key1a2,verify,key,different,hash,equals,key1a,key1a2,blob,key,key1b,put,cache,job,id1,data2,blob,type,assert,not,null,key1b,verify,type,blob,type,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,cache,job,id2,data,blob,type,assert,not,null,key2a,verify,type,blob,type,key2a,verify,key,different,hash,equals,key1a,key2a,blob,key,key2b,put,cache,job,id2,data2,blob,type,assert,not,null,key2b,verify,type,blob,type,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,if,blob,type,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,else,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobCachePutTest -> private void testPutBufferSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1517915730;Uploads two byte arrays for different jobs into the server via the {@link BlobCacheService}._File transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(cache, jobId1, data, blobType)__			assertNotNull(key1a)__			verifyType(blobType, key1a)__			_			BlobKey key1a2 = put(cache, jobId1, data, blobType)__			assertNotNull(key1a2)__			verifyType(blobType, key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			BlobKey key1b = put(cache, jobId1, data2, blobType)__			assertNotNull(key1b)__			verifyType(blobType, key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(cache, jobId2, data, blobType)__			assertNotNull(key2a)__			verifyType(blobType, key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			BlobKey key2b = put(cache, jobId2, data2, blobType)__			assertNotNull(key2b)__			verifyType(blobType, key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			if (blobType == TRANSIENT_BLOB) {_				verifyDeletedEventually(server, jobId1, key1a)__				verifyDeletedEventually(server, jobId1, key1b)__				verifyDeletedEventually(server, jobId2, key2a)__				verifyDeletedEventually(server, jobId2, key2b)___				_				verifyContents(cache, jobId1, key1a, data)__				verifyContents(cache, jobId1, key1b, data2)__				verifyContents(cache, jobId2, key2a, data)__				verifyContents(cache, jobId2, key2b, data2)__			} else {_				_				verifyContents(server, jobId1, key1a, data)__				verifyContents(server, jobId1, key1b, data2)__				verifyContents(server, jobId2, key2a, data)__				verifyContents(server, jobId2, key2b, data2)__			}_		}_	};uploads,two,byte,arrays,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,cache,job,id1,data,blob,type,assert,not,null,key1a,verify,type,blob,type,key1a,blob,key,key1a2,put,cache,job,id1,data,blob,type,assert,not,null,key1a2,verify,type,blob,type,key1a2,verify,key,different,hash,equals,key1a,key1a2,blob,key,key1b,put,cache,job,id1,data2,blob,type,assert,not,null,key1b,verify,type,blob,type,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,cache,job,id2,data,blob,type,assert,not,null,key2a,verify,type,blob,type,key2a,verify,key,different,hash,equals,key1a,key2a,blob,key,key2b,put,cache,job,id2,data2,blob,type,assert,not,null,key2b,verify,type,blob,type,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,if,blob,type,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,else,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobCachePutTest -> private void testPutBufferSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1525420604;Uploads two byte arrays for different jobs into the server via the {@link BlobCacheService}._File transfers should be successful.__@param jobId1_first job id_@param jobId2_second job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2, BlobKey.BlobType blobType)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			BlobKey key1a = put(cache, jobId1, data, blobType)__			assertNotNull(key1a)__			verifyType(blobType, key1a)__			_			BlobKey key1a2 = put(cache, jobId1, data, blobType)__			assertNotNull(key1a2)__			verifyType(blobType, key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			BlobKey key1b = put(cache, jobId1, data2, blobType)__			assertNotNull(key1b)__			verifyType(blobType, key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			BlobKey key2a = put(cache, jobId2, data, blobType)__			assertNotNull(key2a)__			verifyType(blobType, key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			BlobKey key2b = put(cache, jobId2, data2, blobType)__			assertNotNull(key2b)__			verifyType(blobType, key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			if (blobType == TRANSIENT_BLOB) {_				verifyDeletedEventually(server, jobId1, key1a)__				verifyDeletedEventually(server, jobId1, key1b)__				verifyDeletedEventually(server, jobId2, key2a)__				verifyDeletedEventually(server, jobId2, key2b)___				_				verifyContents(cache, jobId1, key1a, data)__				verifyContents(cache, jobId1, key1b, data2)__				verifyContents(cache, jobId2, key2a, data)__				verifyContents(cache, jobId2, key2b, data2)__			} else {_				_				verifyContents(server, jobId1, key1a, data)__				verifyContents(server, jobId1, key1b, data2)__				verifyContents(server, jobId2, key2a, data)__				verifyContents(server, jobId2, key2b, data2)__			}_		}_	};uploads,two,byte,arrays,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,param,job,id1,first,job,id,param,job,id2,second,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,blob,key,key1a,put,cache,job,id1,data,blob,type,assert,not,null,key1a,verify,type,blob,type,key1a,blob,key,key1a2,put,cache,job,id1,data,blob,type,assert,not,null,key1a2,verify,type,blob,type,key1a2,verify,key,different,hash,equals,key1a,key1a2,blob,key,key1b,put,cache,job,id1,data2,blob,type,assert,not,null,key1b,verify,type,blob,type,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,blob,key,key2a,put,cache,job,id2,data,blob,type,assert,not,null,key2a,verify,type,blob,type,key2a,verify,key,different,hash,equals,key1a,key2a,blob,key,key2b,put,cache,job,id2,data2,blob,type,assert,not,null,key2b,verify,type,blob,type,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,if,blob,type,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,else,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2
BlobCachePutTest -> private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1507212387;Uploads a byte array to a server which cannot create any files via the {@link_BlobCacheService}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			put(cache, jobId, data, blobType)___		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,any,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,put,cache,job,id,data,blob,type,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1508138617;Uploads a byte array to a server which cannot create any files via the {@link_BlobCacheService}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			put(cache, jobId, data, blobType)___		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,any,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,put,cache,job,id,data,blob,type,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1508578816;Uploads a byte array to a server which cannot create any files via the {@link_BlobCacheService}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			put(cache, jobId, data, blobType)___		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,any,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,put,cache,job,id,data,blob,type,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1517915730;Uploads a byte array to a server which cannot create any files via the {@link_BlobCacheService}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			put(cache, jobId, data, blobType)___		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,any,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,put,cache,job,id,data,blob,type,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1525420604;Uploads a byte array to a server which cannot create any files via the {@link_BlobCacheService}. File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFails(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File tempFileDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			_			tempFileDir = server.createTemporaryFilename().getParentFile().getParentFile()__			assertTrue(tempFileDir.setExecutable(true, false))__			assertTrue(tempFileDir.setReadable(true, false))__			assertTrue(tempFileDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			put(cache, jobId, data, blobType)___		} finally {_			_			if (tempFileDir != null) {_				_				tempFileDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,any,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,temp,file,dir,server,create,temporary,filename,get,parent,file,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,put,cache,job,id,data,blob,type,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1507212387;Uploads a byte array to a server which cannot create files via the {@link BlobCacheService}._File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File jobStoreDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			_			jobStoreDir = server.getStorageLocation(jobId,_				BlobKey.createKey(blobType)).getParentFile()__			assertTrue(jobStoreDir.setExecutable(true, false))__			assertTrue(jobStoreDir.setReadable(true, false))__			assertTrue(jobStoreDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			try {_				put(cache, jobId, data, blobType)__			} finally {_				_				File incomingFileDir = new File(jobStoreDir.getParent(), "incoming")__				assertArrayEquals(new String[] {}, incomingFileDir.list())___				_				assertArrayEquals(new String[] {}, jobStoreDir.list())__			}_		} finally {_			_			if (jobStoreDir != null) {_				_				jobStoreDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,store,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,job,store,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,job,store,dir,server,get,storage,location,job,id,blob,key,create,key,blob,type,get,parent,file,assert,true,job,store,dir,set,executable,true,false,assert,true,job,store,dir,set,readable,true,false,assert,true,job,store,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,try,put,cache,job,id,data,blob,type,finally,file,incoming,file,dir,new,file,job,store,dir,get,parent,incoming,assert,array,equals,new,string,incoming,file,dir,list,assert,array,equals,new,string,job,store,dir,list,finally,if,job,store,dir,null,job,store,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1508138617;Uploads a byte array to a server which cannot create files via the {@link BlobCacheService}._File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File jobStoreDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			_			jobStoreDir = server.getStorageLocation(jobId,_				BlobKey.createKey(blobType)).getParentFile()__			assertTrue(jobStoreDir.setExecutable(true, false))__			assertTrue(jobStoreDir.setReadable(true, false))__			assertTrue(jobStoreDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			try {_				put(cache, jobId, data, blobType)__			} finally {_				_				File incomingFileDir = new File(jobStoreDir.getParent(), "incoming")__				assertArrayEquals(new String[] {}, incomingFileDir.list())___				_				assertArrayEquals(new String[] {}, jobStoreDir.list())__			}_		} finally {_			_			if (jobStoreDir != null) {_				_				jobStoreDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,store,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,job,store,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,job,store,dir,server,get,storage,location,job,id,blob,key,create,key,blob,type,get,parent,file,assert,true,job,store,dir,set,executable,true,false,assert,true,job,store,dir,set,readable,true,false,assert,true,job,store,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,try,put,cache,job,id,data,blob,type,finally,file,incoming,file,dir,new,file,job,store,dir,get,parent,incoming,assert,array,equals,new,string,incoming,file,dir,list,assert,array,equals,new,string,job,store,dir,list,finally,if,job,store,dir,null,job,store,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1508578816;Uploads a byte array to a server which cannot create files via the {@link BlobCacheService}._File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File jobStoreDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			_			jobStoreDir = server.getStorageLocation(jobId,_				BlobKey.createKey(blobType)).getParentFile()__			assertTrue(jobStoreDir.setExecutable(true, false))__			assertTrue(jobStoreDir.setReadable(true, false))__			assertTrue(jobStoreDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			try {_				put(cache, jobId, data, blobType)__			} finally {_				_				File incomingFileDir = new File(jobStoreDir.getParent(), "incoming")__				assertArrayEquals(new String[] {}, incomingFileDir.list())___				_				assertArrayEquals(new String[] {}, jobStoreDir.list())__			}_		} finally {_			_			if (jobStoreDir != null) {_				_				jobStoreDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,store,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,job,store,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,job,store,dir,server,get,storage,location,job,id,blob,key,create,key,blob,type,get,parent,file,assert,true,job,store,dir,set,executable,true,false,assert,true,job,store,dir,set,readable,true,false,assert,true,job,store,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,try,put,cache,job,id,data,blob,type,finally,file,incoming,file,dir,new,file,job,store,dir,get,parent,incoming,assert,array,equals,new,string,incoming,file,dir,list,assert,array,equals,new,string,job,store,dir,list,finally,if,job,store,dir,null,job,store,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1517915730;Uploads a byte array to a server which cannot create files via the {@link BlobCacheService}._File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File jobStoreDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			_			jobStoreDir = server.getStorageLocation(jobId,_				BlobKey.createKey(blobType)).getParentFile()__			assertTrue(jobStoreDir.setExecutable(true, false))__			assertTrue(jobStoreDir.setReadable(true, false))__			assertTrue(jobStoreDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			try {_				put(cache, jobId, data, blobType)__			} finally {_				_				File incomingFileDir = new File(jobStoreDir.getParent(), "incoming")__				assertArrayEquals(new String[] {}, incomingFileDir.list())___				_				assertArrayEquals(new String[] {}, jobStoreDir.list())__			}_		} finally {_			_			if (jobStoreDir != null) {_				_				jobStoreDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,store,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,job,store,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,job,store,dir,server,get,storage,location,job,id,blob,key,create,key,blob,type,get,parent,file,assert,true,job,store,dir,set,executable,true,false,assert,true,job,store,dir,set,readable,true,false,assert,true,job,store,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,try,put,cache,job,id,data,blob,type,finally,file,incoming,file,dir,new,file,job,store,dir,get,parent,incoming,assert,array,equals,new,string,incoming,file,dir,list,assert,array,equals,new,string,job,store,dir,list,finally,if,job,store,dir,null,job,store,dir,set,writable,true,false
BlobCachePutTest -> private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1525420604;Uploads a byte array to a server which cannot create files via the {@link BlobCacheService}._File transfers should fail.__@param jobId_job id_@param blobType_whether the BLOB should become permanent or transient;private void testPutBufferFailsStore(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		File jobStoreDir = null__		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			_			jobStoreDir = server.getStorageLocation(jobId,_				BlobKey.createKey(blobType)).getParentFile()__			assertTrue(jobStoreDir.setExecutable(true, false))__			assertTrue(jobStoreDir.setReadable(true, false))__			assertTrue(jobStoreDir.setWritable(false, false))___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			exception.expect(IOException.class)__			exception.expectMessage("PUT operation failed: ")___			try {_				put(cache, jobId, data, blobType)__			} finally {_				_				File incomingFileDir = new File(jobStoreDir.getParent(), "incoming")__				assertArrayEquals(new String[] {}, incomingFileDir.list())___				_				assertArrayEquals(new String[] {}, jobStoreDir.list())__			}_		} finally {_			_			if (jobStoreDir != null) {_				_				jobStoreDir.setWritable(true, false)__			}_		}_	};uploads,a,byte,array,to,a,server,which,cannot,create,files,via,the,link,blob,cache,service,file,transfers,should,fail,param,job,id,job,id,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,put,buffer,fails,store,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,assume,true,operating,system,is,windows,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,file,job,store,dir,null,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,job,store,dir,server,get,storage,location,job,id,blob,key,create,key,blob,type,get,parent,file,assert,true,job,store,dir,set,executable,true,false,assert,true,job,store,dir,set,readable,true,false,assert,true,job,store,dir,set,writable,false,false,byte,data,new,byte,2000000,rnd,next,bytes,data,exception,expect,ioexception,class,exception,expect,message,put,operation,failed,try,put,cache,job,id,data,blob,type,finally,file,incoming,file,dir,new,file,job,store,dir,get,parent,incoming,assert,array,equals,new,string,incoming,file,dir,list,assert,array,equals,new,string,job,store,dir,list,finally,if,job,store,dir,null,job,store,dir,set,writable,true,false
BlobCachePutTest -> @Test 	public void testPermanentBlobCacheGetStorageLocationConcurrentForJob() throws Exception;1507212387;Tests concurrent calls to {@link PermanentBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testPermanentBlobCacheGetStorageLocationConcurrentForJob() throws Exception {_		final JobID jobId = new JobID()__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())__			final PermanentBlobCache cache = new PermanentBlobCache(_				new InetSocketAddress("localhost", server.getPort()), config,_				new VoidBlobStore())) {__			server.start()___			BlobKey key = new BlobKey()__			CheckedThread[] threads = new CheckedThread[] {_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key),_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key),_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key)_			}__			checkedThreadSimpleTest(threads)__		}_	};tests,concurrent,calls,to,link,permanent,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,permanent,blob,cache,get,storage,location,concurrent,for,job,throws,exception,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,final,permanent,blob,cache,cache,new,permanent,blob,cache,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,blob,key,key,new,blob,key,checked,thread,threads,new,checked,thread,new,permanent,blob,cache,get,storage,location,cache,job,id,key,new,permanent,blob,cache,get,storage,location,cache,job,id,key,new,permanent,blob,cache,get,storage,location,cache,job,id,key,checked,thread,simple,test,threads
BlobCachePutTest -> @Test 	public void testPermanentBlobCacheGetStorageLocationConcurrentForJob() throws Exception;1507212387;Tests concurrent calls to {@link PermanentBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testPermanentBlobCacheGetStorageLocationConcurrentForJob() throws Exception {_		final JobID jobId = new JobID()__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())__			final PermanentBlobCache cache = new PermanentBlobCache(_				new InetSocketAddress("localhost", server.getPort()), config,_				new VoidBlobStore())) {__			server.start()___			BlobKey key = new PermanentBlobKey()__			CheckedThread[] threads = new CheckedThread[] {_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key),_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key),_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key)_			}__			checkedThreadSimpleTest(threads)__		}_	};tests,concurrent,calls,to,link,permanent,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,permanent,blob,cache,get,storage,location,concurrent,for,job,throws,exception,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,final,permanent,blob,cache,cache,new,permanent,blob,cache,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,blob,key,key,new,permanent,blob,key,checked,thread,threads,new,checked,thread,new,permanent,blob,cache,get,storage,location,cache,job,id,key,new,permanent,blob,cache,get,storage,location,cache,job,id,key,new,permanent,blob,cache,get,storage,location,cache,job,id,key,checked,thread,simple,test,threads
BlobCachePutTest -> @Test 	public void testPermanentBlobCacheGetStorageLocationConcurrentForJob() throws Exception;1508138617;Tests concurrent calls to {@link PermanentBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testPermanentBlobCacheGetStorageLocationConcurrentForJob() throws Exception {_		final JobID jobId = new JobID()__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())__			final PermanentBlobCache cache = new PermanentBlobCache(_				new InetSocketAddress("localhost", server.getPort()), config,_				new VoidBlobStore())) {__			server.start()___			BlobKey key = new PermanentBlobKey()__			CheckedThread[] threads = new CheckedThread[] {_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key),_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key),_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key)_			}__			checkedThreadSimpleTest(threads)__		}_	};tests,concurrent,calls,to,link,permanent,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,permanent,blob,cache,get,storage,location,concurrent,for,job,throws,exception,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,final,permanent,blob,cache,cache,new,permanent,blob,cache,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,blob,key,key,new,permanent,blob,key,checked,thread,threads,new,checked,thread,new,permanent,blob,cache,get,storage,location,cache,job,id,key,new,permanent,blob,cache,get,storage,location,cache,job,id,key,new,permanent,blob,cache,get,storage,location,cache,job,id,key,checked,thread,simple,test,threads
BlobCachePutTest -> @Test 	public void testPermanentBlobCacheGetStorageLocationConcurrentForJob() throws Exception;1508578816;Tests concurrent calls to {@link PermanentBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testPermanentBlobCacheGetStorageLocationConcurrentForJob() throws Exception {_		final JobID jobId = new JobID()__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())__			final PermanentBlobCache cache = new PermanentBlobCache(_				new InetSocketAddress("localhost", server.getPort()), config,_				new VoidBlobStore())) {__			server.start()___			BlobKey key = new PermanentBlobKey()__			CheckedThread[] threads = new CheckedThread[] {_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key),_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key),_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key)_			}__			checkedThreadSimpleTest(threads)__		}_	};tests,concurrent,calls,to,link,permanent,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,permanent,blob,cache,get,storage,location,concurrent,for,job,throws,exception,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,final,permanent,blob,cache,cache,new,permanent,blob,cache,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,blob,key,key,new,permanent,blob,key,checked,thread,threads,new,checked,thread,new,permanent,blob,cache,get,storage,location,cache,job,id,key,new,permanent,blob,cache,get,storage,location,cache,job,id,key,new,permanent,blob,cache,get,storage,location,cache,job,id,key,checked,thread,simple,test,threads
BlobCachePutTest -> @Test 	public void testPermanentBlobCacheGetStorageLocationConcurrentForJob() throws Exception;1517915730;Tests concurrent calls to {@link PermanentBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testPermanentBlobCacheGetStorageLocationConcurrentForJob() throws Exception {_		final JobID jobId = new JobID()__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())__			final PermanentBlobCache cache = new PermanentBlobCache(_				config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			BlobKey key = new PermanentBlobKey()__			CheckedThread[] threads = new CheckedThread[] {_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key),_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key),_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key)_			}__			checkedThreadSimpleTest(threads)__		}_	};tests,concurrent,calls,to,link,permanent,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,permanent,blob,cache,get,storage,location,concurrent,for,job,throws,exception,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,final,permanent,blob,cache,cache,new,permanent,blob,cache,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,blob,key,key,new,permanent,blob,key,checked,thread,threads,new,checked,thread,new,permanent,blob,cache,get,storage,location,cache,job,id,key,new,permanent,blob,cache,get,storage,location,cache,job,id,key,new,permanent,blob,cache,get,storage,location,cache,job,id,key,checked,thread,simple,test,threads
BlobCachePutTest -> @Test 	public void testPermanentBlobCacheGetStorageLocationConcurrentForJob() throws Exception;1525420604;Tests concurrent calls to {@link PermanentBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testPermanentBlobCacheGetStorageLocationConcurrentForJob() throws Exception {_		final JobID jobId = new JobID()__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())__			final PermanentBlobCache cache = new PermanentBlobCache(_				config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			BlobKey key = new PermanentBlobKey()__			CheckedThread[] threads = new CheckedThread[] {_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key),_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key),_				new PermanentBlobCacheGetStorageLocation(cache, jobId, key)_			}__			checkedThreadSimpleTest(threads)__		}_	};tests,concurrent,calls,to,link,permanent,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,permanent,blob,cache,get,storage,location,concurrent,for,job,throws,exception,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,final,permanent,blob,cache,cache,new,permanent,blob,cache,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,blob,key,key,new,permanent,blob,key,checked,thread,threads,new,checked,thread,new,permanent,blob,cache,get,storage,location,cache,job,id,key,new,permanent,blob,cache,get,storage,location,cache,job,id,key,new,permanent,blob,cache,get,storage,location,cache,job,id,key,checked,thread,simple,test,threads
BlobCachePutTest -> private void testPutChunkedStreamTransientSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2) 			throws IOException, InterruptedException;1507212387;Uploads two chunked file streams for different jobs into the server via the {@link_BlobCacheService}. File transfers should be successful.__<p>Note that high-availability uploads of streams is currently only possible at the {@link_BlobServer}.__@param jobId1_first job id_@param jobId2_second job id;private void testPutChunkedStreamTransientSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			TransientBlobKey key1a =_				(TransientBlobKey) put(cache, jobId1, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key1a)___			TransientBlobKey key1b =_				(TransientBlobKey) put(cache, jobId1, new ChunkedInputStream(data2, 19), TRANSIENT_BLOB)__			assertNotNull(key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1b, data2)___			_			TransientBlobKey key2a =_				(TransientBlobKey) put(cache, jobId2, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key2a)__			assertEquals(key1a, key2a)___			TransientBlobKey key2b =_				(TransientBlobKey) put(cache, jobId2, new ChunkedInputStream(data2, 19), TRANSIENT_BLOB)__			assertNotNull(key2b)__			assertEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			verifyDeletedEventually(server, jobId1, key1a)__			verifyDeletedEventually(server, jobId1, key1b)__			verifyDeletedEventually(server, jobId2, key2a)__			verifyDeletedEventually(server, jobId2, key2b)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)__		}_	};uploads,two,chunked,file,streams,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,p,note,that,high,availability,uploads,of,streams,is,currently,only,possible,at,the,link,blob,server,param,job,id1,first,job,id,param,job,id2,second,job,id;private,void,test,put,chunked,stream,transient,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,transient,blob,key,key1a,transient,blob,key,put,cache,job,id1,new,chunked,input,stream,data,19,assert,not,null,key1a,transient,blob,key,key1b,transient,blob,key,put,cache,job,id1,new,chunked,input,stream,data2,19,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,transient,blob,key,key2a,transient,blob,key,put,cache,job,id2,new,chunked,input,stream,data,19,assert,not,null,key2a,assert,equals,key1a,key2a,transient,blob,key,key2b,transient,blob,key,put,cache,job,id2,new,chunked,input,stream,data2,19,assert,not,null,key2b,assert,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2
BlobCachePutTest -> private void testPutChunkedStreamTransientSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2) 			throws IOException, InterruptedException;1508138617;Uploads two chunked file streams for different jobs into the server via the {@link_BlobCacheService}. File transfers should be successful.__<p>Note that high-availability uploads of streams is currently only possible at the {@link_BlobServer}.__@param jobId1_first job id_@param jobId2_second job id;private void testPutChunkedStreamTransientSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			TransientBlobKey key1a =_				(TransientBlobKey) put(cache, jobId1, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(cache, jobId1, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			TransientBlobKey key1b =_				(TransientBlobKey) put(cache, jobId1, new ChunkedInputStream(data2, 19), TRANSIENT_BLOB)__			assertNotNull(key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			TransientBlobKey key2a =_				(TransientBlobKey) put(cache, jobId2, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			TransientBlobKey key2b =_				(TransientBlobKey) put(cache, jobId2, new ChunkedInputStream(data2, 19), TRANSIENT_BLOB)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			verifyDeletedEventually(server, jobId1, key1a)__			verifyDeletedEventually(server, jobId1, key1b)__			verifyDeletedEventually(server, jobId2, key2a)__			verifyDeletedEventually(server, jobId2, key2b)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)__		}_	};uploads,two,chunked,file,streams,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,p,note,that,high,availability,uploads,of,streams,is,currently,only,possible,at,the,link,blob,server,param,job,id1,first,job,id,param,job,id2,second,job,id;private,void,test,put,chunked,stream,transient,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,transient,blob,key,key1a,transient,blob,key,put,cache,job,id1,new,chunked,input,stream,data,19,assert,not,null,key1a,blob,key,key1a2,put,cache,job,id1,new,chunked,input,stream,data,19,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,transient,blob,key,key1b,transient,blob,key,put,cache,job,id1,new,chunked,input,stream,data2,19,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,transient,blob,key,key2a,transient,blob,key,put,cache,job,id2,new,chunked,input,stream,data,19,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,transient,blob,key,key2b,transient,blob,key,put,cache,job,id2,new,chunked,input,stream,data2,19,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2
BlobCachePutTest -> private void testPutChunkedStreamTransientSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2) 			throws IOException, InterruptedException;1508578816;Uploads two chunked file streams for different jobs into the server via the {@link_BlobCacheService}. File transfers should be successful.__<p>Note that high-availability uploads of streams is currently only possible at the {@link_BlobServer}.__@param jobId1_first job id_@param jobId2_second job id;private void testPutChunkedStreamTransientSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			TransientBlobKey key1a =_				(TransientBlobKey) put(cache, jobId1, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(cache, jobId1, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			TransientBlobKey key1b =_				(TransientBlobKey) put(cache, jobId1, new ChunkedInputStream(data2, 19), TRANSIENT_BLOB)__			assertNotNull(key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			TransientBlobKey key2a =_				(TransientBlobKey) put(cache, jobId2, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			TransientBlobKey key2b =_				(TransientBlobKey) put(cache, jobId2, new ChunkedInputStream(data2, 19), TRANSIENT_BLOB)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			verifyDeletedEventually(server, jobId1, key1a)__			verifyDeletedEventually(server, jobId1, key1b)__			verifyDeletedEventually(server, jobId2, key2a)__			verifyDeletedEventually(server, jobId2, key2b)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)__		}_	};uploads,two,chunked,file,streams,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,p,note,that,high,availability,uploads,of,streams,is,currently,only,possible,at,the,link,blob,server,param,job,id1,first,job,id,param,job,id2,second,job,id;private,void,test,put,chunked,stream,transient,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,transient,blob,key,key1a,transient,blob,key,put,cache,job,id1,new,chunked,input,stream,data,19,assert,not,null,key1a,blob,key,key1a2,put,cache,job,id1,new,chunked,input,stream,data,19,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,transient,blob,key,key1b,transient,blob,key,put,cache,job,id1,new,chunked,input,stream,data2,19,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,transient,blob,key,key2a,transient,blob,key,put,cache,job,id2,new,chunked,input,stream,data,19,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,transient,blob,key,key2b,transient,blob,key,put,cache,job,id2,new,chunked,input,stream,data2,19,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2
BlobCachePutTest -> private void testPutChunkedStreamTransientSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2) 			throws IOException, InterruptedException;1517915730;Uploads two chunked file streams for different jobs into the server via the {@link_BlobCacheService}. File transfers should be successful.__<p>Note that high-availability uploads of streams is currently only possible at the {@link_BlobServer}.__@param jobId1_first job id_@param jobId2_second job id;private void testPutChunkedStreamTransientSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			TransientBlobKey key1a =_				(TransientBlobKey) put(cache, jobId1, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(cache, jobId1, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			TransientBlobKey key1b =_				(TransientBlobKey) put(cache, jobId1, new ChunkedInputStream(data2, 19), TRANSIENT_BLOB)__			assertNotNull(key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			TransientBlobKey key2a =_				(TransientBlobKey) put(cache, jobId2, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			TransientBlobKey key2b =_				(TransientBlobKey) put(cache, jobId2, new ChunkedInputStream(data2, 19), TRANSIENT_BLOB)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			verifyDeletedEventually(server, jobId1, key1a)__			verifyDeletedEventually(server, jobId1, key1b)__			verifyDeletedEventually(server, jobId2, key2a)__			verifyDeletedEventually(server, jobId2, key2b)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)__		}_	};uploads,two,chunked,file,streams,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,p,note,that,high,availability,uploads,of,streams,is,currently,only,possible,at,the,link,blob,server,param,job,id1,first,job,id,param,job,id2,second,job,id;private,void,test,put,chunked,stream,transient,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,transient,blob,key,key1a,transient,blob,key,put,cache,job,id1,new,chunked,input,stream,data,19,assert,not,null,key1a,blob,key,key1a2,put,cache,job,id1,new,chunked,input,stream,data,19,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,transient,blob,key,key1b,transient,blob,key,put,cache,job,id1,new,chunked,input,stream,data2,19,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,transient,blob,key,key2a,transient,blob,key,put,cache,job,id2,new,chunked,input,stream,data,19,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,transient,blob,key,key2b,transient,blob,key,put,cache,job,id2,new,chunked,input,stream,data2,19,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2
BlobCachePutTest -> private void testPutChunkedStreamTransientSuccessfulGet( 			@Nullable JobID jobId1, @Nullable JobID jobId2) 			throws IOException, InterruptedException;1525420604;Uploads two chunked file streams for different jobs into the server via the {@link_BlobCacheService}. File transfers should be successful.__<p>Note that high-availability uploads of streams is currently only possible at the {@link_BlobServer}.__@param jobId1_first job id_@param jobId2_second job id;private void testPutChunkedStreamTransientSuccessfulGet(_			@Nullable JobID jobId1, @Nullable JobID jobId2)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			TransientBlobKey key1a =_				(TransientBlobKey) put(cache, jobId1, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(cache, jobId1, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			TransientBlobKey key1b =_				(TransientBlobKey) put(cache, jobId1, new ChunkedInputStream(data2, 19), TRANSIENT_BLOB)__			assertNotNull(key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			TransientBlobKey key2a =_				(TransientBlobKey) put(cache, jobId2, new ChunkedInputStream(data, 19), TRANSIENT_BLOB)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			TransientBlobKey key2b =_				(TransientBlobKey) put(cache, jobId2, new ChunkedInputStream(data2, 19), TRANSIENT_BLOB)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			verifyDeletedEventually(server, jobId1, key1a)__			verifyDeletedEventually(server, jobId1, key1b)__			verifyDeletedEventually(server, jobId2, key2a)__			verifyDeletedEventually(server, jobId2, key2b)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)__		}_	};uploads,two,chunked,file,streams,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,p,note,that,high,availability,uploads,of,streams,is,currently,only,possible,at,the,link,blob,server,param,job,id1,first,job,id,param,job,id2,second,job,id;private,void,test,put,chunked,stream,transient,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,transient,blob,key,key1a,transient,blob,key,put,cache,job,id1,new,chunked,input,stream,data,19,assert,not,null,key1a,blob,key,key1a2,put,cache,job,id1,new,chunked,input,stream,data,19,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,transient,blob,key,key1b,transient,blob,key,put,cache,job,id1,new,chunked,input,stream,data2,19,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,transient,blob,key,key2a,transient,blob,key,put,cache,job,id2,new,chunked,input,stream,data,19,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,transient,blob,key,key2b,transient,blob,key,put,cache,job,id2,new,chunked,input,stream,data2,19,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2
BlobCachePutTest -> private void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1507212387;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;private void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;private,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobCachePutTest -> private void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1507212387;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;private void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;private,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobCachePutTest -> private void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1508138617;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;private void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;private,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobCachePutTest -> private void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1508578816;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;private void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;private,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobCachePutTest -> private void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1517915730;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;private void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;private,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobCachePutTest -> private void checkedThreadSimpleTest(CheckedThread[] threads) 		throws Exception;1525420604;Helper method to first start all threads and then wait for their completion.__@param threads threads to use_@throws Exception exceptions that are thrown from the threads;private void checkedThreadSimpleTest(CheckedThread[] threads)_		throws Exception {__		_		for (CheckedThread t: threads) {_			t.start()__		}__		_		for (CheckedThread t: threads) {_			t.sync()__		}_	};helper,method,to,first,start,all,threads,and,then,wait,for,their,completion,param,threads,threads,to,use,throws,exception,exceptions,that,are,thrown,from,the,threads;private,void,checked,thread,simple,test,checked,thread,threads,throws,exception,for,checked,thread,t,threads,t,start,for,checked,thread,t,threads,t,sync
BlobCachePutTest -> private void testPutStreamTransientSuccessfulGet(@Nullable JobID jobId1, @Nullable JobID jobId2) 			throws IOException, InterruptedException;1507212387;Uploads two file streams for different jobs into the server via the {@link BlobCacheService}._File transfers should be successful.__<p>Note that high-availability uploads of streams is currently only possible at the {@link_BlobServer}.__@param jobId1_first job id_@param jobId2_second job id;private void testPutStreamTransientSuccessfulGet(@Nullable JobID jobId1, @Nullable JobID jobId2)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			TransientBlobKey key1a =_				(TransientBlobKey) put(cache, jobId1, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key1a)___			TransientBlobKey key1b = (TransientBlobKey) put(cache, jobId1, new ByteArrayInputStream(data2), TRANSIENT_BLOB)__			assertNotNull(key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1b, data2)___			_			TransientBlobKey key2a =_				(TransientBlobKey) put(cache, jobId2, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key2a)__			assertEquals(key1a, key2a)___			TransientBlobKey key2b = (TransientBlobKey) put(cache, jobId2, new ByteArrayInputStream(data2), TRANSIENT_BLOB)__			assertNotNull(key2b)__			assertEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			verifyDeletedEventually(server, jobId1, key1a)__			verifyDeletedEventually(server, jobId1, key1b)__			verifyDeletedEventually(server, jobId2, key2a)__			verifyDeletedEventually(server, jobId2, key2b)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)__		}_	};uploads,two,file,streams,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,p,note,that,high,availability,uploads,of,streams,is,currently,only,possible,at,the,link,blob,server,param,job,id1,first,job,id,param,job,id2,second,job,id;private,void,test,put,stream,transient,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,transient,blob,key,key1a,transient,blob,key,put,cache,job,id1,new,byte,array,input,stream,data,assert,not,null,key1a,transient,blob,key,key1b,transient,blob,key,put,cache,job,id1,new,byte,array,input,stream,data2,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,transient,blob,key,key2a,transient,blob,key,put,cache,job,id2,new,byte,array,input,stream,data,assert,not,null,key2a,assert,equals,key1a,key2a,transient,blob,key,key2b,transient,blob,key,put,cache,job,id2,new,byte,array,input,stream,data2,assert,not,null,key2b,assert,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2
BlobCachePutTest -> private void testPutStreamTransientSuccessfulGet(@Nullable JobID jobId1, @Nullable JobID jobId2) 			throws IOException, InterruptedException;1508138617;Uploads two file streams for different jobs into the server via the {@link BlobCacheService}._File transfers should be successful.__<p>Note that high-availability uploads of streams is currently only possible at the {@link_BlobServer}.__@param jobId1_first job id_@param jobId2_second job id;private void testPutStreamTransientSuccessfulGet(@Nullable JobID jobId1, @Nullable JobID jobId2)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			TransientBlobKey key1a =_				(TransientBlobKey) put(cache, jobId1, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(cache, jobId1, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			TransientBlobKey key1b = (TransientBlobKey) put(cache, jobId1, new ByteArrayInputStream(data2), TRANSIENT_BLOB)__			assertNotNull(key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			TransientBlobKey key2a =_				(TransientBlobKey) put(cache, jobId2, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			TransientBlobKey key2b = (TransientBlobKey) put(cache, jobId2, new ByteArrayInputStream(data2), TRANSIENT_BLOB)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			verifyDeletedEventually(server, jobId1, key1a)__			verifyDeletedEventually(server, jobId1, key1b)__			verifyDeletedEventually(server, jobId2, key2a)__			verifyDeletedEventually(server, jobId2, key2b)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)__		}_	};uploads,two,file,streams,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,p,note,that,high,availability,uploads,of,streams,is,currently,only,possible,at,the,link,blob,server,param,job,id1,first,job,id,param,job,id2,second,job,id;private,void,test,put,stream,transient,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,transient,blob,key,key1a,transient,blob,key,put,cache,job,id1,new,byte,array,input,stream,data,assert,not,null,key1a,blob,key,key1a2,put,cache,job,id1,new,byte,array,input,stream,data,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,transient,blob,key,key1b,transient,blob,key,put,cache,job,id1,new,byte,array,input,stream,data2,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,transient,blob,key,key2a,transient,blob,key,put,cache,job,id2,new,byte,array,input,stream,data,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,transient,blob,key,key2b,transient,blob,key,put,cache,job,id2,new,byte,array,input,stream,data2,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2
BlobCachePutTest -> private void testPutStreamTransientSuccessfulGet(@Nullable JobID jobId1, @Nullable JobID jobId2) 			throws IOException, InterruptedException;1508578816;Uploads two file streams for different jobs into the server via the {@link BlobCacheService}._File transfers should be successful.__<p>Note that high-availability uploads of streams is currently only possible at the {@link_BlobServer}.__@param jobId1_first job id_@param jobId2_second job id;private void testPutStreamTransientSuccessfulGet(@Nullable JobID jobId1, @Nullable JobID jobId2)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			TransientBlobKey key1a =_				(TransientBlobKey) put(cache, jobId1, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(cache, jobId1, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			TransientBlobKey key1b = (TransientBlobKey) put(cache, jobId1, new ByteArrayInputStream(data2), TRANSIENT_BLOB)__			assertNotNull(key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			TransientBlobKey key2a =_				(TransientBlobKey) put(cache, jobId2, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			TransientBlobKey key2b = (TransientBlobKey) put(cache, jobId2, new ByteArrayInputStream(data2), TRANSIENT_BLOB)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			verifyDeletedEventually(server, jobId1, key1a)__			verifyDeletedEventually(server, jobId1, key1b)__			verifyDeletedEventually(server, jobId2, key2a)__			verifyDeletedEventually(server, jobId2, key2b)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)__		}_	};uploads,two,file,streams,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,p,note,that,high,availability,uploads,of,streams,is,currently,only,possible,at,the,link,blob,server,param,job,id1,first,job,id,param,job,id2,second,job,id;private,void,test,put,stream,transient,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,transient,blob,key,key1a,transient,blob,key,put,cache,job,id1,new,byte,array,input,stream,data,assert,not,null,key1a,blob,key,key1a2,put,cache,job,id1,new,byte,array,input,stream,data,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,transient,blob,key,key1b,transient,blob,key,put,cache,job,id1,new,byte,array,input,stream,data2,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,transient,blob,key,key2a,transient,blob,key,put,cache,job,id2,new,byte,array,input,stream,data,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,transient,blob,key,key2b,transient,blob,key,put,cache,job,id2,new,byte,array,input,stream,data2,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2
BlobCachePutTest -> private void testPutStreamTransientSuccessfulGet(@Nullable JobID jobId1, @Nullable JobID jobId2) 			throws IOException, InterruptedException;1517915730;Uploads two file streams for different jobs into the server via the {@link BlobCacheService}._File transfers should be successful.__<p>Note that high-availability uploads of streams is currently only possible at the {@link_BlobServer}.__@param jobId1_first job id_@param jobId2_second job id;private void testPutStreamTransientSuccessfulGet(@Nullable JobID jobId1, @Nullable JobID jobId2)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			TransientBlobKey key1a =_				(TransientBlobKey) put(cache, jobId1, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(cache, jobId1, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			TransientBlobKey key1b = (TransientBlobKey) put(cache, jobId1, new ByteArrayInputStream(data2), TRANSIENT_BLOB)__			assertNotNull(key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			TransientBlobKey key2a =_				(TransientBlobKey) put(cache, jobId2, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			TransientBlobKey key2b = (TransientBlobKey) put(cache, jobId2, new ByteArrayInputStream(data2), TRANSIENT_BLOB)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			verifyDeletedEventually(server, jobId1, key1a)__			verifyDeletedEventually(server, jobId1, key1b)__			verifyDeletedEventually(server, jobId2, key2a)__			verifyDeletedEventually(server, jobId2, key2b)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)__		}_	};uploads,two,file,streams,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,p,note,that,high,availability,uploads,of,streams,is,currently,only,possible,at,the,link,blob,server,param,job,id1,first,job,id,param,job,id2,second,job,id;private,void,test,put,stream,transient,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,transient,blob,key,key1a,transient,blob,key,put,cache,job,id1,new,byte,array,input,stream,data,assert,not,null,key1a,blob,key,key1a2,put,cache,job,id1,new,byte,array,input,stream,data,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,transient,blob,key,key1b,transient,blob,key,put,cache,job,id1,new,byte,array,input,stream,data2,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,transient,blob,key,key2a,transient,blob,key,put,cache,job,id2,new,byte,array,input,stream,data,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,transient,blob,key,key2b,transient,blob,key,put,cache,job,id2,new,byte,array,input,stream,data2,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2
BlobCachePutTest -> private void testPutStreamTransientSuccessfulGet(@Nullable JobID jobId1, @Nullable JobID jobId2) 			throws IOException, InterruptedException;1525420604;Uploads two file streams for different jobs into the server via the {@link BlobCacheService}._File transfers should be successful.__<p>Note that high-availability uploads of streams is currently only possible at the {@link_BlobServer}.__@param jobId1_first job id_@param jobId2_second job id;private void testPutStreamTransientSuccessfulGet(@Nullable JobID jobId1, @Nullable JobID jobId2)_			throws IOException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (_			BlobServer server = new BlobServer(config, new VoidBlobStore())__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			byte[] data2 = Arrays.copyOfRange(data, 10, 54)___			_			TransientBlobKey key1a =_				(TransientBlobKey) put(cache, jobId1, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key1a)__			_			BlobKey key1a2 = put(cache, jobId1, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key1a2)__			verifyKeyDifferentHashEquals(key1a, key1a2)___			TransientBlobKey key1b = (TransientBlobKey) put(cache, jobId1, new ByteArrayInputStream(data2), TRANSIENT_BLOB)__			assertNotNull(key1b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)___			_			TransientBlobKey key2a =_				(TransientBlobKey) put(cache, jobId2, new ByteArrayInputStream(data), TRANSIENT_BLOB)__			assertNotNull(key2a)__			verifyKeyDifferentHashEquals(key1a, key2a)___			TransientBlobKey key2b = (TransientBlobKey) put(cache, jobId2, new ByteArrayInputStream(data2), TRANSIENT_BLOB)__			assertNotNull(key2b)__			verifyKeyDifferentHashEquals(key1b, key2b)___			_			verifyContents(server, jobId1, key1a, data)__			verifyContents(server, jobId1, key1a2, data)__			verifyContents(server, jobId1, key1b, data2)__			verifyContents(server, jobId2, key2a, data)__			verifyContents(server, jobId2, key2b, data2)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)___			_			verifyDeletedEventually(server, jobId1, key1a)__			verifyDeletedEventually(server, jobId1, key1b)__			verifyDeletedEventually(server, jobId2, key2a)__			verifyDeletedEventually(server, jobId2, key2b)___			_			verifyContents(cache, jobId1, key1a, data)__			verifyContents(cache, jobId1, key1b, data2)__			verifyContents(cache, jobId2, key2a, data)__			verifyContents(cache, jobId2, key2b, data2)__		}_	};uploads,two,file,streams,for,different,jobs,into,the,server,via,the,link,blob,cache,service,file,transfers,should,be,successful,p,note,that,high,availability,uploads,of,streams,is,currently,only,possible,at,the,link,blob,server,param,job,id1,first,job,id,param,job,id2,second,job,id;private,void,test,put,stream,transient,successful,get,nullable,job,id,job,id1,nullable,job,id,job,id2,throws,ioexception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,byte,data2,arrays,copy,of,range,data,10,54,transient,blob,key,key1a,transient,blob,key,put,cache,job,id1,new,byte,array,input,stream,data,assert,not,null,key1a,blob,key,key1a2,put,cache,job,id1,new,byte,array,input,stream,data,assert,not,null,key1a2,verify,key,different,hash,equals,key1a,key1a2,transient,blob,key,key1b,transient,blob,key,put,cache,job,id1,new,byte,array,input,stream,data2,assert,not,null,key1b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,transient,blob,key,key2a,transient,blob,key,put,cache,job,id2,new,byte,array,input,stream,data,assert,not,null,key2a,verify,key,different,hash,equals,key1a,key2a,transient,blob,key,key2b,transient,blob,key,put,cache,job,id2,new,byte,array,input,stream,data2,assert,not,null,key2b,verify,key,different,hash,equals,key1b,key2b,verify,contents,server,job,id1,key1a,data,verify,contents,server,job,id1,key1a2,data,verify,contents,server,job,id1,key1b,data2,verify,contents,server,job,id2,key2a,data,verify,contents,server,job,id2,key2b,data2,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2,verify,deleted,eventually,server,job,id1,key1a,verify,deleted,eventually,server,job,id1,key1b,verify,deleted,eventually,server,job,id2,key2a,verify,deleted,eventually,server,job,id2,key2b,verify,contents,cache,job,id1,key1a,data,verify,contents,cache,job,id1,key1b,data2,verify,contents,cache,job,id2,key2a,data,verify,contents,cache,job,id2,key2b,data2
BlobCachePutTest -> @Test 	public void testTransientBlobCacheGetStorageLocationConcurrentNoJob() throws Exception;1507212387;Tests concurrent calls to {@link TransientBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testTransientBlobCacheGetStorageLocationConcurrentNoJob() throws Exception {_		testTransientBlobCacheGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,transient,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,transient,blob,cache,get,storage,location,concurrent,no,job,throws,exception,test,transient,blob,cache,get,storage,location,concurrent,null
BlobCachePutTest -> @Test 	public void testTransientBlobCacheGetStorageLocationConcurrentNoJob() throws Exception;1507212387;Tests concurrent calls to {@link TransientBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testTransientBlobCacheGetStorageLocationConcurrentNoJob() throws Exception {_		testTransientBlobCacheGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,transient,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,transient,blob,cache,get,storage,location,concurrent,no,job,throws,exception,test,transient,blob,cache,get,storage,location,concurrent,null
BlobCachePutTest -> @Test 	public void testTransientBlobCacheGetStorageLocationConcurrentNoJob() throws Exception;1508138617;Tests concurrent calls to {@link TransientBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testTransientBlobCacheGetStorageLocationConcurrentNoJob() throws Exception {_		testTransientBlobCacheGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,transient,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,transient,blob,cache,get,storage,location,concurrent,no,job,throws,exception,test,transient,blob,cache,get,storage,location,concurrent,null
BlobCachePutTest -> @Test 	public void testTransientBlobCacheGetStorageLocationConcurrentNoJob() throws Exception;1508578816;Tests concurrent calls to {@link TransientBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testTransientBlobCacheGetStorageLocationConcurrentNoJob() throws Exception {_		testTransientBlobCacheGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,transient,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,transient,blob,cache,get,storage,location,concurrent,no,job,throws,exception,test,transient,blob,cache,get,storage,location,concurrent,null
BlobCachePutTest -> @Test 	public void testTransientBlobCacheGetStorageLocationConcurrentNoJob() throws Exception;1517915730;Tests concurrent calls to {@link TransientBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testTransientBlobCacheGetStorageLocationConcurrentNoJob() throws Exception {_		testTransientBlobCacheGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,transient,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,transient,blob,cache,get,storage,location,concurrent,no,job,throws,exception,test,transient,blob,cache,get,storage,location,concurrent,null
BlobCachePutTest -> @Test 	public void testTransientBlobCacheGetStorageLocationConcurrentNoJob() throws Exception;1525420604;Tests concurrent calls to {@link TransientBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testTransientBlobCacheGetStorageLocationConcurrentNoJob() throws Exception {_		testTransientBlobCacheGetStorageLocationConcurrent(null)__	};tests,concurrent,calls,to,link,transient,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,transient,blob,cache,get,storage,location,concurrent,no,job,throws,exception,test,transient,blob,cache,get,storage,location,concurrent,null
BlobCachePutTest -> @Test 	public void testTransientBlobCacheGetStorageLocationConcurrentForJob() throws Exception;1507212387;Tests concurrent calls to {@link TransientBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testTransientBlobCacheGetStorageLocationConcurrentForJob() throws Exception {_		testTransientBlobCacheGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,transient,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,transient,blob,cache,get,storage,location,concurrent,for,job,throws,exception,test,transient,blob,cache,get,storage,location,concurrent,new,job,id
BlobCachePutTest -> @Test 	public void testTransientBlobCacheGetStorageLocationConcurrentForJob() throws Exception;1507212387;Tests concurrent calls to {@link TransientBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testTransientBlobCacheGetStorageLocationConcurrentForJob() throws Exception {_		testTransientBlobCacheGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,transient,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,transient,blob,cache,get,storage,location,concurrent,for,job,throws,exception,test,transient,blob,cache,get,storage,location,concurrent,new,job,id
BlobCachePutTest -> @Test 	public void testTransientBlobCacheGetStorageLocationConcurrentForJob() throws Exception;1508138617;Tests concurrent calls to {@link TransientBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testTransientBlobCacheGetStorageLocationConcurrentForJob() throws Exception {_		testTransientBlobCacheGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,transient,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,transient,blob,cache,get,storage,location,concurrent,for,job,throws,exception,test,transient,blob,cache,get,storage,location,concurrent,new,job,id
BlobCachePutTest -> @Test 	public void testTransientBlobCacheGetStorageLocationConcurrentForJob() throws Exception;1508578816;Tests concurrent calls to {@link TransientBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testTransientBlobCacheGetStorageLocationConcurrentForJob() throws Exception {_		testTransientBlobCacheGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,transient,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,transient,blob,cache,get,storage,location,concurrent,for,job,throws,exception,test,transient,blob,cache,get,storage,location,concurrent,new,job,id
BlobCachePutTest -> @Test 	public void testTransientBlobCacheGetStorageLocationConcurrentForJob() throws Exception;1517915730;Tests concurrent calls to {@link TransientBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testTransientBlobCacheGetStorageLocationConcurrentForJob() throws Exception {_		testTransientBlobCacheGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,transient,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,transient,blob,cache,get,storage,location,concurrent,for,job,throws,exception,test,transient,blob,cache,get,storage,location,concurrent,new,job,id
BlobCachePutTest -> @Test 	public void testTransientBlobCacheGetStorageLocationConcurrentForJob() throws Exception;1525420604;Tests concurrent calls to {@link TransientBlobCache#getStorageLocation(JobID, BlobKey)}.;@Test_	public void testTransientBlobCacheGetStorageLocationConcurrentForJob() throws Exception {_		testTransientBlobCacheGetStorageLocationConcurrent(new JobID())__	};tests,concurrent,calls,to,link,transient,blob,cache,get,storage,location,job,id,blob,key;test,public,void,test,transient,blob,cache,get,storage,location,concurrent,for,job,throws,exception,test,transient,blob,cache,get,storage,location,concurrent,new,job,id
BlobCachePutTest -> static void verifyDeletedEventually(BlobServer server, @Nullable JobID jobId, BlobKey key) 			throws IOException, InterruptedException;1507212387;Checks that the given blob will be deleted at the {@link BlobServer} eventually (waits at most 30s).__@param server_BLOB server_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_key identifying the BLOB to request;static void verifyDeletedEventually(BlobServer server, @Nullable JobID jobId, BlobKey key)_			throws IOException, InterruptedException {__		long deadline = System.currentTimeMillis() + 30_000L__		do {_			Thread.sleep(10)__		}_		while (checkFilesExist(jobId, Collections.singletonList(key), server, false) != 0 &&_			System.currentTimeMillis() < deadline)___		verifyDeleted(server, jobId, key)__	};checks,that,the,given,blob,will,be,deleted,at,the,link,blob,server,eventually,waits,at,most,30s,param,server,blob,server,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,key,identifying,the,blob,to,request;static,void,verify,deleted,eventually,blob,server,server,nullable,job,id,job,id,blob,key,key,throws,ioexception,interrupted,exception,long,deadline,system,current,time,millis,do,thread,sleep,10,while,check,files,exist,job,id,collections,singleton,list,key,server,false,0,system,current,time,millis,deadline,verify,deleted,server,job,id,key
BlobCachePutTest -> static void verifyDeletedEventually(BlobServer server, @Nullable JobID jobId, BlobKey key) 			throws IOException, InterruptedException;1508138617;Checks that the given blob will be deleted at the {@link BlobServer} eventually (waits at most 30s).__@param server_BLOB server_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_key identifying the BLOB to request;static void verifyDeletedEventually(BlobServer server, @Nullable JobID jobId, BlobKey key)_			throws IOException, InterruptedException {__		long deadline = System.currentTimeMillis() + 30_000L__		do {_			Thread.sleep(10)__		}_		while (checkFilesExist(jobId, Collections.singletonList(key), server, false) != 0 &&_			System.currentTimeMillis() < deadline)___		verifyDeleted(server, jobId, key)__	};checks,that,the,given,blob,will,be,deleted,at,the,link,blob,server,eventually,waits,at,most,30s,param,server,blob,server,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,key,identifying,the,blob,to,request;static,void,verify,deleted,eventually,blob,server,server,nullable,job,id,job,id,blob,key,key,throws,ioexception,interrupted,exception,long,deadline,system,current,time,millis,do,thread,sleep,10,while,check,files,exist,job,id,collections,singleton,list,key,server,false,0,system,current,time,millis,deadline,verify,deleted,server,job,id,key
BlobCachePutTest -> private void testConcurrentPutOperations( 			@Nullable final JobID jobId, final BlobKey.BlobType blobType) 			throws IOException, InterruptedException, ExecutionException;1507212387;[FLINK-6020]_Tests that concurrent put operations will only upload the file once to the {@link BlobStore}_and that the files are not corrupt at any time.__@param jobId_job ID to use (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient;private void testConcurrentPutOperations(_			@Nullable final JobID jobId, final BlobKey.BlobType blobType)_			throws IOException, InterruptedException, ExecutionException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		final BlobStore blobStoreServer = mock(BlobStore.class)__		final BlobStore blobStoreCache = mock(BlobStore.class)___		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		final List<Path> jars__		if (blobType == PERMANENT_BLOB) {_			_			File tmpFile = temporaryFolder.newFile()__			FileUtils.writeByteArrayToFile(tmpFile, data)__			jars = Collections.singletonList(new Path(tmpFile.getAbsolutePath()))__		} else {_			jars = null__		}__		Collection<CompletableFuture<BlobKey>> allFutures = new ArrayList<>(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (_			final BlobServer server = new BlobServer(config, blobStoreServer)__			final BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, blobStoreCache)) {__			server.start()___			_			final InetSocketAddress serverAddress =_				new InetSocketAddress("localhost", server.getPort())__			__			for (int i = 0_ i < concurrentPutOperations_ i++) {_				final Supplier<BlobKey> callable__				if (blobType == PERMANENT_BLOB) {_					_					callable =_						() -> {_							try {_								List<PermanentBlobKey> keys =_									BlobClient.uploadJarFiles(serverAddress, config, jobId, jars)__								assertEquals(1, keys.size())__								BlobKey uploadedKey = keys.get(0)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_						}___				} else {_					callable =_						() -> {_							try {_								BlockingInputStream inputStream =_									new BlockingInputStream(countDownLatch, data)__								BlobKey uploadedKey = put(cache, jobId, inputStream, blobType)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_					}__				}_				CompletableFuture<BlobKey> putFuture = CompletableFuture_					.supplyAsync(callable, executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while (blobKeyIterator.hasNext()) {_				assertEquals(blobKey, blobKeyIterator.next())__			}__			_			verifyContents(server, jobId, blobKey, data)___			_			if (blobType == PERMANENT_BLOB) {_				verify(blobStoreServer, times(1)).put(any(File.class), eq(jobId), eq(blobKey))__			} else {_				_				_				verify(blobStoreServer, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__			}_			_			verify(blobStoreCache, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store,and,that,the,files,are,not,corrupt,at,any,time,param,job,id,job,id,to,use,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,concurrent,put,operations,nullable,final,job,id,job,id,final,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,execution,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,final,blob,store,blob,store,server,mock,blob,store,class,final,blob,store,blob,store,cache,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,final,list,path,jars,if,blob,type,file,tmp,file,temporary,folder,new,file,file,utils,write,byte,array,to,file,tmp,file,data,jars,collections,singleton,list,new,path,tmp,file,get,absolute,path,else,jars,null,collection,completable,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,server,new,blob,server,config,blob,store,server,final,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,blob,store,cache,server,start,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,for,int,i,0,i,concurrent,put,operations,i,final,supplier,blob,key,callable,if,blob,type,callable,try,list,permanent,blob,key,keys,blob,client,upload,jar,files,server,address,config,job,id,jars,assert,equals,1,keys,size,blob,key,uploaded,key,keys,get,0,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,else,callable,try,blocking,input,stream,input,stream,new,blocking,input,stream,count,down,latch,data,blob,key,uploaded,key,put,cache,job,id,input,stream,blob,type,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,completable,future,blob,key,put,future,completable,future,supply,async,callable,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,assert,equals,blob,key,blob,key,iterator,next,verify,contents,server,job,id,blob,key,data,if,blob,type,verify,blob,store,server,times,1,put,any,file,class,eq,job,id,eq,blob,key,else,verify,blob,store,server,times,0,put,any,file,class,eq,job,id,eq,blob,key,verify,blob,store,cache,times,0,put,any,file,class,eq,job,id,eq,blob,key,finally,executor,shutdown,now
BlobCachePutTest -> private void testConcurrentPutOperations( 			@Nullable final JobID jobId, final BlobKey.BlobType blobType) 			throws IOException, InterruptedException, ExecutionException;1508138617;[FLINK-6020]_Tests that concurrent put operations will only upload the file once to the {@link BlobStore}_and that the files are not corrupt at any time.__@param jobId_job ID to use (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient;private void testConcurrentPutOperations(_			@Nullable final JobID jobId, final BlobKey.BlobType blobType)_			throws IOException, InterruptedException, ExecutionException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		final BlobStore blobStoreServer = mock(BlobStore.class)__		final BlobStore blobStoreCache = mock(BlobStore.class)___		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		final List<Path> jars__		if (blobType == PERMANENT_BLOB) {_			_			File tmpFile = temporaryFolder.newFile()__			FileUtils.writeByteArrayToFile(tmpFile, data)__			jars = Collections.singletonList(new Path(tmpFile.getAbsolutePath()))__		} else {_			jars = null__		}__		Collection<CompletableFuture<BlobKey>> allFutures = new ArrayList<>(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (_			final BlobServer server = new BlobServer(config, blobStoreServer)__			final BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, blobStoreCache)) {__			server.start()___			_			final InetSocketAddress serverAddress =_				new InetSocketAddress("localhost", server.getPort())__			__			for (int i = 0_ i < concurrentPutOperations_ i++) {_				final Supplier<BlobKey> callable__				if (blobType == PERMANENT_BLOB) {_					_					callable =_						() -> {_							try {_								List<PermanentBlobKey> keys =_									BlobClient.uploadJarFiles(serverAddress, config, jobId, jars)__								assertEquals(1, keys.size())__								BlobKey uploadedKey = keys.get(0)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_						}___				} else {_					callable =_						() -> {_							try {_								BlockingInputStream inputStream =_									new BlockingInputStream(countDownLatch, data)__								BlobKey uploadedKey = put(cache, jobId, inputStream, blobType)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_					}__				}_				CompletableFuture<BlobKey> putFuture = CompletableFuture_					.supplyAsync(callable, executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while (blobKeyIterator.hasNext()) {_				_				verifyKeyDifferentHashEquals(blobKey, blobKeyIterator.next())__			}__			_			verifyContents(server, jobId, blobKey, data)___			_			if (blobType == PERMANENT_BLOB) {_				verify(blobStoreServer, times(1)).put(any(File.class), eq(jobId), eq(blobKey))__			} else {_				_				_				verify(blobStoreServer, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__			}_			_			verify(blobStoreCache, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store,and,that,the,files,are,not,corrupt,at,any,time,param,job,id,job,id,to,use,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,concurrent,put,operations,nullable,final,job,id,job,id,final,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,execution,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,final,blob,store,blob,store,server,mock,blob,store,class,final,blob,store,blob,store,cache,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,final,list,path,jars,if,blob,type,file,tmp,file,temporary,folder,new,file,file,utils,write,byte,array,to,file,tmp,file,data,jars,collections,singleton,list,new,path,tmp,file,get,absolute,path,else,jars,null,collection,completable,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,server,new,blob,server,config,blob,store,server,final,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,blob,store,cache,server,start,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,for,int,i,0,i,concurrent,put,operations,i,final,supplier,blob,key,callable,if,blob,type,callable,try,list,permanent,blob,key,keys,blob,client,upload,jar,files,server,address,config,job,id,jars,assert,equals,1,keys,size,blob,key,uploaded,key,keys,get,0,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,else,callable,try,blocking,input,stream,input,stream,new,blocking,input,stream,count,down,latch,data,blob,key,uploaded,key,put,cache,job,id,input,stream,blob,type,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,completable,future,blob,key,put,future,completable,future,supply,async,callable,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,verify,key,different,hash,equals,blob,key,blob,key,iterator,next,verify,contents,server,job,id,blob,key,data,if,blob,type,verify,blob,store,server,times,1,put,any,file,class,eq,job,id,eq,blob,key,else,verify,blob,store,server,times,0,put,any,file,class,eq,job,id,eq,blob,key,verify,blob,store,cache,times,0,put,any,file,class,eq,job,id,eq,blob,key,finally,executor,shutdown,now
BlobCachePutTest -> private void testConcurrentPutOperations( 			@Nullable final JobID jobId, final BlobKey.BlobType blobType) 			throws IOException, InterruptedException, ExecutionException;1508578816;[FLINK-6020]_Tests that concurrent put operations will only upload the file once to the {@link BlobStore}_and that the files are not corrupt at any time.__@param jobId_job ID to use (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient;private void testConcurrentPutOperations(_			@Nullable final JobID jobId, final BlobKey.BlobType blobType)_			throws IOException, InterruptedException, ExecutionException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		final BlobStore blobStoreServer = mock(BlobStore.class)__		final BlobStore blobStoreCache = mock(BlobStore.class)___		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		final List<Path> jars__		if (blobType == PERMANENT_BLOB) {_			_			File tmpFile = temporaryFolder.newFile()__			FileUtils.writeByteArrayToFile(tmpFile, data)__			jars = Collections.singletonList(new Path(tmpFile.getAbsolutePath()))__		} else {_			jars = null__		}__		Collection<CompletableFuture<BlobKey>> allFutures = new ArrayList<>(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (_			final BlobServer server = new BlobServer(config, blobStoreServer)__			final BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, blobStoreCache)) {__			server.start()___			_			final InetSocketAddress serverAddress =_				new InetSocketAddress("localhost", server.getPort())__			__			for (int i = 0_ i < concurrentPutOperations_ i++) {_				final Supplier<BlobKey> callable__				if (blobType == PERMANENT_BLOB) {_					_					callable =_						() -> {_							try {_								List<PermanentBlobKey> keys =_									BlobClient.uploadJarFiles(serverAddress, config, jobId, jars)__								assertEquals(1, keys.size())__								BlobKey uploadedKey = keys.get(0)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_						}___				} else {_					callable =_						() -> {_							try {_								BlockingInputStream inputStream =_									new BlockingInputStream(countDownLatch, data)__								BlobKey uploadedKey = put(cache, jobId, inputStream, blobType)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_					}__				}_				CompletableFuture<BlobKey> putFuture = CompletableFuture_					.supplyAsync(callable, executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while (blobKeyIterator.hasNext()) {_				_				verifyKeyDifferentHashEquals(blobKey, blobKeyIterator.next())__			}__			_			verifyContents(server, jobId, blobKey, data)___			_			if (blobType == PERMANENT_BLOB) {_				verify(blobStoreServer, times(1)).put(any(File.class), eq(jobId), eq(blobKey))__			} else {_				_				_				verify(blobStoreServer, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__			}_			_			verify(blobStoreCache, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store,and,that,the,files,are,not,corrupt,at,any,time,param,job,id,job,id,to,use,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,concurrent,put,operations,nullable,final,job,id,job,id,final,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,execution,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,final,blob,store,blob,store,server,mock,blob,store,class,final,blob,store,blob,store,cache,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,final,list,path,jars,if,blob,type,file,tmp,file,temporary,folder,new,file,file,utils,write,byte,array,to,file,tmp,file,data,jars,collections,singleton,list,new,path,tmp,file,get,absolute,path,else,jars,null,collection,completable,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,server,new,blob,server,config,blob,store,server,final,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,blob,store,cache,server,start,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,for,int,i,0,i,concurrent,put,operations,i,final,supplier,blob,key,callable,if,blob,type,callable,try,list,permanent,blob,key,keys,blob,client,upload,jar,files,server,address,config,job,id,jars,assert,equals,1,keys,size,blob,key,uploaded,key,keys,get,0,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,else,callable,try,blocking,input,stream,input,stream,new,blocking,input,stream,count,down,latch,data,blob,key,uploaded,key,put,cache,job,id,input,stream,blob,type,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,completable,future,blob,key,put,future,completable,future,supply,async,callable,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,verify,key,different,hash,equals,blob,key,blob,key,iterator,next,verify,contents,server,job,id,blob,key,data,if,blob,type,verify,blob,store,server,times,1,put,any,file,class,eq,job,id,eq,blob,key,else,verify,blob,store,server,times,0,put,any,file,class,eq,job,id,eq,blob,key,verify,blob,store,cache,times,0,put,any,file,class,eq,job,id,eq,blob,key,finally,executor,shutdown,now
BlobCachePutTest -> private void testConcurrentPutOperations( 			@Nullable final JobID jobId, final BlobKey.BlobType blobType) 			throws IOException, InterruptedException, ExecutionException;1517915730;[FLINK-6020]_Tests that concurrent put operations will only upload the file once to the {@link BlobStore}_and that the files are not corrupt at any time.__@param jobId_job ID to use (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient;private void testConcurrentPutOperations(_			@Nullable final JobID jobId, final BlobKey.BlobType blobType)_			throws IOException, InterruptedException, ExecutionException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		final BlobStore blobStoreServer = mock(BlobStore.class)__		final BlobStore blobStoreCache = mock(BlobStore.class)___		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		final List<Path> jars__		if (blobType == PERMANENT_BLOB) {_			_			File tmpFile = temporaryFolder.newFile()__			FileUtils.writeByteArrayToFile(tmpFile, data)__			jars = Collections.singletonList(new Path(tmpFile.getAbsolutePath()))__		} else {_			jars = null__		}__		Collection<CompletableFuture<BlobKey>> allFutures = new ArrayList<>(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (_			final BlobServer server = new BlobServer(config, blobStoreServer)__			final BlobCacheService cache = new BlobCacheService(config, blobStoreCache, new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			_			final InetSocketAddress serverAddress =_				new InetSocketAddress("localhost", server.getPort())__			__			for (int i = 0_ i < concurrentPutOperations_ i++) {_				final Supplier<BlobKey> callable__				if (blobType == PERMANENT_BLOB) {_					_					callable =_						() -> {_							try {_								List<PermanentBlobKey> keys =_									BlobClient.uploadJarFiles(serverAddress, config, jobId, jars)__								assertEquals(1, keys.size())__								BlobKey uploadedKey = keys.get(0)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_						}___				} else {_					callable =_						() -> {_							try {_								BlockingInputStream inputStream =_									new BlockingInputStream(countDownLatch, data)__								BlobKey uploadedKey = put(cache, jobId, inputStream, blobType)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_					}__				}_				CompletableFuture<BlobKey> putFuture = CompletableFuture_					.supplyAsync(callable, executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while (blobKeyIterator.hasNext()) {_				_				verifyKeyDifferentHashEquals(blobKey, blobKeyIterator.next())__			}__			_			verifyContents(server, jobId, blobKey, data)___			_			if (blobType == PERMANENT_BLOB) {_				verify(blobStoreServer, times(1)).put(any(File.class), eq(jobId), eq(blobKey))__			} else {_				_				_				verify(blobStoreServer, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__			}_			_			verify(blobStoreCache, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store,and,that,the,files,are,not,corrupt,at,any,time,param,job,id,job,id,to,use,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,concurrent,put,operations,nullable,final,job,id,job,id,final,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,execution,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,final,blob,store,blob,store,server,mock,blob,store,class,final,blob,store,blob,store,cache,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,final,list,path,jars,if,blob,type,file,tmp,file,temporary,folder,new,file,file,utils,write,byte,array,to,file,tmp,file,data,jars,collections,singleton,list,new,path,tmp,file,get,absolute,path,else,jars,null,collection,completable,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,server,new,blob,server,config,blob,store,server,final,blob,cache,service,cache,new,blob,cache,service,config,blob,store,cache,new,inet,socket,address,localhost,server,get,port,server,start,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,for,int,i,0,i,concurrent,put,operations,i,final,supplier,blob,key,callable,if,blob,type,callable,try,list,permanent,blob,key,keys,blob,client,upload,jar,files,server,address,config,job,id,jars,assert,equals,1,keys,size,blob,key,uploaded,key,keys,get,0,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,else,callable,try,blocking,input,stream,input,stream,new,blocking,input,stream,count,down,latch,data,blob,key,uploaded,key,put,cache,job,id,input,stream,blob,type,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,completable,future,blob,key,put,future,completable,future,supply,async,callable,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,verify,key,different,hash,equals,blob,key,blob,key,iterator,next,verify,contents,server,job,id,blob,key,data,if,blob,type,verify,blob,store,server,times,1,put,any,file,class,eq,job,id,eq,blob,key,else,verify,blob,store,server,times,0,put,any,file,class,eq,job,id,eq,blob,key,verify,blob,store,cache,times,0,put,any,file,class,eq,job,id,eq,blob,key,finally,executor,shutdown,now
BlobCachePutTest -> private void testConcurrentPutOperations( 			@Nullable final JobID jobId, final BlobKey.BlobType blobType) 			throws IOException, InterruptedException, ExecutionException;1525420604;[FLINK-6020]_Tests that concurrent put operations will only upload the file once to the {@link BlobStore}_and that the files are not corrupt at any time.__@param jobId_job ID to use (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient;private void testConcurrentPutOperations(_			@Nullable final JobID jobId, final BlobKey.BlobType blobType)_			throws IOException, InterruptedException, ExecutionException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		final BlobStore blobStoreServer = mock(BlobStore.class)__		final BlobStore blobStoreCache = mock(BlobStore.class)___		int concurrentPutOperations = 2__		int dataSize = 1024___		final CountDownLatch countDownLatch = new CountDownLatch(concurrentPutOperations)__		final byte[] data = new byte[dataSize]___		final List<Path> jars__		if (blobType == PERMANENT_BLOB) {_			_			File tmpFile = temporaryFolder.newFile()__			FileUtils.writeByteArrayToFile(tmpFile, data)__			jars = Collections.singletonList(new Path(tmpFile.getAbsolutePath()))__		} else {_			jars = null__		}__		Collection<CompletableFuture<BlobKey>> allFutures = new ArrayList<>(concurrentPutOperations)___		ExecutorService executor = Executors.newFixedThreadPool(concurrentPutOperations)___		try (_			final BlobServer server = new BlobServer(config, blobStoreServer)__			final BlobCacheService cache = new BlobCacheService(config, blobStoreCache, new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			_			final InetSocketAddress serverAddress =_				new InetSocketAddress("localhost", server.getPort())__			__			for (int i = 0_ i < concurrentPutOperations_ i++) {_				final Supplier<BlobKey> callable__				if (blobType == PERMANENT_BLOB) {_					_					callable =_						() -> {_							try {_								List<PermanentBlobKey> keys =_									BlobClient.uploadFiles(serverAddress, config, jobId, jars)__								assertEquals(1, keys.size())__								BlobKey uploadedKey = keys.get(0)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_						}___				} else {_					callable =_						() -> {_							try {_								BlockingInputStream inputStream =_									new BlockingInputStream(countDownLatch, data)__								BlobKey uploadedKey = put(cache, jobId, inputStream, blobType)__								_								verifyContents(server, jobId, uploadedKey, data)__								return uploadedKey__							} catch (IOException e) {_								throw new CompletionException(new FlinkException(_									"Could not upload blob.", e))__							}_					}__				}_				CompletableFuture<BlobKey> putFuture = CompletableFuture_					.supplyAsync(callable, executor)___				allFutures.add(putFuture)__			}__			FutureUtils.ConjunctFuture<Collection<BlobKey>> conjunctFuture = FutureUtils.combineAll(allFutures)___			_			Collection<BlobKey> blobKeys = conjunctFuture.get()___			Iterator<BlobKey> blobKeyIterator = blobKeys.iterator()___			assertTrue(blobKeyIterator.hasNext())___			BlobKey blobKey = blobKeyIterator.next()___			_			while (blobKeyIterator.hasNext()) {_				_				verifyKeyDifferentHashEquals(blobKey, blobKeyIterator.next())__			}__			_			verifyContents(server, jobId, blobKey, data)___			_			if (blobType == PERMANENT_BLOB) {_				verify(blobStoreServer, times(1)).put(any(File.class), eq(jobId), eq(blobKey))__			} else {_				_				_				verify(blobStoreServer, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__			}_			_			verify(blobStoreCache, times(0)).put(any(File.class), eq(jobId), eq(blobKey))__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,put,operations,will,only,upload,the,file,once,to,the,link,blob,store,and,that,the,files,are,not,corrupt,at,any,time,param,job,id,job,id,to,use,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,concurrent,put,operations,nullable,final,job,id,job,id,final,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,execution,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,final,blob,store,blob,store,server,mock,blob,store,class,final,blob,store,blob,store,cache,mock,blob,store,class,int,concurrent,put,operations,2,int,data,size,1024,final,count,down,latch,count,down,latch,new,count,down,latch,concurrent,put,operations,final,byte,data,new,byte,data,size,final,list,path,jars,if,blob,type,file,tmp,file,temporary,folder,new,file,file,utils,write,byte,array,to,file,tmp,file,data,jars,collections,singleton,list,new,path,tmp,file,get,absolute,path,else,jars,null,collection,completable,future,blob,key,all,futures,new,array,list,concurrent,put,operations,executor,service,executor,executors,new,fixed,thread,pool,concurrent,put,operations,try,final,blob,server,server,new,blob,server,config,blob,store,server,final,blob,cache,service,cache,new,blob,cache,service,config,blob,store,cache,new,inet,socket,address,localhost,server,get,port,server,start,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,for,int,i,0,i,concurrent,put,operations,i,final,supplier,blob,key,callable,if,blob,type,callable,try,list,permanent,blob,key,keys,blob,client,upload,files,server,address,config,job,id,jars,assert,equals,1,keys,size,blob,key,uploaded,key,keys,get,0,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,else,callable,try,blocking,input,stream,input,stream,new,blocking,input,stream,count,down,latch,data,blob,key,uploaded,key,put,cache,job,id,input,stream,blob,type,verify,contents,server,job,id,uploaded,key,data,return,uploaded,key,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,upload,blob,e,completable,future,blob,key,put,future,completable,future,supply,async,callable,executor,all,futures,add,put,future,future,utils,conjunct,future,collection,blob,key,conjunct,future,future,utils,combine,all,all,futures,collection,blob,key,blob,keys,conjunct,future,get,iterator,blob,key,blob,key,iterator,blob,keys,iterator,assert,true,blob,key,iterator,has,next,blob,key,blob,key,blob,key,iterator,next,while,blob,key,iterator,has,next,verify,key,different,hash,equals,blob,key,blob,key,iterator,next,verify,contents,server,job,id,blob,key,data,if,blob,type,verify,blob,store,server,times,1,put,any,file,class,eq,job,id,eq,blob,key,else,verify,blob,store,server,times,0,put,any,file,class,eq,job,id,eq,blob,key,verify,blob,store,cache,times,0,put,any,file,class,eq,job,id,eq,blob,key,finally,executor,shutdown,now
BlobCachePutTest -> static void verifyDeletedEventually(BlobServer server, @Nullable JobID jobId, BlobKey... keys) 			throws IOException, InterruptedException;1508578816;Checks that the given blob will be deleted at the {@link BlobServer} eventually (waits at most 30s).__@param server_BLOB server_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param keys_key(s) identifying the BLOB to request;static void verifyDeletedEventually(BlobServer server, @Nullable JobID jobId, BlobKey... keys)_			throws IOException, InterruptedException {__		long deadline = System.currentTimeMillis() + 30_000L__		do {_			Thread.sleep(10)__		}_		while (checkFilesExist(jobId, Arrays.asList(keys), server, false) != 0 &&_			System.currentTimeMillis() < deadline)___		for (BlobKey key : keys) {_			verifyDeleted(server, jobId, key)__		}_	};checks,that,the,given,blob,will,be,deleted,at,the,link,blob,server,eventually,waits,at,most,30s,param,server,blob,server,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,keys,key,s,identifying,the,blob,to,request;static,void,verify,deleted,eventually,blob,server,server,nullable,job,id,job,id,blob,key,keys,throws,ioexception,interrupted,exception,long,deadline,system,current,time,millis,do,thread,sleep,10,while,check,files,exist,job,id,arrays,as,list,keys,server,false,0,system,current,time,millis,deadline,for,blob,key,key,keys,verify,deleted,server,job,id,key
BlobCachePutTest -> static void verifyDeletedEventually(BlobServer server, @Nullable JobID jobId, BlobKey... keys) 			throws IOException, InterruptedException;1517915730;Checks that the given blob will be deleted at the {@link BlobServer} eventually (waits at most 30s).__@param server_BLOB server_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param keys_key(s) identifying the BLOB to request;static void verifyDeletedEventually(BlobServer server, @Nullable JobID jobId, BlobKey... keys)_			throws IOException, InterruptedException {__		long deadline = System.currentTimeMillis() + 30_000L__		do {_			Thread.sleep(10)__		}_		while (checkFilesExist(jobId, Arrays.asList(keys), server, false) != 0 &&_			System.currentTimeMillis() < deadline)___		for (BlobKey key : keys) {_			verifyDeleted(server, jobId, key)__		}_	};checks,that,the,given,blob,will,be,deleted,at,the,link,blob,server,eventually,waits,at,most,30s,param,server,blob,server,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,keys,key,s,identifying,the,blob,to,request;static,void,verify,deleted,eventually,blob,server,server,nullable,job,id,job,id,blob,key,keys,throws,ioexception,interrupted,exception,long,deadline,system,current,time,millis,do,thread,sleep,10,while,check,files,exist,job,id,arrays,as,list,keys,server,false,0,system,current,time,millis,deadline,for,blob,key,key,keys,verify,deleted,server,job,id,key
BlobCachePutTest -> static void verifyDeletedEventually(BlobServer server, @Nullable JobID jobId, BlobKey... keys) 			throws IOException, InterruptedException;1525420604;Checks that the given blob will be deleted at the {@link BlobServer} eventually (waits at most 30s).__@param server_BLOB server_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param keys_key(s) identifying the BLOB to request;static void verifyDeletedEventually(BlobServer server, @Nullable JobID jobId, BlobKey... keys)_			throws IOException, InterruptedException {__		long deadline = System.currentTimeMillis() + 30_000L__		do {_			Thread.sleep(10)__		}_		while (checkFilesExist(jobId, Arrays.asList(keys), server, false) != 0 &&_			System.currentTimeMillis() < deadline)___		for (BlobKey key : keys) {_			verifyDeleted(server, jobId, key)__		}_	};checks,that,the,given,blob,will,be,deleted,at,the,link,blob,server,eventually,waits,at,most,30s,param,server,blob,server,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,keys,key,s,identifying,the,blob,to,request;static,void,verify,deleted,eventually,blob,server,server,nullable,job,id,job,id,blob,key,keys,throws,ioexception,interrupted,exception,long,deadline,system,current,time,millis,do,thread,sleep,10,while,check,files,exist,job,id,arrays,as,list,keys,server,false,0,system,current,time,millis,deadline,for,blob,key,key,keys,verify,deleted,server,job,id,key
