# id;timestamp;commentText;codeText;commentWords;codeWords
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1484038132;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetaData(pending.getCheckpointId(), pending.getCheckpointTimestamp()))__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpoint()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,meta,data,pending,get,checkpoint,id,pending,get,checkpoint,timestamp,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1485531920;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetaData(pending.getCheckpointId(), pending.getCheckpointTimestamp()))__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpoint()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,meta,data,pending,get,checkpoint,id,pending,get,checkpoint,timestamp,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1487762095;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpoint()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1488304750;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpointNonExternalized()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,non,externalized,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1489671806;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpointNonExternalized()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,non,externalized,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1489770896;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpointNonExternalized()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,non,externalized,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1492867556;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpointNonExternalized()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,non,externalized,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1492867556;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpointNonExternalized()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,non,externalized,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1493403095;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpointNonExternalized()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,non,externalized,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1495184252;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpointNonExternalized()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,non,externalized,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1501588490;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpointNonExternalized()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,non,externalized,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1502801814;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpointNonExternalized()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,non,externalized,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1502802710;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpointNonExternalized()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,non,externalized,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1515177485;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpointNonExternalized()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,non,externalized,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1516295283;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpoint()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1517489694;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpoint()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1517489695;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpoint()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1517489695;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(any(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpoint()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,any,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testPendingCheckpointStatsCallbacks() throws Exception;1538998760;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testPendingCheckpointStatsCallbacks() throws Exception {_		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__			verify(callback, times(1)).reportSubtaskStats(nullable(JobVertexID.class), any(SubtaskStateStats.class))___			pending.finalizeCheckpoint()__			verify(callback, times(1)).reportCompletedCheckpoint(any(String.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortSubsumed()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortDeclined()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortError(new Exception("Expected test error"))__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}__		{_			_			PendingCheckpointStats callback = mock(PendingCheckpointStats.class)__			PendingCheckpoint pending = createPendingCheckpoint(_					CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__			pending.setStatsCallback(callback)___			pending.abortExpired()__			verify(callback, times(1)).reportFailedCheckpoint(anyLong(), any(Exception.class))__		}_	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,pending,checkpoint,stats,callbacks,throws,exception,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,acknowledge,task,null,new,checkpoint,metrics,verify,callback,times,1,report,subtask,stats,nullable,job,vertex,id,class,any,subtask,state,stats,class,pending,finalize,checkpoint,verify,callback,times,1,report,completed,checkpoint,any,string,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,subsumed,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,declined,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,error,new,exception,expected,test,error,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class,pending,checkpoint,stats,callback,mock,pending,checkpoint,stats,class,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,set,stats,callback,callback,pending,abort,expired,verify,callback,times,1,report,failed,checkpoint,any,long,any,exception,class
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1489770896;FLINK-5985_<p>_This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, mock(SubtaskState.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getTaskStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,mock,subtask,state,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,task,states,is,empty
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1492867556;FLINK-5985_<p>_This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, mock(SubtaskState.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getTaskStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,mock,subtask,state,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,task,states,is,empty
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1492867556;FLINK-5985_<p>_This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, mock(SubtaskState.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getTaskStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,mock,subtask,state,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,task,states,is,empty
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1493403095;FLINK-5985_<p>_This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, mock(SubtaskState.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getOperatorStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,mock,subtask,state,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1495184252;FLINK-5985_<p>_This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, mock(SubtaskState.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getOperatorStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,mock,subtask,state,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1501588490;FLINK-5985_<p>_This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, mock(SubtaskState.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getOperatorStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,mock,subtask,state,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1502801814;FLINK-5985_<p>_This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, mock(TaskStateSnapshot.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getOperatorStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,mock,task,state,snapshot,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1502802710;FLINK-5985_<p>_This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, mock(TaskStateSnapshot.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getOperatorStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,mock,task,state,snapshot,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1515177485;FLINK-5985_<p>_This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, mock(TaskStateSnapshot.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getOperatorStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,mock,task,state,snapshot,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1516295283;FLINK-5985.__<p>This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__		pending.acknowledgeTask(ATTEMPT_ID, mock(TaskStateSnapshot.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getOperatorStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,acknowledge,task,mock,task,state,snapshot,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1517489694;FLINK-5985.__<p>This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__		pending.acknowledgeTask(ATTEMPT_ID, mock(TaskStateSnapshot.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getOperatorStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,acknowledge,task,mock,task,state,snapshot,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1517489695;FLINK-5985.__<p>This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__		pending.acknowledgeTask(ATTEMPT_ID, mock(TaskStateSnapshot.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getOperatorStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,acknowledge,task,mock,task,state,snapshot,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1517489695;FLINK-5985.__<p>This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__		pending.acknowledgeTask(ATTEMPT_ID, mock(TaskStateSnapshot.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getOperatorStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,acknowledge,task,mock,task,state,snapshot,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception;1538998760;FLINK-5985.__<p>This tests checks the inverse of {@link #testNullSubtaskStateLeadsToStatelessTask()}. We want to test that_for subtasks that acknowledge some state are given an entry in the task states of the checkpoint.;@Test_	public void testNonNullSubtaskStateLeadsToStatefulTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__		pending.acknowledgeTask(ATTEMPT_ID, mock(TaskStateSnapshot.class), mock(CheckpointMetrics.class))__		Assert.assertFalse(pending.getOperatorStates().isEmpty())__	};flink,5985,p,this,tests,checks,the,inverse,of,link,test,null,subtask,state,leads,to,stateless,task,we,want,to,test,that,for,subtasks,that,acknowledge,some,state,are,given,an,entry,in,the,task,states,of,the,checkpoint;test,public,void,test,non,null,subtask,state,leads,to,stateful,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,acknowledge,task,mock,task,state,snapshot,class,mock,checkpoint,metrics,class,assert,assert,false,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1476432306;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		TaskState state = mock(TaskState.class)___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortDeclined()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortExpired()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortSubsumed()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,task,state,state,mock,task,state,class,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,declined,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,expired,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,subsumed,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1476432429;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		TaskState state = mock(TaskState.class)___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortDeclined()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortExpired()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortSubsumed()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,task,state,state,mock,task,state,class,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,declined,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,expired,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,subsumed,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1479852017;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		TaskState state = mock(TaskState.class)___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortDeclined()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortExpired()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortSubsumed()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,task,state,state,mock,task,state,class,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,declined,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,expired,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,subsumed,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1481295943;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		TaskState state = mock(TaskState.class)___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortDeclined()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortExpired()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortSubsumed()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,task,state,state,mock,task,state,class,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,declined,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,expired,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,subsumed,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1484038132;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		TaskState state = mock(TaskState.class)___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortDeclined()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortExpired()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir)__		setTaskState(pending, state)___		pending.abortSubsumed()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,task,state,state,mock,task,state,class,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,declined,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,expired,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,set,task,state,pending,state,pending,abort,subsumed,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1485531920;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		TaskState state = mock(TaskState.class)__		QueueExecutor executor = new QueueExecutor()___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,task,state,state,mock,task,state,class,queue,executor,executor,new,queue,executor,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1487762095;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		TaskState state = mock(TaskState.class)__		QueueExecutor executor = new QueueExecutor()___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,task,state,state,mock,task,state,class,queue,executor,executor,new,queue,executor,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1488304750;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		TaskState state = mock(TaskState.class)__		QueueExecutor executor = new QueueExecutor()___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,task,state,state,mock,task,state,class,queue,executor,executor,new,queue,executor,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1489671806;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		TaskState state = mock(TaskState.class)__		QueueExecutor executor = new QueueExecutor()___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,task,state,state,mock,task,state,class,queue,executor,executor,new,queue,executor,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1489770896;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		TaskState state = mock(TaskState.class)__		QueueExecutor executor = new QueueExecutor()___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,task,state,state,mock,task,state,class,queue,executor,executor,new,queue,executor,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1492867556;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		QueueExecutor executor = new QueueExecutor()___		TaskState state = mock(TaskState.class)__		doNothing().when(state).registerSharedStates(any(SharedStateRegistry.class))__		doNothing().when(state).unregisterSharedStates(any(SharedStateRegistry.class))___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__		verify(state, times(1)).discardSharedStatesOnFail()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__		verify(state, times(1)).discardSharedStatesOnFail()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__		verify(state, times(1)).discardSharedStatesOnFail()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__		verify(state, times(1)).discardSharedStatesOnFail()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,queue,executor,executor,new,queue,executor,task,state,state,mock,task,state,class,do,nothing,when,state,register,shared,states,any,shared,state,registry,class,do,nothing,when,state,unregister,shared,states,any,shared,state,registry,class,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,verify,state,times,1,discard,shared,states,on,fail,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,verify,state,times,1,discard,shared,states,on,fail,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,verify,state,times,1,discard,shared,states,on,fail,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state,verify,state,times,1,discard,shared,states,on,fail
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1492867556;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		QueueExecutor executor = new QueueExecutor()___		TaskState state = mock(TaskState.class)__		doNothing().when(state).registerSharedStates(any(SharedStateRegistry.class))__		doNothing().when(state).unregisterSharedStates(any(SharedStateRegistry.class))___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,queue,executor,executor,new,queue,executor,task,state,state,mock,task,state,class,do,nothing,when,state,register,shared,states,any,shared,state,registry,class,do,nothing,when,state,unregister,shared,states,any,shared,state,registry,class,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1493403095;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		QueueExecutor executor = new QueueExecutor()___		OperatorState state = mock(OperatorState.class)__		doNothing().when(state).registerSharedStates(any(SharedStateRegistry.class))__		doNothing().when(state).unregisterSharedStates(any(SharedStateRegistry.class))___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,queue,executor,executor,new,queue,executor,operator,state,state,mock,operator,state,class,do,nothing,when,state,register,shared,states,any,shared,state,registry,class,do,nothing,when,state,unregister,shared,states,any,shared,state,registry,class,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1495184252;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		QueueExecutor executor = new QueueExecutor()___		OperatorState state = mock(OperatorState.class)__		doNothing().when(state).registerSharedStates(any(SharedStateRegistry.class))___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,queue,executor,executor,new,queue,executor,operator,state,state,mock,operator,state,class,do,nothing,when,state,register,shared,states,any,shared,state,registry,class,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1501588490;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		QueueExecutor executor = new QueueExecutor()___		OperatorState state = mock(OperatorState.class)__		doNothing().when(state).registerSharedStates(any(SharedStateRegistry.class))___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,queue,executor,executor,new,queue,executor,operator,state,state,mock,operator,state,class,do,nothing,when,state,register,shared,states,any,shared,state,registry,class,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1502801814;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		QueueExecutor executor = new QueueExecutor()___		OperatorState state = mock(OperatorState.class)__		doNothing().when(state).registerSharedStates(any(SharedStateRegistry.class))___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,queue,executor,executor,new,queue,executor,operator,state,state,mock,operator,state,class,do,nothing,when,state,register,shared,states,any,shared,state,registry,class,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1502802710;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false, false)__		QueueExecutor executor = new QueueExecutor()___		OperatorState state = mock(OperatorState.class)__		doNothing().when(state).registerSharedStates(any(SharedStateRegistry.class))___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,false,queue,executor,executor,new,queue,executor,operator,state,state,mock,operator,state,class,do,nothing,when,state,register,shared,states,any,shared,state,registry,class,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1515177485;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false, false)__		QueueExecutor executor = new QueueExecutor()___		OperatorState state = mock(OperatorState.class)__		doNothing().when(state).registerSharedStates(any(SharedStateRegistry.class))___		String targetDir = tmpFolder.newFolder().getAbsolutePath()___		_		PendingCheckpoint pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, targetDir, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,false,queue,executor,executor,new,queue,executor,operator,state,state,mock,operator,state,class,do,nothing,when,state,register,shared,states,any,shared,state,registry,class,string,target,dir,tmp,folder,new,folder,get,absolute,path,pending,checkpoint,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,target,dir,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1516295283;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__		QueueExecutor executor = new QueueExecutor()___		OperatorState state = mock(OperatorState.class)__		doNothing().when(state).registerSharedStates(any(SharedStateRegistry.class))___		_		PendingCheckpoint pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,queue,executor,executor,new,queue,executor,operator,state,state,mock,operator,state,class,do,nothing,when,state,register,shared,states,any,shared,state,registry,class,pending,checkpoint,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1517489694;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false)__		QueueExecutor executor = new QueueExecutor()___		OperatorState state = mock(OperatorState.class)__		doNothing().when(state).registerSharedStates(any(SharedStateRegistry.class))___		_		PendingCheckpoint pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,checkpoint,type,savepoint,false,false,false,false,false,queue,executor,executor,new,queue,executor,operator,state,state,mock,operator,state,class,do,nothing,when,state,register,shared,states,any,shared,state,registry,class,pending,checkpoint,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1517489695;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false)__		QueueExecutor executor = new QueueExecutor()___		OperatorState state = mock(OperatorState.class)__		doNothing().when(state).registerSharedStates(any(SharedStateRegistry.class))___		_		PendingCheckpoint pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,checkpoint,type,savepoint,false,false,false,false,false,queue,executor,executor,new,queue,executor,operator,state,state,mock,operator,state,class,do,nothing,when,state,register,shared,states,any,shared,state,registry,class,pending,checkpoint,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1517489695;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false)__		QueueExecutor executor = new QueueExecutor()___		OperatorState state = mock(OperatorState.class)__		doNothing().when(state).registerSharedStates(any(SharedStateRegistry.class))___		_		PendingCheckpoint pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,checkpoint,type,savepoint,false,false,false,false,false,queue,executor,executor,new,queue,executor,operator,state,state,mock,operator,state,class,do,nothing,when,state,register,shared,states,any,shared,state,registry,class,pending,checkpoint,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbortDiscardsState() throws Exception;1538998760;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbortDiscardsState() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false)__		QueueExecutor executor = new QueueExecutor()___		OperatorState state = mock(OperatorState.class)__		doNothing().when(state).registerSharedStates(any(SharedStateRegistry.class))___		_		PendingCheckpoint pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortDeclined()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortExpired()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint(props, executor)__		setTaskState(pending, state)___		pending.abortSubsumed()__		_		executor.runQueuedCommands()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,discards,state,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,checkpoint,type,savepoint,false,false,false,false,false,queue,executor,executor,new,queue,executor,operator,state,state,mock,operator,state,class,do,nothing,when,state,register,shared,states,any,shared,state,registry,class,pending,checkpoint,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,declined,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,expired,executor,run,queued,commands,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,props,executor,set,task,state,pending,state,pending,abort,subsumed,executor,run,queued,commands,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1489770896;FLINK-5985_<p>_Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getTaskStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,task,states,is,empty
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1492867556;FLINK-5985_<p>_Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getTaskStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,task,states,is,empty
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1492867556;FLINK-5985_<p>_Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getTaskStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,task,states,is,empty
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1493403095;FLINK-5985_<p>_Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getOperatorStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1495184252;FLINK-5985_<p>_Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getOperatorStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1501588490;FLINK-5985_<p>_Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getOperatorStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1502801814;FLINK-5985_<p>_Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getOperatorStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1502802710;FLINK-5985_<p>_Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getOperatorStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1515177485;FLINK-5985_<p>_Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(CheckpointProperties.forStandardCheckpoint(), null)__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getOperatorStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,standard,checkpoint,null,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1516295283;FLINK-5985.__<p>Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getOperatorStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1517489694;FLINK-5985.__<p>Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getOperatorStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1517489695;FLINK-5985.__<p>Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getOperatorStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1517489695;FLINK-5985.__<p>Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getOperatorStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception;1538998760;FLINK-5985.__<p>Ensures that subtasks that acknowledge their state as 'null' are considered stateless. This means that they_should not appear in the task states map of the checkpoint.;@Test_	public void testNullSubtaskStateLeadsToStatelessTask() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint(_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION))__		pending.acknowledgeTask(ATTEMPT_ID, null, mock(CheckpointMetrics.class))__		Assert.assertTrue(pending.getOperatorStates().isEmpty())__	};flink,5985,p,ensures,that,subtasks,that,acknowledge,their,state,as,null,are,considered,stateless,this,means,that,they,should,not,appear,in,the,task,states,map,of,the,checkpoint;test,public,void,test,null,subtask,state,leads,to,stateless,task,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,pending,acknowledge,task,null,mock,checkpoint,metrics,class,assert,assert,true,pending,get,operator,states,is,empty
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1471454287;Tests that pending checkpoints can be subsumed.;@Test_	public void testCanBeSubsumed() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint()__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed;test,public,void,test,can,be,subsumed,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1472663401;Tests that pending checkpoints can be subsumed.;@Test_	public void testCanBeSubsumed() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint()__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed;test,public,void,test,can,be,subsumed,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1475231926;Tests that pending checkpoints can be subsumed.;@Test_	public void testCanBeSubsumed() throws Exception {_		PendingCheckpoint pending = createPendingCheckpoint()__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed;test,public,void,test,can,be,subsumed,throws,exception,pending,checkpoint,pending,create,pending,checkpoint,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1476432306;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1476432429;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1479852017;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1481295943;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1484038132;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1485531920;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1487762095;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1488304750;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1489671806;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1489770896;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1492867556;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1492867556;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1493403095;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1495184252;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1501588490;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1502801814;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1502802710;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1515177485;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced, "ignored")__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed, "ignored")__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,ignored,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,ignored,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1516295283;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, true, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced)__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, true, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed)__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,true,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1517489694;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, CheckpointType.SAVEPOINT, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced)__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed)__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,checkpoint,type,savepoint,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,checkpoint,type,savepoint,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1517489695;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, CheckpointType.SAVEPOINT, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced)__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed)__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,checkpoint,type,savepoint,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,checkpoint,type,savepoint,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1517489695;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, CheckpointType.SAVEPOINT, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced)__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed)__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,checkpoint,type,savepoint,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,checkpoint,type,savepoint,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	public void testCanBeSubsumed() throws Exception;1538998760;Tests that pending checkpoints can be subsumed iff they are forced.;@Test_	public void testCanBeSubsumed() throws Exception {_		_		CheckpointProperties forced = new CheckpointProperties(true, CheckpointType.SAVEPOINT, false, false, false, false, false)__		PendingCheckpoint pending = createPendingCheckpoint(forced)__		assertFalse(pending.canBeSubsumed())___		try {_			pending.abortSubsumed()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}__		_		CheckpointProperties subsumed = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false)__		pending = createPendingCheckpoint(subsumed)__		assertTrue(pending.canBeSubsumed())__	};tests,that,pending,checkpoints,can,be,subsumed,iff,they,are,forced;test,public,void,test,can,be,subsumed,throws,exception,checkpoint,properties,forced,new,checkpoint,properties,true,checkpoint,type,savepoint,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,forced,assert,false,pending,can,be,subsumed,try,pending,abort,subsumed,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,checkpoint,properties,subsumed,new,checkpoint,properties,false,checkpoint,type,savepoint,false,false,false,false,false,pending,create,pending,checkpoint,subsumed,assert,true,pending,can,be,subsumed
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbort() throws Exception;1471454287;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbort() throws Exception {_		TaskState state = mock(TaskState.class)___		_		PendingCheckpoint pending = createPendingCheckpoint()__		setTaskState(pending, state)___		pending.abortDeclined()__		verify(state, times(1)).discard(Matchers.any(ClassLoader.class))___		_		Mockito.reset(state)___		pending = createPendingCheckpoint()__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		verify(state, times(1)).discard(Matchers.any(ClassLoader.class))___		_		Mockito.reset(state)___		pending = createPendingCheckpoint()__		setTaskState(pending, state)___		pending.abortExpired()__		verify(state, times(1)).discard(Matchers.any(ClassLoader.class))___		_		Mockito.reset(state)___		pending = createPendingCheckpoint()__		setTaskState(pending, state)___		pending.abortSubsumed()__		verify(state, times(1)).discard(Matchers.any(ClassLoader.class))__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,throws,exception,task,state,state,mock,task,state,class,pending,checkpoint,pending,create,pending,checkpoint,set,task,state,pending,state,pending,abort,declined,verify,state,times,1,discard,matchers,any,class,loader,class,mockito,reset,state,pending,create,pending,checkpoint,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,verify,state,times,1,discard,matchers,any,class,loader,class,mockito,reset,state,pending,create,pending,checkpoint,set,task,state,pending,state,pending,abort,expired,verify,state,times,1,discard,matchers,any,class,loader,class,mockito,reset,state,pending,create,pending,checkpoint,set,task,state,pending,state,pending,abort,subsumed,verify,state,times,1,discard,matchers,any,class,loader,class
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbort() throws Exception;1472663401;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbort() throws Exception {_		TaskState state = mock(TaskState.class)___		_		PendingCheckpoint pending = createPendingCheckpoint()__		setTaskState(pending, state)___		pending.abortDeclined()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint()__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint()__		setTaskState(pending, state)___		pending.abortExpired()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint()__		setTaskState(pending, state)___		pending.abortSubsumed()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,throws,exception,task,state,state,mock,task,state,class,pending,checkpoint,pending,create,pending,checkpoint,set,task,state,pending,state,pending,abort,declined,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,set,task,state,pending,state,pending,abort,expired,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,set,task,state,pending,state,pending,abort,subsumed,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAbort() throws Exception;1475231926;Tests that abort discards state.;@Test_	@SuppressWarnings("unchecked")_	public void testAbort() throws Exception {_		TaskState state = mock(TaskState.class)___		_		PendingCheckpoint pending = createPendingCheckpoint()__		setTaskState(pending, state)___		pending.abortDeclined()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint()__		setTaskState(pending, state)___		pending.abortError(new Exception("Expected Test Exception"))__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint()__		setTaskState(pending, state)___		pending.abortExpired()__		verify(state, times(1)).discardState()___		_		Mockito.reset(state)___		pending = createPendingCheckpoint()__		setTaskState(pending, state)___		pending.abortSubsumed()__		verify(state, times(1)).discardState()__	};tests,that,abort,discards,state;test,suppress,warnings,unchecked,public,void,test,abort,throws,exception,task,state,state,mock,task,state,class,pending,checkpoint,pending,create,pending,checkpoint,set,task,state,pending,state,pending,abort,declined,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,set,task,state,pending,state,pending,abort,error,new,exception,expected,test,exception,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,set,task,state,pending,state,pending,abort,expired,verify,state,times,1,discard,state,mockito,reset,state,pending,create,pending,checkpoint,set,task,state,pending,state,pending,abort,subsumed,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	public void testFinalizeCheckpoint() throws Exception;1471454287;Tests that the CompletedCheckpoint `deleteStateWhenDisposed` flag is_correctly set to true.;@Test_	public void testFinalizeCheckpoint() throws Exception {_		TaskState state = mock(TaskState.class)__		PendingCheckpoint pending = createPendingCheckpoint()__		PendingCheckpointTest.setTaskState(pending, state)___		pending.acknowledgeTask(ATTEMPT_ID, null, 0, null)___		CompletedCheckpoint checkpoint = pending.finalizeCheckpoint()___		_		checkpoint.discard(ClassLoader.getSystemClassLoader())__		verify(state, times(1)).discard(Matchers.any(ClassLoader.class))__	};tests,that,the,completed,checkpoint,delete,state,when,disposed,flag,is,correctly,set,to,true;test,public,void,test,finalize,checkpoint,throws,exception,task,state,state,mock,task,state,class,pending,checkpoint,pending,create,pending,checkpoint,pending,checkpoint,test,set,task,state,pending,state,pending,acknowledge,task,null,0,null,completed,checkpoint,checkpoint,pending,finalize,checkpoint,checkpoint,discard,class,loader,get,system,class,loader,verify,state,times,1,discard,matchers,any,class,loader,class
PendingCheckpointTest -> @Test 	public void testFinalizeCheckpoint() throws Exception;1472663401;Tests that the CompletedCheckpoint `deleteStateWhenDisposed` flag is_correctly set to true.;@Test_	public void testFinalizeCheckpoint() throws Exception {_		TaskState state = mock(TaskState.class)__		PendingCheckpoint pending = createPendingCheckpoint()__		PendingCheckpointTest.setTaskState(pending, state)___		pending.acknowledgeTask(ATTEMPT_ID, null, null)___		CompletedCheckpoint checkpoint = pending.finalizeCheckpoint()___		_		checkpoint.discardState()__		verify(state, times(1)).discardState()__	};tests,that,the,completed,checkpoint,delete,state,when,disposed,flag,is,correctly,set,to,true;test,public,void,test,finalize,checkpoint,throws,exception,task,state,state,mock,task,state,class,pending,checkpoint,pending,create,pending,checkpoint,pending,checkpoint,test,set,task,state,pending,state,pending,acknowledge,task,null,null,completed,checkpoint,checkpoint,pending,finalize,checkpoint,checkpoint,discard,state,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	public void testFinalizeCheckpoint() throws Exception;1475231926;Tests that the CompletedCheckpoint `deleteStateWhenDisposed` flag is_correctly set to true.;@Test_	public void testFinalizeCheckpoint() throws Exception {_		TaskState state = mock(TaskState.class)__		PendingCheckpoint pending = createPendingCheckpoint()__		PendingCheckpointTest.setTaskState(pending, state)___		pending.acknowledgeTask(ATTEMPT_ID, null)___		CompletedCheckpoint checkpoint = pending.finalizeCheckpoint()___		_		checkpoint.discardState()__		verify(state, times(1)).discardState()__	};tests,that,the,completed,checkpoint,delete,state,when,disposed,flag,is,correctly,set,to,true;test,public,void,test,finalize,checkpoint,throws,exception,task,state,state,mock,task,state,class,pending,checkpoint,pending,create,pending,checkpoint,pending,checkpoint,test,set,task,state,pending,state,pending,acknowledge,task,null,completed,checkpoint,checkpoint,pending,finalize,checkpoint,checkpoint,discard,state,verify,state,times,1,discard,state
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1476432306;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null)__		pending.finalizeCheckpoint()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpoint()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		assertTrue(future.isDone())__	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,pending,finalize,checkpoint,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,assert,true,future,is,done
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1476432429;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null)__		pending.finalizeCheckpoint()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpoint()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		assertTrue(future.isDone())__	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,pending,finalize,checkpoint,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,assert,true,future,is,done
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1479852017;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null)__		pending.finalizeCheckpoint()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpoint()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		assertTrue(future.isDone())__	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,pending,finalize,checkpoint,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,assert,true,future,is,done
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1481295943;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null)__		pending.finalizeCheckpoint()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpoint()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,pending,finalize,checkpoint,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1484038132;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetaData(pending.getCheckpointId(), pending.getCheckpointTimestamp()))__		pending.finalizeCheckpoint()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpoint()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,meta,data,pending,get,checkpoint,id,pending,get,checkpoint,timestamp,pending,finalize,checkpoint,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1485531920;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetaData(pending.getCheckpointId(), pending.getCheckpointTimestamp()))__		pending.finalizeCheckpoint()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpoint()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,meta,data,pending,get,checkpoint,id,pending,get,checkpoint,timestamp,pending,finalize,checkpoint,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1487762095;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		pending.finalizeCheckpoint()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpoint()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,pending,finalize,checkpoint,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1488304750;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpointExternalized()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpointNonExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		try {_			pending.finalizeCheckpointExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,externalized,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,non,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,try,pending,finalize,checkpoint,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1489671806;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpointExternalized()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpointNonExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		try {_			pending.finalizeCheckpointExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,externalized,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,non,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,try,pending,finalize,checkpoint,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1489770896;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpointExternalized()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpointNonExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		try {_			pending.finalizeCheckpointExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,externalized,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,non,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,try,pending,finalize,checkpoint,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1492867556;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpointExternalized()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpointNonExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		try {_			pending.finalizeCheckpointExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,externalized,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,non,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,try,pending,finalize,checkpoint,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1492867556;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpointExternalized()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpointNonExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		try {_			pending.finalizeCheckpointExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,externalized,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,non,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,try,pending,finalize,checkpoint,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1493403095;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpointExternalized()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpointNonExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		try {_			pending.finalizeCheckpointExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,externalized,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,non,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,try,pending,finalize,checkpoint,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1495184252;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		Future<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpointExternalized()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpointNonExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		try {_			pending.finalizeCheckpointExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,externalized,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,non,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,try,pending,finalize,checkpoint,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1501588490;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		CompletableFuture<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpointExternalized()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpointNonExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		try {_			pending.finalizeCheckpointExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,completable,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,externalized,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,non,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,try,pending,finalize,checkpoint,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1502801814;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		CompletableFuture<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpointExternalized()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpointNonExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		try {_			pending.finalizeCheckpointExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,completable,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,externalized,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,non,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,try,pending,finalize,checkpoint,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1502802710;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		CompletableFuture<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpointExternalized()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpointNonExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		try {_			pending.finalizeCheckpointExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,completable,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,externalized,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,non,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,try,pending,finalize,checkpoint,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1515177485;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props, "ignored")__		CompletableFuture<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		String target = tmpFolder.newFolder().getAbsolutePath()__		pending = createPendingCheckpoint(props, target)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpointExternalized()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props, "ignored")__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpointNonExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_		try {_			pending.finalizeCheckpointExternalized()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,ignored,completable,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,string,target,tmp,folder,new,folder,get,absolute,path,pending,create,pending,checkpoint,props,target,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,externalized,assert,true,future,is,done,pending,create,pending,checkpoint,props,ignored,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,non,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored,try,pending,finalize,checkpoint,externalized,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1516295283;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props)__		CompletableFuture<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpoint()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpoint()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,completable,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1517489694;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props)__		CompletableFuture<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpoint()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpoint()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,checkpoint,type,savepoint,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,completable,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1517489695;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props)__		CompletableFuture<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpoint()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpoint()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,checkpoint,type,savepoint,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,completable,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1517489695;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props)__		CompletableFuture<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpoint()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpoint()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,checkpoint,type,savepoint,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,completable,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testCompletionFuture() throws Exception;1538998760;Tests that the completion future is succeeded on finalize and failed on_abort and failures during finalize.;@Test_	public void testCompletionFuture() throws Exception {_		CheckpointProperties props = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false)___		_		PendingCheckpoint pending = createPendingCheckpoint(props)__		CompletableFuture<CompletedCheckpoint> future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortDeclined()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortExpired()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.abortSubsumed()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertTrue(pending.isFullyAcknowledged())__		pending.finalizeCheckpoint()__		assertTrue(future.isDone())___		_		pending = createPendingCheckpoint(props)__		future = pending.getCompletionFuture()___		assertFalse(future.isDone())__		try {_			pending.finalizeCheckpoint()__			fail("Did not throw expected Exception")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,the,completion,future,is,succeeded,on,finalize,and,failed,on,abort,and,failures,during,finalize;test,public,void,test,completion,future,throws,exception,checkpoint,properties,props,new,checkpoint,properties,false,checkpoint,type,savepoint,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,props,completable,future,completed,checkpoint,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,declined,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,expired,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,abort,subsumed,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,pending,acknowledge,task,null,new,checkpoint,metrics,assert,true,pending,is,fully,acknowledged,pending,finalize,checkpoint,assert,true,future,is,done,pending,create,pending,checkpoint,props,future,pending,get,completion,future,assert,false,future,is,done,try,pending,finalize,checkpoint,fail,did,not,throw,expected,exception,catch,illegal,state,exception,ignored
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1476432306;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null)___		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null)___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1476432429;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null)___		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null)___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1479852017;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null)___		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null)___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1481295943;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null)___		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null)___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1484038132;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetaData(pending.getCheckpointId(), pending.getCheckpointTimestamp()))__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetaData(pending.getCheckpointId(), pending.getCheckpointTimestamp()))___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,meta,data,pending,get,checkpoint,id,pending,get,checkpoint,timestamp,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,meta,data,pending,get,checkpoint,id,pending,get,checkpoint,timestamp,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1485531920;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetaData(pending.getCheckpointId(), pending.getCheckpointTimestamp()))__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetaData(pending.getCheckpointId(), pending.getCheckpointTimestamp()))___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,meta,data,pending,get,checkpoint,id,pending,get,checkpoint,timestamp,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,meta,data,pending,get,checkpoint,id,pending,get,checkpoint,timestamp,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1487762095;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpoint()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1488304750;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpointExternalized()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpointNonExternalized()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,externalized,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,non,externalized,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1489671806;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpointExternalized()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpointNonExternalized()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,externalized,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,non,externalized,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1489770896;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpointExternalized()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpointNonExternalized()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,externalized,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,non,externalized,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1492867556;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpointExternalized()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpointNonExternalized()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,externalized,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,non,externalized,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1492867556;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpointExternalized()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpointNonExternalized()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,externalized,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,non,externalized,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1493403095;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpointExternalized()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpointNonExternalized()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,externalized,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,non,externalized,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1495184252;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpointExternalized()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpointNonExternalized()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,externalized,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,non,externalized,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1501588490;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpointExternalized()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpointNonExternalized()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,externalized,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,non,externalized,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1502801814;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpointExternalized()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpointNonExternalized()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,externalized,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,non,externalized,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1502802710;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpointExternalized()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpointNonExternalized()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,externalized,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,non,externalized,assert,equals,1,tmp,list,files,length
PendingCheckpointTest -> @Test 	public void testPersistExternally() throws Exception;1515177485;Tests that the persist checkpoint property is respected by the pending_checkpoint when finalizing.;@Test_	public void testPersistExternally() throws Exception {_		File tmp = tmpFolder.newFolder()___		_		CheckpointProperties persisted = new CheckpointProperties(false, true, false, false, false, false, false, false)___		PendingCheckpoint pending = createPendingCheckpoint(persisted, tmp.getAbsolutePath())__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())__		assertEquals(0, tmp.listFiles().length)__		pending.finalizeCheckpointExternalized()__		assertEquals(1, tmp.listFiles().length)___		_		CheckpointProperties ephemeral = new CheckpointProperties(false, false, false, true, true, true, true, true)__		pending = createPendingCheckpoint(ephemeral, null)__		pending.acknowledgeTask(ATTEMPT_ID, null, new CheckpointMetrics())___		assertEquals(1, tmp.listFiles().length)__		pending.finalizeCheckpointNonExternalized()__		assertEquals(1, tmp.listFiles().length)__	};tests,that,the,persist,checkpoint,property,is,respected,by,the,pending,checkpoint,when,finalizing;test,public,void,test,persist,externally,throws,exception,file,tmp,tmp,folder,new,folder,checkpoint,properties,persisted,new,checkpoint,properties,false,true,false,false,false,false,false,false,pending,checkpoint,pending,create,pending,checkpoint,persisted,tmp,get,absolute,path,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,0,tmp,list,files,length,pending,finalize,checkpoint,externalized,assert,equals,1,tmp,list,files,length,checkpoint,properties,ephemeral,new,checkpoint,properties,false,false,false,true,true,true,true,true,pending,create,pending,checkpoint,ephemeral,null,pending,acknowledge,task,null,new,checkpoint,metrics,assert,equals,1,tmp,list,files,length,pending,finalize,checkpoint,non,externalized,assert,equals,1,tmp,list,files,length
