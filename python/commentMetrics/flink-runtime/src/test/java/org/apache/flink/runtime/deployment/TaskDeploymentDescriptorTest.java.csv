# id;timestamp;commentText;codeText;commentWords;codeWords
TaskDeploymentDescriptorTest -> @Test 	public void testConstructorWithInvalidArguments();1405024514;Tests the constructor of the {@link GateDeploymentDescriptor} class with valid arguments.;@Test_	public void testConstructorWithInvalidArguments() {__		final JobID jobID = new JobID()__		final ExecutionVertexID vertexID = new ExecutionVertexID()__		final String taskName = "task name"__		final int indexInSubtaskGroup = 0__		final int currentNumberOfSubtasks = 1__		final Configuration jobConfiguration = new Configuration()__		final Configuration taskConfiguration = new Configuration()__		final Class<? extends AbstractInvokable> invokableClass = RegularPactTask.class__		final SerializableArrayList<GateDeploymentDescriptor> outputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)__		final SerializableArrayList<GateDeploymentDescriptor> inputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)___		boolean firstExceptionCaught = false__		boolean secondExceptionCaught = false__		boolean thirdExceptionCaught = false__		boolean forthExceptionCaught = false__		boolean fifthExceptionCaught = false__		boolean sixthExceptionCaught = false__		boolean seventhExceptionCaught = false__		boolean eighthExceptionCaught = false__		boolean ninethExeceptionCaught = false__		boolean tenthExceptionCaught = false___		try {_			new TaskDeploymentDescriptor(null, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			firstExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, null, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			secondExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, null,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			thirdExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				-1, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			forthExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, -1, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			fifthExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, null, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			sixthExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, null,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			seventhExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				null, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			eighthExceptionCaught = true__			_		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, null, inputGates)__		} catch (IllegalArgumentException e) {_			ninethExeceptionCaught = true__			_		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, null)__		} catch (IllegalArgumentException e) {_			tenthExceptionCaught = true__		}__		if (!firstExceptionCaught) {_			fail("First argument was illegal but not detected")__		}__		if (!secondExceptionCaught) {_			fail("Second argument was illegal but not detected")__		}__		if (!thirdExceptionCaught) {_			fail("Third argument was illegal but not detected")__		}__		if (!forthExceptionCaught) {_			fail("Forth argument was illegal but not detected")__		}__		if (!fifthExceptionCaught) {_			fail("Fifth argument was illegal but not detected")__		}__		if (!sixthExceptionCaught) {_			fail("Sixth argument was illegal but not detected")__		}__		if (!seventhExceptionCaught) {_			fail("Seventh argument was illegal but not detected")__		}__		if (!eighthExceptionCaught) {_			fail("Eighth argument was illegal but not detected")__		}__		if (!ninethExeceptionCaught) {_			fail("Nineth argument was illegal but not detected")__		}__		if (!tenthExceptionCaught) {_			fail("Tenth argument was illegal but not detected")__		}__	};tests,the,constructor,of,the,link,gate,deployment,descriptor,class,with,valid,arguments;test,public,void,test,constructor,with,invalid,arguments,final,job,id,job,id,new,job,id,final,execution,vertex,id,vertex,id,new,execution,vertex,id,final,string,task,name,task,name,final,int,index,in,subtask,group,0,final,int,current,number,of,subtasks,1,final,configuration,job,configuration,new,configuration,final,configuration,task,configuration,new,configuration,final,class,extends,abstract,invokable,invokable,class,regular,pact,task,class,final,serializable,array,list,gate,deployment,descriptor,output,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,serializable,array,list,gate,deployment,descriptor,input,gates,new,serializable,array,list,gate,deployment,descriptor,0,boolean,first,exception,caught,false,boolean,second,exception,caught,false,boolean,third,exception,caught,false,boolean,forth,exception,caught,false,boolean,fifth,exception,caught,false,boolean,sixth,exception,caught,false,boolean,seventh,exception,caught,false,boolean,eighth,exception,caught,false,boolean,nineth,exeception,caught,false,boolean,tenth,exception,caught,false,try,new,task,deployment,descriptor,null,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,first,exception,caught,true,try,new,task,deployment,descriptor,job,id,null,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,second,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,null,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,third,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,1,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,forth,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,1,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,fifth,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,null,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,sixth,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,null,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,seventh,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,null,output,gates,input,gates,catch,illegal,argument,exception,e,eighth,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,null,input,gates,catch,illegal,argument,exception,e,nineth,exeception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,null,catch,illegal,argument,exception,e,tenth,exception,caught,true,if,first,exception,caught,fail,first,argument,was,illegal,but,not,detected,if,second,exception,caught,fail,second,argument,was,illegal,but,not,detected,if,third,exception,caught,fail,third,argument,was,illegal,but,not,detected,if,forth,exception,caught,fail,forth,argument,was,illegal,but,not,detected,if,fifth,exception,caught,fail,fifth,argument,was,illegal,but,not,detected,if,sixth,exception,caught,fail,sixth,argument,was,illegal,but,not,detected,if,seventh,exception,caught,fail,seventh,argument,was,illegal,but,not,detected,if,eighth,exception,caught,fail,eighth,argument,was,illegal,but,not,detected,if,nineth,exeception,caught,fail,nineth,argument,was,illegal,but,not,detected,if,tenth,exception,caught,fail,tenth,argument,was,illegal,but,not,detected
TaskDeploymentDescriptorTest -> @Test 	public void testConstructorWithInvalidArguments();1405090423;Tests the constructor of the {@link GateDeploymentDescriptor} class with valid arguments.;@Test_	public void testConstructorWithInvalidArguments() {__		final JobID jobID = new JobID()__		final ExecutionVertexID vertexID = new ExecutionVertexID()__		final String taskName = "task name"__		final int indexInSubtaskGroup = 0__		final int currentNumberOfSubtasks = 1__		final Configuration jobConfiguration = new Configuration()__		final Configuration taskConfiguration = new Configuration()__		final Class<? extends AbstractInvokable> invokableClass = RegularPactTask.class__		final SerializableArrayList<GateDeploymentDescriptor> outputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)__		final SerializableArrayList<GateDeploymentDescriptor> inputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)___		boolean firstExceptionCaught = false__		boolean secondExceptionCaught = false__		boolean thirdExceptionCaught = false__		boolean forthExceptionCaught = false__		boolean fifthExceptionCaught = false__		boolean sixthExceptionCaught = false__		boolean seventhExceptionCaught = false__		boolean eighthExceptionCaught = false__		boolean ninethExeceptionCaught = false__		boolean tenthExceptionCaught = false___		try {_			new TaskDeploymentDescriptor(null, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			firstExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, null, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			secondExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, null,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			thirdExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				-1, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			forthExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, -1, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			fifthExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, null, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			sixthExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, null,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			seventhExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				null, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			eighthExceptionCaught = true__			_		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, null, inputGates)__		} catch (IllegalArgumentException e) {_			ninethExeceptionCaught = true__			_		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, null)__		} catch (IllegalArgumentException e) {_			tenthExceptionCaught = true__		}__		if (!firstExceptionCaught) {_			fail("First argument was illegal but not detected")__		}__		if (!secondExceptionCaught) {_			fail("Second argument was illegal but not detected")__		}__		if (!thirdExceptionCaught) {_			fail("Third argument was illegal but not detected")__		}__		if (!forthExceptionCaught) {_			fail("Forth argument was illegal but not detected")__		}__		if (!fifthExceptionCaught) {_			fail("Fifth argument was illegal but not detected")__		}__		if (!sixthExceptionCaught) {_			fail("Sixth argument was illegal but not detected")__		}__		if (!seventhExceptionCaught) {_			fail("Seventh argument was illegal but not detected")__		}__		if (!eighthExceptionCaught) {_			fail("Eighth argument was illegal but not detected")__		}__		if (!ninethExeceptionCaught) {_			fail("Nineth argument was illegal but not detected")__		}__		if (!tenthExceptionCaught) {_			fail("Tenth argument was illegal but not detected")__		}__	};tests,the,constructor,of,the,link,gate,deployment,descriptor,class,with,valid,arguments;test,public,void,test,constructor,with,invalid,arguments,final,job,id,job,id,new,job,id,final,execution,vertex,id,vertex,id,new,execution,vertex,id,final,string,task,name,task,name,final,int,index,in,subtask,group,0,final,int,current,number,of,subtasks,1,final,configuration,job,configuration,new,configuration,final,configuration,task,configuration,new,configuration,final,class,extends,abstract,invokable,invokable,class,regular,pact,task,class,final,serializable,array,list,gate,deployment,descriptor,output,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,serializable,array,list,gate,deployment,descriptor,input,gates,new,serializable,array,list,gate,deployment,descriptor,0,boolean,first,exception,caught,false,boolean,second,exception,caught,false,boolean,third,exception,caught,false,boolean,forth,exception,caught,false,boolean,fifth,exception,caught,false,boolean,sixth,exception,caught,false,boolean,seventh,exception,caught,false,boolean,eighth,exception,caught,false,boolean,nineth,exeception,caught,false,boolean,tenth,exception,caught,false,try,new,task,deployment,descriptor,null,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,first,exception,caught,true,try,new,task,deployment,descriptor,job,id,null,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,second,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,null,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,third,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,1,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,forth,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,1,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,fifth,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,null,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,sixth,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,null,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,seventh,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,null,output,gates,input,gates,catch,illegal,argument,exception,e,eighth,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,null,input,gates,catch,illegal,argument,exception,e,nineth,exeception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,null,catch,illegal,argument,exception,e,tenth,exception,caught,true,if,first,exception,caught,fail,first,argument,was,illegal,but,not,detected,if,second,exception,caught,fail,second,argument,was,illegal,but,not,detected,if,third,exception,caught,fail,third,argument,was,illegal,but,not,detected,if,forth,exception,caught,fail,forth,argument,was,illegal,but,not,detected,if,fifth,exception,caught,fail,fifth,argument,was,illegal,but,not,detected,if,sixth,exception,caught,fail,sixth,argument,was,illegal,but,not,detected,if,seventh,exception,caught,fail,seventh,argument,was,illegal,but,not,detected,if,eighth,exception,caught,fail,eighth,argument,was,illegal,but,not,detected,if,nineth,exeception,caught,fail,nineth,argument,was,illegal,but,not,detected,if,tenth,exception,caught,fail,tenth,argument,was,illegal,but,not,detected
TaskDeploymentDescriptorTest -> @Test 	public void testConstructorWithInvalidArguments();1409911022;Tests the constructor of the {@link GateDeploymentDescriptor} class with valid arguments.;@Test_	public void testConstructorWithInvalidArguments() {__		final JobID jobID = new JobID()__		final ExecutionVertexID vertexID = new ExecutionVertexID()__		final String taskName = "task name"__		final int indexInSubtaskGroup = 0__		final int currentNumberOfSubtasks = 1__		final Configuration jobConfiguration = new Configuration()__		final Configuration taskConfiguration = new Configuration()__		final Class<? extends AbstractInvokable> invokableClass = RegularPactTask.class__		final SerializableArrayList<GateDeploymentDescriptor> outputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)__		final SerializableArrayList<GateDeploymentDescriptor> inputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)___		boolean firstExceptionCaught = false__		boolean secondExceptionCaught = false__		boolean thirdExceptionCaught = false__		boolean forthExceptionCaught = false__		boolean fifthExceptionCaught = false__		boolean sixthExceptionCaught = false__		boolean seventhExceptionCaught = false__		boolean eighthExceptionCaught = false__		boolean ninethExeceptionCaught = false__		boolean tenthExceptionCaught = false___		try {_			new TaskDeploymentDescriptor(null, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			firstExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, null, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			secondExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, null,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			thirdExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				-1, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			forthExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, -1, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			fifthExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, null, taskConfiguration,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			sixthExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, null,_				invokableClass, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			seventhExceptionCaught = true__		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				null, outputGates, inputGates)__		} catch (IllegalArgumentException e) {_			eighthExceptionCaught = true__			_		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, null, inputGates)__		} catch (IllegalArgumentException e) {_			ninethExeceptionCaught = true__			_		}__		try {_			new TaskDeploymentDescriptor(jobID, vertexID, taskName,_				indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_				invokableClass, outputGates, null)__		} catch (IllegalArgumentException e) {_			tenthExceptionCaught = true__		}__		if (!firstExceptionCaught) {_			fail("First argument was illegal but not detected")__		}__		if (!secondExceptionCaught) {_			fail("Second argument was illegal but not detected")__		}__		if (!thirdExceptionCaught) {_			fail("Third argument was illegal but not detected")__		}__		if (!forthExceptionCaught) {_			fail("Forth argument was illegal but not detected")__		}__		if (!fifthExceptionCaught) {_			fail("Fifth argument was illegal but not detected")__		}__		if (!sixthExceptionCaught) {_			fail("Sixth argument was illegal but not detected")__		}__		if (!seventhExceptionCaught) {_			fail("Seventh argument was illegal but not detected")__		}__		if (!eighthExceptionCaught) {_			fail("Eighth argument was illegal but not detected")__		}__		if (!ninethExeceptionCaught) {_			fail("Nineth argument was illegal but not detected")__		}__		if (!tenthExceptionCaught) {_			fail("Tenth argument was illegal but not detected")__		}__	};tests,the,constructor,of,the,link,gate,deployment,descriptor,class,with,valid,arguments;test,public,void,test,constructor,with,invalid,arguments,final,job,id,job,id,new,job,id,final,execution,vertex,id,vertex,id,new,execution,vertex,id,final,string,task,name,task,name,final,int,index,in,subtask,group,0,final,int,current,number,of,subtasks,1,final,configuration,job,configuration,new,configuration,final,configuration,task,configuration,new,configuration,final,class,extends,abstract,invokable,invokable,class,regular,pact,task,class,final,serializable,array,list,gate,deployment,descriptor,output,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,serializable,array,list,gate,deployment,descriptor,input,gates,new,serializable,array,list,gate,deployment,descriptor,0,boolean,first,exception,caught,false,boolean,second,exception,caught,false,boolean,third,exception,caught,false,boolean,forth,exception,caught,false,boolean,fifth,exception,caught,false,boolean,sixth,exception,caught,false,boolean,seventh,exception,caught,false,boolean,eighth,exception,caught,false,boolean,nineth,exeception,caught,false,boolean,tenth,exception,caught,false,try,new,task,deployment,descriptor,null,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,first,exception,caught,true,try,new,task,deployment,descriptor,job,id,null,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,second,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,null,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,third,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,1,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,forth,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,1,job,configuration,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,fifth,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,null,task,configuration,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,sixth,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,null,invokable,class,output,gates,input,gates,catch,illegal,argument,exception,e,seventh,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,null,output,gates,input,gates,catch,illegal,argument,exception,e,eighth,exception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,null,input,gates,catch,illegal,argument,exception,e,nineth,exeception,caught,true,try,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,null,catch,illegal,argument,exception,e,tenth,exception,caught,true,if,first,exception,caught,fail,first,argument,was,illegal,but,not,detected,if,second,exception,caught,fail,second,argument,was,illegal,but,not,detected,if,third,exception,caught,fail,third,argument,was,illegal,but,not,detected,if,forth,exception,caught,fail,forth,argument,was,illegal,but,not,detected,if,fifth,exception,caught,fail,fifth,argument,was,illegal,but,not,detected,if,sixth,exception,caught,fail,sixth,argument,was,illegal,but,not,detected,if,seventh,exception,caught,fail,seventh,argument,was,illegal,but,not,detected,if,eighth,exception,caught,fail,eighth,argument,was,illegal,but,not,detected,if,nineth,exeception,caught,fail,nineth,argument,was,illegal,but,not,detected,if,tenth,exception,caught,fail,tenth,argument,was,illegal,but,not,detected
TaskDeploymentDescriptorTest -> @Test 	public void testConstructorWithValidArguments();1405024514;Tests the constructor of the {@link TaskDeploymentDescriptor} class with valid arguments.;@Test_	public void testConstructorWithValidArguments() {__		final JobID jobID = new JobID()__		final ExecutionVertexID vertexID = new ExecutionVertexID()__		final String taskName = "task name"__		final int indexInSubtaskGroup = 0__		final int currentNumberOfSubtasks = 1__		final Configuration jobConfiguration = new Configuration()__		final Configuration taskConfiguration = new Configuration()__		final Class<? extends AbstractInvokable> invokableClass =  RegularPactTask.class__		final SerializableArrayList<GateDeploymentDescriptor> outputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)__		final SerializableArrayList<GateDeploymentDescriptor> inputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)___		final TaskDeploymentDescriptor tdd = new TaskDeploymentDescriptor(jobID, vertexID, taskName,_			indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_			invokableClass, outputGates, inputGates)___		assertEquals(jobID, tdd.getJobID())__		assertEquals(vertexID, tdd.getVertexID())__		assertEquals(taskName, tdd.getTaskName())__		assertEquals(indexInSubtaskGroup, tdd.getIndexInSubtaskGroup())__		assertEquals(currentNumberOfSubtasks, tdd.getCurrentNumberOfSubtasks())__		assertEquals(jobConfiguration, tdd.getJobConfiguration())__		assertEquals(taskConfiguration, tdd.getTaskConfiguration())__		assertEquals(invokableClass, tdd.getInvokableClass())__		assertEquals(outputGates.size(), tdd.getNumberOfOutputGateDescriptors())__		assertEquals(inputGates.size(), tdd.getNumberOfInputGateDescriptors())__	};tests,the,constructor,of,the,link,task,deployment,descriptor,class,with,valid,arguments;test,public,void,test,constructor,with,valid,arguments,final,job,id,job,id,new,job,id,final,execution,vertex,id,vertex,id,new,execution,vertex,id,final,string,task,name,task,name,final,int,index,in,subtask,group,0,final,int,current,number,of,subtasks,1,final,configuration,job,configuration,new,configuration,final,configuration,task,configuration,new,configuration,final,class,extends,abstract,invokable,invokable,class,regular,pact,task,class,final,serializable,array,list,gate,deployment,descriptor,output,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,serializable,array,list,gate,deployment,descriptor,input,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,task,deployment,descriptor,tdd,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,assert,equals,job,id,tdd,get,job,id,assert,equals,vertex,id,tdd,get,vertex,id,assert,equals,task,name,tdd,get,task,name,assert,equals,index,in,subtask,group,tdd,get,index,in,subtask,group,assert,equals,current,number,of,subtasks,tdd,get,current,number,of,subtasks,assert,equals,job,configuration,tdd,get,job,configuration,assert,equals,task,configuration,tdd,get,task,configuration,assert,equals,invokable,class,tdd,get,invokable,class,assert,equals,output,gates,size,tdd,get,number,of,output,gate,descriptors,assert,equals,input,gates,size,tdd,get,number,of,input,gate,descriptors
TaskDeploymentDescriptorTest -> @Test 	public void testConstructorWithValidArguments();1405090423;Tests the constructor of the {@link TaskDeploymentDescriptor} class with valid arguments.;@Test_	public void testConstructorWithValidArguments() {__		final JobID jobID = new JobID()__		final ExecutionVertexID vertexID = new ExecutionVertexID()__		final String taskName = "task name"__		final int indexInSubtaskGroup = 0__		final int currentNumberOfSubtasks = 1__		final Configuration jobConfiguration = new Configuration()__		final Configuration taskConfiguration = new Configuration()__		final Class<? extends AbstractInvokable> invokableClass =  RegularPactTask.class__		final SerializableArrayList<GateDeploymentDescriptor> outputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)__		final SerializableArrayList<GateDeploymentDescriptor> inputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)___		final TaskDeploymentDescriptor tdd = new TaskDeploymentDescriptor(jobID, vertexID, taskName,_			indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_			invokableClass, outputGates, inputGates)___		assertEquals(jobID, tdd.getJobID())__		assertEquals(vertexID, tdd.getVertexID())__		assertEquals(taskName, tdd.getTaskName())__		assertEquals(indexInSubtaskGroup, tdd.getIndexInSubtaskGroup())__		assertEquals(currentNumberOfSubtasks, tdd.getCurrentNumberOfSubtasks())__		assertEquals(jobConfiguration, tdd.getJobConfiguration())__		assertEquals(taskConfiguration, tdd.getTaskConfiguration())__		assertEquals(invokableClass, tdd.getInvokableClass())__		assertEquals(outputGates.size(), tdd.getNumberOfOutputGateDescriptors())__		assertEquals(inputGates.size(), tdd.getNumberOfInputGateDescriptors())__	};tests,the,constructor,of,the,link,task,deployment,descriptor,class,with,valid,arguments;test,public,void,test,constructor,with,valid,arguments,final,job,id,job,id,new,job,id,final,execution,vertex,id,vertex,id,new,execution,vertex,id,final,string,task,name,task,name,final,int,index,in,subtask,group,0,final,int,current,number,of,subtasks,1,final,configuration,job,configuration,new,configuration,final,configuration,task,configuration,new,configuration,final,class,extends,abstract,invokable,invokable,class,regular,pact,task,class,final,serializable,array,list,gate,deployment,descriptor,output,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,serializable,array,list,gate,deployment,descriptor,input,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,task,deployment,descriptor,tdd,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,assert,equals,job,id,tdd,get,job,id,assert,equals,vertex,id,tdd,get,vertex,id,assert,equals,task,name,tdd,get,task,name,assert,equals,index,in,subtask,group,tdd,get,index,in,subtask,group,assert,equals,current,number,of,subtasks,tdd,get,current,number,of,subtasks,assert,equals,job,configuration,tdd,get,job,configuration,assert,equals,task,configuration,tdd,get,task,configuration,assert,equals,invokable,class,tdd,get,invokable,class,assert,equals,output,gates,size,tdd,get,number,of,output,gate,descriptors,assert,equals,input,gates,size,tdd,get,number,of,input,gate,descriptors
TaskDeploymentDescriptorTest -> @Test 	public void testConstructorWithValidArguments();1409911022;Tests the constructor of the {@link TaskDeploymentDescriptor} class with valid arguments.;@Test_	public void testConstructorWithValidArguments() {__		final JobID jobID = new JobID()__		final ExecutionVertexID vertexID = new ExecutionVertexID()__		final String taskName = "task name"__		final int indexInSubtaskGroup = 0__		final int currentNumberOfSubtasks = 1__		final Configuration jobConfiguration = new Configuration()__		final Configuration taskConfiguration = new Configuration()__		final Class<? extends AbstractInvokable> invokableClass =  RegularPactTask.class__		final SerializableArrayList<GateDeploymentDescriptor> outputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)__		final SerializableArrayList<GateDeploymentDescriptor> inputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)___		final TaskDeploymentDescriptor tdd = new TaskDeploymentDescriptor(jobID, vertexID, taskName,_			indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_			invokableClass, outputGates, inputGates)___		assertEquals(jobID, tdd.getJobID())__		assertEquals(vertexID, tdd.getVertexID())__		assertEquals(taskName, tdd.getTaskName())__		assertEquals(indexInSubtaskGroup, tdd.getIndexInSubtaskGroup())__		assertEquals(currentNumberOfSubtasks, tdd.getCurrentNumberOfSubtasks())__		assertEquals(jobConfiguration, tdd.getJobConfiguration())__		assertEquals(taskConfiguration, tdd.getTaskConfiguration())__		assertEquals(invokableClass, tdd.getInvokableClass())__		assertEquals(outputGates.size(), tdd.getNumberOfOutputGateDescriptors())__		assertEquals(inputGates.size(), tdd.getNumberOfInputGateDescriptors())__	};tests,the,constructor,of,the,link,task,deployment,descriptor,class,with,valid,arguments;test,public,void,test,constructor,with,valid,arguments,final,job,id,job,id,new,job,id,final,execution,vertex,id,vertex,id,new,execution,vertex,id,final,string,task,name,task,name,final,int,index,in,subtask,group,0,final,int,current,number,of,subtasks,1,final,configuration,job,configuration,new,configuration,final,configuration,task,configuration,new,configuration,final,class,extends,abstract,invokable,invokable,class,regular,pact,task,class,final,serializable,array,list,gate,deployment,descriptor,output,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,serializable,array,list,gate,deployment,descriptor,input,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,task,deployment,descriptor,tdd,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,assert,equals,job,id,tdd,get,job,id,assert,equals,vertex,id,tdd,get,vertex,id,assert,equals,task,name,tdd,get,task,name,assert,equals,index,in,subtask,group,tdd,get,index,in,subtask,group,assert,equals,current,number,of,subtasks,tdd,get,current,number,of,subtasks,assert,equals,job,configuration,tdd,get,job,configuration,assert,equals,task,configuration,tdd,get,task,configuration,assert,equals,invokable,class,tdd,get,invokable,class,assert,equals,output,gates,size,tdd,get,number,of,output,gate,descriptors,assert,equals,input,gates,size,tdd,get,number,of,input,gate,descriptors
TaskDeploymentDescriptorTest -> @Test 	public void testSerialization();1405024514;Tests the serialization/deserialization of the {@link TaskDeploymentDescriptor} class.;@Test_	public void testSerialization() {__		final JobID jobID = new JobID()__		final ExecutionVertexID vertexID = new ExecutionVertexID()__		final String taskName = "task name"__		final int indexInSubtaskGroup = 0__		final int currentNumberOfSubtasks = 1__		final Configuration jobConfiguration = new Configuration()__		final Configuration taskConfiguration = new Configuration()__		final Class<? extends AbstractInvokable> invokableClass = RegularPactTask.class__		final SerializableArrayList<GateDeploymentDescriptor> outputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)__		final SerializableArrayList<GateDeploymentDescriptor> inputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)___		final TaskDeploymentDescriptor orig = new TaskDeploymentDescriptor(jobID, vertexID, taskName,_			indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_			invokableClass, outputGates, inputGates)___		TaskDeploymentDescriptor copy = null___		try {_			LibraryCacheManager.register(jobID, new String[] {})__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}__		try {_			copy = ServerTestUtils.createCopy(orig)__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}__		assertFalse(orig.getJobID() == copy.getJobID())__		assertFalse(orig.getVertexID() == copy.getVertexID())__		assertFalse(orig.getTaskName() == copy.getTaskName())__		assertFalse(orig.getJobConfiguration() == copy.getJobConfiguration())__		assertFalse(orig.getTaskConfiguration() == copy.getTaskConfiguration())___		assertEquals(orig.getJobID(), copy.getJobID())__		assertEquals(orig.getVertexID(), copy.getVertexID())__		assertEquals(orig.getTaskName(), copy.getTaskName())__		assertEquals(orig.getIndexInSubtaskGroup(), copy.getIndexInSubtaskGroup())__		assertEquals(orig.getCurrentNumberOfSubtasks(), copy.getCurrentNumberOfSubtasks())__		assertEquals(orig.getNumberOfOutputGateDescriptors(), copy.getNumberOfOutputGateDescriptors())__		assertEquals(orig.getNumberOfInputGateDescriptors(), copy.getNumberOfInputGateDescriptors())___		try {_			LibraryCacheManager.register(jobID, new String[] {})__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}_	};tests,the,serialization,deserialization,of,the,link,task,deployment,descriptor,class;test,public,void,test,serialization,final,job,id,job,id,new,job,id,final,execution,vertex,id,vertex,id,new,execution,vertex,id,final,string,task,name,task,name,final,int,index,in,subtask,group,0,final,int,current,number,of,subtasks,1,final,configuration,job,configuration,new,configuration,final,configuration,task,configuration,new,configuration,final,class,extends,abstract,invokable,invokable,class,regular,pact,task,class,final,serializable,array,list,gate,deployment,descriptor,output,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,serializable,array,list,gate,deployment,descriptor,input,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,task,deployment,descriptor,orig,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,task,deployment,descriptor,copy,null,try,library,cache,manager,register,job,id,new,string,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,try,copy,server,test,utils,create,copy,orig,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,assert,false,orig,get,job,id,copy,get,job,id,assert,false,orig,get,vertex,id,copy,get,vertex,id,assert,false,orig,get,task,name,copy,get,task,name,assert,false,orig,get,job,configuration,copy,get,job,configuration,assert,false,orig,get,task,configuration,copy,get,task,configuration,assert,equals,orig,get,job,id,copy,get,job,id,assert,equals,orig,get,vertex,id,copy,get,vertex,id,assert,equals,orig,get,task,name,copy,get,task,name,assert,equals,orig,get,index,in,subtask,group,copy,get,index,in,subtask,group,assert,equals,orig,get,current,number,of,subtasks,copy,get,current,number,of,subtasks,assert,equals,orig,get,number,of,output,gate,descriptors,copy,get,number,of,output,gate,descriptors,assert,equals,orig,get,number,of,input,gate,descriptors,copy,get,number,of,input,gate,descriptors,try,library,cache,manager,register,job,id,new,string,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe
TaskDeploymentDescriptorTest -> @Test 	public void testSerialization();1405090423;Tests the serialization/deserialization of the {@link TaskDeploymentDescriptor} class.;@Test_	public void testSerialization() {__		final JobID jobID = new JobID()__		final ExecutionVertexID vertexID = new ExecutionVertexID()__		final String taskName = "task name"__		final int indexInSubtaskGroup = 0__		final int currentNumberOfSubtasks = 1__		final Configuration jobConfiguration = new Configuration()__		final Configuration taskConfiguration = new Configuration()__		final Class<? extends AbstractInvokable> invokableClass = RegularPactTask.class__		final SerializableArrayList<GateDeploymentDescriptor> outputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)__		final SerializableArrayList<GateDeploymentDescriptor> inputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)___		final TaskDeploymentDescriptor orig = new TaskDeploymentDescriptor(jobID, vertexID, taskName,_			indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_			invokableClass, outputGates, inputGates)___		TaskDeploymentDescriptor copy = null___		try {_			LibraryCacheManager.register(jobID, new String[] {})__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}__		try {_			copy = ServerTestUtils.createCopy(orig)__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}__		assertFalse(orig.getJobID() == copy.getJobID())__		assertFalse(orig.getVertexID() == copy.getVertexID())__		assertFalse(orig.getTaskName() == copy.getTaskName())__		assertFalse(orig.getJobConfiguration() == copy.getJobConfiguration())__		assertFalse(orig.getTaskConfiguration() == copy.getTaskConfiguration())___		assertEquals(orig.getJobID(), copy.getJobID())__		assertEquals(orig.getVertexID(), copy.getVertexID())__		assertEquals(orig.getTaskName(), copy.getTaskName())__		assertEquals(orig.getIndexInSubtaskGroup(), copy.getIndexInSubtaskGroup())__		assertEquals(orig.getCurrentNumberOfSubtasks(), copy.getCurrentNumberOfSubtasks())__		assertEquals(orig.getNumberOfOutputGateDescriptors(), copy.getNumberOfOutputGateDescriptors())__		assertEquals(orig.getNumberOfInputGateDescriptors(), copy.getNumberOfInputGateDescriptors())___		try {_			LibraryCacheManager.register(jobID, new String[] {})__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}_	};tests,the,serialization,deserialization,of,the,link,task,deployment,descriptor,class;test,public,void,test,serialization,final,job,id,job,id,new,job,id,final,execution,vertex,id,vertex,id,new,execution,vertex,id,final,string,task,name,task,name,final,int,index,in,subtask,group,0,final,int,current,number,of,subtasks,1,final,configuration,job,configuration,new,configuration,final,configuration,task,configuration,new,configuration,final,class,extends,abstract,invokable,invokable,class,regular,pact,task,class,final,serializable,array,list,gate,deployment,descriptor,output,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,serializable,array,list,gate,deployment,descriptor,input,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,task,deployment,descriptor,orig,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,task,deployment,descriptor,copy,null,try,library,cache,manager,register,job,id,new,string,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,try,copy,server,test,utils,create,copy,orig,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,assert,false,orig,get,job,id,copy,get,job,id,assert,false,orig,get,vertex,id,copy,get,vertex,id,assert,false,orig,get,task,name,copy,get,task,name,assert,false,orig,get,job,configuration,copy,get,job,configuration,assert,false,orig,get,task,configuration,copy,get,task,configuration,assert,equals,orig,get,job,id,copy,get,job,id,assert,equals,orig,get,vertex,id,copy,get,vertex,id,assert,equals,orig,get,task,name,copy,get,task,name,assert,equals,orig,get,index,in,subtask,group,copy,get,index,in,subtask,group,assert,equals,orig,get,current,number,of,subtasks,copy,get,current,number,of,subtasks,assert,equals,orig,get,number,of,output,gate,descriptors,copy,get,number,of,output,gate,descriptors,assert,equals,orig,get,number,of,input,gate,descriptors,copy,get,number,of,input,gate,descriptors,try,library,cache,manager,register,job,id,new,string,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe
TaskDeploymentDescriptorTest -> @Test 	public void testSerialization();1409911022;Tests the serialization/deserialization of the {@link TaskDeploymentDescriptor} class.;@Test_	public void testSerialization() {__		final JobID jobID = new JobID()__		final ExecutionVertexID vertexID = new ExecutionVertexID()__		final String taskName = "task name"__		final int indexInSubtaskGroup = 0__		final int currentNumberOfSubtasks = 1__		final Configuration jobConfiguration = new Configuration()__		final Configuration taskConfiguration = new Configuration()__		final Class<? extends AbstractInvokable> invokableClass = RegularPactTask.class__		final SerializableArrayList<GateDeploymentDescriptor> outputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)__		final SerializableArrayList<GateDeploymentDescriptor> inputGates = new SerializableArrayList<GateDeploymentDescriptor>(_			0)___		final TaskDeploymentDescriptor orig = new TaskDeploymentDescriptor(jobID, vertexID, taskName,_			indexInSubtaskGroup, currentNumberOfSubtasks, jobConfiguration, taskConfiguration,_			invokableClass, outputGates, inputGates)___		TaskDeploymentDescriptor copy = null___		try {_			LibraryCacheManager.register(jobID, new String[] {})__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}__		try {_			copy = ServerTestUtils.createCopy(orig)__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}__		assertFalse(orig.getJobID() == copy.getJobID())__		assertFalse(orig.getVertexID() == copy.getVertexID())__		assertFalse(orig.getTaskName() == copy.getTaskName())__		assertFalse(orig.getJobConfiguration() == copy.getJobConfiguration())__		assertFalse(orig.getTaskConfiguration() == copy.getTaskConfiguration())___		assertEquals(orig.getJobID(), copy.getJobID())__		assertEquals(orig.getVertexID(), copy.getVertexID())__		assertEquals(orig.getTaskName(), copy.getTaskName())__		assertEquals(orig.getIndexInSubtaskGroup(), copy.getIndexInSubtaskGroup())__		assertEquals(orig.getCurrentNumberOfSubtasks(), copy.getCurrentNumberOfSubtasks())__		assertEquals(orig.getNumberOfOutputGateDescriptors(), copy.getNumberOfOutputGateDescriptors())__		assertEquals(orig.getNumberOfInputGateDescriptors(), copy.getNumberOfInputGateDescriptors())___		try {_			LibraryCacheManager.register(jobID, new String[] {})__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}_	};tests,the,serialization,deserialization,of,the,link,task,deployment,descriptor,class;test,public,void,test,serialization,final,job,id,job,id,new,job,id,final,execution,vertex,id,vertex,id,new,execution,vertex,id,final,string,task,name,task,name,final,int,index,in,subtask,group,0,final,int,current,number,of,subtasks,1,final,configuration,job,configuration,new,configuration,final,configuration,task,configuration,new,configuration,final,class,extends,abstract,invokable,invokable,class,regular,pact,task,class,final,serializable,array,list,gate,deployment,descriptor,output,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,serializable,array,list,gate,deployment,descriptor,input,gates,new,serializable,array,list,gate,deployment,descriptor,0,final,task,deployment,descriptor,orig,new,task,deployment,descriptor,job,id,vertex,id,task,name,index,in,subtask,group,current,number,of,subtasks,job,configuration,task,configuration,invokable,class,output,gates,input,gates,task,deployment,descriptor,copy,null,try,library,cache,manager,register,job,id,new,string,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,try,copy,server,test,utils,create,copy,orig,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe,assert,false,orig,get,job,id,copy,get,job,id,assert,false,orig,get,vertex,id,copy,get,vertex,id,assert,false,orig,get,task,name,copy,get,task,name,assert,false,orig,get,job,configuration,copy,get,job,configuration,assert,false,orig,get,task,configuration,copy,get,task,configuration,assert,equals,orig,get,job,id,copy,get,job,id,assert,equals,orig,get,vertex,id,copy,get,vertex,id,assert,equals,orig,get,task,name,copy,get,task,name,assert,equals,orig,get,index,in,subtask,group,copy,get,index,in,subtask,group,assert,equals,orig,get,current,number,of,subtasks,copy,get,current,number,of,subtasks,assert,equals,orig,get,number,of,output,gate,descriptors,copy,get,number,of,output,gate,descriptors,assert,equals,orig,get,number,of,input,gate,descriptors,copy,get,number,of,input,gate,descriptors,try,library,cache,manager,register,job,id,new,string,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe
