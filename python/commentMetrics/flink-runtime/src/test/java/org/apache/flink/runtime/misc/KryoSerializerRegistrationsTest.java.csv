# id;timestamp;commentText;codeText;commentWords;codeWords
KryoSerializerRegistrationsTest -> @Test 	public void testDefaultKryoRegisteredClassesDidNotChange() throws Exception;1507936505;Tests that the registered classes in Kryo did not change.__<p>Once we have proper serializer versioning this test will become obsolete._But currently a change in the serializers can break savepoint backwards_compatibility between Flink versions.;@Test_	public void testDefaultKryoRegisteredClassesDidNotChange() throws Exception {_		final Kryo kryo = new KryoSerializer<>(Integer.class, new ExecutionConfig()).getKryo()___		try (BufferedReader reader = new BufferedReader(new InputStreamReader(_				getClass().getClassLoader().getResourceAsStream("flink_11-kryo_registrations")))) {__			String line__			while ((line = reader.readLine()) != null) {_				String[] split = line.split(",")__				final int tag = Integer.parseInt(split[0])__				final String registeredClass = split[1]___				Registration registration = kryo.getRegistration(tag)___				if (registration == null) {_					fail(String.format("Registration for %d = %s got lost", tag, registeredClass))__				}_				else if (!registeredClass.equals(registration.getType().getName())) {_					fail(String.format("Registration for %d = %s changed to %s",_							tag, registeredClass, registration.getType().getName()))__				}_			}_		}_	};tests,that,the,registered,classes,in,kryo,did,not,change,p,once,we,have,proper,serializer,versioning,this,test,will,become,obsolete,but,currently,a,change,in,the,serializers,can,break,savepoint,backwards,compatibility,between,flink,versions;test,public,void,test,default,kryo,registered,classes,did,not,change,throws,exception,final,kryo,kryo,new,kryo,serializer,integer,class,new,execution,config,get,kryo,try,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,get,class,get,class,loader,get,resource,as,stream,string,line,while,line,reader,read,line,null,string,split,line,split,final,int,tag,integer,parse,int,split,0,final,string,registered,class,split,1,registration,registration,kryo,get,registration,tag,if,registration,null,fail,string,format,registration,for,d,s,got,lost,tag,registered,class,else,if,registered,class,equals,registration,get,type,get,name,fail,string,format,registration,for,d,s,changed,to,s,tag,registered,class,registration,get,type,get,name
KryoSerializerRegistrationsTest -> @Test 	public void testDefaultKryoRegisteredClassesDidNotChange() throws Exception;1509723634;Tests that the registered classes in Kryo did not change.__<p>Once we have proper serializer versioning this test will become obsolete._But currently a change in the serializers can break savepoint backwards_compatibility between Flink versions.;@Test_	public void testDefaultKryoRegisteredClassesDidNotChange() throws Exception {_		final Kryo kryo = new KryoSerializer<>(Integer.class, new ExecutionConfig()).getKryo()___		try (BufferedReader reader = new BufferedReader(new InputStreamReader(_				getClass().getClassLoader().getResourceAsStream("flink_11-kryo_registrations")))) {__			String line__			while ((line = reader.readLine()) != null) {_				String[] split = line.split(",")__				final int tag = Integer.parseInt(split[0])__				final String registeredClass = split[1]___				Registration registration = kryo.getRegistration(tag)___				if (registration == null) {_					fail(String.format("Registration for %d = %s got lost", tag, registeredClass))__				}_				else if (registeredClass.equals("org.apache.avro.generic.GenericData$Array")) {_					_					_					_					_					assertThat(_						registration.getType().getName(),_						is("org.apache.flink.api.java.typeutils.runtime.kryo.Serializers$DummyAvroRegisteredClass"))__				}_				else if (!registeredClass.equals(registration.getType().getName())) {_					fail(String.format("Registration for %d = %s changed to %s",_							tag, registeredClass, registration.getType().getName()))__				}_			}_		}_	};tests,that,the,registered,classes,in,kryo,did,not,change,p,once,we,have,proper,serializer,versioning,this,test,will,become,obsolete,but,currently,a,change,in,the,serializers,can,break,savepoint,backwards,compatibility,between,flink,versions;test,public,void,test,default,kryo,registered,classes,did,not,change,throws,exception,final,kryo,kryo,new,kryo,serializer,integer,class,new,execution,config,get,kryo,try,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,get,class,get,class,loader,get,resource,as,stream,string,line,while,line,reader,read,line,null,string,split,line,split,final,int,tag,integer,parse,int,split,0,final,string,registered,class,split,1,registration,registration,kryo,get,registration,tag,if,registration,null,fail,string,format,registration,for,d,s,got,lost,tag,registered,class,else,if,registered,class,equals,org,apache,avro,generic,generic,data,array,assert,that,registration,get,type,get,name,is,org,apache,flink,api,java,typeutils,runtime,kryo,serializers,dummy,avro,registered,class,else,if,registered,class,equals,registration,get,type,get,name,fail,string,format,registration,for,d,s,changed,to,s,tag,registered,class,registration,get,type,get,name
KryoSerializerRegistrationsTest -> @Test 	public void testDefaultKryoRegisteredClassesDidNotChange() throws Exception;1511347989;Tests that the registered classes in Kryo did not change.__<p>Once we have proper serializer versioning this test will become obsolete._But currently a change in the serializers can break savepoint backwards_compatibility between Flink versions.;@Test_	public void testDefaultKryoRegisteredClassesDidNotChange() throws Exception {_		final Kryo kryo = new KryoSerializer<>(Integer.class, new ExecutionConfig()).getKryo()___		try (BufferedReader reader = new BufferedReader(new InputStreamReader(_				getClass().getClassLoader().getResourceAsStream("flink_11-kryo_registrations")))) {__			String line__			while ((line = reader.readLine()) != null) {_				String[] split = line.split(",")__				final int tag = Integer.parseInt(split[0])__				final String registeredClass = split[1]___				Registration registration = kryo.getRegistration(tag)___				if (registration == null) {_					fail(String.format("Registration for %d = %s got lost", tag, registeredClass))__				}_				else if (registeredClass.equals("org.apache.avro.generic.GenericData$Array")) {_					_					_					_					_					assertThat(_						registration.getType().getName(),_						is("org.apache.flink.api.java.typeutils.runtime.kryo.Serializers$DummyAvroRegisteredClass"))__				}_				else if (!registeredClass.equals(registration.getType().getName())) {_					fail(String.format("Registration for %d = %s changed to %s",_							tag, registeredClass, registration.getType().getName()))__				}_			}_		}_	};tests,that,the,registered,classes,in,kryo,did,not,change,p,once,we,have,proper,serializer,versioning,this,test,will,become,obsolete,but,currently,a,change,in,the,serializers,can,break,savepoint,backwards,compatibility,between,flink,versions;test,public,void,test,default,kryo,registered,classes,did,not,change,throws,exception,final,kryo,kryo,new,kryo,serializer,integer,class,new,execution,config,get,kryo,try,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,get,class,get,class,loader,get,resource,as,stream,string,line,while,line,reader,read,line,null,string,split,line,split,final,int,tag,integer,parse,int,split,0,final,string,registered,class,split,1,registration,registration,kryo,get,registration,tag,if,registration,null,fail,string,format,registration,for,d,s,got,lost,tag,registered,class,else,if,registered,class,equals,org,apache,avro,generic,generic,data,array,assert,that,registration,get,type,get,name,is,org,apache,flink,api,java,typeutils,runtime,kryo,serializers,dummy,avro,registered,class,else,if,registered,class,equals,registration,get,type,get,name,fail,string,format,registration,for,d,s,changed,to,s,tag,registered,class,registration,get,type,get,name
KryoSerializerRegistrationsTest -> private void writeDefaultKryoRegistrations(String filePath) throws IOException;1507936505;Creates a Kryo serializer and writes the default registrations out to a_comma separated file with one entry per line:__<pre>_id,class_</pre>__<p>The produced file is used to check that the registered IDs don't change_in future Flink versions.__<p>This method is not used in the tests, but documents how the test file_has been created and can be used to re-create it if needed.__@param filePath File path to write registrations to;private void writeDefaultKryoRegistrations(String filePath) throws IOException {_		final File file = new File(filePath)__		if (file.exists()) {_			assertTrue(file.delete())__		}__		final Kryo kryo = new KryoSerializer<>(Integer.class, new ExecutionConfig()).getKryo()__		final int nextId = kryo.getNextRegistrationId()___		try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {_			for (int i = 0_ i < nextId_ i++) {_				Registration registration = kryo.getRegistration(i)__				String str = registration.getId() + "," + registration.getType().getName()__				writer.write(str, 0, str.length())__				writer.newLine()__			}__			System.out.println("Created file with registrations at " + file.getAbsolutePath())__		}_	};creates,a,kryo,serializer,and,writes,the,default,registrations,out,to,a,comma,separated,file,with,one,entry,per,line,pre,id,class,pre,p,the,produced,file,is,used,to,check,that,the,registered,ids,don,t,change,in,future,flink,versions,p,this,method,is,not,used,in,the,tests,but,documents,how,the,test,file,has,been,created,and,can,be,used,to,re,create,it,if,needed,param,file,path,file,path,to,write,registrations,to;private,void,write,default,kryo,registrations,string,file,path,throws,ioexception,final,file,file,new,file,file,path,if,file,exists,assert,true,file,delete,final,kryo,kryo,new,kryo,serializer,integer,class,new,execution,config,get,kryo,final,int,next,id,kryo,get,next,registration,id,try,buffered,writer,writer,new,buffered,writer,new,file,writer,file,for,int,i,0,i,next,id,i,registration,registration,kryo,get,registration,i,string,str,registration,get,id,registration,get,type,get,name,writer,write,str,0,str,length,writer,new,line,system,out,println,created,file,with,registrations,at,file,get,absolute,path
KryoSerializerRegistrationsTest -> private void writeDefaultKryoRegistrations(String filePath) throws IOException;1509723634;Creates a Kryo serializer and writes the default registrations out to a_comma separated file with one entry per line:__<pre>_id,class_</pre>__<p>The produced file is used to check that the registered IDs don't change_in future Flink versions.__<p>This method is not used in the tests, but documents how the test file_has been created and can be used to re-create it if needed.__@param filePath File path to write registrations to;private void writeDefaultKryoRegistrations(String filePath) throws IOException {_		final File file = new File(filePath)__		if (file.exists()) {_			assertTrue(file.delete())__		}__		final Kryo kryo = new KryoSerializer<>(Integer.class, new ExecutionConfig()).getKryo()__		final int nextId = kryo.getNextRegistrationId()___		try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {_			for (int i = 0_ i < nextId_ i++) {_				Registration registration = kryo.getRegistration(i)__				String str = registration.getId() + "," + registration.getType().getName()__				writer.write(str, 0, str.length())__				writer.newLine()__			}__			System.out.println("Created file with registrations at " + file.getAbsolutePath())__		}_	};creates,a,kryo,serializer,and,writes,the,default,registrations,out,to,a,comma,separated,file,with,one,entry,per,line,pre,id,class,pre,p,the,produced,file,is,used,to,check,that,the,registered,ids,don,t,change,in,future,flink,versions,p,this,method,is,not,used,in,the,tests,but,documents,how,the,test,file,has,been,created,and,can,be,used,to,re,create,it,if,needed,param,file,path,file,path,to,write,registrations,to;private,void,write,default,kryo,registrations,string,file,path,throws,ioexception,final,file,file,new,file,file,path,if,file,exists,assert,true,file,delete,final,kryo,kryo,new,kryo,serializer,integer,class,new,execution,config,get,kryo,final,int,next,id,kryo,get,next,registration,id,try,buffered,writer,writer,new,buffered,writer,new,file,writer,file,for,int,i,0,i,next,id,i,registration,registration,kryo,get,registration,i,string,str,registration,get,id,registration,get,type,get,name,writer,write,str,0,str,length,writer,new,line,system,out,println,created,file,with,registrations,at,file,get,absolute,path
KryoSerializerRegistrationsTest -> private void writeDefaultKryoRegistrations(String filePath) throws IOException;1511347989;Creates a Kryo serializer and writes the default registrations out to a_comma separated file with one entry per line:__<pre>_id,class_</pre>__<p>The produced file is used to check that the registered IDs don't change_in future Flink versions.__<p>This method is not used in the tests, but documents how the test file_has been created and can be used to re-create it if needed.__@param filePath File path to write registrations to;private void writeDefaultKryoRegistrations(String filePath) throws IOException {_		final File file = new File(filePath)__		if (file.exists()) {_			assertTrue(file.delete())__		}__		final Kryo kryo = new KryoSerializer<>(Integer.class, new ExecutionConfig()).getKryo()__		final int nextId = kryo.getNextRegistrationId()___		try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {_			for (int i = 0_ i < nextId_ i++) {_				Registration registration = kryo.getRegistration(i)__				String str = registration.getId() + "," + registration.getType().getName()__				writer.write(str, 0, str.length())__				writer.newLine()__			}__			System.out.println("Created file with registrations at " + file.getAbsolutePath())__		}_	};creates,a,kryo,serializer,and,writes,the,default,registrations,out,to,a,comma,separated,file,with,one,entry,per,line,pre,id,class,pre,p,the,produced,file,is,used,to,check,that,the,registered,ids,don,t,change,in,future,flink,versions,p,this,method,is,not,used,in,the,tests,but,documents,how,the,test,file,has,been,created,and,can,be,used,to,re,create,it,if,needed,param,file,path,file,path,to,write,registrations,to;private,void,write,default,kryo,registrations,string,file,path,throws,ioexception,final,file,file,new,file,file,path,if,file,exists,assert,true,file,delete,final,kryo,kryo,new,kryo,serializer,integer,class,new,execution,config,get,kryo,final,int,next,id,kryo,get,next,registration,id,try,buffered,writer,writer,new,buffered,writer,new,file,writer,file,for,int,i,0,i,next,id,i,registration,registration,kryo,get,registration,i,string,str,registration,get,id,registration,get,type,get,name,writer,write,str,0,str,length,writer,new,line,system,out,println,created,file,with,registrations,at,file,get,absolute,path
