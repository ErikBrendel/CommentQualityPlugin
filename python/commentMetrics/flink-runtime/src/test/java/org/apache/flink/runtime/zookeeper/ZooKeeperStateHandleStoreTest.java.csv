# id;timestamp;commentText;codeText;commentWords;codeWords
ZooKeeperStateHandleStoreTest -> @Test 	public void testReleaseAll() throws Exception;1495184252;FLINK-6612__Tests that we can release all locked state handles in the ZooKeeperStateHandleStore;@Test_	public void testReleaseAll() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage,_			Executors.directExecutor())___		final Collection<String> paths = Arrays.asList("/state1", "/state2", "/state3")___		for (String path : paths) {_			zkStore.addAndLock(path, 42L)__		}__		for (String path : paths) {_			Stat stat = ZOOKEEPER.getClient().checkExists().forPath(zkStore.getLockPath(path))___			assertNotNull("Expecte and existing lock.", stat)__		}__		zkStore.releaseAll()___		for (String path : paths) {_			Stat stat = ZOOKEEPER.getClient().checkExists().forPath(path)___			assertEquals(0, stat.getNumChildren())__		}__		zkStore.releaseAndTryRemoveAll()___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath("/")___		assertEquals(0, stat.getNumChildren())__	};flink,6612,tests,that,we,can,release,all,locked,state,handles,in,the,zoo,keeper,state,handle,store;test,public,void,test,release,all,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,executors,direct,executor,final,collection,string,paths,arrays,as,list,state1,state2,state3,for,string,path,paths,zk,store,add,and,lock,path,42l,for,string,path,paths,stat,stat,zookeeper,get,client,check,exists,for,path,zk,store,get,lock,path,path,assert,not,null,expecte,and,existing,lock,stat,zk,store,release,all,for,string,path,paths,stat,stat,zookeeper,get,client,check,exists,for,path,path,assert,equals,0,stat,get,num,children,zk,store,release,and,try,remove,all,stat,stat,zookeeper,get,client,check,exists,for,path,assert,equals,0,stat,get,num,children
ZooKeeperStateHandleStoreTest -> @Test 	public void testReleaseAll() throws Exception;1495563868;FLINK-6612__Tests that we can release all locked state handles in the ZooKeeperStateHandleStore;@Test_	public void testReleaseAll() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage,_			Executors.directExecutor())___		final Collection<String> paths = Arrays.asList("/state1", "/state2", "/state3")___		for (String path : paths) {_			zkStore.addAndLock(path, 42L)__		}__		for (String path : paths) {_			Stat stat = ZOOKEEPER.getClient().checkExists().forPath(zkStore.getLockPath(path))___			assertNotNull("Expecte and existing lock.", stat)__		}__		zkStore.releaseAll()___		for (String path : paths) {_			Stat stat = ZOOKEEPER.getClient().checkExists().forPath(path)___			assertEquals(0, stat.getNumChildren())__		}__		zkStore.releaseAndTryRemoveAll()___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath("/")___		assertEquals(0, stat.getNumChildren())__	};flink,6612,tests,that,we,can,release,all,locked,state,handles,in,the,zoo,keeper,state,handle,store;test,public,void,test,release,all,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,executors,direct,executor,final,collection,string,paths,arrays,as,list,state1,state2,state3,for,string,path,paths,zk,store,add,and,lock,path,42l,for,string,path,paths,stat,stat,zookeeper,get,client,check,exists,for,path,zk,store,get,lock,path,path,assert,not,null,expecte,and,existing,lock,stat,zk,store,release,all,for,string,path,paths,stat,stat,zookeeper,get,client,check,exists,for,path,path,assert,equals,0,stat,get,num,children,zk,store,release,and,try,remove,all,stat,stat,zookeeper,get,client,check,exists,for,path,assert,equals,0,stat,get,num,children
ZooKeeperStateHandleStoreTest -> @Test 	public void testReleaseAll() throws Exception;1536763178;FLINK-6612__Tests that we can release all locked state handles in the ZooKeeperStateHandleStore;@Test_	public void testReleaseAll() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		final Collection<String> paths = Arrays.asList("/state1", "/state2", "/state3")___		for (String path : paths) {_			zkStore.addAndLock(path, 42L)__		}__		for (String path : paths) {_			Stat stat = ZOOKEEPER.getClient().checkExists().forPath(zkStore.getLockPath(path))___			assertNotNull("Expecte and existing lock.", stat)__		}__		zkStore.releaseAll()___		for (String path : paths) {_			Stat stat = ZOOKEEPER.getClient().checkExists().forPath(path)___			assertEquals(0, stat.getNumChildren())__		}__		zkStore.releaseAndTryRemoveAll()___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath("/")___		assertEquals(0, stat.getNumChildren())__	};flink,6612,tests,that,we,can,release,all,locked,state,handles,in,the,zoo,keeper,state,handle,store;test,public,void,test,release,all,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,collection,string,paths,arrays,as,list,state1,state2,state3,for,string,path,paths,zk,store,add,and,lock,path,42l,for,string,path,paths,stat,stat,zookeeper,get,client,check,exists,for,path,zk,store,get,lock,path,path,assert,not,null,expecte,and,existing,lock,stat,zk,store,release,all,for,string,path,paths,stat,stat,zookeeper,get,client,check,exists,for,path,path,assert,equals,0,stat,get,num,children,zk,store,release,and,try,remove,all,stat,stat,zookeeper,get,client,check,exists,for,path,assert,equals,0,stat,get,num,children
ZooKeeperStateHandleStoreTest -> @Test 	public void testReleaseAll() throws Exception;1537357883;FLINK-6612__Tests that we can release all locked state handles in the ZooKeeperStateHandleStore;@Test_	public void testReleaseAll() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		final Collection<String> paths = Arrays.asList("/state1", "/state2", "/state3")___		for (String path : paths) {_			zkStore.addAndLock(path, 42L)__		}__		for (String path : paths) {_			Stat stat = ZOOKEEPER.getClient().checkExists().forPath(zkStore.getLockPath(path))___			assertNotNull("Expecte and existing lock.", stat)__		}__		zkStore.releaseAll()___		for (String path : paths) {_			Stat stat = ZOOKEEPER.getClient().checkExists().forPath(path)___			assertEquals(0, stat.getNumChildren())__		}__		zkStore.releaseAndTryRemoveAll()___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath("/")___		assertEquals(0, stat.getNumChildren())__	};flink,6612,tests,that,we,can,release,all,locked,state,handles,in,the,zoo,keeper,state,handle,store;test,public,void,test,release,all,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,collection,string,paths,arrays,as,list,state1,state2,state3,for,string,path,paths,zk,store,add,and,lock,path,42l,for,string,path,paths,stat,stat,zookeeper,get,client,check,exists,for,path,zk,store,get,lock,path,path,assert,not,null,expecte,and,existing,lock,stat,zk,store,release,all,for,string,path,paths,stat,stat,zookeeper,get,client,check,exists,for,path,path,assert,equals,0,stat,get,num,children,zk,store,release,and,try,remove,all,stat,stat,zookeeper,get,client,check,exists,for,path,assert,equals,0,stat,get,num,children
ZooKeeperStateHandleStoreTest -> @Test 	public void testReleaseAll() throws Exception;1547547304;FLINK-6612__Tests that we can release all locked state handles in the ZooKeeperStateHandleStore;@Test_	public void testReleaseAll() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		final Collection<String> paths = Arrays.asList("/state1", "/state2", "/state3")___		for (String path : paths) {_			zkStore.addAndLock(path, 42L)__		}__		for (String path : paths) {_			Stat stat = ZOOKEEPER.getClient().checkExists().forPath(zkStore.getLockPath(path))___			assertNotNull("Expecte and existing lock.", stat)__		}__		zkStore.releaseAll()___		for (String path : paths) {_			Stat stat = ZOOKEEPER.getClient().checkExists().forPath(path)___			assertEquals(0, stat.getNumChildren())__		}__		zkStore.releaseAndTryRemoveAll()___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath("/")___		assertEquals(0, stat.getNumChildren())__	};flink,6612,tests,that,we,can,release,all,locked,state,handles,in,the,zoo,keeper,state,handle,store;test,public,void,test,release,all,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,collection,string,paths,arrays,as,list,state1,state2,state3,for,string,path,paths,zk,store,add,and,lock,path,42l,for,string,path,paths,stat,stat,zookeeper,get,client,check,exists,for,path,zk,store,get,lock,path,path,assert,not,null,expecte,and,existing,lock,stat,zk,store,release,all,for,string,path,paths,stat,stat,zookeeper,get,client,check,exists,for,path,path,assert,equals,0,stat,get,num,children,zk,store,release,and,try,remove,all,stat,stat,zookeeper,get,client,check,exists,for,path,assert,equals,0,stat,get,num,children
ZooKeeperStateHandleStoreTest -> @Test 	public void testReplaceDiscardStateHandleAfterFailure() throws Exception;1495184252;Tests that the replace state handle is discarded if ZooKeeper setData fails.;@Test_	public void testReplaceDiscardStateHandleAfterFailure() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		CuratorFramework client = spy(ZOOKEEPER.getClient())__		when(client.setData()).thenThrow(new RuntimeException("Expected test Exception."))___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				client, stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testReplaceDiscardStateHandleAfterFailure"__		final Long initialState = 30968470898L__		final Long replaceState = 88383776661L___		_		store.addAndLock(pathInZooKeeper, initialState)___		try {_			store.replace(pathInZooKeeper, 0, replaceState)__			fail("Did not throw expected exception")__		}_		catch (Exception ignored) {_		}__		_		_		assertEquals(2, stateHandleProvider.getStateHandles().size())__		assertEquals(initialState, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(replaceState, stateHandleProvider.getStateHandles().get(1).retrieveState())__		assertEquals(1, stateHandleProvider.getStateHandles().get(1).getNumberOfDiscardCalls())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(initialState, actual)__	};tests,that,the,replace,state,handle,is,discarded,if,zoo,keeper,set,data,fails;test,public,void,test,replace,discard,state,handle,after,failure,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,curator,framework,client,spy,zookeeper,get,client,when,client,set,data,then,throw,new,runtime,exception,expected,test,exception,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,replace,discard,state,handle,after,failure,final,long,initial,state,30968470898l,final,long,replace,state,88383776661l,store,add,and,lock,path,in,zoo,keeper,initial,state,try,store,replace,path,in,zoo,keeper,0,replace,state,fail,did,not,throw,expected,exception,catch,exception,ignored,assert,equals,2,state,handle,provider,get,state,handles,size,assert,equals,initial,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,replace,state,state,handle,provider,get,state,handles,get,1,retrieve,state,assert,equals,1,state,handle,provider,get,state,handles,get,1,get,number,of,discard,calls,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,initial,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testReplaceDiscardStateHandleAfterFailure() throws Exception;1495563868;Tests that the replace state handle is discarded if ZooKeeper setData fails.;@Test_	public void testReplaceDiscardStateHandleAfterFailure() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		CuratorFramework client = spy(ZOOKEEPER.getClient())__		when(client.setData()).thenThrow(new RuntimeException("Expected test Exception."))___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				client, stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testReplaceDiscardStateHandleAfterFailure"__		final Long initialState = 30968470898L__		final Long replaceState = 88383776661L___		_		store.addAndLock(pathInZooKeeper, initialState)___		try {_			store.replace(pathInZooKeeper, 0, replaceState)__			fail("Did not throw expected exception")__		}_		catch (Exception ignored) {_		}__		_		_		assertEquals(2, stateHandleProvider.getStateHandles().size())__		assertEquals(initialState, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(replaceState, stateHandleProvider.getStateHandles().get(1).retrieveState())__		assertEquals(1, stateHandleProvider.getStateHandles().get(1).getNumberOfDiscardCalls())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(initialState, actual)__	};tests,that,the,replace,state,handle,is,discarded,if,zoo,keeper,set,data,fails;test,public,void,test,replace,discard,state,handle,after,failure,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,curator,framework,client,spy,zookeeper,get,client,when,client,set,data,then,throw,new,runtime,exception,expected,test,exception,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,replace,discard,state,handle,after,failure,final,long,initial,state,30968470898l,final,long,replace,state,88383776661l,store,add,and,lock,path,in,zoo,keeper,initial,state,try,store,replace,path,in,zoo,keeper,0,replace,state,fail,did,not,throw,expected,exception,catch,exception,ignored,assert,equals,2,state,handle,provider,get,state,handles,size,assert,equals,initial,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,replace,state,state,handle,provider,get,state,handles,get,1,retrieve,state,assert,equals,1,state,handle,provider,get,state,handles,get,1,get,number,of,discard,calls,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,initial,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testReplaceDiscardStateHandleAfterFailure() throws Exception;1536763178;Tests that the replace state handle is discarded if ZooKeeper setData fails.;@Test_	public void testReplaceDiscardStateHandleAfterFailure() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		CuratorFramework client = spy(ZOOKEEPER.getClient())__		when(client.setData()).thenThrow(new RuntimeException("Expected test Exception."))___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				client, stateHandleProvider)___		_		final String pathInZooKeeper = "/testReplaceDiscardStateHandleAfterFailure"__		final Long initialState = 30968470898L__		final Long replaceState = 88383776661L___		_		store.addAndLock(pathInZooKeeper, initialState)___		try {_			store.replace(pathInZooKeeper, 0, replaceState)__			fail("Did not throw expected exception")__		}_		catch (Exception ignored) {_		}__		_		_		assertEquals(2, stateHandleProvider.getStateHandles().size())__		assertEquals(initialState, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(replaceState, stateHandleProvider.getStateHandles().get(1).retrieveState())__		assertEquals(1, stateHandleProvider.getStateHandles().get(1).getNumberOfDiscardCalls())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(initialState, actual)__	};tests,that,the,replace,state,handle,is,discarded,if,zoo,keeper,set,data,fails;test,public,void,test,replace,discard,state,handle,after,failure,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,curator,framework,client,spy,zookeeper,get,client,when,client,set,data,then,throw,new,runtime,exception,expected,test,exception,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,client,state,handle,provider,final,string,path,in,zoo,keeper,test,replace,discard,state,handle,after,failure,final,long,initial,state,30968470898l,final,long,replace,state,88383776661l,store,add,and,lock,path,in,zoo,keeper,initial,state,try,store,replace,path,in,zoo,keeper,0,replace,state,fail,did,not,throw,expected,exception,catch,exception,ignored,assert,equals,2,state,handle,provider,get,state,handles,size,assert,equals,initial,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,replace,state,state,handle,provider,get,state,handles,get,1,retrieve,state,assert,equals,1,state,handle,provider,get,state,handles,get,1,get,number,of,discard,calls,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,initial,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testReplaceDiscardStateHandleAfterFailure() throws Exception;1537357883;Tests that the replace state handle is discarded if ZooKeeper setData fails.;@Test_	public void testReplaceDiscardStateHandleAfterFailure() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		CuratorFramework client = spy(ZOOKEEPER.getClient())__		when(client.setData()).thenThrow(new RuntimeException("Expected test Exception."))___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				client, stateHandleProvider)___		_		final String pathInZooKeeper = "/testReplaceDiscardStateHandleAfterFailure"__		final Long initialState = 30968470898L__		final Long replaceState = 88383776661L___		_		store.addAndLock(pathInZooKeeper, initialState)___		try {_			store.replace(pathInZooKeeper, 0, replaceState)__			fail("Did not throw expected exception")__		}_		catch (Exception ignored) {_		}__		_		_		assertEquals(2, stateHandleProvider.getStateHandles().size())__		assertEquals(initialState, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(replaceState, stateHandleProvider.getStateHandles().get(1).retrieveState())__		assertEquals(1, stateHandleProvider.getStateHandles().get(1).getNumberOfDiscardCalls())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(initialState, actual)__	};tests,that,the,replace,state,handle,is,discarded,if,zoo,keeper,set,data,fails;test,public,void,test,replace,discard,state,handle,after,failure,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,curator,framework,client,spy,zookeeper,get,client,when,client,set,data,then,throw,new,runtime,exception,expected,test,exception,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,client,state,handle,provider,final,string,path,in,zoo,keeper,test,replace,discard,state,handle,after,failure,final,long,initial,state,30968470898l,final,long,replace,state,88383776661l,store,add,and,lock,path,in,zoo,keeper,initial,state,try,store,replace,path,in,zoo,keeper,0,replace,state,fail,did,not,throw,expected,exception,catch,exception,ignored,assert,equals,2,state,handle,provider,get,state,handles,size,assert,equals,initial,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,replace,state,state,handle,provider,get,state,handles,get,1,retrieve,state,assert,equals,1,state,handle,provider,get,state,handles,get,1,get,number,of,discard,calls,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,initial,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testReplaceDiscardStateHandleAfterFailure() throws Exception;1547547304;Tests that the replace state handle is discarded if ZooKeeper setData fails.;@Test_	public void testReplaceDiscardStateHandleAfterFailure() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		CuratorFramework client = spy(ZOOKEEPER.getClient())__		when(client.setData()).thenThrow(new RuntimeException("Expected test Exception."))___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				client, stateHandleProvider)___		_		final String pathInZooKeeper = "/testReplaceDiscardStateHandleAfterFailure"__		final Long initialState = 30968470898L__		final Long replaceState = 88383776661L___		_		store.addAndLock(pathInZooKeeper, initialState)___		try {_			store.replace(pathInZooKeeper, 0, replaceState)__			fail("Did not throw expected exception")__		}_		catch (Exception ignored) {_		}__		_		_		assertEquals(2, stateHandleProvider.getStateHandles().size())__		assertEquals(initialState, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(replaceState, stateHandleProvider.getStateHandles().get(1).retrieveState())__		assertEquals(1, stateHandleProvider.getStateHandles().get(1).getNumberOfDiscardCalls())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(initialState, actual)__	};tests,that,the,replace,state,handle,is,discarded,if,zoo,keeper,set,data,fails;test,public,void,test,replace,discard,state,handle,after,failure,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,curator,framework,client,spy,zookeeper,get,client,when,client,set,data,then,throw,new,runtime,exception,expected,test,exception,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,client,state,handle,provider,final,string,path,in,zoo,keeper,test,replace,discard,state,handle,after,failure,final,long,initial,state,30968470898l,final,long,replace,state,88383776661l,store,add,and,lock,path,in,zoo,keeper,initial,state,try,store,replace,path,in,zoo,keeper,0,replace,state,fail,did,not,throw,expected,exception,catch,exception,ignored,assert,equals,2,state,handle,provider,get,state,handles,size,assert,equals,initial,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,replace,state,state,handle,provider,get,state,handles,get,1,retrieve,state,assert,equals,1,state,handle,provider,get,state,handles,get,1,get,number,of,discard,calls,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,initial,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testReleaseAndTryRemoveAll() throws Exception;1495184252;Tests that all state handles are correctly discarded.;@Test_	public void testReleaseAndTryRemoveAll() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testDiscardAll"___		final Set<Long> expected = new HashSet<>()__		expected.add(311222268470898L)__		expected.add(132812888L)__		expected.add(27255442L)__		expected.add(11122233124L)___		_		for (long val : expected) {_			store.addAndLock(pathInZooKeeper + val, val)__		}__		store.releaseAndTryRemoveAll()___		_		assertEquals(0, ZOOKEEPER.getClient().getChildren().forPath("/").size())__	};tests,that,all,state,handles,are,correctly,discarded;test,public,void,test,release,and,try,remove,all,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,discard,all,final,set,long,expected,new,hash,set,expected,add,311222268470898l,expected,add,132812888l,expected,add,27255442l,expected,add,11122233124l,for,long,val,expected,store,add,and,lock,path,in,zoo,keeper,val,val,store,release,and,try,remove,all,assert,equals,0,zookeeper,get,client,get,children,for,path,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testReleaseAndTryRemoveAll() throws Exception;1495563868;Tests that all state handles are correctly discarded.;@Test_	public void testReleaseAndTryRemoveAll() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testDiscardAll"___		final Set<Long> expected = new HashSet<>()__		expected.add(311222268470898L)__		expected.add(132812888L)__		expected.add(27255442L)__		expected.add(11122233124L)___		_		for (long val : expected) {_			store.addAndLock(pathInZooKeeper + val, val)__		}__		store.releaseAndTryRemoveAll()___		_		assertEquals(0, ZOOKEEPER.getClient().getChildren().forPath("/").size())__	};tests,that,all,state,handles,are,correctly,discarded;test,public,void,test,release,and,try,remove,all,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,discard,all,final,set,long,expected,new,hash,set,expected,add,311222268470898l,expected,add,132812888l,expected,add,27255442l,expected,add,11122233124l,for,long,val,expected,store,add,and,lock,path,in,zoo,keeper,val,val,store,release,and,try,remove,all,assert,equals,0,zookeeper,get,client,get,children,for,path,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testReleaseAndTryRemoveAll() throws Exception;1536763178;Tests that all state handles are correctly discarded.;@Test_	public void testReleaseAndTryRemoveAll() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testDiscardAll"___		final Set<Long> expected = new HashSet<>()__		expected.add(311222268470898L)__		expected.add(132812888L)__		expected.add(27255442L)__		expected.add(11122233124L)___		_		for (long val : expected) {_			store.addAndLock(pathInZooKeeper + val, val)__		}__		store.releaseAndTryRemoveAll()___		_		assertEquals(0, ZOOKEEPER.getClient().getChildren().forPath("/").size())__	};tests,that,all,state,handles,are,correctly,discarded;test,public,void,test,release,and,try,remove,all,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,discard,all,final,set,long,expected,new,hash,set,expected,add,311222268470898l,expected,add,132812888l,expected,add,27255442l,expected,add,11122233124l,for,long,val,expected,store,add,and,lock,path,in,zoo,keeper,val,val,store,release,and,try,remove,all,assert,equals,0,zookeeper,get,client,get,children,for,path,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testReleaseAndTryRemoveAll() throws Exception;1537357883;Tests that all state handles are correctly discarded.;@Test_	public void testReleaseAndTryRemoveAll() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testDiscardAll"___		final Set<Long> expected = new HashSet<>()__		expected.add(311222268470898L)__		expected.add(132812888L)__		expected.add(27255442L)__		expected.add(11122233124L)___		_		for (long val : expected) {_			store.addAndLock(pathInZooKeeper + val, val)__		}__		store.releaseAndTryRemoveAll()___		_		assertEquals(0, ZOOKEEPER.getClient().getChildren().forPath("/").size())__	};tests,that,all,state,handles,are,correctly,discarded;test,public,void,test,release,and,try,remove,all,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,discard,all,final,set,long,expected,new,hash,set,expected,add,311222268470898l,expected,add,132812888l,expected,add,27255442l,expected,add,11122233124l,for,long,val,expected,store,add,and,lock,path,in,zoo,keeper,val,val,store,release,and,try,remove,all,assert,equals,0,zookeeper,get,client,get,children,for,path,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testReleaseAndTryRemoveAll() throws Exception;1547547304;Tests that all state handles are correctly discarded.;@Test_	public void testReleaseAndTryRemoveAll() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testDiscardAll"___		final Set<Long> expected = new HashSet<>()__		expected.add(311222268470898L)__		expected.add(132812888L)__		expected.add(27255442L)__		expected.add(11122233124L)___		_		for (long val : expected) {_			store.addAndLock(pathInZooKeeper + val, val)__		}__		store.releaseAndTryRemoveAll()___		_		assertEquals(0, ZOOKEEPER.getClient().getChildren().forPath("/").size())__	};tests,that,all,state,handles,are,correctly,discarded;test,public,void,test,release,and,try,remove,all,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,discard,all,final,set,long,expected,new,hash,set,expected,add,311222268470898l,expected,add,132812888l,expected,add,27255442l,expected,add,11122233124l,for,long,val,expected,store,add,and,lock,path,in,zoo,keeper,val,val,store,release,and,try,remove,all,assert,equals,0,zookeeper,get,client,get,children,for,path,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testAddDiscardStateHandleAfterFailure() throws Exception;1495184252;Tests that the created state handle is discarded if ZooKeeper create fails.;@Test_	public void testAddDiscardStateHandleAfterFailure() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		CuratorFramework client = spy(ZOOKEEPER.getClient())__		when(client.inTransaction().create()).thenThrow(new RuntimeException("Expected test Exception."))___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				client, stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testAddDiscardStateHandleAfterFailure"__		final Long state = 81282227L___		try {_			_			store.addAndLock(pathInZooKeeper, state)__			fail("Did not throw expected exception")__		}_		catch (Exception ignored) {_		}__		_		_		assertEquals(1, stateHandleProvider.getStateHandles().size())__		assertEquals(state, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(1, stateHandleProvider.getStateHandles().get(0).getNumberOfDiscardCalls())__	};tests,that,the,created,state,handle,is,discarded,if,zoo,keeper,create,fails;test,public,void,test,add,discard,state,handle,after,failure,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,curator,framework,client,spy,zookeeper,get,client,when,client,in,transaction,create,then,throw,new,runtime,exception,expected,test,exception,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,add,discard,state,handle,after,failure,final,long,state,81282227l,try,store,add,and,lock,path,in,zoo,keeper,state,fail,did,not,throw,expected,exception,catch,exception,ignored,assert,equals,1,state,handle,provider,get,state,handles,size,assert,equals,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,1,state,handle,provider,get,state,handles,get,0,get,number,of,discard,calls
ZooKeeperStateHandleStoreTest -> @Test 	public void testAddDiscardStateHandleAfterFailure() throws Exception;1495563868;Tests that the created state handle is discarded if ZooKeeper create fails.;@Test_	public void testAddDiscardStateHandleAfterFailure() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		CuratorFramework client = spy(ZOOKEEPER.getClient())__		when(client.inTransaction().create()).thenThrow(new RuntimeException("Expected test Exception."))___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				client, stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testAddDiscardStateHandleAfterFailure"__		final Long state = 81282227L___		try {_			_			store.addAndLock(pathInZooKeeper, state)__			fail("Did not throw expected exception")__		}_		catch (Exception ignored) {_		}__		_		_		assertEquals(1, stateHandleProvider.getStateHandles().size())__		assertEquals(state, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(1, stateHandleProvider.getStateHandles().get(0).getNumberOfDiscardCalls())__	};tests,that,the,created,state,handle,is,discarded,if,zoo,keeper,create,fails;test,public,void,test,add,discard,state,handle,after,failure,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,curator,framework,client,spy,zookeeper,get,client,when,client,in,transaction,create,then,throw,new,runtime,exception,expected,test,exception,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,add,discard,state,handle,after,failure,final,long,state,81282227l,try,store,add,and,lock,path,in,zoo,keeper,state,fail,did,not,throw,expected,exception,catch,exception,ignored,assert,equals,1,state,handle,provider,get,state,handles,size,assert,equals,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,1,state,handle,provider,get,state,handles,get,0,get,number,of,discard,calls
ZooKeeperStateHandleStoreTest -> @Test 	public void testAddDiscardStateHandleAfterFailure() throws Exception;1536763178;Tests that the created state handle is discarded if ZooKeeper create fails.;@Test_	public void testAddDiscardStateHandleAfterFailure() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		CuratorFramework client = spy(ZOOKEEPER.getClient())__		when(client.inTransaction().create()).thenThrow(new RuntimeException("Expected test Exception."))___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				client, stateHandleProvider)___		_		final String pathInZooKeeper = "/testAddDiscardStateHandleAfterFailure"__		final Long state = 81282227L___		try {_			_			store.addAndLock(pathInZooKeeper, state)__			fail("Did not throw expected exception")__		}_		catch (Exception ignored) {_		}__		_		_		assertEquals(1, stateHandleProvider.getStateHandles().size())__		assertEquals(state, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(1, stateHandleProvider.getStateHandles().get(0).getNumberOfDiscardCalls())__	};tests,that,the,created,state,handle,is,discarded,if,zoo,keeper,create,fails;test,public,void,test,add,discard,state,handle,after,failure,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,curator,framework,client,spy,zookeeper,get,client,when,client,in,transaction,create,then,throw,new,runtime,exception,expected,test,exception,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,client,state,handle,provider,final,string,path,in,zoo,keeper,test,add,discard,state,handle,after,failure,final,long,state,81282227l,try,store,add,and,lock,path,in,zoo,keeper,state,fail,did,not,throw,expected,exception,catch,exception,ignored,assert,equals,1,state,handle,provider,get,state,handles,size,assert,equals,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,1,state,handle,provider,get,state,handles,get,0,get,number,of,discard,calls
ZooKeeperStateHandleStoreTest -> @Test 	public void testAddDiscardStateHandleAfterFailure() throws Exception;1537357883;Tests that the created state handle is discarded if ZooKeeper create fails.;@Test_	public void testAddDiscardStateHandleAfterFailure() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		CuratorFramework client = spy(ZOOKEEPER.getClient())__		when(client.inTransaction().create()).thenThrow(new RuntimeException("Expected test Exception."))___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				client, stateHandleProvider)___		_		final String pathInZooKeeper = "/testAddDiscardStateHandleAfterFailure"__		final Long state = 81282227L___		try {_			_			store.addAndLock(pathInZooKeeper, state)__			fail("Did not throw expected exception")__		}_		catch (Exception ignored) {_		}__		_		_		assertEquals(1, stateHandleProvider.getStateHandles().size())__		assertEquals(state, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(1, stateHandleProvider.getStateHandles().get(0).getNumberOfDiscardCalls())__	};tests,that,the,created,state,handle,is,discarded,if,zoo,keeper,create,fails;test,public,void,test,add,discard,state,handle,after,failure,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,curator,framework,client,spy,zookeeper,get,client,when,client,in,transaction,create,then,throw,new,runtime,exception,expected,test,exception,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,client,state,handle,provider,final,string,path,in,zoo,keeper,test,add,discard,state,handle,after,failure,final,long,state,81282227l,try,store,add,and,lock,path,in,zoo,keeper,state,fail,did,not,throw,expected,exception,catch,exception,ignored,assert,equals,1,state,handle,provider,get,state,handles,size,assert,equals,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,1,state,handle,provider,get,state,handles,get,0,get,number,of,discard,calls
ZooKeeperStateHandleStoreTest -> @Test 	public void testAddDiscardStateHandleAfterFailure() throws Exception;1547547304;Tests that the created state handle is discarded if ZooKeeper create fails.;@Test_	public void testAddDiscardStateHandleAfterFailure() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		CuratorFramework client = spy(ZOOKEEPER.getClient())__		when(client.inTransaction().create()).thenThrow(new RuntimeException("Expected test Exception."))___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				client, stateHandleProvider)___		_		final String pathInZooKeeper = "/testAddDiscardStateHandleAfterFailure"__		final Long state = 81282227L___		try {_			_			store.addAndLock(pathInZooKeeper, state)__			fail("Did not throw expected exception")__		}_		catch (Exception ignored) {_		}__		_		_		assertEquals(1, stateHandleProvider.getStateHandles().size())__		assertEquals(state, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(1, stateHandleProvider.getStateHandles().get(0).getNumberOfDiscardCalls())__	};tests,that,the,created,state,handle,is,discarded,if,zoo,keeper,create,fails;test,public,void,test,add,discard,state,handle,after,failure,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,curator,framework,client,spy,zookeeper,get,client,when,client,in,transaction,create,then,throw,new,runtime,exception,expected,test,exception,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,client,state,handle,provider,final,string,path,in,zoo,keeper,test,add,discard,state,handle,after,failure,final,long,state,81282227l,try,store,add,and,lock,path,in,zoo,keeper,state,fail,did,not,throw,expected,exception,catch,exception,ignored,assert,equals,1,state,handle,provider,get,state,handles,size,assert,equals,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,1,state,handle,provider,get,state,handles,get,0,get,number,of,discard,calls
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testReplaceNonExistingPath() throws Exception;1495184252;Tests that a non existing path throws an Exception.;@Test(expected = Exception.class)_	public void testReplaceNonExistingPath() throws Exception {_		RetrievableStateStorageHelper<Long> stateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateStorage, Executors.directExecutor())___		store.replace("/testReplaceNonExistingPath", 0, 1L)__	};tests,that,a,non,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,replace,non,existing,path,throws,exception,retrievable,state,storage,helper,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,storage,executors,direct,executor,store,replace,test,replace,non,existing,path,0,1l
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testReplaceNonExistingPath() throws Exception;1495563868;Tests that a non existing path throws an Exception.;@Test(expected = Exception.class)_	public void testReplaceNonExistingPath() throws Exception {_		RetrievableStateStorageHelper<Long> stateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateStorage, Executors.directExecutor())___		store.replace("/testReplaceNonExistingPath", 0, 1L)__	};tests,that,a,non,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,replace,non,existing,path,throws,exception,retrievable,state,storage,helper,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,storage,executors,direct,executor,store,replace,test,replace,non,existing,path,0,1l
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testReplaceNonExistingPath() throws Exception;1536763178;Tests that a non existing path throws an Exception.;@Test(expected = Exception.class)_	public void testReplaceNonExistingPath() throws Exception {_		RetrievableStateStorageHelper<Long> stateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateStorage)___		store.replace("/testReplaceNonExistingPath", 0, 1L)__	};tests,that,a,non,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,replace,non,existing,path,throws,exception,retrievable,state,storage,helper,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,storage,store,replace,test,replace,non,existing,path,0,1l
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testReplaceNonExistingPath() throws Exception;1537357883;Tests that a non existing path throws an Exception.;@Test(expected = Exception.class)_	public void testReplaceNonExistingPath() throws Exception {_		RetrievableStateStorageHelper<Long> stateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateStorage)___		store.replace("/testReplaceNonExistingPath", 0, 1L)__	};tests,that,a,non,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,replace,non,existing,path,throws,exception,retrievable,state,storage,helper,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,storage,store,replace,test,replace,non,existing,path,0,1l
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testReplaceNonExistingPath() throws Exception;1547547304;Tests that a non existing path throws an Exception.;@Test(expected = Exception.class)_	public void testReplaceNonExistingPath() throws Exception {_		RetrievableStateStorageHelper<Long> stateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateStorage)___		store.replace("/testReplaceNonExistingPath", 0, 1L)__	};tests,that,a,non,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,replace,non,existing,path,throws,exception,retrievable,state,storage,helper,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,storage,store,replace,test,replace,non,existing,path,0,1l
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testAddAlreadyExistingPath() throws Exception;1495184252;Tests that an existing path throws an Exception.;@Test(expected = Exception.class)_	public void testAddAlreadyExistingPath() throws Exception {_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		ZOOKEEPER.getClient().create().forPath("/testAddAlreadyExistingPath")___		store.addAndLock("/testAddAlreadyExistingPath", 1L)___		_		assertEquals(1, stateHandleProvider.getStateHandles())___		_		assertEquals(1, stateHandleProvider.getStateHandles().get(0).getNumberOfDiscardCalls())__	};tests,that,an,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,add,already,existing,path,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,zookeeper,get,client,create,for,path,test,add,already,existing,path,store,add,and,lock,test,add,already,existing,path,1l,assert,equals,1,state,handle,provider,get,state,handles,assert,equals,1,state,handle,provider,get,state,handles,get,0,get,number,of,discard,calls
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testAddAlreadyExistingPath() throws Exception;1495563868;Tests that an existing path throws an Exception.;@Test(expected = Exception.class)_	public void testAddAlreadyExistingPath() throws Exception {_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		ZOOKEEPER.getClient().create().forPath("/testAddAlreadyExistingPath")___		store.addAndLock("/testAddAlreadyExistingPath", 1L)___		_		assertEquals(1, stateHandleProvider.getStateHandles())___		_		assertEquals(1, stateHandleProvider.getStateHandles().get(0).getNumberOfDiscardCalls())__	};tests,that,an,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,add,already,existing,path,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,zookeeper,get,client,create,for,path,test,add,already,existing,path,store,add,and,lock,test,add,already,existing,path,1l,assert,equals,1,state,handle,provider,get,state,handles,assert,equals,1,state,handle,provider,get,state,handles,get,0,get,number,of,discard,calls
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testAddAlreadyExistingPath() throws Exception;1536763178;Tests that an existing path throws an Exception.;@Test(expected = Exception.class)_	public void testAddAlreadyExistingPath() throws Exception {_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		ZOOKEEPER.getClient().create().forPath("/testAddAlreadyExistingPath")___		store.addAndLock("/testAddAlreadyExistingPath", 1L)___		_		assertEquals(1, stateHandleProvider.getStateHandles())___		_		assertEquals(1, stateHandleProvider.getStateHandles().get(0).getNumberOfDiscardCalls())__	};tests,that,an,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,add,already,existing,path,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,zookeeper,get,client,create,for,path,test,add,already,existing,path,store,add,and,lock,test,add,already,existing,path,1l,assert,equals,1,state,handle,provider,get,state,handles,assert,equals,1,state,handle,provider,get,state,handles,get,0,get,number,of,discard,calls
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testAddAlreadyExistingPath() throws Exception;1537357883;Tests that an existing path throws an Exception.;@Test(expected = Exception.class)_	public void testAddAlreadyExistingPath() throws Exception {_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		ZOOKEEPER.getClient().create().forPath("/testAddAlreadyExistingPath")___		store.addAndLock("/testAddAlreadyExistingPath", 1L)___		_		assertEquals(1, stateHandleProvider.getStateHandles())___		_		assertEquals(1, stateHandleProvider.getStateHandles().get(0).getNumberOfDiscardCalls())__	};tests,that,an,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,add,already,existing,path,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,zookeeper,get,client,create,for,path,test,add,already,existing,path,store,add,and,lock,test,add,already,existing,path,1l,assert,equals,1,state,handle,provider,get,state,handles,assert,equals,1,state,handle,provider,get,state,handles,get,0,get,number,of,discard,calls
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testAddAlreadyExistingPath() throws Exception;1547547304;Tests that an existing path throws an Exception.;@Test(expected = Exception.class)_	public void testAddAlreadyExistingPath() throws Exception {_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		ZOOKEEPER.getClient().create().forPath("/testAddAlreadyExistingPath")___		store.addAndLock("/testAddAlreadyExistingPath", 1L)___		_		assertEquals(1, stateHandleProvider.getStateHandles())___		_		assertEquals(1, stateHandleProvider.getStateHandles().get(0).getNumberOfDiscardCalls())__	};tests,that,an,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,add,already,existing,path,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,zookeeper,get,client,create,for,path,test,add,already,existing,path,store,add,and,lock,test,add,already,existing,path,1l,assert,equals,1,state,handle,provider,get,state,handles,assert,equals,1,state,handle,provider,get,state,handles,get,0,get,number,of,discard,calls
ZooKeeperStateHandleStoreTest -> @Test 	public void testRemoveWithCallback() throws Exception;1495184252;Tests that state handles are correctly removed with a callback.;@Test_	public void testRemoveWithCallback() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testRemoveWithCallback"__		final Long state = 27255442L___		store.addAndLock(pathInZooKeeper, state)___		final CountDownLatch sync = new CountDownLatch(1)__		ZooKeeperStateHandleStore.RemoveCallback<Long> callback = mock(ZooKeeperStateHandleStore.RemoveCallback.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				sync.countDown()__				return null__			}_		}).when(callback).apply(any(RetrievableStateHandle.class))___		_		store.releaseAndTryRemove(pathInZooKeeper, callback)___		_		assertEquals(0, ZOOKEEPER.getClient().getChildren().forPath("/").size())___		sync.await()___		verify(callback, times(1))_				.apply(any(RetrievableStateHandle.class))__	};tests,that,state,handles,are,correctly,removed,with,a,callback;test,public,void,test,remove,with,callback,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,remove,with,callback,final,long,state,27255442l,store,add,and,lock,path,in,zoo,keeper,state,final,count,down,latch,sync,new,count,down,latch,1,zoo,keeper,state,handle,store,remove,callback,long,callback,mock,zoo,keeper,state,handle,store,remove,callback,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,return,null,when,callback,apply,any,retrievable,state,handle,class,store,release,and,try,remove,path,in,zoo,keeper,callback,assert,equals,0,zookeeper,get,client,get,children,for,path,size,sync,await,verify,callback,times,1,apply,any,retrievable,state,handle,class
ZooKeeperStateHandleStoreTest -> @Test 	public void testRemoveWithCallback() throws Exception;1495563868;Tests that state handles are correctly removed with a callback.;@Test_	public void testRemoveWithCallback() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testRemoveWithCallback"__		final Long state = 27255442L___		store.addAndLock(pathInZooKeeper, state)___		final CountDownLatch sync = new CountDownLatch(1)__		ZooKeeperStateHandleStore.RemoveCallback<Long> callback = mock(ZooKeeperStateHandleStore.RemoveCallback.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				sync.countDown()__				return null__			}_		}).when(callback).apply(any(RetrievableStateHandle.class))___		_		store.releaseAndTryRemove(pathInZooKeeper, callback)___		_		assertEquals(0, ZOOKEEPER.getClient().getChildren().forPath("/").size())___		sync.await()___		verify(callback, times(1))_				.apply(any(RetrievableStateHandle.class))__	};tests,that,state,handles,are,correctly,removed,with,a,callback;test,public,void,test,remove,with,callback,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,remove,with,callback,final,long,state,27255442l,store,add,and,lock,path,in,zoo,keeper,state,final,count,down,latch,sync,new,count,down,latch,1,zoo,keeper,state,handle,store,remove,callback,long,callback,mock,zoo,keeper,state,handle,store,remove,callback,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,return,null,when,callback,apply,any,retrievable,state,handle,class,store,release,and,try,remove,path,in,zoo,keeper,callback,assert,equals,0,zookeeper,get,client,get,children,for,path,size,sync,await,verify,callback,times,1,apply,any,retrievable,state,handle,class
ZooKeeperStateHandleStoreTest -> @Test 	public void testAddAndLock() throws Exception;1495184252;Tests add operation with lock.;@Test_	public void testAddAndLock() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()__		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<Long>(_				ZOOKEEPER.getClient(), longStateStorage, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testAdd"__		final Long state = 1239712317L___		_		store.addAndLock(pathInZooKeeper, state)___		_		_		assertEquals(1, store.getAllAndLock().size())__		assertEquals(state, store.getAndLock(pathInZooKeeper).retrieveState())___		_		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper)__		assertNotNull(stat)__		assertEquals(0, stat.getEphemeralOwner())___		List<String> children = ZOOKEEPER.getClient().getChildren().forPath(pathInZooKeeper)___		_		assertEquals(1, children.size())___		stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper + '/' + children.get(0))__		assertNotNull(stat)___		_		assertNotEquals(0, stat.getEphemeralOwner())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(state, actual)__	};tests,add,operation,with,lock;test,public,void,test,add,and,lock,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,long,zookeeper,get,client,long,state,storage,executors,direct,executor,final,string,path,in,zoo,keeper,test,add,final,long,state,1239712317l,store,add,and,lock,path,in,zoo,keeper,state,assert,equals,1,store,get,all,and,lock,size,assert,equals,state,store,get,and,lock,path,in,zoo,keeper,retrieve,state,stat,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,assert,not,null,stat,assert,equals,0,stat,get,ephemeral,owner,list,string,children,zookeeper,get,client,get,children,for,path,path,in,zoo,keeper,assert,equals,1,children,size,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,children,get,0,assert,not,null,stat,assert,not,equals,0,stat,get,ephemeral,owner,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testAddAndLock() throws Exception;1495563868;Tests add operation with lock.;@Test_	public void testAddAndLock() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()__		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<Long>(_				ZOOKEEPER.getClient(), longStateStorage, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testAdd"__		final Long state = 1239712317L___		_		store.addAndLock(pathInZooKeeper, state)___		_		_		assertEquals(1, store.getAllAndLock().size())__		assertEquals(state, store.getAndLock(pathInZooKeeper).retrieveState())___		_		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper)__		assertNotNull(stat)__		assertEquals(0, stat.getEphemeralOwner())___		List<String> children = ZOOKEEPER.getClient().getChildren().forPath(pathInZooKeeper)___		_		assertEquals(1, children.size())___		stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper + '/' + children.get(0))__		assertNotNull(stat)___		_		assertNotEquals(0, stat.getEphemeralOwner())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(state, actual)__	};tests,add,operation,with,lock;test,public,void,test,add,and,lock,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,long,zookeeper,get,client,long,state,storage,executors,direct,executor,final,string,path,in,zoo,keeper,test,add,final,long,state,1239712317l,store,add,and,lock,path,in,zoo,keeper,state,assert,equals,1,store,get,all,and,lock,size,assert,equals,state,store,get,and,lock,path,in,zoo,keeper,retrieve,state,stat,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,assert,not,null,stat,assert,equals,0,stat,get,ephemeral,owner,list,string,children,zookeeper,get,client,get,children,for,path,path,in,zoo,keeper,assert,equals,1,children,size,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,children,get,0,assert,not,null,stat,assert,not,equals,0,stat,get,ephemeral,owner,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testAddAndLock() throws Exception;1536763178;Tests add operation with lock.;@Test_	public void testAddAndLock() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()__		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(), longStateStorage)___		_		final String pathInZooKeeper = "/testAdd"__		final Long state = 1239712317L___		_		store.addAndLock(pathInZooKeeper, state)___		_		_		assertEquals(1, store.getAllAndLock().size())__		assertEquals(state, store.getAndLock(pathInZooKeeper).retrieveState())___		_		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper)__		assertNotNull(stat)__		assertEquals(0, stat.getEphemeralOwner())___		List<String> children = ZOOKEEPER.getClient().getChildren().forPath(pathInZooKeeper)___		_		assertEquals(1, children.size())___		stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper + '/' + children.get(0))__		assertNotNull(stat)___		_		assertNotEquals(0, stat.getEphemeralOwner())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(state, actual)__	};tests,add,operation,with,lock;test,public,void,test,add,and,lock,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,string,path,in,zoo,keeper,test,add,final,long,state,1239712317l,store,add,and,lock,path,in,zoo,keeper,state,assert,equals,1,store,get,all,and,lock,size,assert,equals,state,store,get,and,lock,path,in,zoo,keeper,retrieve,state,stat,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,assert,not,null,stat,assert,equals,0,stat,get,ephemeral,owner,list,string,children,zookeeper,get,client,get,children,for,path,path,in,zoo,keeper,assert,equals,1,children,size,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,children,get,0,assert,not,null,stat,assert,not,equals,0,stat,get,ephemeral,owner,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testAddAndLock() throws Exception;1537357883;Tests add operation with lock.;@Test_	public void testAddAndLock() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()__		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(), longStateStorage)___		_		final String pathInZooKeeper = "/testAdd"__		final Long state = 1239712317L___		_		store.addAndLock(pathInZooKeeper, state)___		_		_		assertEquals(1, store.getAllAndLock().size())__		assertEquals(state, store.getAndLock(pathInZooKeeper).retrieveState())___		_		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper)__		assertNotNull(stat)__		assertEquals(0, stat.getEphemeralOwner())___		List<String> children = ZOOKEEPER.getClient().getChildren().forPath(pathInZooKeeper)___		_		assertEquals(1, children.size())___		stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper + '/' + children.get(0))__		assertNotNull(stat)___		_		assertNotEquals(0, stat.getEphemeralOwner())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(state, actual)__	};tests,add,operation,with,lock;test,public,void,test,add,and,lock,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,string,path,in,zoo,keeper,test,add,final,long,state,1239712317l,store,add,and,lock,path,in,zoo,keeper,state,assert,equals,1,store,get,all,and,lock,size,assert,equals,state,store,get,and,lock,path,in,zoo,keeper,retrieve,state,stat,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,assert,not,null,stat,assert,equals,0,stat,get,ephemeral,owner,list,string,children,zookeeper,get,client,get,children,for,path,path,in,zoo,keeper,assert,equals,1,children,size,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,children,get,0,assert,not,null,stat,assert,not,equals,0,stat,get,ephemeral,owner,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testAddAndLock() throws Exception;1547547304;Tests add operation with lock.;@Test_	public void testAddAndLock() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()__		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(), longStateStorage)___		_		final String pathInZooKeeper = "/testAdd"__		final Long state = 1239712317L___		_		store.addAndLock(pathInZooKeeper, state)___		_		_		assertEquals(1, store.getAllAndLock().size())__		assertEquals(state, store.getAndLock(pathInZooKeeper).retrieveState())___		_		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper)__		assertNotNull(stat)__		assertEquals(0, stat.getEphemeralOwner())___		List<String> children = ZOOKEEPER.getClient().getChildren().forPath(pathInZooKeeper)___		_		assertEquals(1, children.size())___		stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper + '/' + children.get(0))__		assertNotNull(stat)___		_		assertNotEquals(0, stat.getEphemeralOwner())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(state, actual)__	};tests,add,operation,with,lock;test,public,void,test,add,and,lock,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,string,path,in,zoo,keeper,test,add,final,long,state,1239712317l,store,add,and,lock,path,in,zoo,keeper,state,assert,equals,1,store,get,all,and,lock,size,assert,equals,state,store,get,and,lock,path,in,zoo,keeper,retrieve,state,stat,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,assert,not,null,stat,assert,equals,0,stat,get,ephemeral,owner,list,string,children,zookeeper,get,client,get,children,for,path,path,in,zoo,keeper,assert,equals,1,children,size,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,children,get,0,assert,not,null,stat,assert,not,equals,0,stat,get,ephemeral,owner,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testReplace() throws Exception;1495184252;Tests that a state handle is replaced.;@Test_	public void testReplace() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testReplace"__		final Long initialState = 30968470898L__		final Long replaceState = 88383776661L___		_		store.addAndLock(pathInZooKeeper, initialState)__		store.replace(pathInZooKeeper, 0, replaceState)___		_		_		assertEquals(2, stateHandleProvider.getStateHandles().size())__		assertEquals(initialState, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(replaceState, stateHandleProvider.getStateHandles().get(1).retrieveState())___		_		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper)__		assertNotNull(stat)__		assertEquals(0, stat.getEphemeralOwner())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(replaceState, actual)__	};tests,that,a,state,handle,is,replaced;test,public,void,test,replace,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,replace,final,long,initial,state,30968470898l,final,long,replace,state,88383776661l,store,add,and,lock,path,in,zoo,keeper,initial,state,store,replace,path,in,zoo,keeper,0,replace,state,assert,equals,2,state,handle,provider,get,state,handles,size,assert,equals,initial,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,replace,state,state,handle,provider,get,state,handles,get,1,retrieve,state,stat,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,assert,not,null,stat,assert,equals,0,stat,get,ephemeral,owner,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,replace,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testReplace() throws Exception;1495563868;Tests that a state handle is replaced.;@Test_	public void testReplace() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testReplace"__		final Long initialState = 30968470898L__		final Long replaceState = 88383776661L___		_		store.addAndLock(pathInZooKeeper, initialState)__		store.replace(pathInZooKeeper, 0, replaceState)___		_		_		assertEquals(2, stateHandleProvider.getStateHandles().size())__		assertEquals(initialState, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(replaceState, stateHandleProvider.getStateHandles().get(1).retrieveState())___		_		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper)__		assertNotNull(stat)__		assertEquals(0, stat.getEphemeralOwner())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(replaceState, actual)__	};tests,that,a,state,handle,is,replaced;test,public,void,test,replace,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,replace,final,long,initial,state,30968470898l,final,long,replace,state,88383776661l,store,add,and,lock,path,in,zoo,keeper,initial,state,store,replace,path,in,zoo,keeper,0,replace,state,assert,equals,2,state,handle,provider,get,state,handles,size,assert,equals,initial,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,replace,state,state,handle,provider,get,state,handles,get,1,retrieve,state,stat,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,assert,not,null,stat,assert,equals,0,stat,get,ephemeral,owner,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,replace,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testReplace() throws Exception;1536763178;Tests that a state handle is replaced.;@Test_	public void testReplace() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testReplace"__		final Long initialState = 30968470898L__		final Long replaceState = 88383776661L___		_		store.addAndLock(pathInZooKeeper, initialState)__		store.replace(pathInZooKeeper, 0, replaceState)___		_		_		assertEquals(2, stateHandleProvider.getStateHandles().size())__		assertEquals(initialState, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(replaceState, stateHandleProvider.getStateHandles().get(1).retrieveState())___		_		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper)__		assertNotNull(stat)__		assertEquals(0, stat.getEphemeralOwner())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(replaceState, actual)__	};tests,that,a,state,handle,is,replaced;test,public,void,test,replace,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,replace,final,long,initial,state,30968470898l,final,long,replace,state,88383776661l,store,add,and,lock,path,in,zoo,keeper,initial,state,store,replace,path,in,zoo,keeper,0,replace,state,assert,equals,2,state,handle,provider,get,state,handles,size,assert,equals,initial,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,replace,state,state,handle,provider,get,state,handles,get,1,retrieve,state,stat,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,assert,not,null,stat,assert,equals,0,stat,get,ephemeral,owner,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,replace,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testReplace() throws Exception;1537357883;Tests that a state handle is replaced.;@Test_	public void testReplace() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testReplace"__		final Long initialState = 30968470898L__		final Long replaceState = 88383776661L___		_		store.addAndLock(pathInZooKeeper, initialState)__		store.replace(pathInZooKeeper, 0, replaceState)___		_		_		assertEquals(2, stateHandleProvider.getStateHandles().size())__		assertEquals(initialState, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(replaceState, stateHandleProvider.getStateHandles().get(1).retrieveState())___		_		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper)__		assertNotNull(stat)__		assertEquals(0, stat.getEphemeralOwner())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(replaceState, actual)__	};tests,that,a,state,handle,is,replaced;test,public,void,test,replace,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,replace,final,long,initial,state,30968470898l,final,long,replace,state,88383776661l,store,add,and,lock,path,in,zoo,keeper,initial,state,store,replace,path,in,zoo,keeper,0,replace,state,assert,equals,2,state,handle,provider,get,state,handles,size,assert,equals,initial,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,replace,state,state,handle,provider,get,state,handles,get,1,retrieve,state,stat,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,assert,not,null,stat,assert,equals,0,stat,get,ephemeral,owner,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,replace,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testReplace() throws Exception;1547547304;Tests that a state handle is replaced.;@Test_	public void testReplace() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testReplace"__		final Long initialState = 30968470898L__		final Long replaceState = 88383776661L___		_		store.addAndLock(pathInZooKeeper, initialState)__		store.replace(pathInZooKeeper, 0, replaceState)___		_		_		assertEquals(2, stateHandleProvider.getStateHandles().size())__		assertEquals(initialState, stateHandleProvider.getStateHandles().get(0).retrieveState())__		assertEquals(replaceState, stateHandleProvider.getStateHandles().get(1).retrieveState())___		_		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(pathInZooKeeper)__		assertNotNull(stat)__		assertEquals(0, stat.getEphemeralOwner())___		_		@SuppressWarnings("unchecked")_		Long actual = ((RetrievableStateHandle<Long>) InstantiationUtil.deserializeObject(_				ZOOKEEPER.getClient().getData().forPath(pathInZooKeeper),_				ClassLoader.getSystemClassLoader())).retrieveState()___		assertEquals(replaceState, actual)__	};tests,that,a,state,handle,is,replaced;test,public,void,test,replace,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,replace,final,long,initial,state,30968470898l,final,long,replace,state,88383776661l,store,add,and,lock,path,in,zoo,keeper,initial,state,store,replace,path,in,zoo,keeper,0,replace,state,assert,equals,2,state,handle,provider,get,state,handles,size,assert,equals,initial,state,state,handle,provider,get,state,handles,get,0,retrieve,state,assert,equals,replace,state,state,handle,provider,get,state,handles,get,1,retrieve,state,stat,stat,zookeeper,get,client,check,exists,for,path,path,in,zoo,keeper,assert,not,null,stat,assert,equals,0,stat,get,ephemeral,owner,suppress,warnings,unchecked,long,actual,retrievable,state,handle,long,instantiation,util,deserialize,object,zookeeper,get,client,get,data,for,path,path,in,zoo,keeper,class,loader,get,system,class,loader,retrieve,state,assert,equals,replace,state,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAndExists() throws Exception;1495184252;Tests get operation.;@Test_	public void testGetAndExists() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testGetAndExists"__		final Long state = 311222268470898L___		_		assertEquals(-1, store.exists(pathInZooKeeper))___		store.addAndLock(pathInZooKeeper, state)__		RetrievableStateHandle<Long> actual = store.getAndLock(pathInZooKeeper)___		_		assertEquals(state, actual.retrieveState())__		assertTrue(store.exists(pathInZooKeeper) >= 0)__	};tests,get,operation;test,public,void,test,get,and,exists,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,get,and,exists,final,long,state,311222268470898l,assert,equals,1,store,exists,path,in,zoo,keeper,store,add,and,lock,path,in,zoo,keeper,state,retrievable,state,handle,long,actual,store,get,and,lock,path,in,zoo,keeper,assert,equals,state,actual,retrieve,state,assert,true,store,exists,path,in,zoo,keeper,0
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAndExists() throws Exception;1495563868;Tests get operation.;@Test_	public void testGetAndExists() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testGetAndExists"__		final Long state = 311222268470898L___		_		assertEquals(-1, store.exists(pathInZooKeeper))___		store.addAndLock(pathInZooKeeper, state)__		RetrievableStateHandle<Long> actual = store.getAndLock(pathInZooKeeper)___		_		assertEquals(state, actual.retrieveState())__		assertTrue(store.exists(pathInZooKeeper) >= 0)__	};tests,get,operation;test,public,void,test,get,and,exists,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,get,and,exists,final,long,state,311222268470898l,assert,equals,1,store,exists,path,in,zoo,keeper,store,add,and,lock,path,in,zoo,keeper,state,retrievable,state,handle,long,actual,store,get,and,lock,path,in,zoo,keeper,assert,equals,state,actual,retrieve,state,assert,true,store,exists,path,in,zoo,keeper,0
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAndExists() throws Exception;1536763178;Tests get operation.;@Test_	public void testGetAndExists() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testGetAndExists"__		final Long state = 311222268470898L___		_		assertEquals(-1, store.exists(pathInZooKeeper))___		store.addAndLock(pathInZooKeeper, state)__		RetrievableStateHandle<Long> actual = store.getAndLock(pathInZooKeeper)___		_		assertEquals(state, actual.retrieveState())__		assertTrue(store.exists(pathInZooKeeper) >= 0)__	};tests,get,operation;test,public,void,test,get,and,exists,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,get,and,exists,final,long,state,311222268470898l,assert,equals,1,store,exists,path,in,zoo,keeper,store,add,and,lock,path,in,zoo,keeper,state,retrievable,state,handle,long,actual,store,get,and,lock,path,in,zoo,keeper,assert,equals,state,actual,retrieve,state,assert,true,store,exists,path,in,zoo,keeper,0
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAndExists() throws Exception;1537357883;Tests get operation.;@Test_	public void testGetAndExists() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testGetAndExists"__		final Long state = 311222268470898L___		_		assertEquals(-1, store.exists(pathInZooKeeper))___		store.addAndLock(pathInZooKeeper, state)__		RetrievableStateHandle<Long> actual = store.getAndLock(pathInZooKeeper)___		_		assertEquals(state, actual.retrieveState())__		assertTrue(store.exists(pathInZooKeeper) >= 0)__	};tests,get,operation;test,public,void,test,get,and,exists,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,get,and,exists,final,long,state,311222268470898l,assert,equals,1,store,exists,path,in,zoo,keeper,store,add,and,lock,path,in,zoo,keeper,state,retrievable,state,handle,long,actual,store,get,and,lock,path,in,zoo,keeper,assert,equals,state,actual,retrieve,state,assert,true,store,exists,path,in,zoo,keeper,0
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAndExists() throws Exception;1547547304;Tests get operation.;@Test_	public void testGetAndExists() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testGetAndExists"__		final Long state = 311222268470898L___		_		assertEquals(-1, store.exists(pathInZooKeeper))___		store.addAndLock(pathInZooKeeper, state)__		RetrievableStateHandle<Long> actual = store.getAndLock(pathInZooKeeper)___		_		assertEquals(state, actual.retrieveState())__		assertTrue(store.exists(pathInZooKeeper) >= 0)__	};tests,get,operation;test,public,void,test,get,and,exists,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,get,and,exists,final,long,state,311222268470898l,assert,equals,1,store,exists,path,in,zoo,keeper,store,add,and,lock,path,in,zoo,keeper,state,retrievable,state,handle,long,actual,store,get,and,lock,path,in,zoo,keeper,assert,equals,state,actual,retrieve,state,assert,true,store,exists,path,in,zoo,keeper,0
ZooKeeperStateHandleStoreTest -> @Test 	public void testRelease() throws Exception;1495184252;FLINK-6612__Tests that we can release a locked state handles in the ZooKeeperStateHandleStore.;@Test_	public void testRelease() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage,_			Executors.directExecutor())___		final String path = "/state"___		zkStore.addAndLock(path, 42L)___		final String lockPath = zkStore.getLockPath(path)___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(lockPath)___		assertNotNull("Expected an existing lock", stat)___		zkStore.release(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		_		assertEquals("Expected no lock nodes as children", 0, stat.getNumChildren())___		zkStore.releaseAndTryRemove(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		assertNull("State node should have been removed.",stat)__	};flink,6612,tests,that,we,can,release,a,locked,state,handles,in,the,zoo,keeper,state,handle,store;test,public,void,test,release,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,executors,direct,executor,final,string,path,state,zk,store,add,and,lock,path,42l,final,string,lock,path,zk,store,get,lock,path,path,stat,stat,zookeeper,get,client,check,exists,for,path,lock,path,assert,not,null,expected,an,existing,lock,stat,zk,store,release,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,equals,expected,no,lock,nodes,as,children,0,stat,get,num,children,zk,store,release,and,try,remove,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,null,state,node,should,have,been,removed,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testRelease() throws Exception;1495563868;FLINK-6612__Tests that we can release a locked state handles in the ZooKeeperStateHandleStore.;@Test_	public void testRelease() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage,_			Executors.directExecutor())___		final String path = "/state"___		zkStore.addAndLock(path, 42L)___		final String lockPath = zkStore.getLockPath(path)___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(lockPath)___		assertNotNull("Expected an existing lock", stat)___		zkStore.release(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		_		assertEquals("Expected no lock nodes as children", 0, stat.getNumChildren())___		zkStore.releaseAndTryRemove(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		assertNull("State node should have been removed.",stat)__	};flink,6612,tests,that,we,can,release,a,locked,state,handles,in,the,zoo,keeper,state,handle,store;test,public,void,test,release,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,executors,direct,executor,final,string,path,state,zk,store,add,and,lock,path,42l,final,string,lock,path,zk,store,get,lock,path,path,stat,stat,zookeeper,get,client,check,exists,for,path,lock,path,assert,not,null,expected,an,existing,lock,stat,zk,store,release,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,equals,expected,no,lock,nodes,as,children,0,stat,get,num,children,zk,store,release,and,try,remove,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,null,state,node,should,have,been,removed,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testRelease() throws Exception;1536763178;FLINK-6612__Tests that we can release a locked state handles in the ZooKeeperStateHandleStore.;@Test_	public void testRelease() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		final String path = "/state"___		zkStore.addAndLock(path, 42L)___		final String lockPath = zkStore.getLockPath(path)___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(lockPath)___		assertNotNull("Expected an existing lock", stat)___		zkStore.release(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		_		assertEquals("Expected no lock nodes as children", 0, stat.getNumChildren())___		zkStore.releaseAndTryRemove(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		assertNull("State node should have been removed.",stat)__	};flink,6612,tests,that,we,can,release,a,locked,state,handles,in,the,zoo,keeper,state,handle,store;test,public,void,test,release,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,string,path,state,zk,store,add,and,lock,path,42l,final,string,lock,path,zk,store,get,lock,path,path,stat,stat,zookeeper,get,client,check,exists,for,path,lock,path,assert,not,null,expected,an,existing,lock,stat,zk,store,release,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,equals,expected,no,lock,nodes,as,children,0,stat,get,num,children,zk,store,release,and,try,remove,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,null,state,node,should,have,been,removed,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testRelease() throws Exception;1537357883;FLINK-6612__Tests that we can release a locked state handles in the ZooKeeperStateHandleStore.;@Test_	public void testRelease() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		final String path = "/state"___		zkStore.addAndLock(path, 42L)___		final String lockPath = zkStore.getLockPath(path)___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(lockPath)___		assertNotNull("Expected an existing lock", stat)___		zkStore.release(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		_		assertEquals("Expected no lock nodes as children", 0, stat.getNumChildren())___		zkStore.releaseAndTryRemove(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		assertNull("State node should have been removed.",stat)__	};flink,6612,tests,that,we,can,release,a,locked,state,handles,in,the,zoo,keeper,state,handle,store;test,public,void,test,release,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,string,path,state,zk,store,add,and,lock,path,42l,final,string,lock,path,zk,store,get,lock,path,path,stat,stat,zookeeper,get,client,check,exists,for,path,lock,path,assert,not,null,expected,an,existing,lock,stat,zk,store,release,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,equals,expected,no,lock,nodes,as,children,0,stat,get,num,children,zk,store,release,and,try,remove,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,null,state,node,should,have,been,removed,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testRelease() throws Exception;1547547304;FLINK-6612__Tests that we can release a locked state handles in the ZooKeeperStateHandleStore.;@Test_	public void testRelease() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		final String path = "/state"___		zkStore.addAndLock(path, 42L)___		final String lockPath = zkStore.getLockPath(path)___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(lockPath)___		assertNotNull("Expected an existing lock", stat)___		zkStore.release(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		_		assertEquals("Expected no lock nodes as children", 0, stat.getNumChildren())___		zkStore.releaseAndTryRemove(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		assertNull("State node should have been removed.",stat)__	};flink,6612,tests,that,we,can,release,a,locked,state,handles,in,the,zoo,keeper,state,handle,store;test,public,void,test,release,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,string,path,state,zk,store,add,and,lock,path,42l,final,string,lock,path,zk,store,get,lock,path,path,stat,stat,zookeeper,get,client,check,exists,for,path,lock,path,assert,not,null,expected,an,existing,lock,stat,zk,store,release,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,equals,expected,no,lock,nodes,as,children,0,stat,get,num,children,zk,store,release,and,try,remove,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,null,state,node,should,have,been,removed,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testCorruptedData() throws Exception;1495184252;Tests that the ZooKeeperStateHandleStore can handle corrupted data by releasing and trying to remove the_respective ZooKeeper ZNodes.;@Test_	public void testCorruptedData() throws Exception {_		LongStateStorage stateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			stateStorage,_			Executors.directExecutor())___		final Collection<Long> input = new HashSet<>()__		input.add(1L)__		input.add(2L)__		input.add(3L)___		for (Long aLong : input) {_			store.addAndLock("/" + aLong, aLong)__		}__		_		ZOOKEEPER.getClient().setData().forPath("/" + 2, new byte[2])___		List<Tuple2<RetrievableStateHandle<Long>, String>> allEntries = store.getAllAndLock()___		Collection<Long> expected = new HashSet<>(input)__		expected.remove(2L)___		Collection<Long> actual = new HashSet<>(expected.size())___		for (Tuple2<RetrievableStateHandle<Long>, String> entry : allEntries) {_			actual.add(entry.f0.retrieveState())__		}__		assertEquals(expected, actual)___		_		allEntries = store.getAllSortedByNameAndLock()___		actual.clear()___		for (Tuple2<RetrievableStateHandle<Long>, String> entry : allEntries) {_			actual.add(entry.f0.retrieveState())__		}__		assertEquals(expected, actual)___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath("/" + 2)___		_		assertNull("The corrupted node should no longer exist.", stat)__	};tests,that,the,zoo,keeper,state,handle,store,can,handle,corrupted,data,by,releasing,and,trying,to,remove,the,respective,zoo,keeper,znodes;test,public,void,test,corrupted,data,throws,exception,long,state,storage,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,storage,executors,direct,executor,final,collection,long,input,new,hash,set,input,add,1l,input,add,2l,input,add,3l,for,long,a,long,input,store,add,and,lock,a,long,a,long,zookeeper,get,client,set,data,for,path,2,new,byte,2,list,tuple2,retrievable,state,handle,long,string,all,entries,store,get,all,and,lock,collection,long,expected,new,hash,set,input,expected,remove,2l,collection,long,actual,new,hash,set,expected,size,for,tuple2,retrievable,state,handle,long,string,entry,all,entries,actual,add,entry,f0,retrieve,state,assert,equals,expected,actual,all,entries,store,get,all,sorted,by,name,and,lock,actual,clear,for,tuple2,retrievable,state,handle,long,string,entry,all,entries,actual,add,entry,f0,retrieve,state,assert,equals,expected,actual,stat,stat,zookeeper,get,client,check,exists,for,path,2,assert,null,the,corrupted,node,should,no,longer,exist,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testCorruptedData() throws Exception;1495563868;Tests that the ZooKeeperStateHandleStore can handle corrupted data by releasing and trying to remove the_respective ZooKeeper ZNodes.;@Test_	public void testCorruptedData() throws Exception {_		LongStateStorage stateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			stateStorage,_			Executors.directExecutor())___		final Collection<Long> input = new HashSet<>()__		input.add(1L)__		input.add(2L)__		input.add(3L)___		for (Long aLong : input) {_			store.addAndLock("/" + aLong, aLong)__		}__		_		ZOOKEEPER.getClient().setData().forPath("/" + 2, new byte[2])___		List<Tuple2<RetrievableStateHandle<Long>, String>> allEntries = store.getAllAndLock()___		Collection<Long> expected = new HashSet<>(input)__		expected.remove(2L)___		Collection<Long> actual = new HashSet<>(expected.size())___		for (Tuple2<RetrievableStateHandle<Long>, String> entry : allEntries) {_			actual.add(entry.f0.retrieveState())__		}__		assertEquals(expected, actual)___		_		allEntries = store.getAllSortedByNameAndLock()___		actual.clear()___		for (Tuple2<RetrievableStateHandle<Long>, String> entry : allEntries) {_			actual.add(entry.f0.retrieveState())__		}__		assertEquals(expected, actual)___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath("/" + 2)___		_		assertNull("The corrupted node should no longer exist.", stat)__	};tests,that,the,zoo,keeper,state,handle,store,can,handle,corrupted,data,by,releasing,and,trying,to,remove,the,respective,zoo,keeper,znodes;test,public,void,test,corrupted,data,throws,exception,long,state,storage,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,storage,executors,direct,executor,final,collection,long,input,new,hash,set,input,add,1l,input,add,2l,input,add,3l,for,long,a,long,input,store,add,and,lock,a,long,a,long,zookeeper,get,client,set,data,for,path,2,new,byte,2,list,tuple2,retrievable,state,handle,long,string,all,entries,store,get,all,and,lock,collection,long,expected,new,hash,set,input,expected,remove,2l,collection,long,actual,new,hash,set,expected,size,for,tuple2,retrievable,state,handle,long,string,entry,all,entries,actual,add,entry,f0,retrieve,state,assert,equals,expected,actual,all,entries,store,get,all,sorted,by,name,and,lock,actual,clear,for,tuple2,retrievable,state,handle,long,string,entry,all,entries,actual,add,entry,f0,retrieve,state,assert,equals,expected,actual,stat,stat,zookeeper,get,client,check,exists,for,path,2,assert,null,the,corrupted,node,should,no,longer,exist,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testCorruptedData() throws Exception;1536763178;Tests that the ZooKeeperStateHandleStore can handle corrupted data by releasing and trying to remove the_respective ZooKeeper ZNodes.;@Test_	public void testCorruptedData() throws Exception {_		LongStateStorage stateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			stateStorage)___		final Collection<Long> input = new HashSet<>()__		input.add(1L)__		input.add(2L)__		input.add(3L)___		for (Long aLong : input) {_			store.addAndLock("/" + aLong, aLong)__		}__		_		ZOOKEEPER.getClient().setData().forPath("/" + 2, new byte[2])___		List<Tuple2<RetrievableStateHandle<Long>, String>> allEntries = store.getAllAndLock()___		Collection<Long> expected = new HashSet<>(input)__		expected.remove(2L)___		Collection<Long> actual = new HashSet<>(expected.size())___		for (Tuple2<RetrievableStateHandle<Long>, String> entry : allEntries) {_			actual.add(entry.f0.retrieveState())__		}__		assertEquals(expected, actual)___		_		allEntries = store.getAllSortedByNameAndLock()___		actual.clear()___		for (Tuple2<RetrievableStateHandle<Long>, String> entry : allEntries) {_			actual.add(entry.f0.retrieveState())__		}__		assertEquals(expected, actual)___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath("/" + 2)___		_		assertNull("The corrupted node should no longer exist.", stat)__	};tests,that,the,zoo,keeper,state,handle,store,can,handle,corrupted,data,by,releasing,and,trying,to,remove,the,respective,zoo,keeper,znodes;test,public,void,test,corrupted,data,throws,exception,long,state,storage,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,storage,final,collection,long,input,new,hash,set,input,add,1l,input,add,2l,input,add,3l,for,long,a,long,input,store,add,and,lock,a,long,a,long,zookeeper,get,client,set,data,for,path,2,new,byte,2,list,tuple2,retrievable,state,handle,long,string,all,entries,store,get,all,and,lock,collection,long,expected,new,hash,set,input,expected,remove,2l,collection,long,actual,new,hash,set,expected,size,for,tuple2,retrievable,state,handle,long,string,entry,all,entries,actual,add,entry,f0,retrieve,state,assert,equals,expected,actual,all,entries,store,get,all,sorted,by,name,and,lock,actual,clear,for,tuple2,retrievable,state,handle,long,string,entry,all,entries,actual,add,entry,f0,retrieve,state,assert,equals,expected,actual,stat,stat,zookeeper,get,client,check,exists,for,path,2,assert,null,the,corrupted,node,should,no,longer,exist,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testCorruptedData() throws Exception;1537357883;Tests that the ZooKeeperStateHandleStore can handle corrupted data by releasing and trying to remove the_respective ZooKeeper ZNodes.;@Test_	public void testCorruptedData() throws Exception {_		LongStateStorage stateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			stateStorage)___		final Collection<Long> input = new HashSet<>()__		input.add(1L)__		input.add(2L)__		input.add(3L)___		for (Long aLong : input) {_			store.addAndLock("/" + aLong, aLong)__		}__		_		ZOOKEEPER.getClient().setData().forPath("/" + 2, new byte[2])___		List<Tuple2<RetrievableStateHandle<Long>, String>> allEntries = store.getAllAndLock()___		Collection<Long> expected = new HashSet<>(input)__		expected.remove(2L)___		Collection<Long> actual = new HashSet<>(expected.size())___		for (Tuple2<RetrievableStateHandle<Long>, String> entry : allEntries) {_			actual.add(entry.f0.retrieveState())__		}__		assertEquals(expected, actual)__	};tests,that,the,zoo,keeper,state,handle,store,can,handle,corrupted,data,by,releasing,and,trying,to,remove,the,respective,zoo,keeper,znodes;test,public,void,test,corrupted,data,throws,exception,long,state,storage,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,storage,final,collection,long,input,new,hash,set,input,add,1l,input,add,2l,input,add,3l,for,long,a,long,input,store,add,and,lock,a,long,a,long,zookeeper,get,client,set,data,for,path,2,new,byte,2,list,tuple2,retrievable,state,handle,long,string,all,entries,store,get,all,and,lock,collection,long,expected,new,hash,set,input,expected,remove,2l,collection,long,actual,new,hash,set,expected,size,for,tuple2,retrievable,state,handle,long,string,entry,all,entries,actual,add,entry,f0,retrieve,state,assert,equals,expected,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testCorruptedData() throws Exception;1547547304;Tests that the ZooKeeperStateHandleStore can handle corrupted data by releasing and trying to remove the_respective ZooKeeper ZNodes.;@Test_	public void testCorruptedData() throws Exception {_		LongStateStorage stateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			stateStorage)___		final Collection<Long> input = new HashSet<>()__		input.add(1L)__		input.add(2L)__		input.add(3L)___		for (Long aLong : input) {_			store.addAndLock("/" + aLong, aLong)__		}__		_		ZOOKEEPER.getClient().setData().forPath("/" + 2, new byte[2])___		List<Tuple2<RetrievableStateHandle<Long>, String>> allEntries = store.getAllAndLock()___		Collection<Long> expected = new HashSet<>(input)__		expected.remove(2L)___		Collection<Long> actual = new HashSet<>(expected.size())___		for (Tuple2<RetrievableStateHandle<Long>, String> entry : allEntries) {_			actual.add(entry.f0.retrieveState())__		}__		assertEquals(expected, actual)__	};tests,that,the,zoo,keeper,state,handle,store,can,handle,corrupted,data,by,releasing,and,trying,to,remove,the,respective,zoo,keeper,znodes;test,public,void,test,corrupted,data,throws,exception,long,state,storage,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,storage,final,collection,long,input,new,hash,set,input,add,1l,input,add,2l,input,add,3l,for,long,a,long,input,store,add,and,lock,a,long,a,long,zookeeper,get,client,set,data,for,path,2,new,byte,2,list,tuple2,retrievable,state,handle,long,string,all,entries,store,get,all,and,lock,collection,long,expected,new,hash,set,input,expected,remove,2l,collection,long,actual,new,hash,set,expected,size,for,tuple2,retrievable,state,handle,long,string,entry,all,entries,actual,add,entry,f0,retrieve,state,assert,equals,expected,actual
ZooKeeperStateHandleStoreTest -> @Test 	public void testRemove() throws Exception;1495184252;Tests that state handles are correctly removed.;@Test_	public void testRemove() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testRemove"__		final Long state = 27255442L___		store.addAndLock(pathInZooKeeper, state)___		_		store.releaseAndTryRemove(pathInZooKeeper)___		_		assertEquals(0, ZOOKEEPER.getClient().getChildren().forPath("/").size())__	};tests,that,state,handles,are,correctly,removed;test,public,void,test,remove,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,remove,final,long,state,27255442l,store,add,and,lock,path,in,zoo,keeper,state,store,release,and,try,remove,path,in,zoo,keeper,assert,equals,0,zookeeper,get,client,get,children,for,path,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testRemove() throws Exception;1495563868;Tests that state handles are correctly removed.;@Test_	public void testRemove() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testRemove"__		final Long state = 27255442L___		store.addAndLock(pathInZooKeeper, state)___		_		store.releaseAndTryRemove(pathInZooKeeper)___		_		assertEquals(0, ZOOKEEPER.getClient().getChildren().forPath("/").size())__	};tests,that,state,handles,are,correctly,removed;test,public,void,test,remove,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,remove,final,long,state,27255442l,store,add,and,lock,path,in,zoo,keeper,state,store,release,and,try,remove,path,in,zoo,keeper,assert,equals,0,zookeeper,get,client,get,children,for,path,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testRemove() throws Exception;1536763178;Tests that state handles are correctly removed.;@Test_	public void testRemove() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testRemove"__		final Long state = 27255442L___		store.addAndLock(pathInZooKeeper, state)___		final int numberOfGlobalDiscardCalls = LongRetrievableStateHandle.getNumberOfGlobalDiscardCalls()___		_		store.releaseAndTryRemove(pathInZooKeeper)___		_		assertEquals(0, ZOOKEEPER.getClient().getChildren().forPath("/").size())__		assertEquals(numberOfGlobalDiscardCalls + 1, LongRetrievableStateHandle.getNumberOfGlobalDiscardCalls())__	};tests,that,state,handles,are,correctly,removed;test,public,void,test,remove,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,remove,final,long,state,27255442l,store,add,and,lock,path,in,zoo,keeper,state,final,int,number,of,global,discard,calls,long,retrievable,state,handle,get,number,of,global,discard,calls,store,release,and,try,remove,path,in,zoo,keeper,assert,equals,0,zookeeper,get,client,get,children,for,path,size,assert,equals,number,of,global,discard,calls,1,long,retrievable,state,handle,get,number,of,global,discard,calls
ZooKeeperStateHandleStoreTest -> @Test 	public void testRemove() throws Exception;1537357883;Tests that state handles are correctly removed.;@Test_	public void testRemove() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testRemove"__		final Long state = 27255442L___		store.addAndLock(pathInZooKeeper, state)___		final int numberOfGlobalDiscardCalls = LongRetrievableStateHandle.getNumberOfGlobalDiscardCalls()___		_		store.releaseAndTryRemove(pathInZooKeeper)___		_		assertEquals(0, ZOOKEEPER.getClient().getChildren().forPath("/").size())__		assertEquals(numberOfGlobalDiscardCalls + 1, LongRetrievableStateHandle.getNumberOfGlobalDiscardCalls())__	};tests,that,state,handles,are,correctly,removed;test,public,void,test,remove,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,remove,final,long,state,27255442l,store,add,and,lock,path,in,zoo,keeper,state,final,int,number,of,global,discard,calls,long,retrievable,state,handle,get,number,of,global,discard,calls,store,release,and,try,remove,path,in,zoo,keeper,assert,equals,0,zookeeper,get,client,get,children,for,path,size,assert,equals,number,of,global,discard,calls,1,long,retrievable,state,handle,get,number,of,global,discard,calls
ZooKeeperStateHandleStoreTest -> @Test 	public void testRemove() throws Exception;1547547304;Tests that state handles are correctly removed.;@Test_	public void testRemove() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testRemove"__		final Long state = 27255442L___		store.addAndLock(pathInZooKeeper, state)___		final int numberOfGlobalDiscardCalls = LongRetrievableStateHandle.getNumberOfGlobalDiscardCalls()___		_		store.releaseAndTryRemove(pathInZooKeeper)___		_		assertEquals(0, ZOOKEEPER.getClient().getChildren().forPath("/").size())__		assertEquals(numberOfGlobalDiscardCalls + 1, LongRetrievableStateHandle.getNumberOfGlobalDiscardCalls())__	};tests,that,state,handles,are,correctly,removed;test,public,void,test,remove,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,remove,final,long,state,27255442l,store,add,and,lock,path,in,zoo,keeper,state,final,int,number,of,global,discard,calls,long,retrievable,state,handle,get,number,of,global,discard,calls,store,release,and,try,remove,path,in,zoo,keeper,assert,equals,0,zookeeper,get,client,get,children,for,path,size,assert,equals,number,of,global,discard,calls,1,long,retrievable,state,handle,get,number,of,global,discard,calls
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testGetNonExistingPath() throws Exception;1495184252;Tests that a non existing path throws an Exception.;@Test(expected = Exception.class)_	public void testGetNonExistingPath() throws Exception {_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		store.getAndLock("/testGetNonExistingPath")__	};tests,that,a,non,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,get,non,existing,path,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,store,get,and,lock,test,get,non,existing,path
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testGetNonExistingPath() throws Exception;1495563868;Tests that a non existing path throws an Exception.;@Test(expected = Exception.class)_	public void testGetNonExistingPath() throws Exception {_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		store.getAndLock("/testGetNonExistingPath")__	};tests,that,a,non,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,get,non,existing,path,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,store,get,and,lock,test,get,non,existing,path
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testGetNonExistingPath() throws Exception;1536763178;Tests that a non existing path throws an Exception.;@Test(expected = Exception.class)_	public void testGetNonExistingPath() throws Exception {_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		store.getAndLock("/testGetNonExistingPath")__	};tests,that,a,non,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,get,non,existing,path,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,store,get,and,lock,test,get,non,existing,path
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testGetNonExistingPath() throws Exception;1537357883;Tests that a non existing path throws an Exception.;@Test(expected = Exception.class)_	public void testGetNonExistingPath() throws Exception {_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		store.getAndLock("/testGetNonExistingPath")__	};tests,that,a,non,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,get,non,existing,path,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,store,get,and,lock,test,get,non,existing,path
ZooKeeperStateHandleStoreTest -> @Test(expected = Exception.class) 	public void testGetNonExistingPath() throws Exception;1547547304;Tests that a non existing path throws an Exception.;@Test(expected = Exception.class)_	public void testGetNonExistingPath() throws Exception {_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		store.getAndLock("/testGetNonExistingPath")__	};tests,that,a,non,existing,path,throws,an,exception;test,expected,exception,class,public,void,test,get,non,existing,path,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,store,get,and,lock,test,get,non,existing,path
ZooKeeperStateHandleStoreTest -> @Test 	public void testConcurrentDeleteOperation() throws Exception;1495184252;FLINK-6612__Tests that a concurrent delete operation cannot succeed if another instance holds a lock on the specified_node.;@Test_	public void testConcurrentDeleteOperation() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore1 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage,_			Executors.directExecutor())___		ZooKeeperStateHandleStore<Long> zkStore2 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage,_			Executors.directExecutor())___		final String statePath = "/state"___		zkStore1.addAndLock(statePath, 42L)__		RetrievableStateHandle<Long> stateHandle = zkStore2.getAndLock(statePath)___		_		_		zkStore1.releaseAndTryRemove(statePath)___		_		assertEquals(42L, (long) stateHandle.retrieveState())___		Stat nodeStat = ZOOKEEPER.getClient().checkExists().forPath(statePath)___		assertNotNull("NodeStat should not be null, otherwise the referenced node does not exist.", nodeStat)___		zkStore2.releaseAndTryRemove(statePath)___		nodeStat = ZOOKEEPER.getClient().checkExists().forPath(statePath)___		assertNull("NodeState should be null, because the referenced node should no longer exist.", nodeStat)__	};flink,6612,tests,that,a,concurrent,delete,operation,cannot,succeed,if,another,instance,holds,a,lock,on,the,specified,node;test,public,void,test,concurrent,delete,operation,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store1,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,executors,direct,executor,zoo,keeper,state,handle,store,long,zk,store2,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,executors,direct,executor,final,string,state,path,state,zk,store1,add,and,lock,state,path,42l,retrievable,state,handle,long,state,handle,zk,store2,get,and,lock,state,path,zk,store1,release,and,try,remove,state,path,assert,equals,42l,long,state,handle,retrieve,state,stat,node,stat,zookeeper,get,client,check,exists,for,path,state,path,assert,not,null,node,stat,should,not,be,null,otherwise,the,referenced,node,does,not,exist,node,stat,zk,store2,release,and,try,remove,state,path,node,stat,zookeeper,get,client,check,exists,for,path,state,path,assert,null,node,state,should,be,null,because,the,referenced,node,should,no,longer,exist,node,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testConcurrentDeleteOperation() throws Exception;1495563868;FLINK-6612__Tests that a concurrent delete operation cannot succeed if another instance holds a lock on the specified_node.;@Test_	public void testConcurrentDeleteOperation() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore1 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage,_			Executors.directExecutor())___		ZooKeeperStateHandleStore<Long> zkStore2 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage,_			Executors.directExecutor())___		final String statePath = "/state"___		zkStore1.addAndLock(statePath, 42L)__		RetrievableStateHandle<Long> stateHandle = zkStore2.getAndLock(statePath)___		_		_		zkStore1.releaseAndTryRemove(statePath)___		_		assertEquals(42L, (long) stateHandle.retrieveState())___		Stat nodeStat = ZOOKEEPER.getClient().checkExists().forPath(statePath)___		assertNotNull("NodeStat should not be null, otherwise the referenced node does not exist.", nodeStat)___		zkStore2.releaseAndTryRemove(statePath)___		nodeStat = ZOOKEEPER.getClient().checkExists().forPath(statePath)___		assertNull("NodeState should be null, because the referenced node should no longer exist.", nodeStat)__	};flink,6612,tests,that,a,concurrent,delete,operation,cannot,succeed,if,another,instance,holds,a,lock,on,the,specified,node;test,public,void,test,concurrent,delete,operation,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store1,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,executors,direct,executor,zoo,keeper,state,handle,store,long,zk,store2,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,executors,direct,executor,final,string,state,path,state,zk,store1,add,and,lock,state,path,42l,retrievable,state,handle,long,state,handle,zk,store2,get,and,lock,state,path,zk,store1,release,and,try,remove,state,path,assert,equals,42l,long,state,handle,retrieve,state,stat,node,stat,zookeeper,get,client,check,exists,for,path,state,path,assert,not,null,node,stat,should,not,be,null,otherwise,the,referenced,node,does,not,exist,node,stat,zk,store2,release,and,try,remove,state,path,node,stat,zookeeper,get,client,check,exists,for,path,state,path,assert,null,node,state,should,be,null,because,the,referenced,node,should,no,longer,exist,node,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testConcurrentDeleteOperation() throws Exception;1536763178;FLINK-6612__Tests that a concurrent delete operation cannot succeed if another instance holds a lock on the specified_node.;@Test_	public void testConcurrentDeleteOperation() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore1 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		ZooKeeperStateHandleStore<Long> zkStore2 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		final String statePath = "/state"___		zkStore1.addAndLock(statePath, 42L)__		RetrievableStateHandle<Long> stateHandle = zkStore2.getAndLock(statePath)___		_		_		zkStore1.releaseAndTryRemove(statePath)___		_		assertEquals(42L, (long) stateHandle.retrieveState())___		Stat nodeStat = ZOOKEEPER.getClient().checkExists().forPath(statePath)___		assertNotNull("NodeStat should not be null, otherwise the referenced node does not exist.", nodeStat)___		zkStore2.releaseAndTryRemove(statePath)___		nodeStat = ZOOKEEPER.getClient().checkExists().forPath(statePath)___		assertNull("NodeState should be null, because the referenced node should no longer exist.", nodeStat)__	};flink,6612,tests,that,a,concurrent,delete,operation,cannot,succeed,if,another,instance,holds,a,lock,on,the,specified,node;test,public,void,test,concurrent,delete,operation,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store1,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,zoo,keeper,state,handle,store,long,zk,store2,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,string,state,path,state,zk,store1,add,and,lock,state,path,42l,retrievable,state,handle,long,state,handle,zk,store2,get,and,lock,state,path,zk,store1,release,and,try,remove,state,path,assert,equals,42l,long,state,handle,retrieve,state,stat,node,stat,zookeeper,get,client,check,exists,for,path,state,path,assert,not,null,node,stat,should,not,be,null,otherwise,the,referenced,node,does,not,exist,node,stat,zk,store2,release,and,try,remove,state,path,node,stat,zookeeper,get,client,check,exists,for,path,state,path,assert,null,node,state,should,be,null,because,the,referenced,node,should,no,longer,exist,node,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testConcurrentDeleteOperation() throws Exception;1537357883;FLINK-6612__Tests that a concurrent delete operation cannot succeed if another instance holds a lock on the specified_node.;@Test_	public void testConcurrentDeleteOperation() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore1 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		ZooKeeperStateHandleStore<Long> zkStore2 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		final String statePath = "/state"___		zkStore1.addAndLock(statePath, 42L)__		RetrievableStateHandle<Long> stateHandle = zkStore2.getAndLock(statePath)___		_		_		zkStore1.releaseAndTryRemove(statePath)___		_		assertEquals(42L, (long) stateHandle.retrieveState())___		Stat nodeStat = ZOOKEEPER.getClient().checkExists().forPath(statePath)___		assertNotNull("NodeStat should not be null, otherwise the referenced node does not exist.", nodeStat)___		zkStore2.releaseAndTryRemove(statePath)___		nodeStat = ZOOKEEPER.getClient().checkExists().forPath(statePath)___		assertNull("NodeState should be null, because the referenced node should no longer exist.", nodeStat)__	};flink,6612,tests,that,a,concurrent,delete,operation,cannot,succeed,if,another,instance,holds,a,lock,on,the,specified,node;test,public,void,test,concurrent,delete,operation,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store1,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,zoo,keeper,state,handle,store,long,zk,store2,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,string,state,path,state,zk,store1,add,and,lock,state,path,42l,retrievable,state,handle,long,state,handle,zk,store2,get,and,lock,state,path,zk,store1,release,and,try,remove,state,path,assert,equals,42l,long,state,handle,retrieve,state,stat,node,stat,zookeeper,get,client,check,exists,for,path,state,path,assert,not,null,node,stat,should,not,be,null,otherwise,the,referenced,node,does,not,exist,node,stat,zk,store2,release,and,try,remove,state,path,node,stat,zookeeper,get,client,check,exists,for,path,state,path,assert,null,node,state,should,be,null,because,the,referenced,node,should,no,longer,exist,node,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testConcurrentDeleteOperation() throws Exception;1547547304;FLINK-6612__Tests that a concurrent delete operation cannot succeed if another instance holds a lock on the specified_node.;@Test_	public void testConcurrentDeleteOperation() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore1 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		ZooKeeperStateHandleStore<Long> zkStore2 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		final String statePath = "/state"___		zkStore1.addAndLock(statePath, 42L)__		RetrievableStateHandle<Long> stateHandle = zkStore2.getAndLock(statePath)___		_		_		zkStore1.releaseAndTryRemove(statePath)___		_		assertEquals(42L, (long) stateHandle.retrieveState())___		Stat nodeStat = ZOOKEEPER.getClient().checkExists().forPath(statePath)___		assertNotNull("NodeStat should not be null, otherwise the referenced node does not exist.", nodeStat)___		zkStore2.releaseAndTryRemove(statePath)___		nodeStat = ZOOKEEPER.getClient().checkExists().forPath(statePath)___		assertNull("NodeState should be null, because the referenced node should no longer exist.", nodeStat)__	};flink,6612,tests,that,a,concurrent,delete,operation,cannot,succeed,if,another,instance,holds,a,lock,on,the,specified,node;test,public,void,test,concurrent,delete,operation,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store1,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,zoo,keeper,state,handle,store,long,zk,store2,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,string,state,path,state,zk,store1,add,and,lock,state,path,42l,retrievable,state,handle,long,state,handle,zk,store2,get,and,lock,state,path,zk,store1,release,and,try,remove,state,path,assert,equals,42l,long,state,handle,retrieve,state,stat,node,stat,zookeeper,get,client,check,exists,for,path,state,path,assert,not,null,node,stat,should,not,be,null,otherwise,the,referenced,node,does,not,exist,node,stat,zk,store2,release,and,try,remove,state,path,node,stat,zookeeper,get,client,check,exists,for,path,state,path,assert,null,node,state,should,be,null,because,the,referenced,node,should,no,longer,exist,node,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testLockCleanupWhenClientTimesOut() throws Exception;1495184252;FLINK-6612__Tests that lock nodes will be released if the client dies.;@Test_	public void testLockCleanupWhenClientTimesOut() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, ZOOKEEPER.getConnectString())__		configuration.setInteger(HighAvailabilityOptions.ZOOKEEPER_SESSION_TIMEOUT, 100)__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_ROOT, "timeout")___		try (CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__			CuratorFramework client2 = ZooKeeperUtils.startCuratorFramework(configuration)) {__			ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_				client,_				longStateStorage,_				Executors.directExecutor())___			final String path = "/state"___			zkStore.addAndLock(path, 42L)___			_			client.close()___			Stat stat = client2.checkExists().forPath(path)___			_			assertNotNull(stat)___			Collection<String> children = client2.getChildren().forPath(path)___			_			assertEquals(0, children.size())__		}_	};flink,6612,tests,that,lock,nodes,will,be,released,if,the,client,dies;test,public,void,test,lock,cleanup,when,client,times,out,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,zookeeper,get,connect,string,configuration,set,integer,high,availability,options,100,configuration,set,string,high,availability,options,timeout,try,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,curator,framework,client2,zoo,keeper,utils,start,curator,framework,configuration,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,client,long,state,storage,executors,direct,executor,final,string,path,state,zk,store,add,and,lock,path,42l,client,close,stat,stat,client2,check,exists,for,path,path,assert,not,null,stat,collection,string,children,client2,get,children,for,path,path,assert,equals,0,children,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testLockCleanupWhenClientTimesOut() throws Exception;1495563868;FLINK-6612__Tests that lock nodes will be released if the client dies.;@Test_	public void testLockCleanupWhenClientTimesOut() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, ZOOKEEPER.getConnectString())__		configuration.setInteger(HighAvailabilityOptions.ZOOKEEPER_SESSION_TIMEOUT, 100)__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_ROOT, "timeout")___		try (CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__			CuratorFramework client2 = ZooKeeperUtils.startCuratorFramework(configuration)) {__			ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_				client,_				longStateStorage,_				Executors.directExecutor())___			final String path = "/state"___			zkStore.addAndLock(path, 42L)___			_			client.close()___			Stat stat = client2.checkExists().forPath(path)___			_			assertNotNull(stat)___			Collection<String> children = client2.getChildren().forPath(path)___			_			assertEquals(0, children.size())__		}_	};flink,6612,tests,that,lock,nodes,will,be,released,if,the,client,dies;test,public,void,test,lock,cleanup,when,client,times,out,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,zookeeper,get,connect,string,configuration,set,integer,high,availability,options,100,configuration,set,string,high,availability,options,timeout,try,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,curator,framework,client2,zoo,keeper,utils,start,curator,framework,configuration,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,client,long,state,storage,executors,direct,executor,final,string,path,state,zk,store,add,and,lock,path,42l,client,close,stat,stat,client2,check,exists,for,path,path,assert,not,null,stat,collection,string,children,client2,get,children,for,path,path,assert,equals,0,children,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testLockCleanupWhenClientTimesOut() throws Exception;1536763178;FLINK-6612__Tests that lock nodes will be released if the client dies.;@Test_	public void testLockCleanupWhenClientTimesOut() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, ZOOKEEPER.getConnectString())__		configuration.setInteger(HighAvailabilityOptions.ZOOKEEPER_SESSION_TIMEOUT, 100)__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_ROOT, "timeout")___		try (CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__			CuratorFramework client2 = ZooKeeperUtils.startCuratorFramework(configuration)) {__			ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_				client,_				longStateStorage)___			final String path = "/state"___			zkStore.addAndLock(path, 42L)___			_			client.close()___			Stat stat = client2.checkExists().forPath(path)___			_			assertNotNull(stat)___			Collection<String> children = client2.getChildren().forPath(path)___			_			assertEquals(0, children.size())__		}_	};flink,6612,tests,that,lock,nodes,will,be,released,if,the,client,dies;test,public,void,test,lock,cleanup,when,client,times,out,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,zookeeper,get,connect,string,configuration,set,integer,high,availability,options,100,configuration,set,string,high,availability,options,timeout,try,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,curator,framework,client2,zoo,keeper,utils,start,curator,framework,configuration,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,client,long,state,storage,final,string,path,state,zk,store,add,and,lock,path,42l,client,close,stat,stat,client2,check,exists,for,path,path,assert,not,null,stat,collection,string,children,client2,get,children,for,path,path,assert,equals,0,children,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testLockCleanupWhenClientTimesOut() throws Exception;1537357883;FLINK-6612__Tests that lock nodes will be released if the client dies.;@Test_	public void testLockCleanupWhenClientTimesOut() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, ZOOKEEPER.getConnectString())__		configuration.setInteger(HighAvailabilityOptions.ZOOKEEPER_SESSION_TIMEOUT, 100)__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_ROOT, "timeout")___		try (CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__			CuratorFramework client2 = ZooKeeperUtils.startCuratorFramework(configuration)) {__			ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_				client,_				longStateStorage)___			final String path = "/state"___			zkStore.addAndLock(path, 42L)___			_			client.close()___			Stat stat = client2.checkExists().forPath(path)___			_			assertNotNull(stat)___			Collection<String> children = client2.getChildren().forPath(path)___			_			assertEquals(0, children.size())__		}_	};flink,6612,tests,that,lock,nodes,will,be,released,if,the,client,dies;test,public,void,test,lock,cleanup,when,client,times,out,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,zookeeper,get,connect,string,configuration,set,integer,high,availability,options,100,configuration,set,string,high,availability,options,timeout,try,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,curator,framework,client2,zoo,keeper,utils,start,curator,framework,configuration,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,client,long,state,storage,final,string,path,state,zk,store,add,and,lock,path,42l,client,close,stat,stat,client2,check,exists,for,path,path,assert,not,null,stat,collection,string,children,client2,get,children,for,path,path,assert,equals,0,children,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testLockCleanupWhenClientTimesOut() throws Exception;1547547304;FLINK-6612__Tests that lock nodes will be released if the client dies.;@Test_	public void testLockCleanupWhenClientTimesOut() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, ZOOKEEPER.getConnectString())__		configuration.setInteger(HighAvailabilityOptions.ZOOKEEPER_SESSION_TIMEOUT, 100)__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_ROOT, "timeout")___		try (CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__			CuratorFramework client2 = ZooKeeperUtils.startCuratorFramework(configuration)) {__			ZooKeeperStateHandleStore<Long> zkStore = new ZooKeeperStateHandleStore<>(_				client,_				longStateStorage)___			final String path = "/state"___			zkStore.addAndLock(path, 42L)___			_			client.close()___			Stat stat = client2.checkExists().forPath(path)___			_			assertNotNull(stat)___			Collection<String> children = client2.getChildren().forPath(path)___			_			assertEquals(0, children.size())__		}_	};flink,6612,tests,that,lock,nodes,will,be,released,if,the,client,dies;test,public,void,test,lock,cleanup,when,client,times,out,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,zookeeper,get,connect,string,configuration,set,integer,high,availability,options,100,configuration,set,string,high,availability,options,timeout,try,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,curator,framework,client2,zoo,keeper,utils,start,curator,framework,configuration,zoo,keeper,state,handle,store,long,zk,store,new,zoo,keeper,state,handle,store,client,long,state,storage,final,string,path,state,zk,store,add,and,lock,path,42l,client,close,stat,stat,client2,check,exists,for,path,path,assert,not,null,stat,collection,string,children,client2,get,children,for,path,path,assert,equals,0,children,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAllSortedByName() throws Exception;1495184252;Tests that the state is returned sorted.;@Test_	public void testGetAllSortedByName() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String basePath = "/testGetAllSortedByName"___		final Long[] expected = new Long[] {_				311222268470898L, 132812888L, 27255442L, 11122233124L }___		_		for (long val : expected) {_			final String pathInZooKeeper = String.format("%s%016d", basePath, val)__			store.addAndLock(pathInZooKeeper, val)__		}__		List<Tuple2<RetrievableStateHandle<Long>, String>> actual = store.getAllSortedByNameAndLock()__		assertEquals(expected.length, actual.size())___		_		Arrays.sort(expected)___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i).f0.retrieveState())__		}_	};tests,that,the,state,is,returned,sorted;test,public,void,test,get,all,sorted,by,name,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,base,path,test,get,all,sorted,by,name,final,long,expected,new,long,311222268470898l,132812888l,27255442l,11122233124l,for,long,val,expected,final,string,path,in,zoo,keeper,string,format,s,016d,base,path,val,store,add,and,lock,path,in,zoo,keeper,val,list,tuple2,retrievable,state,handle,long,string,actual,store,get,all,sorted,by,name,and,lock,assert,equals,expected,length,actual,size,arrays,sort,expected,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i,f0,retrieve,state
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAllSortedByName() throws Exception;1495563868;Tests that the state is returned sorted.;@Test_	public void testGetAllSortedByName() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String basePath = "/testGetAllSortedByName"___		final Long[] expected = new Long[] {_				311222268470898L, 132812888L, 27255442L, 11122233124L }___		_		for (long val : expected) {_			final String pathInZooKeeper = String.format("%s%016d", basePath, val)__			store.addAndLock(pathInZooKeeper, val)__		}__		List<Tuple2<RetrievableStateHandle<Long>, String>> actual = store.getAllSortedByNameAndLock()__		assertEquals(expected.length, actual.size())___		_		Arrays.sort(expected)___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i).f0.retrieveState())__		}_	};tests,that,the,state,is,returned,sorted;test,public,void,test,get,all,sorted,by,name,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,base,path,test,get,all,sorted,by,name,final,long,expected,new,long,311222268470898l,132812888l,27255442l,11122233124l,for,long,val,expected,final,string,path,in,zoo,keeper,string,format,s,016d,base,path,val,store,add,and,lock,path,in,zoo,keeper,val,list,tuple2,retrievable,state,handle,long,string,actual,store,get,all,sorted,by,name,and,lock,assert,equals,expected,length,actual,size,arrays,sort,expected,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i,f0,retrieve,state
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAllSortedByName() throws Exception;1536763178;Tests that the state is returned sorted.;@Test_	public void testGetAllSortedByName() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String basePath = "/testGetAllSortedByName"___		final Long[] expected = new Long[] {_				311222268470898L, 132812888L, 27255442L, 11122233124L }___		_		for (long val : expected) {_			final String pathInZooKeeper = String.format("%s%016d", basePath, val)__			store.addAndLock(pathInZooKeeper, val)__		}__		List<Tuple2<RetrievableStateHandle<Long>, String>> actual = store.getAllSortedByNameAndLock()__		assertEquals(expected.length, actual.size())___		_		Arrays.sort(expected)___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i).f0.retrieveState())__		}_	};tests,that,the,state,is,returned,sorted;test,public,void,test,get,all,sorted,by,name,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,base,path,test,get,all,sorted,by,name,final,long,expected,new,long,311222268470898l,132812888l,27255442l,11122233124l,for,long,val,expected,final,string,path,in,zoo,keeper,string,format,s,016d,base,path,val,store,add,and,lock,path,in,zoo,keeper,val,list,tuple2,retrievable,state,handle,long,string,actual,store,get,all,sorted,by,name,and,lock,assert,equals,expected,length,actual,size,arrays,sort,expected,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i,f0,retrieve,state
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAllSortedByName() throws Exception;1537357883;Tests that the state is returned sorted.;@Test_	public void testGetAllSortedByName() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String basePath = "/testGetAllSortedByName"___		final Long[] expected = new Long[] {_				311222268470898L, 132812888L, 27255442L, 11122233124L }___		_		for (long val : expected) {_			final String pathInZooKeeper = String.format("%s%016d", basePath, val)__			store.addAndLock(pathInZooKeeper, val)__		}__		List<Tuple2<RetrievableStateHandle<Long>, String>> actual = store.getAllAndLock()__		assertEquals(expected.length, actual.size())___		_		Arrays.sort(expected)__		Collections.sort(actual, Comparator.comparing(o -> o.f1))___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i).f0.retrieveState())__		}_	};tests,that,the,state,is,returned,sorted;test,public,void,test,get,all,sorted,by,name,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,base,path,test,get,all,sorted,by,name,final,long,expected,new,long,311222268470898l,132812888l,27255442l,11122233124l,for,long,val,expected,final,string,path,in,zoo,keeper,string,format,s,016d,base,path,val,store,add,and,lock,path,in,zoo,keeper,val,list,tuple2,retrievable,state,handle,long,string,actual,store,get,all,and,lock,assert,equals,expected,length,actual,size,arrays,sort,expected,collections,sort,actual,comparator,comparing,o,o,f1,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i,f0,retrieve,state
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAllSortedByName() throws Exception;1547547304;Tests that the state is returned sorted.;@Test_	public void testGetAllSortedByName() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String basePath = "/testGetAllSortedByName"___		final Long[] expected = new Long[] {_				311222268470898L, 132812888L, 27255442L, 11122233124L }___		_		for (long val : expected) {_			final String pathInZooKeeper = String.format("%s%016d", basePath, val)__			store.addAndLock(pathInZooKeeper, val)__		}__		List<Tuple2<RetrievableStateHandle<Long>, String>> actual = store.getAllAndLock()__		assertEquals(expected.length, actual.size())___		_		Arrays.sort(expected)__		Collections.sort(actual, Comparator.comparing(o -> o.f1))___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i).f0.retrieveState())__		}_	};tests,that,the,state,is,returned,sorted;test,public,void,test,get,all,sorted,by,name,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,base,path,test,get,all,sorted,by,name,final,long,expected,new,long,311222268470898l,132812888l,27255442l,11122233124l,for,long,val,expected,final,string,path,in,zoo,keeper,string,format,s,016d,base,path,val,store,add,and,lock,path,in,zoo,keeper,val,list,tuple2,retrievable,state,handle,long,string,actual,store,get,all,and,lock,assert,equals,expected,length,actual,size,arrays,sort,expected,collections,sort,actual,comparator,comparing,o,o,f1,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i,f0,retrieve,state
ZooKeeperStateHandleStoreTest -> @Test 	public void testLockCleanupWhenGetAndLockFails() throws Exception;1495184252;FLINK-6612__Tests that getAndLock removes a created lock if the RetrievableStateHandle cannot be retrieved_(e.g. deserialization problem).;@Test_	public void testLockCleanupWhenGetAndLockFails() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore1 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage,_			Executors.directExecutor())___		ZooKeeperStateHandleStore<Long> zkStore2 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage,_			Executors.directExecutor())___		final String path = "/state"___		zkStore1.addAndLock(path, 42L)___		final byte[] corruptedData = {1, 2}___		_		ZOOKEEPER.getClient().setData().forPath(path, corruptedData)___		try {_			zkStore2.getAndLock(path)__			fail("Should fail because we cannot deserialize the node's data")__		} catch (IOException ignored) {_			_		}__		_		String lockNodePath = zkStore2.getLockPath(path)___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(lockNodePath)___		_		assertNull("zkStore2 should not have created a lock node.", stat)___		Collection<String> children = ZOOKEEPER.getClient().getChildren().forPath(path)___		_		assertEquals(1, children.size())___		zkStore1.releaseAndTryRemove(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		assertNull("The state node should have been removed.", stat)__	};flink,6612,tests,that,get,and,lock,removes,a,created,lock,if,the,retrievable,state,handle,cannot,be,retrieved,e,g,deserialization,problem;test,public,void,test,lock,cleanup,when,get,and,lock,fails,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store1,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,executors,direct,executor,zoo,keeper,state,handle,store,long,zk,store2,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,executors,direct,executor,final,string,path,state,zk,store1,add,and,lock,path,42l,final,byte,corrupted,data,1,2,zookeeper,get,client,set,data,for,path,path,corrupted,data,try,zk,store2,get,and,lock,path,fail,should,fail,because,we,cannot,deserialize,the,node,s,data,catch,ioexception,ignored,string,lock,node,path,zk,store2,get,lock,path,path,stat,stat,zookeeper,get,client,check,exists,for,path,lock,node,path,assert,null,zk,store2,should,not,have,created,a,lock,node,stat,collection,string,children,zookeeper,get,client,get,children,for,path,path,assert,equals,1,children,size,zk,store1,release,and,try,remove,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,null,the,state,node,should,have,been,removed,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testLockCleanupWhenGetAndLockFails() throws Exception;1495563868;FLINK-6612__Tests that getAndLock removes a created lock if the RetrievableStateHandle cannot be retrieved_(e.g. deserialization problem).;@Test_	public void testLockCleanupWhenGetAndLockFails() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore1 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage,_			Executors.directExecutor())___		ZooKeeperStateHandleStore<Long> zkStore2 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage,_			Executors.directExecutor())___		final String path = "/state"___		zkStore1.addAndLock(path, 42L)___		final byte[] corruptedData = {1, 2}___		_		ZOOKEEPER.getClient().setData().forPath(path, corruptedData)___		try {_			zkStore2.getAndLock(path)__			fail("Should fail because we cannot deserialize the node's data")__		} catch (IOException ignored) {_			_		}__		_		String lockNodePath = zkStore2.getLockPath(path)___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(lockNodePath)___		_		assertNull("zkStore2 should not have created a lock node.", stat)___		Collection<String> children = ZOOKEEPER.getClient().getChildren().forPath(path)___		_		assertEquals(1, children.size())___		zkStore1.releaseAndTryRemove(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		assertNull("The state node should have been removed.", stat)__	};flink,6612,tests,that,get,and,lock,removes,a,created,lock,if,the,retrievable,state,handle,cannot,be,retrieved,e,g,deserialization,problem;test,public,void,test,lock,cleanup,when,get,and,lock,fails,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store1,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,executors,direct,executor,zoo,keeper,state,handle,store,long,zk,store2,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,executors,direct,executor,final,string,path,state,zk,store1,add,and,lock,path,42l,final,byte,corrupted,data,1,2,zookeeper,get,client,set,data,for,path,path,corrupted,data,try,zk,store2,get,and,lock,path,fail,should,fail,because,we,cannot,deserialize,the,node,s,data,catch,ioexception,ignored,string,lock,node,path,zk,store2,get,lock,path,path,stat,stat,zookeeper,get,client,check,exists,for,path,lock,node,path,assert,null,zk,store2,should,not,have,created,a,lock,node,stat,collection,string,children,zookeeper,get,client,get,children,for,path,path,assert,equals,1,children,size,zk,store1,release,and,try,remove,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,null,the,state,node,should,have,been,removed,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testLockCleanupWhenGetAndLockFails() throws Exception;1536763178;FLINK-6612__Tests that getAndLock removes a created lock if the RetrievableStateHandle cannot be retrieved_(e.g. deserialization problem).;@Test_	public void testLockCleanupWhenGetAndLockFails() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore1 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		ZooKeeperStateHandleStore<Long> zkStore2 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		final String path = "/state"___		zkStore1.addAndLock(path, 42L)___		final byte[] corruptedData = {1, 2}___		_		ZOOKEEPER.getClient().setData().forPath(path, corruptedData)___		try {_			zkStore2.getAndLock(path)__			fail("Should fail because we cannot deserialize the node's data")__		} catch (IOException ignored) {_			_		}__		_		String lockNodePath = zkStore2.getLockPath(path)___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(lockNodePath)___		_		assertNull("zkStore2 should not have created a lock node.", stat)___		Collection<String> children = ZOOKEEPER.getClient().getChildren().forPath(path)___		_		assertEquals(1, children.size())___		zkStore1.releaseAndTryRemove(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		assertNull("The state node should have been removed.", stat)__	};flink,6612,tests,that,get,and,lock,removes,a,created,lock,if,the,retrievable,state,handle,cannot,be,retrieved,e,g,deserialization,problem;test,public,void,test,lock,cleanup,when,get,and,lock,fails,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store1,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,zoo,keeper,state,handle,store,long,zk,store2,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,string,path,state,zk,store1,add,and,lock,path,42l,final,byte,corrupted,data,1,2,zookeeper,get,client,set,data,for,path,path,corrupted,data,try,zk,store2,get,and,lock,path,fail,should,fail,because,we,cannot,deserialize,the,node,s,data,catch,ioexception,ignored,string,lock,node,path,zk,store2,get,lock,path,path,stat,stat,zookeeper,get,client,check,exists,for,path,lock,node,path,assert,null,zk,store2,should,not,have,created,a,lock,node,stat,collection,string,children,zookeeper,get,client,get,children,for,path,path,assert,equals,1,children,size,zk,store1,release,and,try,remove,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,null,the,state,node,should,have,been,removed,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testLockCleanupWhenGetAndLockFails() throws Exception;1537357883;FLINK-6612__Tests that getAndLock removes a created lock if the RetrievableStateHandle cannot be retrieved_(e.g. deserialization problem).;@Test_	public void testLockCleanupWhenGetAndLockFails() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore1 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		ZooKeeperStateHandleStore<Long> zkStore2 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		final String path = "/state"___		zkStore1.addAndLock(path, 42L)___		final byte[] corruptedData = {1, 2}___		_		ZOOKEEPER.getClient().setData().forPath(path, corruptedData)___		try {_			zkStore2.getAndLock(path)__			fail("Should fail because we cannot deserialize the node's data")__		} catch (IOException ignored) {_			_		}__		_		String lockNodePath = zkStore2.getLockPath(path)___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(lockNodePath)___		_		assertNull("zkStore2 should not have created a lock node.", stat)___		Collection<String> children = ZOOKEEPER.getClient().getChildren().forPath(path)___		_		assertEquals(1, children.size())___		zkStore1.releaseAndTryRemove(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		assertNull("The state node should have been removed.", stat)__	};flink,6612,tests,that,get,and,lock,removes,a,created,lock,if,the,retrievable,state,handle,cannot,be,retrieved,e,g,deserialization,problem;test,public,void,test,lock,cleanup,when,get,and,lock,fails,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store1,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,zoo,keeper,state,handle,store,long,zk,store2,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,string,path,state,zk,store1,add,and,lock,path,42l,final,byte,corrupted,data,1,2,zookeeper,get,client,set,data,for,path,path,corrupted,data,try,zk,store2,get,and,lock,path,fail,should,fail,because,we,cannot,deserialize,the,node,s,data,catch,ioexception,ignored,string,lock,node,path,zk,store2,get,lock,path,path,stat,stat,zookeeper,get,client,check,exists,for,path,lock,node,path,assert,null,zk,store2,should,not,have,created,a,lock,node,stat,collection,string,children,zookeeper,get,client,get,children,for,path,path,assert,equals,1,children,size,zk,store1,release,and,try,remove,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,null,the,state,node,should,have,been,removed,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testLockCleanupWhenGetAndLockFails() throws Exception;1547547304;FLINK-6612__Tests that getAndLock removes a created lock if the RetrievableStateHandle cannot be retrieved_(e.g. deserialization problem).;@Test_	public void testLockCleanupWhenGetAndLockFails() throws Exception {_		LongStateStorage longStateStorage = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> zkStore1 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		ZooKeeperStateHandleStore<Long> zkStore2 = new ZooKeeperStateHandleStore<>(_			ZOOKEEPER.getClient(),_			longStateStorage)___		final String path = "/state"___		zkStore1.addAndLock(path, 42L)___		final byte[] corruptedData = {1, 2}___		_		ZOOKEEPER.getClient().setData().forPath(path, corruptedData)___		try {_			zkStore2.getAndLock(path)__			fail("Should fail because we cannot deserialize the node's data")__		} catch (IOException ignored) {_			_		}__		_		String lockNodePath = zkStore2.getLockPath(path)___		Stat stat = ZOOKEEPER.getClient().checkExists().forPath(lockNodePath)___		_		assertNull("zkStore2 should not have created a lock node.", stat)___		Collection<String> children = ZOOKEEPER.getClient().getChildren().forPath(path)___		_		assertEquals(1, children.size())___		zkStore1.releaseAndTryRemove(path)___		stat = ZOOKEEPER.getClient().checkExists().forPath(path)___		assertNull("The state node should have been removed.", stat)__	};flink,6612,tests,that,get,and,lock,removes,a,created,lock,if,the,retrievable,state,handle,cannot,be,retrieved,e,g,deserialization,problem;test,public,void,test,lock,cleanup,when,get,and,lock,fails,throws,exception,long,state,storage,long,state,storage,new,long,state,storage,zoo,keeper,state,handle,store,long,zk,store1,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,zoo,keeper,state,handle,store,long,zk,store2,new,zoo,keeper,state,handle,store,zookeeper,get,client,long,state,storage,final,string,path,state,zk,store1,add,and,lock,path,42l,final,byte,corrupted,data,1,2,zookeeper,get,client,set,data,for,path,path,corrupted,data,try,zk,store2,get,and,lock,path,fail,should,fail,because,we,cannot,deserialize,the,node,s,data,catch,ioexception,ignored,string,lock,node,path,zk,store2,get,lock,path,path,stat,stat,zookeeper,get,client,check,exists,for,path,lock,node,path,assert,null,zk,store2,should,not,have,created,a,lock,node,stat,collection,string,children,zookeeper,get,client,get,children,for,path,path,assert,equals,1,children,size,zk,store1,release,and,try,remove,path,stat,zookeeper,get,client,check,exists,for,path,path,assert,null,the,state,node,should,have,been,removed,stat
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAll() throws Exception;1495184252;Tests that all added state is returned.;@Test_	public void testGetAll() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testGetAll"___		final Set<Long> expected = new HashSet<>()__		expected.add(311222268470898L)__		expected.add(132812888L)__		expected.add(27255442L)__		expected.add(11122233124L)___		_		for (long val : expected) {_			store.addAndLock(pathInZooKeeper + val, val)__		}__		for (Tuple2<RetrievableStateHandle<Long>, String> val : store.getAllAndLock()) {_			assertTrue(expected.remove(val.f0.retrieveState()))__		}_		assertEquals(0, expected.size())__	};tests,that,all,added,state,is,returned;test,public,void,test,get,all,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,get,all,final,set,long,expected,new,hash,set,expected,add,311222268470898l,expected,add,132812888l,expected,add,27255442l,expected,add,11122233124l,for,long,val,expected,store,add,and,lock,path,in,zoo,keeper,val,val,for,tuple2,retrievable,state,handle,long,string,val,store,get,all,and,lock,assert,true,expected,remove,val,f0,retrieve,state,assert,equals,0,expected,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAll() throws Exception;1495563868;Tests that all added state is returned.;@Test_	public void testGetAll() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider, Executors.directExecutor())___		_		final String pathInZooKeeper = "/testGetAll"___		final Set<Long> expected = new HashSet<>()__		expected.add(311222268470898L)__		expected.add(132812888L)__		expected.add(27255442L)__		expected.add(11122233124L)___		_		for (long val : expected) {_			store.addAndLock(pathInZooKeeper + val, val)__		}__		for (Tuple2<RetrievableStateHandle<Long>, String> val : store.getAllAndLock()) {_			assertTrue(expected.remove(val.f0.retrieveState()))__		}_		assertEquals(0, expected.size())__	};tests,that,all,added,state,is,returned;test,public,void,test,get,all,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,executors,direct,executor,final,string,path,in,zoo,keeper,test,get,all,final,set,long,expected,new,hash,set,expected,add,311222268470898l,expected,add,132812888l,expected,add,27255442l,expected,add,11122233124l,for,long,val,expected,store,add,and,lock,path,in,zoo,keeper,val,val,for,tuple2,retrievable,state,handle,long,string,val,store,get,all,and,lock,assert,true,expected,remove,val,f0,retrieve,state,assert,equals,0,expected,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAll() throws Exception;1536763178;Tests that all added state is returned.;@Test_	public void testGetAll() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testGetAll"___		final Set<Long> expected = new HashSet<>()__		expected.add(311222268470898L)__		expected.add(132812888L)__		expected.add(27255442L)__		expected.add(11122233124L)___		_		for (long val : expected) {_			store.addAndLock(pathInZooKeeper + val, val)__		}__		for (Tuple2<RetrievableStateHandle<Long>, String> val : store.getAllAndLock()) {_			assertTrue(expected.remove(val.f0.retrieveState()))__		}_		assertEquals(0, expected.size())__	};tests,that,all,added,state,is,returned;test,public,void,test,get,all,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,get,all,final,set,long,expected,new,hash,set,expected,add,311222268470898l,expected,add,132812888l,expected,add,27255442l,expected,add,11122233124l,for,long,val,expected,store,add,and,lock,path,in,zoo,keeper,val,val,for,tuple2,retrievable,state,handle,long,string,val,store,get,all,and,lock,assert,true,expected,remove,val,f0,retrieve,state,assert,equals,0,expected,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAll() throws Exception;1537357883;Tests that all added state is returned.;@Test_	public void testGetAll() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testGetAll"___		final Set<Long> expected = new HashSet<>()__		expected.add(311222268470898L)__		expected.add(132812888L)__		expected.add(27255442L)__		expected.add(11122233124L)___		_		for (long val : expected) {_			store.addAndLock(pathInZooKeeper + val, val)__		}__		for (Tuple2<RetrievableStateHandle<Long>, String> val : store.getAllAndLock()) {_			assertTrue(expected.remove(val.f0.retrieveState()))__		}_		assertEquals(0, expected.size())__	};tests,that,all,added,state,is,returned;test,public,void,test,get,all,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,get,all,final,set,long,expected,new,hash,set,expected,add,311222268470898l,expected,add,132812888l,expected,add,27255442l,expected,add,11122233124l,for,long,val,expected,store,add,and,lock,path,in,zoo,keeper,val,val,for,tuple2,retrievable,state,handle,long,string,val,store,get,all,and,lock,assert,true,expected,remove,val,f0,retrieve,state,assert,equals,0,expected,size
ZooKeeperStateHandleStoreTest -> @Test 	public void testGetAll() throws Exception;1547547304;Tests that all added state is returned.;@Test_	public void testGetAll() throws Exception {_		_		LongStateStorage stateHandleProvider = new LongStateStorage()___		ZooKeeperStateHandleStore<Long> store = new ZooKeeperStateHandleStore<>(_				ZOOKEEPER.getClient(), stateHandleProvider)___		_		final String pathInZooKeeper = "/testGetAll"___		final Set<Long> expected = new HashSet<>()__		expected.add(311222268470898L)__		expected.add(132812888L)__		expected.add(27255442L)__		expected.add(11122233124L)___		_		for (long val : expected) {_			store.addAndLock(pathInZooKeeper + val, val)__		}__		for (Tuple2<RetrievableStateHandle<Long>, String> val : store.getAllAndLock()) {_			assertTrue(expected.remove(val.f0.retrieveState()))__		}_		assertEquals(0, expected.size())__	};tests,that,all,added,state,is,returned;test,public,void,test,get,all,throws,exception,long,state,storage,state,handle,provider,new,long,state,storage,zoo,keeper,state,handle,store,long,store,new,zoo,keeper,state,handle,store,zookeeper,get,client,state,handle,provider,final,string,path,in,zoo,keeper,test,get,all,final,set,long,expected,new,hash,set,expected,add,311222268470898l,expected,add,132812888l,expected,add,27255442l,expected,add,11122233124l,for,long,val,expected,store,add,and,lock,path,in,zoo,keeper,val,val,for,tuple2,retrievable,state,handle,long,string,val,store,get,all,and,lock,assert,true,expected,remove,val,f0,retrieve,state,assert,equals,0,expected,size
