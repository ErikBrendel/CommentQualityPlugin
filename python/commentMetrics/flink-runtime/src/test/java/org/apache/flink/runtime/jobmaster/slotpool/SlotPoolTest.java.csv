# id;timestamp;commentText;codeText;commentWords;codeWords
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1513261599;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			slotPool.start(JobMasterId.generate(), "localhost")___			final SlotPoolGateway slotPoolGateway = slotPool.getSelfGateway(SlotPoolGateway.class)___			slotPoolGateway.connectToResourceManager(resourceManagerGateway)___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,slot,pool,start,job,master,id,generate,localhost,final,slot,pool,gateway,slot,pool,gateway,slot,pool,get,self,gateway,slot,pool,gateway,class,slot,pool,gateway,connect,to,resource,manager,resource,manager,gateway,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1515588319;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			slotPool.start(JobMasterId.generate(), "localhost")___			final SlotPoolGateway slotPoolGateway = slotPool.getSelfGateway(SlotPoolGateway.class)___			slotPoolGateway.connectToResourceManager(resourceManagerGateway)___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,slot,pool,start,job,master,id,generate,localhost,final,slot,pool,gateway,slot,pool,gateway,slot,pool,get,self,gateway,slot,pool,gateway,class,slot,pool,gateway,connect,to,resource,manager,resource,manager,gateway,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1515669170;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			slotPool.start(JobMasterId.generate(), "localhost")___			final SlotPoolGateway slotPoolGateway = slotPool.getSelfGateway(SlotPoolGateway.class)___			slotPoolGateway.connectToResourceManager(resourceManagerGateway)___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,slot,pool,start,job,master,id,generate,localhost,final,slot,pool,gateway,slot,pool,gateway,slot,pool,get,self,gateway,slot,pool,gateway,class,slot,pool,gateway,connect,to,resource,manager,resource,manager,gateway,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1518433170;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			slotPool.start(JobMasterId.generate(), "localhost")___			final SlotPoolGateway slotPoolGateway = slotPool.getSelfGateway(SlotPoolGateway.class)___			slotPoolGateway.connectToResourceManager(resourceManagerGateway)___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,slot,pool,start,job,master,id,generate,localhost,final,slot,pool,gateway,slot,pool,gateway,slot,pool,get,self,gateway,slot,pool,gateway,class,slot,pool,gateway,connect,to,resource,manager,resource,manager,gateway,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1518434692;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1518680774;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1518680775;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1518945174;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1519406526;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1519655521;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			SlotProfile slotProfile = new SlotProfile(_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				Collections.emptyList())___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				slotProfile,_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,profile,slot,profile,new,slot,profile,resource,profile,unknown,collections,empty,list,collections,empty,list,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,slot,profile,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1520961474;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			SlotProfile slotProfile = new SlotProfile(_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				Collections.emptyList())___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				slotProfile,_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,profile,slot,profile,new,slot,profile,resource,profile,unknown,collections,empty,list,collections,empty,list,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,slot,profile,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1521804757;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			SlotProfile slotProfile = new SlotProfile(_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				Collections.emptyList())___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				slotProfile,_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,profile,slot,profile,new,slot,profile,resource,profile,unknown,collections,empty,list,collections,empty,list,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,slot,profile,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1522681180;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			SlotProfile slotProfile = new SlotProfile(_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				Collections.emptyList())___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				slotProfile,_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,profile,slot,profile,new,slot,profile,resource,profile,unknown,collections,empty,list,collections,empty,list,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,slot,profile,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1525384685;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			SlotProfile slotProfile = new SlotProfile(_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				Collections.emptyList())___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				slotProfile,_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,profile,slot,profile,new,slot,profile,resource,profile,unknown,collections,empty,list,collections,empty,list,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,slot,profile,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1525961911;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			SlotProfile slotProfile = new SlotProfile(_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				Collections.emptyList())___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				slotProfile,_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,profile,slot,profile,new,slot,profile,resource,profile,unknown,collections,empty,list,collections,empty,list,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,slot,profile,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1526494919;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			SlotProfile slotProfile = new SlotProfile(_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				Collections.emptyList())___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				slotProfile,_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,profile,slot,profile,new,slot,profile,resource,profile,unknown,collections,empty,list,collections,empty,list,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,slot,profile,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1529682304;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			SlotProfile slotProfile = new SlotProfile(_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				Collections.emptyList())___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				slotProfile,_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,profile,slot,profile,new,slot,profile,resource,profile,unknown,collections,empty,list,collections,empty,list,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,slot,profile,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1530104620;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId, LocationPreferenceSchedulingStrategy.getInstance())__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			SlotProfile slotProfile = new SlotProfile(_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				Collections.emptyList())___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				slotProfile,_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,profile,slot,profile,new,slot,profile,resource,profile,unknown,collections,empty,list,collections,empty,list,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,slot,profile,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1537192317;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId, LocationPreferenceSchedulingStrategy.getInstance())__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			SlotProfile slotProfile = new SlotProfile(_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				Collections.emptyList())___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				slotProfile,_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,profile,slot,profile,new,slot,profile,resource,profile,unknown,collections,empty,list,collections,empty,list,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,slot,profile,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1550005040;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId, LocationPreferenceSchedulingStrategy.getInstance())__		final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__		resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__		resourceManagerGateway.setCancelSlotConsumer(allocationID -> cancelSlotFuture.complete(allocationID))___		final ScheduledUnit scheduledUnit = new ScheduledUnit(_			new JobVertexID(),_			null,_			null)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			SlotProfile slotProfile = new SlotProfile(_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				Collections.emptyList())___			CompletableFuture<LogicalSlot> slotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				slotProfile,_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		} finally {_			try {_				RpcUtils.terminateRpcEndpoint(slotPool, timeout)__			} catch (Exception e) {_				LOG.warn("Could not properly terminate the SlotPool.", e)__			}_		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,allocation,id,cancel,slot,future,complete,allocation,id,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,profile,slot,profile,new,slot,profile,resource,profile,unknown,collections,empty,list,collections,empty,list,completable,future,logical,slot,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,scheduled,unit,slot,profile,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get,finally,try,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout,catch,exception,e,log,warn,could,not,properly,terminate,the,slot,pool,e
SlotPoolTest -> @Test 	public void testSlotRequestCancellationUponFailingRequest() throws Exception;1550220073;Tests that a slot request is cancelled if it failed with an exception (e.g. TimeoutException).__<p>See FLINK-7870;@Test_	public void testSlotRequestCancellationUponFailingRequest() throws Exception {__		try (SlotPoolImpl slotPool = new SlotPoolImpl(jobId)) {_			final CompletableFuture<Acknowledge> requestSlotFuture = new CompletableFuture<>()__			final CompletableFuture<AllocationID> cancelSlotFuture = new CompletableFuture<>()__			final CompletableFuture<AllocationID> requestSlotFutureAllocationId = new CompletableFuture<>()__			resourceManagerGateway.setRequestSlotFuture(requestSlotFuture)__			resourceManagerGateway.setRequestSlotConsumer(slotRequest -> requestSlotFutureAllocationId.complete(slotRequest.getAllocationId()))__			resourceManagerGateway.setCancelSlotConsumer(cancelSlotFuture::complete)__			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)__			setupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor)__			Scheduler scheduler = setupScheduler(slotPool, mainThreadExecutor)___			SlotProfile slotProfile = new SlotProfile(_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				Collections.emptySet())___			CompletableFuture<LogicalSlot> slotFuture = scheduler.allocateSlot(_				new SlotRequestId(),_				scheduledUnit,_				slotProfile,_				true,_				timeout)___			requestSlotFuture.completeExceptionally(new FlinkException("Testing exception."))___			try {_				slotFuture.get()__				fail("The slot future should not have been completed properly.")__			} catch (Exception ignored) {_				_			}__			_			_			assertEquals(requestSlotFutureAllocationId.get(), cancelSlotFuture.get())__		}_	};tests,that,a,slot,request,is,cancelled,if,it,failed,with,an,exception,e,g,timeout,exception,p,see,flink,7870;test,public,void,test,slot,request,cancellation,upon,failing,request,throws,exception,try,slot,pool,impl,slot,pool,new,slot,pool,impl,job,id,final,completable,future,acknowledge,request,slot,future,new,completable,future,final,completable,future,allocation,id,cancel,slot,future,new,completable,future,final,completable,future,allocation,id,request,slot,future,allocation,id,new,completable,future,resource,manager,gateway,set,request,slot,future,request,slot,future,resource,manager,gateway,set,request,slot,consumer,slot,request,request,slot,future,allocation,id,complete,slot,request,get,allocation,id,resource,manager,gateway,set,cancel,slot,consumer,cancel,slot,future,complete,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,setup,slot,pool,slot,pool,resource,manager,gateway,main,thread,executor,scheduler,scheduler,setup,scheduler,slot,pool,main,thread,executor,slot,profile,slot,profile,new,slot,profile,resource,profile,unknown,collections,empty,list,collections,empty,set,completable,future,logical,slot,slot,future,scheduler,allocate,slot,new,slot,request,id,scheduled,unit,slot,profile,true,timeout,request,slot,future,complete,exceptionally,new,flink,exception,testing,exception,try,slot,future,get,fail,the,slot,future,should,not,have,been,completed,properly,catch,exception,ignored,assert,equals,request,slot,future,allocation,id,get,cancel,slot,future,get
SlotPoolTest -> @Test 	public void testReleasingIdleSlotFailed() throws Exception;1521804757;Tests that idle slots which cannot be released are only recycled if the owning {@link TaskExecutor}_is still registered at the {@link SlotPool}. See FLINK-9047.;@Test_	public void testReleasingIdleSlotFailed() throws Exception {_		final ManualClock clock = new ManualClock()__		final SlotPool slotPool = new SlotPool(_			rpcService,_			jobId,_			clock,_			TestingUtils.infiniteTime(),_			timeout)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final AllocationID expiredAllocationId = new AllocationID()__			final SlotOffer slotToExpire = new SlotOffer(expiredAllocationId, 0, ResourceProfile.UNKNOWN)___			final ArrayDeque<CompletableFuture<Acknowledge>> responseQueue = new ArrayDeque<>(2)__			taskManagerGateway.setFreeSlotFunction((AllocationID allocationId, Throwable cause) -> {_				if (responseQueue.isEmpty()) {_					return CompletableFuture.completedFuture(Acknowledge.get())__				} else {_					return responseQueue.pop()__				}_			})___			responseQueue.add(FutureUtils.completedExceptionally(new FlinkException("Test failure")))___			final CompletableFuture<Acknowledge> responseFuture = new CompletableFuture<>()__			responseQueue.add(responseFuture)___			assertThat(_				slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get(),_				Matchers.is(Acknowledge.get()))___			assertThat(_				slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotToExpire).get(),_				Matchers.is(true))___			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			CompletableFuture<LogicalSlot> allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final LogicalSlot logicalSlot = allocatedSlotFuture.get()__			assertThat(logicalSlot.getAllocationId(), Matchers.is(expiredAllocationId))___			_			slotPool.getSlotOwner().returnAllocatedSlot(logicalSlot).get()___			_			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			_			allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			slotPoolGateway.releaseTaskManager(taskManagerLocation.getResourceID()).get()___			_			_			responseFuture.completeExceptionally(new FlinkException("Second test exception"))___			try {_				_				allocatedSlotFuture.get(10L, TimeUnit.MILLISECONDS)__				fail("Expected to fail with a timeout.")__			} catch (TimeoutException ignored) {_				_			}__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,idle,slots,which,cannot,be,released,are,only,recycled,if,the,owning,link,task,executor,is,still,registered,at,the,link,slot,pool,see,flink,9047;test,public,void,test,releasing,idle,slot,failed,throws,exception,final,manual,clock,clock,new,manual,clock,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,clock,testing,utils,infinite,time,timeout,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,allocation,id,expired,allocation,id,new,allocation,id,final,slot,offer,slot,to,expire,new,slot,offer,expired,allocation,id,0,resource,profile,unknown,final,array,deque,completable,future,acknowledge,response,queue,new,array,deque,2,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,if,response,queue,is,empty,return,completable,future,completed,future,acknowledge,get,else,return,response,queue,pop,response,queue,add,future,utils,completed,exceptionally,new,flink,exception,test,failure,final,completable,future,acknowledge,response,future,new,completable,future,response,queue,add,response,future,assert,that,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,matchers,is,acknowledge,get,assert,that,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,to,expire,get,matchers,is,true,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,completable,future,logical,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,final,logical,slot,logical,slot,allocated,slot,future,get,assert,that,logical,slot,get,allocation,id,matchers,is,expired,allocation,id,slot,pool,get,slot,owner,return,allocated,slot,logical,slot,get,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,slot,pool,gateway,release,task,manager,task,manager,location,get,resource,id,get,response,future,complete,exceptionally,new,flink,exception,second,test,exception,try,allocated,slot,future,get,10l,time,unit,milliseconds,fail,expected,to,fail,with,a,timeout,catch,timeout,exception,ignored,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testReleasingIdleSlotFailed() throws Exception;1522681180;Tests that idle slots which cannot be released are only recycled if the owning {@link TaskExecutor}_is still registered at the {@link SlotPool}. See FLINK-9047.;@Test_	public void testReleasingIdleSlotFailed() throws Exception {_		final ManualClock clock = new ManualClock()__		final SlotPool slotPool = new SlotPool(_			rpcService,_			jobId,_			clock,_			TestingUtils.infiniteTime(),_			timeout)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final AllocationID expiredAllocationId = new AllocationID()__			final SlotOffer slotToExpire = new SlotOffer(expiredAllocationId, 0, ResourceProfile.UNKNOWN)___			final ArrayDeque<CompletableFuture<Acknowledge>> responseQueue = new ArrayDeque<>(2)__			taskManagerGateway.setFreeSlotFunction((AllocationID allocationId, Throwable cause) -> {_				if (responseQueue.isEmpty()) {_					return CompletableFuture.completedFuture(Acknowledge.get())__				} else {_					return responseQueue.pop()__				}_			})___			responseQueue.add(FutureUtils.completedExceptionally(new FlinkException("Test failure")))___			final CompletableFuture<Acknowledge> responseFuture = new CompletableFuture<>()__			responseQueue.add(responseFuture)___			assertThat(_				slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get(),_				Matchers.is(Acknowledge.get()))___			assertThat(_				slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotToExpire).get(),_				Matchers.is(true))___			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			CompletableFuture<LogicalSlot> allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final LogicalSlot logicalSlot = allocatedSlotFuture.get()__			assertThat(logicalSlot.getAllocationId(), Matchers.is(expiredAllocationId))___			_			slotPool.getSlotOwner().returnAllocatedSlot(logicalSlot).get()___			_			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			_			allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			slotPoolGateway.releaseTaskManager(taskManagerLocation.getResourceID()).get()___			_			_			responseFuture.completeExceptionally(new FlinkException("Second test exception"))___			try {_				_				allocatedSlotFuture.get(10L, TimeUnit.MILLISECONDS)__				fail("Expected to fail with a timeout.")__			} catch (TimeoutException ignored) {_				_			}__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,idle,slots,which,cannot,be,released,are,only,recycled,if,the,owning,link,task,executor,is,still,registered,at,the,link,slot,pool,see,flink,9047;test,public,void,test,releasing,idle,slot,failed,throws,exception,final,manual,clock,clock,new,manual,clock,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,clock,testing,utils,infinite,time,timeout,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,allocation,id,expired,allocation,id,new,allocation,id,final,slot,offer,slot,to,expire,new,slot,offer,expired,allocation,id,0,resource,profile,unknown,final,array,deque,completable,future,acknowledge,response,queue,new,array,deque,2,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,if,response,queue,is,empty,return,completable,future,completed,future,acknowledge,get,else,return,response,queue,pop,response,queue,add,future,utils,completed,exceptionally,new,flink,exception,test,failure,final,completable,future,acknowledge,response,future,new,completable,future,response,queue,add,response,future,assert,that,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,matchers,is,acknowledge,get,assert,that,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,to,expire,get,matchers,is,true,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,completable,future,logical,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,final,logical,slot,logical,slot,allocated,slot,future,get,assert,that,logical,slot,get,allocation,id,matchers,is,expired,allocation,id,slot,pool,get,slot,owner,return,allocated,slot,logical,slot,get,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,slot,pool,gateway,release,task,manager,task,manager,location,get,resource,id,get,response,future,complete,exceptionally,new,flink,exception,second,test,exception,try,allocated,slot,future,get,10l,time,unit,milliseconds,fail,expected,to,fail,with,a,timeout,catch,timeout,exception,ignored,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testReleasingIdleSlotFailed() throws Exception;1525384685;Tests that idle slots which cannot be released are only recycled if the owning {@link TaskExecutor}_is still registered at the {@link SlotPool}. See FLINK-9047.;@Test_	public void testReleasingIdleSlotFailed() throws Exception {_		final ManualClock clock = new ManualClock()__		final SlotPool slotPool = new SlotPool(_			rpcService,_			jobId,_			clock,_			TestingUtils.infiniteTime(),_			timeout)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final AllocationID expiredAllocationId = new AllocationID()__			final SlotOffer slotToExpire = new SlotOffer(expiredAllocationId, 0, ResourceProfile.UNKNOWN)___			final ArrayDeque<CompletableFuture<Acknowledge>> responseQueue = new ArrayDeque<>(2)__			taskManagerGateway.setFreeSlotFunction((AllocationID allocationId, Throwable cause) -> {_				if (responseQueue.isEmpty()) {_					return CompletableFuture.completedFuture(Acknowledge.get())__				} else {_					return responseQueue.pop()__				}_			})___			responseQueue.add(FutureUtils.completedExceptionally(new FlinkException("Test failure")))___			final CompletableFuture<Acknowledge> responseFuture = new CompletableFuture<>()__			responseQueue.add(responseFuture)___			assertThat(_				slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get(),_				Matchers.is(Acknowledge.get()))___			assertThat(_				slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotToExpire).get(),_				Matchers.is(true))___			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			CompletableFuture<LogicalSlot> allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final LogicalSlot logicalSlot = allocatedSlotFuture.get()__			assertThat(logicalSlot.getAllocationId(), Matchers.is(expiredAllocationId))___			_			slotPool.getSlotOwner().returnAllocatedSlot(logicalSlot).get()___			_			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			_			allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			slotPoolGateway.releaseTaskManager(taskManagerLocation.getResourceID()).get()___			_			_			responseFuture.completeExceptionally(new FlinkException("Second test exception"))___			try {_				_				allocatedSlotFuture.get(10L, TimeUnit.MILLISECONDS)__				fail("Expected to fail with a timeout.")__			} catch (TimeoutException ignored) {_				_			}__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,idle,slots,which,cannot,be,released,are,only,recycled,if,the,owning,link,task,executor,is,still,registered,at,the,link,slot,pool,see,flink,9047;test,public,void,test,releasing,idle,slot,failed,throws,exception,final,manual,clock,clock,new,manual,clock,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,clock,testing,utils,infinite,time,timeout,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,allocation,id,expired,allocation,id,new,allocation,id,final,slot,offer,slot,to,expire,new,slot,offer,expired,allocation,id,0,resource,profile,unknown,final,array,deque,completable,future,acknowledge,response,queue,new,array,deque,2,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,if,response,queue,is,empty,return,completable,future,completed,future,acknowledge,get,else,return,response,queue,pop,response,queue,add,future,utils,completed,exceptionally,new,flink,exception,test,failure,final,completable,future,acknowledge,response,future,new,completable,future,response,queue,add,response,future,assert,that,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,matchers,is,acknowledge,get,assert,that,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,to,expire,get,matchers,is,true,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,completable,future,logical,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,final,logical,slot,logical,slot,allocated,slot,future,get,assert,that,logical,slot,get,allocation,id,matchers,is,expired,allocation,id,slot,pool,get,slot,owner,return,allocated,slot,logical,slot,get,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,slot,pool,gateway,release,task,manager,task,manager,location,get,resource,id,get,response,future,complete,exceptionally,new,flink,exception,second,test,exception,try,allocated,slot,future,get,10l,time,unit,milliseconds,fail,expected,to,fail,with,a,timeout,catch,timeout,exception,ignored,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testReleasingIdleSlotFailed() throws Exception;1525961911;Tests that idle slots which cannot be released are only recycled if the owning {@link TaskExecutor}_is still registered at the {@link SlotPool}. See FLINK-9047.;@Test_	public void testReleasingIdleSlotFailed() throws Exception {_		final ManualClock clock = new ManualClock()__		final SlotPool slotPool = new SlotPool(_			rpcService,_			jobId,_			clock,_			TestingUtils.infiniteTime(),_			timeout)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final AllocationID expiredAllocationId = new AllocationID()__			final SlotOffer slotToExpire = new SlotOffer(expiredAllocationId, 0, ResourceProfile.UNKNOWN)___			final ArrayDeque<CompletableFuture<Acknowledge>> responseQueue = new ArrayDeque<>(2)__			taskManagerGateway.setFreeSlotFunction((AllocationID allocationId, Throwable cause) -> {_				if (responseQueue.isEmpty()) {_					return CompletableFuture.completedFuture(Acknowledge.get())__				} else {_					return responseQueue.pop()__				}_			})___			responseQueue.add(FutureUtils.completedExceptionally(new FlinkException("Test failure")))___			final CompletableFuture<Acknowledge> responseFuture = new CompletableFuture<>()__			responseQueue.add(responseFuture)___			assertThat(_				slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get(),_				Matchers.is(Acknowledge.get()))___			assertThat(_				slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotToExpire).get(),_				Matchers.is(true))___			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			CompletableFuture<LogicalSlot> allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final LogicalSlot logicalSlot = allocatedSlotFuture.get()__			assertThat(logicalSlot.getAllocationId(), Matchers.is(expiredAllocationId))___			_			slotPool.getSlotOwner().returnAllocatedSlot(logicalSlot).get()___			_			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			_			allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			slotPoolGateway.releaseTaskManager(taskManagerLocation.getResourceID()).get()___			_			_			responseFuture.completeExceptionally(new FlinkException("Second test exception"))___			try {_				_				allocatedSlotFuture.get(10L, TimeUnit.MILLISECONDS)__				fail("Expected to fail with a timeout.")__			} catch (TimeoutException ignored) {_				_			}__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,idle,slots,which,cannot,be,released,are,only,recycled,if,the,owning,link,task,executor,is,still,registered,at,the,link,slot,pool,see,flink,9047;test,public,void,test,releasing,idle,slot,failed,throws,exception,final,manual,clock,clock,new,manual,clock,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,clock,testing,utils,infinite,time,timeout,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,allocation,id,expired,allocation,id,new,allocation,id,final,slot,offer,slot,to,expire,new,slot,offer,expired,allocation,id,0,resource,profile,unknown,final,array,deque,completable,future,acknowledge,response,queue,new,array,deque,2,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,if,response,queue,is,empty,return,completable,future,completed,future,acknowledge,get,else,return,response,queue,pop,response,queue,add,future,utils,completed,exceptionally,new,flink,exception,test,failure,final,completable,future,acknowledge,response,future,new,completable,future,response,queue,add,response,future,assert,that,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,matchers,is,acknowledge,get,assert,that,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,to,expire,get,matchers,is,true,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,completable,future,logical,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,final,logical,slot,logical,slot,allocated,slot,future,get,assert,that,logical,slot,get,allocation,id,matchers,is,expired,allocation,id,slot,pool,get,slot,owner,return,allocated,slot,logical,slot,get,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,slot,pool,gateway,release,task,manager,task,manager,location,get,resource,id,get,response,future,complete,exceptionally,new,flink,exception,second,test,exception,try,allocated,slot,future,get,10l,time,unit,milliseconds,fail,expected,to,fail,with,a,timeout,catch,timeout,exception,ignored,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testReleasingIdleSlotFailed() throws Exception;1526494919;Tests that idle slots which cannot be released are only recycled if the owning {@link TaskExecutor}_is still registered at the {@link SlotPool}. See FLINK-9047.;@Test_	public void testReleasingIdleSlotFailed() throws Exception {_		final ManualClock clock = new ManualClock()__		final SlotPool slotPool = new SlotPool(_			rpcService,_			jobId,_			clock,_			TestingUtils.infiniteTime(),_			timeout)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final AllocationID expiredAllocationId = new AllocationID()__			final SlotOffer slotToExpire = new SlotOffer(expiredAllocationId, 0, ResourceProfile.UNKNOWN)___			final ArrayDeque<CompletableFuture<Acknowledge>> responseQueue = new ArrayDeque<>(2)__			taskManagerGateway.setFreeSlotFunction((AllocationID allocationId, Throwable cause) -> {_				if (responseQueue.isEmpty()) {_					return CompletableFuture.completedFuture(Acknowledge.get())__				} else {_					return responseQueue.pop()__				}_			})___			responseQueue.add(FutureUtils.completedExceptionally(new FlinkException("Test failure")))___			final CompletableFuture<Acknowledge> responseFuture = new CompletableFuture<>()__			responseQueue.add(responseFuture)___			assertThat(_				slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get(),_				Matchers.is(Acknowledge.get()))___			assertThat(_				slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotToExpire).get(),_				Matchers.is(true))___			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			CompletableFuture<LogicalSlot> allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final LogicalSlot logicalSlot = allocatedSlotFuture.get()__			assertThat(logicalSlot.getAllocationId(), Matchers.is(expiredAllocationId))___			_			slotPool.getSlotOwner().returnAllocatedSlot(logicalSlot).get()___			_			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			_			allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			slotPoolGateway.releaseTaskManager(taskManagerLocation.getResourceID()).get()___			_			_			responseFuture.completeExceptionally(new FlinkException("Second test exception"))___			try {_				_				allocatedSlotFuture.get(10L, TimeUnit.MILLISECONDS)__				fail("Expected to fail with a timeout.")__			} catch (TimeoutException ignored) {_				_			}__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,idle,slots,which,cannot,be,released,are,only,recycled,if,the,owning,link,task,executor,is,still,registered,at,the,link,slot,pool,see,flink,9047;test,public,void,test,releasing,idle,slot,failed,throws,exception,final,manual,clock,clock,new,manual,clock,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,clock,testing,utils,infinite,time,timeout,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,allocation,id,expired,allocation,id,new,allocation,id,final,slot,offer,slot,to,expire,new,slot,offer,expired,allocation,id,0,resource,profile,unknown,final,array,deque,completable,future,acknowledge,response,queue,new,array,deque,2,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,if,response,queue,is,empty,return,completable,future,completed,future,acknowledge,get,else,return,response,queue,pop,response,queue,add,future,utils,completed,exceptionally,new,flink,exception,test,failure,final,completable,future,acknowledge,response,future,new,completable,future,response,queue,add,response,future,assert,that,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,matchers,is,acknowledge,get,assert,that,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,to,expire,get,matchers,is,true,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,completable,future,logical,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,final,logical,slot,logical,slot,allocated,slot,future,get,assert,that,logical,slot,get,allocation,id,matchers,is,expired,allocation,id,slot,pool,get,slot,owner,return,allocated,slot,logical,slot,get,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,slot,pool,gateway,release,task,manager,task,manager,location,get,resource,id,get,response,future,complete,exceptionally,new,flink,exception,second,test,exception,try,allocated,slot,future,get,10l,time,unit,milliseconds,fail,expected,to,fail,with,a,timeout,catch,timeout,exception,ignored,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testReleasingIdleSlotFailed() throws Exception;1529682304;Tests that idle slots which cannot be released are only recycled if the owning {@link TaskExecutor}_is still registered at the {@link SlotPool}. See FLINK-9047.;@Test_	public void testReleasingIdleSlotFailed() throws Exception {_		final ManualClock clock = new ManualClock()__		final SlotPool slotPool = new SlotPool(_			rpcService,_			jobId,_			clock,_			TestingUtils.infiniteTime(),_			timeout)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final AllocationID expiredAllocationId = new AllocationID()__			final SlotOffer slotToExpire = new SlotOffer(expiredAllocationId, 0, ResourceProfile.UNKNOWN)___			final ArrayDeque<CompletableFuture<Acknowledge>> responseQueue = new ArrayDeque<>(2)__			taskManagerGateway.setFreeSlotFunction((AllocationID allocationId, Throwable cause) -> {_				if (responseQueue.isEmpty()) {_					return CompletableFuture.completedFuture(Acknowledge.get())__				} else {_					return responseQueue.pop()__				}_			})___			responseQueue.add(FutureUtils.completedExceptionally(new FlinkException("Test failure")))___			final CompletableFuture<Acknowledge> responseFuture = new CompletableFuture<>()__			responseQueue.add(responseFuture)___			assertThat(_				slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get(),_				Matchers.is(Acknowledge.get()))___			assertThat(_				slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotToExpire).get(),_				Matchers.is(true))___			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			CompletableFuture<LogicalSlot> allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final LogicalSlot logicalSlot = allocatedSlotFuture.get()__			assertThat(logicalSlot.getAllocationId(), Matchers.is(expiredAllocationId))___			_			slotPool.getSlotOwner().returnAllocatedSlot(logicalSlot).get()___			_			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			_			allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			slotPoolGateway.releaseTaskManager(taskManagerLocation.getResourceID(), null).get()___			_			_			responseFuture.completeExceptionally(new FlinkException("Second test exception"))___			try {_				_				allocatedSlotFuture.get(10L, TimeUnit.MILLISECONDS)__				fail("Expected to fail with a timeout.")__			} catch (TimeoutException ignored) {_				_			}__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,idle,slots,which,cannot,be,released,are,only,recycled,if,the,owning,link,task,executor,is,still,registered,at,the,link,slot,pool,see,flink,9047;test,public,void,test,releasing,idle,slot,failed,throws,exception,final,manual,clock,clock,new,manual,clock,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,clock,testing,utils,infinite,time,timeout,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,allocation,id,expired,allocation,id,new,allocation,id,final,slot,offer,slot,to,expire,new,slot,offer,expired,allocation,id,0,resource,profile,unknown,final,array,deque,completable,future,acknowledge,response,queue,new,array,deque,2,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,if,response,queue,is,empty,return,completable,future,completed,future,acknowledge,get,else,return,response,queue,pop,response,queue,add,future,utils,completed,exceptionally,new,flink,exception,test,failure,final,completable,future,acknowledge,response,future,new,completable,future,response,queue,add,response,future,assert,that,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,matchers,is,acknowledge,get,assert,that,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,to,expire,get,matchers,is,true,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,completable,future,logical,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,final,logical,slot,logical,slot,allocated,slot,future,get,assert,that,logical,slot,get,allocation,id,matchers,is,expired,allocation,id,slot,pool,get,slot,owner,return,allocated,slot,logical,slot,get,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,slot,pool,gateway,release,task,manager,task,manager,location,get,resource,id,null,get,response,future,complete,exceptionally,new,flink,exception,second,test,exception,try,allocated,slot,future,get,10l,time,unit,milliseconds,fail,expected,to,fail,with,a,timeout,catch,timeout,exception,ignored,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testReleasingIdleSlotFailed() throws Exception;1530104620;Tests that idle slots which cannot be released are only recycled if the owning {@link TaskExecutor}_is still registered at the {@link SlotPool}. See FLINK-9047.;@Test_	public void testReleasingIdleSlotFailed() throws Exception {_		final ManualClock clock = new ManualClock()__		final SlotPool slotPool = new SlotPool(_			rpcService,_			jobId,_			LocationPreferenceSchedulingStrategy.getInstance(),_			clock,_			TestingUtils.infiniteTime(),_			timeout)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final AllocationID expiredAllocationId = new AllocationID()__			final SlotOffer slotToExpire = new SlotOffer(expiredAllocationId, 0, ResourceProfile.UNKNOWN)___			final ArrayDeque<CompletableFuture<Acknowledge>> responseQueue = new ArrayDeque<>(2)__			taskManagerGateway.setFreeSlotFunction((AllocationID allocationId, Throwable cause) -> {_				if (responseQueue.isEmpty()) {_					return CompletableFuture.completedFuture(Acknowledge.get())__				} else {_					return responseQueue.pop()__				}_			})___			responseQueue.add(FutureUtils.completedExceptionally(new FlinkException("Test failure")))___			final CompletableFuture<Acknowledge> responseFuture = new CompletableFuture<>()__			responseQueue.add(responseFuture)___			assertThat(_				slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get(),_				Matchers.is(Acknowledge.get()))___			assertThat(_				slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotToExpire).get(),_				Matchers.is(true))___			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			CompletableFuture<LogicalSlot> allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final LogicalSlot logicalSlot = allocatedSlotFuture.get()__			assertThat(logicalSlot.getAllocationId(), Matchers.is(expiredAllocationId))___			_			slotPool.getSlotOwner().returnAllocatedSlot(logicalSlot).get()___			_			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			_			allocatedSlotFuture = slotPoolGateway.allocateSlot(_				new SlotRequestId(),_				new DummyScheduledUnit(),_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			slotPoolGateway.releaseTaskManager(taskManagerLocation.getResourceID(), null).get()___			_			_			responseFuture.completeExceptionally(new FlinkException("Second test exception"))___			try {_				_				allocatedSlotFuture.get(10L, TimeUnit.MILLISECONDS)__				fail("Expected to fail with a timeout.")__			} catch (TimeoutException ignored) {_				_			}__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,idle,slots,which,cannot,be,released,are,only,recycled,if,the,owning,link,task,executor,is,still,registered,at,the,link,slot,pool,see,flink,9047;test,public,void,test,releasing,idle,slot,failed,throws,exception,final,manual,clock,clock,new,manual,clock,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,clock,testing,utils,infinite,time,timeout,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,allocation,id,expired,allocation,id,new,allocation,id,final,slot,offer,slot,to,expire,new,slot,offer,expired,allocation,id,0,resource,profile,unknown,final,array,deque,completable,future,acknowledge,response,queue,new,array,deque,2,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,if,response,queue,is,empty,return,completable,future,completed,future,acknowledge,get,else,return,response,queue,pop,response,queue,add,future,utils,completed,exceptionally,new,flink,exception,test,failure,final,completable,future,acknowledge,response,future,new,completable,future,response,queue,add,response,future,assert,that,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,matchers,is,acknowledge,get,assert,that,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,to,expire,get,matchers,is,true,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,completable,future,logical,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,final,logical,slot,logical,slot,allocated,slot,future,get,assert,that,logical,slot,get,allocation,id,matchers,is,expired,allocation,id,slot,pool,get,slot,owner,return,allocated,slot,logical,slot,get,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,allocated,slot,future,slot,pool,gateway,allocate,slot,new,slot,request,id,new,dummy,scheduled,unit,slot,profile,no,requirements,true,timeout,slot,pool,gateway,release,task,manager,task,manager,location,get,resource,id,null,get,response,future,complete,exceptionally,new,flink,exception,second,test,exception,try,allocated,slot,future,get,10l,time,unit,milliseconds,fail,expected,to,fail,with,a,timeout,catch,timeout,exception,ignored,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testReleasingIdleSlotFailed() throws Exception;1537192317;Tests that idle slots which cannot be released are only recycled if the owning {@link TaskExecutor}_is still registered at the {@link SlotPool}. See FLINK-9047.;@Test_	public void testReleasingIdleSlotFailed() throws Exception {_		final ManualClock clock = new ManualClock()__		final SlotPool slotPool = new SlotPool(_			rpcService,_			jobId,_			LocationPreferenceSchedulingStrategy.getInstance(),_			clock,_			TestingUtils.infiniteTime(),_			timeout)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final AllocationID expiredAllocationId = new AllocationID()__			final SlotOffer slotToExpire = new SlotOffer(expiredAllocationId, 0, ResourceProfile.UNKNOWN)___			final ArrayDeque<CompletableFuture<Acknowledge>> responseQueue = new ArrayDeque<>(2)__			taskManagerGateway.setFreeSlotFunction((AllocationID allocationId, Throwable cause) -> {_				if (responseQueue.isEmpty()) {_					return CompletableFuture.completedFuture(Acknowledge.get())__				} else {_					return responseQueue.pop()__				}_			})___			responseQueue.add(FutureUtils.completedExceptionally(new FlinkException("Test failure")))___			final CompletableFuture<Acknowledge> responseFuture = new CompletableFuture<>()__			responseQueue.add(responseFuture)___			assertThat(_				slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get(),_				Matchers.is(Acknowledge.get()))___			assertThat(_				slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotToExpire).get(),_				Matchers.is(true))___			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			CompletableFuture<LogicalSlot> allocatedSlotFuture = allocateSlot(slotPoolGateway, new SlotRequestId())___			_			final LogicalSlot logicalSlot = allocatedSlotFuture.get()__			assertThat(logicalSlot.getAllocationId(), Matchers.is(expiredAllocationId))___			_			slotPool.getSlotOwner().returnAllocatedSlot(logicalSlot).get()___			_			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			_			allocatedSlotFuture = allocateSlot(slotPoolGateway, new SlotRequestId())___			_			slotPoolGateway.releaseTaskManager(taskManagerLocation.getResourceID(), null).get()___			_			_			responseFuture.completeExceptionally(new FlinkException("Second test exception"))___			try {_				_				allocatedSlotFuture.get(10L, TimeUnit.MILLISECONDS)__				fail("Expected to fail with a timeout.")__			} catch (TimeoutException ignored) {_				_			}__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,idle,slots,which,cannot,be,released,are,only,recycled,if,the,owning,link,task,executor,is,still,registered,at,the,link,slot,pool,see,flink,9047;test,public,void,test,releasing,idle,slot,failed,throws,exception,final,manual,clock,clock,new,manual,clock,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,clock,testing,utils,infinite,time,timeout,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,allocation,id,expired,allocation,id,new,allocation,id,final,slot,offer,slot,to,expire,new,slot,offer,expired,allocation,id,0,resource,profile,unknown,final,array,deque,completable,future,acknowledge,response,queue,new,array,deque,2,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,if,response,queue,is,empty,return,completable,future,completed,future,acknowledge,get,else,return,response,queue,pop,response,queue,add,future,utils,completed,exceptionally,new,flink,exception,test,failure,final,completable,future,acknowledge,response,future,new,completable,future,response,queue,add,response,future,assert,that,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,matchers,is,acknowledge,get,assert,that,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,to,expire,get,matchers,is,true,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,completable,future,logical,slot,allocated,slot,future,allocate,slot,slot,pool,gateway,new,slot,request,id,final,logical,slot,logical,slot,allocated,slot,future,get,assert,that,logical,slot,get,allocation,id,matchers,is,expired,allocation,id,slot,pool,get,slot,owner,return,allocated,slot,logical,slot,get,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,allocated,slot,future,allocate,slot,slot,pool,gateway,new,slot,request,id,slot,pool,gateway,release,task,manager,task,manager,location,get,resource,id,null,get,response,future,complete,exceptionally,new,flink,exception,second,test,exception,try,allocated,slot,future,get,10l,time,unit,milliseconds,fail,expected,to,fail,with,a,timeout,catch,timeout,exception,ignored,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testReleasingIdleSlotFailed() throws Exception;1550005040;Tests that idle slots which cannot be released are only recycled if the owning {@link TaskExecutor}_is still registered at the {@link SlotPool}. See FLINK-9047.;@Test_	public void testReleasingIdleSlotFailed() throws Exception {_		final ManualClock clock = new ManualClock()__		final SlotPool slotPool = new SlotPool(_			rpcService,_			jobId,_			LocationPreferenceSchedulingStrategy.getInstance(),_			clock,_			TestingUtils.infiniteTime(),_			timeout)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final AllocationID expiredAllocationId = new AllocationID()__			final SlotOffer slotToExpire = new SlotOffer(expiredAllocationId, 0, ResourceProfile.UNKNOWN)___			final ArrayDeque<CompletableFuture<Acknowledge>> responseQueue = new ArrayDeque<>(2)__			taskManagerGateway.setFreeSlotFunction((AllocationID allocationId, Throwable cause) -> {_				if (responseQueue.isEmpty()) {_					return CompletableFuture.completedFuture(Acknowledge.get())__				} else {_					return responseQueue.pop()__				}_			})___			responseQueue.add(FutureUtils.completedExceptionally(new FlinkException("Test failure")))___			final CompletableFuture<Acknowledge> responseFuture = new CompletableFuture<>()__			responseQueue.add(responseFuture)___			assertThat(_				slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get(),_				Matchers.is(Acknowledge.get()))___			assertThat(_				slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotToExpire).get(),_				Matchers.is(true))___			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			CompletableFuture<LogicalSlot> allocatedSlotFuture = allocateSlot(slotPoolGateway, new SlotRequestId())___			_			final LogicalSlot logicalSlot = allocatedSlotFuture.get()__			assertThat(logicalSlot.getAllocationId(), Matchers.is(expiredAllocationId))___			_			slotPool.getSlotOwner().returnAllocatedSlot(logicalSlot).get()___			_			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			_			allocatedSlotFuture = allocateSlot(slotPoolGateway, new SlotRequestId())___			_			slotPoolGateway.releaseTaskManager(taskManagerLocation.getResourceID(), null).get()___			_			_			responseFuture.completeExceptionally(new FlinkException("Second test exception"))___			try {_				_				allocatedSlotFuture.get(10L, TimeUnit.MILLISECONDS)__				fail("Expected to fail with a timeout.")__			} catch (TimeoutException ignored) {_				_			}__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,idle,slots,which,cannot,be,released,are,only,recycled,if,the,owning,link,task,executor,is,still,registered,at,the,link,slot,pool,see,flink,9047;test,public,void,test,releasing,idle,slot,failed,throws,exception,final,manual,clock,clock,new,manual,clock,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,clock,testing,utils,infinite,time,timeout,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,allocation,id,expired,allocation,id,new,allocation,id,final,slot,offer,slot,to,expire,new,slot,offer,expired,allocation,id,0,resource,profile,unknown,final,array,deque,completable,future,acknowledge,response,queue,new,array,deque,2,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,if,response,queue,is,empty,return,completable,future,completed,future,acknowledge,get,else,return,response,queue,pop,response,queue,add,future,utils,completed,exceptionally,new,flink,exception,test,failure,final,completable,future,acknowledge,response,future,new,completable,future,response,queue,add,response,future,assert,that,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,matchers,is,acknowledge,get,assert,that,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,to,expire,get,matchers,is,true,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,completable,future,logical,slot,allocated,slot,future,allocate,slot,slot,pool,gateway,new,slot,request,id,final,logical,slot,logical,slot,allocated,slot,future,get,assert,that,logical,slot,get,allocation,id,matchers,is,expired,allocation,id,slot,pool,get,slot,owner,return,allocated,slot,logical,slot,get,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,allocated,slot,future,allocate,slot,slot,pool,gateway,new,slot,request,id,slot,pool,gateway,release,task,manager,task,manager,location,get,resource,id,null,get,response,future,complete,exceptionally,new,flink,exception,second,test,exception,try,allocated,slot,future,get,10l,time,unit,milliseconds,fail,expected,to,fail,with,a,timeout,catch,timeout,exception,ignored,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testReleasingIdleSlotFailed() throws Exception;1550220073;Tests that idle slots which cannot be released are only recycled if the owning {@link TaskExecutor}_is still registered at the {@link SlotPoolImpl}. See FLINK-9047.;@Test_	public void testReleasingIdleSlotFailed() throws Exception {_		final ManualClock clock = new ManualClock()___		try (SlotPoolImpl slotPool = new SlotPoolImpl(_			jobId,_			clock,_			TestingUtils.infiniteTime(),_			timeout)) {__			setupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor)__			Scheduler scheduler = setupScheduler(slotPool, mainThreadExecutor)___			final AllocationID expiredAllocationId = new AllocationID()__			final SlotOffer slotToExpire = new SlotOffer(expiredAllocationId, 0, ResourceProfile.UNKNOWN)___			final ArrayDeque<CompletableFuture<Acknowledge>> responseQueue = new ArrayDeque<>(2)__			taskManagerGateway.setFreeSlotFunction((AllocationID allocationId, Throwable cause) -> {_				if (responseQueue.isEmpty()) {_					return CompletableFuture.completedFuture(Acknowledge.get())__				} else {_					return responseQueue.pop()__				}_			})___			responseQueue.add(FutureUtils.completedExceptionally(new FlinkException("Test failure")))___			final CompletableFuture<Acknowledge> responseFuture = new CompletableFuture<>()__			responseQueue.add(responseFuture)___			assertThat(slotPool.registerTaskManager(taskManagerLocation.getResourceID()), Matchers.is(true))___			assertThat(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotToExpire), Matchers.is(true))___			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			CompletableFuture<LogicalSlot> allocatedSlotFuture = allocateSlot(scheduler, new SlotRequestId())___			_			final LogicalSlot logicalSlot = allocatedSlotFuture.get()__			assertThat(logicalSlot.getAllocationId(), Matchers.is(expiredAllocationId))___			_			scheduler.returnLogicalSlot(logicalSlot)___			_			clock.advanceTime(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			slotPool.triggerCheckIdleSlot()___			_			allocatedSlotFuture = allocateSlot(scheduler, new SlotRequestId())___			_			slotPool.releaseTaskManager(taskManagerLocation.getResourceID(), null)___			_			_			responseFuture.completeExceptionally(new FlinkException("Second test exception"))___			try {_				_				allocatedSlotFuture.get(10L, TimeUnit.MILLISECONDS)__				fail("Expected to fail with a timeout.")__			} catch (TimeoutException ignored) {_				_			}__		}_	};tests,that,idle,slots,which,cannot,be,released,are,only,recycled,if,the,owning,link,task,executor,is,still,registered,at,the,link,slot,pool,impl,see,flink,9047;test,public,void,test,releasing,idle,slot,failed,throws,exception,final,manual,clock,clock,new,manual,clock,try,slot,pool,impl,slot,pool,new,slot,pool,impl,job,id,clock,testing,utils,infinite,time,timeout,setup,slot,pool,slot,pool,resource,manager,gateway,main,thread,executor,scheduler,scheduler,setup,scheduler,slot,pool,main,thread,executor,final,allocation,id,expired,allocation,id,new,allocation,id,final,slot,offer,slot,to,expire,new,slot,offer,expired,allocation,id,0,resource,profile,unknown,final,array,deque,completable,future,acknowledge,response,queue,new,array,deque,2,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,if,response,queue,is,empty,return,completable,future,completed,future,acknowledge,get,else,return,response,queue,pop,response,queue,add,future,utils,completed,exceptionally,new,flink,exception,test,failure,final,completable,future,acknowledge,response,future,new,completable,future,response,queue,add,response,future,assert,that,slot,pool,register,task,manager,task,manager,location,get,resource,id,matchers,is,true,assert,that,slot,pool,offer,slot,task,manager,location,task,manager,gateway,slot,to,expire,matchers,is,true,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,completable,future,logical,slot,allocated,slot,future,allocate,slot,scheduler,new,slot,request,id,final,logical,slot,logical,slot,allocated,slot,future,get,assert,that,logical,slot,get,allocation,id,matchers,is,expired,allocation,id,scheduler,return,logical,slot,logical,slot,clock,advance,time,timeout,to,milliseconds,time,unit,milliseconds,slot,pool,trigger,check,idle,slot,allocated,slot,future,allocate,slot,scheduler,new,slot,request,id,slot,pool,release,task,manager,task,manager,location,get,resource,id,null,response,future,complete,exceptionally,new,flink,exception,second,test,exception,try,allocated,slot,future,get,10l,time,unit,milliseconds,fail,expected,to,fail,with,a,timeout,catch,timeout,exception,ignored
SlotPoolTest -> @Test 	public void testSlotAllocationTimeout() throws Exception;1518680774;Tests that a slot allocation times out wrt to the specified time out.;@Test_	public void testSlotAllocationTimeout() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final Time allocationTimeout = Time.milliseconds(1L)___		try {_			setupSlotPool(slotPool, resourceManagerGateway)___			final SlotProvider slotProvider = slotPool.getSlotProvider()___			final CompletableFuture<LogicalSlot> allocationFuture = slotProvider.allocateSlot(_				new DummyScheduledUnit(),_				true,_				Collections.emptyList(),_				allocationTimeout)___			try {_				allocationFuture.get()__				fail("Should have failed with a timeout exception.")__			} catch (ExecutionException ee) {_				assertThat(ExceptionUtils.stripExecutionException(ee), Matchers.instanceOf(TimeoutException.class))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,allocation,times,out,wrt,to,the,specified,time,out;test,public,void,test,slot,allocation,timeout,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,time,allocation,timeout,time,milliseconds,1l,try,setup,slot,pool,slot,pool,resource,manager,gateway,final,slot,provider,slot,provider,slot,pool,get,slot,provider,final,completable,future,logical,slot,allocation,future,slot,provider,allocate,slot,new,dummy,scheduled,unit,true,collections,empty,list,allocation,timeout,try,allocation,future,get,fail,should,have,failed,with,a,timeout,exception,catch,execution,exception,ee,assert,that,exception,utils,strip,execution,exception,ee,matchers,instance,of,timeout,exception,class,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testSlotAllocationTimeout() throws Exception;1518680775;Tests that a slot allocation times out wrt to the specified time out.;@Test_	public void testSlotAllocationTimeout() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final Time allocationTimeout = Time.milliseconds(1L)___		try {_			setupSlotPool(slotPool, resourceManagerGateway)___			final SlotProvider slotProvider = slotPool.getSlotProvider()___			final CompletableFuture<LogicalSlot> allocationFuture = slotProvider.allocateSlot(_				new DummyScheduledUnit(),_				true,_				Collections.emptyList(),_				allocationTimeout)___			try {_				allocationFuture.get()__				fail("Should have failed with a timeout exception.")__			} catch (ExecutionException ee) {_				assertThat(ExceptionUtils.stripExecutionException(ee), Matchers.instanceOf(TimeoutException.class))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,allocation,times,out,wrt,to,the,specified,time,out;test,public,void,test,slot,allocation,timeout,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,time,allocation,timeout,time,milliseconds,1l,try,setup,slot,pool,slot,pool,resource,manager,gateway,final,slot,provider,slot,provider,slot,pool,get,slot,provider,final,completable,future,logical,slot,allocation,future,slot,provider,allocate,slot,new,dummy,scheduled,unit,true,collections,empty,list,allocation,timeout,try,allocation,future,get,fail,should,have,failed,with,a,timeout,exception,catch,execution,exception,ee,assert,that,exception,utils,strip,execution,exception,ee,matchers,instance,of,timeout,exception,class,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1515588319;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotConsumer(tuple -> {_				while(!freedSlotQueue.offer(tuple.f0)) {}_			})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,consumer,tuple,while,freed,slot,queue,offer,tuple,f0,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1515669170;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotConsumer(tuple -> {_				while(!freedSlotQueue.offer(tuple.f0)) {}_			})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,consumer,tuple,while,freed,slot,queue,offer,tuple,f0,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1518433170;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)__		final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotConsumer(tuple -> {_				while(!freedSlotQueue.offer(tuple.f0)) {}_			})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,consumer,tuple,while,freed,slot,queue,offer,tuple,f0,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1518434692;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotConsumer(tuple -> {_				while(!freedSlotQueue.offer(tuple.f0)) {}_			})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,consumer,tuple,while,freed,slot,queue,offer,tuple,f0,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1518680774;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotConsumer(tuple -> {_				while(!freedSlotQueue.offer(tuple.f0)) {}_			})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,consumer,tuple,while,freed,slot,queue,offer,tuple,f0,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1518680775;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotConsumer(tuple -> {_				while(!freedSlotQueue.offer(tuple.f0)) {}_			})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,consumer,tuple,while,freed,slot,queue,offer,tuple,f0,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1518945174;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotConsumer(tuple -> {_				while(!freedSlotQueue.offer(tuple.f0)) {}_			})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,consumer,tuple,while,freed,slot,queue,offer,tuple,f0,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1519406526;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotConsumer(tuple -> {_				while(!freedSlotQueue.offer(tuple.f0)) {}_			})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,consumer,tuple,while,freed,slot,queue,offer,tuple,f0,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1519655521;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotConsumer(tuple -> {_				while(!freedSlotQueue.offer(tuple.f0)) {}_			})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,consumer,tuple,while,freed,slot,queue,offer,tuple,f0,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1520961474;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotConsumer(tuple -> {_				while(!freedSlotQueue.offer(tuple.f0)) {}_			})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,consumer,tuple,while,freed,slot,queue,offer,tuple,f0,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1521804757;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotFunction(_				(AllocationID allocationID, Throwable cause) -> {_					try {_						freedSlotQueue.put(allocationID)__						return CompletableFuture.completedFuture(Acknowledge.get())__					} catch (InterruptedException e) {_						return FutureUtils.completedExceptionally(e)__					}_				})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,try,freed,slot,queue,put,allocation,id,return,completable,future,completed,future,acknowledge,get,catch,interrupted,exception,e,return,future,utils,completed,exceptionally,e,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1522681180;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotFunction(_				(AllocationID allocationID, Throwable cause) -> {_					try {_						freedSlotQueue.put(allocationID)__						return CompletableFuture.completedFuture(Acknowledge.get())__					} catch (InterruptedException e) {_						return FutureUtils.completedExceptionally(e)__					}_				})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,try,freed,slot,queue,put,allocation,id,return,completable,future,completed,future,acknowledge,get,catch,interrupted,exception,e,return,future,utils,completed,exceptionally,e,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1525384685;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotFunction(_				(AllocationID allocationID, Throwable cause) -> {_					try {_						freedSlotQueue.put(allocationID)__						return CompletableFuture.completedFuture(Acknowledge.get())__					} catch (InterruptedException e) {_						return FutureUtils.completedExceptionally(e)__					}_				})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,try,freed,slot,queue,put,allocation,id,return,completable,future,completed,future,acknowledge,get,catch,interrupted,exception,e,return,future,utils,completed,exceptionally,e,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1525961911;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotFunction(_				(AllocationID allocationID, Throwable cause) -> {_					try {_						freedSlotQueue.put(allocationID)__						return CompletableFuture.completedFuture(Acknowledge.get())__					} catch (InterruptedException e) {_						return FutureUtils.completedExceptionally(e)__					}_				})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,try,freed,slot,queue,put,allocation,id,return,completable,future,completed,future,acknowledge,get,catch,interrupted,exception,e,return,future,utils,completed,exceptionally,e,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1526494919;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotFunction(_				(AllocationID allocationID, Throwable cause) -> {_					try {_						freedSlotQueue.put(allocationID)__						return CompletableFuture.completedFuture(Acknowledge.get())__					} catch (InterruptedException e) {_						return FutureUtils.completedExceptionally(e)__					}_				})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,try,freed,slot,queue,put,allocation,id,return,completable,future,completed,future,acknowledge,get,catch,interrupted,exception,e,return,future,utils,completed,exceptionally,e,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1529682304;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotFunction(_				(AllocationID allocationID, Throwable cause) -> {_					try {_						freedSlotQueue.put(allocationID)__						return CompletableFuture.completedFuture(Acknowledge.get())__					} catch (InterruptedException e) {_						return FutureUtils.completedExceptionally(e)__					}_				})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,try,freed,slot,queue,put,allocation,id,return,completable,future,completed,future,acknowledge,get,catch,interrupted,exception,e,return,future,utils,completed,exceptionally,e,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1530104620;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId, LocationPreferenceSchedulingStrategy.getInstance())___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotFunction(_				(AllocationID allocationID, Throwable cause) -> {_					try {_						freedSlotQueue.put(allocationID)__						return CompletableFuture.completedFuture(Acknowledge.get())__					} catch (InterruptedException e) {_						return FutureUtils.completedExceptionally(e)__					}_				})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,try,freed,slot,queue,put,allocation,id,return,completable,future,completed,future,acknowledge,get,catch,interrupted,exception,e,return,future,utils,completed,exceptionally,e,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1537192317;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId, LocationPreferenceSchedulingStrategy.getInstance())___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotFunction(_				(AllocationID allocationID, Throwable cause) -> {_					try {_						freedSlotQueue.put(allocationID)__						return CompletableFuture.completedFuture(Acknowledge.get())__					} catch (InterruptedException e) {_						return FutureUtils.completedExceptionally(e)__					}_				})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.shutDown()__			slotPool.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,try,freed,slot,queue,put,allocation,id,return,completable,future,completed,future,acknowledge,get,catch,interrupted,exception,e,return,future,utils,completed,exceptionally,e,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,shut,down,slot,pool,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1550005040;Tests that a SlotPool shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId, LocationPreferenceSchedulingStrategy.getInstance())___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotFunction(_				(AllocationID allocationID, Throwable cause) -> {_					try {_						freedSlotQueue.put(allocationID)__						return CompletableFuture.completedFuture(Acknowledge.get())__					} catch (InterruptedException e) {_						return FutureUtils.completedExceptionally(e)__					}_				})___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffersFuture = slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			final Collection<SlotOffer> acceptedSlotOffers = acceptedSlotOffersFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.closeAsync().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,a,slot,pool,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,try,freed,slot,queue,put,allocation,id,return,completable,future,completed,future,acknowledge,get,catch,interrupted,exception,e,return,future,utils,completed,exceptionally,e,final,completable,future,collection,slot,offer,accepted,slot,offers,future,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,final,collection,slot,offer,accepted,slot,offers,accepted,slot,offers,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,close,async,get,timeout,to,milliseconds,time,unit,milliseconds,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testShutdownReleasesAllSlots() throws Exception;1550220073;Tests that a SlotPoolImpl shutdown releases all registered slots;@Test_	public void testShutdownReleasesAllSlots() throws Exception {__		try (SlotPoolImpl slotPool = new SlotPoolImpl(jobId)) {_			setupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor)___			slotPool.registerTaskManager(taskManagerLocation.getResourceID())___			final int numSlotOffers = 2___			final Collection<SlotOffer> slotOffers = new ArrayList<>(numSlotOffers)___			for (int i = 0_ i < numSlotOffers_ i++) {_				slotOffers.add(_					new SlotOffer(_						new AllocationID(),_						i,_						ResourceProfile.UNKNOWN))__			}__			final ArrayBlockingQueue<AllocationID> freedSlotQueue = new ArrayBlockingQueue<>(numSlotOffers)___			taskManagerGateway.setFreeSlotFunction(_				(AllocationID allocationID, Throwable cause) -> {_					try {_						freedSlotQueue.put(allocationID)__						return CompletableFuture.completedFuture(Acknowledge.get())__					} catch (InterruptedException e) {_						return FutureUtils.completedExceptionally(e)__					}_				})___			final Collection<SlotOffer> acceptedSlotOffers = slotPool.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			assertThat(acceptedSlotOffers, Matchers.equalTo(slotOffers))___			_			slotPool.close()___			_			ArrayList<AllocationID> freedSlots = new ArrayList<>(numSlotOffers)___			while (freedSlots.size() < numSlotOffers) {_				freedSlotQueue.drainTo(freedSlots)__			}__			assertThat(freedSlots, Matchers.containsInAnyOrder(slotOffers.stream().map(SlotOffer::getAllocationId).toArray()))__		}_	};tests,that,a,slot,pool,impl,shutdown,releases,all,registered,slots;test,public,void,test,shutdown,releases,all,slots,throws,exception,try,slot,pool,impl,slot,pool,new,slot,pool,impl,job,id,setup,slot,pool,slot,pool,resource,manager,gateway,main,thread,executor,slot,pool,register,task,manager,task,manager,location,get,resource,id,final,int,num,slot,offers,2,final,collection,slot,offer,slot,offers,new,array,list,num,slot,offers,for,int,i,0,i,num,slot,offers,i,slot,offers,add,new,slot,offer,new,allocation,id,i,resource,profile,unknown,final,array,blocking,queue,allocation,id,freed,slot,queue,new,array,blocking,queue,num,slot,offers,task,manager,gateway,set,free,slot,function,allocation,id,allocation,id,throwable,cause,try,freed,slot,queue,put,allocation,id,return,completable,future,completed,future,acknowledge,get,catch,interrupted,exception,e,return,future,utils,completed,exceptionally,e,final,collection,slot,offer,accepted,slot,offers,slot,pool,offer,slots,task,manager,location,task,manager,gateway,slot,offers,assert,that,accepted,slot,offers,matchers,equal,to,slot,offers,slot,pool,close,array,list,allocation,id,freed,slots,new,array,list,num,slot,offers,while,freed,slots,size,num,slot,offers,freed,slot,queue,drain,to,freed,slots,assert,that,freed,slots,matchers,contains,in,any,order,slot,offers,stream,map,slot,offer,get,allocation,id,to,array
SlotPoolTest -> @Test 	public void testFreeFailedSlots() throws Exception;1537192317;Tests that failed slots are freed on the {@link TaskExecutor}.;@Test_	public void testFreeFailedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId, LocationPreferenceSchedulingStrategy.getInstance())___		try {_			final int parallelism = 5__			final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(parallelism)__			resourceManagerGateway.setRequestSlotConsumer(_				slotRequest -> allocationIds.offer(slotRequest.getAllocationId()))___			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final Map<SlotRequestId, CompletableFuture<LogicalSlot>> slotRequestFutures = new HashMap<>(parallelism)___			for (int i = 0_ i < parallelism_ i++) {_				final SlotRequestId slotRequestId = new SlotRequestId()__				slotRequestFutures.put(slotRequestId, allocateSlot(slotPoolGateway, slotRequestId))__			}__			final List<SlotOffer> slotOffers = new ArrayList<>(parallelism)___			for (int i = 0_ i < parallelism_ i++) {_				slotOffers.add(new SlotOffer(allocationIds.take(), i, ResourceProfile.UNKNOWN))__			}__			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())__			slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			_			FutureUtils.waitForAll(slotRequestFutures.values()).get()___			final ArrayBlockingQueue<AllocationID> freedSlots = new ArrayBlockingQueue<>(1)__			taskManagerGateway.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlots.offer(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})___			final FlinkException failException = new FlinkException("Test fail exception")__			_			for (int i = 0_ i < parallelism - 1_ i++) {_				final SlotOffer slotOffer = slotOffers.get(i)__				final CompletableFuture<SerializableOptional<ResourceID>> emptyTaskExecutorFuture = slotPoolGateway.failAllocation(_					slotOffer.getAllocationId(),_					failException)___				assertThat(emptyTaskExecutorFuture.get().isPresent(), is(false))__				assertThat(freedSlots.take(), is(equalTo(slotOffer.getAllocationId())))__			}__			final SlotOffer slotOffer = slotOffers.get(parallelism - 1)__			final CompletableFuture<SerializableOptional<ResourceID>> emptyTaskExecutorFuture = slotPoolGateway.failAllocation(_				slotOffer.getAllocationId(),_				failException)__			assertThat(emptyTaskExecutorFuture.get().get(), is(equalTo(taskManagerLocation.getResourceID())))__			assertThat(freedSlots.take(), is(equalTo(slotOffer.getAllocationId())))___		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,failed,slots,are,freed,on,the,link,task,executor;test,public,void,test,free,failed,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,try,final,int,parallelism,5,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,parallelism,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,ids,offer,slot,request,get,allocation,id,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,map,slot,request,id,completable,future,logical,slot,slot,request,futures,new,hash,map,parallelism,for,int,i,0,i,parallelism,i,final,slot,request,id,slot,request,id,new,slot,request,id,slot,request,futures,put,slot,request,id,allocate,slot,slot,pool,gateway,slot,request,id,final,list,slot,offer,slot,offers,new,array,list,parallelism,for,int,i,0,i,parallelism,i,slot,offers,add,new,slot,offer,allocation,ids,take,i,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,future,utils,wait,for,all,slot,request,futures,values,get,final,array,blocking,queue,allocation,id,freed,slots,new,array,blocking,queue,1,task,manager,gateway,set,free,slot,function,allocation,id,throwable,freed,slots,offer,allocation,id,return,completable,future,completed,future,acknowledge,get,final,flink,exception,fail,exception,new,flink,exception,test,fail,exception,for,int,i,0,i,parallelism,1,i,final,slot,offer,slot,offer,slot,offers,get,i,final,completable,future,serializable,optional,resource,id,empty,task,executor,future,slot,pool,gateway,fail,allocation,slot,offer,get,allocation,id,fail,exception,assert,that,empty,task,executor,future,get,is,present,is,false,assert,that,freed,slots,take,is,equal,to,slot,offer,get,allocation,id,final,slot,offer,slot,offer,slot,offers,get,parallelism,1,final,completable,future,serializable,optional,resource,id,empty,task,executor,future,slot,pool,gateway,fail,allocation,slot,offer,get,allocation,id,fail,exception,assert,that,empty,task,executor,future,get,get,is,equal,to,task,manager,location,get,resource,id,assert,that,freed,slots,take,is,equal,to,slot,offer,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFreeFailedSlots() throws Exception;1550005040;Tests that failed slots are freed on the {@link TaskExecutor}.;@Test_	public void testFreeFailedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId, LocationPreferenceSchedulingStrategy.getInstance())___		try {_			final int parallelism = 5__			final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(parallelism)__			resourceManagerGateway.setRequestSlotConsumer(_				slotRequest -> allocationIds.offer(slotRequest.getAllocationId()))___			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final Map<SlotRequestId, CompletableFuture<LogicalSlot>> slotRequestFutures = new HashMap<>(parallelism)___			for (int i = 0_ i < parallelism_ i++) {_				final SlotRequestId slotRequestId = new SlotRequestId()__				slotRequestFutures.put(slotRequestId, allocateSlot(slotPoolGateway, slotRequestId))__			}__			final List<SlotOffer> slotOffers = new ArrayList<>(parallelism)___			for (int i = 0_ i < parallelism_ i++) {_				slotOffers.add(new SlotOffer(allocationIds.take(), i, ResourceProfile.UNKNOWN))__			}__			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID())__			slotPoolGateway.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			_			FutureUtils.waitForAll(slotRequestFutures.values()).get()___			final ArrayBlockingQueue<AllocationID> freedSlots = new ArrayBlockingQueue<>(1)__			taskManagerGateway.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlots.offer(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})___			final FlinkException failException = new FlinkException("Test fail exception")__			_			for (int i = 0_ i < parallelism - 1_ i++) {_				final SlotOffer slotOffer = slotOffers.get(i)__				final CompletableFuture<SerializableOptional<ResourceID>> emptyTaskExecutorFuture = slotPoolGateway.failAllocation(_					slotOffer.getAllocationId(),_					failException)___				assertThat(emptyTaskExecutorFuture.get().isPresent(), is(false))__				assertThat(freedSlots.take(), is(equalTo(slotOffer.getAllocationId())))__			}__			final SlotOffer slotOffer = slotOffers.get(parallelism - 1)__			final CompletableFuture<SerializableOptional<ResourceID>> emptyTaskExecutorFuture = slotPoolGateway.failAllocation(_				slotOffer.getAllocationId(),_				failException)__			assertThat(emptyTaskExecutorFuture.get().get(), is(equalTo(taskManagerLocation.getResourceID())))__			assertThat(freedSlots.take(), is(equalTo(slotOffer.getAllocationId())))___		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,failed,slots,are,freed,on,the,link,task,executor;test,public,void,test,free,failed,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,try,final,int,parallelism,5,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,parallelism,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,ids,offer,slot,request,get,allocation,id,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,map,slot,request,id,completable,future,logical,slot,slot,request,futures,new,hash,map,parallelism,for,int,i,0,i,parallelism,i,final,slot,request,id,slot,request,id,new,slot,request,id,slot,request,futures,put,slot,request,id,allocate,slot,slot,pool,gateway,slot,request,id,final,list,slot,offer,slot,offers,new,array,list,parallelism,for,int,i,0,i,parallelism,i,slot,offers,add,new,slot,offer,allocation,ids,take,i,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,slot,pool,gateway,offer,slots,task,manager,location,task,manager,gateway,slot,offers,future,utils,wait,for,all,slot,request,futures,values,get,final,array,blocking,queue,allocation,id,freed,slots,new,array,blocking,queue,1,task,manager,gateway,set,free,slot,function,allocation,id,throwable,freed,slots,offer,allocation,id,return,completable,future,completed,future,acknowledge,get,final,flink,exception,fail,exception,new,flink,exception,test,fail,exception,for,int,i,0,i,parallelism,1,i,final,slot,offer,slot,offer,slot,offers,get,i,final,completable,future,serializable,optional,resource,id,empty,task,executor,future,slot,pool,gateway,fail,allocation,slot,offer,get,allocation,id,fail,exception,assert,that,empty,task,executor,future,get,is,present,is,false,assert,that,freed,slots,take,is,equal,to,slot,offer,get,allocation,id,final,slot,offer,slot,offer,slot,offers,get,parallelism,1,final,completable,future,serializable,optional,resource,id,empty,task,executor,future,slot,pool,gateway,fail,allocation,slot,offer,get,allocation,id,fail,exception,assert,that,empty,task,executor,future,get,get,is,equal,to,task,manager,location,get,resource,id,assert,that,freed,slots,take,is,equal,to,slot,offer,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFreeFailedSlots() throws Exception;1550220073;Tests that failed slots are freed on the {@link TaskExecutor}.;@Test_	public void testFreeFailedSlots() throws Exception {__		try (SlotPoolImpl slotPool = new SlotPoolImpl(jobId)) {_			final int parallelism = 5__			final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(parallelism)__			resourceManagerGateway.setRequestSlotConsumer(_				slotRequest -> allocationIds.offer(slotRequest.getAllocationId()))___			setupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor)__			Scheduler scheduler = setupScheduler(slotPool, mainThreadExecutor)___			final Map<SlotRequestId, CompletableFuture<LogicalSlot>> slotRequestFutures = new HashMap<>(parallelism)___			for (int i = 0_ i < parallelism_ i++) {_				final SlotRequestId slotRequestId = new SlotRequestId()__				slotRequestFutures.put(slotRequestId, allocateSlot(scheduler, slotRequestId))__			}__			final List<SlotOffer> slotOffers = new ArrayList<>(parallelism)___			for (int i = 0_ i < parallelism_ i++) {_				slotOffers.add(new SlotOffer(allocationIds.take(), i, ResourceProfile.UNKNOWN))__			}__			slotPool.registerTaskManager(taskManagerLocation.getResourceID())__			slotPool.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers)___			_			FutureUtils.waitForAll(slotRequestFutures.values()).get()___			final ArrayBlockingQueue<AllocationID> freedSlots = new ArrayBlockingQueue<>(1)__			taskManagerGateway.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlots.offer(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})___			final FlinkException failException = new FlinkException("Test fail exception")__			_			for (int i = 0_ i < parallelism - 1_ i++) {_				final SlotOffer slotOffer = slotOffers.get(i)__				Optional<ResourceID> emptyTaskExecutorFuture =_					slotPool.failAllocation(slotOffer.getAllocationId(), failException)___				assertThat(emptyTaskExecutorFuture.isPresent(), is(false))__				assertThat(freedSlots.take(), is(equalTo(slotOffer.getAllocationId())))__			}__			final SlotOffer slotOffer = slotOffers.get(parallelism - 1)__			final Optional<ResourceID> emptyTaskExecutorFuture = slotPool.failAllocation(_				slotOffer.getAllocationId(),_				failException)__			assertThat(emptyTaskExecutorFuture.get(), is(equalTo(taskManagerLocation.getResourceID())))__			assertThat(freedSlots.take(), is(equalTo(slotOffer.getAllocationId())))___		}_	};tests,that,failed,slots,are,freed,on,the,link,task,executor;test,public,void,test,free,failed,slots,throws,exception,try,slot,pool,impl,slot,pool,new,slot,pool,impl,job,id,final,int,parallelism,5,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,parallelism,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,ids,offer,slot,request,get,allocation,id,setup,slot,pool,slot,pool,resource,manager,gateway,main,thread,executor,scheduler,scheduler,setup,scheduler,slot,pool,main,thread,executor,final,map,slot,request,id,completable,future,logical,slot,slot,request,futures,new,hash,map,parallelism,for,int,i,0,i,parallelism,i,final,slot,request,id,slot,request,id,new,slot,request,id,slot,request,futures,put,slot,request,id,allocate,slot,scheduler,slot,request,id,final,list,slot,offer,slot,offers,new,array,list,parallelism,for,int,i,0,i,parallelism,i,slot,offers,add,new,slot,offer,allocation,ids,take,i,resource,profile,unknown,slot,pool,register,task,manager,task,manager,location,get,resource,id,slot,pool,offer,slots,task,manager,location,task,manager,gateway,slot,offers,future,utils,wait,for,all,slot,request,futures,values,get,final,array,blocking,queue,allocation,id,freed,slots,new,array,blocking,queue,1,task,manager,gateway,set,free,slot,function,allocation,id,throwable,freed,slots,offer,allocation,id,return,completable,future,completed,future,acknowledge,get,final,flink,exception,fail,exception,new,flink,exception,test,fail,exception,for,int,i,0,i,parallelism,1,i,final,slot,offer,slot,offer,slot,offers,get,i,optional,resource,id,empty,task,executor,future,slot,pool,fail,allocation,slot,offer,get,allocation,id,fail,exception,assert,that,empty,task,executor,future,is,present,is,false,assert,that,freed,slots,take,is,equal,to,slot,offer,get,allocation,id,final,slot,offer,slot,offer,slot,offers,get,parallelism,1,final,optional,resource,id,empty,task,executor,future,slot,pool,fail,allocation,slot,offer,get,allocation,id,fail,exception,assert,that,empty,task,executor,future,get,is,equal,to,task,manager,location,get,resource,id,assert,that,freed,slots,take,is,equal,to,slot,offer,get,allocation,id
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1513261599;Tests that unused offered slots are directly used to fulfill pending slot_requests.__<p>See FLINK-8089;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final JobMasterId jobMasterId = JobMasterId.generate()__		final String jobMasterAddress = "foobar"__		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__		final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			slotPool.start(jobMasterId, jobMasterAddress)___			final SlotPoolGateway slotPoolGateway = slotPool.getSelfGateway(SlotPoolGateway.class)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			slotPoolGateway.connectToResourceManager(resourceManagerGateway)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			_			final AllocationID allocationId = allocationIdFuture.get()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)___			}__			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId, slotFuture2.get().getAllocationId())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,p,see,flink,8089;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,job,master,id,job,master,id,job,master,id,generate,final,string,job,master,address,foobar,final,completable,future,allocation,id,allocation,id,future,new,completable,future,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,slot,pool,start,job,master,id,job,master,address,final,slot,pool,gateway,slot,pool,gateway,slot,pool,get,self,gateway,slot,pool,gateway,class,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,slot,pool,gateway,connect,to,resource,manager,resource,manager,gateway,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,final,allocation,id,allocation,id,allocation,id,future,get,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id,slot,future2,get,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1515588319;Tests that unused offered slots are directly used to fulfill pending slot_requests.__<p>See FLINK-8089;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final JobMasterId jobMasterId = JobMasterId.generate()__		final String jobMasterAddress = "foobar"__		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__		final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			slotPool.start(jobMasterId, jobMasterAddress)___			final SlotPoolGateway slotPoolGateway = slotPool.getSelfGateway(SlotPoolGateway.class)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			slotPoolGateway.connectToResourceManager(resourceManagerGateway)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			_			final AllocationID allocationId = allocationIdFuture.get()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)___			}__			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId, slotFuture2.get().getAllocationId())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,p,see,flink,8089;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,job,master,id,job,master,id,job,master,id,generate,final,string,job,master,address,foobar,final,completable,future,allocation,id,allocation,id,future,new,completable,future,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,slot,pool,start,job,master,id,job,master,address,final,slot,pool,gateway,slot,pool,gateway,slot,pool,get,self,gateway,slot,pool,gateway,class,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,slot,pool,gateway,connect,to,resource,manager,resource,manager,gateway,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,final,allocation,id,allocation,id,allocation,id,future,get,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id,slot,future2,get,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1515669170;Tests that unused offered slots are directly used to fulfill pending slot_requests.__<p>See FLINK-8089;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final JobMasterId jobMasterId = JobMasterId.generate()__		final String jobMasterAddress = "foobar"__		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__		final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			slotPool.start(jobMasterId, jobMasterAddress)___			final SlotPoolGateway slotPoolGateway = slotPool.getSelfGateway(SlotPoolGateway.class)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			slotPoolGateway.connectToResourceManager(resourceManagerGateway)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			_			final AllocationID allocationId = allocationIdFuture.get()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)___			}__			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId, slotFuture2.get().getAllocationId())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,p,see,flink,8089;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,job,master,id,job,master,id,job,master,id,generate,final,string,job,master,address,foobar,final,completable,future,allocation,id,allocation,id,future,new,completable,future,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,slot,pool,start,job,master,id,job,master,address,final,slot,pool,gateway,slot,pool,gateway,slot,pool,get,self,gateway,slot,pool,gateway,class,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,slot,pool,gateway,connect,to,resource,manager,resource,manager,gateway,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,final,allocation,id,allocation,id,allocation,id,future,get,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id,slot,future2,get,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1518433170;Tests that unused offered slots are directly used to fulfill pending slot_requests.__<p>See FLINK-8089;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final JobMasterId jobMasterId = JobMasterId.generate()__		final String jobMasterAddress = "foobar"__		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__		final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			slotPool.start(jobMasterId, jobMasterAddress)___			final SlotPoolGateway slotPoolGateway = slotPool.getSelfGateway(SlotPoolGateway.class)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			slotPoolGateway.connectToResourceManager(resourceManagerGateway)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			_			final AllocationID allocationId = allocationIdFuture.get()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)___			}__			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId, slotFuture2.get().getAllocationId())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,p,see,flink,8089;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,job,master,id,job,master,id,job,master,id,generate,final,string,job,master,address,foobar,final,completable,future,allocation,id,allocation,id,future,new,completable,future,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,slot,pool,start,job,master,id,job,master,address,final,slot,pool,gateway,slot,pool,gateway,slot,pool,get,self,gateway,slot,pool,gateway,class,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,slot,pool,gateway,connect,to,resource,manager,resource,manager,gateway,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,final,allocation,id,allocation,id,allocation,id,future,get,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id,slot,future2,get,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1518434692;Tests that unused offered slots are directly used to fulfill pending slot_requests.__<p>See FLINK-8089;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			_			final AllocationID allocationId = allocationIdFuture.get()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)___			}__			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId, slotFuture2.get().getAllocationId())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,p,see,flink,8089;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,allocation,id,allocation,id,future,new,completable,future,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,final,allocation,id,allocation,id,allocation,id,future,get,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id,slot,future2,get,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1518680774;Tests that unused offered slots are directly used to fulfill pending slot_requests.__<p>See FLINK-8089;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			_			final AllocationID allocationId = allocationIdFuture.get()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)___			}__			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId, slotFuture2.get().getAllocationId())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,p,see,flink,8089;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,allocation,id,allocation,id,future,new,completable,future,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,final,allocation,id,allocation,id,allocation,id,future,get,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id,slot,future2,get,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1518680775;Tests that unused offered slots are directly used to fulfill pending slot_requests.__<p>See FLINK-8089;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			_			final AllocationID allocationId = allocationIdFuture.get()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)___			}__			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId, slotFuture2.get().getAllocationId())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,p,see,flink,8089;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,allocation,id,allocation,id,future,new,completable,future,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,final,allocation,id,allocation,id,allocation,id,future,get,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id,slot,future2,get,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1518945174;Tests that unused offered slots are directly used to fulfill pending slot_requests.__<p>See FLINK-8089;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			_			final AllocationID allocationId = allocationIdFuture.get()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)___			}__			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId, slotFuture2.get().getAllocationId())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,p,see,flink,8089;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,allocation,id,allocation,id,future,new,completable,future,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,final,allocation,id,allocation,id,allocation,id,future,get,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id,slot,future2,get,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1519406526;Tests that unused offered slots are directly used to fulfill pending slot_requests.__<p>See FLINK-8089;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			_			final AllocationID allocationId = allocationIdFuture.get()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				ResourceProfile.UNKNOWN,_				Collections.emptyList(),_				true,_				timeout)___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)___			}__			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId, slotFuture2.get().getAllocationId())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,p,see,flink,8089;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,allocation,id,allocation,id,future,new,completable,future,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,final,allocation,id,allocation,id,allocation,id,future,get,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,resource,profile,unknown,collections,empty,list,true,timeout,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id,slot,future2,get,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1519655521;Tests that unused offered slots are directly used to fulfill pending slot_requests.__<p>See FLINK-8089;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId = allocationIdFuture.get()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)___			}__			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId, slotFuture2.get().getAllocationId())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,p,see,flink,8089;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,completable,future,allocation,id,allocation,id,future,new,completable,future,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id,allocation,id,future,get,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,slot,profile,no,requirements,true,timeout,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id,slot,future2,get,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1520961474;Tests that unused offered slots are directly used to fulfill pending slot_requests.__Moreover it tests that the old slot request is canceled__<p>See FLINK-8089, FLINK-8934;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(2)___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId()))___		final ArrayBlockingQueue<AllocationID> canceledAllocations = new ArrayBlockingQueue<>(2)__		resourceManagerGateway.setCancelSlotConsumer(canceledAllocations::offer)___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId1 = allocationIds.take()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId2 = allocationIds.take()___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)__			}__			assertEquals(allocationId1, canceledAllocations.take())___			final SlotOffer slotOffer = new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId1, slotFuture2.get().getAllocationId())___			_			assertEquals(allocationId2, canceledAllocations.take())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,moreover,it,tests,that,the,old,slot,request,is,canceled,p,see,flink,8089,flink,8934;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,ids,offer,slot,request,get,allocation,id,final,array,blocking,queue,allocation,id,canceled,allocations,new,array,blocking,queue,2,resource,manager,gateway,set,cancel,slot,consumer,canceled,allocations,offer,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id1,allocation,ids,take,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id2,allocation,ids,take,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,assert,equals,allocation,id1,canceled,allocations,take,final,slot,offer,slot,offer,new,slot,offer,allocation,id1,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id1,slot,future2,get,get,allocation,id,assert,equals,allocation,id2,canceled,allocations,take,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1521804757;Tests that unused offered slots are directly used to fulfill pending slot_requests.__Moreover it tests that the old slot request is canceled__<p>See FLINK-8089, FLINK-8934;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(2)___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId()))___		final ArrayBlockingQueue<AllocationID> canceledAllocations = new ArrayBlockingQueue<>(2)__		resourceManagerGateway.setCancelSlotConsumer(canceledAllocations::offer)___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId1 = allocationIds.take()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId2 = allocationIds.take()___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)__			}__			assertEquals(allocationId1, canceledAllocations.take())___			final SlotOffer slotOffer = new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId1, slotFuture2.get().getAllocationId())___			_			assertEquals(allocationId2, canceledAllocations.take())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,moreover,it,tests,that,the,old,slot,request,is,canceled,p,see,flink,8089,flink,8934;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,ids,offer,slot,request,get,allocation,id,final,array,blocking,queue,allocation,id,canceled,allocations,new,array,blocking,queue,2,resource,manager,gateway,set,cancel,slot,consumer,canceled,allocations,offer,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id1,allocation,ids,take,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id2,allocation,ids,take,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,assert,equals,allocation,id1,canceled,allocations,take,final,slot,offer,slot,offer,new,slot,offer,allocation,id1,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id1,slot,future2,get,get,allocation,id,assert,equals,allocation,id2,canceled,allocations,take,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1522681180;Tests that unused offered slots are directly used to fulfill pending slot_requests.__Moreover it tests that the old slot request is canceled__<p>See FLINK-8089, FLINK-8934;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(2)___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId()))___		final ArrayBlockingQueue<AllocationID> canceledAllocations = new ArrayBlockingQueue<>(2)__		resourceManagerGateway.setCancelSlotConsumer(canceledAllocations::offer)___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId1 = allocationIds.take()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId2 = allocationIds.take()___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)__			}__			assertEquals(allocationId1, canceledAllocations.take())___			final SlotOffer slotOffer = new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId1, slotFuture2.get().getAllocationId())___			_			assertEquals(allocationId2, canceledAllocations.take())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,moreover,it,tests,that,the,old,slot,request,is,canceled,p,see,flink,8089,flink,8934;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,ids,offer,slot,request,get,allocation,id,final,array,blocking,queue,allocation,id,canceled,allocations,new,array,blocking,queue,2,resource,manager,gateway,set,cancel,slot,consumer,canceled,allocations,offer,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id1,allocation,ids,take,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id2,allocation,ids,take,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,assert,equals,allocation,id1,canceled,allocations,take,final,slot,offer,slot,offer,new,slot,offer,allocation,id1,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id1,slot,future2,get,get,allocation,id,assert,equals,allocation,id2,canceled,allocations,take,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1525384685;Tests that unused offered slots are directly used to fulfill pending slot_requests.__Moreover it tests that the old slot request is canceled__<p>See FLINK-8089, FLINK-8934;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(2)___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId()))___		final ArrayBlockingQueue<AllocationID> canceledAllocations = new ArrayBlockingQueue<>(2)__		resourceManagerGateway.setCancelSlotConsumer(canceledAllocations::offer)___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId1 = allocationIds.take()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId2 = allocationIds.take()___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)__			}__			assertEquals(allocationId1, canceledAllocations.take())___			final SlotOffer slotOffer = new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId1, slotFuture2.get().getAllocationId())___			_			assertEquals(allocationId2, canceledAllocations.take())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,moreover,it,tests,that,the,old,slot,request,is,canceled,p,see,flink,8089,flink,8934;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,ids,offer,slot,request,get,allocation,id,final,array,blocking,queue,allocation,id,canceled,allocations,new,array,blocking,queue,2,resource,manager,gateway,set,cancel,slot,consumer,canceled,allocations,offer,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id1,allocation,ids,take,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id2,allocation,ids,take,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,assert,equals,allocation,id1,canceled,allocations,take,final,slot,offer,slot,offer,new,slot,offer,allocation,id1,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id1,slot,future2,get,get,allocation,id,assert,equals,allocation,id2,canceled,allocations,take,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1525961911;Tests that unused offered slots are directly used to fulfill pending slot_requests.__Moreover it tests that the old slot request is canceled__<p>See FLINK-8089, FLINK-8934;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(2)___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId()))___		final ArrayBlockingQueue<AllocationID> canceledAllocations = new ArrayBlockingQueue<>(2)__		resourceManagerGateway.setCancelSlotConsumer(canceledAllocations::offer)___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId1 = allocationIds.take()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId2 = allocationIds.take()___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)__			}__			assertEquals(allocationId1, canceledAllocations.take())___			final SlotOffer slotOffer = new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId1, slotFuture2.get().getAllocationId())___			_			assertEquals(allocationId2, canceledAllocations.take())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,moreover,it,tests,that,the,old,slot,request,is,canceled,p,see,flink,8089,flink,8934;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,ids,offer,slot,request,get,allocation,id,final,array,blocking,queue,allocation,id,canceled,allocations,new,array,blocking,queue,2,resource,manager,gateway,set,cancel,slot,consumer,canceled,allocations,offer,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id1,allocation,ids,take,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id2,allocation,ids,take,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,assert,equals,allocation,id1,canceled,allocations,take,final,slot,offer,slot,offer,new,slot,offer,allocation,id1,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id1,slot,future2,get,get,allocation,id,assert,equals,allocation,id2,canceled,allocations,take,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1526494919;Tests that unused offered slots are directly used to fulfill pending slot_requests.__Moreover it tests that the old slot request is canceled__<p>See FLINK-8089, FLINK-8934;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(2)___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId()))___		final ArrayBlockingQueue<AllocationID> canceledAllocations = new ArrayBlockingQueue<>(2)__		resourceManagerGateway.setCancelSlotConsumer(canceledAllocations::offer)___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId1 = allocationIds.take()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId2 = allocationIds.take()___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)__			}__			assertEquals(allocationId1, canceledAllocations.take())___			final SlotOffer slotOffer = new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId1, slotFuture2.get().getAllocationId())___			_			assertEquals(allocationId2, canceledAllocations.take())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,moreover,it,tests,that,the,old,slot,request,is,canceled,p,see,flink,8089,flink,8934;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,ids,offer,slot,request,get,allocation,id,final,array,blocking,queue,allocation,id,canceled,allocations,new,array,blocking,queue,2,resource,manager,gateway,set,cancel,slot,consumer,canceled,allocations,offer,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id1,allocation,ids,take,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id2,allocation,ids,take,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,assert,equals,allocation,id1,canceled,allocations,take,final,slot,offer,slot,offer,new,slot,offer,allocation,id1,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id1,slot,future2,get,get,allocation,id,assert,equals,allocation,id2,canceled,allocations,take,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1529682304;Tests that unused offered slots are directly used to fulfill pending slot_requests.__Moreover it tests that the old slot request is canceled__<p>See FLINK-8089, FLINK-8934;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId)___		final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(2)___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId()))___		final ArrayBlockingQueue<AllocationID> canceledAllocations = new ArrayBlockingQueue<>(2)__		resourceManagerGateway.setCancelSlotConsumer(canceledAllocations::offer)___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId1 = allocationIds.take()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId2 = allocationIds.take()___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)__			}__			assertEquals(allocationId1, canceledAllocations.take())___			final SlotOffer slotOffer = new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId1, slotFuture2.get().getAllocationId())___			_			assertEquals(allocationId2, canceledAllocations.take())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,moreover,it,tests,that,the,old,slot,request,is,canceled,p,see,flink,8089,flink,8934;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,ids,offer,slot,request,get,allocation,id,final,array,blocking,queue,allocation,id,canceled,allocations,new,array,blocking,queue,2,resource,manager,gateway,set,cancel,slot,consumer,canceled,allocations,offer,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id1,allocation,ids,take,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id2,allocation,ids,take,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,assert,equals,allocation,id1,canceled,allocations,take,final,slot,offer,slot,offer,new,slot,offer,allocation,id1,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id1,slot,future2,get,get,allocation,id,assert,equals,allocation,id2,canceled,allocations,take,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1530104620;Tests that unused offered slots are directly used to fulfill pending slot_requests.__Moreover it tests that the old slot request is canceled__<p>See FLINK-8089, FLINK-8934;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId, LocationPreferenceSchedulingStrategy.getInstance())___		final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(2)___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId()))___		final ArrayBlockingQueue<AllocationID> canceledAllocations = new ArrayBlockingQueue<>(2)__		resourceManagerGateway.setCancelSlotConsumer(canceledAllocations::offer)___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId1 = allocationIds.take()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId2 = allocationIds.take()___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)__			}__			assertEquals(allocationId1, canceledAllocations.take())___			final SlotOffer slotOffer = new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId1, slotFuture2.get().getAllocationId())___			_			assertEquals(allocationId2, canceledAllocations.take())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,moreover,it,tests,that,the,old,slot,request,is,canceled,p,see,flink,8089,flink,8934;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,ids,offer,slot,request,get,allocation,id,final,array,blocking,queue,allocation,id,canceled,allocations,new,array,blocking,queue,2,resource,manager,gateway,set,cancel,slot,consumer,canceled,allocations,offer,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id1,allocation,ids,take,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id2,allocation,ids,take,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,assert,equals,allocation,id1,canceled,allocations,take,final,slot,offer,slot,offer,new,slot,offer,allocation,id1,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id1,slot,future2,get,get,allocation,id,assert,equals,allocation,id2,canceled,allocations,take,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1537192317;Tests that unused offered slots are directly used to fulfill pending slot_requests.__Moreover it tests that the old slot request is canceled__<p>See FLINK-8089, FLINK-8934;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId, LocationPreferenceSchedulingStrategy.getInstance())___		final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(2)___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId()))___		final ArrayBlockingQueue<AllocationID> canceledAllocations = new ArrayBlockingQueue<>(2)__		resourceManagerGateway.setCancelSlotConsumer(canceledAllocations::offer)___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId1 = allocationIds.take()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId2 = allocationIds.take()___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)__			}__			assertEquals(allocationId1, canceledAllocations.take())___			final SlotOffer slotOffer = new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId1, slotFuture2.get().getAllocationId())___			_			assertEquals(allocationId2, canceledAllocations.take())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,moreover,it,tests,that,the,old,slot,request,is,canceled,p,see,flink,8089,flink,8934;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,ids,offer,slot,request,get,allocation,id,final,array,blocking,queue,allocation,id,canceled,allocations,new,array,blocking,queue,2,resource,manager,gateway,set,cancel,slot,consumer,canceled,allocations,offer,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id1,allocation,ids,take,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id2,allocation,ids,take,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,assert,equals,allocation,id1,canceled,allocations,take,final,slot,offer,slot,offer,new,slot,offer,allocation,id1,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id1,slot,future2,get,get,allocation,id,assert,equals,allocation,id2,canceled,allocations,take,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1550005040;Tests that unused offered slots are directly used to fulfill pending slot_requests.__Moreover it tests that the old slot request is canceled__<p>See FLINK-8089, FLINK-8934;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId, LocationPreferenceSchedulingStrategy.getInstance())___		final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(2)___		resourceManagerGateway.setRequestSlotConsumer(_			(SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId()))___		final ArrayBlockingQueue<AllocationID> canceledAllocations = new ArrayBlockingQueue<>(2)__		resourceManagerGateway.setCancelSlotConsumer(canceledAllocations::offer)___		final SlotRequestId slotRequestId1 = new SlotRequestId()__		final SlotRequestId slotRequestId2 = new SlotRequestId()___		try {_			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = slotPoolGateway.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId1 = allocationIds.take()___			CompletableFuture<LogicalSlot> slotFuture2 = slotPoolGateway.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId2 = allocationIds.take()___			slotPoolGateway.releaseSlot(slotRequestId1, null, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)__			}__			assertEquals(allocationId1, canceledAllocations.take())___			final SlotOffer slotOffer = new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN)___			slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get()___			assertTrue(slotPoolGateway.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer).get())___			_			assertEquals(allocationId1, slotFuture2.get().getAllocationId())___			_			assertEquals(allocationId2, canceledAllocations.take())__		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,moreover,it,tests,that,the,old,slot,request,is,canceled,p,see,flink,8089,flink,8934;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,ids,offer,slot,request,get,allocation,id,final,array,blocking,queue,allocation,id,canceled,allocations,new,array,blocking,queue,2,resource,manager,gateway,set,cancel,slot,consumer,canceled,allocations,offer,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,try,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,slot,pool,gateway,allocate,slot,slot,request,id1,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id1,allocation,ids,take,completable,future,logical,slot,slot,future2,slot,pool,gateway,allocate,slot,slot,request,id2,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id2,allocation,ids,take,slot,pool,gateway,release,slot,slot,request,id1,null,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,assert,equals,allocation,id1,canceled,allocations,take,final,slot,offer,slot,offer,new,slot,offer,allocation,id1,0,resource,profile,unknown,slot,pool,gateway,register,task,manager,task,manager,location,get,resource,id,get,assert,true,slot,pool,gateway,offer,slot,task,manager,location,task,manager,gateway,slot,offer,get,assert,equals,allocation,id1,slot,future2,get,get,allocation,id,assert,equals,allocation,id2,canceled,allocations,take,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception;1550220073;Tests that unused offered slots are directly used to fulfill pending slot_requests.__Moreover it tests that the old slot request is canceled__<p>See FLINK-8089, FLINK-8934;@Test_	public void testFulfillingSlotRequestsWithUnusedOfferedSlots() throws Exception {__		try (SlotPoolImpl slotPool = new SlotPoolImpl(jobId)) {_			final ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(_				(SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId()))__			final ArrayBlockingQueue<AllocationID> canceledAllocations = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setCancelSlotConsumer(canceledAllocations::offer)__			final SlotRequestId slotRequestId1 = new SlotRequestId()__			final SlotRequestId slotRequestId2 = new SlotRequestId()__			setupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor)__			final Scheduler scheduler = setupScheduler(slotPool, mainThreadExecutor)___			final ScheduledUnit scheduledUnit = new ScheduledUnit(_				new JobVertexID(),_				null,_				null)___			CompletableFuture<LogicalSlot> slotFuture1 = scheduler.allocateSlot(_				slotRequestId1,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId1 = allocationIds.take()___			CompletableFuture<LogicalSlot> slotFuture2 = scheduler.allocateSlot(_				slotRequestId2,_				scheduledUnit,_				SlotProfile.noRequirements(),_				true,_				timeout)___			_			final AllocationID allocationId2 = allocationIds.take()___			slotPool.releaseSlot(slotRequestId1, null)___			try {_				_				slotFuture1.get()__				fail("The first slot future should have failed because it was cancelled.")__			} catch (ExecutionException ee) {_				_				assertTrue(ExceptionUtils.stripExecutionException(ee) instanceof FlinkException)__			}__			assertEquals(allocationId1, canceledAllocations.take())___			final SlotOffer slotOffer = new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN)___			slotPool.registerTaskManager(taskManagerLocation.getResourceID())___			assertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer))___			_			assertEquals(allocationId1, slotFuture2.get().getAllocationId())___			_			assertEquals(allocationId2, canceledAllocations.take())__		}_	};tests,that,unused,offered,slots,are,directly,used,to,fulfill,pending,slot,requests,moreover,it,tests,that,the,old,slot,request,is,canceled,p,see,flink,8089,flink,8934;test,public,void,test,fulfilling,slot,requests,with,unused,offered,slots,throws,exception,try,slot,pool,impl,slot,pool,new,slot,pool,impl,job,id,final,array,blocking,queue,allocation,id,allocation,ids,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,slot,request,slot,request,allocation,ids,offer,slot,request,get,allocation,id,final,array,blocking,queue,allocation,id,canceled,allocations,new,array,blocking,queue,2,resource,manager,gateway,set,cancel,slot,consumer,canceled,allocations,offer,final,slot,request,id,slot,request,id1,new,slot,request,id,final,slot,request,id,slot,request,id2,new,slot,request,id,setup,slot,pool,slot,pool,resource,manager,gateway,main,thread,executor,final,scheduler,scheduler,setup,scheduler,slot,pool,main,thread,executor,final,scheduled,unit,scheduled,unit,new,scheduled,unit,new,job,vertex,id,null,null,completable,future,logical,slot,slot,future1,scheduler,allocate,slot,slot,request,id1,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id1,allocation,ids,take,completable,future,logical,slot,slot,future2,scheduler,allocate,slot,slot,request,id2,scheduled,unit,slot,profile,no,requirements,true,timeout,final,allocation,id,allocation,id2,allocation,ids,take,slot,pool,release,slot,slot,request,id1,null,try,slot,future1,get,fail,the,first,slot,future,should,have,failed,because,it,was,cancelled,catch,execution,exception,ee,assert,true,exception,utils,strip,execution,exception,ee,instanceof,flink,exception,assert,equals,allocation,id1,canceled,allocations,take,final,slot,offer,slot,offer,new,slot,offer,allocation,id1,0,resource,profile,unknown,slot,pool,register,task,manager,task,manager,location,get,resource,id,assert,true,slot,pool,offer,slot,task,manager,location,task,manager,gateway,slot,offer,assert,equals,allocation,id1,slot,future2,get,get,allocation,id,assert,equals,allocation,id2,canceled,allocations,take
SlotPoolTest -> @Test 	public void testFailingAllocationFailsPendingSlotRequests() throws Exception;1537192317;Tests that failing an allocation fails the pending slot request;@Test_	public void testFailingAllocationFailsPendingSlotRequests() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId, LocationPreferenceSchedulingStrategy.getInstance())___		try {_			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			resourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))__			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final CompletableFuture<LogicalSlot> slotFuture = allocateSlot(slotPoolGateway, new SlotRequestId())___			final AllocationID allocationId = allocationIdFuture.get()___			assertThat(slotFuture.isDone(), is(false))___			final FlinkException cause = new FlinkException("Fail pending slot request failure.")__			final CompletableFuture<SerializableOptional<ResourceID>> responseFuture = slotPoolGateway.failAllocation(allocationId, cause)___			assertThat(responseFuture.get().isPresent(), is(false))___			try {_				slotFuture.get()__				fail("Expected a slot allocation failure.")__			} catch (ExecutionException ee) {_				assertThat(ExceptionUtils.stripExecutionException(ee), equalTo(cause))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,failing,an,allocation,fails,the,pending,slot,request;test,public,void,test,failing,allocation,fails,pending,slot,requests,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,try,final,completable,future,allocation,id,allocation,id,future,new,completable,future,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,completable,future,logical,slot,slot,future,allocate,slot,slot,pool,gateway,new,slot,request,id,final,allocation,id,allocation,id,allocation,id,future,get,assert,that,slot,future,is,done,is,false,final,flink,exception,cause,new,flink,exception,fail,pending,slot,request,failure,final,completable,future,serializable,optional,resource,id,response,future,slot,pool,gateway,fail,allocation,allocation,id,cause,assert,that,response,future,get,is,present,is,false,try,slot,future,get,fail,expected,a,slot,allocation,failure,catch,execution,exception,ee,assert,that,exception,utils,strip,execution,exception,ee,equal,to,cause,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFailingAllocationFailsPendingSlotRequests() throws Exception;1550005040;Tests that failing an allocation fails the pending slot request;@Test_	public void testFailingAllocationFailsPendingSlotRequests() throws Exception {_		final SlotPool slotPool = new SlotPool(rpcService, jobId, LocationPreferenceSchedulingStrategy.getInstance())___		try {_			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			resourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))__			final SlotPoolGateway slotPoolGateway = setupSlotPool(slotPool, resourceManagerGateway)___			final CompletableFuture<LogicalSlot> slotFuture = allocateSlot(slotPoolGateway, new SlotRequestId())___			final AllocationID allocationId = allocationIdFuture.get()___			assertThat(slotFuture.isDone(), is(false))___			final FlinkException cause = new FlinkException("Fail pending slot request failure.")__			final CompletableFuture<SerializableOptional<ResourceID>> responseFuture = slotPoolGateway.failAllocation(allocationId, cause)___			assertThat(responseFuture.get().isPresent(), is(false))___			try {_				slotFuture.get()__				fail("Expected a slot allocation failure.")__			} catch (ExecutionException ee) {_				assertThat(ExceptionUtils.stripExecutionException(ee), equalTo(cause))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(slotPool, timeout)__		}_	};tests,that,failing,an,allocation,fails,the,pending,slot,request;test,public,void,test,failing,allocation,fails,pending,slot,requests,throws,exception,final,slot,pool,slot,pool,new,slot,pool,rpc,service,job,id,location,preference,scheduling,strategy,get,instance,try,final,completable,future,allocation,id,allocation,id,future,new,completable,future,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,slot,pool,gateway,slot,pool,gateway,setup,slot,pool,slot,pool,resource,manager,gateway,final,completable,future,logical,slot,slot,future,allocate,slot,slot,pool,gateway,new,slot,request,id,final,allocation,id,allocation,id,allocation,id,future,get,assert,that,slot,future,is,done,is,false,final,flink,exception,cause,new,flink,exception,fail,pending,slot,request,failure,final,completable,future,serializable,optional,resource,id,response,future,slot,pool,gateway,fail,allocation,allocation,id,cause,assert,that,response,future,get,is,present,is,false,try,slot,future,get,fail,expected,a,slot,allocation,failure,catch,execution,exception,ee,assert,that,exception,utils,strip,execution,exception,ee,equal,to,cause,finally,rpc,utils,terminate,rpc,endpoint,slot,pool,timeout
SlotPoolTest -> @Test 	public void testFailingAllocationFailsPendingSlotRequests() throws Exception;1550220073;Tests that failing an allocation fails the pending slot request;@Test_	public void testFailingAllocationFailsPendingSlotRequests() throws Exception {__		try (SlotPoolImpl slotPool = new SlotPoolImpl(jobId)) {_			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			resourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			setupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor)__			Scheduler scheduler = setupScheduler(slotPool, mainThreadExecutor)___			final CompletableFuture<LogicalSlot> slotFuture = allocateSlot(scheduler, new SlotRequestId())___			final AllocationID allocationId = allocationIdFuture.get()___			assertThat(slotFuture.isDone(), is(false))___			final FlinkException cause = new FlinkException("Fail pending slot request failure.")__			final Optional<ResourceID> responseFuture = slotPool.failAllocation(allocationId, cause)___			assertThat(responseFuture.isPresent(), is(false))___			try {_				slotFuture.get()__				fail("Expected a slot allocation failure.")__			} catch (ExecutionException ee) {_				assertThat(ExceptionUtils.stripExecutionException(ee), equalTo(cause))__			}_		}_	};tests,that,failing,an,allocation,fails,the,pending,slot,request;test,public,void,test,failing,allocation,fails,pending,slot,requests,throws,exception,try,slot,pool,impl,slot,pool,new,slot,pool,impl,job,id,final,completable,future,allocation,id,allocation,id,future,new,completable,future,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,setup,slot,pool,slot,pool,resource,manager,gateway,main,thread,executor,scheduler,scheduler,setup,scheduler,slot,pool,main,thread,executor,final,completable,future,logical,slot,slot,future,allocate,slot,scheduler,new,slot,request,id,final,allocation,id,allocation,id,allocation,id,future,get,assert,that,slot,future,is,done,is,false,final,flink,exception,cause,new,flink,exception,fail,pending,slot,request,failure,final,optional,resource,id,response,future,slot,pool,fail,allocation,allocation,id,cause,assert,that,response,future,is,present,is,false,try,slot,future,get,fail,expected,a,slot,allocation,failure,catch,execution,exception,ee,assert,that,exception,utils,strip,execution,exception,ee,equal,to,cause
