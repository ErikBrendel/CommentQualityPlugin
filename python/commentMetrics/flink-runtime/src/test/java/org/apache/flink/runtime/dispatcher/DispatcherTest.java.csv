# id;timestamp;commentText;codeText;commentWords;codeWords
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws Exception;1536954663;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws Exception;1547736239;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws Exception;1548322471;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws Exception;1548350146;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws Exception;1548846699;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws Exception;1548866156;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws Exception;1549360057;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws Exception;1549824946;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws Exception;1550005040;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testBlockingJobManagerRunner() throws Exception;1536954663;Tests that a blocking {@link JobManagerRunner} creation, e.g. due to blocking FileSystem access,_does not block the {@link Dispatcher}.__<p>See FLINK-10314;@Test_	public void testBlockingJobManagerRunner() throws Exception {_		final OneShotLatch jobManagerRunnerCreationLatch = new OneShotLatch()__		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(jobManagerRunnerCreationLatch::await))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		final CompletableFuture<Collection<String>> metricQueryServicePathsFuture = dispatcherGateway.requestMetricQueryServicePaths(Time.seconds(5L))___		assertThat(metricQueryServicePathsFuture.get(), is(empty()))___		assertThat(submissionFuture.isDone(), is(false))___		jobManagerRunnerCreationLatch.trigger()___		submissionFuture.get()__	};tests,that,a,blocking,link,job,manager,runner,creation,e,g,due,to,blocking,file,system,access,does,not,block,the,link,dispatcher,p,see,flink,10314;test,public,void,test,blocking,job,manager,runner,throws,exception,final,one,shot,latch,job,manager,runner,creation,latch,new,one,shot,latch,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,job,manager,runner,creation,latch,await,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,final,completable,future,collection,string,metric,query,service,paths,future,dispatcher,gateway,request,metric,query,service,paths,time,seconds,5l,assert,that,metric,query,service,paths,future,get,is,empty,assert,that,submission,future,is,done,is,false,job,manager,runner,creation,latch,trigger,submission,future,get
DispatcherTest -> @Test 	public void testBlockingJobManagerRunner() throws Exception;1547736239;Tests that a blocking {@link JobManagerRunner} creation, e.g. due to blocking FileSystem access,_does not block the {@link Dispatcher}.__<p>See FLINK-10314;@Test_	public void testBlockingJobManagerRunner() throws Exception {_		final OneShotLatch jobManagerRunnerCreationLatch = new OneShotLatch()__		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(jobManagerRunnerCreationLatch::await))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		final CompletableFuture<Collection<String>> metricQueryServicePathsFuture = dispatcherGateway.requestMetricQueryServicePaths(Time.seconds(5L))___		assertThat(metricQueryServicePathsFuture.get(), is(empty()))___		assertThat(submissionFuture.isDone(), is(false))___		jobManagerRunnerCreationLatch.trigger()___		submissionFuture.get()__	};tests,that,a,blocking,link,job,manager,runner,creation,e,g,due,to,blocking,file,system,access,does,not,block,the,link,dispatcher,p,see,flink,10314;test,public,void,test,blocking,job,manager,runner,throws,exception,final,one,shot,latch,job,manager,runner,creation,latch,new,one,shot,latch,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,job,manager,runner,creation,latch,await,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,final,completable,future,collection,string,metric,query,service,paths,future,dispatcher,gateway,request,metric,query,service,paths,time,seconds,5l,assert,that,metric,query,service,paths,future,get,is,empty,assert,that,submission,future,is,done,is,false,job,manager,runner,creation,latch,trigger,submission,future,get
DispatcherTest -> @Test 	public void testBlockingJobManagerRunner() throws Exception;1548322471;Tests that a blocking {@link JobManagerRunner} creation, e.g. due to blocking FileSystem access,_does not block the {@link Dispatcher}.__<p>See FLINK-10314;@Test_	public void testBlockingJobManagerRunner() throws Exception {_		final OneShotLatch jobManagerRunnerCreationLatch = new OneShotLatch()__		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(jobManagerRunnerCreationLatch::await))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		final CompletableFuture<Collection<String>> metricQueryServicePathsFuture = dispatcherGateway.requestMetricQueryServicePaths(Time.seconds(5L))___		assertThat(metricQueryServicePathsFuture.get(), is(empty()))___		assertThat(submissionFuture.isDone(), is(false))___		jobManagerRunnerCreationLatch.trigger()___		submissionFuture.get()__	};tests,that,a,blocking,link,job,manager,runner,creation,e,g,due,to,blocking,file,system,access,does,not,block,the,link,dispatcher,p,see,flink,10314;test,public,void,test,blocking,job,manager,runner,throws,exception,final,one,shot,latch,job,manager,runner,creation,latch,new,one,shot,latch,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,job,manager,runner,creation,latch,await,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,final,completable,future,collection,string,metric,query,service,paths,future,dispatcher,gateway,request,metric,query,service,paths,time,seconds,5l,assert,that,metric,query,service,paths,future,get,is,empty,assert,that,submission,future,is,done,is,false,job,manager,runner,creation,latch,trigger,submission,future,get
DispatcherTest -> @Test 	public void testBlockingJobManagerRunner() throws Exception;1548350146;Tests that a blocking {@link JobManagerRunner} creation, e.g. due to blocking FileSystem access,_does not block the {@link Dispatcher}.__<p>See FLINK-10314;@Test_	public void testBlockingJobManagerRunner() throws Exception {_		final OneShotLatch jobManagerRunnerCreationLatch = new OneShotLatch()__		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(jobManagerRunnerCreationLatch::await))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		final CompletableFuture<Collection<String>> metricQueryServicePathsFuture = dispatcherGateway.requestMetricQueryServicePaths(Time.seconds(5L))___		assertThat(metricQueryServicePathsFuture.get(), is(empty()))___		assertThat(submissionFuture.isDone(), is(false))___		jobManagerRunnerCreationLatch.trigger()___		submissionFuture.get()__	};tests,that,a,blocking,link,job,manager,runner,creation,e,g,due,to,blocking,file,system,access,does,not,block,the,link,dispatcher,p,see,flink,10314;test,public,void,test,blocking,job,manager,runner,throws,exception,final,one,shot,latch,job,manager,runner,creation,latch,new,one,shot,latch,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,job,manager,runner,creation,latch,await,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,final,completable,future,collection,string,metric,query,service,paths,future,dispatcher,gateway,request,metric,query,service,paths,time,seconds,5l,assert,that,metric,query,service,paths,future,get,is,empty,assert,that,submission,future,is,done,is,false,job,manager,runner,creation,latch,trigger,submission,future,get
DispatcherTest -> @Test 	public void testBlockingJobManagerRunner() throws Exception;1548846699;Tests that a blocking {@link JobManagerRunner} creation, e.g. due to blocking FileSystem access,_does not block the {@link Dispatcher}.__<p>See FLINK-10314;@Test_	public void testBlockingJobManagerRunner() throws Exception {_		final OneShotLatch jobManagerRunnerCreationLatch = new OneShotLatch()__		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(jobManagerRunnerCreationLatch::await))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		final CompletableFuture<Collection<String>> metricQueryServicePathsFuture = dispatcherGateway.requestMetricQueryServicePaths(Time.seconds(5L))___		assertThat(metricQueryServicePathsFuture.get(), is(empty()))___		assertThat(submissionFuture.isDone(), is(false))___		jobManagerRunnerCreationLatch.trigger()___		submissionFuture.get()__	};tests,that,a,blocking,link,job,manager,runner,creation,e,g,due,to,blocking,file,system,access,does,not,block,the,link,dispatcher,p,see,flink,10314;test,public,void,test,blocking,job,manager,runner,throws,exception,final,one,shot,latch,job,manager,runner,creation,latch,new,one,shot,latch,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,job,manager,runner,creation,latch,await,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,final,completable,future,collection,string,metric,query,service,paths,future,dispatcher,gateway,request,metric,query,service,paths,time,seconds,5l,assert,that,metric,query,service,paths,future,get,is,empty,assert,that,submission,future,is,done,is,false,job,manager,runner,creation,latch,trigger,submission,future,get
DispatcherTest -> @Test 	public void testBlockingJobManagerRunner() throws Exception;1548866156;Tests that a blocking {@link JobManagerRunner} creation, e.g. due to blocking FileSystem access,_does not block the {@link Dispatcher}.__<p>See FLINK-10314;@Test_	public void testBlockingJobManagerRunner() throws Exception {_		final OneShotLatch jobManagerRunnerCreationLatch = new OneShotLatch()__		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(jobManagerRunnerCreationLatch::await))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		final CompletableFuture<Collection<String>> metricQueryServicePathsFuture = dispatcherGateway.requestMetricQueryServicePaths(Time.seconds(5L))___		assertThat(metricQueryServicePathsFuture.get(), is(empty()))___		assertThat(submissionFuture.isDone(), is(false))___		jobManagerRunnerCreationLatch.trigger()___		submissionFuture.get()__	};tests,that,a,blocking,link,job,manager,runner,creation,e,g,due,to,blocking,file,system,access,does,not,block,the,link,dispatcher,p,see,flink,10314;test,public,void,test,blocking,job,manager,runner,throws,exception,final,one,shot,latch,job,manager,runner,creation,latch,new,one,shot,latch,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,job,manager,runner,creation,latch,await,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,final,completable,future,collection,string,metric,query,service,paths,future,dispatcher,gateway,request,metric,query,service,paths,time,seconds,5l,assert,that,metric,query,service,paths,future,get,is,empty,assert,that,submission,future,is,done,is,false,job,manager,runner,creation,latch,trigger,submission,future,get
DispatcherTest -> @Test 	public void testBlockingJobManagerRunner() throws Exception;1549360057;Tests that a blocking {@link JobManagerRunner} creation, e.g. due to blocking FileSystem access,_does not block the {@link Dispatcher}.__<p>See FLINK-10314;@Test_	public void testBlockingJobManagerRunner() throws Exception {_		final OneShotLatch jobManagerRunnerCreationLatch = new OneShotLatch()__		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(jobManagerRunnerCreationLatch::await))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		final CompletableFuture<Collection<String>> metricQueryServicePathsFuture = dispatcherGateway.requestMetricQueryServicePaths(Time.seconds(5L))___		assertThat(metricQueryServicePathsFuture.get(), is(empty()))___		assertThat(submissionFuture.isDone(), is(false))___		jobManagerRunnerCreationLatch.trigger()___		submissionFuture.get()__	};tests,that,a,blocking,link,job,manager,runner,creation,e,g,due,to,blocking,file,system,access,does,not,block,the,link,dispatcher,p,see,flink,10314;test,public,void,test,blocking,job,manager,runner,throws,exception,final,one,shot,latch,job,manager,runner,creation,latch,new,one,shot,latch,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,job,manager,runner,creation,latch,await,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,final,completable,future,collection,string,metric,query,service,paths,future,dispatcher,gateway,request,metric,query,service,paths,time,seconds,5l,assert,that,metric,query,service,paths,future,get,is,empty,assert,that,submission,future,is,done,is,false,job,manager,runner,creation,latch,trigger,submission,future,get
DispatcherTest -> @Test 	public void testBlockingJobManagerRunner() throws Exception;1549824946;Tests that a blocking {@link JobManagerRunner} creation, e.g. due to blocking FileSystem access,_does not block the {@link Dispatcher}.__<p>See FLINK-10314;@Test_	public void testBlockingJobManagerRunner() throws Exception {_		final OneShotLatch jobManagerRunnerCreationLatch = new OneShotLatch()__		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(jobManagerRunnerCreationLatch::await))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		final CompletableFuture<Collection<String>> metricQueryServicePathsFuture = dispatcherGateway.requestMetricQueryServicePaths(Time.seconds(5L))___		assertThat(metricQueryServicePathsFuture.get(), is(empty()))___		assertThat(submissionFuture.isDone(), is(false))___		jobManagerRunnerCreationLatch.trigger()___		submissionFuture.get()__	};tests,that,a,blocking,link,job,manager,runner,creation,e,g,due,to,blocking,file,system,access,does,not,block,the,link,dispatcher,p,see,flink,10314;test,public,void,test,blocking,job,manager,runner,throws,exception,final,one,shot,latch,job,manager,runner,creation,latch,new,one,shot,latch,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,job,manager,runner,creation,latch,await,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,final,completable,future,collection,string,metric,query,service,paths,future,dispatcher,gateway,request,metric,query,service,paths,time,seconds,5l,assert,that,metric,query,service,paths,future,get,is,empty,assert,that,submission,future,is,done,is,false,job,manager,runner,creation,latch,trigger,submission,future,get
DispatcherTest -> @Test 	public void testBlockingJobManagerRunner() throws Exception;1550005040;Tests that a blocking {@link JobManagerRunner} creation, e.g. due to blocking FileSystem access,_does not block the {@link Dispatcher}.__<p>See FLINK-10314;@Test_	public void testBlockingJobManagerRunner() throws Exception {_		final OneShotLatch jobManagerRunnerCreationLatch = new OneShotLatch()__		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(jobManagerRunnerCreationLatch::await))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		final CompletableFuture<Collection<String>> metricQueryServicePathsFuture = dispatcherGateway.requestMetricQueryServicePaths(Time.seconds(5L))___		assertThat(metricQueryServicePathsFuture.get(), is(empty()))___		assertThat(submissionFuture.isDone(), is(false))___		jobManagerRunnerCreationLatch.trigger()___		submissionFuture.get()__	};tests,that,a,blocking,link,job,manager,runner,creation,e,g,due,to,blocking,file,system,access,does,not,block,the,link,dispatcher,p,see,flink,10314;test,public,void,test,blocking,job,manager,runner,throws,exception,final,one,shot,latch,job,manager,runner,creation,latch,new,one,shot,latch,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,job,manager,runner,creation,latch,await,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,final,completable,future,collection,string,metric,query,service,paths,future,dispatcher,gateway,request,metric,query,service,paths,time,seconds,5l,assert,that,metric,query,service,paths,future,get,is,empty,assert,that,submission,future,is,done,is,false,job,manager,runner,creation,latch,trigger,submission,future,get
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1522251199;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1522339662;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1522339663;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1522339663;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1522681180;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1526334048;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1526336566;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1526494919;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1528982883;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1530292340;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1531921883;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1531921883;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1536930103;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1536954663;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1547736239;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1548322471;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1548350146;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1548846699;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1548866156;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1549360057;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1549824946;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception;1550005040;Tests that the {@link Dispatcher} terminates if it cannot recover jobs ids from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobIdRecoveryFailure() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final FlinkException testException = new FlinkException("Test exception")__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,ids,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,id,recovery,failure,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,flink,exception,test,exception,new,flink,exception,test,exception,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1522251199;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1522339662;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1522339663;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1522339663;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1522681180;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1526334048;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1526336566;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1526494919;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1528982883;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1530292340;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1531921883;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1531921883;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1536930103;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1536954663;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1547736239;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1548322471;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1548350146;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1548846699;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1548866156;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1549360057;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1549824946;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testFatalErrorAfterJobRecoveryFailure() throws Exception;1550005040;Tests that the {@link Dispatcher} terminates if it cannot recover jobs from_the {@link SubmittedJobGraphStore}. See FLINK-8943.;@Test_	public void testFatalErrorAfterJobRecoveryFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(jobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		submittedJobGraphStore.setRecoverJobGraphFunction(_			(JobID jobId, Map<JobID, SubmittedJobGraph> submittedJobs) -> {_				throw testException__			})___		electDispatcher()___		_		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,terminates,if,it,cannot,recover,jobs,from,the,link,submitted,job,graph,store,see,flink,8943;test,public,void,test,fatal,error,after,job,recovery,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,submitted,job,graph,store,set,recover,job,graph,function,job,id,job,id,map,job,id,submitted,job,graph,submitted,jobs,throw,test,exception,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1504472365;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()___		UUID expectedLeaderSessionId = UUID.randomUUID()__		CompletableFuture<UUID> leaderSessionIdFuture = new CompletableFuture<>()__		SubmittedJobGraphStore mockSubmittedJobGraphStore = mock(SubmittedJobGraphStore.class)__		TestingLeaderElectionService testingLeaderElectionService = new TestingLeaderElectionService() {_			@Override_			public void confirmLeaderSessionID(UUID leaderSessionId) {_				super.confirmLeaderSessionID(leaderSessionId)__				leaderSessionIdFuture.complete(leaderSessionId)__			}_		}___		haServices.setSubmittedJobGraphStore(mockSubmittedJobGraphStore)__		haServices.setDispatcherLeaderElectionService(testingLeaderElectionService)__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 1000L)__		final JobID jobId = new JobID()___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME,_			new Configuration(),_			haServices,_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			mock(JobManagerRunner.class),_			jobId)___		try {_			dispatcher.start()___			assertFalse(leaderSessionIdFuture.isDone())___			testingLeaderElectionService.isLeader(expectedLeaderSessionId)___			UUID actualLeaderSessionId = leaderSessionIdFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___			verify(mockSubmittedJobGraphStore, Mockito.timeout(timeout.toMilliseconds()).atLeast(1)).getJobIds()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,high,availability,services,ha,services,new,testing,high,availability,services,uuid,expected,leader,session,id,uuid,random,uuid,completable,future,uuid,leader,session,id,future,new,completable,future,submitted,job,graph,store,mock,submitted,job,graph,store,mock,submitted,job,graph,store,class,testing,leader,election,service,testing,leader,election,service,new,testing,leader,election,service,override,public,void,confirm,leader,session,id,uuid,leader,session,id,super,confirm,leader,session,id,leader,session,id,leader,session,id,future,complete,leader,session,id,ha,services,set,submitted,job,graph,store,mock,submitted,job,graph,store,ha,services,set,dispatcher,leader,election,service,testing,leader,election,service,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,1000l,final,job,id,job,id,new,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,mock,job,manager,runner,class,job,id,try,dispatcher,start,assert,false,leader,session,id,future,is,done,testing,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,leader,session,id,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,mock,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1504507704;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()___		UUID expectedLeaderSessionId = UUID.randomUUID()__		CompletableFuture<UUID> leaderSessionIdFuture = new CompletableFuture<>()__		SubmittedJobGraphStore mockSubmittedJobGraphStore = mock(SubmittedJobGraphStore.class)__		TestingLeaderElectionService testingLeaderElectionService = new TestingLeaderElectionService() {_			@Override_			public void confirmLeaderSessionID(UUID leaderSessionId) {_				super.confirmLeaderSessionID(leaderSessionId)__				leaderSessionIdFuture.complete(leaderSessionId)__			}_		}___		haServices.setSubmittedJobGraphStore(mockSubmittedJobGraphStore)__		haServices.setDispatcherLeaderElectionService(testingLeaderElectionService)__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 1000L)__		final JobID jobId = new JobID()___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME,_			new Configuration(),_			haServices,_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			mock(JobManagerRunner.class),_			jobId)___		try {_			dispatcher.start()___			assertFalse(leaderSessionIdFuture.isDone())___			testingLeaderElectionService.isLeader(expectedLeaderSessionId)___			UUID actualLeaderSessionId = leaderSessionIdFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___			verify(mockSubmittedJobGraphStore, Mockito.timeout(timeout.toMilliseconds()).atLeast(1)).getJobIds()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,high,availability,services,ha,services,new,testing,high,availability,services,uuid,expected,leader,session,id,uuid,random,uuid,completable,future,uuid,leader,session,id,future,new,completable,future,submitted,job,graph,store,mock,submitted,job,graph,store,mock,submitted,job,graph,store,class,testing,leader,election,service,testing,leader,election,service,new,testing,leader,election,service,override,public,void,confirm,leader,session,id,uuid,leader,session,id,super,confirm,leader,session,id,leader,session,id,leader,session,id,future,complete,leader,session,id,ha,services,set,submitted,job,graph,store,mock,submitted,job,graph,store,ha,services,set,dispatcher,leader,election,service,testing,leader,election,service,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,1000l,final,job,id,job,id,new,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,mock,job,manager,runner,class,job,id,try,dispatcher,start,assert,false,leader,session,id,future,is,done,testing,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,leader,session,id,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,mock,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1504607872;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()___		UUID expectedLeaderSessionId = UUID.randomUUID()__		CompletableFuture<UUID> leaderSessionIdFuture = new CompletableFuture<>()__		SubmittedJobGraphStore mockSubmittedJobGraphStore = mock(SubmittedJobGraphStore.class)__		TestingLeaderElectionService testingLeaderElectionService = new TestingLeaderElectionService() {_			@Override_			public void confirmLeaderSessionID(UUID leaderSessionId) {_				super.confirmLeaderSessionID(leaderSessionId)__				leaderSessionIdFuture.complete(leaderSessionId)__			}_		}___		haServices.setSubmittedJobGraphStore(mockSubmittedJobGraphStore)__		haServices.setDispatcherLeaderElectionService(testingLeaderElectionService)__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 1000L)__		final JobID jobId = new JobID()___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME,_			new Configuration(),_			haServices,_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			mock(JobManagerRunner.class),_			jobId)___		try {_			dispatcher.start()___			assertFalse(leaderSessionIdFuture.isDone())___			testingLeaderElectionService.isLeader(expectedLeaderSessionId)___			UUID actualLeaderSessionId = leaderSessionIdFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___			verify(mockSubmittedJobGraphStore, Mockito.timeout(timeout.toMilliseconds()).atLeast(1)).getJobIds()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,high,availability,services,ha,services,new,testing,high,availability,services,uuid,expected,leader,session,id,uuid,random,uuid,completable,future,uuid,leader,session,id,future,new,completable,future,submitted,job,graph,store,mock,submitted,job,graph,store,mock,submitted,job,graph,store,class,testing,leader,election,service,testing,leader,election,service,new,testing,leader,election,service,override,public,void,confirm,leader,session,id,uuid,leader,session,id,super,confirm,leader,session,id,leader,session,id,leader,session,id,future,complete,leader,session,id,ha,services,set,submitted,job,graph,store,mock,submitted,job,graph,store,ha,services,set,dispatcher,leader,election,service,testing,leader,election,service,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,1000l,final,job,id,job,id,new,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,mock,job,manager,runner,class,job,id,try,dispatcher,start,assert,false,leader,session,id,future,is,done,testing,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,leader,session,id,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,mock,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1505860453;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()___		UUID expectedLeaderSessionId = UUID.randomUUID()__		CompletableFuture<UUID> leaderSessionIdFuture = new CompletableFuture<>()__		SubmittedJobGraphStore mockSubmittedJobGraphStore = mock(SubmittedJobGraphStore.class)__		TestingLeaderElectionService testingLeaderElectionService = new TestingLeaderElectionService() {_			@Override_			public void confirmLeaderSessionID(UUID leaderSessionId) {_				super.confirmLeaderSessionID(leaderSessionId)__				leaderSessionIdFuture.complete(leaderSessionId)__			}_		}___		haServices.setSubmittedJobGraphStore(mockSubmittedJobGraphStore)__		haServices.setDispatcherLeaderElectionService(testingLeaderElectionService)__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 1000L)__		final JobID jobId = new JobID()___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME,_			new Configuration(),_			haServices,_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			mock(JobManagerRunner.class),_			jobId)___		try {_			dispatcher.start()___			assertFalse(leaderSessionIdFuture.isDone())___			testingLeaderElectionService.isLeader(expectedLeaderSessionId)___			UUID actualLeaderSessionId = leaderSessionIdFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___			verify(mockSubmittedJobGraphStore, Mockito.timeout(timeout.toMilliseconds()).atLeast(1)).getJobIds()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,high,availability,services,ha,services,new,testing,high,availability,services,uuid,expected,leader,session,id,uuid,random,uuid,completable,future,uuid,leader,session,id,future,new,completable,future,submitted,job,graph,store,mock,submitted,job,graph,store,mock,submitted,job,graph,store,class,testing,leader,election,service,testing,leader,election,service,new,testing,leader,election,service,override,public,void,confirm,leader,session,id,uuid,leader,session,id,super,confirm,leader,session,id,leader,session,id,leader,session,id,future,complete,leader,session,id,ha,services,set,submitted,job,graph,store,mock,submitted,job,graph,store,ha,services,set,dispatcher,leader,election,service,testing,leader,election,service,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,1000l,final,job,id,job,id,new,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,mock,job,manager,runner,class,job,id,try,dispatcher,start,assert,false,leader,session,id,future,is,done,testing,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,leader,session,id,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,mock,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1506553333;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()___		UUID expectedLeaderSessionId = UUID.randomUUID()__		CompletableFuture<UUID> leaderSessionIdFuture = new CompletableFuture<>()__		SubmittedJobGraphStore mockSubmittedJobGraphStore = mock(SubmittedJobGraphStore.class)__		TestingLeaderElectionService testingLeaderElectionService = new TestingLeaderElectionService() {_			@Override_			public void confirmLeaderSessionID(UUID leaderSessionId) {_				super.confirmLeaderSessionID(leaderSessionId)__				leaderSessionIdFuture.complete(leaderSessionId)__			}_		}___		haServices.setSubmittedJobGraphStore(mockSubmittedJobGraphStore)__		haServices.setDispatcherLeaderElectionService(testingLeaderElectionService)__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 1000L)__		final JobID jobId = new JobID()___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME,_			new Configuration(),_			haServices,_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			mock(JobManagerRunner.class),_			jobId)___		try {_			dispatcher.start()___			assertFalse(leaderSessionIdFuture.isDone())___			testingLeaderElectionService.isLeader(expectedLeaderSessionId)___			UUID actualLeaderSessionId = leaderSessionIdFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___			verify(mockSubmittedJobGraphStore, Mockito.timeout(timeout.toMilliseconds()).atLeast(1)).getJobIds()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,high,availability,services,ha,services,new,testing,high,availability,services,uuid,expected,leader,session,id,uuid,random,uuid,completable,future,uuid,leader,session,id,future,new,completable,future,submitted,job,graph,store,mock,submitted,job,graph,store,mock,submitted,job,graph,store,class,testing,leader,election,service,testing,leader,election,service,new,testing,leader,election,service,override,public,void,confirm,leader,session,id,uuid,leader,session,id,super,confirm,leader,session,id,leader,session,id,leader,session,id,future,complete,leader,session,id,ha,services,set,submitted,job,graph,store,mock,submitted,job,graph,store,ha,services,set,dispatcher,leader,election,service,testing,leader,election,service,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,1000l,final,job,id,job,id,new,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,mock,job,manager,runner,class,job,id,try,dispatcher,start,assert,false,leader,session,id,future,is,done,testing,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,leader,session,id,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,mock,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1507825825;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()___		UUID expectedLeaderSessionId = UUID.randomUUID()__		CompletableFuture<UUID> leaderSessionIdFuture = new CompletableFuture<>()__		SubmittedJobGraphStore mockSubmittedJobGraphStore = mock(SubmittedJobGraphStore.class)__		TestingLeaderElectionService testingLeaderElectionService = new TestingLeaderElectionService() {_			@Override_			public void confirmLeaderSessionID(UUID leaderSessionId) {_				super.confirmLeaderSessionID(leaderSessionId)__				leaderSessionIdFuture.complete(leaderSessionId)__			}_		}___		haServices.setSubmittedJobGraphStore(mockSubmittedJobGraphStore)__		haServices.setDispatcherLeaderElectionService(testingLeaderElectionService)__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 1000L)__		final JobID jobId = new JobID()___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME,_			new Configuration(),_			haServices,_			mock(ResourceManagerGateway.class),_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			mock(JobManagerRunner.class),_			jobId)___		try {_			dispatcher.start()___			assertFalse(leaderSessionIdFuture.isDone())___			testingLeaderElectionService.isLeader(expectedLeaderSessionId)___			UUID actualLeaderSessionId = leaderSessionIdFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___			verify(mockSubmittedJobGraphStore, Mockito.timeout(timeout.toMilliseconds()).atLeast(1)).getJobIds()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,high,availability,services,ha,services,new,testing,high,availability,services,uuid,expected,leader,session,id,uuid,random,uuid,completable,future,uuid,leader,session,id,future,new,completable,future,submitted,job,graph,store,mock,submitted,job,graph,store,mock,submitted,job,graph,store,class,testing,leader,election,service,testing,leader,election,service,new,testing,leader,election,service,override,public,void,confirm,leader,session,id,uuid,leader,session,id,super,confirm,leader,session,id,leader,session,id,leader,session,id,future,complete,leader,session,id,ha,services,set,submitted,job,graph,store,mock,submitted,job,graph,store,ha,services,set,dispatcher,leader,election,service,testing,leader,election,service,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,1000l,final,job,id,job,id,new,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,resource,manager,gateway,class,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,mock,job,manager,runner,class,job,id,try,dispatcher,start,assert,false,leader,session,id,future,is,done,testing,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,leader,session,id,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,mock,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1508235126;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()___		UUID expectedLeaderSessionId = UUID.randomUUID()__		CompletableFuture<UUID> leaderSessionIdFuture = new CompletableFuture<>()__		SubmittedJobGraphStore mockSubmittedJobGraphStore = mock(SubmittedJobGraphStore.class)__		TestingLeaderElectionService testingLeaderElectionService = new TestingLeaderElectionService() {_			@Override_			public void confirmLeaderSessionID(UUID leaderSessionId) {_				super.confirmLeaderSessionID(leaderSessionId)__				leaderSessionIdFuture.complete(leaderSessionId)__			}_		}___		haServices.setSubmittedJobGraphStore(mockSubmittedJobGraphStore)__		haServices.setDispatcherLeaderElectionService(testingLeaderElectionService)__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 1000L)__		final JobID jobId = new JobID()___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME + '_' + name.getMethodName(),_			new Configuration(),_			haServices,_			mock(ResourceManagerGateway.class),_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			mock(JobManagerRunner.class),_			jobId)___		try {_			dispatcher.start()___			assertFalse(leaderSessionIdFuture.isDone())___			testingLeaderElectionService.isLeader(expectedLeaderSessionId)___			UUID actualLeaderSessionId = leaderSessionIdFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___			verify(mockSubmittedJobGraphStore, Mockito.timeout(timeout.toMilliseconds()).atLeast(1)).getJobIds()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,high,availability,services,ha,services,new,testing,high,availability,services,uuid,expected,leader,session,id,uuid,random,uuid,completable,future,uuid,leader,session,id,future,new,completable,future,submitted,job,graph,store,mock,submitted,job,graph,store,mock,submitted,job,graph,store,class,testing,leader,election,service,testing,leader,election,service,new,testing,leader,election,service,override,public,void,confirm,leader,session,id,uuid,leader,session,id,super,confirm,leader,session,id,leader,session,id,leader,session,id,future,complete,leader,session,id,ha,services,set,submitted,job,graph,store,mock,submitted,job,graph,store,ha,services,set,dispatcher,leader,election,service,testing,leader,election,service,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,1000l,final,job,id,job,id,new,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,name,get,method,name,new,configuration,ha,services,mock,resource,manager,gateway,class,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,mock,job,manager,runner,class,job,id,try,dispatcher,start,assert,false,leader,session,id,future,is,done,testing,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,leader,session,id,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,mock,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1509547920;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()___		UUID expectedLeaderSessionId = UUID.randomUUID()__		CompletableFuture<UUID> leaderSessionIdFuture = new CompletableFuture<>()__		SubmittedJobGraphStore mockSubmittedJobGraphStore = mock(SubmittedJobGraphStore.class)__		TestingLeaderElectionService testingLeaderElectionService = new TestingLeaderElectionService() {_			@Override_			public void confirmLeaderSessionID(UUID leaderSessionId) {_				super.confirmLeaderSessionID(leaderSessionId)__				leaderSessionIdFuture.complete(leaderSessionId)__			}_		}___		haServices.setSubmittedJobGraphStore(mockSubmittedJobGraphStore)__		haServices.setDispatcherLeaderElectionService(testingLeaderElectionService)__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 1000L)__		final JobID jobId = new JobID()___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME + '_' + name.getMethodName(),_			new Configuration(),_			haServices,_			mock(ResourceManagerGateway.class),_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistryImpl.class),_			fatalErrorHandler,_			mock(JobManagerRunner.class),_			jobId)___		try {_			dispatcher.start()___			assertFalse(leaderSessionIdFuture.isDone())___			testingLeaderElectionService.isLeader(expectedLeaderSessionId)___			UUID actualLeaderSessionId = leaderSessionIdFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___			verify(mockSubmittedJobGraphStore, Mockito.timeout(timeout.toMilliseconds()).atLeast(1)).getJobIds()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,high,availability,services,ha,services,new,testing,high,availability,services,uuid,expected,leader,session,id,uuid,random,uuid,completable,future,uuid,leader,session,id,future,new,completable,future,submitted,job,graph,store,mock,submitted,job,graph,store,mock,submitted,job,graph,store,class,testing,leader,election,service,testing,leader,election,service,new,testing,leader,election,service,override,public,void,confirm,leader,session,id,uuid,leader,session,id,super,confirm,leader,session,id,leader,session,id,leader,session,id,future,complete,leader,session,id,ha,services,set,submitted,job,graph,store,mock,submitted,job,graph,store,ha,services,set,dispatcher,leader,election,service,testing,leader,election,service,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,1000l,final,job,id,job,id,new,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,name,get,method,name,new,configuration,ha,services,mock,resource,manager,gateway,class,mock,blob,server,class,heartbeat,services,mock,metric,registry,impl,class,fatal,error,handler,mock,job,manager,runner,class,job,id,try,dispatcher,start,assert,false,leader,session,id,future,is,done,testing,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,leader,session,id,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,mock,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1509547921;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()___		UUID expectedLeaderSessionId = UUID.randomUUID()__		CompletableFuture<UUID> leaderSessionIdFuture = new CompletableFuture<>()__		SubmittedJobGraphStore mockSubmittedJobGraphStore = mock(SubmittedJobGraphStore.class)__		TestingLeaderElectionService testingLeaderElectionService = new TestingLeaderElectionService() {_			@Override_			public void confirmLeaderSessionID(UUID leaderSessionId) {_				super.confirmLeaderSessionID(leaderSessionId)__				leaderSessionIdFuture.complete(leaderSessionId)__			}_		}___		haServices.setSubmittedJobGraphStore(mockSubmittedJobGraphStore)__		haServices.setDispatcherLeaderElectionService(testingLeaderElectionService)__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 1000L)__		final JobID jobId = new JobID()___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME + '_' + name.getMethodName(),_			new Configuration(),_			haServices,_			mock(ResourceManagerGateway.class),_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistryImpl.class),_			fatalErrorHandler,_			mock(JobManagerRunner.class),_			jobId)___		try {_			dispatcher.start()___			assertFalse(leaderSessionIdFuture.isDone())___			testingLeaderElectionService.isLeader(expectedLeaderSessionId)___			UUID actualLeaderSessionId = leaderSessionIdFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___			verify(mockSubmittedJobGraphStore, Mockito.timeout(timeout.toMilliseconds()).atLeast(1)).getJobIds()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,high,availability,services,ha,services,new,testing,high,availability,services,uuid,expected,leader,session,id,uuid,random,uuid,completable,future,uuid,leader,session,id,future,new,completable,future,submitted,job,graph,store,mock,submitted,job,graph,store,mock,submitted,job,graph,store,class,testing,leader,election,service,testing,leader,election,service,new,testing,leader,election,service,override,public,void,confirm,leader,session,id,uuid,leader,session,id,super,confirm,leader,session,id,leader,session,id,leader,session,id,future,complete,leader,session,id,ha,services,set,submitted,job,graph,store,mock,submitted,job,graph,store,ha,services,set,dispatcher,leader,election,service,testing,leader,election,service,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,1000l,final,job,id,job,id,new,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,name,get,method,name,new,configuration,ha,services,mock,resource,manager,gateway,class,mock,blob,server,class,heartbeat,services,mock,metric,registry,impl,class,fatal,error,handler,mock,job,manager,runner,class,job,id,try,dispatcher,start,assert,false,leader,session,id,future,is,done,testing,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,leader,session,id,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,mock,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1512061056;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()___		UUID expectedLeaderSessionId = UUID.randomUUID()__		CompletableFuture<UUID> leaderSessionIdFuture = new CompletableFuture<>()__		SubmittedJobGraphStore mockSubmittedJobGraphStore = mock(SubmittedJobGraphStore.class)__		TestingLeaderElectionService testingLeaderElectionService = new TestingLeaderElectionService() {_			@Override_			public void confirmLeaderSessionID(UUID leaderSessionId) {_				super.confirmLeaderSessionID(leaderSessionId)__				leaderSessionIdFuture.complete(leaderSessionId)__			}_		}___		haServices.setSubmittedJobGraphStore(mockSubmittedJobGraphStore)__		haServices.setDispatcherLeaderElectionService(testingLeaderElectionService)__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 1000L)__		final JobID jobId = new JobID()___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME + '_' + name.getMethodName(),_			new Configuration(),_			haServices,_			mock(ResourceManagerGateway.class),_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistryImpl.class),_			fatalErrorHandler,_			mock(JobManagerRunner.class),_			jobId)___		try {_			dispatcher.start()___			assertFalse(leaderSessionIdFuture.isDone())___			testingLeaderElectionService.isLeader(expectedLeaderSessionId)___			UUID actualLeaderSessionId = leaderSessionIdFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___			verify(mockSubmittedJobGraphStore, Mockito.timeout(timeout.toMilliseconds()).atLeast(1)).getJobIds()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,high,availability,services,ha,services,new,testing,high,availability,services,uuid,expected,leader,session,id,uuid,random,uuid,completable,future,uuid,leader,session,id,future,new,completable,future,submitted,job,graph,store,mock,submitted,job,graph,store,mock,submitted,job,graph,store,class,testing,leader,election,service,testing,leader,election,service,new,testing,leader,election,service,override,public,void,confirm,leader,session,id,uuid,leader,session,id,super,confirm,leader,session,id,leader,session,id,leader,session,id,future,complete,leader,session,id,ha,services,set,submitted,job,graph,store,mock,submitted,job,graph,store,ha,services,set,dispatcher,leader,election,service,testing,leader,election,service,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,1000l,final,job,id,job,id,new,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,name,get,method,name,new,configuration,ha,services,mock,resource,manager,gateway,class,mock,blob,server,class,heartbeat,services,mock,metric,registry,impl,class,fatal,error,handler,mock,job,manager,runner,class,job,id,try,dispatcher,start,assert,false,leader,session,id,future,is,done,testing,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,leader,session,id,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,mock,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1513171312;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1513191531;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1515481550;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1515669170;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1516970986;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1516971011;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1516971020;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1517300708;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1517915731;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1518508251;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1518680659;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1518945172;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1519406526;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1519638690;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1521379500;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1522132482;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1522249271;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1522249272;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1522249273;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		verify(submittedJobGraphStore, Mockito.timeout(TIMEOUT.toMilliseconds()).atLeast(1)).getJobIds()__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,verify,submitted,job,graph,store,mockito,timeout,timeout,to,milliseconds,at,least,1,get,job,ids
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1522251199;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1522339662;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		UUID expectedLeaderSessionId = UUID.randomUUID()___		assertNull(dispatcherLeaderElectionService.getConfirmationFuture())___		dispatcherLeaderElectionService.isLeader(expectedLeaderSessionId)___		UUID actualLeaderSessionId = dispatcherLeaderElectionService.getConfirmationFuture()_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(expectedLeaderSessionId, actualLeaderSessionId)___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,uuid,expected,leader,session,id,uuid,random,uuid,assert,null,dispatcher,leader,election,service,get,confirmation,future,dispatcher,leader,election,service,is,leader,expected,leader,session,id,uuid,actual,leader,session,id,dispatcher,leader,election,service,get,confirmation,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,expected,leader,session,id,actual,leader,session,id,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1522339663;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1522339663;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1522681180;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1526334048;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1526336566;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1526494919;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1528982883;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1530292340;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1531921883;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1531921883;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1536930103;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1536954663;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1547736239;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1548322471;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1548350146;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1548846699;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1548866156;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1549360057;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1549824946;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testLeaderElection() throws Exception;1550005040;Tests that the dispatcher takes part in the leader election.;@Test_	public void testLeaderElection() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<Void> jobIdsFuture = new CompletableFuture<>()__		submittedJobGraphStore.setJobIdsFunction(_			(Collection<JobID> jobIds) -> {_				jobIdsFuture.complete(null)__				return jobIds__			})___		electDispatcher()___		_		jobIdsFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__	};tests,that,the,dispatcher,takes,part,in,the,leader,election;test,public,void,test,leader,election,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,void,job,ids,future,new,completable,future,submitted,job,graph,store,set,job,ids,function,collection,job,id,job,ids,job,ids,future,complete,null,return,job,ids,elect,dispatcher,job,ids,future,get,timeout,to,milliseconds,time,unit,milliseconds
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1522132482;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1522249271;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1522249272;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1522249273;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1522251199;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1522339662;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1522339663;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1522339663;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1522681180;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1526334048;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1526336566;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1526494919;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1528982883;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1530292340;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1531921883;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1531921883;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1536930103;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1536954663;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1547736239;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1548322471;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1548350146;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1548846699;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1548866156;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1549360057;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1549824946;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testSavepointDisposal() throws Exception;1550005040;Tests that we can dispose a savepoint.;@Test_	public void testSavepointDisposal() throws Exception {_		final URI externalPointer = createTestingSavepoint()__		final Path savepointPath = Paths.get(externalPointer)___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(Files.exists(savepointPath), is(true))___		dispatcherGateway.disposeSavepoint(externalPointer.toString(), TIMEOUT).get()___		assertThat(Files.exists(savepointPath), is(false))__	};tests,that,we,can,dispose,a,savepoint;test,public,void,test,savepoint,disposal,throws,exception,final,uri,external,pointer,create,testing,savepoint,final,path,savepoint,path,paths,get,external,pointer,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,files,exists,savepoint,path,is,true,dispatcher,gateway,dispose,savepoint,external,pointer,to,string,timeout,get,assert,that,files,exists,savepoint,path,is,false
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1522249273;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1522251199;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1522339662;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1522339663;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1522339663;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1522681180;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1526334048;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1526336566;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1526494919;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1528982883;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1530292340;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1531921883;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1531921883;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException;1536930103;Tests that we wait until the JobMaster has gained leader ship before sending requests_to it. See FLINK-8887.;@Test_	public void testWaitingForJobMasterLeadership() throws ExecutionException, InterruptedException {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobStatus> jobStatusFuture = dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobStatusFuture.isDone(), is(false))___		try {_			jobStatusFuture.get(10, TimeUnit.MILLISECONDS)__			fail("Should not complete.")__		} catch (TimeoutException ignored) {_			_		}__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(jobStatusFuture.get(), notNullValue())__	};tests,that,we,wait,until,the,job,master,has,gained,leader,ship,before,sending,requests,to,it,see,flink,8887;test,public,void,test,waiting,for,job,master,leadership,throws,execution,exception,interrupted,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,status,job,status,future,dispatcher,gateway,request,job,status,job,graph,get,job,id,timeout,assert,that,job,status,future,is,done,is,false,try,job,status,future,get,10,time,unit,milliseconds,fail,should,not,complete,catch,timeout,exception,ignored,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,job,status,future,get,not,null,value
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1517300708;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1517915731;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1518508251;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1518680659;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1518945172;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1519406526;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1519638690;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1521379500;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1522132482;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1522249271;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1522249272;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1522249273;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1522251199;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1522339662;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcher.submitJobLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,submit,job,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1522339663;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1522339663;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1522681180;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1526334048;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1526336566;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1526494919;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1528982883;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1530292340;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1531921883;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1531921883;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1536930103;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1536954663;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1547736239;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1548322471;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1548350146;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1548846699;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1548866156;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1549360057;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1549824946;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobRecovery() throws Exception;1550005040;Tests that a reelected Dispatcher can recover jobs.;@Test_	public void testJobRecovery() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		_		assertThat(submittedJobGraphStore.getJobIds(), contains(jobGraph.getJobID()))___		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()), is(RunningJobsRegistry.JobSchedulingStatus.RUNNING))___		_		dispatcherLeaderElectionService.notLeader()___		_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		createdJobManagerRunnerLatch.await()___		_		final Collection<JobID> jobIds = dispatcherGateway.listJobs(TIMEOUT).get()___		assertThat(jobIds, hasSize(1))__		assertThat(jobIds, contains(jobGraph.getJobID()))__	};tests,that,a,reelected,dispatcher,can,recover,jobs;test,public,void,test,job,recovery,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,submit,job,job,graph,timeout,get,assert,that,submitted,job,graph,store,get,job,ids,contains,job,graph,get,job,id,job,master,leader,election,service,is,leader,uuid,random,uuid,get,assert,that,running,jobs,registry,get,job,scheduling,status,job,graph,get,job,id,is,running,jobs,registry,job,scheduling,status,running,dispatcher,leader,election,service,not,leader,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,created,job,manager,runner,latch,await,final,collection,job,id,job,ids,dispatcher,gateway,list,jobs,timeout,get,assert,that,job,ids,has,size,1,assert,that,job,ids,contains,job,graph,get,job,id
DispatcherTest -> @Test 	public void testJobSuspensionWhenDispatcherLosesLeadership() throws Exception;1548866156;Tests that a submitted job is suspended if the Dispatcher loses leadership.;@Test_	public void testJobSuspensionWhenDispatcherLosesLeadership() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobResult> jobResultFuture = dispatcherGateway.requestJobResult(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobResultFuture.isDone(), is(false))___		dispatcherLeaderElectionService.notLeader()___		try {_			jobResultFuture.get()__			fail("Expected the job result to throw an exception.")__		} catch (ExecutionException ee) {_			assertThat(ExceptionUtils.findThrowable(ee, JobNotFinishedException.class).isPresent(), is(true))__		}_	};tests,that,a,submitted,job,is,suspended,if,the,dispatcher,loses,leadership;test,public,void,test,job,suspension,when,dispatcher,loses,leadership,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,result,job,result,future,dispatcher,gateway,request,job,result,job,graph,get,job,id,timeout,assert,that,job,result,future,is,done,is,false,dispatcher,leader,election,service,not,leader,try,job,result,future,get,fail,expected,the,job,result,to,throw,an,exception,catch,execution,exception,ee,assert,that,exception,utils,find,throwable,ee,job,not,finished,exception,class,is,present,is,true
DispatcherTest -> @Test 	public void testJobSuspensionWhenDispatcherLosesLeadership() throws Exception;1549360057;Tests that a submitted job is suspended if the Dispatcher loses leadership.;@Test_	public void testJobSuspensionWhenDispatcherLosesLeadership() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobResult> jobResultFuture = dispatcherGateway.requestJobResult(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobResultFuture.isDone(), is(false))___		dispatcherLeaderElectionService.notLeader()___		try {_			jobResultFuture.get()__			fail("Expected the job result to throw an exception.")__		} catch (ExecutionException ee) {_			assertThat(ExceptionUtils.findThrowable(ee, JobNotFinishedException.class).isPresent(), is(true))__		}_	};tests,that,a,submitted,job,is,suspended,if,the,dispatcher,loses,leadership;test,public,void,test,job,suspension,when,dispatcher,loses,leadership,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,result,job,result,future,dispatcher,gateway,request,job,result,job,graph,get,job,id,timeout,assert,that,job,result,future,is,done,is,false,dispatcher,leader,election,service,not,leader,try,job,result,future,get,fail,expected,the,job,result,to,throw,an,exception,catch,execution,exception,ee,assert,that,exception,utils,find,throwable,ee,job,not,finished,exception,class,is,present,is,true
DispatcherTest -> @Test 	public void testJobSuspensionWhenDispatcherLosesLeadership() throws Exception;1549824946;Tests that a submitted job is suspended if the Dispatcher loses leadership.;@Test_	public void testJobSuspensionWhenDispatcherLosesLeadership() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobResult> jobResultFuture = dispatcherGateway.requestJobResult(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobResultFuture.isDone(), is(false))___		dispatcherLeaderElectionService.notLeader()___		try {_			jobResultFuture.get()__			fail("Expected the job result to throw an exception.")__		} catch (ExecutionException ee) {_			assertThat(ExceptionUtils.findThrowable(ee, JobNotFinishedException.class).isPresent(), is(true))__		}_	};tests,that,a,submitted,job,is,suspended,if,the,dispatcher,loses,leadership;test,public,void,test,job,suspension,when,dispatcher,loses,leadership,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,result,job,result,future,dispatcher,gateway,request,job,result,job,graph,get,job,id,timeout,assert,that,job,result,future,is,done,is,false,dispatcher,leader,election,service,not,leader,try,job,result,future,get,fail,expected,the,job,result,to,throw,an,exception,catch,execution,exception,ee,assert,that,exception,utils,find,throwable,ee,job,not,finished,exception,class,is,present,is,true
DispatcherTest -> @Test 	public void testJobSuspensionWhenDispatcherLosesLeadership() throws Exception;1550005040;Tests that a submitted job is suspended if the Dispatcher loses leadership.;@Test_	public void testJobSuspensionWhenDispatcherLosesLeadership() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()___		final CompletableFuture<JobResult> jobResultFuture = dispatcherGateway.requestJobResult(jobGraph.getJobID(), TIMEOUT)___		assertThat(jobResultFuture.isDone(), is(false))___		dispatcherLeaderElectionService.notLeader()___		try {_			jobResultFuture.get()__			fail("Expected the job result to throw an exception.")__		} catch (ExecutionException ee) {_			assertThat(ExceptionUtils.findThrowable(ee, JobNotFinishedException.class).isPresent(), is(true))__		}_	};tests,that,a,submitted,job,is,suspended,if,the,dispatcher,loses,leadership;test,public,void,test,job,suspension,when,dispatcher,loses,leadership,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,final,completable,future,job,result,job,result,future,dispatcher,gateway,request,job,result,job,graph,get,job,id,timeout,assert,that,job,result,future,is,done,is,false,dispatcher,leader,election,service,not,leader,try,job,result,future,get,fail,expected,the,job,result,to,throw,an,exception,catch,execution,exception,ee,assert,that,exception,utils,find,throwable,ee,job,not,finished,exception,class,is,present,is,true
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1515669170;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		OnCompletionActions onCompletionActions___		final JobID failedJobId = new JobID()__		onCompletionActions = dispatcher.new DispatcherOnCompleteActions(failedJobId)___		onCompletionActions.jobFailed(new JobResult.Builder()_			.jobId(failedJobId)_			.serializedThrowable(new SerializedThrowable(new RuntimeException("expected")))_			.netRuntime(Long.MAX_VALUE)_			.build())___		assertThat(_			dispatcherGateway.isJobExecutionResultPresent(failedJobId, TIMEOUT).get(),_			equalTo(true))__		assertThat(_			dispatcherGateway.getJobExecutionResult(failedJobId, TIMEOUT)_				.get()_				.isSuccess(),_			equalTo(false))___		final JobID successJobId = new JobID()__		onCompletionActions = dispatcher.new DispatcherOnCompleteActions(successJobId)___		onCompletionActions.jobFinished(new JobResult.Builder()_			.jobId(successJobId)_			.netRuntime(Long.MAX_VALUE)_			.build())___		assertThat(_			dispatcherGateway.isJobExecutionResultPresent(successJobId, TIMEOUT).get(),_			equalTo(true))__		assertThat(_			dispatcherGateway.getJobExecutionResult(successJobId, TIMEOUT)_				.get()_				.isSuccess(),_			equalTo(true))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,on,completion,actions,on,completion,actions,final,job,id,failed,job,id,new,job,id,on,completion,actions,dispatcher,new,dispatcher,on,complete,actions,failed,job,id,on,completion,actions,job,failed,new,job,result,builder,job,id,failed,job,id,serialized,throwable,new,serialized,throwable,new,runtime,exception,expected,net,runtime,long,build,assert,that,dispatcher,gateway,is,job,execution,result,present,failed,job,id,timeout,get,equal,to,true,assert,that,dispatcher,gateway,get,job,execution,result,failed,job,id,timeout,get,is,success,equal,to,false,final,job,id,success,job,id,new,job,id,on,completion,actions,dispatcher,new,dispatcher,on,complete,actions,success,job,id,on,completion,actions,job,finished,new,job,result,builder,job,id,success,job,id,net,runtime,long,build,assert,that,dispatcher,gateway,is,job,execution,result,present,success,job,id,timeout,get,equal,to,true,assert,that,dispatcher,gateway,get,job,execution,result,success,job,id,timeout,get,is,success,equal,to,true
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1516970986;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		OnCompletionActions onCompletionActions___		final JobID failedJobId = new JobID()__		onCompletionActions = dispatcher.new DispatcherOnCompleteActions(failedJobId)___		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(JobStatus.FAILED)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		onCompletionActions.jobReachedGloballyTerminalState(failedExecutionGraph)___		assertThat(_			dispatcherGateway.isJobExecutionResultPresent(failedJobId, TIMEOUT).get(),_			equalTo(true))__		assertThat(_			dispatcherGateway.getJobExecutionResult(failedJobId, TIMEOUT)_				.get()_				.isSuccess(),_			equalTo(false))___		final JobID successJobId = new JobID()__		onCompletionActions = dispatcher.new DispatcherOnCompleteActions(successJobId)___		final ArchivedExecutionGraph succeededExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(successJobId)_			.setState(JobStatus.FINISHED)_			.build()___		onCompletionActions.jobReachedGloballyTerminalState(succeededExecutionGraph)___		assertThat(_			dispatcherGateway.isJobExecutionResultPresent(successJobId, TIMEOUT).get(),_			equalTo(true))__		assertThat(_			dispatcherGateway.getJobExecutionResult(successJobId, TIMEOUT)_				.get()_				.isSuccess(),_			equalTo(true))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,on,completion,actions,on,completion,actions,final,job,id,failed,job,id,new,job,id,on,completion,actions,dispatcher,new,dispatcher,on,complete,actions,failed,job,id,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,job,status,failed,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,on,completion,actions,job,reached,globally,terminal,state,failed,execution,graph,assert,that,dispatcher,gateway,is,job,execution,result,present,failed,job,id,timeout,get,equal,to,true,assert,that,dispatcher,gateway,get,job,execution,result,failed,job,id,timeout,get,is,success,equal,to,false,final,job,id,success,job,id,new,job,id,on,completion,actions,dispatcher,new,dispatcher,on,complete,actions,success,job,id,final,archived,execution,graph,succeeded,execution,graph,new,archived,execution,graph,builder,set,job,id,success,job,id,set,state,job,status,finished,build,on,completion,actions,job,reached,globally,terminal,state,succeeded,execution,graph,assert,that,dispatcher,gateway,is,job,execution,result,present,success,job,id,timeout,get,equal,to,true,assert,that,dispatcher,gateway,get,job,execution,result,success,job,id,timeout,get,is,success,equal,to,true
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1516971011;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		OnCompletionActions onCompletionActions___		final JobID failedJobId = new JobID()__		onCompletionActions = dispatcher.new DispatcherOnCompleteActions(failedJobId)___		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(JobStatus.FAILED)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		onCompletionActions.jobReachedGloballyTerminalState(failedExecutionGraph)___		assertThat(_			dispatcherGateway.isJobExecutionResultPresent(failedJobId, TIMEOUT).get(),_			equalTo(true))__		assertThat(_			dispatcherGateway.getJobExecutionResult(failedJobId, TIMEOUT)_				.get()_				.isSuccess(),_			equalTo(false))___		final JobID successJobId = new JobID()__		onCompletionActions = dispatcher.new DispatcherOnCompleteActions(successJobId)___		final ArchivedExecutionGraph succeededExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(successJobId)_			.setState(JobStatus.FINISHED)_			.build()___		onCompletionActions.jobReachedGloballyTerminalState(succeededExecutionGraph)___		assertThat(_			dispatcherGateway.isJobExecutionResultPresent(successJobId, TIMEOUT).get(),_			equalTo(true))__		assertThat(_			dispatcherGateway.getJobExecutionResult(successJobId, TIMEOUT)_				.get()_				.isSuccess(),_			equalTo(true))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,on,completion,actions,on,completion,actions,final,job,id,failed,job,id,new,job,id,on,completion,actions,dispatcher,new,dispatcher,on,complete,actions,failed,job,id,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,job,status,failed,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,on,completion,actions,job,reached,globally,terminal,state,failed,execution,graph,assert,that,dispatcher,gateway,is,job,execution,result,present,failed,job,id,timeout,get,equal,to,true,assert,that,dispatcher,gateway,get,job,execution,result,failed,job,id,timeout,get,is,success,equal,to,false,final,job,id,success,job,id,new,job,id,on,completion,actions,dispatcher,new,dispatcher,on,complete,actions,success,job,id,final,archived,execution,graph,succeeded,execution,graph,new,archived,execution,graph,builder,set,job,id,success,job,id,set,state,job,status,finished,build,on,completion,actions,job,reached,globally,terminal,state,succeeded,execution,graph,assert,that,dispatcher,gateway,is,job,execution,result,present,success,job,id,timeout,get,equal,to,true,assert,that,dispatcher,gateway,get,job,execution,result,success,job,id,timeout,get,is,success,equal,to,true
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1516971020;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		OnCompletionActions onCompletionActions___		final JobID failedJobId = new JobID()__		onCompletionActions = dispatcher.new DispatcherOnCompleteActions(failedJobId)___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		onCompletionActions.jobReachedGloballyTerminalState(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,on,completion,actions,on,completion,actions,final,job,id,failed,job,id,new,job,id,on,completion,actions,dispatcher,new,dispatcher,on,complete,actions,failed,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,on,completion,actions,job,reached,globally,terminal,state,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1517300708;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		OnCompletionActions onCompletionActions___		final JobID failedJobId = new JobID()__		onCompletionActions = dispatcher.new DispatcherOnCompleteActions(failedJobId)___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		onCompletionActions.jobReachedGloballyTerminalState(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,on,completion,actions,on,completion,actions,final,job,id,failed,job,id,new,job,id,on,completion,actions,dispatcher,new,dispatcher,on,complete,actions,failed,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,on,completion,actions,job,reached,globally,terminal,state,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1517915731;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		OnCompletionActions onCompletionActions___		final JobID failedJobId = new JobID()__		onCompletionActions = dispatcher.new DispatcherOnCompleteActions(failedJobId)___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		onCompletionActions.jobReachedGloballyTerminalState(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,on,completion,actions,on,completion,actions,final,job,id,failed,job,id,new,job,id,on,completion,actions,dispatcher,new,dispatcher,on,complete,actions,failed,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,on,completion,actions,job,reached,globally,terminal,state,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1518508251;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		OnCompletionActions onCompletionActions___		final JobID failedJobId = new JobID()__		onCompletionActions = dispatcher.new DispatcherOnCompleteActions(failedJobId)___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		onCompletionActions.jobReachedGloballyTerminalState(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,on,completion,actions,on,completion,actions,final,job,id,failed,job,id,new,job,id,on,completion,actions,dispatcher,new,dispatcher,on,complete,actions,failed,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,on,completion,actions,job,reached,globally,terminal,state,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1518680659;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		OnCompletionActions onCompletionActions___		final JobID failedJobId = new JobID()__		onCompletionActions = dispatcher.new DispatcherOnCompleteActions(failedJobId)___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		onCompletionActions.jobReachedGloballyTerminalState(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,on,completion,actions,on,completion,actions,final,job,id,failed,job,id,new,job,id,on,completion,actions,dispatcher,new,dispatcher,on,complete,actions,failed,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,on,completion,actions,job,reached,globally,terminal,state,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1518945172;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1519406526;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1519638690;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1521379500;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1522132482;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1522249271;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1522249272;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1522249273;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1522251199;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1522339662;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1522339663;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1522339663;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1522681180;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1526334048;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1526336566;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1526494919;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1528982883;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1530292340;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1531921883;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1531921883;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1536930103;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1536954663;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1547736239;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1548322471;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1548350146;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1548846699;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1548866156;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1549360057;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1549824946;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testCacheJobExecutionResult() throws Exception;1550005040;Test that {@link JobResult} is cached when the job finishes.;@Test_	public void testCacheJobExecutionResult() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		final JobID failedJobId = new JobID()___		final JobStatus expectedState = JobStatus.FAILED__		final ArchivedExecutionGraph failedExecutionGraph = new ArchivedExecutionGraphBuilder()_			.setJobID(failedJobId)_			.setState(expectedState)_			.setFailureCause(new ErrorInfo(new RuntimeException("expected"), 1L))_			.build()___		dispatcher.completeJobExecution(failedExecutionGraph)___		assertThat(_			dispatcherGateway.requestJobStatus(failedJobId, TIMEOUT).get(),_			equalTo(expectedState))__		assertThat(_			dispatcherGateway.requestJob(failedJobId, TIMEOUT).get(),_			equalTo(failedExecutionGraph))__	};test,that,link,job,result,is,cached,when,the,job,finishes;test,public,void,test,cache,job,execution,result,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,id,failed,job,id,new,job,id,final,job,status,expected,state,job,status,failed,final,archived,execution,graph,failed,execution,graph,new,archived,execution,graph,builder,set,job,id,failed,job,id,set,state,expected,state,set,failure,cause,new,error,info,new,runtime,exception,expected,1l,build,dispatcher,complete,job,execution,failed,execution,graph,assert,that,dispatcher,gateway,request,job,status,failed,job,id,timeout,get,equal,to,expected,state,assert,that,dispatcher,gateway,request,job,failed,job,id,timeout,get,equal,to,failed,execution,graph
DispatcherTest -> @Test 	public void testFailingJobManagerRunnerCleanup() throws Exception;1536954663;Tests that a failing {@link JobManagerRunner} will be properly cleaned up.;@Test_	public void testFailingJobManagerRunnerCleanup() throws Exception {_		final FlinkException testException = new FlinkException("Test exception.")__		final ArrayBlockingQueue<Optional<Exception>> queue = new ArrayBlockingQueue<>(2)___		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(() -> {_				final Optional<Exception> take = queue.take()__				final Exception exception = take.orElse(null)___				if (exception != null) {_					throw exception__				}_			}))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		queue.offer(Optional.of(testException))___		try {_			submissionFuture.get()__			fail("Should fail because we could not instantiate the JobManagerRunner.")__		} catch (Exception e) {_			assertThat(ExceptionUtils.findThrowable(e, t -> t.equals(testException)).isPresent(), is(true))__		}__		submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		queue.offer(Optional.empty())___		submissionFuture.get()__	};tests,that,a,failing,link,job,manager,runner,will,be,properly,cleaned,up;test,public,void,test,failing,job,manager,runner,cleanup,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,array,blocking,queue,optional,exception,queue,new,array,blocking,queue,2,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,final,optional,exception,take,queue,take,final,exception,exception,take,or,else,null,if,exception,null,throw,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,queue,offer,optional,of,test,exception,try,submission,future,get,fail,should,fail,because,we,could,not,instantiate,the,job,manager,runner,catch,exception,e,assert,that,exception,utils,find,throwable,e,t,t,equals,test,exception,is,present,is,true,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,queue,offer,optional,empty,submission,future,get
DispatcherTest -> @Test 	public void testFailingJobManagerRunnerCleanup() throws Exception;1547736239;Tests that a failing {@link JobManagerRunner} will be properly cleaned up.;@Test_	public void testFailingJobManagerRunnerCleanup() throws Exception {_		final FlinkException testException = new FlinkException("Test exception.")__		final ArrayBlockingQueue<Optional<Exception>> queue = new ArrayBlockingQueue<>(2)___		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(() -> {_				final Optional<Exception> take = queue.take()__				final Exception exception = take.orElse(null)___				if (exception != null) {_					throw exception__				}_			}))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		queue.offer(Optional.of(testException))___		try {_			submissionFuture.get()__			fail("Should fail because we could not instantiate the JobManagerRunner.")__		} catch (Exception e) {_			assertThat(ExceptionUtils.findThrowable(e, t -> t.equals(testException)).isPresent(), is(true))__		}__		submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		queue.offer(Optional.empty())___		submissionFuture.get()__	};tests,that,a,failing,link,job,manager,runner,will,be,properly,cleaned,up;test,public,void,test,failing,job,manager,runner,cleanup,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,array,blocking,queue,optional,exception,queue,new,array,blocking,queue,2,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,final,optional,exception,take,queue,take,final,exception,exception,take,or,else,null,if,exception,null,throw,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,queue,offer,optional,of,test,exception,try,submission,future,get,fail,should,fail,because,we,could,not,instantiate,the,job,manager,runner,catch,exception,e,assert,that,exception,utils,find,throwable,e,t,t,equals,test,exception,is,present,is,true,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,queue,offer,optional,empty,submission,future,get
DispatcherTest -> @Test 	public void testFailingJobManagerRunnerCleanup() throws Exception;1548322471;Tests that a failing {@link JobManagerRunner} will be properly cleaned up.;@Test_	public void testFailingJobManagerRunnerCleanup() throws Exception {_		final FlinkException testException = new FlinkException("Test exception.")__		final ArrayBlockingQueue<Optional<Exception>> queue = new ArrayBlockingQueue<>(2)___		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(() -> {_				final Optional<Exception> take = queue.take()__				final Exception exception = take.orElse(null)___				if (exception != null) {_					throw exception__				}_			}))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		queue.offer(Optional.of(testException))___		try {_			submissionFuture.get()__			fail("Should fail because we could not instantiate the JobManagerRunner.")__		} catch (Exception e) {_			assertThat(ExceptionUtils.findThrowable(e, t -> t.equals(testException)).isPresent(), is(true))__		}__		submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		queue.offer(Optional.empty())___		submissionFuture.get()__	};tests,that,a,failing,link,job,manager,runner,will,be,properly,cleaned,up;test,public,void,test,failing,job,manager,runner,cleanup,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,array,blocking,queue,optional,exception,queue,new,array,blocking,queue,2,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,final,optional,exception,take,queue,take,final,exception,exception,take,or,else,null,if,exception,null,throw,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,queue,offer,optional,of,test,exception,try,submission,future,get,fail,should,fail,because,we,could,not,instantiate,the,job,manager,runner,catch,exception,e,assert,that,exception,utils,find,throwable,e,t,t,equals,test,exception,is,present,is,true,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,queue,offer,optional,empty,submission,future,get
DispatcherTest -> @Test 	public void testFailingJobManagerRunnerCleanup() throws Exception;1548350146;Tests that a failing {@link JobManagerRunner} will be properly cleaned up.;@Test_	public void testFailingJobManagerRunnerCleanup() throws Exception {_		final FlinkException testException = new FlinkException("Test exception.")__		final ArrayBlockingQueue<Optional<Exception>> queue = new ArrayBlockingQueue<>(2)___		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(() -> {_				final Optional<Exception> take = queue.take()__				final Exception exception = take.orElse(null)___				if (exception != null) {_					throw exception__				}_			}))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		queue.offer(Optional.of(testException))___		try {_			submissionFuture.get()__			fail("Should fail because we could not instantiate the JobManagerRunner.")__		} catch (Exception e) {_			assertThat(ExceptionUtils.findThrowable(e, t -> t.equals(testException)).isPresent(), is(true))__		}__		submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		queue.offer(Optional.empty())___		submissionFuture.get()__	};tests,that,a,failing,link,job,manager,runner,will,be,properly,cleaned,up;test,public,void,test,failing,job,manager,runner,cleanup,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,array,blocking,queue,optional,exception,queue,new,array,blocking,queue,2,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,final,optional,exception,take,queue,take,final,exception,exception,take,or,else,null,if,exception,null,throw,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,queue,offer,optional,of,test,exception,try,submission,future,get,fail,should,fail,because,we,could,not,instantiate,the,job,manager,runner,catch,exception,e,assert,that,exception,utils,find,throwable,e,t,t,equals,test,exception,is,present,is,true,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,queue,offer,optional,empty,submission,future,get
DispatcherTest -> @Test 	public void testFailingJobManagerRunnerCleanup() throws Exception;1548846699;Tests that a failing {@link JobManagerRunner} will be properly cleaned up.;@Test_	public void testFailingJobManagerRunnerCleanup() throws Exception {_		final FlinkException testException = new FlinkException("Test exception.")__		final ArrayBlockingQueue<Optional<Exception>> queue = new ArrayBlockingQueue<>(2)___		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(() -> {_				final Optional<Exception> take = queue.take()__				final Exception exception = take.orElse(null)___				if (exception != null) {_					throw exception__				}_			}))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		queue.offer(Optional.of(testException))___		try {_			submissionFuture.get()__			fail("Should fail because we could not instantiate the JobManagerRunner.")__		} catch (Exception e) {_			assertThat(ExceptionUtils.findThrowable(e, t -> t.equals(testException)).isPresent(), is(true))__		}__		submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		queue.offer(Optional.empty())___		submissionFuture.get()__	};tests,that,a,failing,link,job,manager,runner,will,be,properly,cleaned,up;test,public,void,test,failing,job,manager,runner,cleanup,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,array,blocking,queue,optional,exception,queue,new,array,blocking,queue,2,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,final,optional,exception,take,queue,take,final,exception,exception,take,or,else,null,if,exception,null,throw,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,queue,offer,optional,of,test,exception,try,submission,future,get,fail,should,fail,because,we,could,not,instantiate,the,job,manager,runner,catch,exception,e,assert,that,exception,utils,find,throwable,e,t,t,equals,test,exception,is,present,is,true,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,queue,offer,optional,empty,submission,future,get
DispatcherTest -> @Test 	public void testFailingJobManagerRunnerCleanup() throws Exception;1548866156;Tests that a failing {@link JobManagerRunner} will be properly cleaned up.;@Test_	public void testFailingJobManagerRunnerCleanup() throws Exception {_		final FlinkException testException = new FlinkException("Test exception.")__		final ArrayBlockingQueue<Optional<Exception>> queue = new ArrayBlockingQueue<>(2)___		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(() -> {_				final Optional<Exception> take = queue.take()__				final Exception exception = take.orElse(null)___				if (exception != null) {_					throw exception__				}_			}))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		queue.offer(Optional.of(testException))___		try {_			submissionFuture.get()__			fail("Should fail because we could not instantiate the JobManagerRunner.")__		} catch (Exception e) {_			assertThat(ExceptionUtils.findThrowable(e, t -> t.equals(testException)).isPresent(), is(true))__		}__		submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		queue.offer(Optional.empty())___		submissionFuture.get()__	};tests,that,a,failing,link,job,manager,runner,will,be,properly,cleaned,up;test,public,void,test,failing,job,manager,runner,cleanup,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,array,blocking,queue,optional,exception,queue,new,array,blocking,queue,2,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,final,optional,exception,take,queue,take,final,exception,exception,take,or,else,null,if,exception,null,throw,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,queue,offer,optional,of,test,exception,try,submission,future,get,fail,should,fail,because,we,could,not,instantiate,the,job,manager,runner,catch,exception,e,assert,that,exception,utils,find,throwable,e,t,t,equals,test,exception,is,present,is,true,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,queue,offer,optional,empty,submission,future,get
DispatcherTest -> @Test 	public void testFailingJobManagerRunnerCleanup() throws Exception;1549360057;Tests that a failing {@link JobManagerRunner} will be properly cleaned up.;@Test_	public void testFailingJobManagerRunnerCleanup() throws Exception {_		final FlinkException testException = new FlinkException("Test exception.")__		final ArrayBlockingQueue<Optional<Exception>> queue = new ArrayBlockingQueue<>(2)___		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(() -> {_				final Optional<Exception> take = queue.take()__				final Exception exception = take.orElse(null)___				if (exception != null) {_					throw exception__				}_			}))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		queue.offer(Optional.of(testException))___		try {_			submissionFuture.get()__			fail("Should fail because we could not instantiate the JobManagerRunner.")__		} catch (Exception e) {_			assertThat(ExceptionUtils.findThrowable(e, t -> t.equals(testException)).isPresent(), is(true))__		}__		submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		queue.offer(Optional.empty())___		submissionFuture.get()__	};tests,that,a,failing,link,job,manager,runner,will,be,properly,cleaned,up;test,public,void,test,failing,job,manager,runner,cleanup,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,array,blocking,queue,optional,exception,queue,new,array,blocking,queue,2,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,final,optional,exception,take,queue,take,final,exception,exception,take,or,else,null,if,exception,null,throw,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,queue,offer,optional,of,test,exception,try,submission,future,get,fail,should,fail,because,we,could,not,instantiate,the,job,manager,runner,catch,exception,e,assert,that,exception,utils,find,throwable,e,t,t,equals,test,exception,is,present,is,true,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,queue,offer,optional,empty,submission,future,get
DispatcherTest -> @Test 	public void testFailingJobManagerRunnerCleanup() throws Exception;1549824946;Tests that a failing {@link JobManagerRunner} will be properly cleaned up.;@Test_	public void testFailingJobManagerRunnerCleanup() throws Exception {_		final FlinkException testException = new FlinkException("Test exception.")__		final ArrayBlockingQueue<Optional<Exception>> queue = new ArrayBlockingQueue<>(2)___		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(() -> {_				final Optional<Exception> take = queue.take()__				final Exception exception = take.orElse(null)___				if (exception != null) {_					throw exception__				}_			}))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		queue.offer(Optional.of(testException))___		try {_			submissionFuture.get()__			fail("Should fail because we could not instantiate the JobManagerRunner.")__		} catch (Exception e) {_			assertThat(ExceptionUtils.findThrowable(e, t -> t.equals(testException)).isPresent(), is(true))__		}__		submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		queue.offer(Optional.empty())___		submissionFuture.get()__	};tests,that,a,failing,link,job,manager,runner,will,be,properly,cleaned,up;test,public,void,test,failing,job,manager,runner,cleanup,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,array,blocking,queue,optional,exception,queue,new,array,blocking,queue,2,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,final,optional,exception,take,queue,take,final,exception,exception,take,or,else,null,if,exception,null,throw,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,queue,offer,optional,of,test,exception,try,submission,future,get,fail,should,fail,because,we,could,not,instantiate,the,job,manager,runner,catch,exception,e,assert,that,exception,utils,find,throwable,e,t,t,equals,test,exception,is,present,is,true,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,queue,offer,optional,empty,submission,future,get
DispatcherTest -> @Test 	public void testFailingJobManagerRunnerCleanup() throws Exception;1550005040;Tests that a failing {@link JobManagerRunner} will be properly cleaned up.;@Test_	public void testFailingJobManagerRunnerCleanup() throws Exception {_		final FlinkException testException = new FlinkException("Test exception.")__		final ArrayBlockingQueue<Optional<Exception>> queue = new ArrayBlockingQueue<>(2)___		dispatcher = createAndStartDispatcher(_			heartbeatServices,_			haServices,_			new BlockingJobManagerRunnerFactory(() -> {_				final Optional<Exception> take = queue.take()__				final Exception exception = take.orElse(null)___				if (exception != null) {_					throw exception__				}_			}))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		assertThat(submissionFuture.isDone(), is(false))___		queue.offer(Optional.of(testException))___		try {_			submissionFuture.get()__			fail("Should fail because we could not instantiate the JobManagerRunner.")__		} catch (Exception e) {_			assertThat(ExceptionUtils.findThrowable(e, t -> t.equals(testException)).isPresent(), is(true))__		}__		submissionFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		queue.offer(Optional.empty())___		submissionFuture.get()__	};tests,that,a,failing,link,job,manager,runner,will,be,properly,cleaned,up;test,public,void,test,failing,job,manager,runner,cleanup,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,array,blocking,queue,optional,exception,queue,new,array,blocking,queue,2,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,blocking,job,manager,runner,factory,final,optional,exception,take,queue,take,final,exception,exception,take,or,else,null,if,exception,null,throw,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,assert,that,submission,future,is,done,is,false,queue,offer,optional,of,test,exception,try,submission,future,get,fail,should,fail,because,we,could,not,instantiate,the,job,manager,runner,catch,exception,e,assert,that,exception,utils,find,throwable,e,t,t,equals,test,exception,is,present,is,true,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,queue,offer,optional,empty,submission,future,get
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1513171312;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1513191531;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1515481550;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1515669170;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1516970986;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1516971011;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1516971020;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1517300708;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1517915731;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1518508251;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1518680659;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1518945172;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1519406526;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1519638690;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1521379500;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1522132482;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1522249271;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1522249272;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1522249273;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1522251199;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1522339662;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		dispatcher.submitJobLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,dispatcher,submit,job,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1522339663;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher.recoverJobsEnabled.set(false)___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,recover,jobs,enabled,set,false,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1522339663;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1522681180;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1526334048;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1526336566;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1526494919;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1528982883;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1530292340;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1531921883;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1531921883;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1536930103;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1536954663;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1547736239;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1548322471;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1548350146;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1548846699;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1548866156;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1549360057;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1549824946;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testSubmittedJobGraphListener() throws Exception;1550005040;Test callbacks from_{@link org.apache.flink.runtime.jobmanager.SubmittedJobGraphStore.SubmittedJobGraphListener}.;@Test_	public void testSubmittedJobGraphListener() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		dispatcherGateway.submitJob(jobGraph, TIMEOUT).get()__		jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get()___		final SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(TEST_JOB_ID)___		_		submittedJobGraphStore.removeJobGraph(TEST_JOB_ID)__		dispatcher.onRemovedJobGraph(TEST_JOB_ID)__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), empty())___		_		runningJobsRegistry.clearJob(TEST_JOB_ID)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)__		dispatcher.onAddedJobGraph(TEST_JOB_ID)__		createdJobManagerRunnerLatch.await()__		assertThat(dispatcherGateway.listJobs(TIMEOUT).get(), hasSize(1))__	};test,callbacks,from,link,org,apache,flink,runtime,jobmanager,submitted,job,graph,store,submitted,job,graph,listener;test,public,void,test,submitted,job,graph,listener,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,dispatcher,leader,election,service,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,dispatcher,gateway,submit,job,job,graph,timeout,get,job,master,leader,election,service,is,leader,uuid,random,uuid,get,final,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,submitted,job,graph,store,remove,job,graph,dispatcher,on,removed,job,graph,assert,that,dispatcher,gateway,list,jobs,timeout,get,empty,running,jobs,registry,clear,job,submitted,job,graph,store,put,job,graph,submitted,job,graph,dispatcher,on,added,job,graph,created,job,manager,runner,latch,await,assert,that,dispatcher,gateway,list,jobs,timeout,get,has,size,1
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1522339663;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1522339663;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1522681180;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1526334048;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1526336566;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1526494919;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1528982883;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1530292340;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1531921883;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1531921883;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1536930103;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1536954663;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph, null)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,null,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1547736239;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1548322471;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1548350146;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1548846699;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1548866156;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1549360057;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1549824946;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmissionErrorAfterJobRecovery() throws Exception;1550005040;Tests that the {@link Dispatcher} fails fatally if the job submission of a recovered job fails._See FLINK-9097.;@Test_	public void testJobSubmissionErrorAfterJobRecovery() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")___		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		final JobGraph failingJobGraph = createFailingJobGraph(testException)___		final SubmittedJobGraph submittedJobGraph = new SubmittedJobGraph(failingJobGraph)__		submittedJobGraphStore.putJobGraph(submittedJobGraph)___		electDispatcher()___		final Throwable error = fatalErrorHandler.getErrorFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertThat(ExceptionUtils.findThrowableWithMessage(error, testException.getMessage()).isPresent(), is(true))___		fatalErrorHandler.clearError()__	};tests,that,the,link,dispatcher,fails,fatally,if,the,job,submission,of,a,recovered,job,fails,see,flink,9097;test,public,void,test,job,submission,error,after,job,recovery,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,final,job,graph,failing,job,graph,create,failing,job,graph,test,exception,final,submitted,job,graph,submitted,job,graph,new,submitted,job,graph,failing,job,graph,submitted,job,graph,store,put,job,graph,submitted,job,graph,elect,dispatcher,final,throwable,error,fatal,error,handler,get,error,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,that,exception,utils,find,throwable,with,message,error,test,exception,get,message,is,present,is,true,fatal,error,handler,clear,error
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1499789965;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		RpcService rpcService = new TestingRpcService()__		HighAvailabilityServices haServices = new StandaloneHaServices("localhost", "localhost")__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final Time timeout = Time.seconds(5L)__		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		try {_			final TestingDispatcher dispatcher = new TestingDispatcher(_				rpcService,_				Dispatcher.DISPATCHER_NAME,_				new Configuration(),_				haServices,_				mock(BlobServer.class),_				heartbeatServices,_				mock(MetricRegistry.class),_				fatalErrorHandler,_				jobManagerRunner,_				jobId)___			dispatcher.start()___			DispatcherGateway dispatcherGateway = dispatcher.getSelf()___			Future<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			rpcService.stopService()__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,rpc,service,rpc,service,new,testing,rpc,service,high,availability,services,ha,services,new,standalone,ha,services,localhost,localhost,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,time,timeout,time,seconds,5l,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,try,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,job,manager,runner,job,id,dispatcher,start,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,service,stop,service
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1501760738;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		RpcService rpcService = new TestingRpcService()__		HighAvailabilityServices haServices = new StandaloneHaServices("localhost", "localhost")__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final Time timeout = Time.seconds(5L)__		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		try {_			final TestingDispatcher dispatcher = new TestingDispatcher(_				rpcService,_				Dispatcher.DISPATCHER_NAME,_				new Configuration(),_				haServices,_				mock(BlobServer.class),_				heartbeatServices,_				mock(MetricRegistry.class),_				fatalErrorHandler,_				jobManagerRunner,_				jobId)___			dispatcher.start()___			DispatcherGateway dispatcherGateway = dispatcher.getSelf()___			CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			rpcService.stopService()__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,rpc,service,rpc,service,new,testing,rpc,service,high,availability,services,ha,services,new,standalone,ha,services,localhost,localhost,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,time,timeout,time,seconds,5l,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,try,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,job,manager,runner,job,id,dispatcher,start,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,service,stop,service
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1502452184;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		RpcService rpcService = new TestingRpcService()__		HighAvailabilityServices haServices = new StandaloneHaServices("localhost", "localhost")__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final Time timeout = Time.seconds(5L)__		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		try {_			final TestingDispatcher dispatcher = new TestingDispatcher(_				rpcService,_				Dispatcher.DISPATCHER_NAME,_				new Configuration(),_				haServices,_				mock(BlobServer.class),_				heartbeatServices,_				mock(MetricRegistry.class),_				fatalErrorHandler,_				jobManagerRunner,_				jobId)___			dispatcher.start()___			DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			rpcService.stopService()__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,rpc,service,rpc,service,new,testing,rpc,service,high,availability,services,ha,services,new,standalone,ha,services,localhost,localhost,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,time,timeout,time,seconds,5l,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,try,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,job,manager,runner,job,id,dispatcher,start,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,service,stop,service
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1503041372;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		RpcService rpcService = new TestingRpcService()__		HighAvailabilityServices haServices = new StandaloneHaServices("localhost", "localhost")__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final Time timeout = Time.seconds(5L)__		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		try {_			final TestingDispatcher dispatcher = new TestingDispatcher(_				rpcService,_				Dispatcher.DISPATCHER_NAME,_				new Configuration(),_				haServices,_				mock(BlobServer.class),_				heartbeatServices,_				mock(MetricRegistry.class),_				fatalErrorHandler,_				jobManagerRunner,_				jobId)___			dispatcher.start()___			DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			rpcService.stopService()__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,rpc,service,rpc,service,new,testing,rpc,service,high,availability,services,ha,services,new,standalone,ha,services,localhost,localhost,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,time,timeout,time,seconds,5l,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,try,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,job,manager,runner,job,id,dispatcher,start,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,service,stop,service
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1504472365;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		HighAvailabilityServices haServices = new StandaloneHaServices(_			"localhost",_			"localhost",_			"localhost")__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME,_			new Configuration(),_			haServices,_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			jobManagerRunner,_			jobId)___		try {_			dispatcher.start()___			DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, HighAvailabilityServices.DEFAULT_LEADER_ID, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,high,availability,services,ha,services,new,standalone,ha,services,localhost,localhost,localhost,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,job,manager,runner,job,id,try,dispatcher,start,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,high,availability,services,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1504507704;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		HighAvailabilityServices haServices = new StandaloneHaServices(_			"localhost",_			"localhost",_			"localhost")__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME,_			new Configuration(),_			haServices,_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			jobManagerRunner,_			jobId)___		try {_			dispatcher.start()___			DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,high,availability,services,ha,services,new,standalone,ha,services,localhost,localhost,localhost,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,job,manager,runner,job,id,try,dispatcher,start,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1504607872;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		HighAvailabilityServices haServices = new StandaloneHaServices(_			"localhost",_			"localhost",_			"localhost")__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME,_			new Configuration(),_			haServices,_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			jobManagerRunner,_			jobId)___		try {_			dispatcher.start()___			DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,high,availability,services,ha,services,new,standalone,ha,services,localhost,localhost,localhost,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,job,manager,runner,job,id,try,dispatcher,start,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1505860453;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()__		HighAvailabilityServices haServices = new StandaloneHaServices(_			"localhost",_			"localhost",_			"localhost")__		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME,_			new Configuration(),_			haServices,_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			jobManagerRunner,_			jobId)___		try {_			dispatcher.start()___			DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,high,availability,services,ha,services,new,standalone,ha,services,localhost,localhost,localhost,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,job,manager,runner,job,id,try,dispatcher,start,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1506553333;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()___		TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()__		haServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)__		haServices.setSubmittedJobGraphStore(new StandaloneSubmittedJobGraphStore())___		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME,_			new Configuration(),_			haServices,_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			jobManagerRunner,_			jobId)___		try {_			dispatcher.start()___			CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___			_			leaderFuture.get()___			DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,testing,high,availability,services,ha,services,new,testing,high,availability,services,ha,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,ha,services,set,submitted,job,graph,store,new,standalone,submitted,job,graph,store,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,job,manager,runner,job,id,try,dispatcher,start,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1507825825;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()___		TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()__		haServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)__		haServices.setSubmittedJobGraphStore(new StandaloneSubmittedJobGraphStore())___		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME,_			new Configuration(),_			haServices,_			mock(ResourceManagerGateway.class),_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			jobManagerRunner,_			jobId)___		try {_			dispatcher.start()___			CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___			_			leaderFuture.get()___			DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,testing,high,availability,services,ha,services,new,testing,high,availability,services,ha,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,ha,services,set,submitted,job,graph,store,new,standalone,submitted,job,graph,store,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,new,configuration,ha,services,mock,resource,manager,gateway,class,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,job,manager,runner,job,id,try,dispatcher,start,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1508235126;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()___		TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()__		haServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)__		haServices.setSubmittedJobGraphStore(new StandaloneSubmittedJobGraphStore())___		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME + '_' + name.getMethodName(),_			new Configuration(),_			haServices,_			mock(ResourceManagerGateway.class),_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistry.class),_			fatalErrorHandler,_			jobManagerRunner,_			jobId)___		try {_			dispatcher.start()___			CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___			_			leaderFuture.get()___			DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,testing,high,availability,services,ha,services,new,testing,high,availability,services,ha,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,ha,services,set,submitted,job,graph,store,new,standalone,submitted,job,graph,store,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,name,get,method,name,new,configuration,ha,services,mock,resource,manager,gateway,class,mock,blob,server,class,heartbeat,services,mock,metric,registry,class,fatal,error,handler,job,manager,runner,job,id,try,dispatcher,start,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1509547920;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()___		TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()__		haServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)__		haServices.setSubmittedJobGraphStore(new StandaloneSubmittedJobGraphStore())___		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME + '_' + name.getMethodName(),_			new Configuration(),_			haServices,_			mock(ResourceManagerGateway.class),_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistryImpl.class),_			fatalErrorHandler,_			jobManagerRunner,_			jobId)___		try {_			dispatcher.start()___			CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___			_			leaderFuture.get()___			DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,testing,high,availability,services,ha,services,new,testing,high,availability,services,ha,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,ha,services,set,submitted,job,graph,store,new,standalone,submitted,job,graph,store,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,name,get,method,name,new,configuration,ha,services,mock,resource,manager,gateway,class,mock,blob,server,class,heartbeat,services,mock,metric,registry,impl,class,fatal,error,handler,job,manager,runner,job,id,try,dispatcher,start,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1509547921;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()___		TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()__		haServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)__		haServices.setSubmittedJobGraphStore(new StandaloneSubmittedJobGraphStore())___		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME + '_' + name.getMethodName(),_			new Configuration(),_			haServices,_			mock(ResourceManagerGateway.class),_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistryImpl.class),_			fatalErrorHandler,_			jobManagerRunner,_			jobId)___		try {_			dispatcher.start()___			CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___			_			leaderFuture.get()___			DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,testing,high,availability,services,ha,services,new,testing,high,availability,services,ha,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,ha,services,set,submitted,job,graph,store,new,standalone,submitted,job,graph,store,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,name,get,method,name,new,configuration,ha,services,mock,resource,manager,gateway,class,mock,blob,server,class,heartbeat,services,mock,metric,registry,impl,class,fatal,error,handler,job,manager,runner,job,id,try,dispatcher,start,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1512061056;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		TestingFatalErrorHandler fatalErrorHandler = new TestingFatalErrorHandler()___		TestingLeaderElectionService dispatcherLeaderElectionService = new TestingLeaderElectionService()__		TestingHighAvailabilityServices haServices = new TestingHighAvailabilityServices()__		haServices.setDispatcherLeaderElectionService(dispatcherLeaderElectionService)__		haServices.setSubmittedJobGraphStore(new StandaloneSubmittedJobGraphStore())___		HeartbeatServices heartbeatServices = new HeartbeatServices(1000L, 10000L)__		JobManagerRunner jobManagerRunner = mock(JobManagerRunner.class)___		final JobGraph jobGraph = mock(JobGraph.class)__		final JobID jobId = new JobID()__		when(jobGraph.getJobID()).thenReturn(jobId)___		final TestingDispatcher dispatcher = new TestingDispatcher(_			rpcService,_			Dispatcher.DISPATCHER_NAME + '_' + name.getMethodName(),_			new Configuration(),_			haServices,_			mock(ResourceManagerGateway.class),_			mock(BlobServer.class),_			heartbeatServices,_			mock(MetricRegistryImpl.class),_			fatalErrorHandler,_			jobManagerRunner,_			jobId)___		try {_			dispatcher.start()___			CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___			_			leaderFuture.get()___			DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___			CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, timeout)___			acknowledgeFuture.get()___			verify(jobManagerRunner, Mockito.timeout(timeout.toMilliseconds())).start()___			_			fatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(dispatcher, timeout)__		}_	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,testing,fatal,error,handler,fatal,error,handler,new,testing,fatal,error,handler,testing,leader,election,service,dispatcher,leader,election,service,new,testing,leader,election,service,testing,high,availability,services,ha,services,new,testing,high,availability,services,ha,services,set,dispatcher,leader,election,service,dispatcher,leader,election,service,ha,services,set,submitted,job,graph,store,new,standalone,submitted,job,graph,store,heartbeat,services,heartbeat,services,new,heartbeat,services,1000l,10000l,job,manager,runner,job,manager,runner,mock,job,manager,runner,class,final,job,graph,job,graph,mock,job,graph,class,final,job,id,job,id,new,job,id,when,job,graph,get,job,id,then,return,job,id,final,testing,dispatcher,dispatcher,new,testing,dispatcher,rpc,service,dispatcher,name,get,method,name,new,configuration,ha,services,mock,resource,manager,gateway,class,mock,blob,server,class,heartbeat,services,mock,metric,registry,impl,class,fatal,error,handler,job,manager,runner,job,id,try,dispatcher,start,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,verify,job,manager,runner,mockito,timeout,timeout,to,milliseconds,start,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1513171312;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1513191531;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1515481550;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1515669170;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1516970986;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1516971011;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1516971020;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1517300708;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1517915731;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1518508251;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1518680659;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1518945172;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1519406526;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1519638690;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1521379500;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1522132482;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1522249271;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1522249272;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1522249273;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1522251199;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1522339662;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1522339663;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1522339663;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1522681180;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1526334048;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1526336566;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1526494919;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1528982883;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1530292340;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1531921883;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1531921883;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1536930103;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1536954663;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1547736239;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1548322471;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1548350146;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1548846699;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1548866156;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1549360057;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1549824946;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
DispatcherTest -> @Test 	public void testJobSubmission() throws Exception;1550005040;Tests that we can submit a job to the Dispatcher which then spawns a_new JobManagerRunner.;@Test_	public void testJobSubmission() throws Exception {_		dispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch))___		CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(UUID.randomUUID())___		_		leaderFuture.get()___		DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___		CompletableFuture<Acknowledge> acknowledgeFuture = dispatcherGateway.submitJob(jobGraph, TIMEOUT)___		acknowledgeFuture.get()___		assertTrue(_			"jobManagerRunner was not started",_			dispatcherLeaderElectionService.isStarted())__	};tests,that,we,can,submit,a,job,to,the,dispatcher,which,then,spawns,a,new,job,manager,runner;test,public,void,test,job,submission,throws,exception,dispatcher,create,and,start,dispatcher,heartbeat,services,ha,services,new,expected,job,id,job,manager,runner,factory,created,job,manager,runner,latch,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,uuid,random,uuid,leader,future,get,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,completable,future,acknowledge,acknowledge,future,dispatcher,gateway,submit,job,job,graph,timeout,acknowledge,future,get,assert,true,job,manager,runner,was,not,started,dispatcher,leader,election,service,is,started
