# id;timestamp;commentText;codeText;commentWords;codeWords
BackPressureStatsTrackerImplITCase -> private OperatorBackPressureStats triggerStatsSample( 			BackPressureStatsTrackerImpl statsTracker, 			ExecutionJobVertex vertex) throws InterruptedException;1518508250;Triggers a new stats sample.;private OperatorBackPressureStats triggerStatsSample(_			BackPressureStatsTrackerImpl statsTracker,_			ExecutionJobVertex vertex) throws InterruptedException {__		statsTracker.invalidateOperatorStatsCache()__		Assert.assertTrue("Failed to trigger", statsTracker.triggerStackTraceSample(vertex))___		_		Thread.sleep(20 * 10)___		Optional<OperatorBackPressureStats> stats___		_		while (!(stats = statsTracker.getOperatorBackPressureStats(vertex)).isPresent()) {_			Thread.sleep(10)__		}__		return stats.get()__	};triggers,a,new,stats,sample;private,operator,back,pressure,stats,trigger,stats,sample,back,pressure,stats,tracker,impl,stats,tracker,execution,job,vertex,vertex,throws,interrupted,exception,stats,tracker,invalidate,operator,stats,cache,assert,assert,true,failed,to,trigger,stats,tracker,trigger,stack,trace,sample,vertex,thread,sleep,20,10,optional,operator,back,pressure,stats,stats,while,stats,stats,tracker,get,operator,back,pressure,stats,vertex,is,present,thread,sleep,10,return,stats,get
BackPressureStatsTrackerImplITCase -> private OperatorBackPressureStats triggerStatsSample( 			BackPressureStatsTrackerImpl statsTracker, 			ExecutionJobVertex vertex) throws InterruptedException;1519039274;Triggers a new stats sample.;private OperatorBackPressureStats triggerStatsSample(_			BackPressureStatsTrackerImpl statsTracker,_			ExecutionJobVertex vertex) throws InterruptedException {__		statsTracker.invalidateOperatorStatsCache()__		Assert.assertTrue("Failed to trigger", statsTracker.triggerStackTraceSample(vertex))___		_		Thread.sleep(20 * 10)___		Optional<OperatorBackPressureStats> stats___		_		while (!(stats = statsTracker.getOperatorBackPressureStats(vertex)).isPresent()) {_			Thread.sleep(10)__		}__		return stats.get()__	};triggers,a,new,stats,sample;private,operator,back,pressure,stats,trigger,stats,sample,back,pressure,stats,tracker,impl,stats,tracker,execution,job,vertex,vertex,throws,interrupted,exception,stats,tracker,invalidate,operator,stats,cache,assert,assert,true,failed,to,trigger,stats,tracker,trigger,stack,trace,sample,vertex,thread,sleep,20,10,optional,operator,back,pressure,stats,stats,while,stats,stats,tracker,get,operator,back,pressure,stats,vertex,is,present,thread,sleep,10,return,stats,get
BackPressureStatsTrackerImplITCase -> private OperatorBackPressureStats triggerStatsSample( 			BackPressureStatsTrackerImpl statsTracker, 			ExecutionJobVertex vertex) throws InterruptedException;1524570317;Triggers a new stats sample.;private OperatorBackPressureStats triggerStatsSample(_			BackPressureStatsTrackerImpl statsTracker,_			ExecutionJobVertex vertex) throws InterruptedException {__		statsTracker.invalidateOperatorStatsCache()__		Assert.assertTrue("Failed to trigger", statsTracker.triggerStackTraceSample(vertex))___		_		Thread.sleep(20 * 10)___		Optional<OperatorBackPressureStats> stats___		_		while (!(stats = statsTracker.getOperatorBackPressureStats(vertex)).isPresent()) {_			Thread.sleep(10)__		}__		return stats.get()__	};triggers,a,new,stats,sample;private,operator,back,pressure,stats,trigger,stats,sample,back,pressure,stats,tracker,impl,stats,tracker,execution,job,vertex,vertex,throws,interrupted,exception,stats,tracker,invalidate,operator,stats,cache,assert,assert,true,failed,to,trigger,stats,tracker,trigger,stack,trace,sample,vertex,thread,sleep,20,10,optional,operator,back,pressure,stats,stats,while,stats,stats,tracker,get,operator,back,pressure,stats,vertex,is,present,thread,sleep,10,return,stats,get
BackPressureStatsTrackerImplITCase -> @Test 	public void testBackPressuredProducer() throws Exception;1518508250;Tests a simple fake-back pressured task. Back pressure is assumed when_sampled stack traces are in blocking buffer requests.;@Test_	public void testBackPressuredProducer() throws Exception {_		new JavaTestKit(testActorSystem) {{_			final FiniteDuration deadline = new FiniteDuration(60, TimeUnit.SECONDS)___			_			final JobGraph jobGraph = new JobGraph()__			final int parallelism = 4___			final JobVertex task = new JobVertex("Task")__			task.setInvokableClass(BackPressuredTask.class)__			task.setParallelism(parallelism)___			jobGraph.addVertex(task)___			final Configuration config = new Configuration()___			final HighAvailabilityServices highAvailabilityServices = HighAvailabilityServicesUtils.createAvailableOrEmbeddedServices(_				config,_				TestingUtils.defaultExecutor())___			ActorGateway jobManger = null__			ActorGateway taskManager = null___			_			_			_			testBufferPool = networkBufferPool.createBufferPool(1, Integer.MAX_VALUE)__			final List<Buffer> buffers = new ArrayList<>()__			while (true) {_				Buffer buffer = testBufferPool.requestBuffer()__				if (buffer != null) {_					buffers.add(buffer)__				} else {_					break__				}_			}__			try {_				jobManger = TestingUtils.createJobManager(_					testActorSystem,_					TestingUtils.defaultExecutor(),_					TestingUtils.defaultExecutor(),_					config,_					highAvailabilityServices)___				config.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, parallelism)___				taskManager = TestingUtils.createTaskManager(_					testActorSystem,_					highAvailabilityServices,_					config,_					true,_					true)___				final ActorGateway jm = jobManger___				new Within(deadline) {_					@Override_					protected void run() {_						try {_							ActorGateway testActor = new AkkaActorGateway(getTestActor(), HighAvailabilityServices.DEFAULT_LEADER_ID)___							_							JobClient.submitJobDetached(_									new AkkaJobManagerGateway(jm),_									config,_									jobGraph,_									Time.milliseconds(deadline.toMillis()),_									ClassLoader.getSystemClassLoader())___							jm.tell(new WaitForAllVerticesToBeRunning(jobGraph.getJobID()), testActor)___							expectMsgEquals(new AllVerticesRunning(jobGraph.getJobID()))___							_							jm.tell(new RequestExecutionGraph(jobGraph.getJobID()), testActor)___							ExecutionGraphFound executionGraphResponse =_									expectMsgClass(ExecutionGraphFound.class)___							ExecutionGraph executionGraph = (ExecutionGraph) executionGraphResponse.executionGraph()__							ExecutionJobVertex vertex = executionGraph.getJobVertex(task.getID())___							StackTraceSampleCoordinator coordinator = new StackTraceSampleCoordinator(_									testActorSystem.dispatcher(), 60000)___							_							BackPressureStatsTrackerImpl statsTracker = new BackPressureStatsTrackerImpl(_								coordinator,_								100 * 1000,_								20,_								Integer.MAX_VALUE,_								Time.milliseconds(10L))___							int numAttempts = 10___							int nextSampleId = 0___							_							_							_							for (int attempt = 0_ attempt < numAttempts_ attempt++) {_								try {_									OperatorBackPressureStats stats = triggerStatsSample(statsTracker, vertex)___									Assert.assertEquals(nextSampleId + attempt, stats.getSampleId())__									Assert.assertEquals(parallelism, stats.getNumberOfSubTasks())__									Assert.assertEquals(1.0, stats.getMaxBackPressureRatio(), 0.0)___									for (int i = 0_ i < parallelism_ i++) {_										Assert.assertEquals(1.0, stats.getBackPressureRatio(i), 0.0)__									}__									nextSampleId = stats.getSampleId() + 1___									break__								} catch (Throwable t) {_									if (attempt == numAttempts - 1) {_										throw t__									} else {_										Thread.sleep(500)__									}_								}_							}__							_							_							_							for (Buffer buf : buffers) {_								buf.recycleBuffer()__								Assert.assertTrue(buf.isRecycled())__							}__							_							_							while (testBufferPool.getNumberOfAvailableMemorySegments() < 100) {_								Thread.sleep(100)__							}__							_							for (int attempt = 0_ attempt < numAttempts_ attempt++) {_								try {_									OperatorBackPressureStats stats = triggerStatsSample(statsTracker, vertex)___									Assert.assertEquals(nextSampleId + attempt, stats.getSampleId())__									Assert.assertEquals(parallelism, stats.getNumberOfSubTasks())___									_									for (int i = 0_ i < parallelism_ i++) {_										Assert.assertEquals(0.0, stats.getBackPressureRatio(i), 0.0)__									}__									break__								} catch (Throwable t) {_									if (attempt == numAttempts - 1) {_										throw t__									} else {_										Thread.sleep(500)__									}_								}_							}__							_							jm.tell(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), testActor)___							_							jm.tell(new JobManagerMessages.CancelJob(jobGraph.getJobID()))___							_							expectMsgEquals(true)___							_							_							_							statsTracker.invalidateOperatorStatsCache()__							Assert.assertFalse("Unexpected trigger", statsTracker.triggerStackTraceSample(vertex))___						} catch (Exception e) {_							e.printStackTrace()__							Assert.fail(e.getMessage())__						}_					}_				}__			} finally {_				TestingUtils.stopActor(jobManger)__				TestingUtils.stopActor(taskManager)___				highAvailabilityServices.closeAndCleanupAllData()___				testBufferPool.lazyDestroy()__			}_		}}__	};tests,a,simple,fake,back,pressured,task,back,pressure,is,assumed,when,sampled,stack,traces,are,in,blocking,buffer,requests;test,public,void,test,back,pressured,producer,throws,exception,new,java,test,kit,test,actor,system,final,finite,duration,deadline,new,finite,duration,60,time,unit,seconds,final,job,graph,job,graph,new,job,graph,final,int,parallelism,4,final,job,vertex,task,new,job,vertex,task,task,set,invokable,class,back,pressured,task,class,task,set,parallelism,parallelism,job,graph,add,vertex,task,final,configuration,config,new,configuration,final,high,availability,services,high,availability,services,high,availability,services,utils,create,available,or,embedded,services,config,testing,utils,default,executor,actor,gateway,job,manger,null,actor,gateway,task,manager,null,test,buffer,pool,network,buffer,pool,create,buffer,pool,1,integer,final,list,buffer,buffers,new,array,list,while,true,buffer,buffer,test,buffer,pool,request,buffer,if,buffer,null,buffers,add,buffer,else,break,try,job,manger,testing,utils,create,job,manager,test,actor,system,testing,utils,default,executor,testing,utils,default,executor,config,high,availability,services,config,set,integer,config,constants,parallelism,task,manager,testing,utils,create,task,manager,test,actor,system,high,availability,services,config,true,true,final,actor,gateway,jm,job,manger,new,within,deadline,override,protected,void,run,try,actor,gateway,test,actor,new,akka,actor,gateway,get,test,actor,high,availability,services,job,client,submit,job,detached,new,akka,job,manager,gateway,jm,config,job,graph,time,milliseconds,deadline,to,millis,class,loader,get,system,class,loader,jm,tell,new,wait,for,all,vertices,to,be,running,job,graph,get,job,id,test,actor,expect,msg,equals,new,all,vertices,running,job,graph,get,job,id,jm,tell,new,request,execution,graph,job,graph,get,job,id,test,actor,execution,graph,found,execution,graph,response,expect,msg,class,execution,graph,found,class,execution,graph,execution,graph,execution,graph,execution,graph,response,execution,graph,execution,job,vertex,vertex,execution,graph,get,job,vertex,task,get,id,stack,trace,sample,coordinator,coordinator,new,stack,trace,sample,coordinator,test,actor,system,dispatcher,60000,back,pressure,stats,tracker,impl,stats,tracker,new,back,pressure,stats,tracker,impl,coordinator,100,1000,20,integer,time,milliseconds,10l,int,num,attempts,10,int,next,sample,id,0,for,int,attempt,0,attempt,num,attempts,attempt,try,operator,back,pressure,stats,stats,trigger,stats,sample,stats,tracker,vertex,assert,assert,equals,next,sample,id,attempt,stats,get,sample,id,assert,assert,equals,parallelism,stats,get,number,of,sub,tasks,assert,assert,equals,1,0,stats,get,max,back,pressure,ratio,0,0,for,int,i,0,i,parallelism,i,assert,assert,equals,1,0,stats,get,back,pressure,ratio,i,0,0,next,sample,id,stats,get,sample,id,1,break,catch,throwable,t,if,attempt,num,attempts,1,throw,t,else,thread,sleep,500,for,buffer,buf,buffers,buf,recycle,buffer,assert,assert,true,buf,is,recycled,while,test,buffer,pool,get,number,of,available,memory,segments,100,thread,sleep,100,for,int,attempt,0,attempt,num,attempts,attempt,try,operator,back,pressure,stats,stats,trigger,stats,sample,stats,tracker,vertex,assert,assert,equals,next,sample,id,attempt,stats,get,sample,id,assert,assert,equals,parallelism,stats,get,number,of,sub,tasks,for,int,i,0,i,parallelism,i,assert,assert,equals,0,0,stats,get,back,pressure,ratio,i,0,0,break,catch,throwable,t,if,attempt,num,attempts,1,throw,t,else,thread,sleep,500,jm,tell,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,test,actor,jm,tell,new,job,manager,messages,cancel,job,job,graph,get,job,id,expect,msg,equals,true,stats,tracker,invalidate,operator,stats,cache,assert,assert,false,unexpected,trigger,stats,tracker,trigger,stack,trace,sample,vertex,catch,exception,e,e,print,stack,trace,assert,fail,e,get,message,finally,testing,utils,stop,actor,job,manger,testing,utils,stop,actor,task,manager,high,availability,services,close,and,cleanup,all,data,test,buffer,pool,lazy,destroy
BackPressureStatsTrackerImplITCase -> @Test 	public void testBackPressuredProducer() throws Exception;1519039274;Tests a simple fake-back pressured task. Back pressure is assumed when_sampled stack traces are in blocking buffer requests.;@Test_	public void testBackPressuredProducer() throws Exception {_		new JavaTestKit(testActorSystem) {{_			final FiniteDuration deadline = new FiniteDuration(60, TimeUnit.SECONDS)___			_			final JobGraph jobGraph = new JobGraph()__			final int parallelism = 4___			final JobVertex task = new JobVertex("Task")__			task.setInvokableClass(BackPressuredTask.class)__			task.setParallelism(parallelism)___			jobGraph.addVertex(task)___			final Configuration config = new Configuration()___			final HighAvailabilityServices highAvailabilityServices = HighAvailabilityServicesUtils.createAvailableOrEmbeddedServices(_				config,_				TestingUtils.defaultExecutor())___			ActorGateway jobManger = null__			ActorGateway taskManager = null___			_			_			_			testBufferPool = networkBufferPool.createBufferPool(1, Integer.MAX_VALUE)__			final List<Buffer> buffers = new ArrayList<>()__			while (true) {_				Buffer buffer = testBufferPool.requestBuffer()__				if (buffer != null) {_					buffers.add(buffer)__				} else {_					break__				}_			}__			try {_				jobManger = TestingUtils.createJobManager(_					testActorSystem,_					TestingUtils.defaultExecutor(),_					TestingUtils.defaultExecutor(),_					config,_					highAvailabilityServices)___				config.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, parallelism)___				taskManager = TestingUtils.createTaskManager(_					testActorSystem,_					highAvailabilityServices,_					config,_					true,_					true)___				final ActorGateway jm = jobManger___				new Within(deadline) {_					@Override_					protected void run() {_						try {_							ActorGateway testActor = new AkkaActorGateway(getTestActor(), HighAvailabilityServices.DEFAULT_LEADER_ID)___							_							JobClient.submitJobDetached(_									new AkkaJobManagerGateway(jm),_									config,_									jobGraph,_									Time.milliseconds(deadline.toMillis()),_									ClassLoader.getSystemClassLoader())___							jm.tell(new WaitForAllVerticesToBeRunning(jobGraph.getJobID()), testActor)___							expectMsgEquals(new AllVerticesRunning(jobGraph.getJobID()))___							_							jm.tell(new RequestExecutionGraph(jobGraph.getJobID()), testActor)___							ExecutionGraphFound executionGraphResponse =_									expectMsgClass(ExecutionGraphFound.class)___							ExecutionGraph executionGraph = (ExecutionGraph) executionGraphResponse.executionGraph()__							ExecutionJobVertex vertex = executionGraph.getJobVertex(task.getID())___							StackTraceSampleCoordinator coordinator = new StackTraceSampleCoordinator(_									testActorSystem.dispatcher(), 60000)___							_							BackPressureStatsTrackerImpl statsTracker = new BackPressureStatsTrackerImpl(_								coordinator,_								100 * 1000,_								20,_								Integer.MAX_VALUE,_								Time.milliseconds(10L))___							int numAttempts = 10___							int nextSampleId = 0___							_							_							_							for (int attempt = 0_ attempt < numAttempts_ attempt++) {_								try {_									OperatorBackPressureStats stats = triggerStatsSample(statsTracker, vertex)___									Assert.assertEquals(nextSampleId + attempt, stats.getSampleId())__									Assert.assertEquals(parallelism, stats.getNumberOfSubTasks())__									Assert.assertEquals(1.0, stats.getMaxBackPressureRatio(), 0.0)___									for (int i = 0_ i < parallelism_ i++) {_										Assert.assertEquals(1.0, stats.getBackPressureRatio(i), 0.0)__									}__									nextSampleId = stats.getSampleId() + 1___									break__								} catch (Throwable t) {_									if (attempt == numAttempts - 1) {_										throw t__									} else {_										Thread.sleep(500)__									}_								}_							}__							_							_							_							for (Buffer buf : buffers) {_								buf.recycleBuffer()__								Assert.assertTrue(buf.isRecycled())__							}__							_							_							while (testBufferPool.getNumberOfAvailableMemorySegments() < 100) {_								Thread.sleep(100)__							}__							_							for (int attempt = 0_ attempt < numAttempts_ attempt++) {_								try {_									OperatorBackPressureStats stats = triggerStatsSample(statsTracker, vertex)___									Assert.assertEquals(nextSampleId + attempt, stats.getSampleId())__									Assert.assertEquals(parallelism, stats.getNumberOfSubTasks())___									_									for (int i = 0_ i < parallelism_ i++) {_										Assert.assertEquals(0.0, stats.getBackPressureRatio(i), 0.0)__									}__									break__								} catch (Throwable t) {_									if (attempt == numAttempts - 1) {_										throw t__									} else {_										Thread.sleep(500)__									}_								}_							}__							_							jm.tell(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), testActor)___							_							jm.tell(new JobManagerMessages.CancelJob(jobGraph.getJobID()))___							_							expectMsgEquals(true)___							_							_							_							statsTracker.invalidateOperatorStatsCache()__							Assert.assertFalse("Unexpected trigger", statsTracker.triggerStackTraceSample(vertex))___						} catch (Exception e) {_							e.printStackTrace()__							Assert.fail(e.getMessage())__						}_					}_				}__			} finally {_				TestingUtils.stopActor(jobManger)__				TestingUtils.stopActor(taskManager)___				highAvailabilityServices.closeAndCleanupAllData()___				testBufferPool.lazyDestroy()__			}_		}}__	};tests,a,simple,fake,back,pressured,task,back,pressure,is,assumed,when,sampled,stack,traces,are,in,blocking,buffer,requests;test,public,void,test,back,pressured,producer,throws,exception,new,java,test,kit,test,actor,system,final,finite,duration,deadline,new,finite,duration,60,time,unit,seconds,final,job,graph,job,graph,new,job,graph,final,int,parallelism,4,final,job,vertex,task,new,job,vertex,task,task,set,invokable,class,back,pressured,task,class,task,set,parallelism,parallelism,job,graph,add,vertex,task,final,configuration,config,new,configuration,final,high,availability,services,high,availability,services,high,availability,services,utils,create,available,or,embedded,services,config,testing,utils,default,executor,actor,gateway,job,manger,null,actor,gateway,task,manager,null,test,buffer,pool,network,buffer,pool,create,buffer,pool,1,integer,final,list,buffer,buffers,new,array,list,while,true,buffer,buffer,test,buffer,pool,request,buffer,if,buffer,null,buffers,add,buffer,else,break,try,job,manger,testing,utils,create,job,manager,test,actor,system,testing,utils,default,executor,testing,utils,default,executor,config,high,availability,services,config,set,integer,config,constants,parallelism,task,manager,testing,utils,create,task,manager,test,actor,system,high,availability,services,config,true,true,final,actor,gateway,jm,job,manger,new,within,deadline,override,protected,void,run,try,actor,gateway,test,actor,new,akka,actor,gateway,get,test,actor,high,availability,services,job,client,submit,job,detached,new,akka,job,manager,gateway,jm,config,job,graph,time,milliseconds,deadline,to,millis,class,loader,get,system,class,loader,jm,tell,new,wait,for,all,vertices,to,be,running,job,graph,get,job,id,test,actor,expect,msg,equals,new,all,vertices,running,job,graph,get,job,id,jm,tell,new,request,execution,graph,job,graph,get,job,id,test,actor,execution,graph,found,execution,graph,response,expect,msg,class,execution,graph,found,class,execution,graph,execution,graph,execution,graph,execution,graph,response,execution,graph,execution,job,vertex,vertex,execution,graph,get,job,vertex,task,get,id,stack,trace,sample,coordinator,coordinator,new,stack,trace,sample,coordinator,test,actor,system,dispatcher,60000,back,pressure,stats,tracker,impl,stats,tracker,new,back,pressure,stats,tracker,impl,coordinator,100,1000,20,integer,time,milliseconds,10l,int,num,attempts,10,int,next,sample,id,0,for,int,attempt,0,attempt,num,attempts,attempt,try,operator,back,pressure,stats,stats,trigger,stats,sample,stats,tracker,vertex,assert,assert,equals,next,sample,id,attempt,stats,get,sample,id,assert,assert,equals,parallelism,stats,get,number,of,sub,tasks,assert,assert,equals,1,0,stats,get,max,back,pressure,ratio,0,0,for,int,i,0,i,parallelism,i,assert,assert,equals,1,0,stats,get,back,pressure,ratio,i,0,0,next,sample,id,stats,get,sample,id,1,break,catch,throwable,t,if,attempt,num,attempts,1,throw,t,else,thread,sleep,500,for,buffer,buf,buffers,buf,recycle,buffer,assert,assert,true,buf,is,recycled,while,test,buffer,pool,get,number,of,available,memory,segments,100,thread,sleep,100,for,int,attempt,0,attempt,num,attempts,attempt,try,operator,back,pressure,stats,stats,trigger,stats,sample,stats,tracker,vertex,assert,assert,equals,next,sample,id,attempt,stats,get,sample,id,assert,assert,equals,parallelism,stats,get,number,of,sub,tasks,for,int,i,0,i,parallelism,i,assert,assert,equals,0,0,stats,get,back,pressure,ratio,i,0,0,break,catch,throwable,t,if,attempt,num,attempts,1,throw,t,else,thread,sleep,500,jm,tell,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,test,actor,jm,tell,new,job,manager,messages,cancel,job,job,graph,get,job,id,expect,msg,equals,true,stats,tracker,invalidate,operator,stats,cache,assert,assert,false,unexpected,trigger,stats,tracker,trigger,stack,trace,sample,vertex,catch,exception,e,e,print,stack,trace,assert,fail,e,get,message,finally,testing,utils,stop,actor,job,manger,testing,utils,stop,actor,task,manager,high,availability,services,close,and,cleanup,all,data,test,buffer,pool,lazy,destroy
BackPressureStatsTrackerImplITCase -> @Test 	public void testBackPressuredProducer() throws Exception;1524570317;Tests a simple fake-back pressured task. Back pressure is assumed when_sampled stack traces are in blocking buffer requests.;@Test_	public void testBackPressuredProducer() throws Exception {_		new JavaTestKit(testActorSystem) {{_			final FiniteDuration deadline = new FiniteDuration(60, TimeUnit.SECONDS)___			_			final JobGraph jobGraph = new JobGraph()__			final int parallelism = 4___			final JobVertex task = new JobVertex("Task")__			task.setInvokableClass(BackPressuredTask.class)__			task.setParallelism(parallelism)___			jobGraph.addVertex(task)___			final Configuration config = new Configuration()___			final HighAvailabilityServices highAvailabilityServices = HighAvailabilityServicesUtils.createAvailableOrEmbeddedServices(_				config,_				TestingUtils.defaultExecutor())___			ActorGateway jobManger = null__			ActorGateway taskManager = null___			_			_			_			testBufferPool = networkBufferPool.createBufferPool(1, Integer.MAX_VALUE)__			final List<Buffer> buffers = new ArrayList<>()__			while (true) {_				Buffer buffer = testBufferPool.requestBuffer()__				if (buffer != null) {_					buffers.add(buffer)__				} else {_					break__				}_			}__			try {_				jobManger = TestingUtils.createJobManager(_					testActorSystem,_					TestingUtils.defaultExecutor(),_					TestingUtils.defaultExecutor(),_					config,_					highAvailabilityServices)___				config.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, parallelism)___				taskManager = TestingUtils.createTaskManager(_					testActorSystem,_					highAvailabilityServices,_					config,_					true,_					true)___				final ActorGateway jm = jobManger___				new Within(deadline) {_					@Override_					protected void run() {_						try {_							ActorGateway testActor = new AkkaActorGateway(getTestActor(), HighAvailabilityServices.DEFAULT_LEADER_ID)___							_							JobClient.submitJobDetached(_									new AkkaJobManagerGateway(jm),_									config,_									jobGraph,_									Time.milliseconds(deadline.toMillis()),_									ClassLoader.getSystemClassLoader())___							jm.tell(new WaitForAllVerticesToBeRunning(jobGraph.getJobID()), testActor)___							expectMsgEquals(new AllVerticesRunning(jobGraph.getJobID()))___							_							jm.tell(new RequestExecutionGraph(jobGraph.getJobID()), testActor)___							ExecutionGraphFound executionGraphResponse =_									expectMsgClass(ExecutionGraphFound.class)___							ExecutionGraph executionGraph = (ExecutionGraph) executionGraphResponse.executionGraph()__							ExecutionJobVertex vertex = executionGraph.getJobVertex(task.getID())___							StackTraceSampleCoordinator coordinator = new StackTraceSampleCoordinator(_									testActorSystem.dispatcher(), 60000)___							_							BackPressureStatsTrackerImpl statsTracker = new BackPressureStatsTrackerImpl(_								coordinator,_								100 * 1000,_								20,_								Integer.MAX_VALUE,_								Time.milliseconds(10L))___							int numAttempts = 10___							int nextSampleId = 0___							_							_							_							for (int attempt = 0_ attempt < numAttempts_ attempt++) {_								try {_									OperatorBackPressureStats stats = triggerStatsSample(statsTracker, vertex)___									Assert.assertEquals(nextSampleId + attempt, stats.getSampleId())__									Assert.assertEquals(parallelism, stats.getNumberOfSubTasks())__									Assert.assertEquals(1.0, stats.getMaxBackPressureRatio(), 0.0)___									for (int i = 0_ i < parallelism_ i++) {_										Assert.assertEquals(1.0, stats.getBackPressureRatio(i), 0.0)__									}__									nextSampleId = stats.getSampleId() + 1___									break__								} catch (Throwable t) {_									if (attempt == numAttempts - 1) {_										throw t__									} else {_										Thread.sleep(500)__									}_								}_							}__							_							_							_							for (Buffer buf : buffers) {_								buf.recycleBuffer()__								Assert.assertTrue(buf.isRecycled())__							}__							_							_							while (testBufferPool.getNumberOfAvailableMemorySegments() < 100) {_								Thread.sleep(100)__							}__							_							for (int attempt = 0_ attempt < numAttempts_ attempt++) {_								try {_									OperatorBackPressureStats stats = triggerStatsSample(statsTracker, vertex)___									Assert.assertEquals(nextSampleId + attempt, stats.getSampleId())__									Assert.assertEquals(parallelism, stats.getNumberOfSubTasks())___									_									for (int i = 0_ i < parallelism_ i++) {_										Assert.assertEquals(0.0, stats.getBackPressureRatio(i), 0.0)__									}__									break__								} catch (Throwable t) {_									if (attempt == numAttempts - 1) {_										throw t__									} else {_										Thread.sleep(500)__									}_								}_							}__							_							jm.tell(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()), testActor)___							_							jm.tell(new JobManagerMessages.CancelJob(jobGraph.getJobID()))___							_							expectMsgEquals(true)___							_							_							_							statsTracker.invalidateOperatorStatsCache()__							Assert.assertFalse("Unexpected trigger", statsTracker.triggerStackTraceSample(vertex))___						} catch (Exception e) {_							e.printStackTrace()__							Assert.fail(e.getMessage())__						}_					}_				}__			} finally {_				TestingUtils.stopActor(jobManger)__				TestingUtils.stopActor(taskManager)___				highAvailabilityServices.closeAndCleanupAllData()___				testBufferPool.lazyDestroy()__			}_		}}__	};tests,a,simple,fake,back,pressured,task,back,pressure,is,assumed,when,sampled,stack,traces,are,in,blocking,buffer,requests;test,public,void,test,back,pressured,producer,throws,exception,new,java,test,kit,test,actor,system,final,finite,duration,deadline,new,finite,duration,60,time,unit,seconds,final,job,graph,job,graph,new,job,graph,final,int,parallelism,4,final,job,vertex,task,new,job,vertex,task,task,set,invokable,class,back,pressured,task,class,task,set,parallelism,parallelism,job,graph,add,vertex,task,final,configuration,config,new,configuration,final,high,availability,services,high,availability,services,high,availability,services,utils,create,available,or,embedded,services,config,testing,utils,default,executor,actor,gateway,job,manger,null,actor,gateway,task,manager,null,test,buffer,pool,network,buffer,pool,create,buffer,pool,1,integer,final,list,buffer,buffers,new,array,list,while,true,buffer,buffer,test,buffer,pool,request,buffer,if,buffer,null,buffers,add,buffer,else,break,try,job,manger,testing,utils,create,job,manager,test,actor,system,testing,utils,default,executor,testing,utils,default,executor,config,high,availability,services,config,set,integer,task,manager,options,parallelism,task,manager,testing,utils,create,task,manager,test,actor,system,high,availability,services,config,true,true,final,actor,gateway,jm,job,manger,new,within,deadline,override,protected,void,run,try,actor,gateway,test,actor,new,akka,actor,gateway,get,test,actor,high,availability,services,job,client,submit,job,detached,new,akka,job,manager,gateway,jm,config,job,graph,time,milliseconds,deadline,to,millis,class,loader,get,system,class,loader,jm,tell,new,wait,for,all,vertices,to,be,running,job,graph,get,job,id,test,actor,expect,msg,equals,new,all,vertices,running,job,graph,get,job,id,jm,tell,new,request,execution,graph,job,graph,get,job,id,test,actor,execution,graph,found,execution,graph,response,expect,msg,class,execution,graph,found,class,execution,graph,execution,graph,execution,graph,execution,graph,response,execution,graph,execution,job,vertex,vertex,execution,graph,get,job,vertex,task,get,id,stack,trace,sample,coordinator,coordinator,new,stack,trace,sample,coordinator,test,actor,system,dispatcher,60000,back,pressure,stats,tracker,impl,stats,tracker,new,back,pressure,stats,tracker,impl,coordinator,100,1000,20,integer,time,milliseconds,10l,int,num,attempts,10,int,next,sample,id,0,for,int,attempt,0,attempt,num,attempts,attempt,try,operator,back,pressure,stats,stats,trigger,stats,sample,stats,tracker,vertex,assert,assert,equals,next,sample,id,attempt,stats,get,sample,id,assert,assert,equals,parallelism,stats,get,number,of,sub,tasks,assert,assert,equals,1,0,stats,get,max,back,pressure,ratio,0,0,for,int,i,0,i,parallelism,i,assert,assert,equals,1,0,stats,get,back,pressure,ratio,i,0,0,next,sample,id,stats,get,sample,id,1,break,catch,throwable,t,if,attempt,num,attempts,1,throw,t,else,thread,sleep,500,for,buffer,buf,buffers,buf,recycle,buffer,assert,assert,true,buf,is,recycled,while,test,buffer,pool,get,number,of,available,memory,segments,100,thread,sleep,100,for,int,attempt,0,attempt,num,attempts,attempt,try,operator,back,pressure,stats,stats,trigger,stats,sample,stats,tracker,vertex,assert,assert,equals,next,sample,id,attempt,stats,get,sample,id,assert,assert,equals,parallelism,stats,get,number,of,sub,tasks,for,int,i,0,i,parallelism,i,assert,assert,equals,0,0,stats,get,back,pressure,ratio,i,0,0,break,catch,throwable,t,if,attempt,num,attempts,1,throw,t,else,thread,sleep,500,jm,tell,new,testing,job,manager,messages,notify,when,job,removed,job,graph,get,job,id,test,actor,jm,tell,new,job,manager,messages,cancel,job,job,graph,get,job,id,expect,msg,equals,true,stats,tracker,invalidate,operator,stats,cache,assert,assert,false,unexpected,trigger,stats,tracker,trigger,stack,trace,sample,vertex,catch,exception,e,e,print,stack,trace,assert,fail,e,get,message,finally,testing,utils,stop,actor,job,manger,testing,utils,stop,actor,task,manager,high,availability,services,close,and,cleanup,all,data,test,buffer,pool,lazy,destroy
