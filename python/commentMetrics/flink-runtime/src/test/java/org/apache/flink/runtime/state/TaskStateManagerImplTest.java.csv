# id;timestamp;commentText;codeText;commentWords;codeWords
TaskStateManagerImplTest -> @Test 	public void testStateReportingAndRetrieving();1519568061;Test reporting and retrieving prioritized local and remote state.;@Test_	public void testStateReportingAndRetrieving() {__		JobID jobID = new JobID()__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID()___		TestCheckpointResponder testCheckpointResponder = new TestCheckpointResponder()__		TestTaskLocalStateStore testTaskLocalStateStore = new TestTaskLocalStateStore()___		TaskStateManager taskStateManager = taskStateManager(_			jobID,_			executionAttemptID,_			testCheckpointResponder,_			null,_			testTaskLocalStateStore)___		__		CheckpointMetaData checkpointMetaData = new CheckpointMetaData(74L, 11L)__		CheckpointMetrics checkpointMetrics = new CheckpointMetrics()__		TaskStateSnapshot jmTaskStateSnapshot = new TaskStateSnapshot()___		OperatorID operatorID_1 = new OperatorID(1L, 1L)__		OperatorID operatorID_2 = new OperatorID(2L, 2L)__		OperatorID operatorID_3 = new OperatorID(3L, 3L)___		Assert.assertFalse(taskStateManager.prioritizedOperatorState(operatorID_1).isRestored())__		Assert.assertFalse(taskStateManager.prioritizedOperatorState(operatorID_2).isRestored())__		Assert.assertFalse(taskStateManager.prioritizedOperatorState(operatorID_3).isRestored())___		KeyGroupRange keyGroupRange = new KeyGroupRange(0,1)__		_		OperatorSubtaskState jmOperatorSubtaskState_1 =_			new OperatorSubtaskState(null, null, StateHandleDummyUtil.createNewKeyedStateHandle(keyGroupRange), null)__		_		OperatorSubtaskState jmOperatorSubtaskState_2 =_			new OperatorSubtaskState(null, null, null, StateHandleDummyUtil.createNewKeyedStateHandle(keyGroupRange))___		jmTaskStateSnapshot.putSubtaskStateByOperatorID(operatorID_1, jmOperatorSubtaskState_1)__		jmTaskStateSnapshot.putSubtaskStateByOperatorID(operatorID_2, jmOperatorSubtaskState_2)___		TaskStateSnapshot tmTaskStateSnapshot = new TaskStateSnapshot()___		_		OperatorSubtaskState tmOperatorSubtaskState_1 =_			new OperatorSubtaskState(null, null, StateHandleDummyUtil.createNewKeyedStateHandle(keyGroupRange), null)___		tmTaskStateSnapshot.putSubtaskStateByOperatorID(operatorID_1, tmOperatorSubtaskState_1)___		taskStateManager.reportTaskStateSnapshots(_			checkpointMetaData,_			checkpointMetrics,_			jmTaskStateSnapshot,_			tmTaskStateSnapshot)___		TestCheckpointResponder.AcknowledgeReport acknowledgeReport =_			testCheckpointResponder.getAcknowledgeReports().get(0)___		_		Assert.assertEquals(checkpointMetaData.getCheckpointId(), acknowledgeReport.getCheckpointId())__		Assert.assertEquals(checkpointMetrics, acknowledgeReport.getCheckpointMetrics())__		Assert.assertEquals(executionAttemptID, acknowledgeReport.getExecutionAttemptID())__		Assert.assertEquals(jobID, acknowledgeReport.getJobID())__		Assert.assertEquals(jmTaskStateSnapshot, acknowledgeReport.getSubtaskState())__		Assert.assertEquals(tmTaskStateSnapshot, testTaskLocalStateStore.retrieveLocalState(checkpointMetaData.getCheckpointId()))___		__		JobManagerTaskRestore taskRestore = new JobManagerTaskRestore(_			checkpointMetaData.getCheckpointId(),_			acknowledgeReport.getSubtaskState())___		taskStateManager = taskStateManager(_			jobID,_			executionAttemptID,_			testCheckpointResponder,_			taskRestore,_			testTaskLocalStateStore)___		_		PrioritizedOperatorSubtaskState prioritized_1 = taskStateManager.prioritizedOperatorState(operatorID_1)__		_		PrioritizedOperatorSubtaskState prioritized_2 = taskStateManager.prioritizedOperatorState(operatorID_2)__		_		PrioritizedOperatorSubtaskState prioritized_3 = taskStateManager.prioritizedOperatorState(operatorID_3)___		Assert.assertTrue(prioritized_1.isRestored())__		Assert.assertTrue(prioritized_2.isRestored())__		Assert.assertFalse(prioritized_3.isRestored())__		Assert.assertFalse(taskStateManager.prioritizedOperatorState(new OperatorID()).isRestored())___		_		Iterator<StateObjectCollection<KeyedStateHandle>> prioritizedManagedKeyedState_1 =_			prioritized_1.getPrioritizedManagedKeyedState()___		Assert.assertTrue(prioritizedManagedKeyedState_1.hasNext())__		StateObjectCollection<KeyedStateHandle> current = prioritizedManagedKeyedState_1.next()__		KeyedStateHandle keyedStateHandleExp = tmOperatorSubtaskState_1.getManagedKeyedState().iterator().next()__		KeyedStateHandle keyedStateHandleAct = current.iterator().next()__		Assert.assertTrue(keyedStateHandleExp == keyedStateHandleAct)__		Assert.assertTrue(prioritizedManagedKeyedState_1.hasNext())__		current = prioritizedManagedKeyedState_1.next()__		keyedStateHandleExp = jmOperatorSubtaskState_1.getManagedKeyedState().iterator().next()__		keyedStateHandleAct = current.iterator().next()__		Assert.assertTrue(keyedStateHandleExp == keyedStateHandleAct)__		Assert.assertFalse(prioritizedManagedKeyedState_1.hasNext())___		_		Iterator<StateObjectCollection<KeyedStateHandle>> prioritizedRawKeyedState_2 =_			prioritized_2.getPrioritizedRawKeyedState()___		Assert.assertTrue(prioritizedRawKeyedState_2.hasNext())__		current = prioritizedRawKeyedState_2.next()__		keyedStateHandleExp = jmOperatorSubtaskState_2.getRawKeyedState().iterator().next()__		keyedStateHandleAct = current.iterator().next()__		Assert.assertTrue(keyedStateHandleExp == keyedStateHandleAct)__		Assert.assertFalse(prioritizedRawKeyedState_2.hasNext())__	};test,reporting,and,retrieving,prioritized,local,and,remote,state;test,public,void,test,state,reporting,and,retrieving,job,id,job,id,new,job,id,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,test,checkpoint,responder,test,checkpoint,responder,new,test,checkpoint,responder,test,task,local,state,store,test,task,local,state,store,new,test,task,local,state,store,task,state,manager,task,state,manager,task,state,manager,job,id,execution,attempt,id,test,checkpoint,responder,null,test,task,local,state,store,checkpoint,meta,data,checkpoint,meta,data,new,checkpoint,meta,data,74l,11l,checkpoint,metrics,checkpoint,metrics,new,checkpoint,metrics,task,state,snapshot,jm,task,state,snapshot,new,task,state,snapshot,operator,id,new,operator,id,1l,1l,operator,id,new,operator,id,2l,2l,operator,id,new,operator,id,3l,3l,assert,assert,false,task,state,manager,prioritized,operator,state,is,restored,assert,assert,false,task,state,manager,prioritized,operator,state,is,restored,assert,assert,false,task,state,manager,prioritized,operator,state,is,restored,key,group,range,key,group,range,new,key,group,range,0,1,operator,subtask,state,new,operator,subtask,state,null,null,state,handle,dummy,util,create,new,keyed,state,handle,key,group,range,null,operator,subtask,state,new,operator,subtask,state,null,null,null,state,handle,dummy,util,create,new,keyed,state,handle,key,group,range,jm,task,state,snapshot,put,subtask,state,by,operator,id,jm,task,state,snapshot,put,subtask,state,by,operator,id,task,state,snapshot,tm,task,state,snapshot,new,task,state,snapshot,operator,subtask,state,new,operator,subtask,state,null,null,state,handle,dummy,util,create,new,keyed,state,handle,key,group,range,null,tm,task,state,snapshot,put,subtask,state,by,operator,id,task,state,manager,report,task,state,snapshots,checkpoint,meta,data,checkpoint,metrics,jm,task,state,snapshot,tm,task,state,snapshot,test,checkpoint,responder,acknowledge,report,acknowledge,report,test,checkpoint,responder,get,acknowledge,reports,get,0,assert,assert,equals,checkpoint,meta,data,get,checkpoint,id,acknowledge,report,get,checkpoint,id,assert,assert,equals,checkpoint,metrics,acknowledge,report,get,checkpoint,metrics,assert,assert,equals,execution,attempt,id,acknowledge,report,get,execution,attempt,id,assert,assert,equals,job,id,acknowledge,report,get,job,id,assert,assert,equals,jm,task,state,snapshot,acknowledge,report,get,subtask,state,assert,assert,equals,tm,task,state,snapshot,test,task,local,state,store,retrieve,local,state,checkpoint,meta,data,get,checkpoint,id,job,manager,task,restore,task,restore,new,job,manager,task,restore,checkpoint,meta,data,get,checkpoint,id,acknowledge,report,get,subtask,state,task,state,manager,task,state,manager,job,id,execution,attempt,id,test,checkpoint,responder,task,restore,test,task,local,state,store,prioritized,operator,subtask,state,task,state,manager,prioritized,operator,state,prioritized,operator,subtask,state,task,state,manager,prioritized,operator,state,prioritized,operator,subtask,state,task,state,manager,prioritized,operator,state,assert,assert,true,is,restored,assert,assert,true,is,restored,assert,assert,false,is,restored,assert,assert,false,task,state,manager,prioritized,operator,state,new,operator,id,is,restored,iterator,state,object,collection,keyed,state,handle,get,prioritized,managed,keyed,state,assert,assert,true,has,next,state,object,collection,keyed,state,handle,current,next,keyed,state,handle,keyed,state,handle,exp,get,managed,keyed,state,iterator,next,keyed,state,handle,keyed,state,handle,act,current,iterator,next,assert,assert,true,keyed,state,handle,exp,keyed,state,handle,act,assert,assert,true,has,next,current,next,keyed,state,handle,exp,get,managed,keyed,state,iterator,next,keyed,state,handle,act,current,iterator,next,assert,assert,true,keyed,state,handle,exp,keyed,state,handle,act,assert,assert,false,has,next,iterator,state,object,collection,keyed,state,handle,get,prioritized,raw,keyed,state,assert,assert,true,has,next,current,next,keyed,state,handle,exp,get,raw,keyed,state,iterator,next,keyed,state,handle,act,current,iterator,next,assert,assert,true,keyed,state,handle,exp,keyed,state,handle,act,assert,assert,false,has,next
TaskStateManagerImplTest -> @Test 	public void testStateReportingAndRetrieving();1519741691;Test reporting and retrieving prioritized local and remote state.;@Test_	public void testStateReportingAndRetrieving() {__		JobID jobID = new JobID()__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID()___		TestCheckpointResponder testCheckpointResponder = new TestCheckpointResponder()__		TestTaskLocalStateStore testTaskLocalStateStore = new TestTaskLocalStateStore()___		TaskStateManager taskStateManager = taskStateManager(_			jobID,_			executionAttemptID,_			testCheckpointResponder,_			null,_			testTaskLocalStateStore)___		__		CheckpointMetaData checkpointMetaData = new CheckpointMetaData(74L, 11L)__		CheckpointMetrics checkpointMetrics = new CheckpointMetrics()__		TaskStateSnapshot jmTaskStateSnapshot = new TaskStateSnapshot()___		OperatorID operatorID_1 = new OperatorID(1L, 1L)__		OperatorID operatorID_2 = new OperatorID(2L, 2L)__		OperatorID operatorID_3 = new OperatorID(3L, 3L)___		Assert.assertFalse(taskStateManager.prioritizedOperatorState(operatorID_1).isRestored())__		Assert.assertFalse(taskStateManager.prioritizedOperatorState(operatorID_2).isRestored())__		Assert.assertFalse(taskStateManager.prioritizedOperatorState(operatorID_3).isRestored())___		KeyGroupRange keyGroupRange = new KeyGroupRange(0,1)__		_		OperatorSubtaskState jmOperatorSubtaskState_1 =_			new OperatorSubtaskState(null, null, StateHandleDummyUtil.createNewKeyedStateHandle(keyGroupRange), null)__		_		OperatorSubtaskState jmOperatorSubtaskState_2 =_			new OperatorSubtaskState(null, null, null, StateHandleDummyUtil.createNewKeyedStateHandle(keyGroupRange))___		jmTaskStateSnapshot.putSubtaskStateByOperatorID(operatorID_1, jmOperatorSubtaskState_1)__		jmTaskStateSnapshot.putSubtaskStateByOperatorID(operatorID_2, jmOperatorSubtaskState_2)___		TaskStateSnapshot tmTaskStateSnapshot = new TaskStateSnapshot()___		_		OperatorSubtaskState tmOperatorSubtaskState_1 =_			new OperatorSubtaskState(null, null, StateHandleDummyUtil.createNewKeyedStateHandle(keyGroupRange), null)___		tmTaskStateSnapshot.putSubtaskStateByOperatorID(operatorID_1, tmOperatorSubtaskState_1)___		taskStateManager.reportTaskStateSnapshots(_			checkpointMetaData,_			checkpointMetrics,_			jmTaskStateSnapshot,_			tmTaskStateSnapshot)___		TestCheckpointResponder.AcknowledgeReport acknowledgeReport =_			testCheckpointResponder.getAcknowledgeReports().get(0)___		_		Assert.assertEquals(checkpointMetaData.getCheckpointId(), acknowledgeReport.getCheckpointId())__		Assert.assertEquals(checkpointMetrics, acknowledgeReport.getCheckpointMetrics())__		Assert.assertEquals(executionAttemptID, acknowledgeReport.getExecutionAttemptID())__		Assert.assertEquals(jobID, acknowledgeReport.getJobID())__		Assert.assertEquals(jmTaskStateSnapshot, acknowledgeReport.getSubtaskState())__		Assert.assertEquals(tmTaskStateSnapshot, testTaskLocalStateStore.retrieveLocalState(checkpointMetaData.getCheckpointId()))___		__		JobManagerTaskRestore taskRestore = new JobManagerTaskRestore(_			checkpointMetaData.getCheckpointId(),_			acknowledgeReport.getSubtaskState())___		taskStateManager = taskStateManager(_			jobID,_			executionAttemptID,_			testCheckpointResponder,_			taskRestore,_			testTaskLocalStateStore)___		_		PrioritizedOperatorSubtaskState prioritized_1 = taskStateManager.prioritizedOperatorState(operatorID_1)__		_		PrioritizedOperatorSubtaskState prioritized_2 = taskStateManager.prioritizedOperatorState(operatorID_2)__		_		PrioritizedOperatorSubtaskState prioritized_3 = taskStateManager.prioritizedOperatorState(operatorID_3)___		Assert.assertTrue(prioritized_1.isRestored())__		Assert.assertTrue(prioritized_2.isRestored())__		Assert.assertFalse(prioritized_3.isRestored())__		Assert.assertFalse(taskStateManager.prioritizedOperatorState(new OperatorID()).isRestored())___		_		Iterator<StateObjectCollection<KeyedStateHandle>> prioritizedManagedKeyedState_1 =_			prioritized_1.getPrioritizedManagedKeyedState().iterator()___		Assert.assertTrue(prioritizedManagedKeyedState_1.hasNext())__		StateObjectCollection<KeyedStateHandle> current = prioritizedManagedKeyedState_1.next()__		KeyedStateHandle keyedStateHandleExp = tmOperatorSubtaskState_1.getManagedKeyedState().iterator().next()__		KeyedStateHandle keyedStateHandleAct = current.iterator().next()__		Assert.assertTrue(keyedStateHandleExp == keyedStateHandleAct)__		Assert.assertTrue(prioritizedManagedKeyedState_1.hasNext())__		current = prioritizedManagedKeyedState_1.next()__		keyedStateHandleExp = jmOperatorSubtaskState_1.getManagedKeyedState().iterator().next()__		keyedStateHandleAct = current.iterator().next()__		Assert.assertTrue(keyedStateHandleExp == keyedStateHandleAct)__		Assert.assertFalse(prioritizedManagedKeyedState_1.hasNext())___		_		Iterator<StateObjectCollection<KeyedStateHandle>> prioritizedRawKeyedState_2 =_			prioritized_2.getPrioritizedRawKeyedState().iterator()___		Assert.assertTrue(prioritizedRawKeyedState_2.hasNext())__		current = prioritizedRawKeyedState_2.next()__		keyedStateHandleExp = jmOperatorSubtaskState_2.getRawKeyedState().iterator().next()__		keyedStateHandleAct = current.iterator().next()__		Assert.assertTrue(keyedStateHandleExp == keyedStateHandleAct)__		Assert.assertFalse(prioritizedRawKeyedState_2.hasNext())__	};test,reporting,and,retrieving,prioritized,local,and,remote,state;test,public,void,test,state,reporting,and,retrieving,job,id,job,id,new,job,id,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,test,checkpoint,responder,test,checkpoint,responder,new,test,checkpoint,responder,test,task,local,state,store,test,task,local,state,store,new,test,task,local,state,store,task,state,manager,task,state,manager,task,state,manager,job,id,execution,attempt,id,test,checkpoint,responder,null,test,task,local,state,store,checkpoint,meta,data,checkpoint,meta,data,new,checkpoint,meta,data,74l,11l,checkpoint,metrics,checkpoint,metrics,new,checkpoint,metrics,task,state,snapshot,jm,task,state,snapshot,new,task,state,snapshot,operator,id,new,operator,id,1l,1l,operator,id,new,operator,id,2l,2l,operator,id,new,operator,id,3l,3l,assert,assert,false,task,state,manager,prioritized,operator,state,is,restored,assert,assert,false,task,state,manager,prioritized,operator,state,is,restored,assert,assert,false,task,state,manager,prioritized,operator,state,is,restored,key,group,range,key,group,range,new,key,group,range,0,1,operator,subtask,state,new,operator,subtask,state,null,null,state,handle,dummy,util,create,new,keyed,state,handle,key,group,range,null,operator,subtask,state,new,operator,subtask,state,null,null,null,state,handle,dummy,util,create,new,keyed,state,handle,key,group,range,jm,task,state,snapshot,put,subtask,state,by,operator,id,jm,task,state,snapshot,put,subtask,state,by,operator,id,task,state,snapshot,tm,task,state,snapshot,new,task,state,snapshot,operator,subtask,state,new,operator,subtask,state,null,null,state,handle,dummy,util,create,new,keyed,state,handle,key,group,range,null,tm,task,state,snapshot,put,subtask,state,by,operator,id,task,state,manager,report,task,state,snapshots,checkpoint,meta,data,checkpoint,metrics,jm,task,state,snapshot,tm,task,state,snapshot,test,checkpoint,responder,acknowledge,report,acknowledge,report,test,checkpoint,responder,get,acknowledge,reports,get,0,assert,assert,equals,checkpoint,meta,data,get,checkpoint,id,acknowledge,report,get,checkpoint,id,assert,assert,equals,checkpoint,metrics,acknowledge,report,get,checkpoint,metrics,assert,assert,equals,execution,attempt,id,acknowledge,report,get,execution,attempt,id,assert,assert,equals,job,id,acknowledge,report,get,job,id,assert,assert,equals,jm,task,state,snapshot,acknowledge,report,get,subtask,state,assert,assert,equals,tm,task,state,snapshot,test,task,local,state,store,retrieve,local,state,checkpoint,meta,data,get,checkpoint,id,job,manager,task,restore,task,restore,new,job,manager,task,restore,checkpoint,meta,data,get,checkpoint,id,acknowledge,report,get,subtask,state,task,state,manager,task,state,manager,job,id,execution,attempt,id,test,checkpoint,responder,task,restore,test,task,local,state,store,prioritized,operator,subtask,state,task,state,manager,prioritized,operator,state,prioritized,operator,subtask,state,task,state,manager,prioritized,operator,state,prioritized,operator,subtask,state,task,state,manager,prioritized,operator,state,assert,assert,true,is,restored,assert,assert,true,is,restored,assert,assert,false,is,restored,assert,assert,false,task,state,manager,prioritized,operator,state,new,operator,id,is,restored,iterator,state,object,collection,keyed,state,handle,get,prioritized,managed,keyed,state,iterator,assert,assert,true,has,next,state,object,collection,keyed,state,handle,current,next,keyed,state,handle,keyed,state,handle,exp,get,managed,keyed,state,iterator,next,keyed,state,handle,keyed,state,handle,act,current,iterator,next,assert,assert,true,keyed,state,handle,exp,keyed,state,handle,act,assert,assert,true,has,next,current,next,keyed,state,handle,exp,get,managed,keyed,state,iterator,next,keyed,state,handle,act,current,iterator,next,assert,assert,true,keyed,state,handle,exp,keyed,state,handle,act,assert,assert,false,has,next,iterator,state,object,collection,keyed,state,handle,get,prioritized,raw,keyed,state,iterator,assert,assert,true,has,next,current,next,keyed,state,handle,exp,get,raw,keyed,state,iterator,next,keyed,state,handle,act,current,iterator,next,assert,assert,true,keyed,state,handle,exp,keyed,state,handle,act,assert,assert,false,has,next
TaskStateManagerImplTest -> @Test 	public void testStateReportingAndRetrieving();1526313052;Test reporting and retrieving prioritized local and remote state.;@Test_	public void testStateReportingAndRetrieving() {__		JobID jobID = new JobID()__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID()___		TestCheckpointResponder testCheckpointResponder = new TestCheckpointResponder()__		TestTaskLocalStateStore testTaskLocalStateStore = new TestTaskLocalStateStore()___		TaskStateManager taskStateManager = taskStateManager(_			jobID,_			executionAttemptID,_			testCheckpointResponder,_			null,_			testTaskLocalStateStore)___		__		CheckpointMetaData checkpointMetaData = new CheckpointMetaData(74L, 11L)__		CheckpointMetrics checkpointMetrics = new CheckpointMetrics()__		TaskStateSnapshot jmTaskStateSnapshot = new TaskStateSnapshot()___		OperatorID operatorID_1 = new OperatorID(1L, 1L)__		OperatorID operatorID_2 = new OperatorID(2L, 2L)__		OperatorID operatorID_3 = new OperatorID(3L, 3L)___		Assert.assertFalse(taskStateManager.prioritizedOperatorState(operatorID_1).isRestored())__		Assert.assertFalse(taskStateManager.prioritizedOperatorState(operatorID_2).isRestored())__		Assert.assertFalse(taskStateManager.prioritizedOperatorState(operatorID_3).isRestored())___		KeyGroupRange keyGroupRange = new KeyGroupRange(0,1)__		_		OperatorSubtaskState jmOperatorSubtaskState_1 =_			new OperatorSubtaskState(null, null, StateHandleDummyUtil.createNewKeyedStateHandle(keyGroupRange), null)__		_		OperatorSubtaskState jmOperatorSubtaskState_2 =_			new OperatorSubtaskState(null, null, null, StateHandleDummyUtil.createNewKeyedStateHandle(keyGroupRange))___		jmTaskStateSnapshot.putSubtaskStateByOperatorID(operatorID_1, jmOperatorSubtaskState_1)__		jmTaskStateSnapshot.putSubtaskStateByOperatorID(operatorID_2, jmOperatorSubtaskState_2)___		TaskStateSnapshot tmTaskStateSnapshot = new TaskStateSnapshot()___		_		OperatorSubtaskState tmOperatorSubtaskState_1 =_			new OperatorSubtaskState(null, null, StateHandleDummyUtil.createNewKeyedStateHandle(keyGroupRange), null)___		tmTaskStateSnapshot.putSubtaskStateByOperatorID(operatorID_1, tmOperatorSubtaskState_1)___		taskStateManager.reportTaskStateSnapshots(_			checkpointMetaData,_			checkpointMetrics,_			jmTaskStateSnapshot,_			tmTaskStateSnapshot)___		TestCheckpointResponder.AcknowledgeReport acknowledgeReport =_			testCheckpointResponder.getAcknowledgeReports().get(0)___		_		Assert.assertEquals(checkpointMetaData.getCheckpointId(), acknowledgeReport.getCheckpointId())__		Assert.assertEquals(checkpointMetrics, acknowledgeReport.getCheckpointMetrics())__		Assert.assertEquals(executionAttemptID, acknowledgeReport.getExecutionAttemptID())__		Assert.assertEquals(jobID, acknowledgeReport.getJobID())__		Assert.assertEquals(jmTaskStateSnapshot, acknowledgeReport.getSubtaskState())__		Assert.assertEquals(tmTaskStateSnapshot, testTaskLocalStateStore.retrieveLocalState(checkpointMetaData.getCheckpointId()))___		__		JobManagerTaskRestore taskRestore = new JobManagerTaskRestore(_			checkpointMetaData.getCheckpointId(),_			acknowledgeReport.getSubtaskState())___		taskStateManager = taskStateManager(_			jobID,_			executionAttemptID,_			testCheckpointResponder,_			taskRestore,_			testTaskLocalStateStore)___		_		PrioritizedOperatorSubtaskState prioritized_1 = taskStateManager.prioritizedOperatorState(operatorID_1)__		_		PrioritizedOperatorSubtaskState prioritized_2 = taskStateManager.prioritizedOperatorState(operatorID_2)__		_		PrioritizedOperatorSubtaskState prioritized_3 = taskStateManager.prioritizedOperatorState(operatorID_3)___		Assert.assertTrue(prioritized_1.isRestored())__		Assert.assertTrue(prioritized_2.isRestored())__		Assert.assertFalse(prioritized_3.isRestored())__		Assert.assertFalse(taskStateManager.prioritizedOperatorState(new OperatorID()).isRestored())___		_		Iterator<StateObjectCollection<KeyedStateHandle>> prioritizedManagedKeyedState_1 =_			prioritized_1.getPrioritizedManagedKeyedState().iterator()___		Assert.assertTrue(prioritizedManagedKeyedState_1.hasNext())__		StateObjectCollection<KeyedStateHandle> current = prioritizedManagedKeyedState_1.next()__		KeyedStateHandle keyedStateHandleExp = tmOperatorSubtaskState_1.getManagedKeyedState().iterator().next()__		KeyedStateHandle keyedStateHandleAct = current.iterator().next()__		Assert.assertTrue(keyedStateHandleExp == keyedStateHandleAct)__		Assert.assertTrue(prioritizedManagedKeyedState_1.hasNext())__		current = prioritizedManagedKeyedState_1.next()__		keyedStateHandleExp = jmOperatorSubtaskState_1.getManagedKeyedState().iterator().next()__		keyedStateHandleAct = current.iterator().next()__		Assert.assertTrue(keyedStateHandleExp == keyedStateHandleAct)__		Assert.assertFalse(prioritizedManagedKeyedState_1.hasNext())___		_		Iterator<StateObjectCollection<KeyedStateHandle>> prioritizedRawKeyedState_2 =_			prioritized_2.getPrioritizedRawKeyedState().iterator()___		Assert.assertTrue(prioritizedRawKeyedState_2.hasNext())__		current = prioritizedRawKeyedState_2.next()__		keyedStateHandleExp = jmOperatorSubtaskState_2.getRawKeyedState().iterator().next()__		keyedStateHandleAct = current.iterator().next()__		Assert.assertTrue(keyedStateHandleExp == keyedStateHandleAct)__		Assert.assertFalse(prioritizedRawKeyedState_2.hasNext())__	};test,reporting,and,retrieving,prioritized,local,and,remote,state;test,public,void,test,state,reporting,and,retrieving,job,id,job,id,new,job,id,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,test,checkpoint,responder,test,checkpoint,responder,new,test,checkpoint,responder,test,task,local,state,store,test,task,local,state,store,new,test,task,local,state,store,task,state,manager,task,state,manager,task,state,manager,job,id,execution,attempt,id,test,checkpoint,responder,null,test,task,local,state,store,checkpoint,meta,data,checkpoint,meta,data,new,checkpoint,meta,data,74l,11l,checkpoint,metrics,checkpoint,metrics,new,checkpoint,metrics,task,state,snapshot,jm,task,state,snapshot,new,task,state,snapshot,operator,id,new,operator,id,1l,1l,operator,id,new,operator,id,2l,2l,operator,id,new,operator,id,3l,3l,assert,assert,false,task,state,manager,prioritized,operator,state,is,restored,assert,assert,false,task,state,manager,prioritized,operator,state,is,restored,assert,assert,false,task,state,manager,prioritized,operator,state,is,restored,key,group,range,key,group,range,new,key,group,range,0,1,operator,subtask,state,new,operator,subtask,state,null,null,state,handle,dummy,util,create,new,keyed,state,handle,key,group,range,null,operator,subtask,state,new,operator,subtask,state,null,null,null,state,handle,dummy,util,create,new,keyed,state,handle,key,group,range,jm,task,state,snapshot,put,subtask,state,by,operator,id,jm,task,state,snapshot,put,subtask,state,by,operator,id,task,state,snapshot,tm,task,state,snapshot,new,task,state,snapshot,operator,subtask,state,new,operator,subtask,state,null,null,state,handle,dummy,util,create,new,keyed,state,handle,key,group,range,null,tm,task,state,snapshot,put,subtask,state,by,operator,id,task,state,manager,report,task,state,snapshots,checkpoint,meta,data,checkpoint,metrics,jm,task,state,snapshot,tm,task,state,snapshot,test,checkpoint,responder,acknowledge,report,acknowledge,report,test,checkpoint,responder,get,acknowledge,reports,get,0,assert,assert,equals,checkpoint,meta,data,get,checkpoint,id,acknowledge,report,get,checkpoint,id,assert,assert,equals,checkpoint,metrics,acknowledge,report,get,checkpoint,metrics,assert,assert,equals,execution,attempt,id,acknowledge,report,get,execution,attempt,id,assert,assert,equals,job,id,acknowledge,report,get,job,id,assert,assert,equals,jm,task,state,snapshot,acknowledge,report,get,subtask,state,assert,assert,equals,tm,task,state,snapshot,test,task,local,state,store,retrieve,local,state,checkpoint,meta,data,get,checkpoint,id,job,manager,task,restore,task,restore,new,job,manager,task,restore,checkpoint,meta,data,get,checkpoint,id,acknowledge,report,get,subtask,state,task,state,manager,task,state,manager,job,id,execution,attempt,id,test,checkpoint,responder,task,restore,test,task,local,state,store,prioritized,operator,subtask,state,task,state,manager,prioritized,operator,state,prioritized,operator,subtask,state,task,state,manager,prioritized,operator,state,prioritized,operator,subtask,state,task,state,manager,prioritized,operator,state,assert,assert,true,is,restored,assert,assert,true,is,restored,assert,assert,false,is,restored,assert,assert,false,task,state,manager,prioritized,operator,state,new,operator,id,is,restored,iterator,state,object,collection,keyed,state,handle,get,prioritized,managed,keyed,state,iterator,assert,assert,true,has,next,state,object,collection,keyed,state,handle,current,next,keyed,state,handle,keyed,state,handle,exp,get,managed,keyed,state,iterator,next,keyed,state,handle,keyed,state,handle,act,current,iterator,next,assert,assert,true,keyed,state,handle,exp,keyed,state,handle,act,assert,assert,true,has,next,current,next,keyed,state,handle,exp,get,managed,keyed,state,iterator,next,keyed,state,handle,act,current,iterator,next,assert,assert,true,keyed,state,handle,exp,keyed,state,handle,act,assert,assert,false,has,next,iterator,state,object,collection,keyed,state,handle,get,prioritized,raw,keyed,state,iterator,assert,assert,true,has,next,current,next,keyed,state,handle,exp,get,raw,keyed,state,iterator,next,keyed,state,handle,act,current,iterator,next,assert,assert,true,keyed,state,handle,exp,keyed,state,handle,act,assert,assert,false,has,next
TaskStateManagerImplTest -> @Test 	public void testForwardingSubtaskLocalStateBaseDirFromLocalStateStore() throws IOException;1519568061;This tests if the {@link TaskStateManager} properly returns the the subtask local state dir from the_corresponding {@link TaskLocalStateStoreImpl}.;@Test_	public void testForwardingSubtaskLocalStateBaseDirFromLocalStateStore() throws IOException {_		JobID jobID = new JobID(42L, 43L)__		AllocationID allocationID = new AllocationID(4711L, 23L)__		JobVertexID jobVertexID = new JobVertexID(12L, 34L)__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID(23L, 24L)__		TestCheckpointResponder checkpointResponderMock = new TestCheckpointResponder()___		Executor directExecutor = Executors.directExecutor()___		TemporaryFolder tmpFolder = new TemporaryFolder()___		try {_			tmpFolder.create()___			File[] allocBaseDirs = new File[]{tmpFolder.newFolder(), tmpFolder.newFolder(), tmpFolder.newFolder()}___			LocalRecoveryDirectoryProviderImpl directoryProvider =_				new LocalRecoveryDirectoryProviderImpl(allocBaseDirs, jobID, jobVertexID, 0)___			LocalRecoveryConfig localRecoveryConfig =_				new LocalRecoveryConfig(LocalRecoveryConfig.LocalRecoveryMode.ENABLE_FILE_BASED, directoryProvider)___			TaskLocalStateStore taskLocalStateStore =_				new TaskLocalStateStoreImpl(jobID, allocationID, jobVertexID, 13, localRecoveryConfig, directExecutor)___			TaskStateManager taskStateManager = taskStateManager(_				jobID,_				executionAttemptID,_				checkpointResponderMock,_				null,_				taskLocalStateStore)___			LocalRecoveryConfig localRecoveryConfFromTaskLocalStateStore =_				taskLocalStateStore.getLocalRecoveryConfig()___			LocalRecoveryConfig localRecoveryConfFromTaskStateManager =_				taskStateManager.createLocalRecoveryConfig()____			for (int i = 0_ i < 10_ ++i) {_				Assert.assertEquals(allocBaseDirs[i % allocBaseDirs.length],_					localRecoveryConfFromTaskLocalStateStore.getLocalStateDirectoryProvider().allocationBaseDirectory(i))__				Assert.assertEquals(allocBaseDirs[i % allocBaseDirs.length],_					localRecoveryConfFromTaskStateManager.getLocalStateDirectoryProvider().allocationBaseDirectory(i))__			}__			Assert.assertEquals(_				localRecoveryConfFromTaskLocalStateStore.getLocalRecoveryMode(),_				localRecoveryConfFromTaskStateManager.getLocalRecoveryMode())__		} finally {_			tmpFolder.delete()__		}_	};this,tests,if,the,link,task,state,manager,properly,returns,the,the,subtask,local,state,dir,from,the,corresponding,link,task,local,state,store,impl;test,public,void,test,forwarding,subtask,local,state,base,dir,from,local,state,store,throws,ioexception,job,id,job,id,new,job,id,42l,43l,allocation,id,allocation,id,new,allocation,id,4711l,23l,job,vertex,id,job,vertex,id,new,job,vertex,id,12l,34l,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,23l,24l,test,checkpoint,responder,checkpoint,responder,mock,new,test,checkpoint,responder,executor,direct,executor,executors,direct,executor,temporary,folder,tmp,folder,new,temporary,folder,try,tmp,folder,create,file,alloc,base,dirs,new,file,tmp,folder,new,folder,tmp,folder,new,folder,tmp,folder,new,folder,local,recovery,directory,provider,impl,directory,provider,new,local,recovery,directory,provider,impl,alloc,base,dirs,job,id,job,vertex,id,0,local,recovery,config,local,recovery,config,new,local,recovery,config,local,recovery,config,local,recovery,mode,directory,provider,task,local,state,store,task,local,state,store,new,task,local,state,store,impl,job,id,allocation,id,job,vertex,id,13,local,recovery,config,direct,executor,task,state,manager,task,state,manager,task,state,manager,job,id,execution,attempt,id,checkpoint,responder,mock,null,task,local,state,store,local,recovery,config,local,recovery,conf,from,task,local,state,store,task,local,state,store,get,local,recovery,config,local,recovery,config,local,recovery,conf,from,task,state,manager,task,state,manager,create,local,recovery,config,for,int,i,0,i,10,i,assert,assert,equals,alloc,base,dirs,i,alloc,base,dirs,length,local,recovery,conf,from,task,local,state,store,get,local,state,directory,provider,allocation,base,directory,i,assert,assert,equals,alloc,base,dirs,i,alloc,base,dirs,length,local,recovery,conf,from,task,state,manager,get,local,state,directory,provider,allocation,base,directory,i,assert,assert,equals,local,recovery,conf,from,task,local,state,store,get,local,recovery,mode,local,recovery,conf,from,task,state,manager,get,local,recovery,mode,finally,tmp,folder,delete
TaskStateManagerImplTest -> @Test 	public void testForwardingSubtaskLocalStateBaseDirFromLocalStateStore() throws IOException;1519741691;This tests if the {@link TaskStateManager} properly returns the the subtask local state dir from the_corresponding {@link TaskLocalStateStoreImpl}.;@Test_	public void testForwardingSubtaskLocalStateBaseDirFromLocalStateStore() throws IOException {_		JobID jobID = new JobID(42L, 43L)__		AllocationID allocationID = new AllocationID(4711L, 23L)__		JobVertexID jobVertexID = new JobVertexID(12L, 34L)__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID(23L, 24L)__		TestCheckpointResponder checkpointResponderMock = new TestCheckpointResponder()___		Executor directExecutor = Executors.directExecutor()___		TemporaryFolder tmpFolder = new TemporaryFolder()___		try {_			tmpFolder.create()___			File[] allocBaseDirs = new File[]{tmpFolder.newFolder(), tmpFolder.newFolder(), tmpFolder.newFolder()}___			LocalRecoveryDirectoryProviderImpl directoryProvider =_				new LocalRecoveryDirectoryProviderImpl(allocBaseDirs, jobID, jobVertexID, 0)___			LocalRecoveryConfig localRecoveryConfig =_				new LocalRecoveryConfig(LocalRecoveryConfig.LocalRecoveryMode.ENABLE_FILE_BASED, directoryProvider)___			TaskLocalStateStore taskLocalStateStore =_				new TaskLocalStateStoreImpl(jobID, allocationID, jobVertexID, 13, localRecoveryConfig, directExecutor)___			TaskStateManager taskStateManager = taskStateManager(_				jobID,_				executionAttemptID,_				checkpointResponderMock,_				null,_				taskLocalStateStore)___			LocalRecoveryConfig localRecoveryConfFromTaskLocalStateStore =_				taskLocalStateStore.getLocalRecoveryConfig()___			LocalRecoveryConfig localRecoveryConfFromTaskStateManager =_				taskStateManager.createLocalRecoveryConfig()____			for (int i = 0_ i < 10_ ++i) {_				Assert.assertEquals(allocBaseDirs[i % allocBaseDirs.length],_					localRecoveryConfFromTaskLocalStateStore.getLocalStateDirectoryProvider().allocationBaseDirectory(i))__				Assert.assertEquals(allocBaseDirs[i % allocBaseDirs.length],_					localRecoveryConfFromTaskStateManager.getLocalStateDirectoryProvider().allocationBaseDirectory(i))__			}__			Assert.assertEquals(_				localRecoveryConfFromTaskLocalStateStore.getLocalRecoveryMode(),_				localRecoveryConfFromTaskStateManager.getLocalRecoveryMode())__		} finally {_			tmpFolder.delete()__		}_	};this,tests,if,the,link,task,state,manager,properly,returns,the,the,subtask,local,state,dir,from,the,corresponding,link,task,local,state,store,impl;test,public,void,test,forwarding,subtask,local,state,base,dir,from,local,state,store,throws,ioexception,job,id,job,id,new,job,id,42l,43l,allocation,id,allocation,id,new,allocation,id,4711l,23l,job,vertex,id,job,vertex,id,new,job,vertex,id,12l,34l,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,23l,24l,test,checkpoint,responder,checkpoint,responder,mock,new,test,checkpoint,responder,executor,direct,executor,executors,direct,executor,temporary,folder,tmp,folder,new,temporary,folder,try,tmp,folder,create,file,alloc,base,dirs,new,file,tmp,folder,new,folder,tmp,folder,new,folder,tmp,folder,new,folder,local,recovery,directory,provider,impl,directory,provider,new,local,recovery,directory,provider,impl,alloc,base,dirs,job,id,job,vertex,id,0,local,recovery,config,local,recovery,config,new,local,recovery,config,local,recovery,config,local,recovery,mode,directory,provider,task,local,state,store,task,local,state,store,new,task,local,state,store,impl,job,id,allocation,id,job,vertex,id,13,local,recovery,config,direct,executor,task,state,manager,task,state,manager,task,state,manager,job,id,execution,attempt,id,checkpoint,responder,mock,null,task,local,state,store,local,recovery,config,local,recovery,conf,from,task,local,state,store,task,local,state,store,get,local,recovery,config,local,recovery,config,local,recovery,conf,from,task,state,manager,task,state,manager,create,local,recovery,config,for,int,i,0,i,10,i,assert,assert,equals,alloc,base,dirs,i,alloc,base,dirs,length,local,recovery,conf,from,task,local,state,store,get,local,state,directory,provider,allocation,base,directory,i,assert,assert,equals,alloc,base,dirs,i,alloc,base,dirs,length,local,recovery,conf,from,task,state,manager,get,local,state,directory,provider,allocation,base,directory,i,assert,assert,equals,local,recovery,conf,from,task,local,state,store,get,local,recovery,mode,local,recovery,conf,from,task,state,manager,get,local,recovery,mode,finally,tmp,folder,delete
TaskStateManagerImplTest -> @Test 	public void testForwardingSubtaskLocalStateBaseDirFromLocalStateStore() throws IOException;1526313052;This tests if the {@link TaskStateManager} properly returns the the subtask local state dir from the_corresponding {@link TaskLocalStateStoreImpl}.;@Test_	public void testForwardingSubtaskLocalStateBaseDirFromLocalStateStore() throws IOException {_		JobID jobID = new JobID(42L, 43L)__		AllocationID allocationID = new AllocationID(4711L, 23L)__		JobVertexID jobVertexID = new JobVertexID(12L, 34L)__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID(23L, 24L)__		TestCheckpointResponder checkpointResponderMock = new TestCheckpointResponder()___		Executor directExecutor = Executors.directExecutor()___		TemporaryFolder tmpFolder = new TemporaryFolder()___		try {_			tmpFolder.create()___			File[] allocBaseDirs = new File[]{tmpFolder.newFolder(), tmpFolder.newFolder(), tmpFolder.newFolder()}___			LocalRecoveryDirectoryProviderImpl directoryProvider =_				new LocalRecoveryDirectoryProviderImpl(allocBaseDirs, jobID, jobVertexID, 0)___			LocalRecoveryConfig localRecoveryConfig =_				new LocalRecoveryConfig(true, directoryProvider)___			TaskLocalStateStore taskLocalStateStore =_				new TaskLocalStateStoreImpl(jobID, allocationID, jobVertexID, 13, localRecoveryConfig, directExecutor)___			TaskStateManager taskStateManager = taskStateManager(_				jobID,_				executionAttemptID,_				checkpointResponderMock,_				null,_				taskLocalStateStore)___			LocalRecoveryConfig localRecoveryConfFromTaskLocalStateStore =_				taskLocalStateStore.getLocalRecoveryConfig()___			LocalRecoveryConfig localRecoveryConfFromTaskStateManager =_				taskStateManager.createLocalRecoveryConfig()____			for (int i = 0_ i < 10_ ++i) {_				Assert.assertEquals(allocBaseDirs[i % allocBaseDirs.length],_					localRecoveryConfFromTaskLocalStateStore.getLocalStateDirectoryProvider().allocationBaseDirectory(i))__				Assert.assertEquals(allocBaseDirs[i % allocBaseDirs.length],_					localRecoveryConfFromTaskStateManager.getLocalStateDirectoryProvider().allocationBaseDirectory(i))__			}__			Assert.assertEquals(_				localRecoveryConfFromTaskLocalStateStore.isLocalRecoveryEnabled(),_				localRecoveryConfFromTaskStateManager.isLocalRecoveryEnabled())__		} finally {_			tmpFolder.delete()__		}_	};this,tests,if,the,link,task,state,manager,properly,returns,the,the,subtask,local,state,dir,from,the,corresponding,link,task,local,state,store,impl;test,public,void,test,forwarding,subtask,local,state,base,dir,from,local,state,store,throws,ioexception,job,id,job,id,new,job,id,42l,43l,allocation,id,allocation,id,new,allocation,id,4711l,23l,job,vertex,id,job,vertex,id,new,job,vertex,id,12l,34l,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,23l,24l,test,checkpoint,responder,checkpoint,responder,mock,new,test,checkpoint,responder,executor,direct,executor,executors,direct,executor,temporary,folder,tmp,folder,new,temporary,folder,try,tmp,folder,create,file,alloc,base,dirs,new,file,tmp,folder,new,folder,tmp,folder,new,folder,tmp,folder,new,folder,local,recovery,directory,provider,impl,directory,provider,new,local,recovery,directory,provider,impl,alloc,base,dirs,job,id,job,vertex,id,0,local,recovery,config,local,recovery,config,new,local,recovery,config,true,directory,provider,task,local,state,store,task,local,state,store,new,task,local,state,store,impl,job,id,allocation,id,job,vertex,id,13,local,recovery,config,direct,executor,task,state,manager,task,state,manager,task,state,manager,job,id,execution,attempt,id,checkpoint,responder,mock,null,task,local,state,store,local,recovery,config,local,recovery,conf,from,task,local,state,store,task,local,state,store,get,local,recovery,config,local,recovery,config,local,recovery,conf,from,task,state,manager,task,state,manager,create,local,recovery,config,for,int,i,0,i,10,i,assert,assert,equals,alloc,base,dirs,i,alloc,base,dirs,length,local,recovery,conf,from,task,local,state,store,get,local,state,directory,provider,allocation,base,directory,i,assert,assert,equals,alloc,base,dirs,i,alloc,base,dirs,length,local,recovery,conf,from,task,state,manager,get,local,state,directory,provider,allocation,base,directory,i,assert,assert,equals,local,recovery,conf,from,task,local,state,store,is,local,recovery,enabled,local,recovery,conf,from,task,state,manager,is,local,recovery,enabled,finally,tmp,folder,delete
