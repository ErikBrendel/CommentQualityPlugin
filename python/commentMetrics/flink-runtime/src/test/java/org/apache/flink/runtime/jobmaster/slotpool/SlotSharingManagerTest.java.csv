# id;timestamp;commentText;codeText;commentWords;codeWords
SlotSharingManagerTest -> @Test 	public void testNestedSlotRelease() throws Exception;1513261599;Tests that we can release nested slots from the leaves onwards;@Test_	public void testNestedSlotRelease() throws Exception {_		TestingAllocatedSlotActions testingAllocatedSlotActions = new TestingAllocatedSlotActions()___		final CompletableFuture<SlotRequestId> releasedSlotFuture = new CompletableFuture<>()__		testingAllocatedSlotActions.setReleaseSlotConsumer(_			tuple3 -> releasedSlotFuture.complete(tuple3.f0))___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			testingAllocatedSlotActions,_			SLOT_OWNER)___		SlotRequestId rootSlotRequestId = new SlotRequestId()__		SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			rootSlotRequestId,_			new CompletableFuture<>(),_			allocatedSlotRequestId)___		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			new AbstractID(),_			Locality.LOCAL)___		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			new AbstractID())___		CompletableFuture<LogicalSlot> singleTaskSlotFuture = singleTaskSlot.getLogicalSlotFuture()___		assertTrue(slotSharingManager.contains(rootSlotRequestId))__		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertFalse(singleTaskSlotFuture.isDone())___		FlinkException testException = new FlinkException("Test exception")__		assertTrue(singleTaskSlot.release(testException))___		_		assertTrue(singleTaskSlotFuture.isCompletedExceptionally())__		assertFalse(slotSharingManager.contains(singleTaskSlotRequestId))___		_		assertTrue(slotSharingManager.contains(rootSlotRequestId))___		assertTrue(multiTaskSlot.release(testException))___		assertEquals(allocatedSlotRequestId, releasedSlotFuture.get())__		assertFalse(slotSharingManager.contains(rootSlotRequestId))__		assertFalse(slotSharingManager.contains(multiTaskSlotRequestId))___		assertTrue(slotSharingManager.isEmpty())__	};tests,that,we,can,release,nested,slots,from,the,leaves,onwards;test,public,void,test,nested,slot,release,throws,exception,testing,allocated,slot,actions,testing,allocated,slot,actions,new,testing,allocated,slot,actions,final,completable,future,slot,request,id,released,slot,future,new,completable,future,testing,allocated,slot,actions,set,release,slot,consumer,tuple3,released,slot,future,complete,tuple3,f0,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,testing,allocated,slot,actions,slot,request,id,root,slot,request,id,new,slot,request,id,slot,request,id,allocated,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,root,slot,request,id,new,completable,future,allocated,slot,request,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,new,abstract,id,locality,local,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,new,abstract,id,completable,future,logical,slot,single,task,slot,future,single,task,slot,get,logical,slot,future,assert,true,slot,sharing,manager,contains,root,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,false,single,task,slot,future,is,done,flink,exception,test,exception,new,flink,exception,test,exception,assert,true,single,task,slot,release,test,exception,assert,true,single,task,slot,future,is,completed,exceptionally,assert,false,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,root,slot,request,id,assert,true,multi,task,slot,release,test,exception,assert,equals,allocated,slot,request,id,released,slot,future,get,assert,false,slot,sharing,manager,contains,root,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,request,id,assert,true,slot,sharing,manager,is,empty
SlotSharingManagerTest -> @Test 	public void testNestedSlotRelease() throws Exception;1515669170;Tests that we can release nested slots from the leaves onwards;@Test_	public void testNestedSlotRelease() throws Exception {_		TestingAllocatedSlotActions testingAllocatedSlotActions = new TestingAllocatedSlotActions()___		final CompletableFuture<SlotRequestId> releasedSlotFuture = new CompletableFuture<>()__		testingAllocatedSlotActions.setReleaseSlotConsumer(_			tuple3 -> releasedSlotFuture.complete(tuple3.f0))___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			testingAllocatedSlotActions,_			SLOT_OWNER)___		SlotRequestId rootSlotRequestId = new SlotRequestId()__		SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			rootSlotRequestId,_			new CompletableFuture<>(),_			allocatedSlotRequestId)___		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			new AbstractID(),_			Locality.LOCAL)___		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			new AbstractID())___		CompletableFuture<LogicalSlot> singleTaskSlotFuture = singleTaskSlot.getLogicalSlotFuture()___		assertTrue(slotSharingManager.contains(rootSlotRequestId))__		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertFalse(singleTaskSlotFuture.isDone())___		FlinkException testException = new FlinkException("Test exception")__		assertTrue(singleTaskSlot.release(testException))___		_		assertTrue(singleTaskSlotFuture.isCompletedExceptionally())__		assertFalse(slotSharingManager.contains(singleTaskSlotRequestId))___		_		assertTrue(slotSharingManager.contains(rootSlotRequestId))___		assertTrue(multiTaskSlot.release(testException))___		assertEquals(allocatedSlotRequestId, releasedSlotFuture.get())__		assertFalse(slotSharingManager.contains(rootSlotRequestId))__		assertFalse(slotSharingManager.contains(multiTaskSlotRequestId))___		assertTrue(slotSharingManager.isEmpty())__	};tests,that,we,can,release,nested,slots,from,the,leaves,onwards;test,public,void,test,nested,slot,release,throws,exception,testing,allocated,slot,actions,testing,allocated,slot,actions,new,testing,allocated,slot,actions,final,completable,future,slot,request,id,released,slot,future,new,completable,future,testing,allocated,slot,actions,set,release,slot,consumer,tuple3,released,slot,future,complete,tuple3,f0,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,testing,allocated,slot,actions,slot,request,id,root,slot,request,id,new,slot,request,id,slot,request,id,allocated,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,root,slot,request,id,new,completable,future,allocated,slot,request,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,new,abstract,id,locality,local,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,new,abstract,id,completable,future,logical,slot,single,task,slot,future,single,task,slot,get,logical,slot,future,assert,true,slot,sharing,manager,contains,root,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,false,single,task,slot,future,is,done,flink,exception,test,exception,new,flink,exception,test,exception,assert,true,single,task,slot,release,test,exception,assert,true,single,task,slot,future,is,completed,exceptionally,assert,false,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,root,slot,request,id,assert,true,multi,task,slot,release,test,exception,assert,equals,allocated,slot,request,id,released,slot,future,get,assert,false,slot,sharing,manager,contains,root,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,request,id,assert,true,slot,sharing,manager,is,empty
SlotSharingManagerTest -> @Test 	public void testNestedSlotRelease() throws Exception;1519655521;Tests that we can release nested slots from the leaves onwards;@Test_	public void testNestedSlotRelease() throws Exception {_		TestingAllocatedSlotActions testingAllocatedSlotActions = new TestingAllocatedSlotActions()___		final CompletableFuture<SlotRequestId> releasedSlotFuture = new CompletableFuture<>()__		testingAllocatedSlotActions.setReleaseSlotConsumer(_			tuple3 -> releasedSlotFuture.complete(tuple3.f0))___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			testingAllocatedSlotActions,_			SLOT_OWNER)___		SlotRequestId rootSlotRequestId = new SlotRequestId()__		SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			rootSlotRequestId,_			new CompletableFuture<>(),_			allocatedSlotRequestId)___		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			new AbstractID(),_			Locality.LOCAL)___		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			new AbstractID())___		CompletableFuture<LogicalSlot> singleTaskSlotFuture = singleTaskSlot.getLogicalSlotFuture()___		assertTrue(slotSharingManager.contains(rootSlotRequestId))__		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertFalse(singleTaskSlotFuture.isDone())___		FlinkException testException = new FlinkException("Test exception")__		assertTrue(singleTaskSlot.release(testException))___		_		assertTrue(singleTaskSlotFuture.isCompletedExceptionally())__		assertFalse(slotSharingManager.contains(singleTaskSlotRequestId))___		_		assertTrue(slotSharingManager.contains(rootSlotRequestId))___		assertTrue(multiTaskSlot.release(testException))___		assertEquals(allocatedSlotRequestId, releasedSlotFuture.get())__		assertFalse(slotSharingManager.contains(rootSlotRequestId))__		assertFalse(slotSharingManager.contains(multiTaskSlotRequestId))___		assertTrue(slotSharingManager.isEmpty())__	};tests,that,we,can,release,nested,slots,from,the,leaves,onwards;test,public,void,test,nested,slot,release,throws,exception,testing,allocated,slot,actions,testing,allocated,slot,actions,new,testing,allocated,slot,actions,final,completable,future,slot,request,id,released,slot,future,new,completable,future,testing,allocated,slot,actions,set,release,slot,consumer,tuple3,released,slot,future,complete,tuple3,f0,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,testing,allocated,slot,actions,slot,request,id,root,slot,request,id,new,slot,request,id,slot,request,id,allocated,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,root,slot,request,id,new,completable,future,allocated,slot,request,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,new,abstract,id,locality,local,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,new,abstract,id,completable,future,logical,slot,single,task,slot,future,single,task,slot,get,logical,slot,future,assert,true,slot,sharing,manager,contains,root,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,false,single,task,slot,future,is,done,flink,exception,test,exception,new,flink,exception,test,exception,assert,true,single,task,slot,release,test,exception,assert,true,single,task,slot,future,is,completed,exceptionally,assert,false,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,root,slot,request,id,assert,true,multi,task,slot,release,test,exception,assert,equals,allocated,slot,request,id,released,slot,future,get,assert,false,slot,sharing,manager,contains,root,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,request,id,assert,true,slot,sharing,manager,is,empty
SlotSharingManagerTest -> @Test 	public void testNestedSlotRelease() throws Exception;1522681180;Tests that we can release nested slots from the leaves onwards;@Test_	public void testNestedSlotRelease() throws Exception {_		TestingAllocatedSlotActions testingAllocatedSlotActions = new TestingAllocatedSlotActions()___		final CompletableFuture<SlotRequestId> releasedSlotFuture = new CompletableFuture<>()__		testingAllocatedSlotActions.setReleaseSlotConsumer(_			tuple3 -> releasedSlotFuture.complete(tuple3.f0))___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			testingAllocatedSlotActions,_			SLOT_OWNER)___		SlotRequestId rootSlotRequestId = new SlotRequestId()__		SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			rootSlotRequestId,_			new CompletableFuture<>(),_			allocatedSlotRequestId)___		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			new AbstractID(),_			Locality.LOCAL)___		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			new AbstractID())___		CompletableFuture<LogicalSlot> singleTaskSlotFuture = singleTaskSlot.getLogicalSlotFuture()___		assertTrue(slotSharingManager.contains(rootSlotRequestId))__		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertFalse(singleTaskSlotFuture.isDone())___		FlinkException testException = new FlinkException("Test exception")__		assertTrue(singleTaskSlot.release(testException))___		_		assertTrue(singleTaskSlotFuture.isCompletedExceptionally())__		assertFalse(slotSharingManager.contains(singleTaskSlotRequestId))___		_		assertTrue(slotSharingManager.contains(rootSlotRequestId))___		assertTrue(multiTaskSlot.release(testException))___		assertEquals(allocatedSlotRequestId, releasedSlotFuture.get())__		assertFalse(slotSharingManager.contains(rootSlotRequestId))__		assertFalse(slotSharingManager.contains(multiTaskSlotRequestId))___		assertTrue(slotSharingManager.isEmpty())__	};tests,that,we,can,release,nested,slots,from,the,leaves,onwards;test,public,void,test,nested,slot,release,throws,exception,testing,allocated,slot,actions,testing,allocated,slot,actions,new,testing,allocated,slot,actions,final,completable,future,slot,request,id,released,slot,future,new,completable,future,testing,allocated,slot,actions,set,release,slot,consumer,tuple3,released,slot,future,complete,tuple3,f0,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,testing,allocated,slot,actions,slot,request,id,root,slot,request,id,new,slot,request,id,slot,request,id,allocated,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,root,slot,request,id,new,completable,future,allocated,slot,request,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,new,abstract,id,locality,local,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,new,abstract,id,completable,future,logical,slot,single,task,slot,future,single,task,slot,get,logical,slot,future,assert,true,slot,sharing,manager,contains,root,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,false,single,task,slot,future,is,done,flink,exception,test,exception,new,flink,exception,test,exception,assert,true,single,task,slot,release,test,exception,assert,true,single,task,slot,future,is,completed,exceptionally,assert,false,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,root,slot,request,id,assert,true,multi,task,slot,release,test,exception,assert,equals,allocated,slot,request,id,released,slot,future,get,assert,false,slot,sharing,manager,contains,root,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,request,id,assert,true,slot,sharing,manager,is,empty
SlotSharingManagerTest -> @Test 	public void testNestedSlotRelease() throws Exception;1525961911;Tests that we can release nested slots from the leaves onwards;@Test_	public void testNestedSlotRelease() throws Exception {_		TestingAllocatedSlotActions testingAllocatedSlotActions = new TestingAllocatedSlotActions()___		final CompletableFuture<SlotRequestId> releasedSlotFuture = new CompletableFuture<>()__		testingAllocatedSlotActions.setReleaseSlotConsumer(_			tuple3 -> releasedSlotFuture.complete(tuple3.f0))___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			testingAllocatedSlotActions,_			SLOT_OWNER)___		SlotRequestId rootSlotRequestId = new SlotRequestId()__		SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			rootSlotRequestId,_			new CompletableFuture<>(),_			allocatedSlotRequestId)___		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			new AbstractID(),_			Locality.LOCAL)___		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			new AbstractID())___		CompletableFuture<LogicalSlot> singleTaskSlotFuture = singleTaskSlot.getLogicalSlotFuture()___		assertTrue(slotSharingManager.contains(rootSlotRequestId))__		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertFalse(singleTaskSlotFuture.isDone())___		FlinkException testException = new FlinkException("Test exception")__		singleTaskSlot.release(testException)___		_		assertTrue(singleTaskSlotFuture.isCompletedExceptionally())__		assertFalse(slotSharingManager.contains(singleTaskSlotRequestId))___		_		assertTrue(slotSharingManager.contains(rootSlotRequestId))___		multiTaskSlot.release(testException)___		assertEquals(allocatedSlotRequestId, releasedSlotFuture.get())__		assertFalse(slotSharingManager.contains(rootSlotRequestId))__		assertFalse(slotSharingManager.contains(multiTaskSlotRequestId))___		assertTrue(slotSharingManager.isEmpty())__	};tests,that,we,can,release,nested,slots,from,the,leaves,onwards;test,public,void,test,nested,slot,release,throws,exception,testing,allocated,slot,actions,testing,allocated,slot,actions,new,testing,allocated,slot,actions,final,completable,future,slot,request,id,released,slot,future,new,completable,future,testing,allocated,slot,actions,set,release,slot,consumer,tuple3,released,slot,future,complete,tuple3,f0,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,testing,allocated,slot,actions,slot,request,id,root,slot,request,id,new,slot,request,id,slot,request,id,allocated,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,root,slot,request,id,new,completable,future,allocated,slot,request,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,new,abstract,id,locality,local,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,new,abstract,id,completable,future,logical,slot,single,task,slot,future,single,task,slot,get,logical,slot,future,assert,true,slot,sharing,manager,contains,root,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,false,single,task,slot,future,is,done,flink,exception,test,exception,new,flink,exception,test,exception,single,task,slot,release,test,exception,assert,true,single,task,slot,future,is,completed,exceptionally,assert,false,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,root,slot,request,id,multi,task,slot,release,test,exception,assert,equals,allocated,slot,request,id,released,slot,future,get,assert,false,slot,sharing,manager,contains,root,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,request,id,assert,true,slot,sharing,manager,is,empty
SlotSharingManagerTest -> @Test 	public void testNestedSlotRelease() throws Exception;1526494919;Tests that we can release nested slots from the leaves onwards;@Test_	public void testNestedSlotRelease() throws Exception {_		TestingAllocatedSlotActions testingAllocatedSlotActions = new TestingAllocatedSlotActions()___		final CompletableFuture<SlotRequestId> releasedSlotFuture = new CompletableFuture<>()__		testingAllocatedSlotActions.setReleaseSlotConsumer(_			tuple3 -> releasedSlotFuture.complete(tuple3.f0))___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			testingAllocatedSlotActions,_			SLOT_OWNER)___		SlotRequestId rootSlotRequestId = new SlotRequestId()__		SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			rootSlotRequestId,_			new CompletableFuture<>(),_			allocatedSlotRequestId)___		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			new AbstractID(),_			Locality.LOCAL)___		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			new AbstractID())___		CompletableFuture<LogicalSlot> singleTaskSlotFuture = singleTaskSlot.getLogicalSlotFuture()___		assertTrue(slotSharingManager.contains(rootSlotRequestId))__		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertFalse(singleTaskSlotFuture.isDone())___		FlinkException testException = new FlinkException("Test exception")__		singleTaskSlot.release(testException)___		_		assertTrue(singleTaskSlotFuture.isCompletedExceptionally())__		assertFalse(slotSharingManager.contains(singleTaskSlotRequestId))___		_		assertTrue(slotSharingManager.contains(rootSlotRequestId))___		multiTaskSlot.release(testException)___		assertEquals(allocatedSlotRequestId, releasedSlotFuture.get())__		assertFalse(slotSharingManager.contains(rootSlotRequestId))__		assertFalse(slotSharingManager.contains(multiTaskSlotRequestId))___		assertTrue(slotSharingManager.isEmpty())__	};tests,that,we,can,release,nested,slots,from,the,leaves,onwards;test,public,void,test,nested,slot,release,throws,exception,testing,allocated,slot,actions,testing,allocated,slot,actions,new,testing,allocated,slot,actions,final,completable,future,slot,request,id,released,slot,future,new,completable,future,testing,allocated,slot,actions,set,release,slot,consumer,tuple3,released,slot,future,complete,tuple3,f0,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,testing,allocated,slot,actions,slot,request,id,root,slot,request,id,new,slot,request,id,slot,request,id,allocated,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,root,slot,request,id,new,completable,future,allocated,slot,request,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,new,abstract,id,locality,local,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,new,abstract,id,completable,future,logical,slot,single,task,slot,future,single,task,slot,get,logical,slot,future,assert,true,slot,sharing,manager,contains,root,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,false,single,task,slot,future,is,done,flink,exception,test,exception,new,flink,exception,test,exception,single,task,slot,release,test,exception,assert,true,single,task,slot,future,is,completed,exceptionally,assert,false,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,root,slot,request,id,multi,task,slot,release,test,exception,assert,equals,allocated,slot,request,id,released,slot,future,get,assert,false,slot,sharing,manager,contains,root,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,request,id,assert,true,slot,sharing,manager,is,empty
SlotSharingManagerTest -> @Test 	public void testNestedSlotRelease() throws Exception;1530104620;Tests that we can release nested slots from the leaves onwards;@Test_	public void testNestedSlotRelease() throws Exception {_		TestingAllocatedSlotActions testingAllocatedSlotActions = new TestingAllocatedSlotActions()___		final CompletableFuture<SlotRequestId> releasedSlotFuture = new CompletableFuture<>()__		testingAllocatedSlotActions.setReleaseSlotConsumer(_			tuple3 -> releasedSlotFuture.complete(tuple3.f0))___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			testingAllocatedSlotActions,_			SLOT_OWNER)___		SlotRequestId rootSlotRequestId = new SlotRequestId()__		SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			rootSlotRequestId,_			new CompletableFuture<>(),_			allocatedSlotRequestId)___		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			new AbstractID(),_			Locality.LOCAL)___		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			new AbstractID())___		CompletableFuture<LogicalSlot> singleTaskSlotFuture = singleTaskSlot.getLogicalSlotFuture()___		assertTrue(slotSharingManager.contains(rootSlotRequestId))__		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertFalse(singleTaskSlotFuture.isDone())___		FlinkException testException = new FlinkException("Test exception")__		singleTaskSlot.release(testException)___		_		assertTrue(singleTaskSlotFuture.isCompletedExceptionally())__		assertFalse(slotSharingManager.contains(singleTaskSlotRequestId))___		_		assertTrue(slotSharingManager.contains(rootSlotRequestId))___		multiTaskSlot.release(testException)___		assertEquals(allocatedSlotRequestId, releasedSlotFuture.get())__		assertFalse(slotSharingManager.contains(rootSlotRequestId))__		assertFalse(slotSharingManager.contains(multiTaskSlotRequestId))___		assertTrue(slotSharingManager.isEmpty())__	};tests,that,we,can,release,nested,slots,from,the,leaves,onwards;test,public,void,test,nested,slot,release,throws,exception,testing,allocated,slot,actions,testing,allocated,slot,actions,new,testing,allocated,slot,actions,final,completable,future,slot,request,id,released,slot,future,new,completable,future,testing,allocated,slot,actions,set,release,slot,consumer,tuple3,released,slot,future,complete,tuple3,f0,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,testing,allocated,slot,actions,slot,request,id,root,slot,request,id,new,slot,request,id,slot,request,id,allocated,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,root,slot,request,id,new,completable,future,allocated,slot,request,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,new,abstract,id,locality,local,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,new,abstract,id,completable,future,logical,slot,single,task,slot,future,single,task,slot,get,logical,slot,future,assert,true,slot,sharing,manager,contains,root,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,false,single,task,slot,future,is,done,flink,exception,test,exception,new,flink,exception,test,exception,single,task,slot,release,test,exception,assert,true,single,task,slot,future,is,completed,exceptionally,assert,false,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,root,slot,request,id,multi,task,slot,release,test,exception,assert,equals,allocated,slot,request,id,released,slot,future,get,assert,false,slot,sharing,manager,contains,root,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,request,id,assert,true,slot,sharing,manager,is,empty
SlotSharingManagerTest -> @Test 	public void testNestedSlotRelease() throws Exception;1550220073;Tests that we can release nested slots from the leaves onwards;@Test_	public void testNestedSlotRelease() throws Exception {_		TestingAllocatedSlotActions testingAllocatedSlotActions = new TestingAllocatedSlotActions()___		final CompletableFuture<SlotRequestId> releasedSlotFuture = new CompletableFuture<>()__		testingAllocatedSlotActions.setReleaseSlotConsumer(_			tuple3 -> releasedSlotFuture.complete(tuple3.f0))___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			testingAllocatedSlotActions,_			SLOT_OWNER)___		SlotRequestId rootSlotRequestId = new SlotRequestId()__		SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			rootSlotRequestId,_			new CompletableFuture<>(),_			allocatedSlotRequestId)___		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			new AbstractID(),_			Locality.LOCAL)___		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			new AbstractID())___		CompletableFuture<LogicalSlot> singleTaskSlotFuture = singleTaskSlot.getLogicalSlotFuture()___		assertTrue(slotSharingManager.contains(rootSlotRequestId))__		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertFalse(singleTaskSlotFuture.isDone())___		FlinkException testException = new FlinkException("Test exception")__		singleTaskSlot.release(testException)___		_		assertTrue(singleTaskSlotFuture.isCompletedExceptionally())__		assertFalse(slotSharingManager.contains(singleTaskSlotRequestId))___		_		assertTrue(slotSharingManager.contains(rootSlotRequestId))___		multiTaskSlot.release(testException)___		assertEquals(allocatedSlotRequestId, releasedSlotFuture.get())__		assertFalse(slotSharingManager.contains(rootSlotRequestId))__		assertFalse(slotSharingManager.contains(multiTaskSlotRequestId))___		assertTrue(slotSharingManager.isEmpty())__	};tests,that,we,can,release,nested,slots,from,the,leaves,onwards;test,public,void,test,nested,slot,release,throws,exception,testing,allocated,slot,actions,testing,allocated,slot,actions,new,testing,allocated,slot,actions,final,completable,future,slot,request,id,released,slot,future,new,completable,future,testing,allocated,slot,actions,set,release,slot,consumer,tuple3,released,slot,future,complete,tuple3,f0,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,testing,allocated,slot,actions,slot,request,id,root,slot,request,id,new,slot,request,id,slot,request,id,allocated,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,root,slot,request,id,new,completable,future,allocated,slot,request,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,new,abstract,id,locality,local,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,new,abstract,id,completable,future,logical,slot,single,task,slot,future,single,task,slot,get,logical,slot,future,assert,true,slot,sharing,manager,contains,root,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,false,single,task,slot,future,is,done,flink,exception,test,exception,new,flink,exception,test,exception,single,task,slot,release,test,exception,assert,true,single,task,slot,future,is,completed,exceptionally,assert,false,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,root,slot,request,id,multi,task,slot,release,test,exception,assert,equals,allocated,slot,request,id,released,slot,future,get,assert,false,slot,sharing,manager,contains,root,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,request,id,assert,true,slot,sharing,manager,is,empty
SlotSharingManagerTest -> @Test 	public void testInnerSlotRelease();1513261599;Tests that we can release inner slots and that this triggers the slot release for all_its children.;@Test_	public void testInnerSlotRelease() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = multiTaskSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		SlotSharingManager.MultiTaskSlot multiTaskSlot1 = multiTaskSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		assertTrue(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))___		multiTaskSlot.release(new FlinkException("Test exception"))___		assertFalse(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))__		assertTrue(singleTaskSlot1.getLogicalSlotFuture().isCompletedExceptionally())__	};tests,that,we,can,release,inner,slots,and,that,this,triggers,the,slot,release,for,all,its,children;test,public,void,test,inner,slot,release,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,slot,sharing,manager,single,task,slot,single,task,slot1,multi,task,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,sharing,manager,multi,task,slot,multi,task,slot1,multi,task,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,assert,true,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,multi,task,slot,release,new,flink,exception,test,exception,assert,false,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,assert,true,single,task,slot1,get,logical,slot,future,is,completed,exceptionally
SlotSharingManagerTest -> @Test 	public void testInnerSlotRelease();1515669170;Tests that we can release inner slots and that this triggers the slot release for all_its children.;@Test_	public void testInnerSlotRelease() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = multiTaskSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		SlotSharingManager.MultiTaskSlot multiTaskSlot1 = multiTaskSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		assertTrue(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))___		multiTaskSlot.release(new FlinkException("Test exception"))___		assertFalse(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))__		assertTrue(singleTaskSlot1.getLogicalSlotFuture().isCompletedExceptionally())__	};tests,that,we,can,release,inner,slots,and,that,this,triggers,the,slot,release,for,all,its,children;test,public,void,test,inner,slot,release,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,slot,sharing,manager,single,task,slot,single,task,slot1,multi,task,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,sharing,manager,multi,task,slot,multi,task,slot1,multi,task,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,assert,true,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,multi,task,slot,release,new,flink,exception,test,exception,assert,false,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,assert,true,single,task,slot1,get,logical,slot,future,is,completed,exceptionally
SlotSharingManagerTest -> @Test 	public void testInnerSlotRelease();1519655521;Tests that we can release inner slots and that this triggers the slot release for all_its children.;@Test_	public void testInnerSlotRelease() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = multiTaskSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		SlotSharingManager.MultiTaskSlot multiTaskSlot1 = multiTaskSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		assertTrue(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))___		multiTaskSlot.release(new FlinkException("Test exception"))___		assertFalse(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))__		assertTrue(singleTaskSlot1.getLogicalSlotFuture().isCompletedExceptionally())__	};tests,that,we,can,release,inner,slots,and,that,this,triggers,the,slot,release,for,all,its,children;test,public,void,test,inner,slot,release,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,slot,sharing,manager,single,task,slot,single,task,slot1,multi,task,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,sharing,manager,multi,task,slot,multi,task,slot1,multi,task,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,assert,true,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,multi,task,slot,release,new,flink,exception,test,exception,assert,false,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,assert,true,single,task,slot1,get,logical,slot,future,is,completed,exceptionally
SlotSharingManagerTest -> @Test 	public void testInnerSlotRelease();1522681180;Tests that we can release inner slots and that this triggers the slot release for all_its children.;@Test_	public void testInnerSlotRelease() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = multiTaskSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		SlotSharingManager.MultiTaskSlot multiTaskSlot1 = multiTaskSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		assertTrue(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))___		multiTaskSlot.release(new FlinkException("Test exception"))___		assertFalse(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))__		assertTrue(singleTaskSlot1.getLogicalSlotFuture().isCompletedExceptionally())__	};tests,that,we,can,release,inner,slots,and,that,this,triggers,the,slot,release,for,all,its,children;test,public,void,test,inner,slot,release,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,slot,sharing,manager,single,task,slot,single,task,slot1,multi,task,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,sharing,manager,multi,task,slot,multi,task,slot1,multi,task,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,assert,true,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,multi,task,slot,release,new,flink,exception,test,exception,assert,false,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,assert,true,single,task,slot1,get,logical,slot,future,is,completed,exceptionally
SlotSharingManagerTest -> @Test 	public void testInnerSlotRelease();1525961911;Tests that we can release inner slots and that this triggers the slot release for all_its children.;@Test_	public void testInnerSlotRelease() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = multiTaskSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		SlotSharingManager.MultiTaskSlot multiTaskSlot1 = multiTaskSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		assertTrue(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))___		multiTaskSlot.release(new FlinkException("Test exception"))___		assertFalse(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))__		assertTrue(singleTaskSlot1.getLogicalSlotFuture().isCompletedExceptionally())__	};tests,that,we,can,release,inner,slots,and,that,this,triggers,the,slot,release,for,all,its,children;test,public,void,test,inner,slot,release,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,slot,sharing,manager,single,task,slot,single,task,slot1,multi,task,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,sharing,manager,multi,task,slot,multi,task,slot1,multi,task,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,assert,true,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,multi,task,slot,release,new,flink,exception,test,exception,assert,false,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,assert,true,single,task,slot1,get,logical,slot,future,is,completed,exceptionally
SlotSharingManagerTest -> @Test 	public void testInnerSlotRelease();1526494919;Tests that we can release inner slots and that this triggers the slot release for all_its children.;@Test_	public void testInnerSlotRelease() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = multiTaskSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		SlotSharingManager.MultiTaskSlot multiTaskSlot1 = multiTaskSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		assertTrue(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))___		multiTaskSlot.release(new FlinkException("Test exception"))___		assertFalse(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))__		assertTrue(singleTaskSlot1.getLogicalSlotFuture().isCompletedExceptionally())__	};tests,that,we,can,release,inner,slots,and,that,this,triggers,the,slot,release,for,all,its,children;test,public,void,test,inner,slot,release,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,slot,sharing,manager,single,task,slot,single,task,slot1,multi,task,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,sharing,manager,multi,task,slot,multi,task,slot1,multi,task,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,assert,true,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,multi,task,slot,release,new,flink,exception,test,exception,assert,false,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,assert,true,single,task,slot1,get,logical,slot,future,is,completed,exceptionally
SlotSharingManagerTest -> @Test 	public void testInnerSlotRelease();1530104620;Tests that we can release inner slots and that this triggers the slot release for all_its children.;@Test_	public void testInnerSlotRelease() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = multiTaskSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		SlotSharingManager.MultiTaskSlot multiTaskSlot1 = multiTaskSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		assertTrue(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))___		multiTaskSlot.release(new FlinkException("Test exception"))___		assertFalse(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))__		assertTrue(singleTaskSlot1.getLogicalSlotFuture().isCompletedExceptionally())__	};tests,that,we,can,release,inner,slots,and,that,this,triggers,the,slot,release,for,all,its,children;test,public,void,test,inner,slot,release,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,slot,sharing,manager,single,task,slot,single,task,slot1,multi,task,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,sharing,manager,multi,task,slot,multi,task,slot1,multi,task,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,assert,true,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,multi,task,slot,release,new,flink,exception,test,exception,assert,false,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,assert,true,single,task,slot1,get,logical,slot,future,is,completed,exceptionally
SlotSharingManagerTest -> @Test 	public void testInnerSlotRelease();1550220073;Tests that we can release inner slots and that this triggers the slot release for all_its children.;@Test_	public void testInnerSlotRelease() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = multiTaskSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		SlotSharingManager.MultiTaskSlot multiTaskSlot1 = multiTaskSlot.allocateMultiTaskSlot(_			new SlotRequestId(),_			new AbstractID())___		assertTrue(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertTrue(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))___		multiTaskSlot.release(new FlinkException("Test exception"))___		assertFalse(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()))__		assertFalse(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()))__		assertTrue(singleTaskSlot1.getLogicalSlotFuture().isCompletedExceptionally())__	};tests,that,we,can,release,inner,slots,and,that,this,triggers,the,slot,release,for,all,its,children;test,public,void,test,inner,slot,release,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,slot,sharing,manager,single,task,slot,single,task,slot1,multi,task,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,sharing,manager,multi,task,slot,multi,task,slot1,multi,task,slot,allocate,multi,task,slot,new,slot,request,id,new,abstract,id,assert,true,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,multi,task,slot,release,new,flink,exception,test,exception,assert,false,slot,sharing,manager,contains,multi,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,single,task,slot1,get,slot,request,id,assert,false,slot,sharing,manager,contains,multi,task,slot,get,slot,request,id,assert,true,single,task,slot1,get,logical,slot,future,is,completed,exceptionally
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureFailure();1513261599;Tests that slot context future failures will release the root slot;@Test_	public void testSlotContextFutureFailure() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()___		assertTrue(slotSharingManager.isEmpty())___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		slotContextFuture.completeExceptionally(new FlinkException("Test exception"))___		assertTrue(singleTaskSlot.getLogicalSlotFuture().isCompletedExceptionally())__		assertTrue(slotSharingManager.isEmpty())__		assertTrue(slotSharingManager.getResolvedRootSlots().isEmpty())__		assertTrue(slotSharingManager.getUnresolvedRootSlots().isEmpty())__	};tests,that,slot,context,future,failures,will,release,the,root,slot;test,public,void,test,slot,context,future,failure,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,assert,true,slot,sharing,manager,is,empty,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,context,future,complete,exceptionally,new,flink,exception,test,exception,assert,true,single,task,slot,get,logical,slot,future,is,completed,exceptionally,assert,true,slot,sharing,manager,is,empty,assert,true,slot,sharing,manager,get,resolved,root,slots,is,empty,assert,true,slot,sharing,manager,get,unresolved,root,slots,is,empty
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureFailure();1515669170;Tests that slot context future failures will release the root slot;@Test_	public void testSlotContextFutureFailure() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()___		assertTrue(slotSharingManager.isEmpty())___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		slotContextFuture.completeExceptionally(new FlinkException("Test exception"))___		assertTrue(singleTaskSlot.getLogicalSlotFuture().isCompletedExceptionally())__		assertTrue(slotSharingManager.isEmpty())__		assertTrue(slotSharingManager.getResolvedRootSlots().isEmpty())__		assertTrue(slotSharingManager.getUnresolvedRootSlots().isEmpty())__	};tests,that,slot,context,future,failures,will,release,the,root,slot;test,public,void,test,slot,context,future,failure,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,assert,true,slot,sharing,manager,is,empty,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,context,future,complete,exceptionally,new,flink,exception,test,exception,assert,true,single,task,slot,get,logical,slot,future,is,completed,exceptionally,assert,true,slot,sharing,manager,is,empty,assert,true,slot,sharing,manager,get,resolved,root,slots,is,empty,assert,true,slot,sharing,manager,get,unresolved,root,slots,is,empty
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureFailure();1519655521;Tests that slot context future failures will release the root slot;@Test_	public void testSlotContextFutureFailure() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()___		assertTrue(slotSharingManager.isEmpty())___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		slotContextFuture.completeExceptionally(new FlinkException("Test exception"))___		assertTrue(singleTaskSlot.getLogicalSlotFuture().isCompletedExceptionally())__		assertTrue(slotSharingManager.isEmpty())__		assertTrue(slotSharingManager.getResolvedRootSlots().isEmpty())__		assertTrue(slotSharingManager.getUnresolvedRootSlots().isEmpty())__	};tests,that,slot,context,future,failures,will,release,the,root,slot;test,public,void,test,slot,context,future,failure,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,assert,true,slot,sharing,manager,is,empty,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,context,future,complete,exceptionally,new,flink,exception,test,exception,assert,true,single,task,slot,get,logical,slot,future,is,completed,exceptionally,assert,true,slot,sharing,manager,is,empty,assert,true,slot,sharing,manager,get,resolved,root,slots,is,empty,assert,true,slot,sharing,manager,get,unresolved,root,slots,is,empty
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureFailure();1522681180;Tests that slot context future failures will release the root slot;@Test_	public void testSlotContextFutureFailure() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()___		assertTrue(slotSharingManager.isEmpty())___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		slotContextFuture.completeExceptionally(new FlinkException("Test exception"))___		assertTrue(singleTaskSlot.getLogicalSlotFuture().isCompletedExceptionally())__		assertTrue(slotSharingManager.isEmpty())__		assertTrue(slotSharingManager.getResolvedRootSlots().isEmpty())__		assertTrue(slotSharingManager.getUnresolvedRootSlots().isEmpty())__	};tests,that,slot,context,future,failures,will,release,the,root,slot;test,public,void,test,slot,context,future,failure,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,assert,true,slot,sharing,manager,is,empty,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,context,future,complete,exceptionally,new,flink,exception,test,exception,assert,true,single,task,slot,get,logical,slot,future,is,completed,exceptionally,assert,true,slot,sharing,manager,is,empty,assert,true,slot,sharing,manager,get,resolved,root,slots,is,empty,assert,true,slot,sharing,manager,get,unresolved,root,slots,is,empty
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureFailure();1525961911;Tests that slot context future failures will release the root slot;@Test_	public void testSlotContextFutureFailure() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()___		assertTrue(slotSharingManager.isEmpty())___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		slotContextFuture.completeExceptionally(new FlinkException("Test exception"))___		assertTrue(singleTaskSlot.getLogicalSlotFuture().isCompletedExceptionally())__		assertTrue(slotSharingManager.isEmpty())__		assertTrue(slotSharingManager.getResolvedRootSlots().isEmpty())__		assertTrue(slotSharingManager.getUnresolvedRootSlots().isEmpty())__	};tests,that,slot,context,future,failures,will,release,the,root,slot;test,public,void,test,slot,context,future,failure,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,assert,true,slot,sharing,manager,is,empty,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,context,future,complete,exceptionally,new,flink,exception,test,exception,assert,true,single,task,slot,get,logical,slot,future,is,completed,exceptionally,assert,true,slot,sharing,manager,is,empty,assert,true,slot,sharing,manager,get,resolved,root,slots,is,empty,assert,true,slot,sharing,manager,get,unresolved,root,slots,is,empty
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureFailure();1526494919;Tests that slot context future failures will release the root slot;@Test_	public void testSlotContextFutureFailure() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()___		assertTrue(slotSharingManager.isEmpty())___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		slotContextFuture.completeExceptionally(new FlinkException("Test exception"))___		assertTrue(singleTaskSlot.getLogicalSlotFuture().isCompletedExceptionally())__		assertTrue(slotSharingManager.isEmpty())__		assertTrue(slotSharingManager.getResolvedRootSlots().isEmpty())__		assertTrue(slotSharingManager.getUnresolvedRootSlots().isEmpty())__	};tests,that,slot,context,future,failures,will,release,the,root,slot;test,public,void,test,slot,context,future,failure,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,assert,true,slot,sharing,manager,is,empty,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,context,future,complete,exceptionally,new,flink,exception,test,exception,assert,true,single,task,slot,get,logical,slot,future,is,completed,exceptionally,assert,true,slot,sharing,manager,is,empty,assert,true,slot,sharing,manager,get,resolved,root,slots,is,empty,assert,true,slot,sharing,manager,get,unresolved,root,slots,is,empty
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureFailure();1530104620;Tests that slot context future failures will release the root slot;@Test_	public void testSlotContextFutureFailure() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()___		assertTrue(slotSharingManager.isEmpty())___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		slotContextFuture.completeExceptionally(new FlinkException("Test exception"))___		assertTrue(singleTaskSlot.getLogicalSlotFuture().isCompletedExceptionally())__		assertTrue(slotSharingManager.isEmpty())__		assertTrue(slotSharingManager.getResolvedRootSlots().isEmpty())__		assertTrue(slotSharingManager.getUnresolvedRootSlots().isEmpty())__	};tests,that,slot,context,future,failures,will,release,the,root,slot;test,public,void,test,slot,context,future,failure,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,assert,true,slot,sharing,manager,is,empty,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,context,future,complete,exceptionally,new,flink,exception,test,exception,assert,true,single,task,slot,get,logical,slot,future,is,completed,exceptionally,assert,true,slot,sharing,manager,is,empty,assert,true,slot,sharing,manager,get,resolved,root,slots,is,empty,assert,true,slot,sharing,manager,get,unresolved,root,slots,is,empty
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureFailure();1550220073;Tests that slot context future failures will release the root slot;@Test_	public void testSlotContextFutureFailure() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()___		assertTrue(slotSharingManager.isEmpty())___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			Locality.LOCAL)___		slotContextFuture.completeExceptionally(new FlinkException("Test exception"))___		assertTrue(singleTaskSlot.getLogicalSlotFuture().isCompletedExceptionally())__		assertTrue(slotSharingManager.isEmpty())__		assertTrue(slotSharingManager.getResolvedRootSlots().isEmpty())__		assertTrue(slotSharingManager.getUnresolvedRootSlots().isEmpty())__	};tests,that,slot,context,future,failures,will,release,the,root,slot;test,public,void,test,slot,context,future,failure,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,assert,true,slot,sharing,manager,is,empty,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality,local,slot,context,future,complete,exceptionally,new,flink,exception,test,exception,assert,true,single,task,slot,get,logical,slot,future,is,completed,exceptionally,assert,true,slot,sharing,manager,is,empty,assert,true,slot,sharing,manager,get,resolved,root,slots,is,empty,assert,true,slot,sharing,manager,get,unresolved,root,slots,is,empty
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlotWithLocationPreferences();1513261599;Tests that the location preferences are honoured when looking for a resolved slot.;@Test_	public void testGetResolvedSlotWithLocationPreferences() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot1 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		SlotSharingManager.MultiTaskSlot rootSlot2 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					taskManagerLocation,_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(groupId, Collections.singleton(taskManagerLocation))__		assertNotNull(resolvedRootSlot1)__		assertEquals(Locality.LOCAL, resolvedRootSlot1.getLocality())__		assertEquals(rootSlot2.getSlotRequestId(), resolvedRootSlot1.getMultiTaskSlot().getSlotRequestId())___		_		resolvedRootSlot1.getMultiTaskSlot().allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlot1.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot2 = slotSharingManager.getResolvedRootSlot(groupId, Collections.singleton(taskManagerLocation))___		assertNotNull(resolvedRootSlot2)__		assertNotSame(Locality.LOCAL, (resolvedRootSlot2.getLocality()))__		assertEquals(rootSlot1.getSlotRequestId(), resolvedRootSlot2.getMultiTaskSlot().getSlotRequestId())__	};tests,that,the,location,preferences,are,honoured,when,looking,for,a,resolved,slot;test,public,void,test,get,resolved,slot,with,location,preferences,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot1,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,local,task,manager,location,task,manager,location,new,local,task,manager,location,slot,sharing,manager,multi,task,slot,root,slot2,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,collections,singleton,task,manager,location,assert,not,null,resolved,root,slot1,assert,equals,locality,local,resolved,root,slot1,get,locality,assert,equals,root,slot2,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot1,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot2,slot,sharing,manager,get,resolved,root,slot,group,id,collections,singleton,task,manager,location,assert,not,null,resolved,root,slot2,assert,not,same,locality,local,resolved,root,slot2,get,locality,assert,equals,root,slot1,get,slot,request,id,resolved,root,slot2,get,multi,task,slot,get,slot,request,id
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlotWithLocationPreferences();1515669170;Tests that the location preferences are honoured when looking for a resolved slot.;@Test_	public void testGetResolvedSlotWithLocationPreferences() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot1 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		SlotSharingManager.MultiTaskSlot rootSlot2 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					taskManagerLocation,_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(groupId, Collections.singleton(taskManagerLocation))__		assertNotNull(resolvedRootSlot1)__		assertEquals(Locality.LOCAL, resolvedRootSlot1.getLocality())__		assertEquals(rootSlot2.getSlotRequestId(), resolvedRootSlot1.getMultiTaskSlot().getSlotRequestId())___		_		resolvedRootSlot1.getMultiTaskSlot().allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlot1.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot2 = slotSharingManager.getResolvedRootSlot(groupId, Collections.singleton(taskManagerLocation))___		assertNotNull(resolvedRootSlot2)__		assertNotSame(Locality.LOCAL, (resolvedRootSlot2.getLocality()))__		assertEquals(rootSlot1.getSlotRequestId(), resolvedRootSlot2.getMultiTaskSlot().getSlotRequestId())__	};tests,that,the,location,preferences,are,honoured,when,looking,for,a,resolved,slot;test,public,void,test,get,resolved,slot,with,location,preferences,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot1,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,local,task,manager,location,task,manager,location,new,local,task,manager,location,slot,sharing,manager,multi,task,slot,root,slot2,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,collections,singleton,task,manager,location,assert,not,null,resolved,root,slot1,assert,equals,locality,local,resolved,root,slot1,get,locality,assert,equals,root,slot2,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot1,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot2,slot,sharing,manager,get,resolved,root,slot,group,id,collections,singleton,task,manager,location,assert,not,null,resolved,root,slot2,assert,not,same,locality,local,resolved,root,slot2,get,locality,assert,equals,root,slot1,get,slot,request,id,resolved,root,slot2,get,multi,task,slot,get,slot,request,id
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlotWithLocationPreferences();1519655521;Tests that the location preferences are honoured when looking for a resolved slot.;@Test_	public void testGetResolvedSlotWithLocationPreferences() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot1 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		SlotSharingManager.MultiTaskSlot rootSlot2 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					taskManagerLocation,_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()__		SlotProfile.LocalityAwareRequirementsToSlotMatcher matcher =_			new SlotProfile.LocalityAwareRequirementsToSlotMatcher(Collections.singleton(taskManagerLocation))__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(groupId, matcher)__		assertNotNull(resolvedRootSlot1)__		assertEquals(Locality.LOCAL, resolvedRootSlot1.getLocality())__		assertEquals(rootSlot2.getSlotRequestId(), resolvedRootSlot1.getMultiTaskSlot().getSlotRequestId())___		_		resolvedRootSlot1.getMultiTaskSlot().allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlot1.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot2 = slotSharingManager.getResolvedRootSlot(groupId,matcher)___		assertNotNull(resolvedRootSlot2)__		assertNotSame(Locality.LOCAL, (resolvedRootSlot2.getLocality()))__		assertEquals(rootSlot1.getSlotRequestId(), resolvedRootSlot2.getMultiTaskSlot().getSlotRequestId())__	};tests,that,the,location,preferences,are,honoured,when,looking,for,a,resolved,slot;test,public,void,test,get,resolved,slot,with,location,preferences,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot1,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,local,task,manager,location,task,manager,location,new,local,task,manager,location,slot,sharing,manager,multi,task,slot,root,slot2,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,profile,locality,aware,requirements,to,slot,matcher,matcher,new,slot,profile,locality,aware,requirements,to,slot,matcher,collections,singleton,task,manager,location,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,matcher,assert,not,null,resolved,root,slot1,assert,equals,locality,local,resolved,root,slot1,get,locality,assert,equals,root,slot2,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot1,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot2,slot,sharing,manager,get,resolved,root,slot,group,id,matcher,assert,not,null,resolved,root,slot2,assert,not,same,locality,local,resolved,root,slot2,get,locality,assert,equals,root,slot1,get,slot,request,id,resolved,root,slot2,get,multi,task,slot,get,slot,request,id
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlotWithLocationPreferences();1522681180;Tests that the location preferences are honoured when looking for a resolved slot.;@Test_	public void testGetResolvedSlotWithLocationPreferences() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot1 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		SlotSharingManager.MultiTaskSlot rootSlot2 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					taskManagerLocation,_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()__		SlotProfile.LocalityAwareRequirementsToSlotMatcher matcher =_			new SlotProfile.LocalityAwareRequirementsToSlotMatcher(Collections.singleton(taskManagerLocation))__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(groupId, matcher)__		assertNotNull(resolvedRootSlot1)__		assertEquals(Locality.LOCAL, resolvedRootSlot1.getLocality())__		assertEquals(rootSlot2.getSlotRequestId(), resolvedRootSlot1.getMultiTaskSlot().getSlotRequestId())___		_		resolvedRootSlot1.getMultiTaskSlot().allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlot1.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot2 = slotSharingManager.getResolvedRootSlot(groupId,matcher)___		assertNotNull(resolvedRootSlot2)__		assertNotSame(Locality.LOCAL, (resolvedRootSlot2.getLocality()))__		assertEquals(rootSlot1.getSlotRequestId(), resolvedRootSlot2.getMultiTaskSlot().getSlotRequestId())__	};tests,that,the,location,preferences,are,honoured,when,looking,for,a,resolved,slot;test,public,void,test,get,resolved,slot,with,location,preferences,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot1,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,local,task,manager,location,task,manager,location,new,local,task,manager,location,slot,sharing,manager,multi,task,slot,root,slot2,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,profile,locality,aware,requirements,to,slot,matcher,matcher,new,slot,profile,locality,aware,requirements,to,slot,matcher,collections,singleton,task,manager,location,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,matcher,assert,not,null,resolved,root,slot1,assert,equals,locality,local,resolved,root,slot1,get,locality,assert,equals,root,slot2,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot1,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot2,slot,sharing,manager,get,resolved,root,slot,group,id,matcher,assert,not,null,resolved,root,slot2,assert,not,same,locality,local,resolved,root,slot2,get,locality,assert,equals,root,slot1,get,slot,request,id,resolved,root,slot2,get,multi,task,slot,get,slot,request,id
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlotWithLocationPreferences();1525961911;Tests that the location preferences are honoured when looking for a resolved slot.;@Test_	public void testGetResolvedSlotWithLocationPreferences() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot1 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		SlotSharingManager.MultiTaskSlot rootSlot2 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					taskManagerLocation,_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()__		SlotProfile.LocalityAwareRequirementsToSlotMatcher matcher =_			new SlotProfile.LocalityAwareRequirementsToSlotMatcher(Collections.singleton(taskManagerLocation))__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(groupId, matcher)__		assertNotNull(resolvedRootSlot1)__		assertEquals(Locality.LOCAL, resolvedRootSlot1.getLocality())__		assertEquals(rootSlot2.getSlotRequestId(), resolvedRootSlot1.getMultiTaskSlot().getSlotRequestId())___		_		resolvedRootSlot1.getMultiTaskSlot().allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlot1.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot2 = slotSharingManager.getResolvedRootSlot(groupId,matcher)___		assertNotNull(resolvedRootSlot2)__		assertNotSame(Locality.LOCAL, (resolvedRootSlot2.getLocality()))__		assertEquals(rootSlot1.getSlotRequestId(), resolvedRootSlot2.getMultiTaskSlot().getSlotRequestId())__	};tests,that,the,location,preferences,are,honoured,when,looking,for,a,resolved,slot;test,public,void,test,get,resolved,slot,with,location,preferences,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot1,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,local,task,manager,location,task,manager,location,new,local,task,manager,location,slot,sharing,manager,multi,task,slot,root,slot2,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,profile,locality,aware,requirements,to,slot,matcher,matcher,new,slot,profile,locality,aware,requirements,to,slot,matcher,collections,singleton,task,manager,location,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,matcher,assert,not,null,resolved,root,slot1,assert,equals,locality,local,resolved,root,slot1,get,locality,assert,equals,root,slot2,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot1,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot2,slot,sharing,manager,get,resolved,root,slot,group,id,matcher,assert,not,null,resolved,root,slot2,assert,not,same,locality,local,resolved,root,slot2,get,locality,assert,equals,root,slot1,get,slot,request,id,resolved,root,slot2,get,multi,task,slot,get,slot,request,id
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlotWithLocationPreferences();1526494919;Tests that the location preferences are honoured when looking for a resolved slot.;@Test_	public void testGetResolvedSlotWithLocationPreferences() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot1 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		SlotSharingManager.MultiTaskSlot rootSlot2 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					taskManagerLocation,_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()__		SlotProfile.LocalityAwareRequirementsToSlotMatcher matcher =_			new SlotProfile.LocalityAwareRequirementsToSlotMatcher(Collections.singleton(taskManagerLocation))__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(groupId, matcher)__		assertNotNull(resolvedRootSlot1)__		assertEquals(Locality.LOCAL, resolvedRootSlot1.getLocality())__		assertEquals(rootSlot2.getSlotRequestId(), resolvedRootSlot1.getMultiTaskSlot().getSlotRequestId())___		_		resolvedRootSlot1.getMultiTaskSlot().allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlot1.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot2 = slotSharingManager.getResolvedRootSlot(groupId,matcher)___		assertNotNull(resolvedRootSlot2)__		assertNotSame(Locality.LOCAL, (resolvedRootSlot2.getLocality()))__		assertEquals(rootSlot1.getSlotRequestId(), resolvedRootSlot2.getMultiTaskSlot().getSlotRequestId())__	};tests,that,the,location,preferences,are,honoured,when,looking,for,a,resolved,slot;test,public,void,test,get,resolved,slot,with,location,preferences,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot1,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,local,task,manager,location,task,manager,location,new,local,task,manager,location,slot,sharing,manager,multi,task,slot,root,slot2,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,profile,locality,aware,requirements,to,slot,matcher,matcher,new,slot,profile,locality,aware,requirements,to,slot,matcher,collections,singleton,task,manager,location,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,matcher,assert,not,null,resolved,root,slot1,assert,equals,locality,local,resolved,root,slot1,get,locality,assert,equals,root,slot2,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot1,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot2,slot,sharing,manager,get,resolved,root,slot,group,id,matcher,assert,not,null,resolved,root,slot2,assert,not,same,locality,local,resolved,root,slot2,get,locality,assert,equals,root,slot1,get,slot,request,id,resolved,root,slot2,get,multi,task,slot,get,slot,request,id
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlotWithLocationPreferences();1530104620;Tests that the location preferences are honoured when looking for a resolved slot.;@Test_	public void testGetResolvedSlotWithLocationPreferences() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot1 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		SlotSharingManager.MultiTaskSlot rootSlot2 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					taskManagerLocation,_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()___		SlotProfile slotProfile = SlotProfile.preferredLocality(ResourceProfile.UNKNOWN, Collections.singleton(taskManagerLocation))__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(_			groupId,_			LocationPreferenceSchedulingStrategy.getInstance(),_			slotProfile)__		assertNotNull(resolvedRootSlot1)__		assertEquals(Locality.LOCAL, resolvedRootSlot1.getLocality())__		assertEquals(rootSlot2.getSlotRequestId(), resolvedRootSlot1.getMultiTaskSlot().getSlotRequestId())___		_		resolvedRootSlot1.getMultiTaskSlot().allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlot1.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot2 = slotSharingManager.getResolvedRootSlot(_			groupId,_			LocationPreferenceSchedulingStrategy.getInstance(),_			slotProfile)___		assertNotNull(resolvedRootSlot2)__		assertNotSame(Locality.LOCAL, (resolvedRootSlot2.getLocality()))__		assertEquals(rootSlot1.getSlotRequestId(), resolvedRootSlot2.getMultiTaskSlot().getSlotRequestId())__	};tests,that,the,location,preferences,are,honoured,when,looking,for,a,resolved,slot;test,public,void,test,get,resolved,slot,with,location,preferences,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot1,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,local,task,manager,location,task,manager,location,new,local,task,manager,location,slot,sharing,manager,multi,task,slot,root,slot2,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,profile,slot,profile,slot,profile,preferred,locality,resource,profile,unknown,collections,singleton,task,manager,location,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,location,preference,scheduling,strategy,get,instance,slot,profile,assert,not,null,resolved,root,slot1,assert,equals,locality,local,resolved,root,slot1,get,locality,assert,equals,root,slot2,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,get,slot,request,id,resolved,root,slot1,get,multi,task,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot1,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot2,slot,sharing,manager,get,resolved,root,slot,group,id,location,preference,scheduling,strategy,get,instance,slot,profile,assert,not,null,resolved,root,slot2,assert,not,same,locality,local,resolved,root,slot2,get,locality,assert,equals,root,slot1,get,slot,request,id,resolved,root,slot2,get,multi,task,slot,get,slot,request,id
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlotWithLocationPreferences();1550220073;Tests that the location preferences are honoured when looking for a resolved slot.;@Test_	public void testGetResolvedSlotWithLocationPreferences() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot1 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		SlotSharingManager.MultiTaskSlot rootSlot2 = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					taskManagerLocation,_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()___		SlotProfile slotProfile = SlotProfile.preferredLocality(ResourceProfile.UNKNOWN, Collections.singleton(taskManagerLocation))___		Collection<SlotInfo> slotInfos = slotSharingManager.listResolvedRootSlotInfo(groupId)__		SlotSelectionStrategy.SlotInfoAndLocality slotInfoAndLocality =_			LocationPreferenceSlotSelectionStrategy.INSTANCE.selectBestSlotForProfile(slotInfos, slotProfile).get()__		SlotSharingManager.MultiTaskSlot resolvedRootSlot = slotSharingManager.getResolvedRootSlot(slotInfoAndLocality.getSlotInfo())___		assertNotNull(resolvedRootSlot)__		assertEquals(Locality.LOCAL, slotInfoAndLocality.getLocality())__		assertEquals(rootSlot2.getSlotRequestId(), resolvedRootSlot.getSlotRequestId())___		_		resolvedRootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			slotInfoAndLocality.getLocality())___		slotInfos = slotSharingManager.listResolvedRootSlotInfo(groupId)__		slotInfoAndLocality = LocationPreferenceSlotSelectionStrategy.INSTANCE.selectBestSlotForProfile(slotInfos, slotProfile).get()__		resolvedRootSlot = slotSharingManager.getResolvedRootSlot(slotInfoAndLocality.getSlotInfo())__		assertNotNull(resolvedRootSlot)__		assertNotSame(Locality.LOCAL, (slotInfoAndLocality.getLocality()))__		assertEquals(rootSlot1.getSlotRequestId(), resolvedRootSlot.getSlotRequestId())__	};tests,that,the,location,preferences,are,honoured,when,looking,for,a,resolved,slot;test,public,void,test,get,resolved,slot,with,location,preferences,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot1,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,local,task,manager,location,task,manager,location,new,local,task,manager,location,slot,sharing,manager,multi,task,slot,root,slot2,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,profile,slot,profile,slot,profile,preferred,locality,resource,profile,unknown,collections,singleton,task,manager,location,collection,slot,info,slot,infos,slot,sharing,manager,list,resolved,root,slot,info,group,id,slot,selection,strategy,slot,info,and,locality,slot,info,and,locality,location,preference,slot,selection,strategy,instance,select,best,slot,for,profile,slot,infos,slot,profile,get,slot,sharing,manager,multi,task,slot,resolved,root,slot,slot,sharing,manager,get,resolved,root,slot,slot,info,and,locality,get,slot,info,assert,not,null,resolved,root,slot,assert,equals,locality,local,slot,info,and,locality,get,locality,assert,equals,root,slot2,get,slot,request,id,resolved,root,slot,get,slot,request,id,resolved,root,slot,allocate,single,task,slot,new,slot,request,id,group,id,slot,info,and,locality,get,locality,slot,infos,slot,sharing,manager,list,resolved,root,slot,info,group,id,slot,info,and,locality,location,preference,slot,selection,strategy,instance,select,best,slot,for,profile,slot,infos,slot,profile,get,resolved,root,slot,slot,sharing,manager,get,resolved,root,slot,slot,info,and,locality,get,slot,info,assert,not,null,resolved,root,slot,assert,not,same,locality,local,slot,info,and,locality,get,locality,assert,equals,root,slot1,get,slot,request,id,resolved,root,slot,get,slot,request,id
SlotSharingManagerTest -> @Test 	public void testRootSlotTransition();1513261599;Tests that the root slot are moved from unresolved to resolved once the_slot context future is successfully completed;@Test_	public void testRootSlotTransition() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		assertTrue(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertFalse(slotSharingManager.getResolvedRootSlots().contains(rootSlot))___		_		slotContextFuture.complete(_			new SimpleSlotContext(_				new AllocationID(),_				new LocalTaskManagerLocation(),_				0,_				new SimpleAckingTaskManagerGateway()))___		assertFalse(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertTrue(slotSharingManager.getResolvedRootSlots().contains(rootSlot))__	};tests,that,the,root,slot,are,moved,from,unresolved,to,resolved,once,the,slot,context,future,is,successfully,completed;test,public,void,test,root,slot,transition,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,assert,true,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,false,slot,sharing,manager,get,resolved,root,slots,contains,root,slot,slot,context,future,complete,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,assert,false,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,true,slot,sharing,manager,get,resolved,root,slots,contains,root,slot
SlotSharingManagerTest -> @Test 	public void testRootSlotTransition();1515669170;Tests that the root slot are moved from unresolved to resolved once the_slot context future is successfully completed;@Test_	public void testRootSlotTransition() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		assertTrue(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertFalse(slotSharingManager.getResolvedRootSlots().contains(rootSlot))___		_		slotContextFuture.complete(_			new SimpleSlotContext(_				new AllocationID(),_				new LocalTaskManagerLocation(),_				0,_				new SimpleAckingTaskManagerGateway()))___		assertFalse(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertTrue(slotSharingManager.getResolvedRootSlots().contains(rootSlot))__	};tests,that,the,root,slot,are,moved,from,unresolved,to,resolved,once,the,slot,context,future,is,successfully,completed;test,public,void,test,root,slot,transition,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,assert,true,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,false,slot,sharing,manager,get,resolved,root,slots,contains,root,slot,slot,context,future,complete,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,assert,false,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,true,slot,sharing,manager,get,resolved,root,slots,contains,root,slot
SlotSharingManagerTest -> @Test 	public void testRootSlotTransition();1519655521;Tests that the root slot are moved from unresolved to resolved once the_slot context future is successfully completed;@Test_	public void testRootSlotTransition() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		assertTrue(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertFalse(slotSharingManager.getResolvedRootSlots().contains(rootSlot))___		_		slotContextFuture.complete(_			new SimpleSlotContext(_				new AllocationID(),_				new LocalTaskManagerLocation(),_				0,_				new SimpleAckingTaskManagerGateway()))___		assertFalse(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertTrue(slotSharingManager.getResolvedRootSlots().contains(rootSlot))__	};tests,that,the,root,slot,are,moved,from,unresolved,to,resolved,once,the,slot,context,future,is,successfully,completed;test,public,void,test,root,slot,transition,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,assert,true,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,false,slot,sharing,manager,get,resolved,root,slots,contains,root,slot,slot,context,future,complete,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,assert,false,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,true,slot,sharing,manager,get,resolved,root,slots,contains,root,slot
SlotSharingManagerTest -> @Test 	public void testRootSlotTransition();1522681180;Tests that the root slot are moved from unresolved to resolved once the_slot context future is successfully completed;@Test_	public void testRootSlotTransition() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		assertTrue(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertFalse(slotSharingManager.getResolvedRootSlots().contains(rootSlot))___		_		slotContextFuture.complete(_			new SimpleSlotContext(_				new AllocationID(),_				new LocalTaskManagerLocation(),_				0,_				new SimpleAckingTaskManagerGateway()))___		assertFalse(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertTrue(slotSharingManager.getResolvedRootSlots().contains(rootSlot))__	};tests,that,the,root,slot,are,moved,from,unresolved,to,resolved,once,the,slot,context,future,is,successfully,completed;test,public,void,test,root,slot,transition,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,assert,true,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,false,slot,sharing,manager,get,resolved,root,slots,contains,root,slot,slot,context,future,complete,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,assert,false,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,true,slot,sharing,manager,get,resolved,root,slots,contains,root,slot
SlotSharingManagerTest -> @Test 	public void testRootSlotTransition();1525961911;Tests that the root slot are moved from unresolved to resolved once the_slot context future is successfully completed;@Test_	public void testRootSlotTransition() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		assertTrue(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertFalse(slotSharingManager.getResolvedRootSlots().contains(rootSlot))___		_		slotContextFuture.complete(_			new SimpleSlotContext(_				new AllocationID(),_				new LocalTaskManagerLocation(),_				0,_				new SimpleAckingTaskManagerGateway()))___		assertFalse(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertTrue(slotSharingManager.getResolvedRootSlots().contains(rootSlot))__	};tests,that,the,root,slot,are,moved,from,unresolved,to,resolved,once,the,slot,context,future,is,successfully,completed;test,public,void,test,root,slot,transition,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,assert,true,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,false,slot,sharing,manager,get,resolved,root,slots,contains,root,slot,slot,context,future,complete,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,assert,false,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,true,slot,sharing,manager,get,resolved,root,slots,contains,root,slot
SlotSharingManagerTest -> @Test 	public void testRootSlotTransition();1526494919;Tests that the root slot are moved from unresolved to resolved once the_slot context future is successfully completed;@Test_	public void testRootSlotTransition() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		assertTrue(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertFalse(slotSharingManager.getResolvedRootSlots().contains(rootSlot))___		_		slotContextFuture.complete(_			new SimpleSlotContext(_				new AllocationID(),_				new LocalTaskManagerLocation(),_				0,_				new SimpleAckingTaskManagerGateway()))___		assertFalse(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertTrue(slotSharingManager.getResolvedRootSlots().contains(rootSlot))__	};tests,that,the,root,slot,are,moved,from,unresolved,to,resolved,once,the,slot,context,future,is,successfully,completed;test,public,void,test,root,slot,transition,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,assert,true,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,false,slot,sharing,manager,get,resolved,root,slots,contains,root,slot,slot,context,future,complete,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,assert,false,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,true,slot,sharing,manager,get,resolved,root,slots,contains,root,slot
SlotSharingManagerTest -> @Test 	public void testRootSlotTransition();1530104620;Tests that the root slot are moved from unresolved to resolved once the_slot context future is successfully completed;@Test_	public void testRootSlotTransition() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		assertTrue(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertFalse(slotSharingManager.getResolvedRootSlots().contains(rootSlot))___		_		slotContextFuture.complete(_			new SimpleSlotContext(_				new AllocationID(),_				new LocalTaskManagerLocation(),_				0,_				new SimpleAckingTaskManagerGateway()))___		assertFalse(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertTrue(slotSharingManager.getResolvedRootSlots().contains(rootSlot))__	};tests,that,the,root,slot,are,moved,from,unresolved,to,resolved,once,the,slot,context,future,is,successfully,completed;test,public,void,test,root,slot,transition,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,assert,true,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,false,slot,sharing,manager,get,resolved,root,slots,contains,root,slot,slot,context,future,complete,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,assert,false,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,true,slot,sharing,manager,get,resolved,root,slots,contains,root,slot
SlotSharingManagerTest -> @Test 	public void testRootSlotTransition();1550220073;Tests that the root slot are moved from unresolved to resolved once the_slot context future is successfully completed;@Test_	public void testRootSlotTransition() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		assertTrue(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertFalse(slotSharingManager.getResolvedRootSlots().contains(rootSlot))___		_		slotContextFuture.complete(_			new SimpleSlotContext(_				new AllocationID(),_				new LocalTaskManagerLocation(),_				0,_				new SimpleAckingTaskManagerGateway()))___		assertFalse(slotSharingManager.getUnresolvedRootSlots().contains(rootSlot))__		assertTrue(slotSharingManager.getResolvedRootSlots().contains(rootSlot))__	};tests,that,the,root,slot,are,moved,from,unresolved,to,resolved,once,the,slot,context,future,is,successfully,completed;test,public,void,test,root,slot,transition,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,assert,true,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,false,slot,sharing,manager,get,resolved,root,slots,contains,root,slot,slot,context,future,complete,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,assert,false,slot,sharing,manager,get,unresolved,root,slots,contains,root,slot,assert,true,slot,sharing,manager,get,resolved,root,slots,contains,root,slot
SlotSharingManagerTest -> @Test 	public void testNestedSlotCreation();1513261599;Tests that we can create nested slots.;@Test_	public void testNestedSlotCreation() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		AbstractID singleTaskSlotGroupId = new AbstractID()__		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			singleTaskSlotGroupId,_			Locality.LOCAL)___		AbstractID multiTaskSlotGroupId = new AbstractID()__		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			multiTaskSlotGroupId)___		assertTrue(Objects.equals(singleTaskSlotRequestId, singleTaskSlot.getSlotRequestId()))__		assertTrue(Objects.equals(multiTaskSlotRequestId, multiTaskSlot.getSlotRequestId()))___		assertTrue(rootSlot.contains(singleTaskSlotGroupId))__		assertTrue(rootSlot.contains(multiTaskSlotGroupId))___		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertTrue(slotSharingManager.contains(multiTaskSlotRequestId))__	};tests,that,we,can,create,nested,slots;test,public,void,test,nested,slot,creation,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,abstract,id,single,task,slot,group,id,new,abstract,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,single,task,slot,group,id,locality,local,abstract,id,multi,task,slot,group,id,new,abstract,id,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,multi,task,slot,group,id,assert,true,objects,equals,single,task,slot,request,id,single,task,slot,get,slot,request,id,assert,true,objects,equals,multi,task,slot,request,id,multi,task,slot,get,slot,request,id,assert,true,root,slot,contains,single,task,slot,group,id,assert,true,root,slot,contains,multi,task,slot,group,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,request,id
SlotSharingManagerTest -> @Test 	public void testNestedSlotCreation();1515669170;Tests that we can create nested slots.;@Test_	public void testNestedSlotCreation() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		AbstractID singleTaskSlotGroupId = new AbstractID()__		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			singleTaskSlotGroupId,_			Locality.LOCAL)___		AbstractID multiTaskSlotGroupId = new AbstractID()__		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			multiTaskSlotGroupId)___		assertTrue(Objects.equals(singleTaskSlotRequestId, singleTaskSlot.getSlotRequestId()))__		assertTrue(Objects.equals(multiTaskSlotRequestId, multiTaskSlot.getSlotRequestId()))___		assertTrue(rootSlot.contains(singleTaskSlotGroupId))__		assertTrue(rootSlot.contains(multiTaskSlotGroupId))___		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertTrue(slotSharingManager.contains(multiTaskSlotRequestId))__	};tests,that,we,can,create,nested,slots;test,public,void,test,nested,slot,creation,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,abstract,id,single,task,slot,group,id,new,abstract,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,single,task,slot,group,id,locality,local,abstract,id,multi,task,slot,group,id,new,abstract,id,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,multi,task,slot,group,id,assert,true,objects,equals,single,task,slot,request,id,single,task,slot,get,slot,request,id,assert,true,objects,equals,multi,task,slot,request,id,multi,task,slot,get,slot,request,id,assert,true,root,slot,contains,single,task,slot,group,id,assert,true,root,slot,contains,multi,task,slot,group,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,request,id
SlotSharingManagerTest -> @Test 	public void testNestedSlotCreation();1519655521;Tests that we can create nested slots.;@Test_	public void testNestedSlotCreation() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		AbstractID singleTaskSlotGroupId = new AbstractID()__		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			singleTaskSlotGroupId,_			Locality.LOCAL)___		AbstractID multiTaskSlotGroupId = new AbstractID()__		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			multiTaskSlotGroupId)___		assertTrue(Objects.equals(singleTaskSlotRequestId, singleTaskSlot.getSlotRequestId()))__		assertTrue(Objects.equals(multiTaskSlotRequestId, multiTaskSlot.getSlotRequestId()))___		assertTrue(rootSlot.contains(singleTaskSlotGroupId))__		assertTrue(rootSlot.contains(multiTaskSlotGroupId))___		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertTrue(slotSharingManager.contains(multiTaskSlotRequestId))__	};tests,that,we,can,create,nested,slots;test,public,void,test,nested,slot,creation,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,abstract,id,single,task,slot,group,id,new,abstract,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,single,task,slot,group,id,locality,local,abstract,id,multi,task,slot,group,id,new,abstract,id,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,multi,task,slot,group,id,assert,true,objects,equals,single,task,slot,request,id,single,task,slot,get,slot,request,id,assert,true,objects,equals,multi,task,slot,request,id,multi,task,slot,get,slot,request,id,assert,true,root,slot,contains,single,task,slot,group,id,assert,true,root,slot,contains,multi,task,slot,group,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,request,id
SlotSharingManagerTest -> @Test 	public void testNestedSlotCreation();1522681180;Tests that we can create nested slots.;@Test_	public void testNestedSlotCreation() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		AbstractID singleTaskSlotGroupId = new AbstractID()__		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			singleTaskSlotGroupId,_			Locality.LOCAL)___		AbstractID multiTaskSlotGroupId = new AbstractID()__		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			multiTaskSlotGroupId)___		assertTrue(Objects.equals(singleTaskSlotRequestId, singleTaskSlot.getSlotRequestId()))__		assertTrue(Objects.equals(multiTaskSlotRequestId, multiTaskSlot.getSlotRequestId()))___		assertTrue(rootSlot.contains(singleTaskSlotGroupId))__		assertTrue(rootSlot.contains(multiTaskSlotGroupId))___		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertTrue(slotSharingManager.contains(multiTaskSlotRequestId))__	};tests,that,we,can,create,nested,slots;test,public,void,test,nested,slot,creation,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,abstract,id,single,task,slot,group,id,new,abstract,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,single,task,slot,group,id,locality,local,abstract,id,multi,task,slot,group,id,new,abstract,id,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,multi,task,slot,group,id,assert,true,objects,equals,single,task,slot,request,id,single,task,slot,get,slot,request,id,assert,true,objects,equals,multi,task,slot,request,id,multi,task,slot,get,slot,request,id,assert,true,root,slot,contains,single,task,slot,group,id,assert,true,root,slot,contains,multi,task,slot,group,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,request,id
SlotSharingManagerTest -> @Test 	public void testNestedSlotCreation();1525961911;Tests that we can create nested slots.;@Test_	public void testNestedSlotCreation() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		AbstractID singleTaskSlotGroupId = new AbstractID()__		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			singleTaskSlotGroupId,_			Locality.LOCAL)___		AbstractID multiTaskSlotGroupId = new AbstractID()__		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			multiTaskSlotGroupId)___		assertTrue(Objects.equals(singleTaskSlotRequestId, singleTaskSlot.getSlotRequestId()))__		assertTrue(Objects.equals(multiTaskSlotRequestId, multiTaskSlot.getSlotRequestId()))___		assertTrue(rootSlot.contains(singleTaskSlotGroupId))__		assertTrue(rootSlot.contains(multiTaskSlotGroupId))___		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertTrue(slotSharingManager.contains(multiTaskSlotRequestId))__	};tests,that,we,can,create,nested,slots;test,public,void,test,nested,slot,creation,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,abstract,id,single,task,slot,group,id,new,abstract,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,single,task,slot,group,id,locality,local,abstract,id,multi,task,slot,group,id,new,abstract,id,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,multi,task,slot,group,id,assert,true,objects,equals,single,task,slot,request,id,single,task,slot,get,slot,request,id,assert,true,objects,equals,multi,task,slot,request,id,multi,task,slot,get,slot,request,id,assert,true,root,slot,contains,single,task,slot,group,id,assert,true,root,slot,contains,multi,task,slot,group,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,request,id
SlotSharingManagerTest -> @Test 	public void testNestedSlotCreation();1526494919;Tests that we can create nested slots.;@Test_	public void testNestedSlotCreation() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		AbstractID singleTaskSlotGroupId = new AbstractID()__		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			singleTaskSlotGroupId,_			Locality.LOCAL)___		AbstractID multiTaskSlotGroupId = new AbstractID()__		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			multiTaskSlotGroupId)___		assertTrue(Objects.equals(singleTaskSlotRequestId, singleTaskSlot.getSlotRequestId()))__		assertTrue(Objects.equals(multiTaskSlotRequestId, multiTaskSlot.getSlotRequestId()))___		assertTrue(rootSlot.contains(singleTaskSlotGroupId))__		assertTrue(rootSlot.contains(multiTaskSlotGroupId))___		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertTrue(slotSharingManager.contains(multiTaskSlotRequestId))__	};tests,that,we,can,create,nested,slots;test,public,void,test,nested,slot,creation,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,abstract,id,single,task,slot,group,id,new,abstract,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,single,task,slot,group,id,locality,local,abstract,id,multi,task,slot,group,id,new,abstract,id,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,multi,task,slot,group,id,assert,true,objects,equals,single,task,slot,request,id,single,task,slot,get,slot,request,id,assert,true,objects,equals,multi,task,slot,request,id,multi,task,slot,get,slot,request,id,assert,true,root,slot,contains,single,task,slot,group,id,assert,true,root,slot,contains,multi,task,slot,group,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,request,id
SlotSharingManagerTest -> @Test 	public void testNestedSlotCreation();1530104620;Tests that we can create nested slots.;@Test_	public void testNestedSlotCreation() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		AbstractID singleTaskSlotGroupId = new AbstractID()__		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			singleTaskSlotGroupId,_			Locality.LOCAL)___		AbstractID multiTaskSlotGroupId = new AbstractID()__		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			multiTaskSlotGroupId)___		assertTrue(Objects.equals(singleTaskSlotRequestId, singleTaskSlot.getSlotRequestId()))__		assertTrue(Objects.equals(multiTaskSlotRequestId, multiTaskSlot.getSlotRequestId()))___		assertTrue(rootSlot.contains(singleTaskSlotGroupId))__		assertTrue(rootSlot.contains(multiTaskSlotGroupId))___		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertTrue(slotSharingManager.contains(multiTaskSlotRequestId))__	};tests,that,we,can,create,nested,slots;test,public,void,test,nested,slot,creation,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,abstract,id,single,task,slot,group,id,new,abstract,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,single,task,slot,group,id,locality,local,abstract,id,multi,task,slot,group,id,new,abstract,id,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,multi,task,slot,group,id,assert,true,objects,equals,single,task,slot,request,id,single,task,slot,get,slot,request,id,assert,true,objects,equals,multi,task,slot,request,id,multi,task,slot,get,slot,request,id,assert,true,root,slot,contains,single,task,slot,group,id,assert,true,root,slot,contains,multi,task,slot,group,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,request,id
SlotSharingManagerTest -> @Test 	public void testNestedSlotCreation();1550220073;Tests that we can create nested slots.;@Test_	public void testNestedSlotCreation() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			new CompletableFuture<>(),_			new SlotRequestId())___		AbstractID singleTaskSlotGroupId = new AbstractID()__		SlotRequestId singleTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.SingleTaskSlot singleTaskSlot = rootSlot.allocateSingleTaskSlot(_			singleTaskSlotRequestId,_			singleTaskSlotGroupId,_			Locality.LOCAL)___		AbstractID multiTaskSlotGroupId = new AbstractID()__		SlotRequestId multiTaskSlotRequestId = new SlotRequestId()__		SlotSharingManager.MultiTaskSlot multiTaskSlot = rootSlot.allocateMultiTaskSlot(_			multiTaskSlotRequestId,_			multiTaskSlotGroupId)___		assertTrue(Objects.equals(singleTaskSlotRequestId, singleTaskSlot.getSlotRequestId()))__		assertTrue(Objects.equals(multiTaskSlotRequestId, multiTaskSlot.getSlotRequestId()))___		assertTrue(rootSlot.contains(singleTaskSlotGroupId))__		assertTrue(rootSlot.contains(multiTaskSlotGroupId))___		assertTrue(slotSharingManager.contains(singleTaskSlotRequestId))__		assertTrue(slotSharingManager.contains(multiTaskSlotRequestId))__	};tests,that,we,can,create,nested,slots;test,public,void,test,nested,slot,creation,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,new,completable,future,new,slot,request,id,abstract,id,single,task,slot,group,id,new,abstract,id,slot,request,id,single,task,slot,request,id,new,slot,request,id,slot,sharing,manager,single,task,slot,single,task,slot,root,slot,allocate,single,task,slot,single,task,slot,request,id,single,task,slot,group,id,locality,local,abstract,id,multi,task,slot,group,id,new,abstract,id,slot,request,id,multi,task,slot,request,id,new,slot,request,id,slot,sharing,manager,multi,task,slot,multi,task,slot,root,slot,allocate,multi,task,slot,multi,task,slot,request,id,multi,task,slot,group,id,assert,true,objects,equals,single,task,slot,request,id,single,task,slot,get,slot,request,id,assert,true,objects,equals,multi,task,slot,request,id,multi,task,slot,get,slot,request,id,assert,true,root,slot,contains,single,task,slot,group,id,assert,true,root,slot,contains,multi,task,slot,group,id,assert,true,slot,sharing,manager,contains,single,task,slot,request,id,assert,true,slot,sharing,manager,contains,multi,task,slot,request,id
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlot();1513261599;Tests that we can correctly retrieve resolved slots.;@Test_	public void testGetResolvedSlot() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlotLocality = slotSharingManager.getResolvedRootSlot(groupId, Collections.emptyList())___		assertNotNull(resolvedRootSlotLocality)__		assertEquals(Locality.UNCONSTRAINED, resolvedRootSlotLocality.getLocality())__		assertEquals(rootSlot.getSlotRequestId(), resolvedRootSlotLocality.getMultiTaskSlot().getSlotRequestId())___		SlotSharingManager.MultiTaskSlot resolvedRootSlot = resolvedRootSlotLocality.getMultiTaskSlot()___		_		resolvedRootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlotLocality.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(_			groupId,_			Collections.emptyList())___		assertNull(resolvedRootSlot1)__	};tests,that,we,can,correctly,retrieve,resolved,slots;test,public,void,test,get,resolved,slot,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,collections,empty,list,assert,not,null,resolved,root,slot,locality,assert,equals,locality,unconstrained,resolved,root,slot,locality,get,locality,assert,equals,root,slot,get,slot,request,id,resolved,root,slot,locality,get,multi,task,slot,get,slot,request,id,slot,sharing,manager,multi,task,slot,resolved,root,slot,resolved,root,slot,locality,get,multi,task,slot,resolved,root,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot,locality,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,collections,empty,list,assert,null,resolved,root,slot1
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlot();1515669170;Tests that we can correctly retrieve resolved slots.;@Test_	public void testGetResolvedSlot() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlotLocality = slotSharingManager.getResolvedRootSlot(groupId, Collections.emptyList())___		assertNotNull(resolvedRootSlotLocality)__		assertEquals(Locality.UNCONSTRAINED, resolvedRootSlotLocality.getLocality())__		assertEquals(rootSlot.getSlotRequestId(), resolvedRootSlotLocality.getMultiTaskSlot().getSlotRequestId())___		SlotSharingManager.MultiTaskSlot resolvedRootSlot = resolvedRootSlotLocality.getMultiTaskSlot()___		_		resolvedRootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlotLocality.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(_			groupId,_			Collections.emptyList())___		assertNull(resolvedRootSlot1)__	};tests,that,we,can,correctly,retrieve,resolved,slots;test,public,void,test,get,resolved,slot,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,collections,empty,list,assert,not,null,resolved,root,slot,locality,assert,equals,locality,unconstrained,resolved,root,slot,locality,get,locality,assert,equals,root,slot,get,slot,request,id,resolved,root,slot,locality,get,multi,task,slot,get,slot,request,id,slot,sharing,manager,multi,task,slot,resolved,root,slot,resolved,root,slot,locality,get,multi,task,slot,resolved,root,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot,locality,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,collections,empty,list,assert,null,resolved,root,slot1
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlot();1519655521;Tests that we can correctly retrieve resolved slots.;@Test_	public void testGetResolvedSlot() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlotLocality =_			slotSharingManager.getResolvedRootSlot(groupId, SlotProfile.noRequirements().matcher())___		assertNotNull(resolvedRootSlotLocality)__		assertEquals(Locality.UNCONSTRAINED, resolvedRootSlotLocality.getLocality())__		assertEquals(rootSlot.getSlotRequestId(), resolvedRootSlotLocality.getMultiTaskSlot().getSlotRequestId())___		SlotSharingManager.MultiTaskSlot resolvedRootSlot = resolvedRootSlotLocality.getMultiTaskSlot()___		_		resolvedRootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlotLocality.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(_			groupId,_			SlotProfile.noRequirements().matcher())___		assertNull(resolvedRootSlot1)__	};tests,that,we,can,correctly,retrieve,resolved,slots;test,public,void,test,get,resolved,slot,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,no,requirements,matcher,assert,not,null,resolved,root,slot,locality,assert,equals,locality,unconstrained,resolved,root,slot,locality,get,locality,assert,equals,root,slot,get,slot,request,id,resolved,root,slot,locality,get,multi,task,slot,get,slot,request,id,slot,sharing,manager,multi,task,slot,resolved,root,slot,resolved,root,slot,locality,get,multi,task,slot,resolved,root,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot,locality,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,no,requirements,matcher,assert,null,resolved,root,slot1
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlot();1522681180;Tests that we can correctly retrieve resolved slots.;@Test_	public void testGetResolvedSlot() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlotLocality =_			slotSharingManager.getResolvedRootSlot(groupId, SlotProfile.noRequirements().matcher())___		assertNotNull(resolvedRootSlotLocality)__		assertEquals(Locality.UNCONSTRAINED, resolvedRootSlotLocality.getLocality())__		assertEquals(rootSlot.getSlotRequestId(), resolvedRootSlotLocality.getMultiTaskSlot().getSlotRequestId())___		SlotSharingManager.MultiTaskSlot resolvedRootSlot = resolvedRootSlotLocality.getMultiTaskSlot()___		_		resolvedRootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlotLocality.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(_			groupId,_			SlotProfile.noRequirements().matcher())___		assertNull(resolvedRootSlot1)__	};tests,that,we,can,correctly,retrieve,resolved,slots;test,public,void,test,get,resolved,slot,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,no,requirements,matcher,assert,not,null,resolved,root,slot,locality,assert,equals,locality,unconstrained,resolved,root,slot,locality,get,locality,assert,equals,root,slot,get,slot,request,id,resolved,root,slot,locality,get,multi,task,slot,get,slot,request,id,slot,sharing,manager,multi,task,slot,resolved,root,slot,resolved,root,slot,locality,get,multi,task,slot,resolved,root,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot,locality,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,no,requirements,matcher,assert,null,resolved,root,slot1
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlot();1525961911;Tests that we can correctly retrieve resolved slots.;@Test_	public void testGetResolvedSlot() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlotLocality =_			slotSharingManager.getResolvedRootSlot(groupId, SlotProfile.noRequirements().matcher())___		assertNotNull(resolvedRootSlotLocality)__		assertEquals(Locality.UNCONSTRAINED, resolvedRootSlotLocality.getLocality())__		assertEquals(rootSlot.getSlotRequestId(), resolvedRootSlotLocality.getMultiTaskSlot().getSlotRequestId())___		SlotSharingManager.MultiTaskSlot resolvedRootSlot = resolvedRootSlotLocality.getMultiTaskSlot()___		_		resolvedRootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlotLocality.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(_			groupId,_			SlotProfile.noRequirements().matcher())___		assertNull(resolvedRootSlot1)__	};tests,that,we,can,correctly,retrieve,resolved,slots;test,public,void,test,get,resolved,slot,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,no,requirements,matcher,assert,not,null,resolved,root,slot,locality,assert,equals,locality,unconstrained,resolved,root,slot,locality,get,locality,assert,equals,root,slot,get,slot,request,id,resolved,root,slot,locality,get,multi,task,slot,get,slot,request,id,slot,sharing,manager,multi,task,slot,resolved,root,slot,resolved,root,slot,locality,get,multi,task,slot,resolved,root,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot,locality,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,no,requirements,matcher,assert,null,resolved,root,slot1
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlot();1526494919;Tests that we can correctly retrieve resolved slots.;@Test_	public void testGetResolvedSlot() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlotLocality =_			slotSharingManager.getResolvedRootSlot(groupId, SlotProfile.noRequirements().matcher())___		assertNotNull(resolvedRootSlotLocality)__		assertEquals(Locality.UNCONSTRAINED, resolvedRootSlotLocality.getLocality())__		assertEquals(rootSlot.getSlotRequestId(), resolvedRootSlotLocality.getMultiTaskSlot().getSlotRequestId())___		SlotSharingManager.MultiTaskSlot resolvedRootSlot = resolvedRootSlotLocality.getMultiTaskSlot()___		_		resolvedRootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlotLocality.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(_			groupId,_			SlotProfile.noRequirements().matcher())___		assertNull(resolvedRootSlot1)__	};tests,that,we,can,correctly,retrieve,resolved,slots;test,public,void,test,get,resolved,slot,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,no,requirements,matcher,assert,not,null,resolved,root,slot,locality,assert,equals,locality,unconstrained,resolved,root,slot,locality,get,locality,assert,equals,root,slot,get,slot,request,id,resolved,root,slot,locality,get,multi,task,slot,get,slot,request,id,slot,sharing,manager,multi,task,slot,resolved,root,slot,resolved,root,slot,locality,get,multi,task,slot,resolved,root,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot,locality,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,no,requirements,matcher,assert,null,resolved,root,slot1
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlot();1530104620;Tests that we can correctly retrieve resolved slots.;@Test_	public void testGetResolvedSlot() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()__		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlotLocality =_			slotSharingManager.getResolvedRootSlot(groupId, LocationPreferenceSchedulingStrategy.getInstance(), SlotProfile.noRequirements())___		assertNotNull(resolvedRootSlotLocality)__		assertEquals(Locality.UNCONSTRAINED, resolvedRootSlotLocality.getLocality())__		assertEquals(rootSlot.getSlotRequestId(), resolvedRootSlotLocality.getMultiTaskSlot().getSlotRequestId())___		SlotSharingManager.MultiTaskSlot resolvedRootSlot = resolvedRootSlotLocality.getMultiTaskSlot()___		_		resolvedRootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			resolvedRootSlotLocality.getLocality())___		SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1 = slotSharingManager.getResolvedRootSlot(_			groupId,_			LocationPreferenceSchedulingStrategy.getInstance(),_			SlotProfile.noRequirements())___		assertNull(resolvedRootSlot1)__	};tests,that,we,can,correctly,retrieve,resolved,slots;test,public,void,test,get,resolved,slot,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preference,scheduling,strategy,get,instance,slot,profile,no,requirements,assert,not,null,resolved,root,slot,locality,assert,equals,locality,unconstrained,resolved,root,slot,locality,get,locality,assert,equals,root,slot,get,slot,request,id,resolved,root,slot,locality,get,multi,task,slot,get,slot,request,id,slot,sharing,manager,multi,task,slot,resolved,root,slot,resolved,root,slot,locality,get,multi,task,slot,resolved,root,slot,allocate,single,task,slot,new,slot,request,id,group,id,resolved,root,slot,locality,get,locality,slot,sharing,manager,multi,task,slot,locality,resolved,root,slot1,slot,sharing,manager,get,resolved,root,slot,group,id,location,preference,scheduling,strategy,get,instance,slot,profile,no,requirements,assert,null,resolved,root,slot1
SlotSharingManagerTest -> @Test 	public void testGetResolvedSlot();1550220073;Tests that we can correctly retrieve resolved slots.;@Test_	public void testGetResolvedSlot() {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			CompletableFuture.completedFuture(_				new SimpleSlotContext(_					new AllocationID(),_					new LocalTaskManagerLocation(),_					0,_					new SimpleAckingTaskManagerGateway())),_			new SlotRequestId())___		AbstractID groupId = new AbstractID()___		Collection<SlotInfo> slotInfos = slotSharingManager.listResolvedRootSlotInfo(groupId)__		Assert.assertEquals(1, slotInfos.size())___		SlotInfo slotInfo = slotInfos.iterator().next()__		SlotSharingManager.MultiTaskSlot resolvedMultiTaskSlot =_			slotSharingManager.getResolvedRootSlot(slotInfo)___		SlotSelectionStrategy.SlotInfoAndLocality slotInfoAndLocality =_			LocationPreferenceSlotSelectionStrategy.INSTANCE.selectBestSlotForProfile(slotInfos, SlotProfile.noRequirements()).get()___		assertNotNull(resolvedMultiTaskSlot)__		assertEquals(Locality.UNCONSTRAINED, slotInfoAndLocality.getLocality())__		assertEquals(rootSlot.getSlotRequestId(), resolvedMultiTaskSlot.getSlotRequestId())___		_		resolvedMultiTaskSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			groupId,_			Locality.UNCONSTRAINED)___		slotInfos = slotSharingManager.listResolvedRootSlotInfo(groupId)__		assertTrue(slotInfos.isEmpty())__	};tests,that,we,can,correctly,retrieve,resolved,slots;test,public,void,test,get,resolved,slot,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,completable,future,completed,future,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,new,slot,request,id,abstract,id,group,id,new,abstract,id,collection,slot,info,slot,infos,slot,sharing,manager,list,resolved,root,slot,info,group,id,assert,assert,equals,1,slot,infos,size,slot,info,slot,info,slot,infos,iterator,next,slot,sharing,manager,multi,task,slot,resolved,multi,task,slot,slot,sharing,manager,get,resolved,root,slot,slot,info,slot,selection,strategy,slot,info,and,locality,slot,info,and,locality,location,preference,slot,selection,strategy,instance,select,best,slot,for,profile,slot,infos,slot,profile,no,requirements,get,assert,not,null,resolved,multi,task,slot,assert,equals,locality,unconstrained,slot,info,and,locality,get,locality,assert,equals,root,slot,get,slot,request,id,resolved,multi,task,slot,get,slot,request,id,resolved,multi,task,slot,allocate,single,task,slot,new,slot,request,id,group,id,locality,unconstrained,slot,infos,slot,sharing,manager,list,resolved,root,slot,info,group,id,assert,true,slot,infos,is,empty
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureCompletion() throws Exception;1513261599;Tests that the logical task slot futures are completed once the slot context_future is completed.;@Test_	public void testSlotContextFutureCompletion() throws Exception {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		final SlotContext slotContext = new SimpleSlotContext(_			new AllocationID(),_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		Locality locality1 = Locality.LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality1)___		Locality locality2 = Locality.HOST_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot2 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality2)___		CompletableFuture<LogicalSlot> logicalSlotFuture1 = singleTaskSlot1.getLogicalSlotFuture()__		CompletableFuture<LogicalSlot> logicalSlotFuture2 = singleTaskSlot2.getLogicalSlotFuture()__		assertFalse(logicalSlotFuture1.isDone())__		assertFalse(logicalSlotFuture2.isDone())___		slotContextFuture.complete(slotContext)___		assertTrue(logicalSlotFuture1.isDone())__		assertTrue(logicalSlotFuture2.isDone())___		final LogicalSlot logicalSlot1 = logicalSlotFuture1.get()__		final LogicalSlot logicalSlot2 = logicalSlotFuture2.get()___		assertEquals(logicalSlot1.getAllocationId(), slotContext.getAllocationId())__		assertEquals(logicalSlot2.getAllocationId(), slotContext.getAllocationId())__		assertEquals(locality1, logicalSlot1.getLocality())__		assertEquals(locality2, logicalSlot2.getLocality())___		Locality locality3 = Locality.NON_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot3 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality3)___		CompletableFuture<LogicalSlot> logicalSlotFuture3 = singleTaskSlot3.getLogicalSlotFuture()___		assertTrue(logicalSlotFuture3.isDone())__		LogicalSlot logicalSlot3 = logicalSlotFuture3.get()___		assertEquals(locality3, logicalSlot3.getLocality())__		assertEquals(slotContext.getAllocationId(), logicalSlot3.getAllocationId())__	};tests,that,the,logical,task,slot,futures,are,completed,once,the,slot,context,future,is,completed;test,public,void,test,slot,context,future,completion,throws,exception,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,final,slot,context,slot,context,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,locality,locality1,locality,local,slot,sharing,manager,single,task,slot,single,task,slot1,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality1,locality,locality2,locality,slot,sharing,manager,single,task,slot,single,task,slot2,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality2,completable,future,logical,slot,logical,slot,future1,single,task,slot1,get,logical,slot,future,completable,future,logical,slot,logical,slot,future2,single,task,slot2,get,logical,slot,future,assert,false,logical,slot,future1,is,done,assert,false,logical,slot,future2,is,done,slot,context,future,complete,slot,context,assert,true,logical,slot,future1,is,done,assert,true,logical,slot,future2,is,done,final,logical,slot,logical,slot1,logical,slot,future1,get,final,logical,slot,logical,slot2,logical,slot,future2,get,assert,equals,logical,slot1,get,allocation,id,slot,context,get,allocation,id,assert,equals,logical,slot2,get,allocation,id,slot,context,get,allocation,id,assert,equals,locality1,logical,slot1,get,locality,assert,equals,locality2,logical,slot2,get,locality,locality,locality3,locality,slot,sharing,manager,single,task,slot,single,task,slot3,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality3,completable,future,logical,slot,logical,slot,future3,single,task,slot3,get,logical,slot,future,assert,true,logical,slot,future3,is,done,logical,slot,logical,slot3,logical,slot,future3,get,assert,equals,locality3,logical,slot3,get,locality,assert,equals,slot,context,get,allocation,id,logical,slot3,get,allocation,id
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureCompletion() throws Exception;1515669170;Tests that the logical task slot futures are completed once the slot context_future is completed.;@Test_	public void testSlotContextFutureCompletion() throws Exception {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		final SlotContext slotContext = new SimpleSlotContext(_			new AllocationID(),_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		Locality locality1 = Locality.LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality1)___		Locality locality2 = Locality.HOST_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot2 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality2)___		CompletableFuture<LogicalSlot> logicalSlotFuture1 = singleTaskSlot1.getLogicalSlotFuture()__		CompletableFuture<LogicalSlot> logicalSlotFuture2 = singleTaskSlot2.getLogicalSlotFuture()__		assertFalse(logicalSlotFuture1.isDone())__		assertFalse(logicalSlotFuture2.isDone())___		slotContextFuture.complete(slotContext)___		assertTrue(logicalSlotFuture1.isDone())__		assertTrue(logicalSlotFuture2.isDone())___		final LogicalSlot logicalSlot1 = logicalSlotFuture1.get()__		final LogicalSlot logicalSlot2 = logicalSlotFuture2.get()___		assertEquals(logicalSlot1.getAllocationId(), slotContext.getAllocationId())__		assertEquals(logicalSlot2.getAllocationId(), slotContext.getAllocationId())__		assertEquals(locality1, logicalSlot1.getLocality())__		assertEquals(locality2, logicalSlot2.getLocality())___		Locality locality3 = Locality.NON_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot3 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality3)___		CompletableFuture<LogicalSlot> logicalSlotFuture3 = singleTaskSlot3.getLogicalSlotFuture()___		assertTrue(logicalSlotFuture3.isDone())__		LogicalSlot logicalSlot3 = logicalSlotFuture3.get()___		assertEquals(locality3, logicalSlot3.getLocality())__		assertEquals(slotContext.getAllocationId(), logicalSlot3.getAllocationId())__	};tests,that,the,logical,task,slot,futures,are,completed,once,the,slot,context,future,is,completed;test,public,void,test,slot,context,future,completion,throws,exception,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,final,slot,context,slot,context,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,locality,locality1,locality,local,slot,sharing,manager,single,task,slot,single,task,slot1,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality1,locality,locality2,locality,slot,sharing,manager,single,task,slot,single,task,slot2,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality2,completable,future,logical,slot,logical,slot,future1,single,task,slot1,get,logical,slot,future,completable,future,logical,slot,logical,slot,future2,single,task,slot2,get,logical,slot,future,assert,false,logical,slot,future1,is,done,assert,false,logical,slot,future2,is,done,slot,context,future,complete,slot,context,assert,true,logical,slot,future1,is,done,assert,true,logical,slot,future2,is,done,final,logical,slot,logical,slot1,logical,slot,future1,get,final,logical,slot,logical,slot2,logical,slot,future2,get,assert,equals,logical,slot1,get,allocation,id,slot,context,get,allocation,id,assert,equals,logical,slot2,get,allocation,id,slot,context,get,allocation,id,assert,equals,locality1,logical,slot1,get,locality,assert,equals,locality2,logical,slot2,get,locality,locality,locality3,locality,slot,sharing,manager,single,task,slot,single,task,slot3,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality3,completable,future,logical,slot,logical,slot,future3,single,task,slot3,get,logical,slot,future,assert,true,logical,slot,future3,is,done,logical,slot,logical,slot3,logical,slot,future3,get,assert,equals,locality3,logical,slot3,get,locality,assert,equals,slot,context,get,allocation,id,logical,slot3,get,allocation,id
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureCompletion() throws Exception;1519655521;Tests that the logical task slot futures are completed once the slot context_future is completed.;@Test_	public void testSlotContextFutureCompletion() throws Exception {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		final SlotContext slotContext = new SimpleSlotContext(_			new AllocationID(),_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		Locality locality1 = Locality.LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality1)___		Locality locality2 = Locality.HOST_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot2 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality2)___		CompletableFuture<LogicalSlot> logicalSlotFuture1 = singleTaskSlot1.getLogicalSlotFuture()__		CompletableFuture<LogicalSlot> logicalSlotFuture2 = singleTaskSlot2.getLogicalSlotFuture()__		assertFalse(logicalSlotFuture1.isDone())__		assertFalse(logicalSlotFuture2.isDone())___		slotContextFuture.complete(slotContext)___		assertTrue(logicalSlotFuture1.isDone())__		assertTrue(logicalSlotFuture2.isDone())___		final LogicalSlot logicalSlot1 = logicalSlotFuture1.get()__		final LogicalSlot logicalSlot2 = logicalSlotFuture2.get()___		assertEquals(logicalSlot1.getAllocationId(), slotContext.getAllocationId())__		assertEquals(logicalSlot2.getAllocationId(), slotContext.getAllocationId())__		assertEquals(locality1, logicalSlot1.getLocality())__		assertEquals(locality2, logicalSlot2.getLocality())___		Locality locality3 = Locality.NON_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot3 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality3)___		CompletableFuture<LogicalSlot> logicalSlotFuture3 = singleTaskSlot3.getLogicalSlotFuture()___		assertTrue(logicalSlotFuture3.isDone())__		LogicalSlot logicalSlot3 = logicalSlotFuture3.get()___		assertEquals(locality3, logicalSlot3.getLocality())__		assertEquals(slotContext.getAllocationId(), logicalSlot3.getAllocationId())__	};tests,that,the,logical,task,slot,futures,are,completed,once,the,slot,context,future,is,completed;test,public,void,test,slot,context,future,completion,throws,exception,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,final,slot,context,slot,context,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,locality,locality1,locality,local,slot,sharing,manager,single,task,slot,single,task,slot1,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality1,locality,locality2,locality,slot,sharing,manager,single,task,slot,single,task,slot2,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality2,completable,future,logical,slot,logical,slot,future1,single,task,slot1,get,logical,slot,future,completable,future,logical,slot,logical,slot,future2,single,task,slot2,get,logical,slot,future,assert,false,logical,slot,future1,is,done,assert,false,logical,slot,future2,is,done,slot,context,future,complete,slot,context,assert,true,logical,slot,future1,is,done,assert,true,logical,slot,future2,is,done,final,logical,slot,logical,slot1,logical,slot,future1,get,final,logical,slot,logical,slot2,logical,slot,future2,get,assert,equals,logical,slot1,get,allocation,id,slot,context,get,allocation,id,assert,equals,logical,slot2,get,allocation,id,slot,context,get,allocation,id,assert,equals,locality1,logical,slot1,get,locality,assert,equals,locality2,logical,slot2,get,locality,locality,locality3,locality,slot,sharing,manager,single,task,slot,single,task,slot3,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality3,completable,future,logical,slot,logical,slot,future3,single,task,slot3,get,logical,slot,future,assert,true,logical,slot,future3,is,done,logical,slot,logical,slot3,logical,slot,future3,get,assert,equals,locality3,logical,slot3,get,locality,assert,equals,slot,context,get,allocation,id,logical,slot3,get,allocation,id
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureCompletion() throws Exception;1522681180;Tests that the logical task slot futures are completed once the slot context_future is completed.;@Test_	public void testSlotContextFutureCompletion() throws Exception {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		final SlotContext slotContext = new SimpleSlotContext(_			new AllocationID(),_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		Locality locality1 = Locality.LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality1)___		Locality locality2 = Locality.HOST_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot2 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality2)___		CompletableFuture<LogicalSlot> logicalSlotFuture1 = singleTaskSlot1.getLogicalSlotFuture()__		CompletableFuture<LogicalSlot> logicalSlotFuture2 = singleTaskSlot2.getLogicalSlotFuture()__		assertFalse(logicalSlotFuture1.isDone())__		assertFalse(logicalSlotFuture2.isDone())___		slotContextFuture.complete(slotContext)___		assertTrue(logicalSlotFuture1.isDone())__		assertTrue(logicalSlotFuture2.isDone())___		final LogicalSlot logicalSlot1 = logicalSlotFuture1.get()__		final LogicalSlot logicalSlot2 = logicalSlotFuture2.get()___		assertEquals(logicalSlot1.getAllocationId(), slotContext.getAllocationId())__		assertEquals(logicalSlot2.getAllocationId(), slotContext.getAllocationId())__		assertEquals(locality1, logicalSlot1.getLocality())__		assertEquals(locality2, logicalSlot2.getLocality())___		Locality locality3 = Locality.NON_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot3 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality3)___		CompletableFuture<LogicalSlot> logicalSlotFuture3 = singleTaskSlot3.getLogicalSlotFuture()___		assertTrue(logicalSlotFuture3.isDone())__		LogicalSlot logicalSlot3 = logicalSlotFuture3.get()___		assertEquals(locality3, logicalSlot3.getLocality())__		assertEquals(slotContext.getAllocationId(), logicalSlot3.getAllocationId())__	};tests,that,the,logical,task,slot,futures,are,completed,once,the,slot,context,future,is,completed;test,public,void,test,slot,context,future,completion,throws,exception,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,final,slot,context,slot,context,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,locality,locality1,locality,local,slot,sharing,manager,single,task,slot,single,task,slot1,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality1,locality,locality2,locality,slot,sharing,manager,single,task,slot,single,task,slot2,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality2,completable,future,logical,slot,logical,slot,future1,single,task,slot1,get,logical,slot,future,completable,future,logical,slot,logical,slot,future2,single,task,slot2,get,logical,slot,future,assert,false,logical,slot,future1,is,done,assert,false,logical,slot,future2,is,done,slot,context,future,complete,slot,context,assert,true,logical,slot,future1,is,done,assert,true,logical,slot,future2,is,done,final,logical,slot,logical,slot1,logical,slot,future1,get,final,logical,slot,logical,slot2,logical,slot,future2,get,assert,equals,logical,slot1,get,allocation,id,slot,context,get,allocation,id,assert,equals,logical,slot2,get,allocation,id,slot,context,get,allocation,id,assert,equals,locality1,logical,slot1,get,locality,assert,equals,locality2,logical,slot2,get,locality,locality,locality3,locality,slot,sharing,manager,single,task,slot,single,task,slot3,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality3,completable,future,logical,slot,logical,slot,future3,single,task,slot3,get,logical,slot,future,assert,true,logical,slot,future3,is,done,logical,slot,logical,slot3,logical,slot,future3,get,assert,equals,locality3,logical,slot3,get,locality,assert,equals,slot,context,get,allocation,id,logical,slot3,get,allocation,id
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureCompletion() throws Exception;1525961911;Tests that the logical task slot futures are completed once the slot context_future is completed.;@Test_	public void testSlotContextFutureCompletion() throws Exception {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		final SlotContext slotContext = new SimpleSlotContext(_			new AllocationID(),_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		Locality locality1 = Locality.LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality1)___		Locality locality2 = Locality.HOST_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot2 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality2)___		CompletableFuture<LogicalSlot> logicalSlotFuture1 = singleTaskSlot1.getLogicalSlotFuture()__		CompletableFuture<LogicalSlot> logicalSlotFuture2 = singleTaskSlot2.getLogicalSlotFuture()__		assertFalse(logicalSlotFuture1.isDone())__		assertFalse(logicalSlotFuture2.isDone())___		slotContextFuture.complete(slotContext)___		assertTrue(logicalSlotFuture1.isDone())__		assertTrue(logicalSlotFuture2.isDone())___		final LogicalSlot logicalSlot1 = logicalSlotFuture1.get()__		final LogicalSlot logicalSlot2 = logicalSlotFuture2.get()___		assertEquals(logicalSlot1.getAllocationId(), slotContext.getAllocationId())__		assertEquals(logicalSlot2.getAllocationId(), slotContext.getAllocationId())__		assertEquals(locality1, logicalSlot1.getLocality())__		assertEquals(locality2, logicalSlot2.getLocality())___		Locality locality3 = Locality.NON_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot3 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality3)___		CompletableFuture<LogicalSlot> logicalSlotFuture3 = singleTaskSlot3.getLogicalSlotFuture()___		assertTrue(logicalSlotFuture3.isDone())__		LogicalSlot logicalSlot3 = logicalSlotFuture3.get()___		assertEquals(locality3, logicalSlot3.getLocality())__		assertEquals(slotContext.getAllocationId(), logicalSlot3.getAllocationId())__	};tests,that,the,logical,task,slot,futures,are,completed,once,the,slot,context,future,is,completed;test,public,void,test,slot,context,future,completion,throws,exception,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,final,slot,context,slot,context,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,locality,locality1,locality,local,slot,sharing,manager,single,task,slot,single,task,slot1,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality1,locality,locality2,locality,slot,sharing,manager,single,task,slot,single,task,slot2,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality2,completable,future,logical,slot,logical,slot,future1,single,task,slot1,get,logical,slot,future,completable,future,logical,slot,logical,slot,future2,single,task,slot2,get,logical,slot,future,assert,false,logical,slot,future1,is,done,assert,false,logical,slot,future2,is,done,slot,context,future,complete,slot,context,assert,true,logical,slot,future1,is,done,assert,true,logical,slot,future2,is,done,final,logical,slot,logical,slot1,logical,slot,future1,get,final,logical,slot,logical,slot2,logical,slot,future2,get,assert,equals,logical,slot1,get,allocation,id,slot,context,get,allocation,id,assert,equals,logical,slot2,get,allocation,id,slot,context,get,allocation,id,assert,equals,locality1,logical,slot1,get,locality,assert,equals,locality2,logical,slot2,get,locality,locality,locality3,locality,slot,sharing,manager,single,task,slot,single,task,slot3,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality3,completable,future,logical,slot,logical,slot,future3,single,task,slot3,get,logical,slot,future,assert,true,logical,slot,future3,is,done,logical,slot,logical,slot3,logical,slot,future3,get,assert,equals,locality3,logical,slot3,get,locality,assert,equals,slot,context,get,allocation,id,logical,slot3,get,allocation,id
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureCompletion() throws Exception;1526494919;Tests that the logical task slot futures are completed once the slot context_future is completed.;@Test_	public void testSlotContextFutureCompletion() throws Exception {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		final SlotContext slotContext = new SimpleSlotContext(_			new AllocationID(),_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		Locality locality1 = Locality.LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality1)___		Locality locality2 = Locality.HOST_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot2 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality2)___		CompletableFuture<LogicalSlot> logicalSlotFuture1 = singleTaskSlot1.getLogicalSlotFuture()__		CompletableFuture<LogicalSlot> logicalSlotFuture2 = singleTaskSlot2.getLogicalSlotFuture()__		assertFalse(logicalSlotFuture1.isDone())__		assertFalse(logicalSlotFuture2.isDone())___		slotContextFuture.complete(slotContext)___		assertTrue(logicalSlotFuture1.isDone())__		assertTrue(logicalSlotFuture2.isDone())___		final LogicalSlot logicalSlot1 = logicalSlotFuture1.get()__		final LogicalSlot logicalSlot2 = logicalSlotFuture2.get()___		assertEquals(logicalSlot1.getAllocationId(), slotContext.getAllocationId())__		assertEquals(logicalSlot2.getAllocationId(), slotContext.getAllocationId())__		assertEquals(locality1, logicalSlot1.getLocality())__		assertEquals(locality2, logicalSlot2.getLocality())___		Locality locality3 = Locality.NON_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot3 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality3)___		CompletableFuture<LogicalSlot> logicalSlotFuture3 = singleTaskSlot3.getLogicalSlotFuture()___		assertTrue(logicalSlotFuture3.isDone())__		LogicalSlot logicalSlot3 = logicalSlotFuture3.get()___		assertEquals(locality3, logicalSlot3.getLocality())__		assertEquals(slotContext.getAllocationId(), logicalSlot3.getAllocationId())__	};tests,that,the,logical,task,slot,futures,are,completed,once,the,slot,context,future,is,completed;test,public,void,test,slot,context,future,completion,throws,exception,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,final,slot,context,slot,context,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,locality,locality1,locality,local,slot,sharing,manager,single,task,slot,single,task,slot1,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality1,locality,locality2,locality,slot,sharing,manager,single,task,slot,single,task,slot2,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality2,completable,future,logical,slot,logical,slot,future1,single,task,slot1,get,logical,slot,future,completable,future,logical,slot,logical,slot,future2,single,task,slot2,get,logical,slot,future,assert,false,logical,slot,future1,is,done,assert,false,logical,slot,future2,is,done,slot,context,future,complete,slot,context,assert,true,logical,slot,future1,is,done,assert,true,logical,slot,future2,is,done,final,logical,slot,logical,slot1,logical,slot,future1,get,final,logical,slot,logical,slot2,logical,slot,future2,get,assert,equals,logical,slot1,get,allocation,id,slot,context,get,allocation,id,assert,equals,logical,slot2,get,allocation,id,slot,context,get,allocation,id,assert,equals,locality1,logical,slot1,get,locality,assert,equals,locality2,logical,slot2,get,locality,locality,locality3,locality,slot,sharing,manager,single,task,slot,single,task,slot3,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality3,completable,future,logical,slot,logical,slot,future3,single,task,slot3,get,logical,slot,future,assert,true,logical,slot,future3,is,done,logical,slot,logical,slot3,logical,slot,future3,get,assert,equals,locality3,logical,slot3,get,locality,assert,equals,slot,context,get,allocation,id,logical,slot3,get,allocation,id
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureCompletion() throws Exception;1530104620;Tests that the logical task slot futures are completed once the slot context_future is completed.;@Test_	public void testSlotContextFutureCompletion() throws Exception {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		final SlotContext slotContext = new SimpleSlotContext(_			new AllocationID(),_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		Locality locality1 = Locality.LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality1)___		Locality locality2 = Locality.HOST_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot2 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality2)___		CompletableFuture<LogicalSlot> logicalSlotFuture1 = singleTaskSlot1.getLogicalSlotFuture()__		CompletableFuture<LogicalSlot> logicalSlotFuture2 = singleTaskSlot2.getLogicalSlotFuture()__		assertFalse(logicalSlotFuture1.isDone())__		assertFalse(logicalSlotFuture2.isDone())___		slotContextFuture.complete(slotContext)___		assertTrue(logicalSlotFuture1.isDone())__		assertTrue(logicalSlotFuture2.isDone())___		final LogicalSlot logicalSlot1 = logicalSlotFuture1.get()__		final LogicalSlot logicalSlot2 = logicalSlotFuture2.get()___		assertEquals(logicalSlot1.getAllocationId(), slotContext.getAllocationId())__		assertEquals(logicalSlot2.getAllocationId(), slotContext.getAllocationId())__		assertEquals(locality1, logicalSlot1.getLocality())__		assertEquals(locality2, logicalSlot2.getLocality())___		Locality locality3 = Locality.NON_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot3 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality3)___		CompletableFuture<LogicalSlot> logicalSlotFuture3 = singleTaskSlot3.getLogicalSlotFuture()___		assertTrue(logicalSlotFuture3.isDone())__		LogicalSlot logicalSlot3 = logicalSlotFuture3.get()___		assertEquals(locality3, logicalSlot3.getLocality())__		assertEquals(slotContext.getAllocationId(), logicalSlot3.getAllocationId())__	};tests,that,the,logical,task,slot,futures,are,completed,once,the,slot,context,future,is,completed;test,public,void,test,slot,context,future,completion,throws,exception,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,final,slot,context,slot,context,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,locality,locality1,locality,local,slot,sharing,manager,single,task,slot,single,task,slot1,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality1,locality,locality2,locality,slot,sharing,manager,single,task,slot,single,task,slot2,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality2,completable,future,logical,slot,logical,slot,future1,single,task,slot1,get,logical,slot,future,completable,future,logical,slot,logical,slot,future2,single,task,slot2,get,logical,slot,future,assert,false,logical,slot,future1,is,done,assert,false,logical,slot,future2,is,done,slot,context,future,complete,slot,context,assert,true,logical,slot,future1,is,done,assert,true,logical,slot,future2,is,done,final,logical,slot,logical,slot1,logical,slot,future1,get,final,logical,slot,logical,slot2,logical,slot,future2,get,assert,equals,logical,slot1,get,allocation,id,slot,context,get,allocation,id,assert,equals,logical,slot2,get,allocation,id,slot,context,get,allocation,id,assert,equals,locality1,logical,slot1,get,locality,assert,equals,locality2,logical,slot2,get,locality,locality,locality3,locality,slot,sharing,manager,single,task,slot,single,task,slot3,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality3,completable,future,logical,slot,logical,slot,future3,single,task,slot3,get,logical,slot,future,assert,true,logical,slot,future3,is,done,logical,slot,logical,slot3,logical,slot,future3,get,assert,equals,locality3,logical,slot3,get,locality,assert,equals,slot,context,get,allocation,id,logical,slot3,get,allocation,id
SlotSharingManagerTest -> @Test 	public void testSlotContextFutureCompletion() throws Exception;1550220073;Tests that the logical task slot futures are completed once the slot context_future is completed.;@Test_	public void testSlotContextFutureCompletion() throws Exception {_		final TestingAllocatedSlotActions allocatedSlotActions = new TestingAllocatedSlotActions()___		final SlotSharingManager slotSharingManager = new SlotSharingManager(_			SLOT_SHARING_GROUP_ID,_			allocatedSlotActions,_			SLOT_OWNER)___		final SlotContext slotContext = new SimpleSlotContext(_			new AllocationID(),_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<SlotContext> slotContextFuture = new CompletableFuture<>()__		SlotSharingManager.MultiTaskSlot rootSlot = slotSharingManager.createRootSlot(_			new SlotRequestId(),_			slotContextFuture,_			new SlotRequestId())___		Locality locality1 = Locality.LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot1 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality1)___		Locality locality2 = Locality.HOST_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot2 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality2)___		CompletableFuture<LogicalSlot> logicalSlotFuture1 = singleTaskSlot1.getLogicalSlotFuture()__		CompletableFuture<LogicalSlot> logicalSlotFuture2 = singleTaskSlot2.getLogicalSlotFuture()__		assertFalse(logicalSlotFuture1.isDone())__		assertFalse(logicalSlotFuture2.isDone())___		slotContextFuture.complete(slotContext)___		assertTrue(logicalSlotFuture1.isDone())__		assertTrue(logicalSlotFuture2.isDone())___		final LogicalSlot logicalSlot1 = logicalSlotFuture1.get()__		final LogicalSlot logicalSlot2 = logicalSlotFuture2.get()___		assertEquals(logicalSlot1.getAllocationId(), slotContext.getAllocationId())__		assertEquals(logicalSlot2.getAllocationId(), slotContext.getAllocationId())__		assertEquals(locality1, logicalSlot1.getLocality())__		assertEquals(locality2, logicalSlot2.getLocality())___		Locality locality3 = Locality.NON_LOCAL__		SlotSharingManager.SingleTaskSlot singleTaskSlot3 = rootSlot.allocateSingleTaskSlot(_			new SlotRequestId(),_			new AbstractID(),_			locality3)___		CompletableFuture<LogicalSlot> logicalSlotFuture3 = singleTaskSlot3.getLogicalSlotFuture()___		assertTrue(logicalSlotFuture3.isDone())__		LogicalSlot logicalSlot3 = logicalSlotFuture3.get()___		assertEquals(locality3, logicalSlot3.getLocality())__		assertEquals(slotContext.getAllocationId(), logicalSlot3.getAllocationId())__	};tests,that,the,logical,task,slot,futures,are,completed,once,the,slot,context,future,is,completed;test,public,void,test,slot,context,future,completion,throws,exception,final,testing,allocated,slot,actions,allocated,slot,actions,new,testing,allocated,slot,actions,final,slot,sharing,manager,slot,sharing,manager,new,slot,sharing,manager,allocated,slot,actions,final,slot,context,slot,context,new,simple,slot,context,new,allocation,id,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,slot,context,slot,context,future,new,completable,future,slot,sharing,manager,multi,task,slot,root,slot,slot,sharing,manager,create,root,slot,new,slot,request,id,slot,context,future,new,slot,request,id,locality,locality1,locality,local,slot,sharing,manager,single,task,slot,single,task,slot1,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality1,locality,locality2,locality,slot,sharing,manager,single,task,slot,single,task,slot2,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality2,completable,future,logical,slot,logical,slot,future1,single,task,slot1,get,logical,slot,future,completable,future,logical,slot,logical,slot,future2,single,task,slot2,get,logical,slot,future,assert,false,logical,slot,future1,is,done,assert,false,logical,slot,future2,is,done,slot,context,future,complete,slot,context,assert,true,logical,slot,future1,is,done,assert,true,logical,slot,future2,is,done,final,logical,slot,logical,slot1,logical,slot,future1,get,final,logical,slot,logical,slot2,logical,slot,future2,get,assert,equals,logical,slot1,get,allocation,id,slot,context,get,allocation,id,assert,equals,logical,slot2,get,allocation,id,slot,context,get,allocation,id,assert,equals,locality1,logical,slot1,get,locality,assert,equals,locality2,logical,slot2,get,locality,locality,locality3,locality,slot,sharing,manager,single,task,slot,single,task,slot3,root,slot,allocate,single,task,slot,new,slot,request,id,new,abstract,id,locality3,completable,future,logical,slot,logical,slot,future3,single,task,slot3,get,logical,slot,future,assert,true,logical,slot,future3,is,done,logical,slot,logical,slot3,logical,slot,future3,get,assert,equals,locality3,logical,slot3,get,locality,assert,equals,slot,context,get,allocation,id,logical,slot3,get,allocation,id
