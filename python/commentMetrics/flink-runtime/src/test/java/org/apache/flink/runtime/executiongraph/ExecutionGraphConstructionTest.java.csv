# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite() throws Exception;1467726586;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(), _			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite() throws Exception;1478800024;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(), _			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite() throws Exception;1479852017;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			TestingUtils.defaultExecutionContext(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,testing,utils,default,execution,context,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite() throws Exception;1486647395;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite() throws Exception;1488453790;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_			new Scheduler(TestingUtils.defaultExecutionContext()))__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,scheduler,testing,utils,default,execution,context,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite() throws Exception;1489060856;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_			new Scheduler(TestingUtils.defaultExecutionContext()))__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,scheduler,testing,utils,default,execution,context,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite() throws Exception;1518302633;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_			new Scheduler(TestingUtils.defaultExecutionContext()))__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,scheduler,testing,utils,default,execution,context,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite() throws Exception;1548932775;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_			new TestingSlotProvider(ignored -> new CompletableFuture<>()))__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,testing,slot,provider,ignored,new,completable,future,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1411236168;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		AbstractJobVertex v1 = new AbstractJobVertex("vertex1")__		AbstractJobVertex v2 = new AbstractJobVertex("vertex2")__		AbstractJobVertex v3 = new AbstractJobVertex("vertex3")__		AbstractJobVertex v4 = new AbstractJobVertex("vertex4")__		AbstractJobVertex v5 = new AbstractJobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.BIPARTITE)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.BIPARTITE)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.BIPARTITE)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.BIPARTITE)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.BIPARTITE)__		_		List<AbstractJobVertex> ordered = new ArrayList<AbstractJobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(jobId, jobName, cfg)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,abstract,job,vertex,v1,new,abstract,job,vertex,vertex1,abstract,job,vertex,v2,new,abstract,job,vertex,vertex2,abstract,job,vertex,v3,new,abstract,job,vertex,vertex3,abstract,job,vertex,v4,new,abstract,job,vertex,vertex4,abstract,job,vertex,v5,new,abstract,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,bipartite,v4,connect,new,data,set,as,input,v2,distribution,pattern,bipartite,v4,connect,new,data,set,as,input,v3,distribution,pattern,bipartite,v5,connect,new,data,set,as,input,v4,distribution,pattern,bipartite,v5,connect,new,data,set,as,input,v3,distribution,pattern,bipartite,list,abstract,job,vertex,ordered,new,array,list,abstract,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,job,id,job,name,cfg,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1411236169;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		AbstractJobVertex v1 = new AbstractJobVertex("vertex1")__		AbstractJobVertex v2 = new AbstractJobVertex("vertex2")__		AbstractJobVertex v3 = new AbstractJobVertex("vertex3")__		AbstractJobVertex v4 = new AbstractJobVertex("vertex4")__		AbstractJobVertex v5 = new AbstractJobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.BIPARTITE)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.BIPARTITE)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.BIPARTITE)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.BIPARTITE)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.BIPARTITE)__		_		List<AbstractJobVertex> ordered = new ArrayList<AbstractJobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(jobId, jobName, cfg)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,abstract,job,vertex,v1,new,abstract,job,vertex,vertex1,abstract,job,vertex,v2,new,abstract,job,vertex,vertex2,abstract,job,vertex,v3,new,abstract,job,vertex,vertex3,abstract,job,vertex,v4,new,abstract,job,vertex,vertex4,abstract,job,vertex,v5,new,abstract,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,bipartite,v4,connect,new,data,set,as,input,v2,distribution,pattern,bipartite,v4,connect,new,data,set,as,input,v3,distribution,pattern,bipartite,v5,connect,new,data,set,as,input,v4,distribution,pattern,bipartite,v5,connect,new,data,set,as,input,v3,distribution,pattern,bipartite,list,abstract,job,vertex,ordered,new,array,list,abstract,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,job,id,job,name,cfg,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1411236170;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		AbstractJobVertex v1 = new AbstractJobVertex("vertex1")__		AbstractJobVertex v2 = new AbstractJobVertex("vertex2")__		AbstractJobVertex v3 = new AbstractJobVertex("vertex3")__		AbstractJobVertex v4 = new AbstractJobVertex("vertex4")__		AbstractJobVertex v5 = new AbstractJobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.BIPARTITE)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.BIPARTITE)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.BIPARTITE)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.BIPARTITE)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.BIPARTITE)__		_		List<AbstractJobVertex> ordered = new ArrayList<AbstractJobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(jobId, jobName, cfg)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,abstract,job,vertex,v1,new,abstract,job,vertex,vertex1,abstract,job,vertex,v2,new,abstract,job,vertex,vertex2,abstract,job,vertex,v3,new,abstract,job,vertex,vertex3,abstract,job,vertex,v4,new,abstract,job,vertex,vertex4,abstract,job,vertex,v5,new,abstract,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,bipartite,v4,connect,new,data,set,as,input,v2,distribution,pattern,bipartite,v4,connect,new,data,set,as,input,v3,distribution,pattern,bipartite,v5,connect,new,data,set,as,input,v4,distribution,pattern,bipartite,v5,connect,new,data,set,as,input,v3,distribution,pattern,bipartite,list,abstract,job,vertex,ordered,new,array,list,abstract,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,job,id,job,name,cfg,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1411473593;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		AbstractJobVertex v1 = new AbstractJobVertex("vertex1")__		AbstractJobVertex v2 = new AbstractJobVertex("vertex2")__		AbstractJobVertex v3 = new AbstractJobVertex("vertex3")__		AbstractJobVertex v4 = new AbstractJobVertex("vertex4")__		AbstractJobVertex v5 = new AbstractJobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.BIPARTITE)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.BIPARTITE)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.BIPARTITE)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.BIPARTITE)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.BIPARTITE)__		_		List<AbstractJobVertex> ordered = new ArrayList<AbstractJobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(jobId, jobName, cfg)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,abstract,job,vertex,v1,new,abstract,job,vertex,vertex1,abstract,job,vertex,v2,new,abstract,job,vertex,vertex2,abstract,job,vertex,v3,new,abstract,job,vertex,vertex3,abstract,job,vertex,v4,new,abstract,job,vertex,vertex4,abstract,job,vertex,v5,new,abstract,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,bipartite,v4,connect,new,data,set,as,input,v2,distribution,pattern,bipartite,v4,connect,new,data,set,as,input,v3,distribution,pattern,bipartite,v5,connect,new,data,set,as,input,v4,distribution,pattern,bipartite,v5,connect,new,data,set,as,input,v3,distribution,pattern,bipartite,list,abstract,job,vertex,ordered,new,array,list,abstract,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,job,id,job,name,cfg,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1421050512;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		AbstractJobVertex v1 = new AbstractJobVertex("vertex1")__		AbstractJobVertex v2 = new AbstractJobVertex("vertex2")__		AbstractJobVertex v3 = new AbstractJobVertex("vertex3")__		AbstractJobVertex v4 = new AbstractJobVertex("vertex4")__		AbstractJobVertex v5 = new AbstractJobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<AbstractJobVertex> ordered = new ArrayList<AbstractJobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(jobId, jobName, cfg)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,abstract,job,vertex,v1,new,abstract,job,vertex,vertex1,abstract,job,vertex,v2,new,abstract,job,vertex,vertex2,abstract,job,vertex,v3,new,abstract,job,vertex,vertex3,abstract,job,vertex,v4,new,abstract,job,vertex,vertex4,abstract,job,vertex,v5,new,abstract,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,abstract,job,vertex,ordered,new,array,list,abstract,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,job,id,job,name,cfg,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1422007786;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		AbstractJobVertex v1 = new AbstractJobVertex("vertex1")__		AbstractJobVertex v2 = new AbstractJobVertex("vertex2")__		AbstractJobVertex v3 = new AbstractJobVertex("vertex3")__		AbstractJobVertex v4 = new AbstractJobVertex("vertex4")__		AbstractJobVertex v5 = new AbstractJobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<AbstractJobVertex> ordered = new ArrayList<AbstractJobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(jobId, jobName, cfg, AkkaUtils.DEFAULT_TIMEOUT())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,abstract,job,vertex,v1,new,abstract,job,vertex,vertex1,abstract,job,vertex,v2,new,abstract,job,vertex,vertex2,abstract,job,vertex,v3,new,abstract,job,vertex,vertex3,abstract,job,vertex,v4,new,abstract,job,vertex,vertex4,abstract,job,vertex,v5,new,abstract,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,abstract,job,vertex,ordered,new,array,list,abstract,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,job,id,job,name,cfg,akka,utils,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1423144032;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		AbstractJobVertex v1 = new AbstractJobVertex("vertex1")__		AbstractJobVertex v2 = new AbstractJobVertex("vertex2")__		AbstractJobVertex v3 = new AbstractJobVertex("vertex3")__		AbstractJobVertex v4 = new AbstractJobVertex("vertex4")__		AbstractJobVertex v5 = new AbstractJobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<AbstractJobVertex> ordered = new ArrayList<AbstractJobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(jobId, jobName, cfg, AkkaUtils.getDefaultTimeout())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,abstract,job,vertex,v1,new,abstract,job,vertex,vertex1,abstract,job,vertex,v2,new,abstract,job,vertex,vertex2,abstract,job,vertex,v3,new,abstract,job,vertex,vertex3,abstract,job,vertex,v4,new,abstract,job,vertex,vertex4,abstract,job,vertex,v5,new,abstract,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,abstract,job,vertex,ordered,new,array,list,abstract,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,job,id,job,name,cfg,akka,utils,get,default,timeout,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1426697080;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		AbstractJobVertex v1 = new AbstractJobVertex("vertex1")__		AbstractJobVertex v2 = new AbstractJobVertex("vertex2")__		AbstractJobVertex v3 = new AbstractJobVertex("vertex3")__		AbstractJobVertex v4 = new AbstractJobVertex("vertex4")__		AbstractJobVertex v5 = new AbstractJobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<AbstractJobVertex> ordered = new ArrayList<AbstractJobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(jobId, jobName, cfg, AkkaUtils.getDefaultTimeout())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,abstract,job,vertex,v1,new,abstract,job,vertex,vertex1,abstract,job,vertex,v2,new,abstract,job,vertex,vertex2,abstract,job,vertex,v3,new,abstract,job,vertex,vertex3,abstract,job,vertex,v4,new,abstract,job,vertex,vertex4,abstract,job,vertex,v5,new,abstract,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,abstract,job,vertex,ordered,new,array,list,abstract,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,job,id,job,name,cfg,akka,utils,get,default,timeout,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1427784999;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		AbstractJobVertex v1 = new AbstractJobVertex("vertex1")__		AbstractJobVertex v2 = new AbstractJobVertex("vertex2")__		AbstractJobVertex v3 = new AbstractJobVertex("vertex3")__		AbstractJobVertex v4 = new AbstractJobVertex("vertex4")__		AbstractJobVertex v5 = new AbstractJobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<AbstractJobVertex> ordered = new ArrayList<AbstractJobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(jobId, jobName, cfg, AkkaUtils.getDefaultTimeout())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,abstract,job,vertex,v1,new,abstract,job,vertex,vertex1,abstract,job,vertex,v2,new,abstract,job,vertex,vertex2,abstract,job,vertex,v3,new,abstract,job,vertex,vertex3,abstract,job,vertex,v4,new,abstract,job,vertex,vertex4,abstract,job,vertex,v5,new,abstract,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,abstract,job,vertex,ordered,new,array,list,abstract,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,job,id,job,name,cfg,akka,utils,get,default,timeout,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1434467925;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(jobId, jobName, cfg, AkkaUtils.getDefaultTimeout())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,job,id,job,name,cfg,akka,utils,get,default,timeout,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1436802871;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				jobId,_				jobName,_				cfg,_				AkkaUtils.getDefaultTimeout())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,job,id,job,name,cfg,akka,utils,get,default,timeout,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1455548285;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				jobId,_				jobName,_				cfg,_				AkkaUtils.getDefaultTimeout(),_				new NoRestartStrategy())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,job,id,job,name,cfg,akka,utils,get,default,timeout,new,no,restart,strategy,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1455549373;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(), _			jobId, _			jobName, _			cfg,_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,job,id,job,name,cfg,akka,utils,get,default,timeout,new,no,restart,strategy,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1457737669;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(), _			jobId, _			jobName, _			cfg,_			new ExecutionConfig(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,job,id,job,name,cfg,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
ExecutionGraphConstructionTest -> @Test 	public void testCreateSimpleGraphBipartite();1463155298;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testCreateSimpleGraphBipartite() {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)__		_		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(), _			jobId, _			jobName, _			cfg,_			ExecutionConfigTest.getSerializedConfig(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		_		verifyTestGraph(eg, jobId, v1, v2, v3, v4, v5)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,create,simple,graph,bipartite,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v2,connect,new,data,set,as,input,v1,distribution,pattern,v4,connect,new,data,set,as,input,v2,distribution,pattern,v4,connect,new,data,set,as,input,v3,distribution,pattern,v5,connect,new,data,set,as,input,v4,distribution,pattern,v5,connect,new,data,set,as,input,v3,distribution,pattern,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,job,id,job,name,cfg,execution,config,test,get,serialized,config,akka,utils,get,default,timeout,new,no,restart,strategy,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,verify,test,graph,eg,job,id,v1,v2,v3,v4,v5
