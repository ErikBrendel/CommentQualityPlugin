# id;timestamp;commentText;codeText;commentWords;codeWords
ZooKeeperSubmittedJobGraphStoreTest -> @Test 	public void testJobGraphRemovalFailureAndLockRelease() throws Exception;1536930104;Tests that we fail with an exception if the job cannot be removed from the_ZooKeeperSubmittedJobGraphStore.__<p>Tests that a close ZooKeeperSubmittedJobGraphStore no longer holds any locks.;@Test_	public void testJobGraphRemovalFailureAndLockRelease() throws Exception {_		try (final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)) {_			final TestingRetrievableStateStorageHelper<SubmittedJobGraph> stateStorage = new TestingRetrievableStateStorageHelper<>()__			final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore = createSubmittedJobGraphStore(client, stateStorage)__			submittedJobGraphStore.start(null)__			final ZooKeeperSubmittedJobGraphStore otherSubmittedJobGraphStore = createSubmittedJobGraphStore(client, stateStorage)__			otherSubmittedJobGraphStore.start(null)___			final SubmittedJobGraph jobGraph = new SubmittedJobGraph(new JobGraph(), null)__			submittedJobGraphStore.putJobGraph(jobGraph)___			final SubmittedJobGraph recoveredJobGraph = otherSubmittedJobGraphStore.recoverJobGraph(jobGraph.getJobId())___			assertThat(recoveredJobGraph, is(notNullValue()))___			try {_				otherSubmittedJobGraphStore.removeJobGraph(recoveredJobGraph.getJobId())__				fail("It should not be possible to remove the JobGraph since the first store still has a lock on it.")__			} catch (Exception ignored) {_				_			}__			submittedJobGraphStore.stop()___			_			otherSubmittedJobGraphStore.removeJobGraph(recoveredJobGraph.getJobId())___			assertThat(otherSubmittedJobGraphStore.recoverJobGraph(recoveredJobGraph.getJobId()), is(nullValue()))___			otherSubmittedJobGraphStore.stop()__		}_	};tests,that,we,fail,with,an,exception,if,the,job,cannot,be,removed,from,the,zoo,keeper,submitted,job,graph,store,p,tests,that,a,close,zoo,keeper,submitted,job,graph,store,no,longer,holds,any,locks;test,public,void,test,job,graph,removal,failure,and,lock,release,throws,exception,try,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,testing,retrievable,state,storage,helper,submitted,job,graph,state,storage,new,testing,retrievable,state,storage,helper,final,zoo,keeper,submitted,job,graph,store,submitted,job,graph,store,create,submitted,job,graph,store,client,state,storage,submitted,job,graph,store,start,null,final,zoo,keeper,submitted,job,graph,store,other,submitted,job,graph,store,create,submitted,job,graph,store,client,state,storage,other,submitted,job,graph,store,start,null,final,submitted,job,graph,job,graph,new,submitted,job,graph,new,job,graph,null,submitted,job,graph,store,put,job,graph,job,graph,final,submitted,job,graph,recovered,job,graph,other,submitted,job,graph,store,recover,job,graph,job,graph,get,job,id,assert,that,recovered,job,graph,is,not,null,value,try,other,submitted,job,graph,store,remove,job,graph,recovered,job,graph,get,job,id,fail,it,should,not,be,possible,to,remove,the,job,graph,since,the,first,store,still,has,a,lock,on,it,catch,exception,ignored,submitted,job,graph,store,stop,other,submitted,job,graph,store,remove,job,graph,recovered,job,graph,get,job,id,assert,that,other,submitted,job,graph,store,recover,job,graph,recovered,job,graph,get,job,id,is,null,value,other,submitted,job,graph,store,stop
ZooKeeperSubmittedJobGraphStoreTest -> @Test 	public void testJobGraphRemovalFailureAndLockRelease() throws Exception;1547028640;Tests that we fail with an exception if the job cannot be removed from the_ZooKeeperSubmittedJobGraphStore.__<p>Tests that a close ZooKeeperSubmittedJobGraphStore no longer holds any locks.;@Test_	public void testJobGraphRemovalFailureAndLockRelease() throws Exception {_		try (final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)) {_			final TestingRetrievableStateStorageHelper<SubmittedJobGraph> stateStorage = new TestingRetrievableStateStorageHelper<>()__			final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore = createSubmittedJobGraphStore(client, stateStorage)__			submittedJobGraphStore.start(null)__			final ZooKeeperSubmittedJobGraphStore otherSubmittedJobGraphStore = createSubmittedJobGraphStore(client, stateStorage)__			otherSubmittedJobGraphStore.start(null)___			final SubmittedJobGraph jobGraph = new SubmittedJobGraph(new JobGraph(), null)__			submittedJobGraphStore.putJobGraph(jobGraph)___			final SubmittedJobGraph recoveredJobGraph = otherSubmittedJobGraphStore.recoverJobGraph(jobGraph.getJobId())___			assertThat(recoveredJobGraph, is(notNullValue()))___			try {_				otherSubmittedJobGraphStore.removeJobGraph(recoveredJobGraph.getJobId())__				fail("It should not be possible to remove the JobGraph since the first store still has a lock on it.")__			} catch (Exception ignored) {_				_			}__			submittedJobGraphStore.stop()___			_			otherSubmittedJobGraphStore.removeJobGraph(recoveredJobGraph.getJobId())___			assertThat(otherSubmittedJobGraphStore.recoverJobGraph(recoveredJobGraph.getJobId()), is(nullValue()))___			otherSubmittedJobGraphStore.stop()__		}_	};tests,that,we,fail,with,an,exception,if,the,job,cannot,be,removed,from,the,zoo,keeper,submitted,job,graph,store,p,tests,that,a,close,zoo,keeper,submitted,job,graph,store,no,longer,holds,any,locks;test,public,void,test,job,graph,removal,failure,and,lock,release,throws,exception,try,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,testing,retrievable,state,storage,helper,submitted,job,graph,state,storage,new,testing,retrievable,state,storage,helper,final,zoo,keeper,submitted,job,graph,store,submitted,job,graph,store,create,submitted,job,graph,store,client,state,storage,submitted,job,graph,store,start,null,final,zoo,keeper,submitted,job,graph,store,other,submitted,job,graph,store,create,submitted,job,graph,store,client,state,storage,other,submitted,job,graph,store,start,null,final,submitted,job,graph,job,graph,new,submitted,job,graph,new,job,graph,null,submitted,job,graph,store,put,job,graph,job,graph,final,submitted,job,graph,recovered,job,graph,other,submitted,job,graph,store,recover,job,graph,job,graph,get,job,id,assert,that,recovered,job,graph,is,not,null,value,try,other,submitted,job,graph,store,remove,job,graph,recovered,job,graph,get,job,id,fail,it,should,not,be,possible,to,remove,the,job,graph,since,the,first,store,still,has,a,lock,on,it,catch,exception,ignored,submitted,job,graph,store,stop,other,submitted,job,graph,store,remove,job,graph,recovered,job,graph,get,job,id,assert,that,other,submitted,job,graph,store,recover,job,graph,recovered,job,graph,get,job,id,is,null,value,other,submitted,job,graph,store,stop
ZooKeeperSubmittedJobGraphStoreTest -> @Test 	public void testJobGraphRemovalFailureAndLockRelease() throws Exception;1547736239;Tests that we fail with an exception if the job cannot be removed from the_ZooKeeperSubmittedJobGraphStore.__<p>Tests that a close ZooKeeperSubmittedJobGraphStore no longer holds any locks.;@Test_	public void testJobGraphRemovalFailureAndLockRelease() throws Exception {_		try (final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)) {_			final TestingRetrievableStateStorageHelper<SubmittedJobGraph> stateStorage = new TestingRetrievableStateStorageHelper<>()__			final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore = createSubmittedJobGraphStore(client, stateStorage)__			submittedJobGraphStore.start(null)__			final ZooKeeperSubmittedJobGraphStore otherSubmittedJobGraphStore = createSubmittedJobGraphStore(client, stateStorage)__			otherSubmittedJobGraphStore.start(null)___			final SubmittedJobGraph jobGraph = new SubmittedJobGraph(new JobGraph())__			submittedJobGraphStore.putJobGraph(jobGraph)___			final SubmittedJobGraph recoveredJobGraph = otherSubmittedJobGraphStore.recoverJobGraph(jobGraph.getJobId())___			assertThat(recoveredJobGraph, is(notNullValue()))___			try {_				otherSubmittedJobGraphStore.removeJobGraph(recoveredJobGraph.getJobId())__				fail("It should not be possible to remove the JobGraph since the first store still has a lock on it.")__			} catch (Exception ignored) {_				_			}__			submittedJobGraphStore.stop()___			_			otherSubmittedJobGraphStore.removeJobGraph(recoveredJobGraph.getJobId())___			assertThat(otherSubmittedJobGraphStore.recoverJobGraph(recoveredJobGraph.getJobId()), is(nullValue()))___			otherSubmittedJobGraphStore.stop()__		}_	};tests,that,we,fail,with,an,exception,if,the,job,cannot,be,removed,from,the,zoo,keeper,submitted,job,graph,store,p,tests,that,a,close,zoo,keeper,submitted,job,graph,store,no,longer,holds,any,locks;test,public,void,test,job,graph,removal,failure,and,lock,release,throws,exception,try,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,testing,retrievable,state,storage,helper,submitted,job,graph,state,storage,new,testing,retrievable,state,storage,helper,final,zoo,keeper,submitted,job,graph,store,submitted,job,graph,store,create,submitted,job,graph,store,client,state,storage,submitted,job,graph,store,start,null,final,zoo,keeper,submitted,job,graph,store,other,submitted,job,graph,store,create,submitted,job,graph,store,client,state,storage,other,submitted,job,graph,store,start,null,final,submitted,job,graph,job,graph,new,submitted,job,graph,new,job,graph,submitted,job,graph,store,put,job,graph,job,graph,final,submitted,job,graph,recovered,job,graph,other,submitted,job,graph,store,recover,job,graph,job,graph,get,job,id,assert,that,recovered,job,graph,is,not,null,value,try,other,submitted,job,graph,store,remove,job,graph,recovered,job,graph,get,job,id,fail,it,should,not,be,possible,to,remove,the,job,graph,since,the,first,store,still,has,a,lock,on,it,catch,exception,ignored,submitted,job,graph,store,stop,other,submitted,job,graph,store,remove,job,graph,recovered,job,graph,get,job,id,assert,that,other,submitted,job,graph,store,recover,job,graph,recovered,job,graph,get,job,id,is,null,value,other,submitted,job,graph,store,stop
