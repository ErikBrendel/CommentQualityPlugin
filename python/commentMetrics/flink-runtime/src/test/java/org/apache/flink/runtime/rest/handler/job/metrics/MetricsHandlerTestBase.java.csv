# id;timestamp;commentText;codeText;commentWords;codeWords
MetricsHandlerTestBase -> abstract T getMetricsHandler()_;1511544647;Returns instance under test.;abstract T getMetricsHandler()_;returns,instance,under,test;abstract,t,get,metrics,handler
MetricsHandlerTestBase -> abstract T getMetricsHandler()_;1515669170;Returns instance under test.;abstract T getMetricsHandler()_;returns,instance,under,test;abstract,t,get,metrics,handler
MetricsHandlerTestBase -> abstract T getMetricsHandler()_;1522681180;Returns instance under test.;abstract T getMetricsHandler()_;returns,instance,under,test;abstract,t,get,metrics,handler
MetricsHandlerTestBase -> abstract T getMetricsHandler()_;1526494919;Returns instance under test.;abstract T getMetricsHandler()_;returns,instance,under,test;abstract,t,get,metrics,handler
MetricsHandlerTestBase -> @Test 	public void testGetMetric() throws Exception;1511544647;Tests that the metric with name defined under {@link #TEST_METRIC_NAME} can be retrieved_from the {@link MetricStore.ComponentMetricStore} returned from_{@link AbstractMetricsHandler#getComponentMetricStore(HandlerRequest, MetricStore)}.;@Test_	public void testGetMetric() throws Exception {_		@SuppressWarnings("unchecked") final CompletableFuture<MetricCollectionResponseBody> completableFuture =_			metricsHandler.handleRequest(_				new HandlerRequest<>(_					EmptyRequestBody.getInstance(),_					metricsHandler.getMessageHeaders().getUnresolvedMessageParameters(),_					pathParameters,_					Collections.emptyMap()),_				mockDispatcherGateway)___		assertTrue(completableFuture.isDone())___		final MetricCollectionResponseBody metricCollectionResponseBody = completableFuture.get()__		assertThat(metricCollectionResponseBody.getMetrics(), hasSize(1))___		final Metric metric = metricCollectionResponseBody.getMetrics().iterator().next()__		assertThat(metric.getId(), equalTo(getExpectedIdForMetricName(TEST_METRIC_NAME)))__	};tests,that,the,metric,with,name,defined,under,link,can,be,retrieved,from,the,link,metric,store,component,metric,store,returned,from,link,abstract,metrics,handler,get,component,metric,store,handler,request,metric,store;test,public,void,test,get,metric,throws,exception,suppress,warnings,unchecked,final,completable,future,metric,collection,response,body,completable,future,metrics,handler,handle,request,new,handler,request,empty,request,body,get,instance,metrics,handler,get,message,headers,get,unresolved,message,parameters,path,parameters,collections,empty,map,mock,dispatcher,gateway,assert,true,completable,future,is,done,final,metric,collection,response,body,metric,collection,response,body,completable,future,get,assert,that,metric,collection,response,body,get,metrics,has,size,1,final,metric,metric,metric,collection,response,body,get,metrics,iterator,next,assert,that,metric,get,id,equal,to,get,expected,id,for,metric,name
MetricsHandlerTestBase -> @Test 	public void testGetMetric() throws Exception;1515669170;Tests that the metric with name defined under {@link #TEST_METRIC_NAME} can be retrieved_from the {@link MetricStore.ComponentMetricStore} returned from_{@link AbstractMetricsHandler#getComponentMetricStore(HandlerRequest, MetricStore)}.;@Test_	public void testGetMetric() throws Exception {_		@SuppressWarnings("unchecked") final CompletableFuture<MetricCollectionResponseBody> completableFuture =_			metricsHandler.handleRequest(_				new HandlerRequest<>(_					EmptyRequestBody.getInstance(),_					metricsHandler.getMessageHeaders().getUnresolvedMessageParameters(),_					pathParameters,_					Collections.emptyMap()),_				mockDispatcherGateway)___		assertTrue(completableFuture.isDone())___		final MetricCollectionResponseBody metricCollectionResponseBody = completableFuture.get()__		assertThat(metricCollectionResponseBody.getMetrics(), hasSize(1))___		final Metric metric = metricCollectionResponseBody.getMetrics().iterator().next()__		assertThat(metric.getId(), equalTo(getExpectedIdForMetricName(TEST_METRIC_NAME)))__	};tests,that,the,metric,with,name,defined,under,link,can,be,retrieved,from,the,link,metric,store,component,metric,store,returned,from,link,abstract,metrics,handler,get,component,metric,store,handler,request,metric,store;test,public,void,test,get,metric,throws,exception,suppress,warnings,unchecked,final,completable,future,metric,collection,response,body,completable,future,metrics,handler,handle,request,new,handler,request,empty,request,body,get,instance,metrics,handler,get,message,headers,get,unresolved,message,parameters,path,parameters,collections,empty,map,mock,dispatcher,gateway,assert,true,completable,future,is,done,final,metric,collection,response,body,metric,collection,response,body,completable,future,get,assert,that,metric,collection,response,body,get,metrics,has,size,1,final,metric,metric,metric,collection,response,body,get,metrics,iterator,next,assert,that,metric,get,id,equal,to,get,expected,id,for,metric,name
MetricsHandlerTestBase -> @Test 	public void testGetMetric() throws Exception;1522681180;Tests that the metric with name defined under {@link #TEST_METRIC_NAME} can be retrieved_from the {@link MetricStore.ComponentMetricStore} returned from_{@link AbstractMetricsHandler#getComponentMetricStore(HandlerRequest, MetricStore)}.;@Test_	public void testGetMetric() throws Exception {_		@SuppressWarnings("unchecked") final CompletableFuture<MetricCollectionResponseBody> completableFuture =_			metricsHandler.handleRequest(_				new HandlerRequest<>(_					EmptyRequestBody.getInstance(),_					metricsHandler.getMessageHeaders().getUnresolvedMessageParameters(),_					pathParameters,_					Collections.emptyMap()),_				mockDispatcherGateway)___		assertTrue(completableFuture.isDone())___		final MetricCollectionResponseBody metricCollectionResponseBody = completableFuture.get()__		assertThat(metricCollectionResponseBody.getMetrics(), hasSize(1))___		final Metric metric = metricCollectionResponseBody.getMetrics().iterator().next()__		assertThat(metric.getId(), equalTo(getExpectedIdForMetricName(TEST_METRIC_NAME)))__	};tests,that,the,metric,with,name,defined,under,link,can,be,retrieved,from,the,link,metric,store,component,metric,store,returned,from,link,abstract,metrics,handler,get,component,metric,store,handler,request,metric,store;test,public,void,test,get,metric,throws,exception,suppress,warnings,unchecked,final,completable,future,metric,collection,response,body,completable,future,metrics,handler,handle,request,new,handler,request,empty,request,body,get,instance,metrics,handler,get,message,headers,get,unresolved,message,parameters,path,parameters,collections,empty,map,mock,dispatcher,gateway,assert,true,completable,future,is,done,final,metric,collection,response,body,metric,collection,response,body,completable,future,get,assert,that,metric,collection,response,body,get,metrics,has,size,1,final,metric,metric,metric,collection,response,body,get,metrics,iterator,next,assert,that,metric,get,id,equal,to,get,expected,id,for,metric,name
MetricsHandlerTestBase -> @Test 	public void testGetMetric() throws Exception;1526494919;Tests that the metric with name defined under {@link #TEST_METRIC_NAME} can be retrieved_from the {@link MetricStore.ComponentMetricStore} returned from_{@link AbstractMetricsHandler#getComponentMetricStore(HandlerRequest, MetricStore)}.;@Test_	public void testGetMetric() throws Exception {_		@SuppressWarnings("unchecked") final CompletableFuture<MetricCollectionResponseBody> completableFuture =_			metricsHandler.handleRequest(_				new HandlerRequest<>(_					EmptyRequestBody.getInstance(),_					metricsHandler.getMessageHeaders().getUnresolvedMessageParameters(),_					pathParameters,_					Collections.emptyMap()),_				mockDispatcherGateway)___		assertTrue(completableFuture.isDone())___		final MetricCollectionResponseBody metricCollectionResponseBody = completableFuture.get()__		assertThat(metricCollectionResponseBody.getMetrics(), hasSize(1))___		final Metric metric = metricCollectionResponseBody.getMetrics().iterator().next()__		assertThat(metric.getId(), equalTo(getExpectedIdForMetricName(TEST_METRIC_NAME)))__	};tests,that,the,metric,with,name,defined,under,link,can,be,retrieved,from,the,link,metric,store,component,metric,store,returned,from,link,abstract,metrics,handler,get,component,metric,store,handler,request,metric,store;test,public,void,test,get,metric,throws,exception,suppress,warnings,unchecked,final,completable,future,metric,collection,response,body,completable,future,metrics,handler,handle,request,new,handler,request,empty,request,body,get,instance,metrics,handler,get,message,headers,get,unresolved,message,parameters,path,parameters,collections,empty,map,mock,dispatcher,gateway,assert,true,completable,future,is,done,final,metric,collection,response,body,metric,collection,response,body,completable,future,get,assert,that,metric,collection,response,body,get,metrics,has,size,1,final,metric,metric,metric,collection,response,body,get,metrics,iterator,next,assert,that,metric,get,id,equal,to,get,expected,id,for,metric,name
MetricsHandlerTestBase -> String getExpectedIdForMetricName(final String metricName);1511544647;Returns the expected metric id for a given metric name. By default the metric name without_any modifications is returned.__@param metricName The metric name._@return The id of the metric name possibly with additional information, e.g., subtask index_as a prefix.;String getExpectedIdForMetricName(final String metricName) {_		return metricName__	};returns,the,expected,metric,id,for,a,given,metric,name,by,default,the,metric,name,without,any,modifications,is,returned,param,metric,name,the,metric,name,return,the,id,of,the,metric,name,possibly,with,additional,information,e,g,subtask,index,as,a,prefix;string,get,expected,id,for,metric,name,final,string,metric,name,return,metric,name
MetricsHandlerTestBase -> String getExpectedIdForMetricName(final String metricName);1515669170;Returns the expected metric id for a given metric name. By default the metric name without_any modifications is returned.__@param metricName The metric name._@return The id of the metric name possibly with additional information, e.g., subtask index_as a prefix.;String getExpectedIdForMetricName(final String metricName) {_		return metricName__	};returns,the,expected,metric,id,for,a,given,metric,name,by,default,the,metric,name,without,any,modifications,is,returned,param,metric,name,the,metric,name,return,the,id,of,the,metric,name,possibly,with,additional,information,e,g,subtask,index,as,a,prefix;string,get,expected,id,for,metric,name,final,string,metric,name,return,metric,name
MetricsHandlerTestBase -> String getExpectedIdForMetricName(final String metricName);1522681180;Returns the expected metric id for a given metric name. By default the metric name without_any modifications is returned.__@param metricName The metric name._@return The id of the metric name possibly with additional information, e.g., subtask index_as a prefix.;String getExpectedIdForMetricName(final String metricName) {_		return metricName__	};returns,the,expected,metric,id,for,a,given,metric,name,by,default,the,metric,name,without,any,modifications,is,returned,param,metric,name,the,metric,name,return,the,id,of,the,metric,name,possibly,with,additional,information,e,g,subtask,index,as,a,prefix;string,get,expected,id,for,metric,name,final,string,metric,name,return,metric,name
MetricsHandlerTestBase -> String getExpectedIdForMetricName(final String metricName);1526494919;Returns the expected metric id for a given metric name. By default the metric name without_any modifications is returned.__@param metricName The metric name._@return The id of the metric name possibly with additional information, e.g., subtask index_as a prefix.;String getExpectedIdForMetricName(final String metricName) {_		return metricName__	};returns,the,expected,metric,id,for,a,given,metric,name,by,default,the,metric,name,without,any,modifications,is,returned,param,metric,name,the,metric,name,return,the,id,of,the,metric,name,possibly,with,additional,information,e,g,subtask,index,as,a,prefix;string,get,expected,id,for,metric,name,final,string,metric,name,return,metric,name
