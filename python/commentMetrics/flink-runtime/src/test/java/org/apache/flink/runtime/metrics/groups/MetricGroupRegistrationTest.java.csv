# id;timestamp;commentText;codeText;commentWords;codeWords
MetricGroupRegistrationTest -> @Test 	public void testDuplicateGroupName();1469529015;Verifies that when attempting to create a group with the name of an existing one the existing one will be returned instead.;@Test_	public void testDuplicateGroupName() {_		Configuration config = new Configuration()___		MetricRegistry registry = new MetricRegistry(config)___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		MetricGroup group1 = root.addGroup("group")__		MetricGroup group2 = root.addGroup("group")__		MetricGroup group3 = root.addGroup("group")__		Assert.assertTrue(group1 == group2 && group2 == group3)___	};verifies,that,when,attempting,to,create,a,group,with,the,name,of,an,existing,one,the,existing,one,will,be,returned,instead;test,public,void,test,duplicate,group,name,configuration,config,new,configuration,metric,registry,registry,new,metric,registry,config,metric,group,root,new,task,manager,metric,group,registry,host,id,metric,group,group1,root,add,group,group,metric,group,group2,root,add,group,group,metric,group,group3,root,add,group,group,assert,assert,true,group1,group2,group2,group3
MetricGroupRegistrationTest -> @Test 	public void testDuplicateGroupName();1469545521;Verifies that when attempting to create a group with the name of an existing one the existing one will be returned instead.;@Test_	public void testDuplicateGroupName() {_		Configuration config = new Configuration()___		MetricRegistry registry = new MetricRegistry(config)___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		MetricGroup group1 = root.addGroup("group")__		MetricGroup group2 = root.addGroup("group")__		MetricGroup group3 = root.addGroup("group")__		Assert.assertTrue(group1 == group2 && group2 == group3)___	};verifies,that,when,attempting,to,create,a,group,with,the,name,of,an,existing,one,the,existing,one,will,be,returned,instead;test,public,void,test,duplicate,group,name,configuration,config,new,configuration,metric,registry,registry,new,metric,registry,config,metric,group,root,new,task,manager,metric,group,registry,host,id,metric,group,group1,root,add,group,group,metric,group,group2,root,add,group,group,metric,group,group3,root,add,group,group,assert,assert,true,group1,group2,group2,group3
MetricGroupRegistrationTest -> @Test 	public void testDuplicateGroupName();1471435139;Verifies that when attempting to create a group with the name of an existing one the existing one will be returned instead.;@Test_	public void testDuplicateGroupName() {_		Configuration config = new Configuration()___		MetricRegistry registry = new MetricRegistry(config)___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		MetricGroup group1 = root.addGroup("group")__		MetricGroup group2 = root.addGroup("group")__		MetricGroup group3 = root.addGroup("group")__		Assert.assertTrue(group1 == group2 && group2 == group3)___		registry.shutdown()__	};verifies,that,when,attempting,to,create,a,group,with,the,name,of,an,existing,one,the,existing,one,will,be,returned,instead;test,public,void,test,duplicate,group,name,configuration,config,new,configuration,metric,registry,registry,new,metric,registry,config,metric,group,root,new,task,manager,metric,group,registry,host,id,metric,group,group1,root,add,group,group,metric,group,group2,root,add,group,group,metric,group,group3,root,add,group,group,assert,assert,true,group1,group2,group2,group3,registry,shutdown
MetricGroupRegistrationTest -> @Test 	public void testDuplicateGroupName();1474995330;Verifies that when attempting to create a group with the name of an existing one the existing one will be returned instead.;@Test_	public void testDuplicateGroupName() {_		Configuration config = new Configuration()___		MetricRegistry registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		MetricGroup group1 = root.addGroup("group")__		MetricGroup group2 = root.addGroup("group")__		MetricGroup group3 = root.addGroup("group")__		Assert.assertTrue(group1 == group2 && group2 == group3)___		registry.shutdown()__	};verifies,that,when,attempting,to,create,a,group,with,the,name,of,an,existing,one,the,existing,one,will,be,returned,instead;test,public,void,test,duplicate,group,name,configuration,config,new,configuration,metric,registry,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,metric,group,root,new,task,manager,metric,group,registry,host,id,metric,group,group1,root,add,group,group,metric,group,group2,root,add,group,group,metric,group,group3,root,add,group,group,assert,assert,true,group1,group2,group2,group3,registry,shutdown
MetricGroupRegistrationTest -> @Test 	public void testDuplicateGroupName();1492770690;Verifies that when attempting to create a group with the name of an existing one the existing one will be returned instead.;@Test_	public void testDuplicateGroupName() {_		Configuration config = new Configuration()___		MetricRegistry registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		MetricGroup group1 = root.addGroup("group")__		MetricGroup group2 = root.addGroup("group")__		MetricGroup group3 = root.addGroup("group")__		Assert.assertTrue(group1 == group2 && group2 == group3)___		registry.shutdown()__	};verifies,that,when,attempting,to,create,a,group,with,the,name,of,an,existing,one,the,existing,one,will,be,returned,instead;test,public,void,test,duplicate,group,name,configuration,config,new,configuration,metric,registry,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,metric,group,root,new,task,manager,metric,group,registry,host,id,metric,group,group1,root,add,group,group,metric,group,group2,root,add,group,group,metric,group,group3,root,add,group,group,assert,assert,true,group1,group2,group2,group3,registry,shutdown
MetricGroupRegistrationTest -> @Test 	public void testDuplicateGroupName();1496409235;Verifies that when attempting to create a group with the name of an existing one the existing one will be returned instead.;@Test_	public void testDuplicateGroupName() {_		Configuration config = new Configuration()___		MetricRegistry registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		MetricGroup group1 = root.addGroup("group")__		MetricGroup group2 = root.addGroup("group")__		MetricGroup group3 = root.addGroup("group")__		Assert.assertTrue(group1 == group2 && group2 == group3)___		registry.shutdown()__	};verifies,that,when,attempting,to,create,a,group,with,the,name,of,an,existing,one,the,existing,one,will,be,returned,instead;test,public,void,test,duplicate,group,name,configuration,config,new,configuration,metric,registry,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,metric,group,root,new,task,manager,metric,group,registry,host,id,metric,group,group1,root,add,group,group,metric,group,group2,root,add,group,group,metric,group,group3,root,add,group,group,assert,assert,true,group1,group2,group2,group3,registry,shutdown
MetricGroupRegistrationTest -> @Test 	public void testDuplicateGroupName();1509547920;Verifies that when attempting to create a group with the name of an existing one the existing one will be returned instead.;@Test_	public void testDuplicateGroupName() {_		Configuration config = new Configuration()___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		MetricGroup group1 = root.addGroup("group")__		MetricGroup group2 = root.addGroup("group")__		MetricGroup group3 = root.addGroup("group")__		Assert.assertTrue(group1 == group2 && group2 == group3)___		registry.shutdown()__	};verifies,that,when,attempting,to,create,a,group,with,the,name,of,an,existing,one,the,existing,one,will,be,returned,instead;test,public,void,test,duplicate,group,name,configuration,config,new,configuration,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,metric,group,root,new,task,manager,metric,group,registry,host,id,metric,group,group1,root,add,group,group,metric,group,group2,root,add,group,group,metric,group,group3,root,add,group,group,assert,assert,true,group1,group2,group2,group3,registry,shutdown
MetricGroupRegistrationTest -> @Test 	public void testDuplicateGroupName();1513102155;Verifies that when attempting to create a group with the name of an existing one the existing one will be returned instead.;@Test_	public void testDuplicateGroupName() {_		Configuration config = new Configuration()___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		MetricGroup group1 = root.addGroup("group")__		MetricGroup group2 = root.addGroup("group")__		MetricGroup group3 = root.addGroup("group")__		Assert.assertTrue(group1 == group2 && group2 == group3)___		registry.shutdown()__	};verifies,that,when,attempting,to,create,a,group,with,the,name,of,an,existing,one,the,existing,one,will,be,returned,instead;test,public,void,test,duplicate,group,name,configuration,config,new,configuration,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,metric,group,root,new,task,manager,metric,group,registry,host,id,metric,group,group1,root,add,group,group,metric,group,group2,root,add,group,group,metric,group,group3,root,add,group,group,assert,assert,true,group1,group2,group2,group3,registry,shutdown
MetricGroupRegistrationTest -> @Test 	public void testMetricInstantiation();1469529015;Verifies that group methods instantiate the correct metric with the given name.;@Test_	public void testMetricInstantiation() {_		Configuration config = new Configuration()__		config.setString(ConfigConstants.METRICS_REPORTER_CLASS, TestReporter1.class.getName())___		MetricRegistry registry = new MetricRegistry(config)___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		Counter counter = root.counter("counter")__		assertEquals(counter, TestReporter1.lastPassedMetric)__		assertEquals("counter", TestReporter1.lastPassedName)___		Gauge<Object> gauge = root.gauge("gauge", new Gauge<Object>() {_			@Override_			public Object getValue() {_				return null__			}_		})__		_		Assert.assertEquals(gauge, TestReporter1.lastPassedMetric)__		assertEquals("gauge", TestReporter1.lastPassedName)___		Histogram histogram = root.histogram("histogram", new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		})___		Assert.assertEquals(histogram, TestReporter1.lastPassedMetric)__		assertEquals("histogram", TestReporter1.lastPassedName)__		registry.shutdown()__	};verifies,that,group,methods,instantiate,the,correct,metric,with,the,given,name;test,public,void,test,metric,instantiation,configuration,config,new,configuration,config,set,string,config,constants,test,reporter1,class,get,name,metric,registry,registry,new,metric,registry,config,metric,group,root,new,task,manager,metric,group,registry,host,id,counter,counter,root,counter,counter,assert,equals,counter,test,reporter1,last,passed,metric,assert,equals,counter,test,reporter1,last,passed,name,gauge,object,gauge,root,gauge,gauge,new,gauge,object,override,public,object,get,value,return,null,assert,assert,equals,gauge,test,reporter1,last,passed,metric,assert,equals,gauge,test,reporter1,last,passed,name,histogram,histogram,root,histogram,histogram,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,assert,assert,equals,histogram,test,reporter1,last,passed,metric,assert,equals,histogram,test,reporter1,last,passed,name,registry,shutdown
MetricGroupRegistrationTest -> @Test 	public void testMetricInstantiation();1469545521;Verifies that group methods instantiate the correct metric with the given name.;@Test_	public void testMetricInstantiation() {_		Configuration config = new Configuration()__		config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter1.class.getName())___		MetricRegistry registry = new MetricRegistry(config)___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		Counter counter = root.counter("counter")__		assertEquals(counter, TestReporter1.lastPassedMetric)__		assertEquals("counter", TestReporter1.lastPassedName)___		Gauge<Object> gauge = root.gauge("gauge", new Gauge<Object>() {_			@Override_			public Object getValue() {_				return null__			}_		})__		_		Assert.assertEquals(gauge, TestReporter1.lastPassedMetric)__		assertEquals("gauge", TestReporter1.lastPassedName)___		Histogram histogram = root.histogram("histogram", new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		})___		Assert.assertEquals(histogram, TestReporter1.lastPassedMetric)__		assertEquals("histogram", TestReporter1.lastPassedName)__		registry.shutdown()__	};verifies,that,group,methods,instantiate,the,correct,metric,with,the,given,name;test,public,void,test,metric,instantiation,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,test,reporter1,class,get,name,metric,registry,registry,new,metric,registry,config,metric,group,root,new,task,manager,metric,group,registry,host,id,counter,counter,root,counter,counter,assert,equals,counter,test,reporter1,last,passed,metric,assert,equals,counter,test,reporter1,last,passed,name,gauge,object,gauge,root,gauge,gauge,new,gauge,object,override,public,object,get,value,return,null,assert,assert,equals,gauge,test,reporter1,last,passed,metric,assert,equals,gauge,test,reporter1,last,passed,name,histogram,histogram,root,histogram,histogram,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,assert,assert,equals,histogram,test,reporter1,last,passed,metric,assert,equals,histogram,test,reporter1,last,passed,name,registry,shutdown
MetricGroupRegistrationTest -> @Test 	public void testMetricInstantiation();1471435139;Verifies that group methods instantiate the correct metric with the given name.;@Test_	public void testMetricInstantiation() {_		Configuration config = new Configuration()__		config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter1.class.getName())___		MetricRegistry registry = new MetricRegistry(config)___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		Counter counter = root.counter("counter")__		assertEquals(counter, TestReporter1.lastPassedMetric)__		assertEquals("counter", TestReporter1.lastPassedName)___		Gauge<Object> gauge = root.gauge("gauge", new Gauge<Object>() {_			@Override_			public Object getValue() {_				return null__			}_		})__		_		Assert.assertEquals(gauge, TestReporter1.lastPassedMetric)__		assertEquals("gauge", TestReporter1.lastPassedName)___		Histogram histogram = root.histogram("histogram", new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		})___		Assert.assertEquals(histogram, TestReporter1.lastPassedMetric)__		assertEquals("histogram", TestReporter1.lastPassedName)__		registry.shutdown()__	};verifies,that,group,methods,instantiate,the,correct,metric,with,the,given,name;test,public,void,test,metric,instantiation,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,test,reporter1,class,get,name,metric,registry,registry,new,metric,registry,config,metric,group,root,new,task,manager,metric,group,registry,host,id,counter,counter,root,counter,counter,assert,equals,counter,test,reporter1,last,passed,metric,assert,equals,counter,test,reporter1,last,passed,name,gauge,object,gauge,root,gauge,gauge,new,gauge,object,override,public,object,get,value,return,null,assert,assert,equals,gauge,test,reporter1,last,passed,metric,assert,equals,gauge,test,reporter1,last,passed,name,histogram,histogram,root,histogram,histogram,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,assert,assert,equals,histogram,test,reporter1,last,passed,metric,assert,equals,histogram,test,reporter1,last,passed,name,registry,shutdown
MetricGroupRegistrationTest -> @Test 	public void testMetricInstantiation();1474995330;Verifies that group methods instantiate the correct metric with the given name.;@Test_	public void testMetricInstantiation() {_		Configuration config = new Configuration()__		config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter1.class.getName())___		MetricRegistry registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		Counter counter = root.counter("counter")__		assertEquals(counter, TestReporter1.lastPassedMetric)__		assertEquals("counter", TestReporter1.lastPassedName)___		Gauge<Object> gauge = root.gauge("gauge", new Gauge<Object>() {_			@Override_			public Object getValue() {_				return null__			}_		})__		_		Assert.assertEquals(gauge, TestReporter1.lastPassedMetric)__		assertEquals("gauge", TestReporter1.lastPassedName)___		Histogram histogram = root.histogram("histogram", new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		})___		Assert.assertEquals(histogram, TestReporter1.lastPassedMetric)__		assertEquals("histogram", TestReporter1.lastPassedName)__		registry.shutdown()__	};verifies,that,group,methods,instantiate,the,correct,metric,with,the,given,name;test,public,void,test,metric,instantiation,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,test,reporter1,class,get,name,metric,registry,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,metric,group,root,new,task,manager,metric,group,registry,host,id,counter,counter,root,counter,counter,assert,equals,counter,test,reporter1,last,passed,metric,assert,equals,counter,test,reporter1,last,passed,name,gauge,object,gauge,root,gauge,gauge,new,gauge,object,override,public,object,get,value,return,null,assert,assert,equals,gauge,test,reporter1,last,passed,metric,assert,equals,gauge,test,reporter1,last,passed,name,histogram,histogram,root,histogram,histogram,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,assert,assert,equals,histogram,test,reporter1,last,passed,metric,assert,equals,histogram,test,reporter1,last,passed,name,registry,shutdown
MetricGroupRegistrationTest -> @Test 	public void testMetricInstantiation();1492770690;Verifies that group methods instantiate the correct metric with the given name.;@Test_	public void testMetricInstantiation() {_		Configuration config = new Configuration()__		config.setString(MetricOptions.REPORTERS_LIST, "test")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter1.class.getName())___		MetricRegistry registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		Counter counter = root.counter("counter")__		assertEquals(counter, TestReporter1.lastPassedMetric)__		assertEquals("counter", TestReporter1.lastPassedName)___		Gauge<Object> gauge = root.gauge("gauge", new Gauge<Object>() {_			@Override_			public Object getValue() {_				return null__			}_		})__		_		Assert.assertEquals(gauge, TestReporter1.lastPassedMetric)__		assertEquals("gauge", TestReporter1.lastPassedName)___		Histogram histogram = root.histogram("histogram", new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		})___		Assert.assertEquals(histogram, TestReporter1.lastPassedMetric)__		assertEquals("histogram", TestReporter1.lastPassedName)__		registry.shutdown()__	};verifies,that,group,methods,instantiate,the,correct,metric,with,the,given,name;test,public,void,test,metric,instantiation,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,test,reporter1,class,get,name,metric,registry,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,metric,group,root,new,task,manager,metric,group,registry,host,id,counter,counter,root,counter,counter,assert,equals,counter,test,reporter1,last,passed,metric,assert,equals,counter,test,reporter1,last,passed,name,gauge,object,gauge,root,gauge,gauge,new,gauge,object,override,public,object,get,value,return,null,assert,assert,equals,gauge,test,reporter1,last,passed,metric,assert,equals,gauge,test,reporter1,last,passed,name,histogram,histogram,root,histogram,histogram,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,assert,assert,equals,histogram,test,reporter1,last,passed,metric,assert,equals,histogram,test,reporter1,last,passed,name,registry,shutdown
MetricGroupRegistrationTest -> @Test 	public void testMetricInstantiation();1496409235;Verifies that group methods instantiate the correct metric with the given name.;@Test_	public void testMetricInstantiation() {_		Configuration config = new Configuration()__		config.setString(MetricOptions.REPORTERS_LIST, "test")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter1.class.getName())___		MetricRegistry registry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		Counter counter = root.counter("counter")__		assertEquals(counter, TestReporter1.lastPassedMetric)__		assertEquals("counter", TestReporter1.lastPassedName)___		Gauge<Object> gauge = root.gauge("gauge", new Gauge<Object>() {_			@Override_			public Object getValue() {_				return null__			}_		})___		Assert.assertEquals(gauge, TestReporter1.lastPassedMetric)__		assertEquals("gauge", TestReporter1.lastPassedName)___		Histogram histogram = root.histogram("histogram", new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		})___		Assert.assertEquals(histogram, TestReporter1.lastPassedMetric)__		assertEquals("histogram", TestReporter1.lastPassedName)__		registry.shutdown()__	};verifies,that,group,methods,instantiate,the,correct,metric,with,the,given,name;test,public,void,test,metric,instantiation,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,test,reporter1,class,get,name,metric,registry,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,metric,group,root,new,task,manager,metric,group,registry,host,id,counter,counter,root,counter,counter,assert,equals,counter,test,reporter1,last,passed,metric,assert,equals,counter,test,reporter1,last,passed,name,gauge,object,gauge,root,gauge,gauge,new,gauge,object,override,public,object,get,value,return,null,assert,assert,equals,gauge,test,reporter1,last,passed,metric,assert,equals,gauge,test,reporter1,last,passed,name,histogram,histogram,root,histogram,histogram,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,assert,assert,equals,histogram,test,reporter1,last,passed,metric,assert,equals,histogram,test,reporter1,last,passed,name,registry,shutdown
MetricGroupRegistrationTest -> @Test 	public void testMetricInstantiation();1509547920;Verifies that group methods instantiate the correct metric with the given name.;@Test_	public void testMetricInstantiation() {_		Configuration config = new Configuration()__		config.setString(MetricOptions.REPORTERS_LIST, "test")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter1.class.getName())___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		Counter counter = root.counter("counter")__		assertEquals(counter, TestReporter1.lastPassedMetric)__		assertEquals("counter", TestReporter1.lastPassedName)___		Gauge<Object> gauge = root.gauge("gauge", new Gauge<Object>() {_			@Override_			public Object getValue() {_				return null__			}_		})___		Assert.assertEquals(gauge, TestReporter1.lastPassedMetric)__		assertEquals("gauge", TestReporter1.lastPassedName)___		Histogram histogram = root.histogram("histogram", new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		})___		Assert.assertEquals(histogram, TestReporter1.lastPassedMetric)__		assertEquals("histogram", TestReporter1.lastPassedName)__		registry.shutdown()__	};verifies,that,group,methods,instantiate,the,correct,metric,with,the,given,name;test,public,void,test,metric,instantiation,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,test,reporter1,class,get,name,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,metric,group,root,new,task,manager,metric,group,registry,host,id,counter,counter,root,counter,counter,assert,equals,counter,test,reporter1,last,passed,metric,assert,equals,counter,test,reporter1,last,passed,name,gauge,object,gauge,root,gauge,gauge,new,gauge,object,override,public,object,get,value,return,null,assert,assert,equals,gauge,test,reporter1,last,passed,metric,assert,equals,gauge,test,reporter1,last,passed,name,histogram,histogram,root,histogram,histogram,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,assert,assert,equals,histogram,test,reporter1,last,passed,metric,assert,equals,histogram,test,reporter1,last,passed,name,registry,shutdown
MetricGroupRegistrationTest -> @Test 	public void testMetricInstantiation();1513102155;Verifies that group methods instantiate the correct metric with the given name.;@Test_	public void testMetricInstantiation() {_		Configuration config = new Configuration()__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter1.class.getName())___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		MetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")___		Counter counter = root.counter("counter")__		assertEquals(counter, TestReporter1.lastPassedMetric)__		assertEquals("counter", TestReporter1.lastPassedName)___		Gauge<Object> gauge = root.gauge("gauge", new Gauge<Object>() {_			@Override_			public Object getValue() {_				return null__			}_		})___		Assert.assertEquals(gauge, TestReporter1.lastPassedMetric)__		assertEquals("gauge", TestReporter1.lastPassedName)___		Histogram histogram = root.histogram("histogram", new Histogram() {_			@Override_			public void update(long value) {__			}__			@Override_			public long getCount() {_				return 0__			}__			@Override_			public HistogramStatistics getStatistics() {_				return null__			}_		})___		Assert.assertEquals(histogram, TestReporter1.lastPassedMetric)__		assertEquals("histogram", TestReporter1.lastPassedName)__		registry.shutdown()__	};verifies,that,group,methods,instantiate,the,correct,metric,with,the,given,name;test,public,void,test,metric,instantiation,configuration,config,new,configuration,config,set,string,config,constants,test,config,constants,test,reporter1,class,get,name,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,metric,group,root,new,task,manager,metric,group,registry,host,id,counter,counter,root,counter,counter,assert,equals,counter,test,reporter1,last,passed,metric,assert,equals,counter,test,reporter1,last,passed,name,gauge,object,gauge,root,gauge,gauge,new,gauge,object,override,public,object,get,value,return,null,assert,assert,equals,gauge,test,reporter1,last,passed,metric,assert,equals,gauge,test,reporter1,last,passed,name,histogram,histogram,root,histogram,histogram,new,histogram,override,public,void,update,long,value,override,public,long,get,count,return,0,override,public,histogram,statistics,get,statistics,return,null,assert,assert,equals,histogram,test,reporter1,last,passed,metric,assert,equals,histogram,test,reporter1,last,passed,name,registry,shutdown
