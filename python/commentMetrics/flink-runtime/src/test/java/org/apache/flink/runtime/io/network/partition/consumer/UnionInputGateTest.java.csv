# id;timestamp;commentText;codeText;commentWords;codeWords
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1427201246;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate ig1 = new SingleInputGate(new IntermediateDataSetID(), 0, 3)__		final SingleInputGate ig2 = new SingleInputGate(new IntermediateDataSetID(), 0, 5)___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		SingleInputGateTest.verifyBufferOrEvent(union, true, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 3)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 3)___		_		assertTrue(union.isFinished())__		assertNull(union.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,ig1,new,single,input,gate,new,intermediate,data,set,id,0,3,final,single,input,gate,ig2,new,single,input,gate,new,intermediate,data,set,id,0,5,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,single,input,gate,test,verify,buffer,or,event,union,true,0,single,input,gate,test,verify,buffer,or,event,union,false,0,single,input,gate,test,verify,buffer,or,event,union,true,5,single,input,gate,test,verify,buffer,or,event,union,false,5,single,input,gate,test,verify,buffer,or,event,union,true,3,single,input,gate,test,verify,buffer,or,event,union,true,4,single,input,gate,test,verify,buffer,or,event,union,true,1,single,input,gate,test,verify,buffer,or,event,union,true,6,single,input,gate,test,verify,buffer,or,event,union,false,1,single,input,gate,test,verify,buffer,or,event,union,false,6,single,input,gate,test,verify,buffer,or,event,union,true,2,single,input,gate,test,verify,buffer,or,event,union,false,2,single,input,gate,test,verify,buffer,or,event,union,true,7,single,input,gate,test,verify,buffer,or,event,union,false,7,single,input,gate,test,verify,buffer,or,event,union,false,4,single,input,gate,test,verify,buffer,or,event,union,false,3,assert,true,union,is,finished,assert,null,union,get,next,buffer,or,event
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1427367086;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate ig1 = new SingleInputGate(new IntermediateDataSetID(), 0, 3)__		final SingleInputGate ig2 = new SingleInputGate(new IntermediateDataSetID(), 0, 5)___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		SingleInputGateTest.verifyBufferOrEvent(union, true, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 3)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 3)___		_		assertTrue(union.isFinished())__		assertNull(union.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,ig1,new,single,input,gate,new,intermediate,data,set,id,0,3,final,single,input,gate,ig2,new,single,input,gate,new,intermediate,data,set,id,0,5,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,single,input,gate,test,verify,buffer,or,event,union,true,0,single,input,gate,test,verify,buffer,or,event,union,false,0,single,input,gate,test,verify,buffer,or,event,union,true,5,single,input,gate,test,verify,buffer,or,event,union,false,5,single,input,gate,test,verify,buffer,or,event,union,true,3,single,input,gate,test,verify,buffer,or,event,union,true,4,single,input,gate,test,verify,buffer,or,event,union,true,1,single,input,gate,test,verify,buffer,or,event,union,true,6,single,input,gate,test,verify,buffer,or,event,union,false,1,single,input,gate,test,verify,buffer,or,event,union,false,6,single,input,gate,test,verify,buffer,or,event,union,true,2,single,input,gate,test,verify,buffer,or,event,union,false,2,single,input,gate,test,verify,buffer,or,event,union,true,7,single,input,gate,test,verify,buffer,or,event,union,false,7,single,input,gate,test,verify,buffer,or,event,union,false,4,single,input,gate,test,verify,buffer,or,event,union,false,3,assert,true,union,is,finished,assert,null,union,get,next,buffer,or,event
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1430123107;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final Environment env = mock(Environment.class)__		final SingleInputGate ig1 = new SingleInputGate(env, new IntermediateDataSetID(), 0, 3)__		final SingleInputGate ig2 = new SingleInputGate(env, new IntermediateDataSetID(), 0, 5)___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		SingleInputGateTest.verifyBufferOrEvent(union, true, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 3)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 3)___		_		assertTrue(union.isFinished())__		assertNull(union.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,environment,env,mock,environment,class,final,single,input,gate,ig1,new,single,input,gate,env,new,intermediate,data,set,id,0,3,final,single,input,gate,ig2,new,single,input,gate,env,new,intermediate,data,set,id,0,5,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,single,input,gate,test,verify,buffer,or,event,union,true,0,single,input,gate,test,verify,buffer,or,event,union,false,0,single,input,gate,test,verify,buffer,or,event,union,true,5,single,input,gate,test,verify,buffer,or,event,union,false,5,single,input,gate,test,verify,buffer,or,event,union,true,3,single,input,gate,test,verify,buffer,or,event,union,true,4,single,input,gate,test,verify,buffer,or,event,union,true,1,single,input,gate,test,verify,buffer,or,event,union,true,6,single,input,gate,test,verify,buffer,or,event,union,false,1,single,input,gate,test,verify,buffer,or,event,union,false,6,single,input,gate,test,verify,buffer,or,event,union,true,2,single,input,gate,test,verify,buffer,or,event,union,false,2,single,input,gate,test,verify,buffer,or,event,union,true,7,single,input,gate,test,verify,buffer,or,event,union,false,7,single,input,gate,test,verify,buffer,or,event,union,false,4,single,input,gate,test,verify,buffer,or,event,union,false,3,assert,true,union,is,finished,assert,null,union,get,next,buffer,or,event
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1431371621;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(testTaskName, new IntermediateDataSetID(), 0, 3)__		final SingleInputGate ig2 = new SingleInputGate(testTaskName, new IntermediateDataSetID(), 0, 5)___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		SingleInputGateTest.verifyBufferOrEvent(union, true, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 3)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 3)___		_		assertTrue(union.isFinished())__		assertNull(union.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,intermediate,data,set,id,0,3,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,intermediate,data,set,id,0,5,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,single,input,gate,test,verify,buffer,or,event,union,true,0,single,input,gate,test,verify,buffer,or,event,union,false,0,single,input,gate,test,verify,buffer,or,event,union,true,5,single,input,gate,test,verify,buffer,or,event,union,false,5,single,input,gate,test,verify,buffer,or,event,union,true,3,single,input,gate,test,verify,buffer,or,event,union,true,4,single,input,gate,test,verify,buffer,or,event,union,true,1,single,input,gate,test,verify,buffer,or,event,union,true,6,single,input,gate,test,verify,buffer,or,event,union,false,1,single,input,gate,test,verify,buffer,or,event,union,false,6,single,input,gate,test,verify,buffer,or,event,union,true,2,single,input,gate,test,verify,buffer,or,event,union,false,2,single,input,gate,test,verify,buffer,or,event,union,true,7,single,input,gate,test,verify,buffer,or,event,union,false,7,single,input,gate,test,verify,buffer,or,event,union,false,4,single,input,gate,test,verify,buffer,or,event,union,false,3,assert,true,union,is,finished,assert,null,union,get,next,buffer,or,event
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1432295874;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(testTaskName, new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 3, mock(PartitionStateChecker.class))__		final SingleInputGate ig2 = new SingleInputGate(testTaskName, new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 5, mock(PartitionStateChecker.class))___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		SingleInputGateTest.verifyBufferOrEvent(union, true, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 3)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 3)___		_		assertTrue(union.isFinished())__		assertNull(union.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,3,mock,partition,state,checker,class,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,5,mock,partition,state,checker,class,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,single,input,gate,test,verify,buffer,or,event,union,true,0,single,input,gate,test,verify,buffer,or,event,union,false,0,single,input,gate,test,verify,buffer,or,event,union,true,5,single,input,gate,test,verify,buffer,or,event,union,false,5,single,input,gate,test,verify,buffer,or,event,union,true,3,single,input,gate,test,verify,buffer,or,event,union,true,4,single,input,gate,test,verify,buffer,or,event,union,true,1,single,input,gate,test,verify,buffer,or,event,union,true,6,single,input,gate,test,verify,buffer,or,event,union,false,1,single,input,gate,test,verify,buffer,or,event,union,false,6,single,input,gate,test,verify,buffer,or,event,union,true,2,single,input,gate,test,verify,buffer,or,event,union,false,2,single,input,gate,test,verify,buffer,or,event,union,true,7,single,input,gate,test,verify,buffer,or,event,union,false,7,single,input,gate,test,verify,buffer,or,event,union,false,4,single,input,gate,test,verify,buffer,or,event,union,false,3,assert,true,union,is,finished,assert,null,union,get,next,buffer,or,event
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1466072697;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(testTaskName, new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 3, mock(PartitionStateChecker.class), new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())__		final SingleInputGate ig2 = new SingleInputGate(testTaskName, new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 5, mock(PartitionStateChecker.class), new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		SingleInputGateTest.verifyBufferOrEvent(union, true, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 3)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 3)___		_		assertTrue(union.isFinished())__		assertNull(union.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,3,mock,partition,state,checker,class,new,unregistered,task,metrics,group,dummy,iometric,group,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,5,mock,partition,state,checker,class,new,unregistered,task,metrics,group,dummy,iometric,group,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,single,input,gate,test,verify,buffer,or,event,union,true,0,single,input,gate,test,verify,buffer,or,event,union,false,0,single,input,gate,test,verify,buffer,or,event,union,true,5,single,input,gate,test,verify,buffer,or,event,union,false,5,single,input,gate,test,verify,buffer,or,event,union,true,3,single,input,gate,test,verify,buffer,or,event,union,true,4,single,input,gate,test,verify,buffer,or,event,union,true,1,single,input,gate,test,verify,buffer,or,event,union,true,6,single,input,gate,test,verify,buffer,or,event,union,false,1,single,input,gate,test,verify,buffer,or,event,union,false,6,single,input,gate,test,verify,buffer,or,event,union,true,2,single,input,gate,test,verify,buffer,or,event,union,false,2,single,input,gate,test,verify,buffer,or,event,union,true,7,single,input,gate,test,verify,buffer,or,event,union,false,7,single,input,gate,test,verify,buffer,or,event,union,false,4,single,input,gate,test,verify,buffer,or,event,union,false,3,assert,true,union,is,finished,assert,null,union,get,next,buffer,or,event
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1475219249;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(testTaskName, new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 3, mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())__		final SingleInputGate ig2 = new SingleInputGate(testTaskName, new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 5, mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		SingleInputGateTest.verifyBufferOrEvent(union, true, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 3)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 3)___		_		assertTrue(union.isFinished())__		assertNull(union.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,3,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,iometric,group,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,5,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,iometric,group,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,single,input,gate,test,verify,buffer,or,event,union,true,0,single,input,gate,test,verify,buffer,or,event,union,false,0,single,input,gate,test,verify,buffer,or,event,union,true,5,single,input,gate,test,verify,buffer,or,event,union,false,5,single,input,gate,test,verify,buffer,or,event,union,true,3,single,input,gate,test,verify,buffer,or,event,union,true,4,single,input,gate,test,verify,buffer,or,event,union,true,1,single,input,gate,test,verify,buffer,or,event,union,true,6,single,input,gate,test,verify,buffer,or,event,union,false,1,single,input,gate,test,verify,buffer,or,event,union,false,6,single,input,gate,test,verify,buffer,or,event,union,true,2,single,input,gate,test,verify,buffer,or,event,union,false,2,single,input,gate,test,verify,buffer,or,event,union,true,7,single,input,gate,test,verify,buffer,or,event,union,false,7,single,input,gate,test,verify,buffer,or,event,union,false,4,single,input,gate,test,verify,buffer,or,event,union,false,3,assert,true,union,is,finished,assert,null,union,get,next,buffer,or,event
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1477389806;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(testTaskName, new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 3, mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())__		final SingleInputGate ig2 = new SingleInputGate(testTaskName, new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 5, mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		SingleInputGateTest.verifyBufferOrEvent(union, true, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 0)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 5)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 3)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 1)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 6)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 2)__		SingleInputGateTest.verifyBufferOrEvent(union, true, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 7)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 4)__		SingleInputGateTest.verifyBufferOrEvent(union, false, 3)___		_		assertTrue(union.isFinished())__		assertNull(union.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,3,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,5,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,single,input,gate,test,verify,buffer,or,event,union,true,0,single,input,gate,test,verify,buffer,or,event,union,false,0,single,input,gate,test,verify,buffer,or,event,union,true,5,single,input,gate,test,verify,buffer,or,event,union,false,5,single,input,gate,test,verify,buffer,or,event,union,true,3,single,input,gate,test,verify,buffer,or,event,union,true,4,single,input,gate,test,verify,buffer,or,event,union,true,1,single,input,gate,test,verify,buffer,or,event,union,true,6,single,input,gate,test,verify,buffer,or,event,union,false,1,single,input,gate,test,verify,buffer,or,event,union,false,6,single,input,gate,test,verify,buffer,or,event,union,true,2,single,input,gate,test,verify,buffer,or,event,union,false,2,single,input,gate,test,verify,buffer,or,event,union,true,7,single,input,gate,test,verify,buffer,or,event,union,false,7,single,input,gate,test,verify,buffer,or,event,union,false,4,single,input,gate,test,verify,buffer,or,event,union,false,3,assert,true,union,is,finished,assert,null,union,get,next,buffer,or,event
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1480624969;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(testTaskName, new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 3, mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())__		final SingleInputGate ig2 = new SingleInputGate(testTaskName, new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 5, mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		ig1.notifyChannelNonEmpty(inputChannels[0][0].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][1].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][2].getInputChannel())___		ig2.notifyChannelNonEmpty(inputChannels[1][0].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][1].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][2].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][3].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][4].getInputChannel())___		SingleInputGateTest.verifyBufferOrEvent(union, true, 0)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 3)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 1)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 4)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 2)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 5)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 0)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 6)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 1)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 7)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 2)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 3)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 4)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 5)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 6)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 7)_ __		_		assertTrue(union.isFinished())__		assertNull(union.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,3,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,5,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,ig1,notify,channel,non,empty,input,channels,0,0,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,1,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,0,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,1,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,3,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,4,get,input,channel,single,input,gate,test,verify,buffer,or,event,union,true,0,single,input,gate,test,verify,buffer,or,event,union,true,3,single,input,gate,test,verify,buffer,or,event,union,true,1,single,input,gate,test,verify,buffer,or,event,union,true,4,single,input,gate,test,verify,buffer,or,event,union,true,2,single,input,gate,test,verify,buffer,or,event,union,true,5,single,input,gate,test,verify,buffer,or,event,union,false,0,single,input,gate,test,verify,buffer,or,event,union,true,6,single,input,gate,test,verify,buffer,or,event,union,false,1,single,input,gate,test,verify,buffer,or,event,union,true,7,single,input,gate,test,verify,buffer,or,event,union,false,2,single,input,gate,test,verify,buffer,or,event,union,false,3,single,input,gate,test,verify,buffer,or,event,union,false,4,single,input,gate,test,verify,buffer,or,event,union,false,5,single,input,gate,test,verify,buffer,or,event,union,false,6,single,input,gate,test,verify,buffer,or,event,union,false,7,assert,true,union,is,finished,assert,null,union,get,next,buffer,or,event
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1481560756;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(testTaskName, new JobID(), new IntermediateDataSetID(), 0, 3, mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())__		final SingleInputGate ig2 = new SingleInputGate(testTaskName, new JobID(), new IntermediateDataSetID(), 0, 5, mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		ig1.notifyChannelNonEmpty(inputChannels[0][0].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][1].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][2].getInputChannel())___		ig2.notifyChannelNonEmpty(inputChannels[1][0].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][1].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][2].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][3].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][4].getInputChannel())___		SingleInputGateTest.verifyBufferOrEvent(union, true, 0)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 3)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 1)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 4)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 2)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 5)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 0)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 6)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 1)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 7)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 2)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 3)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 4)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 5)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 6)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 7)_ __		_		assertTrue(union.isFinished())__		assertNull(union.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,0,3,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,0,5,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,ig1,notify,channel,non,empty,input,channels,0,0,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,1,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,0,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,1,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,3,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,4,get,input,channel,single,input,gate,test,verify,buffer,or,event,union,true,0,single,input,gate,test,verify,buffer,or,event,union,true,3,single,input,gate,test,verify,buffer,or,event,union,true,1,single,input,gate,test,verify,buffer,or,event,union,true,4,single,input,gate,test,verify,buffer,or,event,union,true,2,single,input,gate,test,verify,buffer,or,event,union,true,5,single,input,gate,test,verify,buffer,or,event,union,false,0,single,input,gate,test,verify,buffer,or,event,union,true,6,single,input,gate,test,verify,buffer,or,event,union,false,1,single,input,gate,test,verify,buffer,or,event,union,true,7,single,input,gate,test,verify,buffer,or,event,union,false,2,single,input,gate,test,verify,buffer,or,event,union,false,3,single,input,gate,test,verify,buffer,or,event,union,false,4,single,input,gate,test,verify,buffer,or,event,union,false,5,single,input,gate,test,verify,buffer,or,event,union,false,6,single,input,gate,test,verify,buffer,or,event,union,false,7,assert,true,union,is,finished,assert,null,union,get,next,buffer,or,event
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1489149058;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 3,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())__		final SingleInputGate ig2 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 5,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		ig1.notifyChannelNonEmpty(inputChannels[0][0].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][1].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][2].getInputChannel())___		ig2.notifyChannelNonEmpty(inputChannels[1][0].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][1].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][2].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][3].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][4].getInputChannel())___		SingleInputGateTest.verifyBufferOrEvent(union, true, 0)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 3)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 1)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 4)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 2)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 5)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 0)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 6)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 1)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 7)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 2)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 3)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 4)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 5)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 6)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 7)_ __		_		assertTrue(union.isFinished())__		assertNull(union.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,3,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,5,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,ig1,notify,channel,non,empty,input,channels,0,0,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,1,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,0,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,1,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,3,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,4,get,input,channel,single,input,gate,test,verify,buffer,or,event,union,true,0,single,input,gate,test,verify,buffer,or,event,union,true,3,single,input,gate,test,verify,buffer,or,event,union,true,1,single,input,gate,test,verify,buffer,or,event,union,true,4,single,input,gate,test,verify,buffer,or,event,union,true,2,single,input,gate,test,verify,buffer,or,event,union,true,5,single,input,gate,test,verify,buffer,or,event,union,false,0,single,input,gate,test,verify,buffer,or,event,union,true,6,single,input,gate,test,verify,buffer,or,event,union,false,1,single,input,gate,test,verify,buffer,or,event,union,true,7,single,input,gate,test,verify,buffer,or,event,union,false,2,single,input,gate,test,verify,buffer,or,event,union,false,3,single,input,gate,test,verify,buffer,or,event,union,false,4,single,input,gate,test,verify,buffer,or,event,union,false,5,single,input,gate,test,verify,buffer,or,event,union,false,6,single,input,gate,test,verify,buffer,or,event,union,false,7,assert,true,union,is,finished,assert,null,union,get,next,buffer,or,event
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1513102156;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 3,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())__		final SingleInputGate ig2 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 5,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		ig1.notifyChannelNonEmpty(inputChannels[0][0].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][1].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][2].getInputChannel())___		ig2.notifyChannelNonEmpty(inputChannels[1][0].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][1].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][2].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][3].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][4].getInputChannel())___		SingleInputGateTest.verifyBufferOrEvent(union, true, 0)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 3)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 1)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 4)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 2)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 5)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 0)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 6)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 1)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 7)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 2)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 3)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 4)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 5)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 6)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 7)_ __		_		assertTrue(union.isFinished())__		assertNull(union.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,3,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,5,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,ig1,notify,channel,non,empty,input,channels,0,0,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,1,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,0,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,1,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,3,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,4,get,input,channel,single,input,gate,test,verify,buffer,or,event,union,true,0,single,input,gate,test,verify,buffer,or,event,union,true,3,single,input,gate,test,verify,buffer,or,event,union,true,1,single,input,gate,test,verify,buffer,or,event,union,true,4,single,input,gate,test,verify,buffer,or,event,union,true,2,single,input,gate,test,verify,buffer,or,event,union,true,5,single,input,gate,test,verify,buffer,or,event,union,false,0,single,input,gate,test,verify,buffer,or,event,union,true,6,single,input,gate,test,verify,buffer,or,event,union,false,1,single,input,gate,test,verify,buffer,or,event,union,true,7,single,input,gate,test,verify,buffer,or,event,union,false,2,single,input,gate,test,verify,buffer,or,event,union,false,3,single,input,gate,test,verify,buffer,or,event,union,false,4,single,input,gate,test,verify,buffer,or,event,union,false,5,single,input,gate,test,verify,buffer,or,event,union,false,6,single,input,gate,test,verify,buffer,or,event,union,false,7,assert,true,union,is,finished,assert,null,union,get,next,buffer,or,event
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1519039300;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 3,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())__		final SingleInputGate ig2 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 5,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		ig1.notifyChannelNonEmpty(inputChannels[0][0].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][1].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][2].getInputChannel())___		ig2.notifyChannelNonEmpty(inputChannels[1][0].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][1].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][2].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][3].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][4].getInputChannel())___		SingleInputGateTest.verifyBufferOrEvent(union, true, 0)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 3)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 1)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 4)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 2)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 5)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 0)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 6)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 1)_ _		SingleInputGateTest.verifyBufferOrEvent(union, true, 7)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 2)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 3)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 4)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 5)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 6)_ _		SingleInputGateTest.verifyBufferOrEvent(union, false, 7)_ __		_		assertTrue(union.isFinished())__		assertFalse(union.getNextBufferOrEvent().isPresent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,3,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,5,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,ig1,notify,channel,non,empty,input,channels,0,0,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,1,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,0,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,1,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,3,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,4,get,input,channel,single,input,gate,test,verify,buffer,or,event,union,true,0,single,input,gate,test,verify,buffer,or,event,union,true,3,single,input,gate,test,verify,buffer,or,event,union,true,1,single,input,gate,test,verify,buffer,or,event,union,true,4,single,input,gate,test,verify,buffer,or,event,union,true,2,single,input,gate,test,verify,buffer,or,event,union,true,5,single,input,gate,test,verify,buffer,or,event,union,false,0,single,input,gate,test,verify,buffer,or,event,union,true,6,single,input,gate,test,verify,buffer,or,event,union,false,1,single,input,gate,test,verify,buffer,or,event,union,true,7,single,input,gate,test,verify,buffer,or,event,union,false,2,single,input,gate,test,verify,buffer,or,event,union,false,3,single,input,gate,test,verify,buffer,or,event,union,false,4,single,input,gate,test,verify,buffer,or,event,union,false,5,single,input,gate,test,verify,buffer,or,event,union,false,6,single,input,gate,test,verify,buffer,or,event,union,false,7,assert,true,union,is,finished,assert,false,union,get,next,buffer,or,event,is,present
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1519834372;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 3,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())__		final SingleInputGate ig2 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 5,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		ig1.notifyChannelNonEmpty(inputChannels[0][0].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][1].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][2].getInputChannel())___		ig2.notifyChannelNonEmpty(inputChannels[1][0].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][1].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][2].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][3].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][4].getInputChannel())___		verifyBufferOrEvent(union, true, 0, true)_ _		verifyBufferOrEvent(union, true, 3, true)_ _		verifyBufferOrEvent(union, true, 1, true)_ _		verifyBufferOrEvent(union, true, 4, true)_ _		verifyBufferOrEvent(union, true, 2, true)_ _		verifyBufferOrEvent(union, true, 5, true)_ _		verifyBufferOrEvent(union, false, 0, true)_ _		verifyBufferOrEvent(union, true, 6, true)_ _		verifyBufferOrEvent(union, false, 1, true)_ _		verifyBufferOrEvent(union, true, 7, true)_ _		verifyBufferOrEvent(union, false, 2, true)_ _		verifyBufferOrEvent(union, false, 3, true)_ _		verifyBufferOrEvent(union, false, 4, true)_ _		verifyBufferOrEvent(union, false, 5, true)_ _		verifyBufferOrEvent(union, false, 6, true)_ _		verifyBufferOrEvent(union, false, 7, false)_ __		_		assertTrue(union.isFinished())__		assertFalse(union.getNextBufferOrEvent().isPresent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,3,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,5,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,ig1,notify,channel,non,empty,input,channels,0,0,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,1,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,0,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,1,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,3,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,4,get,input,channel,verify,buffer,or,event,union,true,0,true,verify,buffer,or,event,union,true,3,true,verify,buffer,or,event,union,true,1,true,verify,buffer,or,event,union,true,4,true,verify,buffer,or,event,union,true,2,true,verify,buffer,or,event,union,true,5,true,verify,buffer,or,event,union,false,0,true,verify,buffer,or,event,union,true,6,true,verify,buffer,or,event,union,false,1,true,verify,buffer,or,event,union,true,7,true,verify,buffer,or,event,union,false,2,true,verify,buffer,or,event,union,false,3,true,verify,buffer,or,event,union,false,4,true,verify,buffer,or,event,union,false,5,true,verify,buffer,or,event,union,false,6,true,verify,buffer,or,event,union,false,7,false,assert,true,union,is,finished,assert,false,union,get,next,buffer,or,event,is,present
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1525116906;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 3,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),_			true)__		final SingleInputGate ig2 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 5,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),_			true)___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		ig1.notifyChannelNonEmpty(inputChannels[0][0].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][1].getInputChannel())__		ig1.notifyChannelNonEmpty(inputChannels[0][2].getInputChannel())___		ig2.notifyChannelNonEmpty(inputChannels[1][0].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][1].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][2].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][3].getInputChannel())__		ig2.notifyChannelNonEmpty(inputChannels[1][4].getInputChannel())___		verifyBufferOrEvent(union, true, 0, true)_ _		verifyBufferOrEvent(union, true, 3, true)_ _		verifyBufferOrEvent(union, true, 1, true)_ _		verifyBufferOrEvent(union, true, 4, true)_ _		verifyBufferOrEvent(union, true, 2, true)_ _		verifyBufferOrEvent(union, true, 5, true)_ _		verifyBufferOrEvent(union, false, 0, true)_ _		verifyBufferOrEvent(union, true, 6, true)_ _		verifyBufferOrEvent(union, false, 1, true)_ _		verifyBufferOrEvent(union, true, 7, true)_ _		verifyBufferOrEvent(union, false, 2, true)_ _		verifyBufferOrEvent(union, false, 3, true)_ _		verifyBufferOrEvent(union, false, 4, true)_ _		verifyBufferOrEvent(union, false, 5, true)_ _		verifyBufferOrEvent(union, false, 6, true)_ _		verifyBufferOrEvent(union, false, 7, false)_ __		_		assertTrue(union.isFinished())__		assertFalse(union.getNextBufferOrEvent().isPresent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,3,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,true,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,5,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,true,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,ig1,notify,channel,non,empty,input,channels,0,0,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,1,get,input,channel,ig1,notify,channel,non,empty,input,channels,0,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,0,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,1,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,2,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,3,get,input,channel,ig2,notify,channel,non,empty,input,channels,1,4,get,input,channel,verify,buffer,or,event,union,true,0,true,verify,buffer,or,event,union,true,3,true,verify,buffer,or,event,union,true,1,true,verify,buffer,or,event,union,true,4,true,verify,buffer,or,event,union,true,2,true,verify,buffer,or,event,union,true,5,true,verify,buffer,or,event,union,false,0,true,verify,buffer,or,event,union,true,6,true,verify,buffer,or,event,union,false,1,true,verify,buffer,or,event,union,true,7,true,verify,buffer,or,event,union,false,2,true,verify,buffer,or,event,union,false,3,true,verify,buffer,or,event,union,false,4,true,verify,buffer,or,event,union,false,5,true,verify,buffer,or,event,union,false,6,true,verify,buffer,or,event,union,false,7,false,assert,true,union,is,finished,assert,false,union,get,next,buffer,or,event,is,present
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1531742482;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p> For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 3,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),_			true)__		final SingleInputGate ig2 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 5,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),_			true)___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		ig1.notifyChannelNonEmpty(inputChannels[0][0])__		ig1.notifyChannelNonEmpty(inputChannels[0][1])__		ig1.notifyChannelNonEmpty(inputChannels[0][2])___		ig2.notifyChannelNonEmpty(inputChannels[1][0])__		ig2.notifyChannelNonEmpty(inputChannels[1][1])__		ig2.notifyChannelNonEmpty(inputChannels[1][2])__		ig2.notifyChannelNonEmpty(inputChannels[1][3])__		ig2.notifyChannelNonEmpty(inputChannels[1][4])___		verifyBufferOrEvent(union, true, 0, true)_ _		verifyBufferOrEvent(union, true, 3, true)_ _		verifyBufferOrEvent(union, true, 1, true)_ _		verifyBufferOrEvent(union, true, 4, true)_ _		verifyBufferOrEvent(union, true, 2, true)_ _		verifyBufferOrEvent(union, true, 5, true)_ _		verifyBufferOrEvent(union, false, 0, true)_ _		verifyBufferOrEvent(union, true, 6, true)_ _		verifyBufferOrEvent(union, false, 1, true)_ _		verifyBufferOrEvent(union, true, 7, true)_ _		verifyBufferOrEvent(union, false, 2, true)_ _		verifyBufferOrEvent(union, false, 3, true)_ _		verifyBufferOrEvent(union, false, 4, true)_ _		verifyBufferOrEvent(union, false, 5, true)_ _		verifyBufferOrEvent(union, false, 6, true)_ _		verifyBufferOrEvent(union, false, 7, false)_ __		_		assertTrue(union.isFinished())__		assertFalse(union.getNextBufferOrEvent().isPresent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,3,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,true,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,5,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,true,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,ig1,notify,channel,non,empty,input,channels,0,0,ig1,notify,channel,non,empty,input,channels,0,1,ig1,notify,channel,non,empty,input,channels,0,2,ig2,notify,channel,non,empty,input,channels,1,0,ig2,notify,channel,non,empty,input,channels,1,1,ig2,notify,channel,non,empty,input,channels,1,2,ig2,notify,channel,non,empty,input,channels,1,3,ig2,notify,channel,non,empty,input,channels,1,4,verify,buffer,or,event,union,true,0,true,verify,buffer,or,event,union,true,3,true,verify,buffer,or,event,union,true,1,true,verify,buffer,or,event,union,true,4,true,verify,buffer,or,event,union,true,2,true,verify,buffer,or,event,union,true,5,true,verify,buffer,or,event,union,false,0,true,verify,buffer,or,event,union,true,6,true,verify,buffer,or,event,union,false,1,true,verify,buffer,or,event,union,true,7,true,verify,buffer,or,event,union,false,2,true,verify,buffer,or,event,union,false,3,true,verify,buffer,or,event,union,false,4,true,verify,buffer,or,event,union,false,5,true,verify,buffer,or,event,union,false,6,true,verify,buffer,or,event,union,false,7,false,assert,true,union,is,finished,assert,false,union,get,next,buffer,or,event,is,present
UnionInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1537385496;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.__<p>For buffer-or-event instances, it is important to verify that they have been set off to_the correct logical index.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final String testTaskName = "Test Task"__		final SingleInputGate ig1 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 3,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),_			true)__		final SingleInputGate ig2 = new SingleInputGate(_			testTaskName, new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 5,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),_			true)___		final UnionInputGate union = new UnionInputGate(new SingleInputGate[]{ig1, ig2})___		assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels())___		final TestInputChannel[][] inputChannels = new TestInputChannel[][]{_				TestInputChannel.createInputChannels(ig1, 3),_				TestInputChannel.createInputChannels(ig2, 5)_		}___		inputChannels[0][0].readBuffer()_ _		inputChannels[0][0].readEndOfPartitionEvent()_ _		inputChannels[1][2].readBuffer()_ _		inputChannels[1][2].readEndOfPartitionEvent()_ _		inputChannels[1][0].readBuffer()_ _		inputChannels[1][1].readBuffer()_ _		inputChannels[0][1].readBuffer()_ _		inputChannels[1][3].readBuffer()_ _		inputChannels[0][1].readEndOfPartitionEvent()_ _		inputChannels[1][3].readEndOfPartitionEvent()_ _		inputChannels[0][2].readBuffer()_ _		inputChannels[0][2].readEndOfPartitionEvent()_ _		inputChannels[1][4].readBuffer()_ _		inputChannels[1][4].readEndOfPartitionEvent()_ _		inputChannels[1][1].readEndOfPartitionEvent()_ _		inputChannels[1][0].readEndOfPartitionEvent()_ __		ig1.notifyChannelNonEmpty(inputChannels[0][0])__		ig1.notifyChannelNonEmpty(inputChannels[0][1])__		ig1.notifyChannelNonEmpty(inputChannels[0][2])___		ig2.notifyChannelNonEmpty(inputChannels[1][0])__		ig2.notifyChannelNonEmpty(inputChannels[1][1])__		ig2.notifyChannelNonEmpty(inputChannels[1][2])__		ig2.notifyChannelNonEmpty(inputChannels[1][3])__		ig2.notifyChannelNonEmpty(inputChannels[1][4])___		verifyBufferOrEvent(union, true, 0, true)_ _		verifyBufferOrEvent(union, true, 3, true)_ _		verifyBufferOrEvent(union, true, 1, true)_ _		verifyBufferOrEvent(union, true, 4, true)_ _		verifyBufferOrEvent(union, true, 2, true)_ _		verifyBufferOrEvent(union, true, 5, true)_ _		verifyBufferOrEvent(union, false, 0, true)_ _		verifyBufferOrEvent(union, true, 6, true)_ _		verifyBufferOrEvent(union, false, 1, true)_ _		verifyBufferOrEvent(union, true, 7, true)_ _		verifyBufferOrEvent(union, false, 2, true)_ _		verifyBufferOrEvent(union, false, 3, true)_ _		verifyBufferOrEvent(union, false, 4, true)_ _		verifyBufferOrEvent(union, false, 5, true)_ _		verifyBufferOrEvent(union, false, 6, true)_ _		verifyBufferOrEvent(union, false, 7, false)_ __		_		assertTrue(union.isFinished())__		assertFalse(union.getNextBufferOrEvent().isPresent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events,p,for,buffer,or,event,instances,it,is,important,to,verify,that,they,have,been,set,off,to,the,correct,logical,index;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,string,test,task,name,test,task,final,single,input,gate,ig1,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,3,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,true,final,single,input,gate,ig2,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,5,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,true,final,union,input,gate,union,new,union,input,gate,new,single,input,gate,ig1,ig2,assert,equals,ig1,get,number,of,input,channels,ig2,get,number,of,input,channels,union,get,number,of,input,channels,final,test,input,channel,input,channels,new,test,input,channel,test,input,channel,create,input,channels,ig1,3,test,input,channel,create,input,channels,ig2,5,input,channels,0,0,read,buffer,input,channels,0,0,read,end,of,partition,event,input,channels,1,2,read,buffer,input,channels,1,2,read,end,of,partition,event,input,channels,1,0,read,buffer,input,channels,1,1,read,buffer,input,channels,0,1,read,buffer,input,channels,1,3,read,buffer,input,channels,0,1,read,end,of,partition,event,input,channels,1,3,read,end,of,partition,event,input,channels,0,2,read,buffer,input,channels,0,2,read,end,of,partition,event,input,channels,1,4,read,buffer,input,channels,1,4,read,end,of,partition,event,input,channels,1,1,read,end,of,partition,event,input,channels,1,0,read,end,of,partition,event,ig1,notify,channel,non,empty,input,channels,0,0,ig1,notify,channel,non,empty,input,channels,0,1,ig1,notify,channel,non,empty,input,channels,0,2,ig2,notify,channel,non,empty,input,channels,1,0,ig2,notify,channel,non,empty,input,channels,1,1,ig2,notify,channel,non,empty,input,channels,1,2,ig2,notify,channel,non,empty,input,channels,1,3,ig2,notify,channel,non,empty,input,channels,1,4,verify,buffer,or,event,union,true,0,true,verify,buffer,or,event,union,true,3,true,verify,buffer,or,event,union,true,1,true,verify,buffer,or,event,union,true,4,true,verify,buffer,or,event,union,true,2,true,verify,buffer,or,event,union,true,5,true,verify,buffer,or,event,union,false,0,true,verify,buffer,or,event,union,true,6,true,verify,buffer,or,event,union,false,1,true,verify,buffer,or,event,union,true,7,true,verify,buffer,or,event,union,false,2,true,verify,buffer,or,event,union,false,3,true,verify,buffer,or,event,union,false,4,true,verify,buffer,or,event,union,false,5,true,verify,buffer,or,event,union,false,6,true,verify,buffer,or,event,union,false,7,false,assert,true,union,is,finished,assert,false,union,get,next,buffer,or,event,is,present
