# id;timestamp;commentText;codeText;commentWords;codeWords
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1427201246;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(new IntermediateDataSetID(), 0, 2)___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,new,intermediate,data,set,id,0,2,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1427367086;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(new IntermediateDataSetID(), 0, 2)___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,new,intermediate,data,set,id,0,2,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1427367086;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(new IntermediateDataSetID(), 0, 2)___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,new,intermediate,data,set,id,0,2,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1430123107;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_				mock(Environment.class), new IntermediateDataSetID(), 0, 2)___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,mock,environment,class,new,intermediate,data,set,id,0,2,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1431371621;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_				"Test Task Name", new IntermediateDataSetID(), 0, 2)___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,intermediate,data,set,id,0,2,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1432295874;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_				"Test Task Name", new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 2, mock(PartitionStateChecker.class))___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,2,mock,partition,state,checker,class,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1438523908;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_				"Test Task Name", new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 2, mock(PartitionStateChecker.class))___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,2,mock,partition,state,checker,class,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1441738685;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_				"Test Task Name", new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 2, mock(PartitionStateChecker.class))___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,2,mock,partition,state,checker,class,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1453902313;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_				"Test Task Name", new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 2, mock(PartitionStateChecker.class))___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,2,mock,partition,state,checker,class,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1459798010;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_				"Test Task Name", new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 2, mock(PartitionStateChecker.class))___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,2,mock,partition,state,checker,class,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1466072697;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_				"Test Task Name", new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 2, mock(PartitionStateChecker.class), new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,2,mock,partition,state,checker,class,new,unregistered,task,metrics,group,dummy,iometric,group,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1472821521;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_				"Test Task Name", new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 2, mock(PartitionStateChecker.class), new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,2,mock,partition,state,checker,class,new,unregistered,task,metrics,group,dummy,iometric,group,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1475219249;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_				"Test Task Name", new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 2, mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,2,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,iometric,group,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1477389806;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_				"Test Task Name", new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 2, mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,2,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1478853699;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_				"Test Task Name", new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 2, mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_				new TestInputChannel(inputGate, 0),_				new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_				new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,2,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1480624969;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_			"Test Task Name", new JobID(), new ExecutionAttemptID(), new IntermediateDataSetID(), 0, 2, mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,2,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1481560756;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_			"Test Task Name", new JobID(), new IntermediateDataSetID(), 0, 2, mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,0,2,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1489149058;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_			"Test Task Name", new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 2,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		assertEquals(ResultPartitionType.PIPELINED, inputGate.getConsumedPartitionType())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,2,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,assert,equals,result,partition,type,pipelined,input,gate,get,consumed,partition,type,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1493724918;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_			"Test Task Name", new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 2,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		assertEquals(ResultPartitionType.PIPELINED, inputGate.getConsumedPartitionType())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,2,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,assert,equals,result,partition,type,pipelined,input,gate,get,consumed,partition,type,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1507647199;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_			"Test Task Name", new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 2,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		assertEquals(ResultPartitionType.PIPELINED, inputGate.getConsumedPartitionType())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,2,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,assert,equals,result,partition,type,pipelined,input,gate,get,consumed,partition,type,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1513102156;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_			"Test Task Name", new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 2,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(ResultPartitionType.PIPELINED, inputGate.getConsumedPartitionType())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,2,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,result,partition,type,pipelined,input,gate,get,consumed,partition,type,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1515510677;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_			"Test Task Name", new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 2,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(ResultPartitionType.PIPELINED, inputGate.getConsumedPartitionType())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,2,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,result,partition,type,pipelined,input,gate,get,consumed,partition,type,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1516285456;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_			"Test Task Name", new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 2,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(ResultPartitionType.PIPELINED, inputGate.getConsumedPartitionType())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,2,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,result,partition,type,pipelined,input,gate,get,consumed,partition,type,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1516285456;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_			"Test Task Name", new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 2,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(ResultPartitionType.PIPELINED, inputGate.getConsumedPartitionType())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,2,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,result,partition,type,pipelined,input,gate,get,consumed,partition,type,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1518785736;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_			"Test Task Name", new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 2,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(ResultPartitionType.PIPELINED, inputGate.getConsumedPartitionType())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertNull(inputGate.getNextBufferOrEvent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,2,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,result,partition,type,pipelined,input,gate,get,consumed,partition,type,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,null,input,gate,get,next,buffer,or,event
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1519039300;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_			"Test Task Name", new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 2,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(ResultPartitionType.PIPELINED, inputGate.getConsumedPartitionType())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertFalse(inputGate.getNextBufferOrEvent().isPresent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,2,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,result,partition,type,pipelined,input,gate,get,consumed,partition,type,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,false,input,gate,get,next,buffer,or,event,is,present
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1519039301;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = new SingleInputGate(_			"Test Task Name", new JobID(),_			new IntermediateDataSetID(), ResultPartitionType.PIPELINED,_			0, 2,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(ResultPartitionType.PIPELINED, inputGate.getConsumedPartitionType())___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertFalse(inputGate.getNextBufferOrEvent().isPresent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,2,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,result,partition,type,pipelined,input,gate,get,consumed,partition,type,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,false,input,gate,get,next,buffer,or,event,is,present
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1519834372;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = createInputGate()___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, true, 1)__		verifyBufferOrEvent(inputGate, true, 0)__		verifyBufferOrEvent(inputGate, false, 1)__		verifyBufferOrEvent(inputGate, false, 0)___		_		assertTrue(inputGate.isFinished())__		assertFalse(inputGate.getNextBufferOrEvent().isPresent())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,create,input,gate,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,true,1,verify,buffer,or,event,input,gate,true,0,verify,buffer,or,event,input,gate,false,1,verify,buffer,or,event,input,gate,false,0,assert,true,input,gate,is,finished,assert,false,input,gate,get,next,buffer,or,event,is,present
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1519834372;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = createInputGate()___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0, true)__		verifyBufferOrEvent(inputGate, true, 1, true)__		verifyBufferOrEvent(inputGate, true, 0, true)__		verifyBufferOrEvent(inputGate, false, 1, true)__		verifyBufferOrEvent(inputGate, false, 0, false)___		_		assertTrue(inputGate.isFinished())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,create,input,gate,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,true,verify,buffer,or,event,input,gate,true,1,true,verify,buffer,or,event,input,gate,true,0,true,verify,buffer,or,event,input,gate,false,1,true,verify,buffer,or,event,input,gate,false,0,false,assert,true,input,gate,is,finished
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1525116906;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = createInputGate()___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0].getInputChannel())___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1].getInputChannel())___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0].getInputChannel())__		inputGate.notifyChannelNonEmpty(inputChannels[1].getInputChannel())___		verifyBufferOrEvent(inputGate, true, 0, true)__		verifyBufferOrEvent(inputGate, true, 1, true)__		verifyBufferOrEvent(inputGate, true, 0, true)__		verifyBufferOrEvent(inputGate, false, 1, true)__		verifyBufferOrEvent(inputGate, false, 0, false)___		_		assertTrue(inputGate.isFinished())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,create,input,gate,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,get,input,channel,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,get,input,channel,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,get,input,channel,input,gate,notify,channel,non,empty,input,channels,1,get,input,channel,verify,buffer,or,event,input,gate,true,0,true,verify,buffer,or,event,input,gate,true,1,true,verify,buffer,or,event,input,gate,true,0,true,verify,buffer,or,event,input,gate,false,1,true,verify,buffer,or,event,input,gate,false,0,false,assert,true,input,gate,is,finished
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1531742482;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = createInputGate()___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0])___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1])___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0])__		inputGate.notifyChannelNonEmpty(inputChannels[1])___		verifyBufferOrEvent(inputGate, true, 0, true)__		verifyBufferOrEvent(inputGate, true, 1, true)__		verifyBufferOrEvent(inputGate, true, 0, true)__		verifyBufferOrEvent(inputGate, false, 1, true)__		verifyBufferOrEvent(inputGate, false, 0, false)___		_		assertTrue(inputGate.isFinished())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,create,input,gate,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,input,gate,notify,channel,non,empty,input,channels,1,verify,buffer,or,event,input,gate,true,0,true,verify,buffer,or,event,input,gate,true,1,true,verify,buffer,or,event,input,gate,true,0,true,verify,buffer,or,event,input,gate,false,1,true,verify,buffer,or,event,input,gate,false,0,false,assert,true,input,gate,is,finished
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1537385496;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = createInputGate()___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0])___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1])___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0])__		inputGate.notifyChannelNonEmpty(inputChannels[1])___		verifyBufferOrEvent(inputGate, true, 0, true)__		verifyBufferOrEvent(inputGate, true, 1, true)__		verifyBufferOrEvent(inputGate, true, 0, true)__		verifyBufferOrEvent(inputGate, false, 1, true)__		verifyBufferOrEvent(inputGate, false, 0, false)___		_		assertTrue(inputGate.isFinished())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,create,input,gate,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,input,gate,notify,channel,non,empty,input,channels,1,verify,buffer,or,event,input,gate,true,0,true,verify,buffer,or,event,input,gate,true,1,true,verify,buffer,or,event,input,gate,true,0,true,verify,buffer,or,event,input,gate,false,1,true,verify,buffer,or,event,input,gate,false,0,false,assert,true,input,gate,is,finished
SingleInputGateTest -> @Test(timeout = 120 * 1000) 	public void testBasicGetNextLogic() throws Exception;1540301035;Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return_value after receiving all end-of-partition events.;@Test(timeout = 120 * 1000)_	public void testBasicGetNextLogic() throws Exception {_		_		final SingleInputGate inputGate = createInputGate()___		final TestInputChannel[] inputChannels = new TestInputChannel[]{_			new TestInputChannel(inputGate, 0),_			new TestInputChannel(inputGate, 1)_		}___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[0])___		inputGate.setInputChannel(_			new IntermediateResultPartitionID(), inputChannels[1])___		_		inputChannels[0].readBuffer()__		inputChannels[0].readBuffer()__		inputChannels[1].readBuffer()__		inputChannels[1].readEndOfPartitionEvent()__		inputChannels[0].readEndOfPartitionEvent()___		inputGate.notifyChannelNonEmpty(inputChannels[0])__		inputGate.notifyChannelNonEmpty(inputChannels[1])___		verifyBufferOrEvent(inputGate, true, 0, true)__		verifyBufferOrEvent(inputGate, true, 1, true)__		verifyBufferOrEvent(inputGate, true, 0, true)__		verifyBufferOrEvent(inputGate, false, 1, true)__		verifyBufferOrEvent(inputGate, false, 0, false)___		_		assertTrue(inputGate.isFinished())__	};tests,basic,correctness,of,buffer,or,event,interleaving,and,correct,code,null,code,return,value,after,receiving,all,end,of,partition,events;test,timeout,120,1000,public,void,test,basic,get,next,logic,throws,exception,final,single,input,gate,input,gate,create,input,gate,final,test,input,channel,input,channels,new,test,input,channel,new,test,input,channel,input,gate,0,new,test,input,channel,input,gate,1,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,0,input,gate,set,input,channel,new,intermediate,result,partition,id,input,channels,1,input,channels,0,read,buffer,input,channels,0,read,buffer,input,channels,1,read,buffer,input,channels,1,read,end,of,partition,event,input,channels,0,read,end,of,partition,event,input,gate,notify,channel,non,empty,input,channels,0,input,gate,notify,channel,non,empty,input,channels,1,verify,buffer,or,event,input,gate,true,0,true,verify,buffer,or,event,input,gate,true,1,true,verify,buffer,or,event,input,gate,true,0,true,verify,buffer,or,event,input,gate,false,1,true,verify,buffer,or,event,input,gate,false,0,false,assert,true,input,gate,is,finished
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1507647199;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_CREDIT_BASED,_			0,_			1,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		inputGate.setInputChannel(new IntermediateResultPartitionID(), remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		_		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,remote,input,channel,remote,mock,remote,input,channel,class,input,gate,set,input,channel,new,intermediate,result,partition,id,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1513102156;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_CREDIT_BASED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		inputGate.setInputChannel(new IntermediateResultPartitionID(), remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		_		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,remote,input,channel,remote,mock,remote,input,channel,class,input,gate,set,input,channel,new,intermediate,result,partition,id,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1515510677;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_CREDIT_BASED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		inputGate.setInputChannel(new IntermediateResultPartitionID(), remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		_		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,remote,input,channel,remote,mock,remote,input,channel,class,input,gate,set,input,channel,new,intermediate,result,partition,id,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1516285456;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_CREDIT_BASED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		inputGate.setInputChannel(new IntermediateResultPartitionID(), remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		_		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,remote,input,channel,remote,mock,remote,input,channel,class,input,gate,set,input,channel,new,intermediate,result,partition,id,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1516285456;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_CREDIT_BASED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		inputGate.setInputChannel(new IntermediateResultPartitionID(), remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		_		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,remote,input,channel,remote,mock,remote,input,channel,class,input,gate,set,input,channel,new,intermediate,result,partition,id,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1518785736;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_BOUNDED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		inputGate.setInputChannel(new IntermediateResultPartitionID(), remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		_		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,remote,input,channel,remote,mock,remote,input,channel,class,input,gate,set,input,channel,new,intermediate,result,partition,id,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1519039300;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_BOUNDED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		inputGate.setInputChannel(new IntermediateResultPartitionID(), remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		_		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,remote,input,channel,remote,mock,remote,input,channel,class,input,gate,set,input,channel,new,intermediate,result,partition,id,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1519039301;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_BOUNDED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		inputGate.setInputChannel(new IntermediateResultPartitionID(), remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		_		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,remote,input,channel,remote,mock,remote,input,channel,class,input,gate,set,input,channel,new,intermediate,result,partition,id,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1519834372;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_BOUNDED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		inputGate.setInputChannel(new IntermediateResultPartitionID(), remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		_		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,remote,input,channel,remote,mock,remote,input,channel,class,input,gate,set,input,channel,new,intermediate,result,partition,id,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1519834372;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_BOUNDED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		inputGate.setInputChannel(new IntermediateResultPartitionID(), remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		_		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,remote,input,channel,remote,mock,remote,input,channel,class,input,gate,set,input,channel,new,intermediate,result,partition,id,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1525116906;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(1, ResultPartitionType.PIPELINED_BOUNDED)__		int buffersPerChannel = 2__		int extraNetworkBuffersPerGate = 8__		final NetworkEnvironment network = createNetworkEnvironment(buffersPerChannel,_			extraNetworkBuffersPerGate, 0, 0)___		try {_			final ResultPartitionID resultPartitionId = new ResultPartitionID()__			final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__			addRemoteInputChannel(network, inputGate, connectionId, resultPartitionId, 0)___			network.setupInputGate(inputGate)___			NetworkBufferPool bufferPool = network.getNetworkBufferPool()__			if (enableCreditBasedFlowControl) {_				verify(bufferPool,_					times(1)).requestMemorySegments(buffersPerChannel)__				RemoteInputChannel remote = (RemoteInputChannel) inputGate.getInputChannels()_					.get(resultPartitionId.getPartitionId())__				_				assertEquals(buffersPerChannel, remote.getNumberOfAvailableBuffers())___				assertEquals(bufferPool.getTotalNumberOfMemorySegments() - buffersPerChannel,_					bufferPool.getNumberOfAvailableMemorySegments())__				_				assertEquals(extraNetworkBuffersPerGate, bufferPool.countBuffers())__			} else {_				assertEquals(buffersPerChannel + extraNetworkBuffersPerGate, bufferPool.countBuffers())__			}_		} finally {_			inputGate.releaseAllResources()__			network.shutdown()__		}_	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,1,result,partition,type,int,buffers,per,channel,2,int,extra,network,buffers,per,gate,8,final,network,environment,network,create,network,environment,buffers,per,channel,extra,network,buffers,per,gate,0,0,try,final,result,partition,id,result,partition,id,new,result,partition,id,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,add,remote,input,channel,network,input,gate,connection,id,result,partition,id,0,network,setup,input,gate,input,gate,network,buffer,pool,buffer,pool,network,get,network,buffer,pool,if,enable,credit,based,flow,control,verify,buffer,pool,times,1,request,memory,segments,buffers,per,channel,remote,input,channel,remote,remote,input,channel,input,gate,get,input,channels,get,result,partition,id,get,partition,id,assert,equals,buffers,per,channel,remote,get,number,of,available,buffers,assert,equals,buffer,pool,get,total,number,of,memory,segments,buffers,per,channel,buffer,pool,get,number,of,available,memory,segments,assert,equals,extra,network,buffers,per,gate,buffer,pool,count,buffers,else,assert,equals,buffers,per,channel,extra,network,buffers,per,gate,buffer,pool,count,buffers,finally,input,gate,release,all,resources,network,shutdown
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1531742482;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(1, ResultPartitionType.PIPELINED_BOUNDED)__		int buffersPerChannel = 2__		int extraNetworkBuffersPerGate = 8__		final NetworkEnvironment network = createNetworkEnvironment(buffersPerChannel,_			extraNetworkBuffersPerGate, 0, 0)___		try {_			final ResultPartitionID resultPartitionId = new ResultPartitionID()__			final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__			addRemoteInputChannel(network, inputGate, connectionId, resultPartitionId, 0)___			network.setupInputGate(inputGate)___			NetworkBufferPool bufferPool = network.getNetworkBufferPool()__			if (enableCreditBasedFlowControl) {_				verify(bufferPool,_					times(1)).requestMemorySegments(buffersPerChannel)__				RemoteInputChannel remote = (RemoteInputChannel) inputGate.getInputChannels()_					.get(resultPartitionId.getPartitionId())__				_				assertEquals(buffersPerChannel, remote.getNumberOfAvailableBuffers())___				assertEquals(bufferPool.getTotalNumberOfMemorySegments() - buffersPerChannel,_					bufferPool.getNumberOfAvailableMemorySegments())__				_				assertEquals(extraNetworkBuffersPerGate, bufferPool.countBuffers())__			} else {_				assertEquals(buffersPerChannel + extraNetworkBuffersPerGate, bufferPool.countBuffers())__			}_		} finally {_			inputGate.releaseAllResources()__			network.shutdown()__		}_	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,1,result,partition,type,int,buffers,per,channel,2,int,extra,network,buffers,per,gate,8,final,network,environment,network,create,network,environment,buffers,per,channel,extra,network,buffers,per,gate,0,0,try,final,result,partition,id,result,partition,id,new,result,partition,id,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,add,remote,input,channel,network,input,gate,connection,id,result,partition,id,0,network,setup,input,gate,input,gate,network,buffer,pool,buffer,pool,network,get,network,buffer,pool,if,enable,credit,based,flow,control,verify,buffer,pool,times,1,request,memory,segments,buffers,per,channel,remote,input,channel,remote,remote,input,channel,input,gate,get,input,channels,get,result,partition,id,get,partition,id,assert,equals,buffers,per,channel,remote,get,number,of,available,buffers,assert,equals,buffer,pool,get,total,number,of,memory,segments,buffers,per,channel,buffer,pool,get,number,of,available,memory,segments,assert,equals,extra,network,buffers,per,gate,buffer,pool,count,buffers,else,assert,equals,buffers,per,channel,extra,network,buffers,per,gate,buffer,pool,count,buffers,finally,input,gate,release,all,resources,network,shutdown
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1537385496;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(1, ResultPartitionType.PIPELINED_BOUNDED)__		int buffersPerChannel = 2__		int extraNetworkBuffersPerGate = 8__		final NetworkEnvironment network = createNetworkEnvironment(buffersPerChannel,_			extraNetworkBuffersPerGate, 0, 0)___		try {_			final ResultPartitionID resultPartitionId = new ResultPartitionID()__			final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__			addRemoteInputChannel(network, inputGate, connectionId, resultPartitionId, 0)___			network.setupInputGate(inputGate)___			NetworkBufferPool bufferPool = network.getNetworkBufferPool()__			if (enableCreditBasedFlowControl) {_				verify(bufferPool,_					times(1)).requestMemorySegments(buffersPerChannel)__				RemoteInputChannel remote = (RemoteInputChannel) inputGate.getInputChannels()_					.get(resultPartitionId.getPartitionId())__				_				assertEquals(buffersPerChannel, remote.getNumberOfAvailableBuffers())___				assertEquals(bufferPool.getTotalNumberOfMemorySegments() - buffersPerChannel,_					bufferPool.getNumberOfAvailableMemorySegments())__				_				assertEquals(extraNetworkBuffersPerGate, bufferPool.countBuffers())__			} else {_				assertEquals(buffersPerChannel + extraNetworkBuffersPerGate, bufferPool.countBuffers())__			}_		} finally {_			inputGate.releaseAllResources()__			network.shutdown()__		}_	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,1,result,partition,type,int,buffers,per,channel,2,int,extra,network,buffers,per,gate,8,final,network,environment,network,create,network,environment,buffers,per,channel,extra,network,buffers,per,gate,0,0,try,final,result,partition,id,result,partition,id,new,result,partition,id,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,add,remote,input,channel,network,input,gate,connection,id,result,partition,id,0,network,setup,input,gate,input,gate,network,buffer,pool,buffer,pool,network,get,network,buffer,pool,if,enable,credit,based,flow,control,verify,buffer,pool,times,1,request,memory,segments,buffers,per,channel,remote,input,channel,remote,remote,input,channel,input,gate,get,input,channels,get,result,partition,id,get,partition,id,assert,equals,buffers,per,channel,remote,get,number,of,available,buffers,assert,equals,buffer,pool,get,total,number,of,memory,segments,buffers,per,channel,buffer,pool,get,number,of,available,memory,segments,assert,equals,extra,network,buffers,per,gate,buffer,pool,count,buffers,else,assert,equals,buffers,per,channel,extra,network,buffers,per,gate,buffer,pool,count,buffers,finally,input,gate,release,all,resources,network,shutdown
SingleInputGateTest -> @Test 	public void testRequestBuffersWithRemoteInputChannel() throws Exception;1540301035;Tests that input gate requests and assigns network buffers for remote input channel.;@Test_	public void testRequestBuffersWithRemoteInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(1, ResultPartitionType.PIPELINED_BOUNDED)__		int buffersPerChannel = 2__		int extraNetworkBuffersPerGate = 8__		final NetworkEnvironment network = new NetworkEnvironment(_			100, 32, 0, 0, buffersPerChannel, extraNetworkBuffersPerGate, enableCreditBasedFlowControl)___		try {_			final ResultPartitionID resultPartitionId = new ResultPartitionID()__			final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__			addRemoteInputChannel(network, inputGate, connectionId, resultPartitionId, 0)___			network.setupInputGate(inputGate)___			NetworkBufferPool bufferPool = network.getNetworkBufferPool()__			if (enableCreditBasedFlowControl) {_				RemoteInputChannel remote = (RemoteInputChannel) inputGate.getInputChannels()_					.get(resultPartitionId.getPartitionId())__				_				assertEquals(buffersPerChannel, remote.getNumberOfAvailableBuffers())___				assertEquals(bufferPool.getTotalNumberOfMemorySegments() - buffersPerChannel,_					bufferPool.getNumberOfAvailableMemorySegments())__				_				assertEquals(extraNetworkBuffersPerGate, bufferPool.countBuffers())__			} else {_				assertEquals(buffersPerChannel + extraNetworkBuffersPerGate, bufferPool.countBuffers())__			}_		} finally {_			inputGate.releaseAllResources()__			network.shutdown()__		}_	};tests,that,input,gate,requests,and,assigns,network,buffers,for,remote,input,channel;test,public,void,test,request,buffers,with,remote,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,1,result,partition,type,int,buffers,per,channel,2,int,extra,network,buffers,per,gate,8,final,network,environment,network,new,network,environment,100,32,0,0,buffers,per,channel,extra,network,buffers,per,gate,enable,credit,based,flow,control,try,final,result,partition,id,result,partition,id,new,result,partition,id,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,add,remote,input,channel,network,input,gate,connection,id,result,partition,id,0,network,setup,input,gate,input,gate,network,buffer,pool,buffer,pool,network,get,network,buffer,pool,if,enable,credit,based,flow,control,remote,input,channel,remote,remote,input,channel,input,gate,get,input,channels,get,result,partition,id,get,partition,id,assert,equals,buffers,per,channel,remote,get,number,of,available,buffers,assert,equals,buffer,pool,get,total,number,of,memory,segments,buffers,per,channel,buffer,pool,get,number,of,available,memory,segments,assert,equals,extra,network,buffers,per,gate,buffer,pool,count,buffers,else,assert,equals,buffers,per,channel,extra,network,buffers,per,gate,buffer,pool,count,buffers,finally,input,gate,release,all,resources,network,shutdown
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1453902313;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_				"t1",_				new JobID(),_				new ExecutionAttemptID(),_				new IntermediateDataSetID(),_				0,_				1,_				mock(PartitionStateChecker.class))___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_				inputGate,_				0,_				new ResultPartitionID(),_				partitionManager,_				new TaskEventDispatcher(),_				new LocalConnectionManager(),_				new Tuple2<>(0, 0))___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				unknown.partitionId,_				ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_				any(ResultPartitionID.class), anyInt(), any(BufferProvider.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,partition,state,checker,class,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,new,tuple2,0,0,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1459798010;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_				"t1",_				new JobID(),_				new ExecutionAttemptID(),_				new IntermediateDataSetID(),_				0,_				1,_				mock(PartitionStateChecker.class))___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_				inputGate,_				0,_				new ResultPartitionID(),_				partitionManager,_				new TaskEventDispatcher(),_				new LocalConnectionManager(),_				new Tuple2<>(0, 0))___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				unknown.partitionId,_				ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_				any(ResultPartitionID.class), anyInt(), any(BufferProvider.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,partition,state,checker,class,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,new,tuple2,0,0,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1466072697;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_				"t1",_				new JobID(),_				new ExecutionAttemptID(),_				new IntermediateDataSetID(),_				0,_				1,_				mock(PartitionStateChecker.class), new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_				inputGate,_				0,_				new ResultPartitionID(),_				partitionManager,_				new TaskEventDispatcher(),_				new LocalConnectionManager(),_				new Tuple2<Integer, Integer>(0, 0), new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				unknown.partitionId,_				ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_				any(ResultPartitionID.class), anyInt(), any(BufferProvider.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,partition,state,checker,class,new,unregistered,task,metrics,group,dummy,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,new,tuple2,integer,integer,0,0,new,unregistered,task,metrics,group,dummy,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1472821521;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_				"t1",_				new JobID(),_				new ExecutionAttemptID(),_				new IntermediateDataSetID(),_				0,_				1,_				mock(PartitionStateChecker.class), new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0,_			0,_			new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				unknown.partitionId,_				ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_				any(ResultPartitionID.class), anyInt(), any(BufferProvider.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,partition,state,checker,class,new,unregistered,task,metrics,group,dummy,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1475219249;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new ExecutionAttemptID(),_			new IntermediateDataSetID(),_			0,_			1,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0,_			0,_			new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				unknown.partitionId,_				ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_				any(ResultPartitionID.class), anyInt(), any(BufferProvider.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1477389806;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new ExecutionAttemptID(),_			new IntermediateDataSetID(),_			0,_			1,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0,_			0,_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				unknown.partitionId,_				ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_				any(ResultPartitionID.class), anyInt(), any(BufferProvider.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1478853699;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new ExecutionAttemptID(),_			new IntermediateDataSetID(),_			0,_			1,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0,_			0,_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				unknown.partitionId,_				ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_				any(ResultPartitionID.class), anyInt(), any(BufferProvider.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1480624969;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new ExecutionAttemptID(),_			new IntermediateDataSetID(),_			0,_			1,_			mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferProvider.class), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1481560756;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			0,_			1,_			mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferProvider.class), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1489149058;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferProvider.class), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1493724918;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1507647199;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class), new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1513102156;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class), UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1515510677;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class), UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1516285456;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class), UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1516285456;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class), UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1518785736;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class), UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1519039300;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class), UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1519039301;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class), UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1519834372;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = createInputGate(1)___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,create,input,gate,1,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1519834372;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = createInputGate(1)___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,create,input,gate,1,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1525116906;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = createInputGate(1)___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,create,input,gate,1,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1531742482;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = createInputGate(1)___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,create,input,gate,1,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1537385496;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = createInputGate(1)___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,create,input,gate,1,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateChannelBeforeRequest() throws Exception;1540301035;Tests that an update channel does not trigger a partition request before the UDF has_requested any partitions. Otherwise, this can lead to races when registering a listener at_the gate (e.g. in UnionInputGate), which can result in missed buffer notifications at the_listener.;@Test_	public void testUpdateChannelBeforeRequest() throws Exception {_		SingleInputGate inputGate = createInputGate(1)___		ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			partitionManager,_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			unknown.partitionId,_			ResultPartitionLocation.createLocal()))___		verify(partitionManager, never()).createSubpartitionView(_			any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))__	};tests,that,an,update,channel,does,not,trigger,a,partition,request,before,the,udf,has,requested,any,partitions,otherwise,this,can,lead,to,races,when,registering,a,listener,at,the,gate,e,g,in,union,input,gate,which,can,result,in,missed,buffer,notifications,at,the,listener;test,public,void,test,update,channel,before,request,throws,exception,single,input,gate,input,gate,create,input,gate,1,result,partition,manager,partition,manager,mock,result,partition,manager,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,input,gate,update,input,channel,new,input,channel,deployment,descriptor,unknown,partition,id,result,partition,location,create,local,verify,partition,manager,never,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class
SingleInputGateTest -> @Test 	public void testUpdateUnknownInputChannel() throws Exception;1525116906;Tests that input gate can successfully convert unknown input channels into local and remote_channels.;@Test_	public void testUpdateUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(2)__		int buffersPerChannel = 2__		final NetworkEnvironment network = createNetworkEnvironment(buffersPerChannel, 8, 0, 0)___		try {_			final ResultPartitionID localResultPartitionId = new ResultPartitionID()__			addUnknownInputChannel(network, inputGate, localResultPartitionId, 0)___			final ResultPartitionID remoteResultPartitionId = new ResultPartitionID()__			addUnknownInputChannel(network, inputGate, remoteResultPartitionId, 1)___			network.setupInputGate(inputGate)___			assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),_				is(instanceOf((UnknownInputChannel.class))))__			assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),_				is(instanceOf((UnknownInputChannel.class))))___			_			final ConnectionID remoteConnectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__			inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				remoteResultPartitionId,_				ResultPartitionLocation.createRemote(remoteConnectionId)))___			assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),_				is(instanceOf((RemoteInputChannel.class))))__			assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),_				is(instanceOf((UnknownInputChannel.class))))___			_			inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				localResultPartitionId,_				ResultPartitionLocation.createLocal()))___			assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),_				is(instanceOf((RemoteInputChannel.class))))__			assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),_				is(instanceOf((LocalInputChannel.class))))__		} finally {_			inputGate.releaseAllResources()__			network.shutdown()__		}_	};tests,that,input,gate,can,successfully,convert,unknown,input,channels,into,local,and,remote,channels;test,public,void,test,update,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,2,int,buffers,per,channel,2,final,network,environment,network,create,network,environment,buffers,per,channel,8,0,0,try,final,result,partition,id,local,result,partition,id,new,result,partition,id,add,unknown,input,channel,network,input,gate,local,result,partition,id,0,final,result,partition,id,remote,result,partition,id,new,result,partition,id,add,unknown,input,channel,network,input,gate,remote,result,partition,id,1,network,setup,input,gate,input,gate,assert,that,input,gate,get,input,channels,get,remote,result,partition,id,get,partition,id,is,instance,of,unknown,input,channel,class,assert,that,input,gate,get,input,channels,get,local,result,partition,id,get,partition,id,is,instance,of,unknown,input,channel,class,final,connection,id,remote,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,input,gate,update,input,channel,new,input,channel,deployment,descriptor,remote,result,partition,id,result,partition,location,create,remote,remote,connection,id,assert,that,input,gate,get,input,channels,get,remote,result,partition,id,get,partition,id,is,instance,of,remote,input,channel,class,assert,that,input,gate,get,input,channels,get,local,result,partition,id,get,partition,id,is,instance,of,unknown,input,channel,class,input,gate,update,input,channel,new,input,channel,deployment,descriptor,local,result,partition,id,result,partition,location,create,local,assert,that,input,gate,get,input,channels,get,remote,result,partition,id,get,partition,id,is,instance,of,remote,input,channel,class,assert,that,input,gate,get,input,channels,get,local,result,partition,id,get,partition,id,is,instance,of,local,input,channel,class,finally,input,gate,release,all,resources,network,shutdown
SingleInputGateTest -> @Test 	public void testUpdateUnknownInputChannel() throws Exception;1531742482;Tests that input gate can successfully convert unknown input channels into local and remote_channels.;@Test_	public void testUpdateUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(2)__		int buffersPerChannel = 2__		final NetworkEnvironment network = createNetworkEnvironment(buffersPerChannel, 8, 0, 0)___		try {_			final ResultPartitionID localResultPartitionId = new ResultPartitionID()__			addUnknownInputChannel(network, inputGate, localResultPartitionId, 0)___			final ResultPartitionID remoteResultPartitionId = new ResultPartitionID()__			addUnknownInputChannel(network, inputGate, remoteResultPartitionId, 1)___			network.setupInputGate(inputGate)___			assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),_				is(instanceOf((UnknownInputChannel.class))))__			assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),_				is(instanceOf((UnknownInputChannel.class))))___			_			final ConnectionID remoteConnectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__			inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				remoteResultPartitionId,_				ResultPartitionLocation.createRemote(remoteConnectionId)))___			assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),_				is(instanceOf((RemoteInputChannel.class))))__			assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),_				is(instanceOf((UnknownInputChannel.class))))___			_			inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				localResultPartitionId,_				ResultPartitionLocation.createLocal()))___			assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),_				is(instanceOf((RemoteInputChannel.class))))__			assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),_				is(instanceOf((LocalInputChannel.class))))__		} finally {_			inputGate.releaseAllResources()__			network.shutdown()__		}_	};tests,that,input,gate,can,successfully,convert,unknown,input,channels,into,local,and,remote,channels;test,public,void,test,update,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,2,int,buffers,per,channel,2,final,network,environment,network,create,network,environment,buffers,per,channel,8,0,0,try,final,result,partition,id,local,result,partition,id,new,result,partition,id,add,unknown,input,channel,network,input,gate,local,result,partition,id,0,final,result,partition,id,remote,result,partition,id,new,result,partition,id,add,unknown,input,channel,network,input,gate,remote,result,partition,id,1,network,setup,input,gate,input,gate,assert,that,input,gate,get,input,channels,get,remote,result,partition,id,get,partition,id,is,instance,of,unknown,input,channel,class,assert,that,input,gate,get,input,channels,get,local,result,partition,id,get,partition,id,is,instance,of,unknown,input,channel,class,final,connection,id,remote,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,input,gate,update,input,channel,new,input,channel,deployment,descriptor,remote,result,partition,id,result,partition,location,create,remote,remote,connection,id,assert,that,input,gate,get,input,channels,get,remote,result,partition,id,get,partition,id,is,instance,of,remote,input,channel,class,assert,that,input,gate,get,input,channels,get,local,result,partition,id,get,partition,id,is,instance,of,unknown,input,channel,class,input,gate,update,input,channel,new,input,channel,deployment,descriptor,local,result,partition,id,result,partition,location,create,local,assert,that,input,gate,get,input,channels,get,remote,result,partition,id,get,partition,id,is,instance,of,remote,input,channel,class,assert,that,input,gate,get,input,channels,get,local,result,partition,id,get,partition,id,is,instance,of,local,input,channel,class,finally,input,gate,release,all,resources,network,shutdown
SingleInputGateTest -> @Test 	public void testUpdateUnknownInputChannel() throws Exception;1537385496;Tests that input gate can successfully convert unknown input channels into local and remote_channels.;@Test_	public void testUpdateUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(2)__		int buffersPerChannel = 2__		final NetworkEnvironment network = createNetworkEnvironment(buffersPerChannel, 8, 0, 0)___		try {_			final ResultPartitionID localResultPartitionId = new ResultPartitionID()__			addUnknownInputChannel(network, inputGate, localResultPartitionId, 0)___			final ResultPartitionID remoteResultPartitionId = new ResultPartitionID()__			addUnknownInputChannel(network, inputGate, remoteResultPartitionId, 1)___			network.setupInputGate(inputGate)___			assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),_				is(instanceOf((UnknownInputChannel.class))))__			assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),_				is(instanceOf((UnknownInputChannel.class))))___			_			final ConnectionID remoteConnectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__			inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				remoteResultPartitionId,_				ResultPartitionLocation.createRemote(remoteConnectionId)))___			assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),_				is(instanceOf((RemoteInputChannel.class))))__			assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),_				is(instanceOf((UnknownInputChannel.class))))___			_			inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				localResultPartitionId,_				ResultPartitionLocation.createLocal()))___			assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),_				is(instanceOf((RemoteInputChannel.class))))__			assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),_				is(instanceOf((LocalInputChannel.class))))__		} finally {_			inputGate.releaseAllResources()__			network.shutdown()__		}_	};tests,that,input,gate,can,successfully,convert,unknown,input,channels,into,local,and,remote,channels;test,public,void,test,update,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,2,int,buffers,per,channel,2,final,network,environment,network,create,network,environment,buffers,per,channel,8,0,0,try,final,result,partition,id,local,result,partition,id,new,result,partition,id,add,unknown,input,channel,network,input,gate,local,result,partition,id,0,final,result,partition,id,remote,result,partition,id,new,result,partition,id,add,unknown,input,channel,network,input,gate,remote,result,partition,id,1,network,setup,input,gate,input,gate,assert,that,input,gate,get,input,channels,get,remote,result,partition,id,get,partition,id,is,instance,of,unknown,input,channel,class,assert,that,input,gate,get,input,channels,get,local,result,partition,id,get,partition,id,is,instance,of,unknown,input,channel,class,final,connection,id,remote,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,input,gate,update,input,channel,new,input,channel,deployment,descriptor,remote,result,partition,id,result,partition,location,create,remote,remote,connection,id,assert,that,input,gate,get,input,channels,get,remote,result,partition,id,get,partition,id,is,instance,of,remote,input,channel,class,assert,that,input,gate,get,input,channels,get,local,result,partition,id,get,partition,id,is,instance,of,unknown,input,channel,class,input,gate,update,input,channel,new,input,channel,deployment,descriptor,local,result,partition,id,result,partition,location,create,local,assert,that,input,gate,get,input,channels,get,remote,result,partition,id,get,partition,id,is,instance,of,remote,input,channel,class,assert,that,input,gate,get,input,channels,get,local,result,partition,id,get,partition,id,is,instance,of,local,input,channel,class,finally,input,gate,release,all,resources,network,shutdown
SingleInputGateTest -> @Test 	public void testUpdateUnknownInputChannel() throws Exception;1540301035;Tests that input gate can successfully convert unknown input channels into local and remote_channels.;@Test_	public void testUpdateUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(2)__		int buffersPerChannel = 2__		final NetworkEnvironment network = new NetworkEnvironment(_			100, 32, 0, 0, buffersPerChannel, 8, enableCreditBasedFlowControl)___		try {_			final ResultPartitionID localResultPartitionId = new ResultPartitionID()__			addUnknownInputChannel(network, inputGate, localResultPartitionId, 0)___			final ResultPartitionID remoteResultPartitionId = new ResultPartitionID()__			addUnknownInputChannel(network, inputGate, remoteResultPartitionId, 1)___			network.setupInputGate(inputGate)___			assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),_				is(instanceOf((UnknownInputChannel.class))))__			assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),_				is(instanceOf((UnknownInputChannel.class))))___			_			final ConnectionID remoteConnectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__			inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				remoteResultPartitionId,_				ResultPartitionLocation.createRemote(remoteConnectionId)))___			assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),_				is(instanceOf((RemoteInputChannel.class))))__			assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),_				is(instanceOf((UnknownInputChannel.class))))___			_			inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				localResultPartitionId,_				ResultPartitionLocation.createLocal()))___			assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),_				is(instanceOf((RemoteInputChannel.class))))__			assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),_				is(instanceOf((LocalInputChannel.class))))__		} finally {_			inputGate.releaseAllResources()__			network.shutdown()__		}_	};tests,that,input,gate,can,successfully,convert,unknown,input,channels,into,local,and,remote,channels;test,public,void,test,update,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,2,int,buffers,per,channel,2,final,network,environment,network,new,network,environment,100,32,0,0,buffers,per,channel,8,enable,credit,based,flow,control,try,final,result,partition,id,local,result,partition,id,new,result,partition,id,add,unknown,input,channel,network,input,gate,local,result,partition,id,0,final,result,partition,id,remote,result,partition,id,new,result,partition,id,add,unknown,input,channel,network,input,gate,remote,result,partition,id,1,network,setup,input,gate,input,gate,assert,that,input,gate,get,input,channels,get,remote,result,partition,id,get,partition,id,is,instance,of,unknown,input,channel,class,assert,that,input,gate,get,input,channels,get,local,result,partition,id,get,partition,id,is,instance,of,unknown,input,channel,class,final,connection,id,remote,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,input,gate,update,input,channel,new,input,channel,deployment,descriptor,remote,result,partition,id,result,partition,location,create,remote,remote,connection,id,assert,that,input,gate,get,input,channels,get,remote,result,partition,id,get,partition,id,is,instance,of,remote,input,channel,class,assert,that,input,gate,get,input,channels,get,local,result,partition,id,get,partition,id,is,instance,of,unknown,input,channel,class,input,gate,update,input,channel,new,input,channel,deployment,descriptor,local,result,partition,id,result,partition,location,create,local,assert,that,input,gate,get,input,channels,get,remote,result,partition,id,get,partition,id,is,instance,of,remote,input,channel,class,assert,that,input,gate,get,input,channels,get,local,result,partition,id,get,partition,id,is,instance,of,local,input,channel,class,finally,input,gate,release,all,resources,network,shutdown
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1459798010;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_				"InputGate",_				new JobID(),_				new ExecutionAttemptID(),_				new IntermediateDataSetID(),_				0,_				1,_				mock(PartitionStateChecker.class))___		InputChannel unknown = new UnknownInputChannel(_				inputGate,_				0,_				new ResultPartitionID(),_				new ResultPartitionManager(),_				new TaskEventDispatcher(),_				new LocalConnectionManager(),_				new Tuple2<>(0, 0))___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer != null && asyncConsumer.isAlive()) {_				StackTraceElement[] stackTrace = asyncConsumer.getStackTrace()__				success = isInBlockingQueuePoll(stackTrace)__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(500)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,partition,state,checker,class,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,new,tuple2,0,0,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,null,async,consumer,is,alive,stack,trace,element,stack,trace,async,consumer,get,stack,trace,success,is,in,blocking,queue,poll,stack,trace,if,success,break,else,thread,sleep,500,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1466072697;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_				"InputGate",_				new JobID(),_				new ExecutionAttemptID(),_				new IntermediateDataSetID(),_				0,_				1,_				mock(PartitionStateChecker.class),_				new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_				inputGate,_				0,_				new ResultPartitionID(),_				new ResultPartitionManager(),_				new TaskEventDispatcher(),_				new LocalConnectionManager(),_				new Tuple2<Integer, Integer>(0, 0),_				new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer != null && asyncConsumer.isAlive()) {_				StackTraceElement[] stackTrace = asyncConsumer.getStackTrace()__				success = isInBlockingQueuePoll(stackTrace)__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(500)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,partition,state,checker,class,new,unregistered,task,metrics,group,dummy,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,new,tuple2,integer,integer,0,0,new,unregistered,task,metrics,group,dummy,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,null,async,consumer,is,alive,stack,trace,element,stack,trace,async,consumer,get,stack,trace,success,is,in,blocking,queue,poll,stack,trace,if,success,break,else,thread,sleep,500,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1472821521;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_				"InputGate",_				new JobID(),_				new ExecutionAttemptID(),_				new IntermediateDataSetID(),_				0,_				1,_				mock(PartitionStateChecker.class),_				new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0,_			0,_			new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer != null && asyncConsumer.isAlive()) {_				StackTraceElement[] stackTrace = asyncConsumer.getStackTrace()__				success = isInBlockingQueuePoll(stackTrace)__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(500)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,partition,state,checker,class,new,unregistered,task,metrics,group,dummy,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,null,async,consumer,is,alive,stack,trace,element,stack,trace,async,consumer,get,stack,trace,success,is,in,blocking,queue,poll,stack,trace,if,success,break,else,thread,sleep,500,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1475219249;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new ExecutionAttemptID(),_			new IntermediateDataSetID(),_			0,_			1,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0,_			0,_			new UnregisteredTaskMetricsGroup.DummyIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer != null && asyncConsumer.isAlive()) {_				StackTraceElement[] stackTrace = asyncConsumer.getStackTrace()__				success = isInBlockingQueuePoll(stackTrace)__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(500)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,null,async,consumer,is,alive,stack,trace,element,stack,trace,async,consumer,get,stack,trace,success,is,in,blocking,queue,poll,stack,trace,if,success,break,else,thread,sleep,500,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1477389806;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new ExecutionAttemptID(),_			new IntermediateDataSetID(),_			0,_			1,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0,_			0,_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer != null && asyncConsumer.isAlive()) {_				StackTraceElement[] stackTrace = asyncConsumer.getStackTrace()__				success = isInBlockingQueuePoll(stackTrace)__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(500)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,null,async,consumer,is,alive,stack,trace,element,stack,trace,async,consumer,get,stack,trace,success,is,in,blocking,queue,poll,stack,trace,if,success,break,else,thread,sleep,500,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1478853699;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new ExecutionAttemptID(),_			new IntermediateDataSetID(),_			0,_			1,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0,_			0,_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer != null && asyncConsumer.isAlive()) {_				StackTraceElement[] stackTrace = asyncConsumer.getStackTrace()__				success = isInBlockingQueuePoll(stackTrace)__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(500)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,null,async,consumer,is,alive,stack,trace,element,stack,trace,async,consumer,get,stack,trace,success,is,in,blocking,queue,poll,stack,trace,if,success,break,else,thread,sleep,500,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1480624969;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new ExecutionAttemptID(),_			new IntermediateDataSetID(),_			0,_			1,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,execution,attempt,id,new,intermediate,data,set,id,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1481560756;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			0,_			1,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1489149058;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1493724918;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1507647199;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,new,unregistered,task,metrics,group,dummy,task,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1513102156;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1515510677;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1516285456;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1516285456;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1518785736;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1519039300;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1519039301;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1519834372;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = createInputGate(1)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,create,input,gate,1,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1519834372;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = createInputGate(1)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,create,input,gate,1,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1525116906;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = createInputGate(1)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,create,input,gate,1,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1531742482;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = createInputGate(1)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,create,input,gate,1,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1537385496;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = createInputGate(1)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,create,input,gate,1,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> @Test 	public void testReleaseWhilePollingChannel() throws Exception;1540301035;Tests that the release of the input gate is noticed while polling the_channels for available data.;@Test_	public void testReleaseWhilePollingChannel() throws Exception {_		final AtomicReference<Exception> asyncException = new AtomicReference<>()___		_		final SingleInputGate inputGate = createInputGate(1)___		InputChannel unknown = new UnknownInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new LocalConnectionManager(),_			0, 0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(unknown.partitionId.getPartitionId(), unknown)___		_		Thread asyncConsumer = new Thread() {_			@Override_			public void run() {_				try {_					inputGate.getNextBufferOrEvent()__				} catch (Exception e) {_					asyncException.set(e)__				}_			}_		}__		asyncConsumer.start()___		_		boolean success = false__		for (int i = 0_ i < 50_ i++) {_			if (asyncConsumer.isAlive()) {_				success = asyncConsumer.getState() == Thread.State.WAITING__			}__			if (success) {_				break__			} else {_				_				Thread.sleep(100)__			}_		}__		_		assertTrue("Did not trigger blocking buffer request.", success)___		_		inputGate.releaseAllResources()___		_		_		_		asyncConsumer.join()___		assertNotNull(asyncException.get())__		assertEquals(IllegalStateException.class, asyncException.get().getClass())__	};tests,that,the,release,of,the,input,gate,is,noticed,while,polling,the,channels,for,available,data;test,public,void,test,release,while,polling,channel,throws,exception,final,atomic,reference,exception,async,exception,new,atomic,reference,final,single,input,gate,input,gate,create,input,gate,1,input,channel,unknown,new,unknown,input,channel,input,gate,0,new,result,partition,id,new,result,partition,manager,new,task,event,dispatcher,new,local,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,unknown,partition,id,get,partition,id,unknown,thread,async,consumer,new,thread,override,public,void,run,try,input,gate,get,next,buffer,or,event,catch,exception,e,async,exception,set,e,async,consumer,start,boolean,success,false,for,int,i,0,i,50,i,if,async,consumer,is,alive,success,async,consumer,get,state,thread,state,waiting,if,success,break,else,thread,sleep,100,assert,true,did,not,trigger,blocking,buffer,request,success,input,gate,release,all,resources,async,consumer,join,assert,not,null,async,exception,get,assert,equals,illegal,state,exception,class,async,exception,get,get,class
SingleInputGateTest -> private boolean isInBlockingQueuePoll(StackTraceElement[] stackTrace);1459798010;Returns whether the stack trace represents a Thread in a blocking queue_poll call.__@param stackTrace Stack trace of the Thread to check__@return Flag indicating whether the Thread is in a blocking queue poll_call.;private boolean isInBlockingQueuePoll(StackTraceElement[] stackTrace) {_		for (StackTraceElement elem : stackTrace) {_			if (elem.getMethodName().equals("poll") &&_					elem.getClassName().equals("java.util.concurrent.LinkedBlockingQueue")) {__				return true__			}_		}__		return false__	};returns,whether,the,stack,trace,represents,a,thread,in,a,blocking,queue,poll,call,param,stack,trace,stack,trace,of,the,thread,to,check,return,flag,indicating,whether,the,thread,is,in,a,blocking,queue,poll,call;private,boolean,is,in,blocking,queue,poll,stack,trace,element,stack,trace,for,stack,trace,element,elem,stack,trace,if,elem,get,method,name,equals,poll,elem,get,class,name,equals,java,util,concurrent,linked,blocking,queue,return,true,return,false
SingleInputGateTest -> private boolean isInBlockingQueuePoll(StackTraceElement[] stackTrace);1466072697;Returns whether the stack trace represents a Thread in a blocking queue_poll call.__@param stackTrace Stack trace of the Thread to check__@return Flag indicating whether the Thread is in a blocking queue poll_call.;private boolean isInBlockingQueuePoll(StackTraceElement[] stackTrace) {_		for (StackTraceElement elem : stackTrace) {_			if (elem.getMethodName().equals("poll") &&_					elem.getClassName().equals("java.util.concurrent.LinkedBlockingQueue")) {__				return true__			}_		}__		return false__	};returns,whether,the,stack,trace,represents,a,thread,in,a,blocking,queue,poll,call,param,stack,trace,stack,trace,of,the,thread,to,check,return,flag,indicating,whether,the,thread,is,in,a,blocking,queue,poll,call;private,boolean,is,in,blocking,queue,poll,stack,trace,element,stack,trace,for,stack,trace,element,elem,stack,trace,if,elem,get,method,name,equals,poll,elem,get,class,name,equals,java,util,concurrent,linked,blocking,queue,return,true,return,false
SingleInputGateTest -> private boolean isInBlockingQueuePoll(StackTraceElement[] stackTrace);1472821521;Returns whether the stack trace represents a Thread in a blocking queue_poll call.__@param stackTrace Stack trace of the Thread to check__@return Flag indicating whether the Thread is in a blocking queue poll_call.;private boolean isInBlockingQueuePoll(StackTraceElement[] stackTrace) {_		for (StackTraceElement elem : stackTrace) {_			if (elem.getMethodName().equals("poll") &&_					elem.getClassName().equals("java.util.concurrent.LinkedBlockingQueue")) {__				return true__			}_		}__		return false__	};returns,whether,the,stack,trace,represents,a,thread,in,a,blocking,queue,poll,call,param,stack,trace,stack,trace,of,the,thread,to,check,return,flag,indicating,whether,the,thread,is,in,a,blocking,queue,poll,call;private,boolean,is,in,blocking,queue,poll,stack,trace,element,stack,trace,for,stack,trace,element,elem,stack,trace,if,elem,get,method,name,equals,poll,elem,get,class,name,equals,java,util,concurrent,linked,blocking,queue,return,true,return,false
SingleInputGateTest -> private boolean isInBlockingQueuePoll(StackTraceElement[] stackTrace);1475219249;Returns whether the stack trace represents a Thread in a blocking queue_poll call.__@param stackTrace Stack trace of the Thread to check__@return Flag indicating whether the Thread is in a blocking queue poll_call.;private boolean isInBlockingQueuePoll(StackTraceElement[] stackTrace) {_		for (StackTraceElement elem : stackTrace) {_			if (elem.getMethodName().equals("poll") &&_					elem.getClassName().equals("java.util.concurrent.LinkedBlockingQueue")) {__				return true__			}_		}__		return false__	};returns,whether,the,stack,trace,represents,a,thread,in,a,blocking,queue,poll,call,param,stack,trace,stack,trace,of,the,thread,to,check,return,flag,indicating,whether,the,thread,is,in,a,blocking,queue,poll,call;private,boolean,is,in,blocking,queue,poll,stack,trace,element,stack,trace,for,stack,trace,element,elem,stack,trace,if,elem,get,method,name,equals,poll,elem,get,class,name,equals,java,util,concurrent,linked,blocking,queue,return,true,return,false
SingleInputGateTest -> private boolean isInBlockingQueuePoll(StackTraceElement[] stackTrace);1477389806;Returns whether the stack trace represents a Thread in a blocking queue_poll call.__@param stackTrace Stack trace of the Thread to check__@return Flag indicating whether the Thread is in a blocking queue poll_call.;private boolean isInBlockingQueuePoll(StackTraceElement[] stackTrace) {_		for (StackTraceElement elem : stackTrace) {_			if (elem.getMethodName().equals("poll") &&_					elem.getClassName().equals("java.util.concurrent.LinkedBlockingQueue")) {__				return true__			}_		}__		return false__	};returns,whether,the,stack,trace,represents,a,thread,in,a,blocking,queue,poll,call,param,stack,trace,stack,trace,of,the,thread,to,check,return,flag,indicating,whether,the,thread,is,in,a,blocking,queue,poll,call;private,boolean,is,in,blocking,queue,poll,stack,trace,element,stack,trace,for,stack,trace,element,elem,stack,trace,if,elem,get,method,name,equals,poll,elem,get,class,name,equals,java,util,concurrent,linked,blocking,queue,return,true,return,false
SingleInputGateTest -> private boolean isInBlockingQueuePoll(StackTraceElement[] stackTrace);1478853699;Returns whether the stack trace represents a Thread in a blocking queue_poll call.__@param stackTrace Stack trace of the Thread to check__@return Flag indicating whether the Thread is in a blocking queue poll_call.;private boolean isInBlockingQueuePoll(StackTraceElement[] stackTrace) {_		for (StackTraceElement elem : stackTrace) {_			if (elem.getMethodName().equals("poll") &&_					elem.getClassName().equals("java.util.concurrent.LinkedBlockingQueue")) {__				return true__			}_		}__		return false__	};returns,whether,the,stack,trace,represents,a,thread,in,a,blocking,queue,poll,call,param,stack,trace,stack,trace,of,the,thread,to,check,return,flag,indicating,whether,the,thread,is,in,a,blocking,queue,poll,call;private,boolean,is,in,blocking,queue,poll,stack,trace,element,stack,trace,for,stack,trace,element,elem,stack,trace,if,elem,get,method,name,equals,poll,elem,get,class,name,equals,java,util,concurrent,linked,blocking,queue,return,true,return,false
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1507647199;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_CREDIT_BASED,_			0,_			1,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		UnknownInputChannel unknown = mock(UnknownInputChannel.class)__		final ResultPartitionID resultPartitionId = new ResultPartitionID()__		inputGate.setInputChannel(resultPartitionId.getPartitionId(), unknown)___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__		when(unknown.toRemoteInputChannel(connectionId)).thenReturn(remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			resultPartitionId,_			ResultPartitionLocation.createRemote(connectionId)))___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,unknown,input,channel,unknown,mock,unknown,input,channel,class,final,result,partition,id,result,partition,id,new,result,partition,id,input,gate,set,input,channel,result,partition,id,get,partition,id,unknown,remote,input,channel,remote,mock,remote,input,channel,class,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,when,unknown,to,remote,input,channel,connection,id,then,return,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1513102156;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_CREDIT_BASED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		UnknownInputChannel unknown = mock(UnknownInputChannel.class)__		final ResultPartitionID resultPartitionId = new ResultPartitionID()__		inputGate.setInputChannel(resultPartitionId.getPartitionId(), unknown)___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__		when(unknown.toRemoteInputChannel(connectionId)).thenReturn(remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			resultPartitionId,_			ResultPartitionLocation.createRemote(connectionId)))___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,unknown,input,channel,unknown,mock,unknown,input,channel,class,final,result,partition,id,result,partition,id,new,result,partition,id,input,gate,set,input,channel,result,partition,id,get,partition,id,unknown,remote,input,channel,remote,mock,remote,input,channel,class,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,when,unknown,to,remote,input,channel,connection,id,then,return,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1515510677;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_CREDIT_BASED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		UnknownInputChannel unknown = mock(UnknownInputChannel.class)__		final ResultPartitionID resultPartitionId = new ResultPartitionID()__		inputGate.setInputChannel(resultPartitionId.getPartitionId(), unknown)___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__		when(unknown.toRemoteInputChannel(connectionId)).thenReturn(remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			resultPartitionId,_			ResultPartitionLocation.createRemote(connectionId)))___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,unknown,input,channel,unknown,mock,unknown,input,channel,class,final,result,partition,id,result,partition,id,new,result,partition,id,input,gate,set,input,channel,result,partition,id,get,partition,id,unknown,remote,input,channel,remote,mock,remote,input,channel,class,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,when,unknown,to,remote,input,channel,connection,id,then,return,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1516285456;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_CREDIT_BASED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		UnknownInputChannel unknown = mock(UnknownInputChannel.class)__		final ResultPartitionID resultPartitionId = new ResultPartitionID()__		inputGate.setInputChannel(resultPartitionId.getPartitionId(), unknown)___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__		when(unknown.toRemoteInputChannel(connectionId)).thenReturn(remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			resultPartitionId,_			ResultPartitionLocation.createRemote(connectionId)))___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,unknown,input,channel,unknown,mock,unknown,input,channel,class,final,result,partition,id,result,partition,id,new,result,partition,id,input,gate,set,input,channel,result,partition,id,get,partition,id,unknown,remote,input,channel,remote,mock,remote,input,channel,class,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,when,unknown,to,remote,input,channel,connection,id,then,return,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1516285456;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_CREDIT_BASED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		UnknownInputChannel unknown = mock(UnknownInputChannel.class)__		final ResultPartitionID resultPartitionId = new ResultPartitionID()__		inputGate.setInputChannel(resultPartitionId.getPartitionId(), unknown)___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__		when(unknown.toRemoteInputChannel(connectionId)).thenReturn(remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			resultPartitionId,_			ResultPartitionLocation.createRemote(connectionId)))___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,unknown,input,channel,unknown,mock,unknown,input,channel,class,final,result,partition,id,result,partition,id,new,result,partition,id,input,gate,set,input,channel,result,partition,id,get,partition,id,unknown,remote,input,channel,remote,mock,remote,input,channel,class,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,when,unknown,to,remote,input,channel,connection,id,then,return,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1518785736;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_BOUNDED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		UnknownInputChannel unknown = mock(UnknownInputChannel.class)__		final ResultPartitionID resultPartitionId = new ResultPartitionID()__		inputGate.setInputChannel(resultPartitionId.getPartitionId(), unknown)___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__		when(unknown.toRemoteInputChannel(connectionId)).thenReturn(remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			resultPartitionId,_			ResultPartitionLocation.createRemote(connectionId)))___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,unknown,input,channel,unknown,mock,unknown,input,channel,class,final,result,partition,id,result,partition,id,new,result,partition,id,input,gate,set,input,channel,result,partition,id,get,partition,id,unknown,remote,input,channel,remote,mock,remote,input,channel,class,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,when,unknown,to,remote,input,channel,connection,id,then,return,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1519039300;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_BOUNDED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		UnknownInputChannel unknown = mock(UnknownInputChannel.class)__		final ResultPartitionID resultPartitionId = new ResultPartitionID()__		inputGate.setInputChannel(resultPartitionId.getPartitionId(), unknown)___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__		when(unknown.toRemoteInputChannel(connectionId)).thenReturn(remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			resultPartitionId,_			ResultPartitionLocation.createRemote(connectionId)))___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,unknown,input,channel,unknown,mock,unknown,input,channel,class,final,result,partition,id,result,partition,id,new,result,partition,id,input,gate,set,input,channel,result,partition,id,get,partition,id,unknown,remote,input,channel,remote,mock,remote,input,channel,class,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,when,unknown,to,remote,input,channel,connection,id,then,return,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1519039301;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = new SingleInputGate(_			"t1",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_BOUNDED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		UnknownInputChannel unknown = mock(UnknownInputChannel.class)__		final ResultPartitionID resultPartitionId = new ResultPartitionID()__		inputGate.setInputChannel(resultPartitionId.getPartitionId(), unknown)___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__		when(unknown.toRemoteInputChannel(connectionId)).thenReturn(remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			resultPartitionId,_			ResultPartitionLocation.createRemote(connectionId)))___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,new,single,input,gate,t1,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,unknown,input,channel,unknown,mock,unknown,input,channel,class,final,result,partition,id,result,partition,id,new,result,partition,id,input,gate,set,input,channel,result,partition,id,get,partition,id,unknown,remote,input,channel,remote,mock,remote,input,channel,class,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,when,unknown,to,remote,input,channel,connection,id,then,return,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1519834372;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(1)___		UnknownInputChannel unknown = mock(UnknownInputChannel.class)__		final ResultPartitionID resultPartitionId = new ResultPartitionID()__		inputGate.setInputChannel(resultPartitionId.getPartitionId(), unknown)___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__		when(unknown.toRemoteInputChannel(connectionId)).thenReturn(remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			resultPartitionId,_			ResultPartitionLocation.createRemote(connectionId)))___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,1,unknown,input,channel,unknown,mock,unknown,input,channel,class,final,result,partition,id,result,partition,id,new,result,partition,id,input,gate,set,input,channel,result,partition,id,get,partition,id,unknown,remote,input,channel,remote,mock,remote,input,channel,class,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,when,unknown,to,remote,input,channel,connection,id,then,return,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1519834372;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(1)___		UnknownInputChannel unknown = mock(UnknownInputChannel.class)__		final ResultPartitionID resultPartitionId = new ResultPartitionID()__		inputGate.setInputChannel(resultPartitionId.getPartitionId(), unknown)___		RemoteInputChannel remote = mock(RemoteInputChannel.class)__		final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__		when(unknown.toRemoteInputChannel(connectionId)).thenReturn(remote)___		final int buffersPerChannel = 2__		NetworkBufferPool network = mock(NetworkBufferPool.class)__		inputGate.assignExclusiveSegments(network, buffersPerChannel)___		_		inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_			resultPartitionId,_			ResultPartitionLocation.createRemote(connectionId)))___		verify(network, times(1)).requestMemorySegments(buffersPerChannel)__		verify(remote, times(1)).assignExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,1,unknown,input,channel,unknown,mock,unknown,input,channel,class,final,result,partition,id,result,partition,id,new,result,partition,id,input,gate,set,input,channel,result,partition,id,get,partition,id,unknown,remote,input,channel,remote,mock,remote,input,channel,class,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,when,unknown,to,remote,input,channel,connection,id,then,return,remote,final,int,buffers,per,channel,2,network,buffer,pool,network,mock,network,buffer,pool,class,input,gate,assign,exclusive,segments,network,buffers,per,channel,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,verify,network,times,1,request,memory,segments,buffers,per,channel,verify,remote,times,1,assign,exclusive,segments,any,list,of,memory,segment,class
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1525116906;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(1, ResultPartitionType.PIPELINED_BOUNDED)__		int buffersPerChannel = 2__		int extraNetworkBuffersPerGate = 8__		final NetworkEnvironment network = createNetworkEnvironment(buffersPerChannel, extraNetworkBuffersPerGate, 0, 0)___		try {_			final ResultPartitionID resultPartitionId = new ResultPartitionID()__			addUnknownInputChannel(network, inputGate, resultPartitionId, 0)___			network.setupInputGate(inputGate)__			NetworkBufferPool bufferPool = network.getNetworkBufferPool()___			if (enableCreditBasedFlowControl) {_				verify(bufferPool, times(0)).requestMemorySegments(buffersPerChannel)___				assertEquals(bufferPool.getTotalNumberOfMemorySegments(),_					bufferPool.getNumberOfAvailableMemorySegments())__				_				assertEquals(extraNetworkBuffersPerGate, bufferPool.countBuffers())__			} else {_				assertEquals(buffersPerChannel + extraNetworkBuffersPerGate, bufferPool.countBuffers())__			}__			_			final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__			inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				resultPartitionId,_				ResultPartitionLocation.createRemote(connectionId)))___			if (enableCreditBasedFlowControl) {_				verify(bufferPool,_					times(1)).requestMemorySegments(buffersPerChannel)__				RemoteInputChannel remote = (RemoteInputChannel) inputGate.getInputChannels()_					.get(resultPartitionId.getPartitionId())__				_				assertEquals(buffersPerChannel, remote.getNumberOfAvailableBuffers())___				assertEquals(bufferPool.getTotalNumberOfMemorySegments() - buffersPerChannel,_					bufferPool.getNumberOfAvailableMemorySegments())__				_				assertEquals(extraNetworkBuffersPerGate, bufferPool.countBuffers())__			} else {_				assertEquals(buffersPerChannel + extraNetworkBuffersPerGate, bufferPool.countBuffers())__			}_		} finally {_			inputGate.releaseAllResources()__			network.shutdown()__		}_	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,1,result,partition,type,int,buffers,per,channel,2,int,extra,network,buffers,per,gate,8,final,network,environment,network,create,network,environment,buffers,per,channel,extra,network,buffers,per,gate,0,0,try,final,result,partition,id,result,partition,id,new,result,partition,id,add,unknown,input,channel,network,input,gate,result,partition,id,0,network,setup,input,gate,input,gate,network,buffer,pool,buffer,pool,network,get,network,buffer,pool,if,enable,credit,based,flow,control,verify,buffer,pool,times,0,request,memory,segments,buffers,per,channel,assert,equals,buffer,pool,get,total,number,of,memory,segments,buffer,pool,get,number,of,available,memory,segments,assert,equals,extra,network,buffers,per,gate,buffer,pool,count,buffers,else,assert,equals,buffers,per,channel,extra,network,buffers,per,gate,buffer,pool,count,buffers,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,if,enable,credit,based,flow,control,verify,buffer,pool,times,1,request,memory,segments,buffers,per,channel,remote,input,channel,remote,remote,input,channel,input,gate,get,input,channels,get,result,partition,id,get,partition,id,assert,equals,buffers,per,channel,remote,get,number,of,available,buffers,assert,equals,buffer,pool,get,total,number,of,memory,segments,buffers,per,channel,buffer,pool,get,number,of,available,memory,segments,assert,equals,extra,network,buffers,per,gate,buffer,pool,count,buffers,else,assert,equals,buffers,per,channel,extra,network,buffers,per,gate,buffer,pool,count,buffers,finally,input,gate,release,all,resources,network,shutdown
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1531742482;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(1, ResultPartitionType.PIPELINED_BOUNDED)__		int buffersPerChannel = 2__		int extraNetworkBuffersPerGate = 8__		final NetworkEnvironment network = createNetworkEnvironment(buffersPerChannel, extraNetworkBuffersPerGate, 0, 0)___		try {_			final ResultPartitionID resultPartitionId = new ResultPartitionID()__			addUnknownInputChannel(network, inputGate, resultPartitionId, 0)___			network.setupInputGate(inputGate)__			NetworkBufferPool bufferPool = network.getNetworkBufferPool()___			if (enableCreditBasedFlowControl) {_				verify(bufferPool, times(0)).requestMemorySegments(buffersPerChannel)___				assertEquals(bufferPool.getTotalNumberOfMemorySegments(),_					bufferPool.getNumberOfAvailableMemorySegments())__				_				assertEquals(extraNetworkBuffersPerGate, bufferPool.countBuffers())__			} else {_				assertEquals(buffersPerChannel + extraNetworkBuffersPerGate, bufferPool.countBuffers())__			}__			_			final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__			inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				resultPartitionId,_				ResultPartitionLocation.createRemote(connectionId)))___			if (enableCreditBasedFlowControl) {_				verify(bufferPool,_					times(1)).requestMemorySegments(buffersPerChannel)__				RemoteInputChannel remote = (RemoteInputChannel) inputGate.getInputChannels()_					.get(resultPartitionId.getPartitionId())__				_				assertEquals(buffersPerChannel, remote.getNumberOfAvailableBuffers())___				assertEquals(bufferPool.getTotalNumberOfMemorySegments() - buffersPerChannel,_					bufferPool.getNumberOfAvailableMemorySegments())__				_				assertEquals(extraNetworkBuffersPerGate, bufferPool.countBuffers())__			} else {_				assertEquals(buffersPerChannel + extraNetworkBuffersPerGate, bufferPool.countBuffers())__			}_		} finally {_			inputGate.releaseAllResources()__			network.shutdown()__		}_	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,1,result,partition,type,int,buffers,per,channel,2,int,extra,network,buffers,per,gate,8,final,network,environment,network,create,network,environment,buffers,per,channel,extra,network,buffers,per,gate,0,0,try,final,result,partition,id,result,partition,id,new,result,partition,id,add,unknown,input,channel,network,input,gate,result,partition,id,0,network,setup,input,gate,input,gate,network,buffer,pool,buffer,pool,network,get,network,buffer,pool,if,enable,credit,based,flow,control,verify,buffer,pool,times,0,request,memory,segments,buffers,per,channel,assert,equals,buffer,pool,get,total,number,of,memory,segments,buffer,pool,get,number,of,available,memory,segments,assert,equals,extra,network,buffers,per,gate,buffer,pool,count,buffers,else,assert,equals,buffers,per,channel,extra,network,buffers,per,gate,buffer,pool,count,buffers,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,if,enable,credit,based,flow,control,verify,buffer,pool,times,1,request,memory,segments,buffers,per,channel,remote,input,channel,remote,remote,input,channel,input,gate,get,input,channels,get,result,partition,id,get,partition,id,assert,equals,buffers,per,channel,remote,get,number,of,available,buffers,assert,equals,buffer,pool,get,total,number,of,memory,segments,buffers,per,channel,buffer,pool,get,number,of,available,memory,segments,assert,equals,extra,network,buffers,per,gate,buffer,pool,count,buffers,else,assert,equals,buffers,per,channel,extra,network,buffers,per,gate,buffer,pool,count,buffers,finally,input,gate,release,all,resources,network,shutdown
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1537385496;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(1, ResultPartitionType.PIPELINED_BOUNDED)__		int buffersPerChannel = 2__		int extraNetworkBuffersPerGate = 8__		final NetworkEnvironment network = createNetworkEnvironment(buffersPerChannel, extraNetworkBuffersPerGate, 0, 0)___		try {_			final ResultPartitionID resultPartitionId = new ResultPartitionID()__			addUnknownInputChannel(network, inputGate, resultPartitionId, 0)___			network.setupInputGate(inputGate)__			NetworkBufferPool bufferPool = network.getNetworkBufferPool()___			if (enableCreditBasedFlowControl) {_				verify(bufferPool, times(0)).requestMemorySegments(buffersPerChannel)___				assertEquals(bufferPool.getTotalNumberOfMemorySegments(),_					bufferPool.getNumberOfAvailableMemorySegments())__				_				assertEquals(extraNetworkBuffersPerGate, bufferPool.countBuffers())__			} else {_				assertEquals(buffersPerChannel + extraNetworkBuffersPerGate, bufferPool.countBuffers())__			}__			_			final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__			inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				resultPartitionId,_				ResultPartitionLocation.createRemote(connectionId)))___			if (enableCreditBasedFlowControl) {_				verify(bufferPool,_					times(1)).requestMemorySegments(buffersPerChannel)__				RemoteInputChannel remote = (RemoteInputChannel) inputGate.getInputChannels()_					.get(resultPartitionId.getPartitionId())__				_				assertEquals(buffersPerChannel, remote.getNumberOfAvailableBuffers())___				assertEquals(bufferPool.getTotalNumberOfMemorySegments() - buffersPerChannel,_					bufferPool.getNumberOfAvailableMemorySegments())__				_				assertEquals(extraNetworkBuffersPerGate, bufferPool.countBuffers())__			} else {_				assertEquals(buffersPerChannel + extraNetworkBuffersPerGate, bufferPool.countBuffers())__			}_		} finally {_			inputGate.releaseAllResources()__			network.shutdown()__		}_	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,1,result,partition,type,int,buffers,per,channel,2,int,extra,network,buffers,per,gate,8,final,network,environment,network,create,network,environment,buffers,per,channel,extra,network,buffers,per,gate,0,0,try,final,result,partition,id,result,partition,id,new,result,partition,id,add,unknown,input,channel,network,input,gate,result,partition,id,0,network,setup,input,gate,input,gate,network,buffer,pool,buffer,pool,network,get,network,buffer,pool,if,enable,credit,based,flow,control,verify,buffer,pool,times,0,request,memory,segments,buffers,per,channel,assert,equals,buffer,pool,get,total,number,of,memory,segments,buffer,pool,get,number,of,available,memory,segments,assert,equals,extra,network,buffers,per,gate,buffer,pool,count,buffers,else,assert,equals,buffers,per,channel,extra,network,buffers,per,gate,buffer,pool,count,buffers,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,if,enable,credit,based,flow,control,verify,buffer,pool,times,1,request,memory,segments,buffers,per,channel,remote,input,channel,remote,remote,input,channel,input,gate,get,input,channels,get,result,partition,id,get,partition,id,assert,equals,buffers,per,channel,remote,get,number,of,available,buffers,assert,equals,buffer,pool,get,total,number,of,memory,segments,buffers,per,channel,buffer,pool,get,number,of,available,memory,segments,assert,equals,extra,network,buffers,per,gate,buffer,pool,count,buffers,else,assert,equals,buffers,per,channel,extra,network,buffers,per,gate,buffer,pool,count,buffers,finally,input,gate,release,all,resources,network,shutdown
SingleInputGateTest -> @Test 	public void testRequestBuffersWithUnknownInputChannel() throws Exception;1540301035;Tests that input gate requests and assigns network buffers when unknown input channel_updates to remote input channel.;@Test_	public void testRequestBuffersWithUnknownInputChannel() throws Exception {_		final SingleInputGate inputGate = createInputGate(1, ResultPartitionType.PIPELINED_BOUNDED)__		int buffersPerChannel = 2__		int extraNetworkBuffersPerGate = 8__		final NetworkEnvironment network = new NetworkEnvironment(_			100, 32, 0, 0, buffersPerChannel, extraNetworkBuffersPerGate, enableCreditBasedFlowControl)___		try {_			final ResultPartitionID resultPartitionId = new ResultPartitionID()__			addUnknownInputChannel(network, inputGate, resultPartitionId, 0)___			network.setupInputGate(inputGate)__			NetworkBufferPool bufferPool = network.getNetworkBufferPool()___			if (enableCreditBasedFlowControl) {_				assertEquals(bufferPool.getTotalNumberOfMemorySegments(),_					bufferPool.getNumberOfAvailableMemorySegments())__				_				assertEquals(extraNetworkBuffersPerGate, bufferPool.countBuffers())__			} else {_				assertEquals(buffersPerChannel + extraNetworkBuffersPerGate, bufferPool.countBuffers())__			}__			_			final ConnectionID connectionId = new ConnectionID(new InetSocketAddress("localhost", 5000), 0)__			inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(_				resultPartitionId,_				ResultPartitionLocation.createRemote(connectionId)))___			if (enableCreditBasedFlowControl) {_				RemoteInputChannel remote = (RemoteInputChannel) inputGate.getInputChannels()_					.get(resultPartitionId.getPartitionId())__				_				assertEquals(buffersPerChannel, remote.getNumberOfAvailableBuffers())___				assertEquals(bufferPool.getTotalNumberOfMemorySegments() - buffersPerChannel,_					bufferPool.getNumberOfAvailableMemorySegments())__				_				assertEquals(extraNetworkBuffersPerGate, bufferPool.countBuffers())__			} else {_				assertEquals(buffersPerChannel + extraNetworkBuffersPerGate, bufferPool.countBuffers())__			}_		} finally {_			inputGate.releaseAllResources()__			network.shutdown()__		}_	};tests,that,input,gate,requests,and,assigns,network,buffers,when,unknown,input,channel,updates,to,remote,input,channel;test,public,void,test,request,buffers,with,unknown,input,channel,throws,exception,final,single,input,gate,input,gate,create,input,gate,1,result,partition,type,int,buffers,per,channel,2,int,extra,network,buffers,per,gate,8,final,network,environment,network,new,network,environment,100,32,0,0,buffers,per,channel,extra,network,buffers,per,gate,enable,credit,based,flow,control,try,final,result,partition,id,result,partition,id,new,result,partition,id,add,unknown,input,channel,network,input,gate,result,partition,id,0,network,setup,input,gate,input,gate,network,buffer,pool,buffer,pool,network,get,network,buffer,pool,if,enable,credit,based,flow,control,assert,equals,buffer,pool,get,total,number,of,memory,segments,buffer,pool,get,number,of,available,memory,segments,assert,equals,extra,network,buffers,per,gate,buffer,pool,count,buffers,else,assert,equals,buffers,per,channel,extra,network,buffers,per,gate,buffer,pool,count,buffers,final,connection,id,connection,id,new,connection,id,new,inet,socket,address,localhost,5000,0,input,gate,update,input,channel,new,input,channel,deployment,descriptor,result,partition,id,result,partition,location,create,remote,connection,id,if,enable,credit,based,flow,control,remote,input,channel,remote,remote,input,channel,input,gate,get,input,channels,get,result,partition,id,get,partition,id,assert,equals,buffers,per,channel,remote,get,number,of,available,buffers,assert,equals,buffer,pool,get,total,number,of,memory,segments,buffers,per,channel,buffer,pool,get,number,of,available,memory,segments,assert,equals,extra,network,buffers,per,gate,buffer,pool,count,buffers,else,assert,equals,buffers,per,channel,extra,network,buffers,per,gate,buffer,pool,count,buffers,finally,input,gate,release,all,resources,network,shutdown
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1478853699;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc = new InputGateDeploymentDescriptor(new IntermediateDataSetID(), 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1480624969;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc = new InputGateDeploymentDescriptor(new IntermediateDataSetID(), 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1481560756;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc = new InputGateDeploymentDescriptor(new IntermediateDataSetID(), 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1489149058;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1493724918;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1507647199;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			new UnregisteredTaskMetricsGroup.DummyTaskIOMetricGroup())___		assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,new,unregistered,task,metrics,group,dummy,task,iometric,group,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1513102156;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1515510677;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1516285456;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1516285456;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1518785736;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1519039300;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1519039301;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1519834372;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1519834372;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		NetworkEnvironment netEnv = mock(NetworkEnvironment.class)__		when(netEnv.getResultPartitionManager()).thenReturn(new ResultPartitionManager())__		when(netEnv.getTaskEventDispatcher()).thenReturn(new TaskEventDispatcher())__		when(netEnv.getPartitionRequestInitialBackoff()).thenReturn(initialBackoff)__		when(netEnv.getPartitionRequestMaxBackoff()).thenReturn(maxBackoff)__		when(netEnv.getConnectionManager()).thenReturn(new LocalConnectionManager())___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___		Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___		assertEquals(3, channelMap.size())__		InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__		assertEquals(LocalInputChannel.class, localChannel.getClass())___		InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__		assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___		InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__		assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___		InputChannel[] channels = new InputChannel[]{localChannel, remoteChannel, unknownChannel}__		for (InputChannel ch : channels) {_			assertEquals(0, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___			assertTrue(ch.increaseBackoff())__			assertEquals(maxBackoff, ch.getCurrentBackoff())___			assertFalse(ch.increaseBackoff())__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,network,environment,net,env,mock,network,environment,class,when,net,env,get,result,partition,manager,then,return,new,result,partition,manager,when,net,env,get,task,event,dispatcher,then,return,new,task,event,dispatcher,when,net,env,get,partition,request,initial,backoff,then,return,initial,backoff,when,net,env,get,partition,request,max,backoff,then,return,max,backoff,when,net,env,get,connection,manager,then,return,new,local,connection,manager,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1525116906;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		final NetworkEnvironment netEnv = createNetworkEnvironment(2, 8, initialBackoff, maxBackoff)___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		try {_			assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___			Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___			assertEquals(3, channelMap.size())__			InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__			assertEquals(LocalInputChannel.class, localChannel.getClass())___			InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__			assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___			InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__			assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___			InputChannel[] channels =_				new InputChannel[] {localChannel, remoteChannel, unknownChannel}__			for (InputChannel ch : channels) {_				assertEquals(0, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(initialBackoff, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(maxBackoff, ch.getCurrentBackoff())___				assertFalse(ch.increaseBackoff())__			}_		} finally {_			gate.releaseAllResources()__			netEnv.shutdown()__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,final,network,environment,net,env,create,network,environment,2,8,initial,backoff,max,backoff,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,try,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff,finally,gate,release,all,resources,net,env,shutdown
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1531742482;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		final NetworkEnvironment netEnv = createNetworkEnvironment(2, 8, initialBackoff, maxBackoff)___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		try {_			assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___			Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___			assertEquals(3, channelMap.size())__			InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__			assertEquals(LocalInputChannel.class, localChannel.getClass())___			InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__			assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___			InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__			assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___			InputChannel[] channels =_				new InputChannel[] {localChannel, remoteChannel, unknownChannel}__			for (InputChannel ch : channels) {_				assertEquals(0, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(initialBackoff, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(maxBackoff, ch.getCurrentBackoff())___				assertFalse(ch.increaseBackoff())__			}_		} finally {_			gate.releaseAllResources()__			netEnv.shutdown()__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,final,network,environment,net,env,create,network,environment,2,8,initial,backoff,max,backoff,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,try,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff,finally,gate,release,all,resources,net,env,shutdown
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1537385496;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		final NetworkEnvironment netEnv = createNetworkEnvironment(2, 8, initialBackoff, maxBackoff)___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		try {_			assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___			Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___			assertEquals(3, channelMap.size())__			InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__			assertEquals(LocalInputChannel.class, localChannel.getClass())___			InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__			assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___			InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__			assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___			InputChannel[] channels =_				new InputChannel[] {localChannel, remoteChannel, unknownChannel}__			for (InputChannel ch : channels) {_				assertEquals(0, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(initialBackoff, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(maxBackoff, ch.getCurrentBackoff())___				assertFalse(ch.increaseBackoff())__			}_		} finally {_			gate.releaseAllResources()__			netEnv.shutdown()__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,final,network,environment,net,env,create,network,environment,2,8,initial,backoff,max,backoff,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,try,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff,finally,gate,release,all,resources,net,env,shutdown
SingleInputGateTest -> @Test 	public void testRequestBackoffConfiguration() throws Exception;1540301035;Tests request back off configuration is correctly forwarded to the channels.;@Test_	public void testRequestBackoffConfiguration() throws Exception {_		ResultPartitionID[] partitionIds = new ResultPartitionID[] {_			new ResultPartitionID(),_			new ResultPartitionID(),_			new ResultPartitionID()_		}___		InputChannelDeploymentDescriptor[] channelDescs = new InputChannelDeploymentDescriptor[]{_			_			new InputChannelDeploymentDescriptor(_				partitionIds[0],_				ResultPartitionLocation.createLocal()),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[1],_				ResultPartitionLocation.createRemote(new ConnectionID(new InetSocketAddress("localhost", 5000), 0))),_			_			new InputChannelDeploymentDescriptor(_				partitionIds[2],_				ResultPartitionLocation.createUnknown())}___		InputGateDeploymentDescriptor gateDesc =_			new InputGateDeploymentDescriptor(new IntermediateDataSetID(),_				ResultPartitionType.PIPELINED, 0, channelDescs)___		int initialBackoff = 137__		int maxBackoff = 1001___		final NetworkEnvironment netEnv = new NetworkEnvironment(_			100, 32, initialBackoff, maxBackoff, 2, 8, enableCreditBasedFlowControl)___		SingleInputGate gate = SingleInputGate.create(_			"TestTask",_			new JobID(),_			new ExecutionAttemptID(),_			gateDesc,_			netEnv,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		try {_			assertEquals(gateDesc.getConsumedPartitionType(), gate.getConsumedPartitionType())___			Map<IntermediateResultPartitionID, InputChannel> channelMap = gate.getInputChannels()___			assertEquals(3, channelMap.size())__			InputChannel localChannel = channelMap.get(partitionIds[0].getPartitionId())__			assertEquals(LocalInputChannel.class, localChannel.getClass())___			InputChannel remoteChannel = channelMap.get(partitionIds[1].getPartitionId())__			assertEquals(RemoteInputChannel.class, remoteChannel.getClass())___			InputChannel unknownChannel = channelMap.get(partitionIds[2].getPartitionId())__			assertEquals(UnknownInputChannel.class, unknownChannel.getClass())___			InputChannel[] channels =_				new InputChannel[] {localChannel, remoteChannel, unknownChannel}__			for (InputChannel ch : channels) {_				assertEquals(0, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(initialBackoff, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(initialBackoff * 2, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(initialBackoff * 2 * 2, ch.getCurrentBackoff())___				assertTrue(ch.increaseBackoff())__				assertEquals(maxBackoff, ch.getCurrentBackoff())___				assertFalse(ch.increaseBackoff())__			}_		} finally {_			gate.releaseAllResources()__			netEnv.shutdown()__		}_	};tests,request,back,off,configuration,is,correctly,forwarded,to,the,channels;test,public,void,test,request,backoff,configuration,throws,exception,result,partition,id,partition,ids,new,result,partition,id,new,result,partition,id,new,result,partition,id,new,result,partition,id,input,channel,deployment,descriptor,channel,descs,new,input,channel,deployment,descriptor,new,input,channel,deployment,descriptor,partition,ids,0,result,partition,location,create,local,new,input,channel,deployment,descriptor,partition,ids,1,result,partition,location,create,remote,new,connection,id,new,inet,socket,address,localhost,5000,0,new,input,channel,deployment,descriptor,partition,ids,2,result,partition,location,create,unknown,input,gate,deployment,descriptor,gate,desc,new,input,gate,deployment,descriptor,new,intermediate,data,set,id,result,partition,type,pipelined,0,channel,descs,int,initial,backoff,137,int,max,backoff,1001,final,network,environment,net,env,new,network,environment,100,32,initial,backoff,max,backoff,2,8,enable,credit,based,flow,control,single,input,gate,gate,single,input,gate,create,test,task,new,job,id,new,execution,attempt,id,gate,desc,net,env,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,try,assert,equals,gate,desc,get,consumed,partition,type,gate,get,consumed,partition,type,map,intermediate,result,partition,id,input,channel,channel,map,gate,get,input,channels,assert,equals,3,channel,map,size,input,channel,local,channel,channel,map,get,partition,ids,0,get,partition,id,assert,equals,local,input,channel,class,local,channel,get,class,input,channel,remote,channel,channel,map,get,partition,ids,1,get,partition,id,assert,equals,remote,input,channel,class,remote,channel,get,class,input,channel,unknown,channel,channel,map,get,partition,ids,2,get,partition,id,assert,equals,unknown,input,channel,class,unknown,channel,get,class,input,channel,channels,new,input,channel,local,channel,remote,channel,unknown,channel,for,input,channel,ch,channels,assert,equals,0,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,initial,backoff,2,2,ch,get,current,backoff,assert,true,ch,increase,backoff,assert,equals,max,backoff,ch,get,current,backoff,assert,false,ch,increase,backoff,finally,gate,release,all,resources,net,env,shutdown
