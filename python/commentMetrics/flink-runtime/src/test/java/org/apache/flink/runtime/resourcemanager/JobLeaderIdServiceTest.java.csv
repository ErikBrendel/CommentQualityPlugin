# id;timestamp;commentText;codeText;commentWords;codeWords
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testAddingJob() throws Exception;1489413798;Tests adding a job and finding out its leader id;@Test(timeout = 10000)_	public void testAddingJob() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final UUID leaderId = UUID.randomUUID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService()___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		Future<UUID> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId)___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))__	};tests,adding,a,job,and,finding,out,its,leader,id;test,timeout,10000,public,void,test,adding,job,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,uuid,leader,id,uuid,random,uuid,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,future,uuid,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testAddingJob() throws Exception;1490174800;Tests adding a job and finding out its leader id;@Test(timeout = 10000)_	public void testAddingJob() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final UUID leaderId = UUID.randomUUID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		Future<UUID> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId)___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))__	};tests,adding,a,job,and,finding,out,its,leader,id;test,timeout,10000,public,void,test,adding,job,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,uuid,leader,id,uuid,random,uuid,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,future,uuid,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testAddingJob() throws Exception;1501058997;Tests adding a job and finding out its leader id;@Test(timeout = 10000)_	public void testAddingJob() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final UUID leaderId = UUID.randomUUID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		Future<UUID> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId)___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))__	};tests,adding,a,job,and,finding,out,its,leader,id;test,timeout,10000,public,void,test,adding,job,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,uuid,leader,id,uuid,random,uuid,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,future,uuid,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testAddingJob() throws Exception;1501760738;Tests adding a job and finding out its leader id;@Test(timeout = 10000)_	public void testAddingJob() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final UUID leaderId = UUID.randomUUID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<UUID> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId)___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))__	};tests,adding,a,job,and,finding,out,its,leader,id;test,timeout,10000,public,void,test,adding,job,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,uuid,leader,id,uuid,random,uuid,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,uuid,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testAddingJob() throws Exception;1504608225;Tests adding a job and finding out its leader id;@Test(timeout = 10000)_	public void testAddingJob() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final JobMasterId leaderId = JobMasterId.generate()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId.toUUID())___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))__	};tests,adding,a,job,and,finding,out,its,leader,id;test,timeout,10000,public,void,test,adding,job,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,job,master,id,leader,id,job,master,id,generate,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,to,uuid,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testAddingJob() throws Exception;1515481550;Tests adding a job and finding out its leader id;@Test(timeout = 10000)_	public void testAddingJob() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final JobMasterId leaderId = JobMasterId.generate()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId.toUUID())___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))__	};tests,adding,a,job,and,finding,out,its,leader,id;test,timeout,10000,public,void,test,adding,job,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,job,master,id,leader,id,job,master,id,generate,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,to,uuid,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testAddingJob() throws Exception;1519638690;Tests adding a job and finding out its leader id;@Test(timeout = 10000)_	public void testAddingJob() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final JobMasterId leaderId = JobMasterId.generate()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		SettableLeaderRetrievalService leaderRetrievalService = new SettableLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId.toUUID())___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))__	};tests,adding,a,job,and,finding,out,its,leader,id;test,timeout,10000,public,void,test,adding,job,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,job,master,id,leader,id,job,master,id,generate,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,settable,leader,retrieval,service,leader,retrieval,service,new,settable,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,to,uuid,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testAddingJob() throws Exception;1522681180;Tests adding a job and finding out its leader id;@Test(timeout = 10000)_	public void testAddingJob() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final JobMasterId leaderId = JobMasterId.generate()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		SettableLeaderRetrievalService leaderRetrievalService = new SettableLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId.toUUID())___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))__	};tests,adding,a,job,and,finding,out,its,leader,id;test,timeout,10000,public,void,test,adding,job,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,job,master,id,leader,id,job,master,id,generate,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,settable,leader,retrieval,service,leader,retrieval,service,new,settable,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,to,uuid,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testAddingJob() throws Exception;1526494919;Tests adding a job and finding out its leader id;@Test(timeout = 10000)_	public void testAddingJob() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final JobMasterId leaderId = JobMasterId.generate()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		SettableLeaderRetrievalService leaderRetrievalService = new SettableLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId.toUUID())___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))__	};tests,adding,a,job,and,finding,out,its,leader,id;test,timeout,10000,public,void,test,adding,job,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,job,master,id,leader,id,job,master,id,generate,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,settable,leader,retrieval,service,leader,retrieval,service,new,settable,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,to,uuid,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id
JobLeaderIdServiceTest -> @Test 	public void testInitialJobTimeout() throws Exception;1489413798;Tests that the initial job registration registers a timeout which will call_{@link JobLeaderIdActions#notifyJobTimeout(JobID, UUID)} when executed.;@Test_	public void testInitialJobTimeout() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService()___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		assertTrue(jobLeaderIdService.containsJob(jobId))___		ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)__		verify(scheduledExecutor).schedule(runnableArgumentCaptor.capture(), anyLong(), any(TimeUnit.class))___		Runnable timeoutRunnable = runnableArgumentCaptor.getValue()__		timeoutRunnable.run()___		ArgumentCaptor<UUID> timeoutIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), timeoutIdArgumentCaptor.capture())___		assertTrue(jobLeaderIdService.isValidTimeout(jobId, timeoutIdArgumentCaptor.getValue()))__	};tests,that,the,initial,job,registration,registers,a,timeout,which,will,call,link,job,leader,id,actions,notify,job,timeout,job,id,uuid,when,executed;test,public,void,test,initial,job,timeout,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,assert,true,job,leader,id,service,contains,job,job,id,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,scheduled,executor,schedule,runnable,argument,captor,capture,any,long,any,time,unit,class,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,argument,captor,uuid,timeout,id,argument,captor,argument,captor,for,class,uuid,class,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,timeout,id,argument,captor,capture,assert,true,job,leader,id,service,is,valid,timeout,job,id,timeout,id,argument,captor,get,value
JobLeaderIdServiceTest -> @Test 	public void testInitialJobTimeout() throws Exception;1490174800;Tests that the initial job registration registers a timeout which will call_{@link JobLeaderIdActions#notifyJobTimeout(JobID, UUID)} when executed.;@Test_	public void testInitialJobTimeout() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		assertTrue(jobLeaderIdService.containsJob(jobId))___		ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)__		verify(scheduledExecutor).schedule(runnableArgumentCaptor.capture(), anyLong(), any(TimeUnit.class))___		Runnable timeoutRunnable = runnableArgumentCaptor.getValue()__		timeoutRunnable.run()___		ArgumentCaptor<UUID> timeoutIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), timeoutIdArgumentCaptor.capture())___		assertTrue(jobLeaderIdService.isValidTimeout(jobId, timeoutIdArgumentCaptor.getValue()))__	};tests,that,the,initial,job,registration,registers,a,timeout,which,will,call,link,job,leader,id,actions,notify,job,timeout,job,id,uuid,when,executed;test,public,void,test,initial,job,timeout,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,assert,true,job,leader,id,service,contains,job,job,id,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,scheduled,executor,schedule,runnable,argument,captor,capture,any,long,any,time,unit,class,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,argument,captor,uuid,timeout,id,argument,captor,argument,captor,for,class,uuid,class,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,timeout,id,argument,captor,capture,assert,true,job,leader,id,service,is,valid,timeout,job,id,timeout,id,argument,captor,get,value
JobLeaderIdServiceTest -> @Test 	public void testInitialJobTimeout() throws Exception;1501058997;Tests that the initial job registration registers a timeout which will call_{@link JobLeaderIdActions#notifyJobTimeout(JobID, UUID)} when executed.;@Test_	public void testInitialJobTimeout() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		assertTrue(jobLeaderIdService.containsJob(jobId))___		ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)__		verify(scheduledExecutor).schedule(runnableArgumentCaptor.capture(), anyLong(), any(TimeUnit.class))___		Runnable timeoutRunnable = runnableArgumentCaptor.getValue()__		timeoutRunnable.run()___		ArgumentCaptor<UUID> timeoutIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), timeoutIdArgumentCaptor.capture())___		assertTrue(jobLeaderIdService.isValidTimeout(jobId, timeoutIdArgumentCaptor.getValue()))__	};tests,that,the,initial,job,registration,registers,a,timeout,which,will,call,link,job,leader,id,actions,notify,job,timeout,job,id,uuid,when,executed;test,public,void,test,initial,job,timeout,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,assert,true,job,leader,id,service,contains,job,job,id,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,scheduled,executor,schedule,runnable,argument,captor,capture,any,long,any,time,unit,class,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,argument,captor,uuid,timeout,id,argument,captor,argument,captor,for,class,uuid,class,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,timeout,id,argument,captor,capture,assert,true,job,leader,id,service,is,valid,timeout,job,id,timeout,id,argument,captor,get,value
JobLeaderIdServiceTest -> @Test 	public void testInitialJobTimeout() throws Exception;1501760738;Tests that the initial job registration registers a timeout which will call_{@link JobLeaderIdActions#notifyJobTimeout(JobID, UUID)} when executed.;@Test_	public void testInitialJobTimeout() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		assertTrue(jobLeaderIdService.containsJob(jobId))___		ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)__		verify(scheduledExecutor).schedule(runnableArgumentCaptor.capture(), anyLong(), any(TimeUnit.class))___		Runnable timeoutRunnable = runnableArgumentCaptor.getValue()__		timeoutRunnable.run()___		ArgumentCaptor<UUID> timeoutIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), timeoutIdArgumentCaptor.capture())___		assertTrue(jobLeaderIdService.isValidTimeout(jobId, timeoutIdArgumentCaptor.getValue()))__	};tests,that,the,initial,job,registration,registers,a,timeout,which,will,call,link,job,leader,id,actions,notify,job,timeout,job,id,uuid,when,executed;test,public,void,test,initial,job,timeout,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,assert,true,job,leader,id,service,contains,job,job,id,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,scheduled,executor,schedule,runnable,argument,captor,capture,any,long,any,time,unit,class,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,argument,captor,uuid,timeout,id,argument,captor,argument,captor,for,class,uuid,class,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,timeout,id,argument,captor,capture,assert,true,job,leader,id,service,is,valid,timeout,job,id,timeout,id,argument,captor,get,value
JobLeaderIdServiceTest -> @Test 	public void testInitialJobTimeout() throws Exception;1504608225;Tests that the initial job registration registers a timeout which will call_{@link JobLeaderIdActions#notifyJobTimeout(JobID, UUID)} when executed.;@Test_	public void testInitialJobTimeout() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		assertTrue(jobLeaderIdService.containsJob(jobId))___		ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)__		verify(scheduledExecutor).schedule(runnableArgumentCaptor.capture(), anyLong(), any(TimeUnit.class))___		Runnable timeoutRunnable = runnableArgumentCaptor.getValue()__		timeoutRunnable.run()___		ArgumentCaptor<UUID> timeoutIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), timeoutIdArgumentCaptor.capture())___		assertTrue(jobLeaderIdService.isValidTimeout(jobId, timeoutIdArgumentCaptor.getValue()))__	};tests,that,the,initial,job,registration,registers,a,timeout,which,will,call,link,job,leader,id,actions,notify,job,timeout,job,id,uuid,when,executed;test,public,void,test,initial,job,timeout,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,assert,true,job,leader,id,service,contains,job,job,id,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,scheduled,executor,schedule,runnable,argument,captor,capture,any,long,any,time,unit,class,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,argument,captor,uuid,timeout,id,argument,captor,argument,captor,for,class,uuid,class,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,timeout,id,argument,captor,capture,assert,true,job,leader,id,service,is,valid,timeout,job,id,timeout,id,argument,captor,get,value
JobLeaderIdServiceTest -> @Test 	public void testInitialJobTimeout() throws Exception;1515481550;Tests that the initial job registration registers a timeout which will call_{@link JobLeaderIdActions#notifyJobTimeout(JobID, UUID)} when executed.;@Test_	public void testInitialJobTimeout() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		assertTrue(jobLeaderIdService.containsJob(jobId))___		ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)__		verify(scheduledExecutor).schedule(runnableArgumentCaptor.capture(), anyLong(), any(TimeUnit.class))___		Runnable timeoutRunnable = runnableArgumentCaptor.getValue()__		timeoutRunnable.run()___		ArgumentCaptor<UUID> timeoutIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), timeoutIdArgumentCaptor.capture())___		assertTrue(jobLeaderIdService.isValidTimeout(jobId, timeoutIdArgumentCaptor.getValue()))__	};tests,that,the,initial,job,registration,registers,a,timeout,which,will,call,link,job,leader,id,actions,notify,job,timeout,job,id,uuid,when,executed;test,public,void,test,initial,job,timeout,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,assert,true,job,leader,id,service,contains,job,job,id,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,scheduled,executor,schedule,runnable,argument,captor,capture,any,long,any,time,unit,class,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,argument,captor,uuid,timeout,id,argument,captor,argument,captor,for,class,uuid,class,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,timeout,id,argument,captor,capture,assert,true,job,leader,id,service,is,valid,timeout,job,id,timeout,id,argument,captor,get,value
JobLeaderIdServiceTest -> @Test 	public void testInitialJobTimeout() throws Exception;1519638690;Tests that the initial job registration registers a timeout which will call_{@link JobLeaderIdActions#notifyJobTimeout(JobID, UUID)} when executed.;@Test_	public void testInitialJobTimeout() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		SettableLeaderRetrievalService leaderRetrievalService = new SettableLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		assertTrue(jobLeaderIdService.containsJob(jobId))___		ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)__		verify(scheduledExecutor).schedule(runnableArgumentCaptor.capture(), anyLong(), any(TimeUnit.class))___		Runnable timeoutRunnable = runnableArgumentCaptor.getValue()__		timeoutRunnable.run()___		ArgumentCaptor<UUID> timeoutIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), timeoutIdArgumentCaptor.capture())___		assertTrue(jobLeaderIdService.isValidTimeout(jobId, timeoutIdArgumentCaptor.getValue()))__	};tests,that,the,initial,job,registration,registers,a,timeout,which,will,call,link,job,leader,id,actions,notify,job,timeout,job,id,uuid,when,executed;test,public,void,test,initial,job,timeout,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,settable,leader,retrieval,service,leader,retrieval,service,new,settable,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,assert,true,job,leader,id,service,contains,job,job,id,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,scheduled,executor,schedule,runnable,argument,captor,capture,any,long,any,time,unit,class,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,argument,captor,uuid,timeout,id,argument,captor,argument,captor,for,class,uuid,class,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,timeout,id,argument,captor,capture,assert,true,job,leader,id,service,is,valid,timeout,job,id,timeout,id,argument,captor,get,value
JobLeaderIdServiceTest -> @Test 	public void testInitialJobTimeout() throws Exception;1522681180;Tests that the initial job registration registers a timeout which will call_{@link JobLeaderIdActions#notifyJobTimeout(JobID, UUID)} when executed.;@Test_	public void testInitialJobTimeout() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		SettableLeaderRetrievalService leaderRetrievalService = new SettableLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		assertTrue(jobLeaderIdService.containsJob(jobId))___		ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)__		verify(scheduledExecutor).schedule(runnableArgumentCaptor.capture(), anyLong(), any(TimeUnit.class))___		Runnable timeoutRunnable = runnableArgumentCaptor.getValue()__		timeoutRunnable.run()___		ArgumentCaptor<UUID> timeoutIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), timeoutIdArgumentCaptor.capture())___		assertTrue(jobLeaderIdService.isValidTimeout(jobId, timeoutIdArgumentCaptor.getValue()))__	};tests,that,the,initial,job,registration,registers,a,timeout,which,will,call,link,job,leader,id,actions,notify,job,timeout,job,id,uuid,when,executed;test,public,void,test,initial,job,timeout,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,settable,leader,retrieval,service,leader,retrieval,service,new,settable,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,assert,true,job,leader,id,service,contains,job,job,id,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,scheduled,executor,schedule,runnable,argument,captor,capture,any,long,any,time,unit,class,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,argument,captor,uuid,timeout,id,argument,captor,argument,captor,for,class,uuid,class,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,timeout,id,argument,captor,capture,assert,true,job,leader,id,service,is,valid,timeout,job,id,timeout,id,argument,captor,get,value
JobLeaderIdServiceTest -> @Test 	public void testInitialJobTimeout() throws Exception;1526494919;Tests that the initial job registration registers a timeout which will call_{@link JobLeaderIdActions#notifyJobTimeout(JobID, UUID)} when executed.;@Test_	public void testInitialJobTimeout() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		SettableLeaderRetrievalService leaderRetrievalService = new SettableLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		assertTrue(jobLeaderIdService.containsJob(jobId))___		ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)__		verify(scheduledExecutor).schedule(runnableArgumentCaptor.capture(), anyLong(), any(TimeUnit.class))___		Runnable timeoutRunnable = runnableArgumentCaptor.getValue()__		timeoutRunnable.run()___		ArgumentCaptor<UUID> timeoutIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), timeoutIdArgumentCaptor.capture())___		assertTrue(jobLeaderIdService.isValidTimeout(jobId, timeoutIdArgumentCaptor.getValue()))__	};tests,that,the,initial,job,registration,registers,a,timeout,which,will,call,link,job,leader,id,actions,notify,job,timeout,job,id,uuid,when,executed;test,public,void,test,initial,job,timeout,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,settable,leader,retrieval,service,leader,retrieval,service,new,settable,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,assert,true,job,leader,id,service,contains,job,job,id,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,scheduled,executor,schedule,runnable,argument,captor,capture,any,long,any,time,unit,class,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,argument,captor,uuid,timeout,id,argument,captor,argument,captor,for,class,uuid,class,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,timeout,id,argument,captor,capture,assert,true,job,leader,id,service,is,valid,timeout,job,id,timeout,id,argument,captor,get,value
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void jobTimeoutAfterLostLeadership() throws Exception;1489413798;Tests that a timeout get cancelled once a job leader has been found. Furthermore, it tests_that a new timeout is registered after the jobmanager has lost leadership.;@Test(timeout = 10000)_	public void jobTimeoutAfterLostLeadership() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final UUID leaderId = UUID.randomUUID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService()___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledFuture<?> timeout1 = mock(ScheduledFuture.class)__		ScheduledFuture<?> timeout2 = mock(ScheduledFuture.class)__		final Queue<ScheduledFuture<?>> timeoutQueue = new ArrayDeque<>(Arrays.asList(timeout1, timeout2))__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		final AtomicReference<Runnable> lastRunnable = new AtomicReference<>()__		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastRunnable.set((Runnable) invocation.getArguments()[0])___				return timeoutQueue.poll()__			}_		}).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		final AtomicReference<UUID> lastTimeoutId = new AtomicReference<>()___		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastTimeoutId.set((UUID) invocation.getArguments()[1])__				return null__			}_		}).when(jobLeaderIdActions).notifyJobTimeout(eq(jobId), any(UUID.class))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		Future<UUID> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId)___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))___		_		verify(timeout1, times(1)).cancel(anyBoolean())___		verify(scheduledExecutor, times(1)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		_		Runnable runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertFalse(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))___		_		leaderRetrievalService.notifyListener("", null)___		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))____		_		runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(2)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertTrue(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))__	};tests,that,a,timeout,get,cancelled,once,a,job,leader,has,been,found,furthermore,it,tests,that,a,new,timeout,is,registered,after,the,jobmanager,has,lost,leadership;test,timeout,10000,public,void,job,timeout,after,lost,leadership,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,uuid,leader,id,uuid,random,uuid,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,future,timeout1,mock,scheduled,future,class,scheduled,future,timeout2,mock,scheduled,future,class,final,queue,scheduled,future,timeout,queue,new,array,deque,arrays,as,list,timeout1,timeout2,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,final,atomic,reference,runnable,last,runnable,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,runnable,set,runnable,invocation,get,arguments,0,return,timeout,queue,poll,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,final,atomic,reference,uuid,last,timeout,id,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,timeout,id,set,uuid,invocation,get,arguments,1,return,null,when,job,leader,id,actions,notify,job,timeout,eq,job,id,any,uuid,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,future,uuid,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id,verify,timeout1,times,1,cancel,any,boolean,verify,scheduled,executor,times,1,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,any,uuid,class,assert,false,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get,leader,retrieval,service,notify,listener,null,verify,scheduled,executor,times,2,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,2,notify,job,timeout,eq,job,id,any,uuid,class,assert,true,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void jobTimeoutAfterLostLeadership() throws Exception;1490174800;Tests that a timeout get cancelled once a job leader has been found. Furthermore, it tests_that a new timeout is registered after the jobmanager has lost leadership.;@Test(timeout = 10000)_	public void jobTimeoutAfterLostLeadership() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final UUID leaderId = UUID.randomUUID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledFuture<?> timeout1 = mock(ScheduledFuture.class)__		ScheduledFuture<?> timeout2 = mock(ScheduledFuture.class)__		final Queue<ScheduledFuture<?>> timeoutQueue = new ArrayDeque<>(Arrays.asList(timeout1, timeout2))__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		final AtomicReference<Runnable> lastRunnable = new AtomicReference<>()__		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastRunnable.set((Runnable) invocation.getArguments()[0])___				return timeoutQueue.poll()__			}_		}).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		final AtomicReference<UUID> lastTimeoutId = new AtomicReference<>()___		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastTimeoutId.set((UUID) invocation.getArguments()[1])__				return null__			}_		}).when(jobLeaderIdActions).notifyJobTimeout(eq(jobId), any(UUID.class))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		Future<UUID> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId)___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))___		_		verify(timeout1, times(1)).cancel(anyBoolean())___		verify(scheduledExecutor, times(1)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		_		Runnable runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertFalse(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))___		_		leaderRetrievalService.notifyListener("", null)___		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))____		_		runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(2)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertTrue(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))__	};tests,that,a,timeout,get,cancelled,once,a,job,leader,has,been,found,furthermore,it,tests,that,a,new,timeout,is,registered,after,the,jobmanager,has,lost,leadership;test,timeout,10000,public,void,job,timeout,after,lost,leadership,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,uuid,leader,id,uuid,random,uuid,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,future,timeout1,mock,scheduled,future,class,scheduled,future,timeout2,mock,scheduled,future,class,final,queue,scheduled,future,timeout,queue,new,array,deque,arrays,as,list,timeout1,timeout2,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,final,atomic,reference,runnable,last,runnable,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,runnable,set,runnable,invocation,get,arguments,0,return,timeout,queue,poll,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,final,atomic,reference,uuid,last,timeout,id,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,timeout,id,set,uuid,invocation,get,arguments,1,return,null,when,job,leader,id,actions,notify,job,timeout,eq,job,id,any,uuid,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,future,uuid,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id,verify,timeout1,times,1,cancel,any,boolean,verify,scheduled,executor,times,1,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,any,uuid,class,assert,false,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get,leader,retrieval,service,notify,listener,null,verify,scheduled,executor,times,2,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,2,notify,job,timeout,eq,job,id,any,uuid,class,assert,true,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void jobTimeoutAfterLostLeadership() throws Exception;1501058997;Tests that a timeout get cancelled once a job leader has been found. Furthermore, it tests_that a new timeout is registered after the jobmanager has lost leadership.;@Test(timeout = 10000)_	public void jobTimeoutAfterLostLeadership() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final UUID leaderId = UUID.randomUUID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledFuture<?> timeout1 = mock(ScheduledFuture.class)__		ScheduledFuture<?> timeout2 = mock(ScheduledFuture.class)__		final Queue<ScheduledFuture<?>> timeoutQueue = new ArrayDeque<>(Arrays.asList(timeout1, timeout2))__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		final AtomicReference<Runnable> lastRunnable = new AtomicReference<>()__		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastRunnable.set((Runnable) invocation.getArguments()[0])___				return timeoutQueue.poll()__			}_		}).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		final AtomicReference<UUID> lastTimeoutId = new AtomicReference<>()___		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastTimeoutId.set((UUID) invocation.getArguments()[1])__				return null__			}_		}).when(jobLeaderIdActions).notifyJobTimeout(eq(jobId), any(UUID.class))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		Future<UUID> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId)___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))___		_		verify(timeout1, times(1)).cancel(anyBoolean())___		verify(scheduledExecutor, times(1)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		_		Runnable runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertFalse(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))___		_		leaderRetrievalService.notifyListener("", null)___		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))____		_		runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(2)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertTrue(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))__	};tests,that,a,timeout,get,cancelled,once,a,job,leader,has,been,found,furthermore,it,tests,that,a,new,timeout,is,registered,after,the,jobmanager,has,lost,leadership;test,timeout,10000,public,void,job,timeout,after,lost,leadership,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,uuid,leader,id,uuid,random,uuid,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,future,timeout1,mock,scheduled,future,class,scheduled,future,timeout2,mock,scheduled,future,class,final,queue,scheduled,future,timeout,queue,new,array,deque,arrays,as,list,timeout1,timeout2,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,final,atomic,reference,runnable,last,runnable,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,runnable,set,runnable,invocation,get,arguments,0,return,timeout,queue,poll,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,final,atomic,reference,uuid,last,timeout,id,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,timeout,id,set,uuid,invocation,get,arguments,1,return,null,when,job,leader,id,actions,notify,job,timeout,eq,job,id,any,uuid,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,future,uuid,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id,verify,timeout1,times,1,cancel,any,boolean,verify,scheduled,executor,times,1,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,any,uuid,class,assert,false,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get,leader,retrieval,service,notify,listener,null,verify,scheduled,executor,times,2,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,2,notify,job,timeout,eq,job,id,any,uuid,class,assert,true,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void jobTimeoutAfterLostLeadership() throws Exception;1501760738;Tests that a timeout get cancelled once a job leader has been found. Furthermore, it tests_that a new timeout is registered after the jobmanager has lost leadership.;@Test(timeout = 10000)_	public void jobTimeoutAfterLostLeadership() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final UUID leaderId = UUID.randomUUID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledFuture<?> timeout1 = mock(ScheduledFuture.class)__		ScheduledFuture<?> timeout2 = mock(ScheduledFuture.class)__		final Queue<ScheduledFuture<?>> timeoutQueue = new ArrayDeque<>(Arrays.asList(timeout1, timeout2))__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		final AtomicReference<Runnable> lastRunnable = new AtomicReference<>()__		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastRunnable.set((Runnable) invocation.getArguments()[0])___				return timeoutQueue.poll()__			}_		}).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		final AtomicReference<UUID> lastTimeoutId = new AtomicReference<>()___		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastTimeoutId.set((UUID) invocation.getArguments()[1])__				return null__			}_		}).when(jobLeaderIdActions).notifyJobTimeout(eq(jobId), any(UUID.class))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<UUID> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId)___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))___		_		verify(timeout1, times(1)).cancel(anyBoolean())___		verify(scheduledExecutor, times(1)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		_		Runnable runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertFalse(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))___		_		leaderRetrievalService.notifyListener("", null)___		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))____		_		runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(2)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertTrue(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))__	};tests,that,a,timeout,get,cancelled,once,a,job,leader,has,been,found,furthermore,it,tests,that,a,new,timeout,is,registered,after,the,jobmanager,has,lost,leadership;test,timeout,10000,public,void,job,timeout,after,lost,leadership,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,uuid,leader,id,uuid,random,uuid,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,future,timeout1,mock,scheduled,future,class,scheduled,future,timeout2,mock,scheduled,future,class,final,queue,scheduled,future,timeout,queue,new,array,deque,arrays,as,list,timeout1,timeout2,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,final,atomic,reference,runnable,last,runnable,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,runnable,set,runnable,invocation,get,arguments,0,return,timeout,queue,poll,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,final,atomic,reference,uuid,last,timeout,id,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,timeout,id,set,uuid,invocation,get,arguments,1,return,null,when,job,leader,id,actions,notify,job,timeout,eq,job,id,any,uuid,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,uuid,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id,verify,timeout1,times,1,cancel,any,boolean,verify,scheduled,executor,times,1,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,any,uuid,class,assert,false,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get,leader,retrieval,service,notify,listener,null,verify,scheduled,executor,times,2,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,2,notify,job,timeout,eq,job,id,any,uuid,class,assert,true,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void jobTimeoutAfterLostLeadership() throws Exception;1504608225;Tests that a timeout get cancelled once a job leader has been found. Furthermore, it tests_that a new timeout is registered after the jobmanager has lost leadership.;@Test(timeout = 10000)_	public void jobTimeoutAfterLostLeadership() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final JobMasterId leaderId = JobMasterId.generate()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledFuture<?> timeout1 = mock(ScheduledFuture.class)__		ScheduledFuture<?> timeout2 = mock(ScheduledFuture.class)__		final Queue<ScheduledFuture<?>> timeoutQueue = new ArrayDeque<>(Arrays.asList(timeout1, timeout2))__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		final AtomicReference<Runnable> lastRunnable = new AtomicReference<>()__		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastRunnable.set((Runnable) invocation.getArguments()[0])___				return timeoutQueue.poll()__			}_		}).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		final AtomicReference<UUID> lastTimeoutId = new AtomicReference<>()___		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastTimeoutId.set((UUID) invocation.getArguments()[1])__				return null__			}_		}).when(jobLeaderIdActions).notifyJobTimeout(eq(jobId), any(UUID.class))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId.toUUID())___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))___		_		verify(timeout1, times(1)).cancel(anyBoolean())___		verify(scheduledExecutor, times(1)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		_		Runnable runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertFalse(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))___		_		leaderRetrievalService.notifyListener("", null)___		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))____		_		runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(2)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertTrue(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))__	};tests,that,a,timeout,get,cancelled,once,a,job,leader,has,been,found,furthermore,it,tests,that,a,new,timeout,is,registered,after,the,jobmanager,has,lost,leadership;test,timeout,10000,public,void,job,timeout,after,lost,leadership,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,job,master,id,leader,id,job,master,id,generate,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,future,timeout1,mock,scheduled,future,class,scheduled,future,timeout2,mock,scheduled,future,class,final,queue,scheduled,future,timeout,queue,new,array,deque,arrays,as,list,timeout1,timeout2,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,final,atomic,reference,runnable,last,runnable,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,runnable,set,runnable,invocation,get,arguments,0,return,timeout,queue,poll,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,final,atomic,reference,uuid,last,timeout,id,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,timeout,id,set,uuid,invocation,get,arguments,1,return,null,when,job,leader,id,actions,notify,job,timeout,eq,job,id,any,uuid,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,to,uuid,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id,verify,timeout1,times,1,cancel,any,boolean,verify,scheduled,executor,times,1,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,any,uuid,class,assert,false,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get,leader,retrieval,service,notify,listener,null,verify,scheduled,executor,times,2,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,2,notify,job,timeout,eq,job,id,any,uuid,class,assert,true,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void jobTimeoutAfterLostLeadership() throws Exception;1515481550;Tests that a timeout get cancelled once a job leader has been found. Furthermore, it tests_that a new timeout is registered after the jobmanager has lost leadership.;@Test(timeout = 10000)_	public void jobTimeoutAfterLostLeadership() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final JobMasterId leaderId = JobMasterId.generate()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledFuture<?> timeout1 = mock(ScheduledFuture.class)__		ScheduledFuture<?> timeout2 = mock(ScheduledFuture.class)__		final Queue<ScheduledFuture<?>> timeoutQueue = new ArrayDeque<>(Arrays.asList(timeout1, timeout2))__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		final AtomicReference<Runnable> lastRunnable = new AtomicReference<>()__		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastRunnable.set((Runnable) invocation.getArguments()[0])___				return timeoutQueue.poll()__			}_		}).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		final AtomicReference<UUID> lastTimeoutId = new AtomicReference<>()___		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastTimeoutId.set((UUID) invocation.getArguments()[1])__				return null__			}_		}).when(jobLeaderIdActions).notifyJobTimeout(eq(jobId), any(UUID.class))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId.toUUID())___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))___		_		verify(timeout1, times(1)).cancel(anyBoolean())___		verify(scheduledExecutor, times(1)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		_		Runnable runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertFalse(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))___		_		leaderRetrievalService.notifyListener("", null)___		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))____		_		runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(2)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertTrue(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))__	};tests,that,a,timeout,get,cancelled,once,a,job,leader,has,been,found,furthermore,it,tests,that,a,new,timeout,is,registered,after,the,jobmanager,has,lost,leadership;test,timeout,10000,public,void,job,timeout,after,lost,leadership,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,job,master,id,leader,id,job,master,id,generate,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,future,timeout1,mock,scheduled,future,class,scheduled,future,timeout2,mock,scheduled,future,class,final,queue,scheduled,future,timeout,queue,new,array,deque,arrays,as,list,timeout1,timeout2,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,final,atomic,reference,runnable,last,runnable,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,runnable,set,runnable,invocation,get,arguments,0,return,timeout,queue,poll,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,final,atomic,reference,uuid,last,timeout,id,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,timeout,id,set,uuid,invocation,get,arguments,1,return,null,when,job,leader,id,actions,notify,job,timeout,eq,job,id,any,uuid,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,to,uuid,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id,verify,timeout1,times,1,cancel,any,boolean,verify,scheduled,executor,times,1,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,any,uuid,class,assert,false,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get,leader,retrieval,service,notify,listener,null,verify,scheduled,executor,times,2,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,2,notify,job,timeout,eq,job,id,any,uuid,class,assert,true,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void jobTimeoutAfterLostLeadership() throws Exception;1519638690;Tests that a timeout get cancelled once a job leader has been found. Furthermore, it tests_that a new timeout is registered after the jobmanager has lost leadership.;@Test(timeout = 10000)_	public void jobTimeoutAfterLostLeadership() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final JobMasterId leaderId = JobMasterId.generate()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		SettableLeaderRetrievalService leaderRetrievalService = new SettableLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledFuture<?> timeout1 = mock(ScheduledFuture.class)__		ScheduledFuture<?> timeout2 = mock(ScheduledFuture.class)__		final Queue<ScheduledFuture<?>> timeoutQueue = new ArrayDeque<>(Arrays.asList(timeout1, timeout2))__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		final AtomicReference<Runnable> lastRunnable = new AtomicReference<>()__		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastRunnable.set((Runnable) invocation.getArguments()[0])___				return timeoutQueue.poll()__			}_		}).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		final AtomicReference<UUID> lastTimeoutId = new AtomicReference<>()___		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastTimeoutId.set((UUID) invocation.getArguments()[1])__				return null__			}_		}).when(jobLeaderIdActions).notifyJobTimeout(eq(jobId), any(UUID.class))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId.toUUID())___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))___		_		verify(timeout1, times(1)).cancel(anyBoolean())___		verify(scheduledExecutor, times(1)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		_		Runnable runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertFalse(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))___		_		leaderRetrievalService.notifyListener("", null)___		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))____		_		runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(2)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertTrue(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))__	};tests,that,a,timeout,get,cancelled,once,a,job,leader,has,been,found,furthermore,it,tests,that,a,new,timeout,is,registered,after,the,jobmanager,has,lost,leadership;test,timeout,10000,public,void,job,timeout,after,lost,leadership,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,job,master,id,leader,id,job,master,id,generate,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,settable,leader,retrieval,service,leader,retrieval,service,new,settable,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,future,timeout1,mock,scheduled,future,class,scheduled,future,timeout2,mock,scheduled,future,class,final,queue,scheduled,future,timeout,queue,new,array,deque,arrays,as,list,timeout1,timeout2,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,final,atomic,reference,runnable,last,runnable,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,runnable,set,runnable,invocation,get,arguments,0,return,timeout,queue,poll,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,final,atomic,reference,uuid,last,timeout,id,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,timeout,id,set,uuid,invocation,get,arguments,1,return,null,when,job,leader,id,actions,notify,job,timeout,eq,job,id,any,uuid,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,to,uuid,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id,verify,timeout1,times,1,cancel,any,boolean,verify,scheduled,executor,times,1,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,any,uuid,class,assert,false,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get,leader,retrieval,service,notify,listener,null,verify,scheduled,executor,times,2,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,2,notify,job,timeout,eq,job,id,any,uuid,class,assert,true,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void jobTimeoutAfterLostLeadership() throws Exception;1522681180;Tests that a timeout get cancelled once a job leader has been found. Furthermore, it tests_that a new timeout is registered after the jobmanager has lost leadership.;@Test(timeout = 10000)_	public void jobTimeoutAfterLostLeadership() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final JobMasterId leaderId = JobMasterId.generate()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		SettableLeaderRetrievalService leaderRetrievalService = new SettableLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledFuture<?> timeout1 = mock(ScheduledFuture.class)__		ScheduledFuture<?> timeout2 = mock(ScheduledFuture.class)__		final Queue<ScheduledFuture<?>> timeoutQueue = new ArrayDeque<>(Arrays.asList(timeout1, timeout2))__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		final AtomicReference<Runnable> lastRunnable = new AtomicReference<>()__		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastRunnable.set((Runnable) invocation.getArguments()[0])___				return timeoutQueue.poll()__			}_		}).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		final AtomicReference<UUID> lastTimeoutId = new AtomicReference<>()___		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastTimeoutId.set((UUID) invocation.getArguments()[1])__				return null__			}_		}).when(jobLeaderIdActions).notifyJobTimeout(eq(jobId), any(UUID.class))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId.toUUID())___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))___		_		verify(timeout1, times(1)).cancel(anyBoolean())___		verify(scheduledExecutor, times(1)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		_		Runnable runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertFalse(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))___		_		leaderRetrievalService.notifyListener("", null)___		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))____		_		runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(2)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertTrue(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))__	};tests,that,a,timeout,get,cancelled,once,a,job,leader,has,been,found,furthermore,it,tests,that,a,new,timeout,is,registered,after,the,jobmanager,has,lost,leadership;test,timeout,10000,public,void,job,timeout,after,lost,leadership,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,job,master,id,leader,id,job,master,id,generate,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,settable,leader,retrieval,service,leader,retrieval,service,new,settable,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,future,timeout1,mock,scheduled,future,class,scheduled,future,timeout2,mock,scheduled,future,class,final,queue,scheduled,future,timeout,queue,new,array,deque,arrays,as,list,timeout1,timeout2,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,final,atomic,reference,runnable,last,runnable,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,runnable,set,runnable,invocation,get,arguments,0,return,timeout,queue,poll,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,final,atomic,reference,uuid,last,timeout,id,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,timeout,id,set,uuid,invocation,get,arguments,1,return,null,when,job,leader,id,actions,notify,job,timeout,eq,job,id,any,uuid,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,to,uuid,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id,verify,timeout1,times,1,cancel,any,boolean,verify,scheduled,executor,times,1,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,any,uuid,class,assert,false,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get,leader,retrieval,service,notify,listener,null,verify,scheduled,executor,times,2,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,2,notify,job,timeout,eq,job,id,any,uuid,class,assert,true,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void jobTimeoutAfterLostLeadership() throws Exception;1526494919;Tests that a timeout get cancelled once a job leader has been found. Furthermore, it tests_that a new timeout is registered after the jobmanager has lost leadership.;@Test(timeout = 10000)_	public void jobTimeoutAfterLostLeadership() throws Exception {_		final JobID jobId = new JobID()__		final String address = "foobar"__		final JobMasterId leaderId = JobMasterId.generate()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		SettableLeaderRetrievalService leaderRetrievalService = new SettableLeaderRetrievalService(_			null,_			null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledFuture<?> timeout1 = mock(ScheduledFuture.class)__		ScheduledFuture<?> timeout2 = mock(ScheduledFuture.class)__		final Queue<ScheduledFuture<?>> timeoutQueue = new ArrayDeque<>(Arrays.asList(timeout1, timeout2))__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		final AtomicReference<Runnable> lastRunnable = new AtomicReference<>()__		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastRunnable.set((Runnable) invocation.getArguments()[0])___				return timeoutQueue.poll()__			}_		}).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		final AtomicReference<UUID> lastTimeoutId = new AtomicReference<>()___		doAnswer(new Answer() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Throwable {_				lastTimeoutId.set((UUID) invocation.getArguments()[1])__				return null__			}_		}).when(jobLeaderIdActions).notifyJobTimeout(eq(jobId), any(UUID.class))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		leaderRetrievalService.notifyListener(address, leaderId.toUUID())___		assertEquals(leaderId, leaderIdFuture.get())___		assertTrue(jobLeaderIdService.containsJob(jobId))___		_		verify(timeout1, times(1)).cancel(anyBoolean())___		verify(scheduledExecutor, times(1)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		_		Runnable runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(1)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertFalse(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))___		_		leaderRetrievalService.notifyListener("", null)___		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))____		_		runnable = lastRunnable.get()___		assertNotNull(runnable)___		runnable.run()___		verify(jobLeaderIdActions, times(2)).notifyJobTimeout(eq(jobId), any(UUID.class))___		_		assertTrue(jobLeaderIdService.isValidTimeout(jobId, lastTimeoutId.get()))__	};tests,that,a,timeout,get,cancelled,once,a,job,leader,has,been,found,furthermore,it,tests,that,a,new,timeout,is,registered,after,the,jobmanager,has,lost,leadership;test,timeout,10000,public,void,job,timeout,after,lost,leadership,throws,exception,final,job,id,job,id,new,job,id,final,string,address,foobar,final,job,master,id,leader,id,job,master,id,generate,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,settable,leader,retrieval,service,leader,retrieval,service,new,settable,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,future,timeout1,mock,scheduled,future,class,scheduled,future,timeout2,mock,scheduled,future,class,final,queue,scheduled,future,timeout,queue,new,array,deque,arrays,as,list,timeout1,timeout2,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,final,atomic,reference,runnable,last,runnable,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,runnable,set,runnable,invocation,get,arguments,0,return,timeout,queue,poll,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,final,atomic,reference,uuid,last,timeout,id,new,atomic,reference,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,last,timeout,id,set,uuid,invocation,get,arguments,1,return,null,when,job,leader,id,actions,notify,job,timeout,eq,job,id,any,uuid,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,leader,retrieval,service,notify,listener,address,leader,id,to,uuid,assert,equals,leader,id,leader,id,future,get,assert,true,job,leader,id,service,contains,job,job,id,verify,timeout1,times,1,cancel,any,boolean,verify,scheduled,executor,times,1,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,1,notify,job,timeout,eq,job,id,any,uuid,class,assert,false,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get,leader,retrieval,service,notify,listener,null,verify,scheduled,executor,times,2,schedule,any,runnable,class,any,long,any,time,unit,class,runnable,last,runnable,get,assert,not,null,runnable,runnable,run,verify,job,leader,id,actions,times,2,notify,job,timeout,eq,job,id,any,uuid,class,assert,true,job,leader,id,service,is,valid,timeout,job,id,last,timeout,id,get
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testRemovingJob() throws Exception;1489413798;Tests that removing a job completes the job leader id future exceptionally;@Test(timeout = 10000)_	public void testRemovingJob() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService()___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		Future<UUID> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		jobLeaderIdService.removeJob(jobId)___		assertFalse(jobLeaderIdService.containsJob(jobId))___		try {_			leaderIdFuture.get()___			fail("The leader id future should be completed exceptionally.")__		} catch (ExecutionException ignored) {_			_		}_	};tests,that,removing,a,job,completes,the,job,leader,id,future,exceptionally;test,timeout,10000,public,void,test,removing,job,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,future,uuid,leader,id,future,job,leader,id,service,get,leader,id,job,id,job,leader,id,service,remove,job,job,id,assert,false,job,leader,id,service,contains,job,job,id,try,leader,id,future,get,fail,the,leader,id,future,should,be,completed,exceptionally,catch,execution,exception,ignored
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testRemovingJob() throws Exception;1490174800;Tests that removing a job completes the job leader id future exceptionally;@Test(timeout = 10000)_	public void testRemovingJob() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(null, null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		Future<UUID> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		jobLeaderIdService.removeJob(jobId)___		assertFalse(jobLeaderIdService.containsJob(jobId))___		try {_			leaderIdFuture.get()___			fail("The leader id future should be completed exceptionally.")__		} catch (ExecutionException ignored) {_			_		}_	};tests,that,removing,a,job,completes,the,job,leader,id,future,exceptionally;test,timeout,10000,public,void,test,removing,job,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,future,uuid,leader,id,future,job,leader,id,service,get,leader,id,job,id,job,leader,id,service,remove,job,job,id,assert,false,job,leader,id,service,contains,job,job,id,try,leader,id,future,get,fail,the,leader,id,future,should,be,completed,exceptionally,catch,execution,exception,ignored
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testRemovingJob() throws Exception;1501058997;Tests that removing a job completes the job leader id future exceptionally;@Test(timeout = 10000)_	public void testRemovingJob() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(null, null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		Future<UUID> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		jobLeaderIdService.removeJob(jobId)___		assertFalse(jobLeaderIdService.containsJob(jobId))___		try {_			leaderIdFuture.get()___			fail("The leader id future should be completed exceptionally.")__		} catch (ExecutionException ignored) {_			_		}_	};tests,that,removing,a,job,completes,the,job,leader,id,future,exceptionally;test,timeout,10000,public,void,test,removing,job,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,future,uuid,leader,id,future,job,leader,id,service,get,leader,id,job,id,job,leader,id,service,remove,job,job,id,assert,false,job,leader,id,service,contains,job,job,id,try,leader,id,future,get,fail,the,leader,id,future,should,be,completed,exceptionally,catch,execution,exception,ignored
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testRemovingJob() throws Exception;1501760738;Tests that removing a job completes the job leader id future exceptionally;@Test(timeout = 10000)_	public void testRemovingJob() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(null, null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<UUID> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		jobLeaderIdService.removeJob(jobId)___		assertFalse(jobLeaderIdService.containsJob(jobId))___		try {_			leaderIdFuture.get()___			fail("The leader id future should be completed exceptionally.")__		} catch (ExecutionException ignored) {_			_		}_	};tests,that,removing,a,job,completes,the,job,leader,id,future,exceptionally;test,timeout,10000,public,void,test,removing,job,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,uuid,leader,id,future,job,leader,id,service,get,leader,id,job,id,job,leader,id,service,remove,job,job,id,assert,false,job,leader,id,service,contains,job,job,id,try,leader,id,future,get,fail,the,leader,id,future,should,be,completed,exceptionally,catch,execution,exception,ignored
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testRemovingJob() throws Exception;1504608225;Tests that removing a job completes the job leader id future exceptionally;@Test(timeout = 10000)_	public void testRemovingJob() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(null, null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		jobLeaderIdService.removeJob(jobId)___		assertFalse(jobLeaderIdService.containsJob(jobId))___		try {_			leaderIdFuture.get()___			fail("The leader id future should be completed exceptionally.")__		} catch (ExecutionException ignored) {_			_		}_	};tests,that,removing,a,job,completes,the,job,leader,id,future,exceptionally;test,timeout,10000,public,void,test,removing,job,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,job,leader,id,service,remove,job,job,id,assert,false,job,leader,id,service,contains,job,job,id,try,leader,id,future,get,fail,the,leader,id,future,should,be,completed,exceptionally,catch,execution,exception,ignored
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testRemovingJob() throws Exception;1515481550;Tests that removing a job completes the job leader id future exceptionally;@Test(timeout = 10000)_	public void testRemovingJob() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		TestingLeaderRetrievalService leaderRetrievalService = new TestingLeaderRetrievalService(null, null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		jobLeaderIdService.removeJob(jobId)___		assertFalse(jobLeaderIdService.containsJob(jobId))___		try {_			leaderIdFuture.get()___			fail("The leader id future should be completed exceptionally.")__		} catch (ExecutionException ignored) {_			_		}_	};tests,that,removing,a,job,completes,the,job,leader,id,future,exceptionally;test,timeout,10000,public,void,test,removing,job,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,testing,leader,retrieval,service,leader,retrieval,service,new,testing,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,job,leader,id,service,remove,job,job,id,assert,false,job,leader,id,service,contains,job,job,id,try,leader,id,future,get,fail,the,leader,id,future,should,be,completed,exceptionally,catch,execution,exception,ignored
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testRemovingJob() throws Exception;1519638690;Tests that removing a job completes the job leader id future exceptionally;@Test(timeout = 10000)_	public void testRemovingJob() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		SettableLeaderRetrievalService leaderRetrievalService = new SettableLeaderRetrievalService(null, null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		jobLeaderIdService.removeJob(jobId)___		assertFalse(jobLeaderIdService.containsJob(jobId))___		try {_			leaderIdFuture.get()___			fail("The leader id future should be completed exceptionally.")__		} catch (ExecutionException ignored) {_			_		}_	};tests,that,removing,a,job,completes,the,job,leader,id,future,exceptionally;test,timeout,10000,public,void,test,removing,job,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,settable,leader,retrieval,service,leader,retrieval,service,new,settable,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,job,leader,id,service,remove,job,job,id,assert,false,job,leader,id,service,contains,job,job,id,try,leader,id,future,get,fail,the,leader,id,future,should,be,completed,exceptionally,catch,execution,exception,ignored
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testRemovingJob() throws Exception;1522681180;Tests that removing a job completes the job leader id future exceptionally;@Test(timeout = 10000)_	public void testRemovingJob() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		SettableLeaderRetrievalService leaderRetrievalService = new SettableLeaderRetrievalService(null, null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		jobLeaderIdService.removeJob(jobId)___		assertFalse(jobLeaderIdService.containsJob(jobId))___		try {_			leaderIdFuture.get()___			fail("The leader id future should be completed exceptionally.")__		} catch (ExecutionException ignored) {_			_		}_	};tests,that,removing,a,job,completes,the,job,leader,id,future,exceptionally;test,timeout,10000,public,void,test,removing,job,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,settable,leader,retrieval,service,leader,retrieval,service,new,settable,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,job,leader,id,service,remove,job,job,id,assert,false,job,leader,id,service,contains,job,job,id,try,leader,id,future,get,fail,the,leader,id,future,should,be,completed,exceptionally,catch,execution,exception,ignored
JobLeaderIdServiceTest -> @Test(timeout = 10000) 	public void testRemovingJob() throws Exception;1526494919;Tests that removing a job completes the job leader id future exceptionally;@Test(timeout = 10000)_	public void testRemovingJob() throws Exception {_		final JobID jobId = new JobID()__		TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		SettableLeaderRetrievalService leaderRetrievalService = new SettableLeaderRetrievalService(null, null)___		highAvailabilityServices.setJobMasterLeaderRetriever(jobId, leaderRetrievalService)___		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		Time timeout = Time.milliseconds(5000L)__		JobLeaderIdActions jobLeaderIdActions = mock(JobLeaderIdActions.class)___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			scheduledExecutor,_			timeout)___		jobLeaderIdService.start(jobLeaderIdActions)___		jobLeaderIdService.addJob(jobId)___		CompletableFuture<JobMasterId> leaderIdFuture = jobLeaderIdService.getLeaderId(jobId)___		_		jobLeaderIdService.removeJob(jobId)___		assertFalse(jobLeaderIdService.containsJob(jobId))___		try {_			leaderIdFuture.get()___			fail("The leader id future should be completed exceptionally.")__		} catch (ExecutionException ignored) {_			_		}_	};tests,that,removing,a,job,completes,the,job,leader,id,future,exceptionally;test,timeout,10000,public,void,test,removing,job,throws,exception,final,job,id,job,id,new,job,id,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,settable,leader,retrieval,service,leader,retrieval,service,new,settable,leader,retrieval,service,null,null,high,availability,services,set,job,master,leader,retriever,job,id,leader,retrieval,service,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,time,timeout,time,milliseconds,5000l,job,leader,id,actions,job,leader,id,actions,mock,job,leader,id,actions,class,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,scheduled,executor,timeout,job,leader,id,service,start,job,leader,id,actions,job,leader,id,service,add,job,job,id,completable,future,job,master,id,leader,id,future,job,leader,id,service,get,leader,id,job,id,job,leader,id,service,remove,job,job,id,assert,false,job,leader,id,service,contains,job,job,id,try,leader,id,future,get,fail,the,leader,id,future,should,be,completed,exceptionally,catch,execution,exception,ignored
