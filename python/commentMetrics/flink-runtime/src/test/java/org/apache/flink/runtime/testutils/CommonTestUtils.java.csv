# id;timestamp;commentText;codeText;commentWords;codeWords
CommonTestUtils -> @SuppressWarnings("unchecked") 	public static <T extends IOReadableWritable> T createCopyWritable(final T original) throws IOException;1411236167;Creates a copy of the given {@link IOReadableWritable} object by an in-memory serialization and subsequent_deserialization.__@param original_the original object to be copied_@return the copy of original object created by the original object's serialization/deserialization methods_@throws IOException_thrown if an error occurs while creating the copy of the object;@SuppressWarnings("unchecked")_	public static <T extends IOReadableWritable> T createCopyWritable(final T original) throws IOException {__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		final DataOutputStream dos = new DataOutputStream(baos)___		original.write(new OutputViewDataOutputStreamWrapper(dos))___		final String className = original.getClass().getName()___		Class<T> clazz = null___		try {_			clazz = (Class<T>) Class.forName(className)__		} catch (ClassNotFoundException e) {_			fail(e.getMessage())__		}__		T copy = null__		try {_			copy = clazz.newInstance()__		} catch (Throwable t) {_			t.printStackTrace()__			fail(t.getMessage())__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		final DataInputStream dis = new DataInputStream(bais)___		copy.read(new InputViewDataInputStreamWrapper(dis))__		if (dis.available() > 0) {_			throw new IOException("The coped result was not fully consumed.")__		}__		return copy__	};creates,a,copy,of,the,given,link,ioreadable,writable,object,by,an,in,memory,serialization,and,subsequent,deserialization,param,original,the,original,object,to,be,copied,return,the,copy,of,original,object,created,by,the,original,object,s,serialization,deserialization,methods,throws,ioexception,thrown,if,an,error,occurs,while,creating,the,copy,of,the,object;suppress,warnings,unchecked,public,static,t,extends,ioreadable,writable,t,create,copy,writable,final,t,original,throws,ioexception,final,byte,array,output,stream,baos,new,byte,array,output,stream,final,data,output,stream,dos,new,data,output,stream,baos,original,write,new,output,view,data,output,stream,wrapper,dos,final,string,class,name,original,get,class,get,name,class,t,clazz,null,try,clazz,class,t,class,for,name,class,name,catch,class,not,found,exception,e,fail,e,get,message,t,copy,null,try,copy,clazz,new,instance,catch,throwable,t,t,print,stack,trace,fail,t,get,message,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,data,input,stream,dis,new,data,input,stream,bais,copy,read,new,input,view,data,input,stream,wrapper,dis,if,dis,available,0,throw,new,ioexception,the,coped,result,was,not,fully,consumed,return,copy
CommonTestUtils -> @SuppressWarnings("unchecked") 	public static <T extends IOReadableWritable> T createCopyWritable(final T original) throws IOException;1411473593;Creates a copy of the given {@link IOReadableWritable} object by an in-memory serialization and subsequent_deserialization.__@param original_the original object to be copied_@return the copy of original object created by the original object's serialization/deserialization methods_@throws IOException_thrown if an error occurs while creating the copy of the object;@SuppressWarnings("unchecked")_	public static <T extends IOReadableWritable> T createCopyWritable(final T original) throws IOException {__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		final DataOutputStream dos = new DataOutputStream(baos)___		original.write(new OutputViewDataOutputStreamWrapper(dos))___		final String className = original.getClass().getName()___		Class<T> clazz = null___		try {_			clazz = (Class<T>) Class.forName(className)__		} catch (ClassNotFoundException e) {_			fail(e.getMessage())__		}__		T copy = null__		try {_			copy = clazz.newInstance()__		} catch (Throwable t) {_			t.printStackTrace()__			fail(t.getMessage())__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		final DataInputStream dis = new DataInputStream(bais)___		copy.read(new InputViewDataInputStreamWrapper(dis))__		if (dis.available() > 0) {_			throw new IOException("The coped result was not fully consumed.")__		}__		return copy__	};creates,a,copy,of,the,given,link,ioreadable,writable,object,by,an,in,memory,serialization,and,subsequent,deserialization,param,original,the,original,object,to,be,copied,return,the,copy,of,original,object,created,by,the,original,object,s,serialization,deserialization,methods,throws,ioexception,thrown,if,an,error,occurs,while,creating,the,copy,of,the,object;suppress,warnings,unchecked,public,static,t,extends,ioreadable,writable,t,create,copy,writable,final,t,original,throws,ioexception,final,byte,array,output,stream,baos,new,byte,array,output,stream,final,data,output,stream,dos,new,data,output,stream,baos,original,write,new,output,view,data,output,stream,wrapper,dos,final,string,class,name,original,get,class,get,name,class,t,clazz,null,try,clazz,class,t,class,for,name,class,name,catch,class,not,found,exception,e,fail,e,get,message,t,copy,null,try,copy,clazz,new,instance,catch,throwable,t,t,print,stack,trace,fail,t,get,message,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,data,input,stream,dis,new,data,input,stream,bais,copy,read,new,input,view,data,input,stream,wrapper,dis,if,dis,available,0,throw,new,ioexception,the,coped,result,was,not,fully,consumed,return,copy
CommonTestUtils -> @SuppressWarnings("unchecked") 	public static <T extends IOReadableWritable> T createCopyWritable(final T original) throws IOException;1424769270;Creates a copy of the given {@link IOReadableWritable} object by an in-memory serialization and subsequent_deserialization.__@param original_the original object to be copied_@return the copy of original object created by the original object's serialization/deserialization methods_@throws IOException_thrown if an error occurs while creating the copy of the object;@SuppressWarnings("unchecked")_	public static <T extends IOReadableWritable> T createCopyWritable(final T original) throws IOException {__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		final DataOutputStream dos = new DataOutputStream(baos)___		original.write(new OutputViewDataOutputStreamWrapper(dos))___		final String className = original.getClass().getName()___		Class<T> clazz = null___		try {_			clazz = (Class<T>) Class.forName(className)__		} catch (ClassNotFoundException e) {_			fail(e.getMessage())__		}__		T copy = null__		try {_			copy = clazz.newInstance()__		} catch (Throwable t) {_			t.printStackTrace()__			fail(t.getMessage())__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		final DataInputStream dis = new DataInputStream(bais)___		copy.read(new InputViewDataInputStreamWrapper(dis))__		if (dis.available() > 0) {_			throw new IOException("The coped result was not fully consumed.")__		}__		return copy__	};creates,a,copy,of,the,given,link,ioreadable,writable,object,by,an,in,memory,serialization,and,subsequent,deserialization,param,original,the,original,object,to,be,copied,return,the,copy,of,original,object,created,by,the,original,object,s,serialization,deserialization,methods,throws,ioexception,thrown,if,an,error,occurs,while,creating,the,copy,of,the,object;suppress,warnings,unchecked,public,static,t,extends,ioreadable,writable,t,create,copy,writable,final,t,original,throws,ioexception,final,byte,array,output,stream,baos,new,byte,array,output,stream,final,data,output,stream,dos,new,data,output,stream,baos,original,write,new,output,view,data,output,stream,wrapper,dos,final,string,class,name,original,get,class,get,name,class,t,clazz,null,try,clazz,class,t,class,for,name,class,name,catch,class,not,found,exception,e,fail,e,get,message,t,copy,null,try,copy,clazz,new,instance,catch,throwable,t,t,print,stack,trace,fail,t,get,message,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,data,input,stream,dis,new,data,input,stream,bais,copy,read,new,input,view,data,input,stream,wrapper,dis,if,dis,available,0,throw,new,ioexception,the,coped,result,was,not,fully,consumed,return,copy
CommonTestUtils -> @SuppressWarnings("unchecked") 	public static <T extends IOReadableWritable> T createCopyWritable(final T original) throws IOException;1424777039;Creates a copy of the given {@link IOReadableWritable} object by an in-memory serialization and subsequent_deserialization.__@param original_the original object to be copied_@return the copy of original object created by the original object's serialization/deserialization methods_@throws IOException_thrown if an error occurs while creating the copy of the object;@SuppressWarnings("unchecked")_	public static <T extends IOReadableWritable> T createCopyWritable(final T original) throws IOException {__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		final DataOutputStream dos = new DataOutputStream(baos)___		original.write(new OutputViewDataOutputStreamWrapper(dos))___		final String className = original.getClass().getName()___		Class<T> clazz = null___		try {_			clazz = (Class<T>) Class.forName(className)__		} catch (ClassNotFoundException e) {_			fail(e.getMessage())__		}__		T copy = null__		try {_			copy = clazz.newInstance()__		} catch (Throwable t) {_			t.printStackTrace()__			fail(t.getMessage())__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		final DataInputStream dis = new DataInputStream(bais)___		copy.read(new InputViewDataInputStreamWrapper(dis))__		if (dis.available() > 0) {_			throw new IOException("The coped result was not fully consumed.")__		}__		return copy__	};creates,a,copy,of,the,given,link,ioreadable,writable,object,by,an,in,memory,serialization,and,subsequent,deserialization,param,original,the,original,object,to,be,copied,return,the,copy,of,original,object,created,by,the,original,object,s,serialization,deserialization,methods,throws,ioexception,thrown,if,an,error,occurs,while,creating,the,copy,of,the,object;suppress,warnings,unchecked,public,static,t,extends,ioreadable,writable,t,create,copy,writable,final,t,original,throws,ioexception,final,byte,array,output,stream,baos,new,byte,array,output,stream,final,data,output,stream,dos,new,data,output,stream,baos,original,write,new,output,view,data,output,stream,wrapper,dos,final,string,class,name,original,get,class,get,name,class,t,clazz,null,try,clazz,class,t,class,for,name,class,name,catch,class,not,found,exception,e,fail,e,get,message,t,copy,null,try,copy,clazz,new,instance,catch,throwable,t,t,print,stack,trace,fail,t,get,message,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,data,input,stream,dis,new,data,input,stream,bais,copy,read,new,input,view,data,input,stream,wrapper,dis,if,dis,available,0,throw,new,ioexception,the,coped,result,was,not,fully,consumed,return,copy
CommonTestUtils -> public static boolean isProcessAlive(Process process);1424769270;Checks whether a process is still alive. Utility method for JVM versions before 1.8,_where no direct method to check that is available.__@param process The process to check._@return True, if the process is alive, false otherwise.;public static boolean isProcessAlive(Process process) {_		if (process == null) {_			return false___		}_		try {_			process.exitValue()__			return false__		}_		catch(IllegalThreadStateException e) {_			return true__		}_	};checks,whether,a,process,is,still,alive,utility,method,for,jvm,versions,before,1,8,where,no,direct,method,to,check,that,is,available,param,process,the,process,to,check,return,true,if,the,process,is,alive,false,otherwise;public,static,boolean,is,process,alive,process,process,if,process,null,return,false,try,process,exit,value,return,false,catch,illegal,thread,state,exception,e,return,true
CommonTestUtils -> public static boolean isProcessAlive(Process process);1424777039;Checks whether a process is still alive. Utility method for JVM versions before 1.8,_where no direct method to check that is available.__@param process The process to check._@return True, if the process is alive, false otherwise.;public static boolean isProcessAlive(Process process) {_		if (process == null) {_			return false___		}_		try {_			process.exitValue()__			return false__		}_		catch(IllegalThreadStateException e) {_			return true__		}_	};checks,whether,a,process,is,still,alive,utility,method,for,jvm,versions,before,1,8,where,no,direct,method,to,check,that,is,available,param,process,the,process,to,check,return,true,if,the,process,is,alive,false,otherwise;public,static,boolean,is,process,alive,process,process,if,process,null,return,false,try,process,exit,value,return,false,catch,illegal,thread,state,exception,e,return,true
CommonTestUtils -> public static boolean isProcessAlive(Process process);1441027768;Checks whether a process is still alive. Utility method for JVM versions before 1.8,_where no direct method to check that is available.__@param process The process to check._@return True, if the process is alive, false otherwise.;public static boolean isProcessAlive(Process process) {_		if (process == null) {_			return false___		}_		try {_			process.exitValue()__			return false__		}_		catch(IllegalThreadStateException e) {_			return true__		}_	};checks,whether,a,process,is,still,alive,utility,method,for,jvm,versions,before,1,8,where,no,direct,method,to,check,that,is,available,param,process,the,process,to,check,return,true,if,the,process,is,alive,false,otherwise;public,static,boolean,is,process,alive,process,process,if,process,null,return,false,try,process,exit,value,return,false,catch,illegal,thread,state,exception,e,return,true
CommonTestUtils -> public static boolean isProcessAlive(Process process);1445293011;Checks whether a process is still alive. Utility method for JVM versions before 1.8,_where no direct method to check that is available.__@param process The process to check._@return True, if the process is alive, false otherwise.;public static boolean isProcessAlive(Process process) {_		if (process == null) {_			return false___		}_		try {_			process.exitValue()__			return false__		}_		catch(IllegalThreadStateException e) {_			return true__		}_	};checks,whether,a,process,is,still,alive,utility,method,for,jvm,versions,before,1,8,where,no,direct,method,to,check,that,is,available,param,process,the,process,to,check,return,true,if,the,process,is,alive,false,otherwise;public,static,boolean,is,process,alive,process,process,if,process,null,return,false,try,process,exit,value,return,false,catch,illegal,thread,state,exception,e,return,true
CommonTestUtils -> public static boolean isProcessAlive(Process process);1455114436;Checks whether a process is still alive. Utility method for JVM versions before 1.8,_where no direct method to check that is available.__@param process The process to check._@return True, if the process is alive, false otherwise.;public static boolean isProcessAlive(Process process) {_		if (process == null) {_			return false___		}_		try {_			process.exitValue()__			return false__		}_		catch(IllegalThreadStateException e) {_			return true__		}_	};checks,whether,a,process,is,still,alive,utility,method,for,jvm,versions,before,1,8,where,no,direct,method,to,check,that,is,available,param,process,the,process,to,check,return,true,if,the,process,is,alive,false,otherwise;public,static,boolean,is,process,alive,process,process,if,process,null,return,false,try,process,exit,value,return,false,catch,illegal,thread,state,exception,e,return,true
CommonTestUtils -> public static boolean isProcessAlive(Process process);1460741894;Checks whether a process is still alive. Utility method for JVM versions before 1.8,_where no direct method to check that is available.__@param process The process to check._@return True, if the process is alive, false otherwise.;public static boolean isProcessAlive(Process process) {_		if (process == null) {_			return false___		}_		try {_			process.exitValue()__			return false__		}_		catch(IllegalThreadStateException e) {_			return true__		}_	};checks,whether,a,process,is,still,alive,utility,method,for,jvm,versions,before,1,8,where,no,direct,method,to,check,that,is,available,param,process,the,process,to,check,return,true,if,the,process,is,alive,false,otherwise;public,static,boolean,is,process,alive,process,process,if,process,null,return,false,try,process,exit,value,return,false,catch,illegal,thread,state,exception,e,return,true
CommonTestUtils -> public static boolean isProcessAlive(Process process);1470073933;Checks whether a process is still alive. Utility method for JVM versions before 1.8,_where no direct method to check that is available.__@param process The process to check._@return True, if the process is alive, false otherwise.;public static boolean isProcessAlive(Process process) {_		if (process == null) {_			return false___		}_		try {_			process.exitValue()__			return false__		}_		catch(IllegalThreadStateException e) {_			return true__		}_	};checks,whether,a,process,is,still,alive,utility,method,for,jvm,versions,before,1,8,where,no,direct,method,to,check,that,is,available,param,process,the,process,to,check,return,true,if,the,process,is,alive,false,otherwise;public,static,boolean,is,process,alive,process,process,if,process,null,return,false,try,process,exit,value,return,false,catch,illegal,thread,state,exception,e,return,true
CommonTestUtils -> public static boolean isProcessAlive(Process process);1474308053;Checks whether a process is still alive. Utility method for JVM versions before 1.8,_where no direct method to check that is available.__@param process The process to check._@return True, if the process is alive, false otherwise.;public static boolean isProcessAlive(Process process) {_		if (process == null) {_			return false___		}_		try {_			process.exitValue()__			return false__		}_		catch(IllegalThreadStateException e) {_			return true__		}_	};checks,whether,a,process,is,still,alive,utility,method,for,jvm,versions,before,1,8,where,no,direct,method,to,check,that,is,available,param,process,the,process,to,check,return,true,if,the,process,is,alive,false,otherwise;public,static,boolean,is,process,alive,process,process,if,process,null,return,false,try,process,exit,value,return,false,catch,illegal,thread,state,exception,e,return,true
CommonTestUtils -> public static boolean isProcessAlive(Process process);1475842467;Checks whether a process is still alive. Utility method for JVM versions before 1.8,_where no direct method to check that is available.__@param process The process to check._@return True, if the process is alive, false otherwise.;public static boolean isProcessAlive(Process process) {_		if (process == null) {_			return false___		}_		try {_			process.exitValue()__			return false__		}_		catch(IllegalThreadStateException e) {_			return true__		}_	};checks,whether,a,process,is,still,alive,utility,method,for,jvm,versions,before,1,8,where,no,direct,method,to,check,that,is,available,param,process,the,process,to,check,return,true,if,the,process,is,alive,false,otherwise;public,static,boolean,is,process,alive,process,process,if,process,null,return,false,try,process,exit,value,return,false,catch,illegal,thread,state,exception,e,return,true
CommonTestUtils -> public static boolean isProcessAlive(Process process);1534779428;Checks whether a process is still alive. Utility method for JVM versions before 1.8,_where no direct method to check that is available.__@param process The process to check._@return True, if the process is alive, false otherwise.;public static boolean isProcessAlive(Process process) {_		if (process == null) {_			return false___		}_		try {_			process.exitValue()__			return false__		}_		catch(IllegalThreadStateException e) {_			return true__		}_	};checks,whether,a,process,is,still,alive,utility,method,for,jvm,versions,before,1,8,where,no,direct,method,to,check,that,is,available,param,process,the,process,to,check,return,true,if,the,process,is,alive,false,otherwise;public,static,boolean,is,process,alive,process,process,if,process,null,return,false,try,process,exit,value,return,false,catch,illegal,thread,state,exception,e,return,true
CommonTestUtils -> public static boolean isProcessAlive(Process process);1549360056;Checks whether a process is still alive. Utility method for JVM versions before 1.8,_where no direct method to check that is available.__@param process The process to check._@return True, if the process is alive, false otherwise.;public static boolean isProcessAlive(Process process) {_		if (process == null) {_			return false___		}_		try {_			process.exitValue()__			return false__		}_		catch(IllegalThreadStateException e) {_			return true__		}_	};checks,whether,a,process,is,still,alive,utility,method,for,jvm,versions,before,1,8,where,no,direct,method,to,check,that,is,available,param,process,the,process,to,check,return,true,if,the,process,is,alive,false,otherwise;public,static,boolean,is,process,alive,process,process,if,process,null,return,false,try,process,exit,value,return,false,catch,illegal,thread,state,exception,e,return,true
CommonTestUtils -> public static boolean isProcessAlive(Process process);1549360057;Checks whether a process is still alive. Utility method for JVM versions before 1.8,_where no direct method to check that is available.__@param process The process to check._@return True, if the process is alive, false otherwise.;public static boolean isProcessAlive(Process process) {_		if (process == null) {_			return false___		}_		try {_			process.exitValue()__			return false__		}_		catch(IllegalThreadStateException e) {_			return true__		}_	};checks,whether,a,process,is,still,alive,utility,method,for,jvm,versions,before,1,8,where,no,direct,method,to,check,that,is,available,param,process,the,process,to,check,return,true,if,the,process,is,alive,false,otherwise;public,static,boolean,is,process,alive,process,process,if,process,null,return,false,try,process,exit,value,return,false,catch,illegal,thread,state,exception,e,return,true
CommonTestUtils -> public static boolean isProcessAlive(Process process);1550148338;Checks whether a process is still alive. Utility method for JVM versions before 1.8,_where no direct method to check that is available.__@param process The process to check._@return True, if the process is alive, false otherwise.;public static boolean isProcessAlive(Process process) {_		if (process == null) {_			return false___		}_		try {_			process.exitValue()__			return false__		}_		catch(IllegalThreadStateException e) {_			return true__		}_	};checks,whether,a,process,is,still,alive,utility,method,for,jvm,versions,before,1,8,where,no,direct,method,to,check,that,is,available,param,process,the,process,to,check,return,true,if,the,process,is,alive,false,otherwise;public,static,boolean,is,process,alive,process,process,if,process,null,return,false,try,process,exit,value,return,false,catch,illegal,thread,state,exception,e,return,true
CommonTestUtils -> public static String getJavaCommandPath();1424769270;Tries to get the java executable command with which the current JVM was started._Returns null, if the command could not be found.__@return The java executable command.;public static String getJavaCommandPath() {_		File javaHome = new File(System.getProperty("java.home"))___		String path1 = new File(javaHome, "java").getAbsolutePath()__		String path2 = new File(new File(javaHome, "bin"), "java").getAbsolutePath()___		try {_			ProcessBuilder bld = new ProcessBuilder(path1, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path1__			}_		}_		catch (Throwable t) {_			_		}__		try {_			ProcessBuilder bld = new ProcessBuilder(path2, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path2__			}_		}_		catch (Throwable tt) {_			_		}_		return null__	};tries,to,get,the,java,executable,command,with,which,the,current,jvm,was,started,returns,null,if,the,command,could,not,be,found,return,the,java,executable,command;public,static,string,get,java,command,path,file,java,home,new,file,system,get,property,java,home,string,path1,new,file,java,home,java,get,absolute,path,string,path2,new,file,new,file,java,home,bin,java,get,absolute,path,try,process,builder,bld,new,process,builder,path1,version,process,process,bld,start,if,process,wait,for,0,return,path1,catch,throwable,t,try,process,builder,bld,new,process,builder,path2,version,process,process,bld,start,if,process,wait,for,0,return,path2,catch,throwable,tt,return,null
CommonTestUtils -> public static String getJavaCommandPath();1424777039;Tries to get the java executable command with which the current JVM was started._Returns null, if the command could not be found.__@return The java executable command.;public static String getJavaCommandPath() {_		File javaHome = new File(System.getProperty("java.home"))___		String path1 = new File(javaHome, "java").getAbsolutePath()__		String path2 = new File(new File(javaHome, "bin"), "java").getAbsolutePath()___		try {_			ProcessBuilder bld = new ProcessBuilder(path1, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path1__			}_		}_		catch (Throwable t) {_			_		}__		try {_			ProcessBuilder bld = new ProcessBuilder(path2, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path2__			}_		}_		catch (Throwable tt) {_			_		}_		return null__	};tries,to,get,the,java,executable,command,with,which,the,current,jvm,was,started,returns,null,if,the,command,could,not,be,found,return,the,java,executable,command;public,static,string,get,java,command,path,file,java,home,new,file,system,get,property,java,home,string,path1,new,file,java,home,java,get,absolute,path,string,path2,new,file,new,file,java,home,bin,java,get,absolute,path,try,process,builder,bld,new,process,builder,path1,version,process,process,bld,start,if,process,wait,for,0,return,path1,catch,throwable,t,try,process,builder,bld,new,process,builder,path2,version,process,process,bld,start,if,process,wait,for,0,return,path2,catch,throwable,tt,return,null
CommonTestUtils -> public static String getJavaCommandPath();1441027768;Tries to get the java executable command with which the current JVM was started._Returns null, if the command could not be found.__@return The java executable command.;public static String getJavaCommandPath() {_		File javaHome = new File(System.getProperty("java.home"))___		String path1 = new File(javaHome, "java").getAbsolutePath()__		String path2 = new File(new File(javaHome, "bin"), "java").getAbsolutePath()___		try {_			ProcessBuilder bld = new ProcessBuilder(path1, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path1__			}_		}_		catch (Throwable t) {_			_		}__		try {_			ProcessBuilder bld = new ProcessBuilder(path2, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path2__			}_		}_		catch (Throwable tt) {_			_		}_		return null__	};tries,to,get,the,java,executable,command,with,which,the,current,jvm,was,started,returns,null,if,the,command,could,not,be,found,return,the,java,executable,command;public,static,string,get,java,command,path,file,java,home,new,file,system,get,property,java,home,string,path1,new,file,java,home,java,get,absolute,path,string,path2,new,file,new,file,java,home,bin,java,get,absolute,path,try,process,builder,bld,new,process,builder,path1,version,process,process,bld,start,if,process,wait,for,0,return,path1,catch,throwable,t,try,process,builder,bld,new,process,builder,path2,version,process,process,bld,start,if,process,wait,for,0,return,path2,catch,throwable,tt,return,null
CommonTestUtils -> public static String getJavaCommandPath();1445293011;Tries to get the java executable command with which the current JVM was started._Returns null, if the command could not be found.__@return The java executable command.;public static String getJavaCommandPath() {_		File javaHome = new File(System.getProperty("java.home"))___		String path1 = new File(javaHome, "java").getAbsolutePath()__		String path2 = new File(new File(javaHome, "bin"), "java").getAbsolutePath()___		try {_			ProcessBuilder bld = new ProcessBuilder(path1, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path1__			}_		}_		catch (Throwable t) {_			_		}__		try {_			ProcessBuilder bld = new ProcessBuilder(path2, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path2__			}_		}_		catch (Throwable tt) {_			_		}_		return null__	};tries,to,get,the,java,executable,command,with,which,the,current,jvm,was,started,returns,null,if,the,command,could,not,be,found,return,the,java,executable,command;public,static,string,get,java,command,path,file,java,home,new,file,system,get,property,java,home,string,path1,new,file,java,home,java,get,absolute,path,string,path2,new,file,new,file,java,home,bin,java,get,absolute,path,try,process,builder,bld,new,process,builder,path1,version,process,process,bld,start,if,process,wait,for,0,return,path1,catch,throwable,t,try,process,builder,bld,new,process,builder,path2,version,process,process,bld,start,if,process,wait,for,0,return,path2,catch,throwable,tt,return,null
CommonTestUtils -> public static String getJavaCommandPath();1455114436;Tries to get the java executable command with which the current JVM was started._Returns null, if the command could not be found.__@return The java executable command.;public static String getJavaCommandPath() {_		File javaHome = new File(System.getProperty("java.home"))___		String path1 = new File(javaHome, "java").getAbsolutePath()__		String path2 = new File(new File(javaHome, "bin"), "java").getAbsolutePath()___		try {_			ProcessBuilder bld = new ProcessBuilder(path1, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path1__			}_		}_		catch (Throwable t) {_			_		}__		try {_			ProcessBuilder bld = new ProcessBuilder(path2, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path2__			}_		}_		catch (Throwable tt) {_			_		}_		return null__	};tries,to,get,the,java,executable,command,with,which,the,current,jvm,was,started,returns,null,if,the,command,could,not,be,found,return,the,java,executable,command;public,static,string,get,java,command,path,file,java,home,new,file,system,get,property,java,home,string,path1,new,file,java,home,java,get,absolute,path,string,path2,new,file,new,file,java,home,bin,java,get,absolute,path,try,process,builder,bld,new,process,builder,path1,version,process,process,bld,start,if,process,wait,for,0,return,path1,catch,throwable,t,try,process,builder,bld,new,process,builder,path2,version,process,process,bld,start,if,process,wait,for,0,return,path2,catch,throwable,tt,return,null
CommonTestUtils -> public static String getJavaCommandPath();1460741894;Tries to get the java executable command with which the current JVM was started._Returns null, if the command could not be found.__@return The java executable command.;public static String getJavaCommandPath() {_		File javaHome = new File(System.getProperty("java.home"))___		String path1 = new File(javaHome, "java").getAbsolutePath()__		String path2 = new File(new File(javaHome, "bin"), "java").getAbsolutePath()___		try {_			ProcessBuilder bld = new ProcessBuilder(path1, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path1__			}_		}_		catch (Throwable t) {_			_		}__		try {_			ProcessBuilder bld = new ProcessBuilder(path2, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path2__			}_		}_		catch (Throwable tt) {_			_		}_		return null__	};tries,to,get,the,java,executable,command,with,which,the,current,jvm,was,started,returns,null,if,the,command,could,not,be,found,return,the,java,executable,command;public,static,string,get,java,command,path,file,java,home,new,file,system,get,property,java,home,string,path1,new,file,java,home,java,get,absolute,path,string,path2,new,file,new,file,java,home,bin,java,get,absolute,path,try,process,builder,bld,new,process,builder,path1,version,process,process,bld,start,if,process,wait,for,0,return,path1,catch,throwable,t,try,process,builder,bld,new,process,builder,path2,version,process,process,bld,start,if,process,wait,for,0,return,path2,catch,throwable,tt,return,null
CommonTestUtils -> public static String getJavaCommandPath();1470073933;Tries to get the java executable command with which the current JVM was started._Returns null, if the command could not be found.__@return The java executable command.;public static String getJavaCommandPath() {_		File javaHome = new File(System.getProperty("java.home"))___		String path1 = new File(javaHome, "java").getAbsolutePath()__		String path2 = new File(new File(javaHome, "bin"), "java").getAbsolutePath()___		try {_			ProcessBuilder bld = new ProcessBuilder(path1, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path1__			}_		}_		catch (Throwable t) {_			_		}__		try {_			ProcessBuilder bld = new ProcessBuilder(path2, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path2__			}_		}_		catch (Throwable tt) {_			_		}_		return null__	};tries,to,get,the,java,executable,command,with,which,the,current,jvm,was,started,returns,null,if,the,command,could,not,be,found,return,the,java,executable,command;public,static,string,get,java,command,path,file,java,home,new,file,system,get,property,java,home,string,path1,new,file,java,home,java,get,absolute,path,string,path2,new,file,new,file,java,home,bin,java,get,absolute,path,try,process,builder,bld,new,process,builder,path1,version,process,process,bld,start,if,process,wait,for,0,return,path1,catch,throwable,t,try,process,builder,bld,new,process,builder,path2,version,process,process,bld,start,if,process,wait,for,0,return,path2,catch,throwable,tt,return,null
CommonTestUtils -> public static String getJavaCommandPath();1474308053;Tries to get the java executable command with which the current JVM was started._Returns null, if the command could not be found.__@return The java executable command.;public static String getJavaCommandPath() {_		File javaHome = new File(System.getProperty("java.home"))___		String path1 = new File(javaHome, "java").getAbsolutePath()__		String path2 = new File(new File(javaHome, "bin"), "java").getAbsolutePath()___		try {_			ProcessBuilder bld = new ProcessBuilder(path1, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path1__			}_		}_		catch (Throwable t) {_			_		}__		try {_			ProcessBuilder bld = new ProcessBuilder(path2, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path2__			}_		}_		catch (Throwable tt) {_			_		}_		return null__	};tries,to,get,the,java,executable,command,with,which,the,current,jvm,was,started,returns,null,if,the,command,could,not,be,found,return,the,java,executable,command;public,static,string,get,java,command,path,file,java,home,new,file,system,get,property,java,home,string,path1,new,file,java,home,java,get,absolute,path,string,path2,new,file,new,file,java,home,bin,java,get,absolute,path,try,process,builder,bld,new,process,builder,path1,version,process,process,bld,start,if,process,wait,for,0,return,path1,catch,throwable,t,try,process,builder,bld,new,process,builder,path2,version,process,process,bld,start,if,process,wait,for,0,return,path2,catch,throwable,tt,return,null
CommonTestUtils -> public static String getJavaCommandPath();1475842467;Tries to get the java executable command with which the current JVM was started._Returns null, if the command could not be found.__@return The java executable command.;public static String getJavaCommandPath() {_		File javaHome = new File(System.getProperty("java.home"))___		String path1 = new File(javaHome, "java").getAbsolutePath()__		String path2 = new File(new File(javaHome, "bin"), "java").getAbsolutePath()___		try {_			ProcessBuilder bld = new ProcessBuilder(path1, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path1__			}_		}_		catch (Throwable t) {_			_		}__		try {_			ProcessBuilder bld = new ProcessBuilder(path2, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path2__			}_		}_		catch (Throwable tt) {_			_		}_		return null__	};tries,to,get,the,java,executable,command,with,which,the,current,jvm,was,started,returns,null,if,the,command,could,not,be,found,return,the,java,executable,command;public,static,string,get,java,command,path,file,java,home,new,file,system,get,property,java,home,string,path1,new,file,java,home,java,get,absolute,path,string,path2,new,file,new,file,java,home,bin,java,get,absolute,path,try,process,builder,bld,new,process,builder,path1,version,process,process,bld,start,if,process,wait,for,0,return,path1,catch,throwable,t,try,process,builder,bld,new,process,builder,path2,version,process,process,bld,start,if,process,wait,for,0,return,path2,catch,throwable,tt,return,null
CommonTestUtils -> public static String getJavaCommandPath();1534779428;Tries to get the java executable command with which the current JVM was started._Returns null, if the command could not be found.__@return The java executable command.;public static String getJavaCommandPath() {_		File javaHome = new File(System.getProperty("java.home"))___		String path1 = new File(javaHome, "java").getAbsolutePath()__		String path2 = new File(new File(javaHome, "bin"), "java").getAbsolutePath()___		try {_			ProcessBuilder bld = new ProcessBuilder(path1, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path1__			}_		}_		catch (Throwable t) {_			_		}__		try {_			ProcessBuilder bld = new ProcessBuilder(path2, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path2__			}_		}_		catch (Throwable tt) {_			_		}_		return null__	};tries,to,get,the,java,executable,command,with,which,the,current,jvm,was,started,returns,null,if,the,command,could,not,be,found,return,the,java,executable,command;public,static,string,get,java,command,path,file,java,home,new,file,system,get,property,java,home,string,path1,new,file,java,home,java,get,absolute,path,string,path2,new,file,new,file,java,home,bin,java,get,absolute,path,try,process,builder,bld,new,process,builder,path1,version,process,process,bld,start,if,process,wait,for,0,return,path1,catch,throwable,t,try,process,builder,bld,new,process,builder,path2,version,process,process,bld,start,if,process,wait,for,0,return,path2,catch,throwable,tt,return,null
CommonTestUtils -> public static String getJavaCommandPath();1549360056;Tries to get the java executable command with which the current JVM was started._Returns null, if the command could not be found.__@return The java executable command.;public static String getJavaCommandPath() {_		File javaHome = new File(System.getProperty("java.home"))___		String path1 = new File(javaHome, "java").getAbsolutePath()__		String path2 = new File(new File(javaHome, "bin"), "java").getAbsolutePath()___		try {_			ProcessBuilder bld = new ProcessBuilder(path1, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path1__			}_		}_		catch (Throwable t) {_			_		}__		try {_			ProcessBuilder bld = new ProcessBuilder(path2, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path2__			}_		}_		catch (Throwable tt) {_			_		}_		return null__	};tries,to,get,the,java,executable,command,with,which,the,current,jvm,was,started,returns,null,if,the,command,could,not,be,found,return,the,java,executable,command;public,static,string,get,java,command,path,file,java,home,new,file,system,get,property,java,home,string,path1,new,file,java,home,java,get,absolute,path,string,path2,new,file,new,file,java,home,bin,java,get,absolute,path,try,process,builder,bld,new,process,builder,path1,version,process,process,bld,start,if,process,wait,for,0,return,path1,catch,throwable,t,try,process,builder,bld,new,process,builder,path2,version,process,process,bld,start,if,process,wait,for,0,return,path2,catch,throwable,tt,return,null
CommonTestUtils -> public static String getJavaCommandPath();1549360057;Tries to get the java executable command with which the current JVM was started._Returns null, if the command could not be found.__@return The java executable command.;public static String getJavaCommandPath() {_		File javaHome = new File(System.getProperty("java.home"))___		String path1 = new File(javaHome, "java").getAbsolutePath()__		String path2 = new File(new File(javaHome, "bin"), "java").getAbsolutePath()___		try {_			ProcessBuilder bld = new ProcessBuilder(path1, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path1__			}_		}_		catch (Throwable t) {_			_		}__		try {_			ProcessBuilder bld = new ProcessBuilder(path2, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path2__			}_		}_		catch (Throwable tt) {_			_		}_		return null__	};tries,to,get,the,java,executable,command,with,which,the,current,jvm,was,started,returns,null,if,the,command,could,not,be,found,return,the,java,executable,command;public,static,string,get,java,command,path,file,java,home,new,file,system,get,property,java,home,string,path1,new,file,java,home,java,get,absolute,path,string,path2,new,file,new,file,java,home,bin,java,get,absolute,path,try,process,builder,bld,new,process,builder,path1,version,process,process,bld,start,if,process,wait,for,0,return,path1,catch,throwable,t,try,process,builder,bld,new,process,builder,path2,version,process,process,bld,start,if,process,wait,for,0,return,path2,catch,throwable,tt,return,null
CommonTestUtils -> public static String getJavaCommandPath();1550148338;Tries to get the java executable command with which the current JVM was started._Returns null, if the command could not be found.__@return The java executable command.;public static String getJavaCommandPath() {_		File javaHome = new File(System.getProperty("java.home"))___		String path1 = new File(javaHome, "java").getAbsolutePath()__		String path2 = new File(new File(javaHome, "bin"), "java").getAbsolutePath()___		try {_			ProcessBuilder bld = new ProcessBuilder(path1, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path1__			}_		}_		catch (Throwable t) {_			_		}__		try {_			ProcessBuilder bld = new ProcessBuilder(path2, "-version")__			Process process = bld.start()__			if (process.waitFor() == 0) {_				return path2__			}_		}_		catch (Throwable tt) {_			_		}_		return null__	};tries,to,get,the,java,executable,command,with,which,the,current,jvm,was,started,returns,null,if,the,command,could,not,be,found,return,the,java,executable,command;public,static,string,get,java,command,path,file,java,home,new,file,system,get,property,java,home,string,path1,new,file,java,home,java,get,absolute,path,string,path2,new,file,new,file,java,home,bin,java,get,absolute,path,try,process,builder,bld,new,process,builder,path1,version,process,process,bld,start,if,process,wait,for,0,return,path1,catch,throwable,t,try,process,builder,bld,new,process,builder,path2,version,process,process,bld,start,if,process,wait,for,0,return,path2,catch,throwable,tt,return,null
CommonTestUtils -> public static String getRandomFilename();1405024514;Constructs a random filename. The filename is a string of 16 hex characters followed by a <code>.dat</code>_prefix.__@return the random filename;public static String getRandomFilename() {__		final char[] alphabeth = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }___		String filename = ""__		for (int i = 0_ i < 16_ i++) {_			filename += alphabeth[(int) (Math.random() * alphabeth.length)]__		}__		return filename + ".dat"__	};constructs,a,random,filename,the,filename,is,a,string,of,16,hex,characters,followed,by,a,code,dat,code,prefix,return,the,random,filename;public,static,string,get,random,filename,final,char,alphabeth,0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,string,filename,for,int,i,0,i,16,i,filename,alphabeth,int,math,random,alphabeth,length,return,filename,dat
CommonTestUtils -> public static String getRandomFilename();1405090423;Constructs a random filename. The filename is a string of 16 hex characters followed by a <code>.dat</code>_prefix.__@return the random filename;public static String getRandomFilename() {__		final char[] alphabeth = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }___		String filename = ""__		for (int i = 0_ i < 16_ i++) {_			filename += alphabeth[(int) (Math.random() * alphabeth.length)]__		}__		return filename + ".dat"__	};constructs,a,random,filename,the,filename,is,a,string,of,16,hex,characters,followed,by,a,code,dat,code,prefix,return,the,random,filename;public,static,string,get,random,filename,final,char,alphabeth,0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,string,filename,for,int,i,0,i,16,i,filename,alphabeth,int,math,random,alphabeth,length,return,filename,dat
CommonTestUtils -> public static String getRandomFilename();1411236167;Constructs a random filename. The filename is a string of 16 hex characters followed by a <code>.dat</code>_prefix.__@return the random filename;public static String getRandomFilename() {__		final char[] alphabeth = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }___		String filename = ""__		for (int i = 0_ i < 16_ i++) {_			filename += alphabeth[(int) (Math.random() * alphabeth.length)]__		}__		return filename + ".dat"__	};constructs,a,random,filename,the,filename,is,a,string,of,16,hex,characters,followed,by,a,code,dat,code,prefix,return,the,random,filename;public,static,string,get,random,filename,final,char,alphabeth,0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,string,filename,for,int,i,0,i,16,i,filename,alphabeth,int,math,random,alphabeth,length,return,filename,dat
CommonTestUtils -> public static String getRandomFilename();1411473593;Constructs a random filename. The filename is a string of 16 hex characters followed by a <code>.dat</code>_prefix.__@return the random filename;public static String getRandomFilename() {__		final char[] alphabeth = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }___		String filename = ""__		for (int i = 0_ i < 16_ i++) {_			filename += alphabeth[(int) (Math.random() * alphabeth.length)]__		}__		return filename + ".dat"__	};constructs,a,random,filename,the,filename,is,a,string,of,16,hex,characters,followed,by,a,code,dat,code,prefix,return,the,random,filename;public,static,string,get,random,filename,final,char,alphabeth,0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,string,filename,for,int,i,0,i,16,i,filename,alphabeth,int,math,random,alphabeth,length,return,filename,dat
CommonTestUtils -> public static void sleepUninterruptibly(long msecs);1424769270;Sleeps for a given set of milliseconds, uninterruptibly. If interrupt is called,_the sleep will continue nonetheless.__@param msecs The number of milliseconds to sleep.;public static void sleepUninterruptibly(long msecs) {_		_		long now = System.currentTimeMillis()__		long sleepUntil = now + msecs__		long remaining__		_		while ((remaining = sleepUntil - now) > 0) {_			try {_				Thread.sleep(remaining)__			}_			catch (InterruptedException e) {}_			_			now = System.currentTimeMillis()__		}_	};sleeps,for,a,given,set,of,milliseconds,uninterruptibly,if,interrupt,is,called,the,sleep,will,continue,nonetheless,param,msecs,the,number,of,milliseconds,to,sleep;public,static,void,sleep,uninterruptibly,long,msecs,long,now,system,current,time,millis,long,sleep,until,now,msecs,long,remaining,while,remaining,sleep,until,now,0,try,thread,sleep,remaining,catch,interrupted,exception,e,now,system,current,time,millis
CommonTestUtils -> public static void sleepUninterruptibly(long msecs);1424777039;Sleeps for a given set of milliseconds, uninterruptibly. If interrupt is called,_the sleep will continue nonetheless.__@param msecs The number of milliseconds to sleep.;public static void sleepUninterruptibly(long msecs) {_		_		long now = System.currentTimeMillis()__		long sleepUntil = now + msecs__		long remaining__		_		while ((remaining = sleepUntil - now) > 0) {_			try {_				Thread.sleep(remaining)__			}_			catch (InterruptedException e) {}_			_			now = System.currentTimeMillis()__		}_	};sleeps,for,a,given,set,of,milliseconds,uninterruptibly,if,interrupt,is,called,the,sleep,will,continue,nonetheless,param,msecs,the,number,of,milliseconds,to,sleep;public,static,void,sleep,uninterruptibly,long,msecs,long,now,system,current,time,millis,long,sleep,until,now,msecs,long,remaining,while,remaining,sleep,until,now,0,try,thread,sleep,remaining,catch,interrupted,exception,e,now,system,current,time,millis
CommonTestUtils -> public static void sleepUninterruptibly(long msecs);1441027768;Sleeps for a given set of milliseconds, uninterruptibly. If interrupt is called,_the sleep will continue nonetheless.__@param msecs The number of milliseconds to sleep.;public static void sleepUninterruptibly(long msecs) {_		_		long now = System.currentTimeMillis()__		long sleepUntil = now + msecs__		long remaining__		_		while ((remaining = sleepUntil - now) > 0) {_			try {_				Thread.sleep(remaining)__			}_			catch (InterruptedException e) {}_			_			now = System.currentTimeMillis()__		}_	};sleeps,for,a,given,set,of,milliseconds,uninterruptibly,if,interrupt,is,called,the,sleep,will,continue,nonetheless,param,msecs,the,number,of,milliseconds,to,sleep;public,static,void,sleep,uninterruptibly,long,msecs,long,now,system,current,time,millis,long,sleep,until,now,msecs,long,remaining,while,remaining,sleep,until,now,0,try,thread,sleep,remaining,catch,interrupted,exception,e,now,system,current,time,millis
CommonTestUtils -> public static void sleepUninterruptibly(long msecs);1445293011;Sleeps for a given set of milliseconds, uninterruptibly. If interrupt is called,_the sleep will continue nonetheless.__@param msecs The number of milliseconds to sleep.;public static void sleepUninterruptibly(long msecs) {_		_		long now = System.currentTimeMillis()__		long sleepUntil = now + msecs__		long remaining__		_		while ((remaining = sleepUntil - now) > 0) {_			try {_				Thread.sleep(remaining)__			}_			catch (InterruptedException e) {}_			_			now = System.currentTimeMillis()__		}_	};sleeps,for,a,given,set,of,milliseconds,uninterruptibly,if,interrupt,is,called,the,sleep,will,continue,nonetheless,param,msecs,the,number,of,milliseconds,to,sleep;public,static,void,sleep,uninterruptibly,long,msecs,long,now,system,current,time,millis,long,sleep,until,now,msecs,long,remaining,while,remaining,sleep,until,now,0,try,thread,sleep,remaining,catch,interrupted,exception,e,now,system,current,time,millis
CommonTestUtils -> public static void sleepUninterruptibly(long msecs);1455114436;Sleeps for a given set of milliseconds, uninterruptibly. If interrupt is called,_the sleep will continue nonetheless.__@param msecs The number of milliseconds to sleep.;public static void sleepUninterruptibly(long msecs) {_		_		long now = System.currentTimeMillis()__		long sleepUntil = now + msecs__		long remaining__		_		while ((remaining = sleepUntil - now) > 0) {_			try {_				Thread.sleep(remaining)__			}_			catch (InterruptedException e) {}_			_			now = System.currentTimeMillis()__		}_	};sleeps,for,a,given,set,of,milliseconds,uninterruptibly,if,interrupt,is,called,the,sleep,will,continue,nonetheless,param,msecs,the,number,of,milliseconds,to,sleep;public,static,void,sleep,uninterruptibly,long,msecs,long,now,system,current,time,millis,long,sleep,until,now,msecs,long,remaining,while,remaining,sleep,until,now,0,try,thread,sleep,remaining,catch,interrupted,exception,e,now,system,current,time,millis
CommonTestUtils -> public static void sleepUninterruptibly(long msecs);1460741894;Sleeps for a given set of milliseconds, uninterruptibly. If interrupt is called,_the sleep will continue nonetheless.__@param msecs The number of milliseconds to sleep.;public static void sleepUninterruptibly(long msecs) {_		_		long now = System.currentTimeMillis()__		long sleepUntil = now + msecs__		long remaining__		_		while ((remaining = sleepUntil - now) > 0) {_			try {_				Thread.sleep(remaining)__			}_			catch (InterruptedException e) {}_			_			now = System.currentTimeMillis()__		}_	};sleeps,for,a,given,set,of,milliseconds,uninterruptibly,if,interrupt,is,called,the,sleep,will,continue,nonetheless,param,msecs,the,number,of,milliseconds,to,sleep;public,static,void,sleep,uninterruptibly,long,msecs,long,now,system,current,time,millis,long,sleep,until,now,msecs,long,remaining,while,remaining,sleep,until,now,0,try,thread,sleep,remaining,catch,interrupted,exception,e,now,system,current,time,millis
CommonTestUtils -> public static void sleepUninterruptibly(long msecs);1470073933;Sleeps for a given set of milliseconds, uninterruptibly. If interrupt is called,_the sleep will continue nonetheless.__@param msecs The number of milliseconds to sleep.;public static void sleepUninterruptibly(long msecs) {_		_		long now = System.currentTimeMillis()__		long sleepUntil = now + msecs__		long remaining__		_		while ((remaining = sleepUntil - now) > 0) {_			try {_				Thread.sleep(remaining)__			}_			catch (InterruptedException ignored) {}_			_			now = System.currentTimeMillis()__		}_	};sleeps,for,a,given,set,of,milliseconds,uninterruptibly,if,interrupt,is,called,the,sleep,will,continue,nonetheless,param,msecs,the,number,of,milliseconds,to,sleep;public,static,void,sleep,uninterruptibly,long,msecs,long,now,system,current,time,millis,long,sleep,until,now,msecs,long,remaining,while,remaining,sleep,until,now,0,try,thread,sleep,remaining,catch,interrupted,exception,ignored,now,system,current,time,millis
CommonTestUtils -> public static void sleepUninterruptibly(long msecs);1474308053;Sleeps for a given set of milliseconds, uninterruptibly. If interrupt is called,_the sleep will continue nonetheless.__@param msecs The number of milliseconds to sleep.;public static void sleepUninterruptibly(long msecs) {_		_		long now = System.currentTimeMillis()__		long sleepUntil = now + msecs__		long remaining__		_		while ((remaining = sleepUntil - now) > 0) {_			try {_				Thread.sleep(remaining)__			}_			catch (InterruptedException ignored) {}_			_			now = System.currentTimeMillis()__		}_	};sleeps,for,a,given,set,of,milliseconds,uninterruptibly,if,interrupt,is,called,the,sleep,will,continue,nonetheless,param,msecs,the,number,of,milliseconds,to,sleep;public,static,void,sleep,uninterruptibly,long,msecs,long,now,system,current,time,millis,long,sleep,until,now,msecs,long,remaining,while,remaining,sleep,until,now,0,try,thread,sleep,remaining,catch,interrupted,exception,ignored,now,system,current,time,millis
CommonTestUtils -> public static void sleepUninterruptibly(long msecs);1475842467;Sleeps for a given set of milliseconds, uninterruptibly. If interrupt is called,_the sleep will continue nonetheless.__@param msecs The number of milliseconds to sleep.;public static void sleepUninterruptibly(long msecs) {_		_		long now = System.currentTimeMillis()__		long sleepUntil = now + msecs__		long remaining__		_		while ((remaining = sleepUntil - now) > 0) {_			try {_				Thread.sleep(remaining)__			}_			catch (InterruptedException ignored) {}_			_			now = System.currentTimeMillis()__		}_	};sleeps,for,a,given,set,of,milliseconds,uninterruptibly,if,interrupt,is,called,the,sleep,will,continue,nonetheless,param,msecs,the,number,of,milliseconds,to,sleep;public,static,void,sleep,uninterruptibly,long,msecs,long,now,system,current,time,millis,long,sleep,until,now,msecs,long,remaining,while,remaining,sleep,until,now,0,try,thread,sleep,remaining,catch,interrupted,exception,ignored,now,system,current,time,millis
CommonTestUtils -> public static void sleepUninterruptibly(long msecs);1534779428;Sleeps for a given set of milliseconds, uninterruptibly. If interrupt is called,_the sleep will continue nonetheless.__@param msecs The number of milliseconds to sleep.;public static void sleepUninterruptibly(long msecs) {_		_		long now = System.currentTimeMillis()__		long sleepUntil = now + msecs__		long remaining__		_		while ((remaining = sleepUntil - now) > 0) {_			try {_				Thread.sleep(remaining)__			}_			catch (InterruptedException ignored) {}_			_			now = System.currentTimeMillis()__		}_	};sleeps,for,a,given,set,of,milliseconds,uninterruptibly,if,interrupt,is,called,the,sleep,will,continue,nonetheless,param,msecs,the,number,of,milliseconds,to,sleep;public,static,void,sleep,uninterruptibly,long,msecs,long,now,system,current,time,millis,long,sleep,until,now,msecs,long,remaining,while,remaining,sleep,until,now,0,try,thread,sleep,remaining,catch,interrupted,exception,ignored,now,system,current,time,millis
CommonTestUtils -> public static void sleepUninterruptibly(long msecs);1549360056;Sleeps for a given set of milliseconds, uninterruptibly. If interrupt is called,_the sleep will continue nonetheless.__@param msecs The number of milliseconds to sleep.;public static void sleepUninterruptibly(long msecs) {_		_		long now = System.currentTimeMillis()__		long sleepUntil = now + msecs__		long remaining__		_		while ((remaining = sleepUntil - now) > 0) {_			try {_				Thread.sleep(remaining)__			}_			catch (InterruptedException ignored) {}_			_			now = System.currentTimeMillis()__		}_	};sleeps,for,a,given,set,of,milliseconds,uninterruptibly,if,interrupt,is,called,the,sleep,will,continue,nonetheless,param,msecs,the,number,of,milliseconds,to,sleep;public,static,void,sleep,uninterruptibly,long,msecs,long,now,system,current,time,millis,long,sleep,until,now,msecs,long,remaining,while,remaining,sleep,until,now,0,try,thread,sleep,remaining,catch,interrupted,exception,ignored,now,system,current,time,millis
CommonTestUtils -> public static void sleepUninterruptibly(long msecs);1549360057;Sleeps for a given set of milliseconds, uninterruptibly. If interrupt is called,_the sleep will continue nonetheless.__@param msecs The number of milliseconds to sleep.;public static void sleepUninterruptibly(long msecs) {_		_		long now = System.currentTimeMillis()__		long sleepUntil = now + msecs__		long remaining__		_		while ((remaining = sleepUntil - now) > 0) {_			try {_				Thread.sleep(remaining)__			}_			catch (InterruptedException ignored) {}_			_			now = System.currentTimeMillis()__		}_	};sleeps,for,a,given,set,of,milliseconds,uninterruptibly,if,interrupt,is,called,the,sleep,will,continue,nonetheless,param,msecs,the,number,of,milliseconds,to,sleep;public,static,void,sleep,uninterruptibly,long,msecs,long,now,system,current,time,millis,long,sleep,until,now,msecs,long,remaining,while,remaining,sleep,until,now,0,try,thread,sleep,remaining,catch,interrupted,exception,ignored,now,system,current,time,millis
CommonTestUtils -> public static void sleepUninterruptibly(long msecs);1550148338;Sleeps for a given set of milliseconds, uninterruptibly. If interrupt is called,_the sleep will continue nonetheless.__@param msecs The number of milliseconds to sleep.;public static void sleepUninterruptibly(long msecs) {_		_		long now = System.currentTimeMillis()__		long sleepUntil = now + msecs__		long remaining__		_		while ((remaining = sleepUntil - now) > 0) {_			try {_				Thread.sleep(remaining)__			}_			catch (InterruptedException ignored) {}_			_			now = System.currentTimeMillis()__		}_	};sleeps,for,a,given,set,of,milliseconds,uninterruptibly,if,interrupt,is,called,the,sleep,will,continue,nonetheless,param,msecs,the,number,of,milliseconds,to,sleep;public,static,void,sleep,uninterruptibly,long,msecs,long,now,system,current,time,millis,long,sleep,until,now,msecs,long,remaining,while,remaining,sleep,until,now,0,try,thread,sleep,remaining,catch,interrupted,exception,ignored,now,system,current,time,millis
CommonTestUtils -> public static String getRandomDirectoryName();1405024514;Constructs a random directory name. The directory is a string of 16 hex characters_prefix.__@return the random directory name;public static String getRandomDirectoryName() {__		final char[] alphabeth = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }___		String filename = ""__		for (int i = 0_ i < 16_ i++) {_			filename += alphabeth[(int) (Math.random() * alphabeth.length)]__		}__		return filename__	};constructs,a,random,directory,name,the,directory,is,a,string,of,16,hex,characters,prefix,return,the,random,directory,name;public,static,string,get,random,directory,name,final,char,alphabeth,0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,string,filename,for,int,i,0,i,16,i,filename,alphabeth,int,math,random,alphabeth,length,return,filename
CommonTestUtils -> public static String getRandomDirectoryName();1405090423;Constructs a random directory name. The directory is a string of 16 hex characters_prefix.__@return the random directory name;public static String getRandomDirectoryName() {__		final char[] alphabeth = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }___		String filename = ""__		for (int i = 0_ i < 16_ i++) {_			filename += alphabeth[(int) (Math.random() * alphabeth.length)]__		}__		return filename__	};constructs,a,random,directory,name,the,directory,is,a,string,of,16,hex,characters,prefix,return,the,random,directory,name;public,static,string,get,random,directory,name,final,char,alphabeth,0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,string,filename,for,int,i,0,i,16,i,filename,alphabeth,int,math,random,alphabeth,length,return,filename
CommonTestUtils -> public static String getRandomDirectoryName();1411236167;Constructs a random directory name. The directory is a string of 16 hex characters_prefix.__@return the random directory name;public static String getRandomDirectoryName() {__		final char[] alphabeth = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }___		String filename = ""__		for (int i = 0_ i < 16_ i++) {_			filename += alphabeth[(int) (Math.random() * alphabeth.length)]__		}__		return filename__	};constructs,a,random,directory,name,the,directory,is,a,string,of,16,hex,characters,prefix,return,the,random,directory,name;public,static,string,get,random,directory,name,final,char,alphabeth,0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,string,filename,for,int,i,0,i,16,i,filename,alphabeth,int,math,random,alphabeth,length,return,filename
CommonTestUtils -> public static String getRandomDirectoryName();1411473593;Constructs a random directory name. The directory is a string of 16 hex characters_prefix.__@return the random directory name;public static String getRandomDirectoryName() {__		final char[] alphabeth = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }___		String filename = ""__		for (int i = 0_ i < 16_ i++) {_			filename += alphabeth[(int) (Math.random() * alphabeth.length)]__		}__		return filename__	};constructs,a,random,directory,name,the,directory,is,a,string,of,16,hex,characters,prefix,return,the,random,directory,name;public,static,string,get,random,directory,name,final,char,alphabeth,0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,string,filename,for,int,i,0,i,16,i,filename,alphabeth,int,math,random,alphabeth,length,return,filename
CommonTestUtils -> public static File createTemporaryLog4JProperties() throws IOException;1445293011;Create a temporary log4j configuration for the test.;public static File createTemporaryLog4JProperties() throws IOException {_		File log4jProps = File.createTempFile(FileUtils.getRandomFilename(""), "-log4j" +_				".properties")__		log4jProps.deleteOnExit()__		CommonTestUtils.printLog4jDebugConfig(log4jProps)___		return log4jProps__	};create,a,temporary,log4j,configuration,for,the,test;public,static,file,create,temporary,log4jproperties,throws,ioexception,file,log4j,props,file,create,temp,file,file,utils,get,random,filename,log4j,properties,log4j,props,delete,on,exit,common,test,utils,print,log4j,debug,config,log4j,props,return,log4j,props
CommonTestUtils -> public static File createTemporaryLog4JProperties() throws IOException;1455114436;Create a temporary log4j configuration for the test.;public static File createTemporaryLog4JProperties() throws IOException {_		File log4jProps = File.createTempFile(FileUtils.getRandomFilename(""), "-log4j" +_				".properties")__		log4jProps.deleteOnExit()__		CommonTestUtils.printLog4jDebugConfig(log4jProps)___		return log4jProps__	};create,a,temporary,log4j,configuration,for,the,test;public,static,file,create,temporary,log4jproperties,throws,ioexception,file,log4j,props,file,create,temp,file,file,utils,get,random,filename,log4j,properties,log4j,props,delete,on,exit,common,test,utils,print,log4j,debug,config,log4j,props,return,log4j,props
CommonTestUtils -> public static File createTemporaryLog4JProperties() throws IOException;1460741894;Create a temporary log4j configuration for the test.;public static File createTemporaryLog4JProperties() throws IOException {_		File log4jProps = File.createTempFile(FileUtils.getRandomFilename(""), "-log4j" +_				".properties")__		log4jProps.deleteOnExit()__		CommonTestUtils.printLog4jDebugConfig(log4jProps)___		return log4jProps__	};create,a,temporary,log4j,configuration,for,the,test;public,static,file,create,temporary,log4jproperties,throws,ioexception,file,log4j,props,file,create,temp,file,file,utils,get,random,filename,log4j,properties,log4j,props,delete,on,exit,common,test,utils,print,log4j,debug,config,log4j,props,return,log4j,props
CommonTestUtils -> public static File createTemporaryLog4JProperties() throws IOException;1470073933;Create a temporary log4j configuration for the test.;public static File createTemporaryLog4JProperties() throws IOException {_		File log4jProps = File.createTempFile(FileUtils.getRandomFilename(""), "-log4j" +_				".properties")__		log4jProps.deleteOnExit()__		CommonTestUtils.printLog4jDebugConfig(log4jProps)___		return log4jProps__	};create,a,temporary,log4j,configuration,for,the,test;public,static,file,create,temporary,log4jproperties,throws,ioexception,file,log4j,props,file,create,temp,file,file,utils,get,random,filename,log4j,properties,log4j,props,delete,on,exit,common,test,utils,print,log4j,debug,config,log4j,props,return,log4j,props
CommonTestUtils -> public static File createTemporaryLog4JProperties() throws IOException;1474308053;Create a temporary log4j configuration for the test.;public static File createTemporaryLog4JProperties() throws IOException {_		File log4jProps = File.createTempFile(_				FileUtils.getRandomFilename(""), "-log4j.properties")__		log4jProps.deleteOnExit()__		CommonTestUtils.printLog4jDebugConfig(log4jProps)___		return log4jProps__	};create,a,temporary,log4j,configuration,for,the,test;public,static,file,create,temporary,log4jproperties,throws,ioexception,file,log4j,props,file,create,temp,file,file,utils,get,random,filename,log4j,properties,log4j,props,delete,on,exit,common,test,utils,print,log4j,debug,config,log4j,props,return,log4j,props
CommonTestUtils -> public static File createTemporaryLog4JProperties() throws IOException;1475842467;Create a temporary log4j configuration for the test.;public static File createTemporaryLog4JProperties() throws IOException {_		File log4jProps = File.createTempFile(_				FileUtils.getRandomFilename(""), "-log4j.properties")__		log4jProps.deleteOnExit()__		CommonTestUtils.printLog4jDebugConfig(log4jProps)___		return log4jProps__	};create,a,temporary,log4j,configuration,for,the,test;public,static,file,create,temporary,log4jproperties,throws,ioexception,file,log4j,props,file,create,temp,file,file,utils,get,random,filename,log4j,properties,log4j,props,delete,on,exit,common,test,utils,print,log4j,debug,config,log4j,props,return,log4j,props
CommonTestUtils -> public static File createTemporaryLog4JProperties() throws IOException;1534779428;Create a temporary log4j configuration for the test.;public static File createTemporaryLog4JProperties() throws IOException {_		File log4jProps = File.createTempFile(_				FileUtils.getRandomFilename(""), "-log4j.properties")__		log4jProps.deleteOnExit()__		CommonTestUtils.printLog4jDebugConfig(log4jProps)___		return log4jProps__	};create,a,temporary,log4j,configuration,for,the,test;public,static,file,create,temporary,log4jproperties,throws,ioexception,file,log4j,props,file,create,temp,file,file,utils,get,random,filename,log4j,properties,log4j,props,delete,on,exit,common,test,utils,print,log4j,debug,config,log4j,props,return,log4j,props
CommonTestUtils -> public static File createTemporaryLog4JProperties() throws IOException;1549360056;Create a temporary log4j configuration for the test.;public static File createTemporaryLog4JProperties() throws IOException {_		File log4jProps = File.createTempFile(_				FileUtils.getRandomFilename(""), "-log4j.properties")__		log4jProps.deleteOnExit()__		CommonTestUtils.printLog4jDebugConfig(log4jProps)___		return log4jProps__	};create,a,temporary,log4j,configuration,for,the,test;public,static,file,create,temporary,log4jproperties,throws,ioexception,file,log4j,props,file,create,temp,file,file,utils,get,random,filename,log4j,properties,log4j,props,delete,on,exit,common,test,utils,print,log4j,debug,config,log4j,props,return,log4j,props
CommonTestUtils -> public static File createTemporaryLog4JProperties() throws IOException;1549360057;Create a temporary log4j configuration for the test.;public static File createTemporaryLog4JProperties() throws IOException {_		File log4jProps = File.createTempFile(_				FileUtils.getRandomFilename(""), "-log4j.properties")__		log4jProps.deleteOnExit()__		CommonTestUtils.printLog4jDebugConfig(log4jProps)___		return log4jProps__	};create,a,temporary,log4j,configuration,for,the,test;public,static,file,create,temporary,log4jproperties,throws,ioexception,file,log4j,props,file,create,temp,file,file,utils,get,random,filename,log4j,properties,log4j,props,delete,on,exit,common,test,utils,print,log4j,debug,config,log4j,props,return,log4j,props
CommonTestUtils -> public static File createTemporaryLog4JProperties() throws IOException;1550148338;Create a temporary log4j configuration for the test.;public static File createTemporaryLog4JProperties() throws IOException {_		File log4jProps = File.createTempFile(_				FileUtils.getRandomFilename(""), "-log4j.properties")__		log4jProps.deleteOnExit()__		CommonTestUtils.printLog4jDebugConfig(log4jProps)___		return log4jProps__	};create,a,temporary,log4j,configuration,for,the,test;public,static,file,create,temporary,log4jproperties,throws,ioexception,file,log4j,props,file,create,temp,file,file,utils,get,random,filename,log4j,properties,log4j,props,delete,on,exit,common,test,utils,print,log4j,debug,config,log4j,props,return,log4j,props
CommonTestUtils -> @SuppressWarnings("unchecked") 	public static <T extends IOReadableWritable> T createCopy(final T original) throws IOException;1405024514;Creates a copy of the given {@link IOReadableWritable} object by an in-memory serialization and subsequent_deserialization.__@param original_the original object to be copied_@return the copy of original object created by the original object's serialization/deserialization methods_@throws IOException_thrown if an error occurs while creating the copy of the object;@SuppressWarnings("unchecked")_	public static <T extends IOReadableWritable> T createCopy(final T original) throws IOException {__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		final DataOutputStream dos = new DataOutputStream(baos)___		original.write(new OutputViewDataOutputStreamWrapper(dos))___		final String className = original.getClass().getName()__		if (className == null) {_			fail("Class name is null")__		}__		Class<T> clazz = null___		try {_			clazz = (Class<T>) Class.forName(className)__		} catch (ClassNotFoundException e) {_			fail(e.getMessage())__		}__		if (clazz == null) {_			fail("Cannot find class with name " + className)__		}__		T copy = null__		try {_			copy = clazz.newInstance()__		} catch (InstantiationException e) {_			fail(e.getMessage())__		} catch (IllegalAccessException e) {_			fail(e.getMessage())__		}__		if (copy == null) {_			fail("Copy of object of type " + className + " is null")__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		final DataInputStream dis = new DataInputStream(bais)___		copy.read(new InputViewDataInputStreamWrapper(dis))___		return copy__	};creates,a,copy,of,the,given,link,ioreadable,writable,object,by,an,in,memory,serialization,and,subsequent,deserialization,param,original,the,original,object,to,be,copied,return,the,copy,of,original,object,created,by,the,original,object,s,serialization,deserialization,methods,throws,ioexception,thrown,if,an,error,occurs,while,creating,the,copy,of,the,object;suppress,warnings,unchecked,public,static,t,extends,ioreadable,writable,t,create,copy,final,t,original,throws,ioexception,final,byte,array,output,stream,baos,new,byte,array,output,stream,final,data,output,stream,dos,new,data,output,stream,baos,original,write,new,output,view,data,output,stream,wrapper,dos,final,string,class,name,original,get,class,get,name,if,class,name,null,fail,class,name,is,null,class,t,clazz,null,try,clazz,class,t,class,for,name,class,name,catch,class,not,found,exception,e,fail,e,get,message,if,clazz,null,fail,cannot,find,class,with,name,class,name,t,copy,null,try,copy,clazz,new,instance,catch,instantiation,exception,e,fail,e,get,message,catch,illegal,access,exception,e,fail,e,get,message,if,copy,null,fail,copy,of,object,of,type,class,name,is,null,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,data,input,stream,dis,new,data,input,stream,bais,copy,read,new,input,view,data,input,stream,wrapper,dis,return,copy
CommonTestUtils -> @SuppressWarnings("unchecked") 	public static <T extends IOReadableWritable> T createCopy(final T original) throws IOException;1405090423;Creates a copy of the given {@link IOReadableWritable} object by an in-memory serialization and subsequent_deserialization.__@param original_the original object to be copied_@return the copy of original object created by the original object's serialization/deserialization methods_@throws IOException_thrown if an error occurs while creating the copy of the object;@SuppressWarnings("unchecked")_	public static <T extends IOReadableWritable> T createCopy(final T original) throws IOException {__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		final DataOutputStream dos = new DataOutputStream(baos)___		original.write(new OutputViewDataOutputStreamWrapper(dos))___		final String className = original.getClass().getName()__		if (className == null) {_			fail("Class name is null")__		}__		Class<T> clazz = null___		try {_			clazz = (Class<T>) Class.forName(className)__		} catch (ClassNotFoundException e) {_			fail(e.getMessage())__		}__		if (clazz == null) {_			fail("Cannot find class with name " + className)__		}__		T copy = null__		try {_			copy = clazz.newInstance()__		} catch (InstantiationException e) {_			fail(e.getMessage())__		} catch (IllegalAccessException e) {_			fail(e.getMessage())__		}__		if (copy == null) {_			fail("Copy of object of type " + className + " is null")__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		final DataInputStream dis = new DataInputStream(bais)___		copy.read(new InputViewDataInputStreamWrapper(dis))___		return copy__	};creates,a,copy,of,the,given,link,ioreadable,writable,object,by,an,in,memory,serialization,and,subsequent,deserialization,param,original,the,original,object,to,be,copied,return,the,copy,of,original,object,created,by,the,original,object,s,serialization,deserialization,methods,throws,ioexception,thrown,if,an,error,occurs,while,creating,the,copy,of,the,object;suppress,warnings,unchecked,public,static,t,extends,ioreadable,writable,t,create,copy,final,t,original,throws,ioexception,final,byte,array,output,stream,baos,new,byte,array,output,stream,final,data,output,stream,dos,new,data,output,stream,baos,original,write,new,output,view,data,output,stream,wrapper,dos,final,string,class,name,original,get,class,get,name,if,class,name,null,fail,class,name,is,null,class,t,clazz,null,try,clazz,class,t,class,for,name,class,name,catch,class,not,found,exception,e,fail,e,get,message,if,clazz,null,fail,cannot,find,class,with,name,class,name,t,copy,null,try,copy,clazz,new,instance,catch,instantiation,exception,e,fail,e,get,message,catch,illegal,access,exception,e,fail,e,get,message,if,copy,null,fail,copy,of,object,of,type,class,name,is,null,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,final,data,input,stream,dis,new,data,input,stream,bais,copy,read,new,input,view,data,input,stream,wrapper,dis,return,copy
CommonTestUtils -> public static String getCurrentClasspath();1424769270;Gets the classpath with which the current JVM was started.__@return The classpath with which the current JVM was started.;public static String getCurrentClasspath() {_		RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__		return bean.getClassPath()__	};gets,the,classpath,with,which,the,current,jvm,was,started,return,the,classpath,with,which,the,current,jvm,was,started;public,static,string,get,current,classpath,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,class,path
CommonTestUtils -> public static String getCurrentClasspath();1424777039;Gets the classpath with which the current JVM was started.__@return The classpath with which the current JVM was started.;public static String getCurrentClasspath() {_		RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__		return bean.getClassPath()__	};gets,the,classpath,with,which,the,current,jvm,was,started,return,the,classpath,with,which,the,current,jvm,was,started;public,static,string,get,current,classpath,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,class,path
CommonTestUtils -> public static String getCurrentClasspath();1441027768;Gets the classpath with which the current JVM was started.__@return The classpath with which the current JVM was started.;public static String getCurrentClasspath() {_		RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__		return bean.getClassPath()__	};gets,the,classpath,with,which,the,current,jvm,was,started,return,the,classpath,with,which,the,current,jvm,was,started;public,static,string,get,current,classpath,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,class,path
CommonTestUtils -> public static String getCurrentClasspath();1445293011;Gets the classpath with which the current JVM was started.__@return The classpath with which the current JVM was started.;public static String getCurrentClasspath() {_		RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__		return bean.getClassPath()__	};gets,the,classpath,with,which,the,current,jvm,was,started,return,the,classpath,with,which,the,current,jvm,was,started;public,static,string,get,current,classpath,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,class,path
CommonTestUtils -> public static String getCurrentClasspath();1455114436;Gets the classpath with which the current JVM was started.__@return The classpath with which the current JVM was started.;public static String getCurrentClasspath() {_		RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__		return bean.getClassPath()__	};gets,the,classpath,with,which,the,current,jvm,was,started,return,the,classpath,with,which,the,current,jvm,was,started;public,static,string,get,current,classpath,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,class,path
CommonTestUtils -> public static String getCurrentClasspath();1460741894;Gets the classpath with which the current JVM was started.__@return The classpath with which the current JVM was started.;public static String getCurrentClasspath() {_		RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__		return bean.getClassPath()__	};gets,the,classpath,with,which,the,current,jvm,was,started,return,the,classpath,with,which,the,current,jvm,was,started;public,static,string,get,current,classpath,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,class,path
CommonTestUtils -> public static String getCurrentClasspath();1470073933;Gets the classpath with which the current JVM was started.__@return The classpath with which the current JVM was started.;public static String getCurrentClasspath() {_		RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__		return bean.getClassPath()__	};gets,the,classpath,with,which,the,current,jvm,was,started,return,the,classpath,with,which,the,current,jvm,was,started;public,static,string,get,current,classpath,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,class,path
CommonTestUtils -> public static String getCurrentClasspath();1474308053;Gets the classpath with which the current JVM was started.__@return The classpath with which the current JVM was started.;public static String getCurrentClasspath() {_		RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__		return bean.getClassPath()__	};gets,the,classpath,with,which,the,current,jvm,was,started,return,the,classpath,with,which,the,current,jvm,was,started;public,static,string,get,current,classpath,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,class,path
CommonTestUtils -> public static String getCurrentClasspath();1475842467;Gets the classpath with which the current JVM was started.__@return The classpath with which the current JVM was started.;public static String getCurrentClasspath() {_		RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__		return bean.getClassPath()__	};gets,the,classpath,with,which,the,current,jvm,was,started,return,the,classpath,with,which,the,current,jvm,was,started;public,static,string,get,current,classpath,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,class,path
CommonTestUtils -> public static String getCurrentClasspath();1534779428;Gets the classpath with which the current JVM was started.__@return The classpath with which the current JVM was started.;public static String getCurrentClasspath() {_		RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__		return bean.getClassPath()__	};gets,the,classpath,with,which,the,current,jvm,was,started,return,the,classpath,with,which,the,current,jvm,was,started;public,static,string,get,current,classpath,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,class,path
CommonTestUtils -> public static String getCurrentClasspath();1549360056;Gets the classpath with which the current JVM was started.__@return The classpath with which the current JVM was started.;public static String getCurrentClasspath() {_		RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__		return bean.getClassPath()__	};gets,the,classpath,with,which,the,current,jvm,was,started,return,the,classpath,with,which,the,current,jvm,was,started;public,static,string,get,current,classpath,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,class,path
CommonTestUtils -> public static String getCurrentClasspath();1549360057;Gets the classpath with which the current JVM was started.__@return The classpath with which the current JVM was started.;public static String getCurrentClasspath() {_		RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__		return bean.getClassPath()__	};gets,the,classpath,with,which,the,current,jvm,was,started,return,the,classpath,with,which,the,current,jvm,was,started;public,static,string,get,current,classpath,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,class,path
CommonTestUtils -> public static String getCurrentClasspath();1550148338;Gets the classpath with which the current JVM was started.__@return The classpath with which the current JVM was started.;public static String getCurrentClasspath() {_		RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__		return bean.getClassPath()__	};gets,the,classpath,with,which,the,current,jvm,was,started,return,the,classpath,with,which,the,current,jvm,was,started;public,static,string,get,current,classpath,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,class,path
CommonTestUtils -> public static String getTempDir();1405024514;Reads the path to the directory for temporary files from the configuration and returns it.__@return the path to the directory for temporary files;public static String getTempDir() {__		return GlobalConfiguration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(File.pathSeparator)[0]__	};reads,the,path,to,the,directory,for,temporary,files,from,the,configuration,and,returns,it,return,the,path,to,the,directory,for,temporary,files;public,static,string,get,temp,dir,return,global,configuration,get,string,config,constants,config,constants,split,file,path,separator,0
CommonTestUtils -> public static String getTempDir();1405090423;Reads the path to the directory for temporary files from the configuration and returns it.__@return the path to the directory for temporary files;public static String getTempDir() {__		return GlobalConfiguration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(File.pathSeparator)[0]__	};reads,the,path,to,the,directory,for,temporary,files,from,the,configuration,and,returns,it,return,the,path,to,the,directory,for,temporary,files;public,static,string,get,temp,dir,return,global,configuration,get,string,config,constants,config,constants,split,file,path,separator,0
CommonTestUtils -> public static String getTempDir();1411236167;Reads the path to the directory for temporary files from the configuration and returns it.__@return the path to the directory for temporary files;public static String getTempDir() {_		return GlobalConfiguration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(File.pathSeparator)[0]__	};reads,the,path,to,the,directory,for,temporary,files,from,the,configuration,and,returns,it,return,the,path,to,the,directory,for,temporary,files;public,static,string,get,temp,dir,return,global,configuration,get,string,config,constants,config,constants,split,file,path,separator,0
CommonTestUtils -> public static String getTempDir();1411473593;Reads the path to the directory for temporary files from the configuration and returns it.__@return the path to the directory for temporary files;public static String getTempDir() {_		return GlobalConfiguration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(File.pathSeparator)[0]__	};reads,the,path,to,the,directory,for,temporary,files,from,the,configuration,and,returns,it,return,the,path,to,the,directory,for,temporary,files;public,static,string,get,temp,dir,return,global,configuration,get,string,config,constants,config,constants,split,file,path,separator,0
