# id;timestamp;commentText;codeText;commentWords;codeWords
EmbeddedHaServicesTest -> @Test 	public void testJobManagerLeaderRetrieval() throws Exception;1493975155;Tests the JobManager leader retrieval for a given job.;@Test_	public void testJobManagerLeaderRetrieval() throws Exception {_		final String address = "foobar"__		JobID jobId = new JobID()__		LeaderRetrievalListener leaderRetrievalListener = mock(LeaderRetrievalListener.class)__		LeaderContender leaderContender = mock(LeaderContender.class)__		when(leaderContender.getAddress()).thenReturn(address)___		LeaderElectionService leaderElectionService = embeddedHaServices.getJobManagerLeaderElectionService(jobId)__		LeaderRetrievalService leaderRetrievalService = embeddedHaServices.getJobManagerLeaderRetriever(jobId)___		leaderRetrievalService.start(leaderRetrievalListener)__		leaderElectionService.start(leaderContender)___		ArgumentCaptor<UUID> leaderIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)__		verify(leaderContender).grantLeadership(leaderIdArgumentCaptor.capture())___		final UUID leaderId = leaderIdArgumentCaptor.getValue()___		leaderElectionService.confirmLeaderSessionID(leaderId)___		verify(leaderRetrievalListener).notifyLeaderAddress(eq(address), eq(leaderId))__	};tests,the,job,manager,leader,retrieval,for,a,given,job;test,public,void,test,job,manager,leader,retrieval,throws,exception,final,string,address,foobar,job,id,job,id,new,job,id,leader,retrieval,listener,leader,retrieval,listener,mock,leader,retrieval,listener,class,leader,contender,leader,contender,mock,leader,contender,class,when,leader,contender,get,address,then,return,address,leader,election,service,leader,election,service,embedded,ha,services,get,job,manager,leader,election,service,job,id,leader,retrieval,service,leader,retrieval,service,embedded,ha,services,get,job,manager,leader,retriever,job,id,leader,retrieval,service,start,leader,retrieval,listener,leader,election,service,start,leader,contender,argument,captor,uuid,leader,id,argument,captor,argument,captor,for,class,uuid,class,verify,leader,contender,grant,leadership,leader,id,argument,captor,capture,final,uuid,leader,id,leader,id,argument,captor,get,value,leader,election,service,confirm,leader,session,id,leader,id,verify,leader,retrieval,listener,notify,leader,address,eq,address,eq,leader,id
EmbeddedHaServicesTest -> @Test 	public void testJobManagerLeaderRetrieval() throws Exception;1549545568;Tests the JobManager leader retrieval for a given job.;@Test_	public void testJobManagerLeaderRetrieval() throws Exception {_		final String address = "foobar"__		JobID jobId = new JobID()__		LeaderRetrievalListener leaderRetrievalListener = mock(LeaderRetrievalListener.class)__		LeaderContender leaderContender = mock(LeaderContender.class)__		when(leaderContender.getAddress()).thenReturn(address)___		LeaderElectionService leaderElectionService = embeddedHaServices.getJobManagerLeaderElectionService(jobId)__		LeaderRetrievalService leaderRetrievalService = embeddedHaServices.getJobManagerLeaderRetriever(jobId)___		leaderRetrievalService.start(leaderRetrievalListener)__		leaderElectionService.start(leaderContender)___		ArgumentCaptor<UUID> leaderIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)__		verify(leaderContender).grantLeadership(leaderIdArgumentCaptor.capture())___		final UUID leaderId = leaderIdArgumentCaptor.getValue()___		leaderElectionService.confirmLeaderSessionID(leaderId)___		verify(leaderRetrievalListener).notifyLeaderAddress(eq(address), eq(leaderId))__	};tests,the,job,manager,leader,retrieval,for,a,given,job;test,public,void,test,job,manager,leader,retrieval,throws,exception,final,string,address,foobar,job,id,job,id,new,job,id,leader,retrieval,listener,leader,retrieval,listener,mock,leader,retrieval,listener,class,leader,contender,leader,contender,mock,leader,contender,class,when,leader,contender,get,address,then,return,address,leader,election,service,leader,election,service,embedded,ha,services,get,job,manager,leader,election,service,job,id,leader,retrieval,service,leader,retrieval,service,embedded,ha,services,get,job,manager,leader,retriever,job,id,leader,retrieval,service,start,leader,retrieval,listener,leader,election,service,start,leader,contender,argument,captor,uuid,leader,id,argument,captor,argument,captor,for,class,uuid,class,verify,leader,contender,grant,leadership,leader,id,argument,captor,capture,final,uuid,leader,id,leader,id,argument,captor,get,value,leader,election,service,confirm,leader,session,id,leader,id,verify,leader,retrieval,listener,notify,leader,address,eq,address,eq,leader,id
EmbeddedHaServicesTest -> @Test 	public void testJobManagerLeaderRetrieval() throws Exception;1549545568;Tests the JobManager leader retrieval for a given job.;@Test_	public void testJobManagerLeaderRetrieval() throws Exception {_		final String address = "foobar"__		JobID jobId = new JobID()__		LeaderRetrievalListener leaderRetrievalListener = mock(LeaderRetrievalListener.class)__		LeaderContender leaderContender = mock(LeaderContender.class)__		when(leaderContender.getAddress()).thenReturn(address)___		LeaderElectionService leaderElectionService = embeddedHaServices.getJobManagerLeaderElectionService(jobId)__		LeaderRetrievalService leaderRetrievalService = embeddedHaServices.getJobManagerLeaderRetriever(jobId)___		leaderRetrievalService.start(leaderRetrievalListener)__		leaderElectionService.start(leaderContender)___		ArgumentCaptor<UUID> leaderIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)__		verify(leaderContender).grantLeadership(leaderIdArgumentCaptor.capture())___		final UUID leaderId = leaderIdArgumentCaptor.getValue()___		leaderElectionService.confirmLeaderSessionID(leaderId)___		verify(leaderRetrievalListener).notifyLeaderAddress(eq(address), eq(leaderId))__	};tests,the,job,manager,leader,retrieval,for,a,given,job;test,public,void,test,job,manager,leader,retrieval,throws,exception,final,string,address,foobar,job,id,job,id,new,job,id,leader,retrieval,listener,leader,retrieval,listener,mock,leader,retrieval,listener,class,leader,contender,leader,contender,mock,leader,contender,class,when,leader,contender,get,address,then,return,address,leader,election,service,leader,election,service,embedded,ha,services,get,job,manager,leader,election,service,job,id,leader,retrieval,service,leader,retrieval,service,embedded,ha,services,get,job,manager,leader,retriever,job,id,leader,retrieval,service,start,leader,retrieval,listener,leader,election,service,start,leader,contender,argument,captor,uuid,leader,id,argument,captor,argument,captor,for,class,uuid,class,verify,leader,contender,grant,leadership,leader,id,argument,captor,capture,final,uuid,leader,id,leader,id,argument,captor,get,value,leader,election,service,confirm,leader,session,id,leader,id,verify,leader,retrieval,listener,notify,leader,address,eq,address,eq,leader,id
EmbeddedHaServicesTest -> @Test 	public void testResourceManagerLeaderRetrieval() throws Exception;1493975155;Tests the ResourceManager leader retrieval for a given job.;@Test_	public void testResourceManagerLeaderRetrieval() throws Exception {_		final String address = "foobar"__		LeaderRetrievalListener leaderRetrievalListener = mock(LeaderRetrievalListener.class)__		LeaderContender leaderContender = mock(LeaderContender.class)__		when(leaderContender.getAddress()).thenReturn(address)___		LeaderElectionService leaderElectionService = embeddedHaServices.getResourceManagerLeaderElectionService()__		LeaderRetrievalService leaderRetrievalService = embeddedHaServices.getResourceManagerLeaderRetriever()___		leaderRetrievalService.start(leaderRetrievalListener)__		leaderElectionService.start(leaderContender)___		ArgumentCaptor<UUID> leaderIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)__		verify(leaderContender).grantLeadership(leaderIdArgumentCaptor.capture())___		final UUID leaderId = leaderIdArgumentCaptor.getValue()___		leaderElectionService.confirmLeaderSessionID(leaderId)___		verify(leaderRetrievalListener).notifyLeaderAddress(eq(address), eq(leaderId))__	};tests,the,resource,manager,leader,retrieval,for,a,given,job;test,public,void,test,resource,manager,leader,retrieval,throws,exception,final,string,address,foobar,leader,retrieval,listener,leader,retrieval,listener,mock,leader,retrieval,listener,class,leader,contender,leader,contender,mock,leader,contender,class,when,leader,contender,get,address,then,return,address,leader,election,service,leader,election,service,embedded,ha,services,get,resource,manager,leader,election,service,leader,retrieval,service,leader,retrieval,service,embedded,ha,services,get,resource,manager,leader,retriever,leader,retrieval,service,start,leader,retrieval,listener,leader,election,service,start,leader,contender,argument,captor,uuid,leader,id,argument,captor,argument,captor,for,class,uuid,class,verify,leader,contender,grant,leadership,leader,id,argument,captor,capture,final,uuid,leader,id,leader,id,argument,captor,get,value,leader,election,service,confirm,leader,session,id,leader,id,verify,leader,retrieval,listener,notify,leader,address,eq,address,eq,leader,id
EmbeddedHaServicesTest -> @Test 	public void testResourceManagerLeaderRetrieval() throws Exception;1549545568;Tests the ResourceManager leader retrieval for a given job.;@Test_	public void testResourceManagerLeaderRetrieval() throws Exception {_		final String address = "foobar"__		LeaderRetrievalListener leaderRetrievalListener = mock(LeaderRetrievalListener.class)__		LeaderContender leaderContender = mock(LeaderContender.class)__		when(leaderContender.getAddress()).thenReturn(address)___		LeaderElectionService leaderElectionService = embeddedHaServices.getResourceManagerLeaderElectionService()__		LeaderRetrievalService leaderRetrievalService = embeddedHaServices.getResourceManagerLeaderRetriever()___		leaderRetrievalService.start(leaderRetrievalListener)__		leaderElectionService.start(leaderContender)___		ArgumentCaptor<UUID> leaderIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)__		verify(leaderContender).grantLeadership(leaderIdArgumentCaptor.capture())___		final UUID leaderId = leaderIdArgumentCaptor.getValue()___		leaderElectionService.confirmLeaderSessionID(leaderId)___		verify(leaderRetrievalListener).notifyLeaderAddress(eq(address), eq(leaderId))__	};tests,the,resource,manager,leader,retrieval,for,a,given,job;test,public,void,test,resource,manager,leader,retrieval,throws,exception,final,string,address,foobar,leader,retrieval,listener,leader,retrieval,listener,mock,leader,retrieval,listener,class,leader,contender,leader,contender,mock,leader,contender,class,when,leader,contender,get,address,then,return,address,leader,election,service,leader,election,service,embedded,ha,services,get,resource,manager,leader,election,service,leader,retrieval,service,leader,retrieval,service,embedded,ha,services,get,resource,manager,leader,retriever,leader,retrieval,service,start,leader,retrieval,listener,leader,election,service,start,leader,contender,argument,captor,uuid,leader,id,argument,captor,argument,captor,for,class,uuid,class,verify,leader,contender,grant,leadership,leader,id,argument,captor,capture,final,uuid,leader,id,leader,id,argument,captor,get,value,leader,election,service,confirm,leader,session,id,leader,id,verify,leader,retrieval,listener,notify,leader,address,eq,address,eq,leader,id
EmbeddedHaServicesTest -> @Test 	public void testResourceManagerLeaderRetrieval() throws Exception;1549545568;Tests the ResourceManager leader retrieval for a given job.;@Test_	public void testResourceManagerLeaderRetrieval() throws Exception {_		final String address = "foobar"__		LeaderRetrievalListener leaderRetrievalListener = mock(LeaderRetrievalListener.class)__		LeaderContender leaderContender = mock(LeaderContender.class)__		when(leaderContender.getAddress()).thenReturn(address)___		LeaderElectionService leaderElectionService = embeddedHaServices.getResourceManagerLeaderElectionService()__		LeaderRetrievalService leaderRetrievalService = embeddedHaServices.getResourceManagerLeaderRetriever()___		leaderRetrievalService.start(leaderRetrievalListener)__		leaderElectionService.start(leaderContender)___		ArgumentCaptor<UUID> leaderIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class)__		verify(leaderContender).grantLeadership(leaderIdArgumentCaptor.capture())___		final UUID leaderId = leaderIdArgumentCaptor.getValue()___		leaderElectionService.confirmLeaderSessionID(leaderId)___		verify(leaderRetrievalListener).notifyLeaderAddress(eq(address), eq(leaderId))__	};tests,the,resource,manager,leader,retrieval,for,a,given,job;test,public,void,test,resource,manager,leader,retrieval,throws,exception,final,string,address,foobar,leader,retrieval,listener,leader,retrieval,listener,mock,leader,retrieval,listener,class,leader,contender,leader,contender,mock,leader,contender,class,when,leader,contender,get,address,then,return,address,leader,election,service,leader,election,service,embedded,ha,services,get,resource,manager,leader,election,service,leader,retrieval,service,leader,retrieval,service,embedded,ha,services,get,resource,manager,leader,retriever,leader,retrieval,service,start,leader,retrieval,listener,leader,election,service,start,leader,contender,argument,captor,uuid,leader,id,argument,captor,argument,captor,for,class,uuid,class,verify,leader,contender,grant,leadership,leader,id,argument,captor,capture,final,uuid,leader,id,leader,id,argument,captor,get,value,leader,election,service,confirm,leader,session,id,leader,id,verify,leader,retrieval,listener,notify,leader,address,eq,address,eq,leader,id
EmbeddedHaServicesTest -> @Test 	public void testJobManagerLeaderElection() throws Exception;1493975155;Tests that exactly one JobManager is elected as the leader for a given job id.;@Test_	public void testJobManagerLeaderElection() throws Exception {_		JobID jobId1 = new JobID()__		JobID jobId2 = new JobID()___		LeaderContender leaderContender1 = mock(LeaderContender.class)__		LeaderContender leaderContender2 = mock(LeaderContender.class)__		LeaderContender leaderContenderDifferentJobId = mock(LeaderContender.class)___		LeaderElectionService leaderElectionService1 = embeddedHaServices.getJobManagerLeaderElectionService(jobId1)__		LeaderElectionService leaderElectionService2 = embeddedHaServices.getJobManagerLeaderElectionService(jobId1)__		LeaderElectionService leaderElectionServiceDifferentJobId = embeddedHaServices.getJobManagerLeaderElectionService(jobId2)___		leaderElectionService1.start(leaderContender1)__		leaderElectionService2.start(leaderContender2)__		leaderElectionServiceDifferentJobId.start(leaderContenderDifferentJobId)___		ArgumentCaptor<UUID> leaderIdArgumentCaptor1 = ArgumentCaptor.forClass(UUID.class)__		ArgumentCaptor<UUID> leaderIdArgumentCaptor2 = ArgumentCaptor.forClass(UUID.class)__		verify(leaderContender1, atLeast(0)).grantLeadership(leaderIdArgumentCaptor1.capture())__		verify(leaderContender2, atLeast(0)).grantLeadership(leaderIdArgumentCaptor2.capture())___		assertTrue(leaderIdArgumentCaptor1.getAllValues().isEmpty() ^ leaderIdArgumentCaptor2.getAllValues().isEmpty())___		verify(leaderContenderDifferentJobId).grantLeadership(any(UUID.class))__	};tests,that,exactly,one,job,manager,is,elected,as,the,leader,for,a,given,job,id;test,public,void,test,job,manager,leader,election,throws,exception,job,id,job,id1,new,job,id,job,id,job,id2,new,job,id,leader,contender,leader,contender1,mock,leader,contender,class,leader,contender,leader,contender2,mock,leader,contender,class,leader,contender,leader,contender,different,job,id,mock,leader,contender,class,leader,election,service,leader,election,service1,embedded,ha,services,get,job,manager,leader,election,service,job,id1,leader,election,service,leader,election,service2,embedded,ha,services,get,job,manager,leader,election,service,job,id1,leader,election,service,leader,election,service,different,job,id,embedded,ha,services,get,job,manager,leader,election,service,job,id2,leader,election,service1,start,leader,contender1,leader,election,service2,start,leader,contender2,leader,election,service,different,job,id,start,leader,contender,different,job,id,argument,captor,uuid,leader,id,argument,captor1,argument,captor,for,class,uuid,class,argument,captor,uuid,leader,id,argument,captor2,argument,captor,for,class,uuid,class,verify,leader,contender1,at,least,0,grant,leadership,leader,id,argument,captor1,capture,verify,leader,contender2,at,least,0,grant,leadership,leader,id,argument,captor2,capture,assert,true,leader,id,argument,captor1,get,all,values,is,empty,leader,id,argument,captor2,get,all,values,is,empty,verify,leader,contender,different,job,id,grant,leadership,any,uuid,class
EmbeddedHaServicesTest -> @Test 	public void testJobManagerLeaderElection() throws Exception;1549545568;Tests that exactly one JobManager is elected as the leader for a given job id.;@Test_	public void testJobManagerLeaderElection() throws Exception {_		JobID jobId1 = new JobID()__		JobID jobId2 = new JobID()___		LeaderContender leaderContender1 = mock(LeaderContender.class)__		LeaderContender leaderContender2 = mock(LeaderContender.class)__		LeaderContender leaderContenderDifferentJobId = mock(LeaderContender.class)___		LeaderElectionService leaderElectionService1 = embeddedHaServices.getJobManagerLeaderElectionService(jobId1)__		LeaderElectionService leaderElectionService2 = embeddedHaServices.getJobManagerLeaderElectionService(jobId1)__		LeaderElectionService leaderElectionServiceDifferentJobId = embeddedHaServices.getJobManagerLeaderElectionService(jobId2)___		leaderElectionService1.start(leaderContender1)__		leaderElectionService2.start(leaderContender2)__		leaderElectionServiceDifferentJobId.start(leaderContenderDifferentJobId)___		ArgumentCaptor<UUID> leaderIdArgumentCaptor1 = ArgumentCaptor.forClass(UUID.class)__		ArgumentCaptor<UUID> leaderIdArgumentCaptor2 = ArgumentCaptor.forClass(UUID.class)__		verify(leaderContender1, atLeast(0)).grantLeadership(leaderIdArgumentCaptor1.capture())__		verify(leaderContender2, atLeast(0)).grantLeadership(leaderIdArgumentCaptor2.capture())___		assertTrue(leaderIdArgumentCaptor1.getAllValues().isEmpty() ^ leaderIdArgumentCaptor2.getAllValues().isEmpty())___		verify(leaderContenderDifferentJobId).grantLeadership(any(UUID.class))__	};tests,that,exactly,one,job,manager,is,elected,as,the,leader,for,a,given,job,id;test,public,void,test,job,manager,leader,election,throws,exception,job,id,job,id1,new,job,id,job,id,job,id2,new,job,id,leader,contender,leader,contender1,mock,leader,contender,class,leader,contender,leader,contender2,mock,leader,contender,class,leader,contender,leader,contender,different,job,id,mock,leader,contender,class,leader,election,service,leader,election,service1,embedded,ha,services,get,job,manager,leader,election,service,job,id1,leader,election,service,leader,election,service2,embedded,ha,services,get,job,manager,leader,election,service,job,id1,leader,election,service,leader,election,service,different,job,id,embedded,ha,services,get,job,manager,leader,election,service,job,id2,leader,election,service1,start,leader,contender1,leader,election,service2,start,leader,contender2,leader,election,service,different,job,id,start,leader,contender,different,job,id,argument,captor,uuid,leader,id,argument,captor1,argument,captor,for,class,uuid,class,argument,captor,uuid,leader,id,argument,captor2,argument,captor,for,class,uuid,class,verify,leader,contender1,at,least,0,grant,leadership,leader,id,argument,captor1,capture,verify,leader,contender2,at,least,0,grant,leadership,leader,id,argument,captor2,capture,assert,true,leader,id,argument,captor1,get,all,values,is,empty,leader,id,argument,captor2,get,all,values,is,empty,verify,leader,contender,different,job,id,grant,leadership,any,uuid,class
EmbeddedHaServicesTest -> @Test 	public void testJobManagerLeaderElection() throws Exception;1549545568;Tests that exactly one JobManager is elected as the leader for a given job id.;@Test_	public void testJobManagerLeaderElection() throws Exception {_		JobID jobId1 = new JobID()__		JobID jobId2 = new JobID()___		LeaderContender leaderContender1 = mock(LeaderContender.class)__		LeaderContender leaderContender2 = mock(LeaderContender.class)__		LeaderContender leaderContenderDifferentJobId = mock(LeaderContender.class)___		LeaderElectionService leaderElectionService1 = embeddedHaServices.getJobManagerLeaderElectionService(jobId1)__		LeaderElectionService leaderElectionService2 = embeddedHaServices.getJobManagerLeaderElectionService(jobId1)__		LeaderElectionService leaderElectionServiceDifferentJobId = embeddedHaServices.getJobManagerLeaderElectionService(jobId2)___		leaderElectionService1.start(leaderContender1)__		leaderElectionService2.start(leaderContender2)__		leaderElectionServiceDifferentJobId.start(leaderContenderDifferentJobId)___		ArgumentCaptor<UUID> leaderIdArgumentCaptor1 = ArgumentCaptor.forClass(UUID.class)__		ArgumentCaptor<UUID> leaderIdArgumentCaptor2 = ArgumentCaptor.forClass(UUID.class)__		verify(leaderContender1, atLeast(0)).grantLeadership(leaderIdArgumentCaptor1.capture())__		verify(leaderContender2, atLeast(0)).grantLeadership(leaderIdArgumentCaptor2.capture())___		assertTrue(leaderIdArgumentCaptor1.getAllValues().isEmpty() ^ leaderIdArgumentCaptor2.getAllValues().isEmpty())___		verify(leaderContenderDifferentJobId).grantLeadership(any(UUID.class))__	};tests,that,exactly,one,job,manager,is,elected,as,the,leader,for,a,given,job,id;test,public,void,test,job,manager,leader,election,throws,exception,job,id,job,id1,new,job,id,job,id,job,id2,new,job,id,leader,contender,leader,contender1,mock,leader,contender,class,leader,contender,leader,contender2,mock,leader,contender,class,leader,contender,leader,contender,different,job,id,mock,leader,contender,class,leader,election,service,leader,election,service1,embedded,ha,services,get,job,manager,leader,election,service,job,id1,leader,election,service,leader,election,service2,embedded,ha,services,get,job,manager,leader,election,service,job,id1,leader,election,service,leader,election,service,different,job,id,embedded,ha,services,get,job,manager,leader,election,service,job,id2,leader,election,service1,start,leader,contender1,leader,election,service2,start,leader,contender2,leader,election,service,different,job,id,start,leader,contender,different,job,id,argument,captor,uuid,leader,id,argument,captor1,argument,captor,for,class,uuid,class,argument,captor,uuid,leader,id,argument,captor2,argument,captor,for,class,uuid,class,verify,leader,contender1,at,least,0,grant,leadership,leader,id,argument,captor1,capture,verify,leader,contender2,at,least,0,grant,leadership,leader,id,argument,captor2,capture,assert,true,leader,id,argument,captor1,get,all,values,is,empty,leader,id,argument,captor2,get,all,values,is,empty,verify,leader,contender,different,job,id,grant,leadership,any,uuid,class
EmbeddedHaServicesTest -> @Test 	public void testResourceManagerLeaderElection() throws Exception;1493975155;Tests that exactly one ResourceManager is elected as the leader.;@Test_	public void testResourceManagerLeaderElection() throws Exception {_		LeaderContender leaderContender1 = mock(LeaderContender.class)__		LeaderContender leaderContender2 = mock(LeaderContender.class)___		LeaderElectionService leaderElectionService1 = embeddedHaServices.getResourceManagerLeaderElectionService()__		LeaderElectionService leaderElectionService2 = embeddedHaServices.getResourceManagerLeaderElectionService()___		leaderElectionService1.start(leaderContender1)__		leaderElectionService2.start(leaderContender2)___		ArgumentCaptor<UUID> leaderIdArgumentCaptor1 = ArgumentCaptor.forClass(UUID.class)__		ArgumentCaptor<UUID> leaderIdArgumentCaptor2 = ArgumentCaptor.forClass(UUID.class)__		verify(leaderContender1, atLeast(0)).grantLeadership(leaderIdArgumentCaptor1.capture())__		verify(leaderContender2, atLeast(0)).grantLeadership(leaderIdArgumentCaptor2.capture())___		assertTrue(leaderIdArgumentCaptor1.getAllValues().isEmpty() ^ leaderIdArgumentCaptor2.getAllValues().isEmpty())__	};tests,that,exactly,one,resource,manager,is,elected,as,the,leader;test,public,void,test,resource,manager,leader,election,throws,exception,leader,contender,leader,contender1,mock,leader,contender,class,leader,contender,leader,contender2,mock,leader,contender,class,leader,election,service,leader,election,service1,embedded,ha,services,get,resource,manager,leader,election,service,leader,election,service,leader,election,service2,embedded,ha,services,get,resource,manager,leader,election,service,leader,election,service1,start,leader,contender1,leader,election,service2,start,leader,contender2,argument,captor,uuid,leader,id,argument,captor1,argument,captor,for,class,uuid,class,argument,captor,uuid,leader,id,argument,captor2,argument,captor,for,class,uuid,class,verify,leader,contender1,at,least,0,grant,leadership,leader,id,argument,captor1,capture,verify,leader,contender2,at,least,0,grant,leadership,leader,id,argument,captor2,capture,assert,true,leader,id,argument,captor1,get,all,values,is,empty,leader,id,argument,captor2,get,all,values,is,empty
EmbeddedHaServicesTest -> @Test 	public void testResourceManagerLeaderElection() throws Exception;1549545568;Tests that exactly one ResourceManager is elected as the leader.;@Test_	public void testResourceManagerLeaderElection() throws Exception {_		LeaderContender leaderContender1 = mock(LeaderContender.class)__		LeaderContender leaderContender2 = mock(LeaderContender.class)___		LeaderElectionService leaderElectionService1 = embeddedHaServices.getResourceManagerLeaderElectionService()__		LeaderElectionService leaderElectionService2 = embeddedHaServices.getResourceManagerLeaderElectionService()___		leaderElectionService1.start(leaderContender1)__		leaderElectionService2.start(leaderContender2)___		ArgumentCaptor<UUID> leaderIdArgumentCaptor1 = ArgumentCaptor.forClass(UUID.class)__		ArgumentCaptor<UUID> leaderIdArgumentCaptor2 = ArgumentCaptor.forClass(UUID.class)__		verify(leaderContender1, atLeast(0)).grantLeadership(leaderIdArgumentCaptor1.capture())__		verify(leaderContender2, atLeast(0)).grantLeadership(leaderIdArgumentCaptor2.capture())___		assertTrue(leaderIdArgumentCaptor1.getAllValues().isEmpty() ^ leaderIdArgumentCaptor2.getAllValues().isEmpty())__	};tests,that,exactly,one,resource,manager,is,elected,as,the,leader;test,public,void,test,resource,manager,leader,election,throws,exception,leader,contender,leader,contender1,mock,leader,contender,class,leader,contender,leader,contender2,mock,leader,contender,class,leader,election,service,leader,election,service1,embedded,ha,services,get,resource,manager,leader,election,service,leader,election,service,leader,election,service2,embedded,ha,services,get,resource,manager,leader,election,service,leader,election,service1,start,leader,contender1,leader,election,service2,start,leader,contender2,argument,captor,uuid,leader,id,argument,captor1,argument,captor,for,class,uuid,class,argument,captor,uuid,leader,id,argument,captor2,argument,captor,for,class,uuid,class,verify,leader,contender1,at,least,0,grant,leadership,leader,id,argument,captor1,capture,verify,leader,contender2,at,least,0,grant,leadership,leader,id,argument,captor2,capture,assert,true,leader,id,argument,captor1,get,all,values,is,empty,leader,id,argument,captor2,get,all,values,is,empty
EmbeddedHaServicesTest -> @Test 	public void testResourceManagerLeaderElection() throws Exception;1549545568;Tests that exactly one ResourceManager is elected as the leader.;@Test_	public void testResourceManagerLeaderElection() throws Exception {_		LeaderContender leaderContender1 = mock(LeaderContender.class)__		LeaderContender leaderContender2 = mock(LeaderContender.class)___		LeaderElectionService leaderElectionService1 = embeddedHaServices.getResourceManagerLeaderElectionService()__		LeaderElectionService leaderElectionService2 = embeddedHaServices.getResourceManagerLeaderElectionService()___		leaderElectionService1.start(leaderContender1)__		leaderElectionService2.start(leaderContender2)___		ArgumentCaptor<UUID> leaderIdArgumentCaptor1 = ArgumentCaptor.forClass(UUID.class)__		ArgumentCaptor<UUID> leaderIdArgumentCaptor2 = ArgumentCaptor.forClass(UUID.class)__		verify(leaderContender1, atLeast(0)).grantLeadership(leaderIdArgumentCaptor1.capture())__		verify(leaderContender2, atLeast(0)).grantLeadership(leaderIdArgumentCaptor2.capture())___		assertTrue(leaderIdArgumentCaptor1.getAllValues().isEmpty() ^ leaderIdArgumentCaptor2.getAllValues().isEmpty())__	};tests,that,exactly,one,resource,manager,is,elected,as,the,leader;test,public,void,test,resource,manager,leader,election,throws,exception,leader,contender,leader,contender1,mock,leader,contender,class,leader,contender,leader,contender2,mock,leader,contender,class,leader,election,service,leader,election,service1,embedded,ha,services,get,resource,manager,leader,election,service,leader,election,service,leader,election,service2,embedded,ha,services,get,resource,manager,leader,election,service,leader,election,service1,start,leader,contender1,leader,election,service2,start,leader,contender2,argument,captor,uuid,leader,id,argument,captor1,argument,captor,for,class,uuid,class,argument,captor,uuid,leader,id,argument,captor2,argument,captor,for,class,uuid,class,verify,leader,contender1,at,least,0,grant,leadership,leader,id,argument,captor1,capture,verify,leader,contender2,at,least,0,grant,leadership,leader,id,argument,captor2,capture,assert,true,leader,id,argument,captor1,get,all,values,is,empty,leader,id,argument,captor2,get,all,values,is,empty
