# id;timestamp;commentText;codeText;commentWords;codeWords
CheckpointCoordinatorMasterHooksTest -> @Test 	public void ensureRegisteredAtHookTime() throws Exception;1493325408;This test makes sure that the checkpoint is already registered by the time_that the hooks are called;@Test_	public void ensureRegisteredAtHookTime() throws Exception {_		final String id = "id"___		_		final JobID jid = new JobID()__		final ExecutionAttemptID execId = new ExecutionAttemptID()__		final ExecutionVertex ackVertex = mockExecutionVertex(execId)__		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(jid, ackVertex)___		final MasterTriggerRestoreHook<Void> hook = mockGeneric(MasterTriggerRestoreHook.class)__		when(hook.getIdentifier()).thenReturn(id)__		when(hook.triggerCheckpoint(anyLong(), anyLong(), any(Executor.class))).thenAnswer(_				new Answer<Future<Void>>() {__					@Override_					public Future<Void> answer(InvocationOnMock invocation) throws Throwable {_						assertEquals(1, cc.getNumberOfPendingCheckpoints())___						long checkpointId = (Long) invocation.getArguments()[0]__						assertNotNull(cc.getPendingCheckpoints().get(checkpointId))__						return null__					}_				}_		)___		cc.addMasterHook(hook)___		_		assertTrue(cc.triggerCheckpoint(System.currentTimeMillis(), false))__	};this,test,makes,sure,that,the,checkpoint,is,already,registered,by,the,time,that,the,hooks,are,called;test,public,void,ensure,registered,at,hook,time,throws,exception,final,string,id,id,final,job,id,jid,new,job,id,final,execution,attempt,id,exec,id,new,execution,attempt,id,final,execution,vertex,ack,vertex,mock,execution,vertex,exec,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,jid,ack,vertex,final,master,trigger,restore,hook,void,hook,mock,generic,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,id,when,hook,trigger,checkpoint,any,long,any,long,any,executor,class,then,answer,new,answer,future,void,override,public,future,void,answer,invocation,on,mock,invocation,throws,throwable,assert,equals,1,cc,get,number,of,pending,checkpoints,long,checkpoint,id,long,invocation,get,arguments,0,assert,not,null,cc,get,pending,checkpoints,get,checkpoint,id,return,null,cc,add,master,hook,hook,assert,true,cc,trigger,checkpoint,system,current,time,millis,false
CheckpointCoordinatorMasterHooksTest -> @Test 	public void ensureRegisteredAtHookTime() throws Exception;1493403095;This test makes sure that the checkpoint is already registered by the time_that the hooks are called;@Test_	public void ensureRegisteredAtHookTime() throws Exception {_		final String id = "id"___		_		final JobID jid = new JobID()__		final ExecutionAttemptID execId = new ExecutionAttemptID()__		final ExecutionVertex ackVertex = mockExecutionVertex(execId)__		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(jid, ackVertex)___		final MasterTriggerRestoreHook<Void> hook = mockGeneric(MasterTriggerRestoreHook.class)__		when(hook.getIdentifier()).thenReturn(id)__		when(hook.triggerCheckpoint(anyLong(), anyLong(), any(Executor.class))).thenAnswer(_				new Answer<Future<Void>>() {__					@Override_					public Future<Void> answer(InvocationOnMock invocation) throws Throwable {_						assertEquals(1, cc.getNumberOfPendingCheckpoints())___						long checkpointId = (Long) invocation.getArguments()[0]__						assertNotNull(cc.getPendingCheckpoints().get(checkpointId))__						return null__					}_				}_		)___		cc.addMasterHook(hook)___		_		assertTrue(cc.triggerCheckpoint(System.currentTimeMillis(), false))__	};this,test,makes,sure,that,the,checkpoint,is,already,registered,by,the,time,that,the,hooks,are,called;test,public,void,ensure,registered,at,hook,time,throws,exception,final,string,id,id,final,job,id,jid,new,job,id,final,execution,attempt,id,exec,id,new,execution,attempt,id,final,execution,vertex,ack,vertex,mock,execution,vertex,exec,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,jid,ack,vertex,final,master,trigger,restore,hook,void,hook,mock,generic,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,id,when,hook,trigger,checkpoint,any,long,any,long,any,executor,class,then,answer,new,answer,future,void,override,public,future,void,answer,invocation,on,mock,invocation,throws,throwable,assert,equals,1,cc,get,number,of,pending,checkpoints,long,checkpoint,id,long,invocation,get,arguments,0,assert,not,null,cc,get,pending,checkpoints,get,checkpoint,id,return,null,cc,add,master,hook,hook,assert,true,cc,trigger,checkpoint,system,current,time,millis,false
CheckpointCoordinatorMasterHooksTest -> @Test 	public void ensureRegisteredAtHookTime() throws Exception;1501664690;This test makes sure that the checkpoint is already registered by the time_that the hooks are called;@Test_	public void ensureRegisteredAtHookTime() throws Exception {_		final String id = "id"___		_		final JobID jid = new JobID()__		final ExecutionAttemptID execId = new ExecutionAttemptID()__		final ExecutionVertex ackVertex = mockExecutionVertex(execId)__		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(jid, ackVertex)___		final MasterTriggerRestoreHook<Void> hook = mockGeneric(MasterTriggerRestoreHook.class)__		when(hook.getIdentifier()).thenReturn(id)__		when(hook.triggerCheckpoint(anyLong(), anyLong(), any(Executor.class))).thenAnswer(_				new Answer<Future<Void>>() {__					@Override_					public Future<Void> answer(InvocationOnMock invocation) throws Throwable {_						assertEquals(1, cc.getNumberOfPendingCheckpoints())___						long checkpointId = (Long) invocation.getArguments()[0]__						assertNotNull(cc.getPendingCheckpoints().get(checkpointId))__						return null__					}_				}_		)___		cc.addMasterHook(hook)___		_		assertTrue(cc.triggerCheckpoint(System.currentTimeMillis(), false))__	};this,test,makes,sure,that,the,checkpoint,is,already,registered,by,the,time,that,the,hooks,are,called;test,public,void,ensure,registered,at,hook,time,throws,exception,final,string,id,id,final,job,id,jid,new,job,id,final,execution,attempt,id,exec,id,new,execution,attempt,id,final,execution,vertex,ack,vertex,mock,execution,vertex,exec,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,jid,ack,vertex,final,master,trigger,restore,hook,void,hook,mock,generic,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,id,when,hook,trigger,checkpoint,any,long,any,long,any,executor,class,then,answer,new,answer,future,void,override,public,future,void,answer,invocation,on,mock,invocation,throws,throwable,assert,equals,1,cc,get,number,of,pending,checkpoints,long,checkpoint,id,long,invocation,get,arguments,0,assert,not,null,cc,get,pending,checkpoints,get,checkpoint,id,return,null,cc,add,master,hook,hook,assert,true,cc,trigger,checkpoint,system,current,time,millis,false
CheckpointCoordinatorMasterHooksTest -> @Test 	public void ensureRegisteredAtHookTime() throws Exception;1501760738;This test makes sure that the checkpoint is already registered by the time_that the hooks are called;@Test_	public void ensureRegisteredAtHookTime() throws Exception {_		final String id = "id"___		_		final JobID jid = new JobID()__		final ExecutionAttemptID execId = new ExecutionAttemptID()__		final ExecutionVertex ackVertex = mockExecutionVertex(execId)__		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(jid, ackVertex)___		final MasterTriggerRestoreHook<Void> hook = mockGeneric(MasterTriggerRestoreHook.class)__		when(hook.getIdentifier()).thenReturn(id)__		when(hook.triggerCheckpoint(anyLong(), anyLong(), any(Executor.class))).thenAnswer(_				new Answer<CompletableFuture<Void>>() {__					@Override_					public CompletableFuture<Void> answer(InvocationOnMock invocation) throws Throwable {_						assertEquals(1, cc.getNumberOfPendingCheckpoints())___						long checkpointId = (Long) invocation.getArguments()[0]__						assertNotNull(cc.getPendingCheckpoints().get(checkpointId))__						return null__					}_				}_		)___		cc.addMasterHook(hook)___		_		assertTrue(cc.triggerCheckpoint(System.currentTimeMillis(), false))__	};this,test,makes,sure,that,the,checkpoint,is,already,registered,by,the,time,that,the,hooks,are,called;test,public,void,ensure,registered,at,hook,time,throws,exception,final,string,id,id,final,job,id,jid,new,job,id,final,execution,attempt,id,exec,id,new,execution,attempt,id,final,execution,vertex,ack,vertex,mock,execution,vertex,exec,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,jid,ack,vertex,final,master,trigger,restore,hook,void,hook,mock,generic,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,id,when,hook,trigger,checkpoint,any,long,any,long,any,executor,class,then,answer,new,answer,completable,future,void,override,public,completable,future,void,answer,invocation,on,mock,invocation,throws,throwable,assert,equals,1,cc,get,number,of,pending,checkpoints,long,checkpoint,id,long,invocation,get,arguments,0,assert,not,null,cc,get,pending,checkpoints,get,checkpoint,id,return,null,cc,add,master,hook,hook,assert,true,cc,trigger,checkpoint,system,current,time,millis,false
CheckpointCoordinatorMasterHooksTest -> @Test 	public void ensureRegisteredAtHookTime() throws Exception;1502801814;This test makes sure that the checkpoint is already registered by the time_that the hooks are called;@Test_	public void ensureRegisteredAtHookTime() throws Exception {_		final String id = "id"___		_		final JobID jid = new JobID()__		final ExecutionAttemptID execId = new ExecutionAttemptID()__		final ExecutionVertex ackVertex = mockExecutionVertex(execId)__		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(jid, ackVertex)___		final MasterTriggerRestoreHook<Void> hook = mockGeneric(MasterTriggerRestoreHook.class)__		when(hook.getIdentifier()).thenReturn(id)__		when(hook.triggerCheckpoint(anyLong(), anyLong(), any(Executor.class))).thenAnswer(_				new Answer<CompletableFuture<Void>>() {__					@Override_					public CompletableFuture<Void> answer(InvocationOnMock invocation) throws Throwable {_						assertEquals(1, cc.getNumberOfPendingCheckpoints())___						long checkpointId = (Long) invocation.getArguments()[0]__						assertNotNull(cc.getPendingCheckpoints().get(checkpointId))__						return null__					}_				}_		)___		cc.addMasterHook(hook)___		_		assertTrue(cc.triggerCheckpoint(System.currentTimeMillis(), false))__	};this,test,makes,sure,that,the,checkpoint,is,already,registered,by,the,time,that,the,hooks,are,called;test,public,void,ensure,registered,at,hook,time,throws,exception,final,string,id,id,final,job,id,jid,new,job,id,final,execution,attempt,id,exec,id,new,execution,attempt,id,final,execution,vertex,ack,vertex,mock,execution,vertex,exec,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,jid,ack,vertex,final,master,trigger,restore,hook,void,hook,mock,generic,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,id,when,hook,trigger,checkpoint,any,long,any,long,any,executor,class,then,answer,new,answer,completable,future,void,override,public,completable,future,void,answer,invocation,on,mock,invocation,throws,throwable,assert,equals,1,cc,get,number,of,pending,checkpoints,long,checkpoint,id,long,invocation,get,arguments,0,assert,not,null,cc,get,pending,checkpoints,get,checkpoint,id,return,null,cc,add,master,hook,hook,assert,true,cc,trigger,checkpoint,system,current,time,millis,false
CheckpointCoordinatorMasterHooksTest -> @Test 	public void ensureRegisteredAtHookTime() throws Exception;1516295283;This test makes sure that the checkpoint is already registered by the time_that the hooks are called;@Test_	public void ensureRegisteredAtHookTime() throws Exception {_		final String id = "id"___		_		final JobID jid = new JobID()__		final ExecutionAttemptID execId = new ExecutionAttemptID()__		final ExecutionVertex ackVertex = mockExecutionVertex(execId)__		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(jid, ackVertex)___		final MasterTriggerRestoreHook<Void> hook = mockGeneric(MasterTriggerRestoreHook.class)__		when(hook.getIdentifier()).thenReturn(id)__		when(hook.triggerCheckpoint(anyLong(), anyLong(), any(Executor.class))).thenAnswer(_				new Answer<CompletableFuture<Void>>() {__					@Override_					public CompletableFuture<Void> answer(InvocationOnMock invocation) throws Throwable {_						assertEquals(1, cc.getNumberOfPendingCheckpoints())___						long checkpointId = (Long) invocation.getArguments()[0]__						assertNotNull(cc.getPendingCheckpoints().get(checkpointId))__						return null__					}_				}_		)___		cc.addMasterHook(hook)___		_		assertTrue(cc.triggerCheckpoint(System.currentTimeMillis(), false))__	};this,test,makes,sure,that,the,checkpoint,is,already,registered,by,the,time,that,the,hooks,are,called;test,public,void,ensure,registered,at,hook,time,throws,exception,final,string,id,id,final,job,id,jid,new,job,id,final,execution,attempt,id,exec,id,new,execution,attempt,id,final,execution,vertex,ack,vertex,mock,execution,vertex,exec,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,jid,ack,vertex,final,master,trigger,restore,hook,void,hook,mock,generic,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,id,when,hook,trigger,checkpoint,any,long,any,long,any,executor,class,then,answer,new,answer,completable,future,void,override,public,completable,future,void,answer,invocation,on,mock,invocation,throws,throwable,assert,equals,1,cc,get,number,of,pending,checkpoints,long,checkpoint,id,long,invocation,get,arguments,0,assert,not,null,cc,get,pending,checkpoints,get,checkpoint,id,return,null,cc,add,master,hook,hook,assert,true,cc,trigger,checkpoint,system,current,time,millis,false
CheckpointCoordinatorMasterHooksTest -> @Test 	public void ensureRegisteredAtHookTime() throws Exception;1516295283;This test makes sure that the checkpoint is already registered by the time_that the hooks are called;@Test_	public void ensureRegisteredAtHookTime() throws Exception {_		final String id = "id"___		_		final JobID jid = new JobID()__		final ExecutionAttemptID execId = new ExecutionAttemptID()__		final ExecutionVertex ackVertex = mockExecutionVertex(execId)__		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(jid, ackVertex)___		final MasterTriggerRestoreHook<Void> hook = mockGeneric(MasterTriggerRestoreHook.class)__		when(hook.getIdentifier()).thenReturn(id)__		when(hook.triggerCheckpoint(anyLong(), anyLong(), any(Executor.class))).thenAnswer(_				new Answer<CompletableFuture<Void>>() {__					@Override_					public CompletableFuture<Void> answer(InvocationOnMock invocation) throws Throwable {_						assertEquals(1, cc.getNumberOfPendingCheckpoints())___						long checkpointId = (Long) invocation.getArguments()[0]__						assertNotNull(cc.getPendingCheckpoints().get(checkpointId))__						return null__					}_				}_		)___		cc.addMasterHook(hook)___		_		assertTrue(cc.triggerCheckpoint(System.currentTimeMillis(), false))__	};this,test,makes,sure,that,the,checkpoint,is,already,registered,by,the,time,that,the,hooks,are,called;test,public,void,ensure,registered,at,hook,time,throws,exception,final,string,id,id,final,job,id,jid,new,job,id,final,execution,attempt,id,exec,id,new,execution,attempt,id,final,execution,vertex,ack,vertex,mock,execution,vertex,exec,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,jid,ack,vertex,final,master,trigger,restore,hook,void,hook,mock,generic,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,id,when,hook,trigger,checkpoint,any,long,any,long,any,executor,class,then,answer,new,answer,completable,future,void,override,public,completable,future,void,answer,invocation,on,mock,invocation,throws,throwable,assert,equals,1,cc,get,number,of,pending,checkpoints,long,checkpoint,id,long,invocation,get,arguments,0,assert,not,null,cc,get,pending,checkpoints,get,checkpoint,id,return,null,cc,add,master,hook,hook,assert,true,cc,trigger,checkpoint,system,current,time,millis,false
CheckpointCoordinatorMasterHooksTest -> @Test 	public void ensureRegisteredAtHookTime() throws Exception;1517489696;This test makes sure that the checkpoint is already registered by the time_that the hooks are called;@Test_	public void ensureRegisteredAtHookTime() throws Exception {_		final String id = "id"___		_		final JobID jid = new JobID()__		final ExecutionAttemptID execId = new ExecutionAttemptID()__		final ExecutionVertex ackVertex = mockExecutionVertex(execId)__		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(jid, ackVertex)___		final MasterTriggerRestoreHook<Void> hook = mockGeneric(MasterTriggerRestoreHook.class)__		when(hook.getIdentifier()).thenReturn(id)__		when(hook.triggerCheckpoint(anyLong(), anyLong(), any(Executor.class))).thenAnswer(_				new Answer<CompletableFuture<Void>>() {__					@Override_					public CompletableFuture<Void> answer(InvocationOnMock invocation) throws Throwable {_						assertEquals(1, cc.getNumberOfPendingCheckpoints())___						long checkpointId = (Long) invocation.getArguments()[0]__						assertNotNull(cc.getPendingCheckpoints().get(checkpointId))__						return null__					}_				}_		)___		cc.addMasterHook(hook)___		_		assertTrue(cc.triggerCheckpoint(System.currentTimeMillis(), false))__	};this,test,makes,sure,that,the,checkpoint,is,already,registered,by,the,time,that,the,hooks,are,called;test,public,void,ensure,registered,at,hook,time,throws,exception,final,string,id,id,final,job,id,jid,new,job,id,final,execution,attempt,id,exec,id,new,execution,attempt,id,final,execution,vertex,ack,vertex,mock,execution,vertex,exec,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,jid,ack,vertex,final,master,trigger,restore,hook,void,hook,mock,generic,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,id,when,hook,trigger,checkpoint,any,long,any,long,any,executor,class,then,answer,new,answer,completable,future,void,override,public,completable,future,void,answer,invocation,on,mock,invocation,throws,throwable,assert,equals,1,cc,get,number,of,pending,checkpoints,long,checkpoint,id,long,invocation,get,arguments,0,assert,not,null,cc,get,pending,checkpoints,get,checkpoint,id,return,null,cc,add,master,hook,hook,assert,true,cc,trigger,checkpoint,system,current,time,millis,false
CheckpointCoordinatorMasterHooksTest -> @Test 	public void ensureRegisteredAtHookTime() throws Exception;1525852381;This test makes sure that the checkpoint is already registered by the time_that the hooks are called;@Test_	public void ensureRegisteredAtHookTime() throws Exception {_		final String id = "id"___		_		final JobID jid = new JobID()__		final ExecutionAttemptID execId = new ExecutionAttemptID()__		final ExecutionVertex ackVertex = mockExecutionVertex(execId)__		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(jid, ackVertex)___		final MasterTriggerRestoreHook<Void> hook = mockGeneric(MasterTriggerRestoreHook.class)__		when(hook.getIdentifier()).thenReturn(id)__		when(hook.triggerCheckpoint(anyLong(), anyLong(), any(Executor.class))).thenAnswer(_				new Answer<CompletableFuture<Void>>() {__					@Override_					public CompletableFuture<Void> answer(InvocationOnMock invocation) throws Throwable {_						assertEquals(1, cc.getNumberOfPendingCheckpoints())___						long checkpointId = (Long) invocation.getArguments()[0]__						assertNotNull(cc.getPendingCheckpoints().get(checkpointId))__						return null__					}_				}_		)___		cc.addMasterHook(hook)___		_		assertTrue(cc.triggerCheckpoint(System.currentTimeMillis(), false))__	};this,test,makes,sure,that,the,checkpoint,is,already,registered,by,the,time,that,the,hooks,are,called;test,public,void,ensure,registered,at,hook,time,throws,exception,final,string,id,id,final,job,id,jid,new,job,id,final,execution,attempt,id,exec,id,new,execution,attempt,id,final,execution,vertex,ack,vertex,mock,execution,vertex,exec,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,jid,ack,vertex,final,master,trigger,restore,hook,void,hook,mock,generic,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,id,when,hook,trigger,checkpoint,any,long,any,long,any,executor,class,then,answer,new,answer,completable,future,void,override,public,completable,future,void,answer,invocation,on,mock,invocation,throws,throwable,assert,equals,1,cc,get,number,of,pending,checkpoints,long,checkpoint,id,long,invocation,get,arguments,0,assert,not,null,cc,get,pending,checkpoints,get,checkpoint,id,return,null,cc,add,master,hook,hook,assert,true,cc,trigger,checkpoint,system,current,time,millis,false
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testDeduplicateOnRegister();1493236605;This method tests that hooks with the same identifier are not registered_multiple times.;@Test_	public void testDeduplicateOnRegister() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		MasterTriggerRestoreHook<?> hook1 = mock(MasterTriggerRestoreHook.class)__		when(hook1.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook2 = mock(MasterTriggerRestoreHook.class)__		when(hook2.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook3 = mock(MasterTriggerRestoreHook.class)__		when(hook3.getIdentifier()).thenReturn("anotherId")___		assertTrue(cc.addMasterHook(hook1))__		assertFalse(cc.addMasterHook(hook2))__		assertTrue(cc.addMasterHook(hook3))__	};this,method,tests,that,hooks,with,the,same,identifier,are,not,registered,multiple,times;test,public,void,test,deduplicate,on,register,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,master,trigger,restore,hook,hook1,mock,master,trigger,restore,hook,class,when,hook1,get,identifier,then,return,test,id,master,trigger,restore,hook,hook2,mock,master,trigger,restore,hook,class,when,hook2,get,identifier,then,return,test,id,master,trigger,restore,hook,hook3,mock,master,trigger,restore,hook,class,when,hook3,get,identifier,then,return,another,id,assert,true,cc,add,master,hook,hook1,assert,false,cc,add,master,hook,hook2,assert,true,cc,add,master,hook,hook3
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testDeduplicateOnRegister();1493325408;This method tests that hooks with the same identifier are not registered_multiple times.;@Test_	public void testDeduplicateOnRegister() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		MasterTriggerRestoreHook<?> hook1 = mock(MasterTriggerRestoreHook.class)__		when(hook1.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook2 = mock(MasterTriggerRestoreHook.class)__		when(hook2.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook3 = mock(MasterTriggerRestoreHook.class)__		when(hook3.getIdentifier()).thenReturn("anotherId")___		assertTrue(cc.addMasterHook(hook1))__		assertFalse(cc.addMasterHook(hook2))__		assertTrue(cc.addMasterHook(hook3))__	};this,method,tests,that,hooks,with,the,same,identifier,are,not,registered,multiple,times;test,public,void,test,deduplicate,on,register,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,master,trigger,restore,hook,hook1,mock,master,trigger,restore,hook,class,when,hook1,get,identifier,then,return,test,id,master,trigger,restore,hook,hook2,mock,master,trigger,restore,hook,class,when,hook2,get,identifier,then,return,test,id,master,trigger,restore,hook,hook3,mock,master,trigger,restore,hook,class,when,hook3,get,identifier,then,return,another,id,assert,true,cc,add,master,hook,hook1,assert,false,cc,add,master,hook,hook2,assert,true,cc,add,master,hook,hook3
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testDeduplicateOnRegister();1493403095;This method tests that hooks with the same identifier are not registered_multiple times.;@Test_	public void testDeduplicateOnRegister() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		MasterTriggerRestoreHook<?> hook1 = mock(MasterTriggerRestoreHook.class)__		when(hook1.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook2 = mock(MasterTriggerRestoreHook.class)__		when(hook2.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook3 = mock(MasterTriggerRestoreHook.class)__		when(hook3.getIdentifier()).thenReturn("anotherId")___		assertTrue(cc.addMasterHook(hook1))__		assertFalse(cc.addMasterHook(hook2))__		assertTrue(cc.addMasterHook(hook3))__	};this,method,tests,that,hooks,with,the,same,identifier,are,not,registered,multiple,times;test,public,void,test,deduplicate,on,register,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,master,trigger,restore,hook,hook1,mock,master,trigger,restore,hook,class,when,hook1,get,identifier,then,return,test,id,master,trigger,restore,hook,hook2,mock,master,trigger,restore,hook,class,when,hook2,get,identifier,then,return,test,id,master,trigger,restore,hook,hook3,mock,master,trigger,restore,hook,class,when,hook3,get,identifier,then,return,another,id,assert,true,cc,add,master,hook,hook1,assert,false,cc,add,master,hook,hook2,assert,true,cc,add,master,hook,hook3
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testDeduplicateOnRegister();1501664690;This method tests that hooks with the same identifier are not registered_multiple times.;@Test_	public void testDeduplicateOnRegister() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		MasterTriggerRestoreHook<?> hook1 = mock(MasterTriggerRestoreHook.class)__		when(hook1.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook2 = mock(MasterTriggerRestoreHook.class)__		when(hook2.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook3 = mock(MasterTriggerRestoreHook.class)__		when(hook3.getIdentifier()).thenReturn("anotherId")___		assertTrue(cc.addMasterHook(hook1))__		assertFalse(cc.addMasterHook(hook2))__		assertTrue(cc.addMasterHook(hook3))__	};this,method,tests,that,hooks,with,the,same,identifier,are,not,registered,multiple,times;test,public,void,test,deduplicate,on,register,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,master,trigger,restore,hook,hook1,mock,master,trigger,restore,hook,class,when,hook1,get,identifier,then,return,test,id,master,trigger,restore,hook,hook2,mock,master,trigger,restore,hook,class,when,hook2,get,identifier,then,return,test,id,master,trigger,restore,hook,hook3,mock,master,trigger,restore,hook,class,when,hook3,get,identifier,then,return,another,id,assert,true,cc,add,master,hook,hook1,assert,false,cc,add,master,hook,hook2,assert,true,cc,add,master,hook,hook3
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testDeduplicateOnRegister();1501760738;This method tests that hooks with the same identifier are not registered_multiple times.;@Test_	public void testDeduplicateOnRegister() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		MasterTriggerRestoreHook<?> hook1 = mock(MasterTriggerRestoreHook.class)__		when(hook1.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook2 = mock(MasterTriggerRestoreHook.class)__		when(hook2.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook3 = mock(MasterTriggerRestoreHook.class)__		when(hook3.getIdentifier()).thenReturn("anotherId")___		assertTrue(cc.addMasterHook(hook1))__		assertFalse(cc.addMasterHook(hook2))__		assertTrue(cc.addMasterHook(hook3))__	};this,method,tests,that,hooks,with,the,same,identifier,are,not,registered,multiple,times;test,public,void,test,deduplicate,on,register,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,master,trigger,restore,hook,hook1,mock,master,trigger,restore,hook,class,when,hook1,get,identifier,then,return,test,id,master,trigger,restore,hook,hook2,mock,master,trigger,restore,hook,class,when,hook2,get,identifier,then,return,test,id,master,trigger,restore,hook,hook3,mock,master,trigger,restore,hook,class,when,hook3,get,identifier,then,return,another,id,assert,true,cc,add,master,hook,hook1,assert,false,cc,add,master,hook,hook2,assert,true,cc,add,master,hook,hook3
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testDeduplicateOnRegister();1502801814;This method tests that hooks with the same identifier are not registered_multiple times.;@Test_	public void testDeduplicateOnRegister() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		MasterTriggerRestoreHook<?> hook1 = mock(MasterTriggerRestoreHook.class)__		when(hook1.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook2 = mock(MasterTriggerRestoreHook.class)__		when(hook2.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook3 = mock(MasterTriggerRestoreHook.class)__		when(hook3.getIdentifier()).thenReturn("anotherId")___		assertTrue(cc.addMasterHook(hook1))__		assertFalse(cc.addMasterHook(hook2))__		assertTrue(cc.addMasterHook(hook3))__	};this,method,tests,that,hooks,with,the,same,identifier,are,not,registered,multiple,times;test,public,void,test,deduplicate,on,register,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,master,trigger,restore,hook,hook1,mock,master,trigger,restore,hook,class,when,hook1,get,identifier,then,return,test,id,master,trigger,restore,hook,hook2,mock,master,trigger,restore,hook,class,when,hook2,get,identifier,then,return,test,id,master,trigger,restore,hook,hook3,mock,master,trigger,restore,hook,class,when,hook3,get,identifier,then,return,another,id,assert,true,cc,add,master,hook,hook1,assert,false,cc,add,master,hook,hook2,assert,true,cc,add,master,hook,hook3
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testDeduplicateOnRegister();1516295283;This method tests that hooks with the same identifier are not registered_multiple times.;@Test_	public void testDeduplicateOnRegister() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		MasterTriggerRestoreHook<?> hook1 = mock(MasterTriggerRestoreHook.class)__		when(hook1.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook2 = mock(MasterTriggerRestoreHook.class)__		when(hook2.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook3 = mock(MasterTriggerRestoreHook.class)__		when(hook3.getIdentifier()).thenReturn("anotherId")___		assertTrue(cc.addMasterHook(hook1))__		assertFalse(cc.addMasterHook(hook2))__		assertTrue(cc.addMasterHook(hook3))__	};this,method,tests,that,hooks,with,the,same,identifier,are,not,registered,multiple,times;test,public,void,test,deduplicate,on,register,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,master,trigger,restore,hook,hook1,mock,master,trigger,restore,hook,class,when,hook1,get,identifier,then,return,test,id,master,trigger,restore,hook,hook2,mock,master,trigger,restore,hook,class,when,hook2,get,identifier,then,return,test,id,master,trigger,restore,hook,hook3,mock,master,trigger,restore,hook,class,when,hook3,get,identifier,then,return,another,id,assert,true,cc,add,master,hook,hook1,assert,false,cc,add,master,hook,hook2,assert,true,cc,add,master,hook,hook3
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testDeduplicateOnRegister();1516295283;This method tests that hooks with the same identifier are not registered_multiple times.;@Test_	public void testDeduplicateOnRegister() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		MasterTriggerRestoreHook<?> hook1 = mock(MasterTriggerRestoreHook.class)__		when(hook1.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook2 = mock(MasterTriggerRestoreHook.class)__		when(hook2.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook3 = mock(MasterTriggerRestoreHook.class)__		when(hook3.getIdentifier()).thenReturn("anotherId")___		assertTrue(cc.addMasterHook(hook1))__		assertFalse(cc.addMasterHook(hook2))__		assertTrue(cc.addMasterHook(hook3))__	};this,method,tests,that,hooks,with,the,same,identifier,are,not,registered,multiple,times;test,public,void,test,deduplicate,on,register,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,master,trigger,restore,hook,hook1,mock,master,trigger,restore,hook,class,when,hook1,get,identifier,then,return,test,id,master,trigger,restore,hook,hook2,mock,master,trigger,restore,hook,class,when,hook2,get,identifier,then,return,test,id,master,trigger,restore,hook,hook3,mock,master,trigger,restore,hook,class,when,hook3,get,identifier,then,return,another,id,assert,true,cc,add,master,hook,hook1,assert,false,cc,add,master,hook,hook2,assert,true,cc,add,master,hook,hook3
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testDeduplicateOnRegister();1517489696;This method tests that hooks with the same identifier are not registered_multiple times.;@Test_	public void testDeduplicateOnRegister() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		MasterTriggerRestoreHook<?> hook1 = mock(MasterTriggerRestoreHook.class)__		when(hook1.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook2 = mock(MasterTriggerRestoreHook.class)__		when(hook2.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook3 = mock(MasterTriggerRestoreHook.class)__		when(hook3.getIdentifier()).thenReturn("anotherId")___		assertTrue(cc.addMasterHook(hook1))__		assertFalse(cc.addMasterHook(hook2))__		assertTrue(cc.addMasterHook(hook3))__	};this,method,tests,that,hooks,with,the,same,identifier,are,not,registered,multiple,times;test,public,void,test,deduplicate,on,register,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,master,trigger,restore,hook,hook1,mock,master,trigger,restore,hook,class,when,hook1,get,identifier,then,return,test,id,master,trigger,restore,hook,hook2,mock,master,trigger,restore,hook,class,when,hook2,get,identifier,then,return,test,id,master,trigger,restore,hook,hook3,mock,master,trigger,restore,hook,class,when,hook3,get,identifier,then,return,another,id,assert,true,cc,add,master,hook,hook1,assert,false,cc,add,master,hook,hook2,assert,true,cc,add,master,hook,hook3
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testDeduplicateOnRegister();1525852381;This method tests that hooks with the same identifier are not registered_multiple times.;@Test_	public void testDeduplicateOnRegister() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		MasterTriggerRestoreHook<?> hook1 = mock(MasterTriggerRestoreHook.class)__		when(hook1.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook2 = mock(MasterTriggerRestoreHook.class)__		when(hook2.getIdentifier()).thenReturn("test id")___		MasterTriggerRestoreHook<?> hook3 = mock(MasterTriggerRestoreHook.class)__		when(hook3.getIdentifier()).thenReturn("anotherId")___		assertTrue(cc.addMasterHook(hook1))__		assertFalse(cc.addMasterHook(hook2))__		assertTrue(cc.addMasterHook(hook3))__	};this,method,tests,that,hooks,with,the,same,identifier,are,not,registered,multiple,times;test,public,void,test,deduplicate,on,register,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,master,trigger,restore,hook,hook1,mock,master,trigger,restore,hook,class,when,hook1,get,identifier,then,return,test,id,master,trigger,restore,hook,hook2,mock,master,trigger,restore,hook,class,when,hook2,get,identifier,then,return,test,id,master,trigger,restore,hook,hook3,mock,master,trigger,restore,hook,class,when,hook3,get,identifier,then,return,another,id,assert,true,cc,add,master,hook,hook1,assert,false,cc,add,master,hook,hook2,assert,true,cc,add,master,hook,hook3
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testNullOrInvalidId();1493236605;Test that validates correct exceptions when supplying hooks with invalid IDs.;@Test_	public void testNullOrInvalidId() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		try {_			cc.addMasterHook(null)__			fail("expected an exception")__		} catch (NullPointerException ignored) {}__		try {_			cc.addMasterHook(mock(MasterTriggerRestoreHook.class))__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}__		try {_			MasterTriggerRestoreHook<?> hook = mock(MasterTriggerRestoreHook.class)__			when(hook.getIdentifier()).thenReturn("        ")___			cc.addMasterHook(hook)__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}_	};test,that,validates,correct,exceptions,when,supplying,hooks,with,invalid,ids;test,public,void,test,null,or,invalid,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,try,cc,add,master,hook,null,fail,expected,an,exception,catch,null,pointer,exception,ignored,try,cc,add,master,hook,mock,master,trigger,restore,hook,class,fail,expected,an,exception,catch,illegal,argument,exception,ignored,try,master,trigger,restore,hook,hook,mock,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,cc,add,master,hook,hook,fail,expected,an,exception,catch,illegal,argument,exception,ignored
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testNullOrInvalidId();1493325408;Test that validates correct exceptions when supplying hooks with invalid IDs.;@Test_	public void testNullOrInvalidId() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		try {_			cc.addMasterHook(null)__			fail("expected an exception")__		} catch (NullPointerException ignored) {}__		try {_			cc.addMasterHook(mock(MasterTriggerRestoreHook.class))__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}__		try {_			MasterTriggerRestoreHook<?> hook = mock(MasterTriggerRestoreHook.class)__			when(hook.getIdentifier()).thenReturn("        ")___			cc.addMasterHook(hook)__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}_	};test,that,validates,correct,exceptions,when,supplying,hooks,with,invalid,ids;test,public,void,test,null,or,invalid,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,try,cc,add,master,hook,null,fail,expected,an,exception,catch,null,pointer,exception,ignored,try,cc,add,master,hook,mock,master,trigger,restore,hook,class,fail,expected,an,exception,catch,illegal,argument,exception,ignored,try,master,trigger,restore,hook,hook,mock,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,cc,add,master,hook,hook,fail,expected,an,exception,catch,illegal,argument,exception,ignored
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testNullOrInvalidId();1493403095;Test that validates correct exceptions when supplying hooks with invalid IDs.;@Test_	public void testNullOrInvalidId() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		try {_			cc.addMasterHook(null)__			fail("expected an exception")__		} catch (NullPointerException ignored) {}__		try {_			cc.addMasterHook(mock(MasterTriggerRestoreHook.class))__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}__		try {_			MasterTriggerRestoreHook<?> hook = mock(MasterTriggerRestoreHook.class)__			when(hook.getIdentifier()).thenReturn("        ")___			cc.addMasterHook(hook)__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}_	};test,that,validates,correct,exceptions,when,supplying,hooks,with,invalid,ids;test,public,void,test,null,or,invalid,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,try,cc,add,master,hook,null,fail,expected,an,exception,catch,null,pointer,exception,ignored,try,cc,add,master,hook,mock,master,trigger,restore,hook,class,fail,expected,an,exception,catch,illegal,argument,exception,ignored,try,master,trigger,restore,hook,hook,mock,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,cc,add,master,hook,hook,fail,expected,an,exception,catch,illegal,argument,exception,ignored
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testNullOrInvalidId();1501664690;Test that validates correct exceptions when supplying hooks with invalid IDs.;@Test_	public void testNullOrInvalidId() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		try {_			cc.addMasterHook(null)__			fail("expected an exception")__		} catch (NullPointerException ignored) {}__		try {_			cc.addMasterHook(mock(MasterTriggerRestoreHook.class))__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}__		try {_			MasterTriggerRestoreHook<?> hook = mock(MasterTriggerRestoreHook.class)__			when(hook.getIdentifier()).thenReturn("        ")___			cc.addMasterHook(hook)__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}_	};test,that,validates,correct,exceptions,when,supplying,hooks,with,invalid,ids;test,public,void,test,null,or,invalid,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,try,cc,add,master,hook,null,fail,expected,an,exception,catch,null,pointer,exception,ignored,try,cc,add,master,hook,mock,master,trigger,restore,hook,class,fail,expected,an,exception,catch,illegal,argument,exception,ignored,try,master,trigger,restore,hook,hook,mock,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,cc,add,master,hook,hook,fail,expected,an,exception,catch,illegal,argument,exception,ignored
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testNullOrInvalidId();1501760738;Test that validates correct exceptions when supplying hooks with invalid IDs.;@Test_	public void testNullOrInvalidId() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		try {_			cc.addMasterHook(null)__			fail("expected an exception")__		} catch (NullPointerException ignored) {}__		try {_			cc.addMasterHook(mock(MasterTriggerRestoreHook.class))__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}__		try {_			MasterTriggerRestoreHook<?> hook = mock(MasterTriggerRestoreHook.class)__			when(hook.getIdentifier()).thenReturn("        ")___			cc.addMasterHook(hook)__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}_	};test,that,validates,correct,exceptions,when,supplying,hooks,with,invalid,ids;test,public,void,test,null,or,invalid,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,try,cc,add,master,hook,null,fail,expected,an,exception,catch,null,pointer,exception,ignored,try,cc,add,master,hook,mock,master,trigger,restore,hook,class,fail,expected,an,exception,catch,illegal,argument,exception,ignored,try,master,trigger,restore,hook,hook,mock,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,cc,add,master,hook,hook,fail,expected,an,exception,catch,illegal,argument,exception,ignored
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testNullOrInvalidId();1502801814;Test that validates correct exceptions when supplying hooks with invalid IDs.;@Test_	public void testNullOrInvalidId() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		try {_			cc.addMasterHook(null)__			fail("expected an exception")__		} catch (NullPointerException ignored) {}__		try {_			cc.addMasterHook(mock(MasterTriggerRestoreHook.class))__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}__		try {_			MasterTriggerRestoreHook<?> hook = mock(MasterTriggerRestoreHook.class)__			when(hook.getIdentifier()).thenReturn("        ")___			cc.addMasterHook(hook)__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}_	};test,that,validates,correct,exceptions,when,supplying,hooks,with,invalid,ids;test,public,void,test,null,or,invalid,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,try,cc,add,master,hook,null,fail,expected,an,exception,catch,null,pointer,exception,ignored,try,cc,add,master,hook,mock,master,trigger,restore,hook,class,fail,expected,an,exception,catch,illegal,argument,exception,ignored,try,master,trigger,restore,hook,hook,mock,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,cc,add,master,hook,hook,fail,expected,an,exception,catch,illegal,argument,exception,ignored
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testNullOrInvalidId();1516295283;Test that validates correct exceptions when supplying hooks with invalid IDs.;@Test_	public void testNullOrInvalidId() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		try {_			cc.addMasterHook(null)__			fail("expected an exception")__		} catch (NullPointerException ignored) {}__		try {_			cc.addMasterHook(mock(MasterTriggerRestoreHook.class))__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}__		try {_			MasterTriggerRestoreHook<?> hook = mock(MasterTriggerRestoreHook.class)__			when(hook.getIdentifier()).thenReturn("        ")___			cc.addMasterHook(hook)__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}_	};test,that,validates,correct,exceptions,when,supplying,hooks,with,invalid,ids;test,public,void,test,null,or,invalid,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,try,cc,add,master,hook,null,fail,expected,an,exception,catch,null,pointer,exception,ignored,try,cc,add,master,hook,mock,master,trigger,restore,hook,class,fail,expected,an,exception,catch,illegal,argument,exception,ignored,try,master,trigger,restore,hook,hook,mock,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,cc,add,master,hook,hook,fail,expected,an,exception,catch,illegal,argument,exception,ignored
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testNullOrInvalidId();1516295283;Test that validates correct exceptions when supplying hooks with invalid IDs.;@Test_	public void testNullOrInvalidId() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		try {_			cc.addMasterHook(null)__			fail("expected an exception")__		} catch (NullPointerException ignored) {}__		try {_			cc.addMasterHook(mock(MasterTriggerRestoreHook.class))__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}__		try {_			MasterTriggerRestoreHook<?> hook = mock(MasterTriggerRestoreHook.class)__			when(hook.getIdentifier()).thenReturn("        ")___			cc.addMasterHook(hook)__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}_	};test,that,validates,correct,exceptions,when,supplying,hooks,with,invalid,ids;test,public,void,test,null,or,invalid,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,try,cc,add,master,hook,null,fail,expected,an,exception,catch,null,pointer,exception,ignored,try,cc,add,master,hook,mock,master,trigger,restore,hook,class,fail,expected,an,exception,catch,illegal,argument,exception,ignored,try,master,trigger,restore,hook,hook,mock,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,cc,add,master,hook,hook,fail,expected,an,exception,catch,illegal,argument,exception,ignored
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testNullOrInvalidId();1517489696;Test that validates correct exceptions when supplying hooks with invalid IDs.;@Test_	public void testNullOrInvalidId() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		try {_			cc.addMasterHook(null)__			fail("expected an exception")__		} catch (NullPointerException ignored) {}__		try {_			cc.addMasterHook(mock(MasterTriggerRestoreHook.class))__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}__		try {_			MasterTriggerRestoreHook<?> hook = mock(MasterTriggerRestoreHook.class)__			when(hook.getIdentifier()).thenReturn("        ")___			cc.addMasterHook(hook)__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}_	};test,that,validates,correct,exceptions,when,supplying,hooks,with,invalid,ids;test,public,void,test,null,or,invalid,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,try,cc,add,master,hook,null,fail,expected,an,exception,catch,null,pointer,exception,ignored,try,cc,add,master,hook,mock,master,trigger,restore,hook,class,fail,expected,an,exception,catch,illegal,argument,exception,ignored,try,master,trigger,restore,hook,hook,mock,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,cc,add,master,hook,hook,fail,expected,an,exception,catch,illegal,argument,exception,ignored
CheckpointCoordinatorMasterHooksTest -> @Test 	public void testNullOrInvalidId();1525852381;Test that validates correct exceptions when supplying hooks with invalid IDs.;@Test_	public void testNullOrInvalidId() {_		final CheckpointCoordinator cc = instantiateCheckpointCoordinator(new JobID())___		try {_			cc.addMasterHook(null)__			fail("expected an exception")__		} catch (NullPointerException ignored) {}__		try {_			cc.addMasterHook(mock(MasterTriggerRestoreHook.class))__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}__		try {_			MasterTriggerRestoreHook<?> hook = mock(MasterTriggerRestoreHook.class)__			when(hook.getIdentifier()).thenReturn("        ")___			cc.addMasterHook(hook)__			fail("expected an exception")__		} catch (IllegalArgumentException ignored) {}_	};test,that,validates,correct,exceptions,when,supplying,hooks,with,invalid,ids;test,public,void,test,null,or,invalid,id,final,checkpoint,coordinator,cc,instantiate,checkpoint,coordinator,new,job,id,try,cc,add,master,hook,null,fail,expected,an,exception,catch,null,pointer,exception,ignored,try,cc,add,master,hook,mock,master,trigger,restore,hook,class,fail,expected,an,exception,catch,illegal,argument,exception,ignored,try,master,trigger,restore,hook,hook,mock,master,trigger,restore,hook,class,when,hook,get,identifier,then,return,cc,add,master,hook,hook,fail,expected,an,exception,catch,illegal,argument,exception,ignored
