# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutionVertexDeploymentTest -> @Test 	public void testTddProducedPartitionsLazyScheduling() throws Exception;1478815615;Tests that the lazy scheduling flag is correctly forwarded to the produced partition descriptors.;@Test_	public void testTddProducedPartitionsLazyScheduling() throws Exception {_		TestingUtils.QueuedActionExecutionContext context = TestingUtils.queuedActionExecutionContext()__		ExecutionJobVertex jobVertex = getExecutionVertex(new JobVertexID(), context)__		IntermediateResult result = new IntermediateResult(new IntermediateDataSetID(), jobVertex, 4, ResultPartitionType.PIPELINED)__		ExecutionVertex vertex = new ExecutionVertex(jobVertex, 0, new IntermediateResult[]{result}, Time.minutes(1))___		Slot root = mock(Slot.class)__		when(root.getSlotNumber()).thenReturn(1)__		SimpleSlot slot = mock(SimpleSlot.class)__		when(slot.getRoot()).thenReturn(root)___		for (ScheduleMode mode : ScheduleMode.values()) {_			vertex.getExecutionGraph().setScheduleMode(mode)___			TaskDeploymentDescriptor tdd = vertex.createDeploymentDescriptor(new ExecutionAttemptID(), slot, null, 1)___			Collection<ResultPartitionDeploymentDescriptor> producedPartitions = tdd.getProducedPartitions()___			assertEquals(1, producedPartitions.size())__			ResultPartitionDeploymentDescriptor desc = producedPartitions.iterator().next()__			assertEquals(mode.allowLazyDeployment(), desc.sendScheduleOrUpdateConsumersMessage())__		}_	};tests,that,the,lazy,scheduling,flag,is,correctly,forwarded,to,the,produced,partition,descriptors;test,public,void,test,tdd,produced,partitions,lazy,scheduling,throws,exception,testing,utils,queued,action,execution,context,context,testing,utils,queued,action,execution,context,execution,job,vertex,job,vertex,get,execution,vertex,new,job,vertex,id,context,intermediate,result,result,new,intermediate,result,new,intermediate,data,set,id,job,vertex,4,result,partition,type,pipelined,execution,vertex,vertex,new,execution,vertex,job,vertex,0,new,intermediate,result,result,time,minutes,1,slot,root,mock,slot,class,when,root,get,slot,number,then,return,1,simple,slot,slot,mock,simple,slot,class,when,slot,get,root,then,return,root,for,schedule,mode,mode,schedule,mode,values,vertex,get,execution,graph,set,schedule,mode,mode,task,deployment,descriptor,tdd,vertex,create,deployment,descriptor,new,execution,attempt,id,slot,null,1,collection,result,partition,deployment,descriptor,produced,partitions,tdd,get,produced,partitions,assert,equals,1,produced,partitions,size,result,partition,deployment,descriptor,desc,produced,partitions,iterator,next,assert,equals,mode,allow,lazy,deployment,desc,send,schedule,or,update,consumers,message
ExecutionVertexDeploymentTest -> @Test 	public void testTddProducedPartitionsLazyScheduling() throws Exception;1482522865;Tests that the lazy scheduling flag is correctly forwarded to the produced partition descriptors.;@Test_	public void testTddProducedPartitionsLazyScheduling() throws Exception {_		TestingUtils.QueuedActionExecutionContext context = TestingUtils.queuedActionExecutionContext()__		ExecutionJobVertex jobVertex = getExecutionVertex(new JobVertexID(), context)__		IntermediateResult result = new IntermediateResult(new IntermediateDataSetID(), jobVertex, 4, ResultPartitionType.PIPELINED)__		ExecutionVertex vertex = new ExecutionVertex(jobVertex, 0, new IntermediateResult[]{result}, Time.minutes(1))___		AllocatedSlot allocatedSlot = mock(AllocatedSlot.class)__		when(allocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___		Slot root = mock(Slot.class)__		when(root.getSlotNumber()).thenReturn(1)__		SimpleSlot slot = mock(SimpleSlot.class)__		when(slot.getRoot()).thenReturn(root)__		when(slot.getAllocatedSlot()).thenReturn(allocatedSlot)__		when(root.getAllocatedSlot()).thenReturn(allocatedSlot)___		for (ScheduleMode mode : ScheduleMode.values()) {_			vertex.getExecutionGraph().setScheduleMode(mode)___			TaskDeploymentDescriptor tdd = vertex.createDeploymentDescriptor(new ExecutionAttemptID(), slot, null, 1)___			Collection<ResultPartitionDeploymentDescriptor> producedPartitions = tdd.getProducedPartitions()___			assertEquals(1, producedPartitions.size())__			ResultPartitionDeploymentDescriptor desc = producedPartitions.iterator().next()__			assertEquals(mode.allowLazyDeployment(), desc.sendScheduleOrUpdateConsumersMessage())__		}_	};tests,that,the,lazy,scheduling,flag,is,correctly,forwarded,to,the,produced,partition,descriptors;test,public,void,test,tdd,produced,partitions,lazy,scheduling,throws,exception,testing,utils,queued,action,execution,context,context,testing,utils,queued,action,execution,context,execution,job,vertex,job,vertex,get,execution,vertex,new,job,vertex,id,context,intermediate,result,result,new,intermediate,result,new,intermediate,data,set,id,job,vertex,4,result,partition,type,pipelined,execution,vertex,vertex,new,execution,vertex,job,vertex,0,new,intermediate,result,result,time,minutes,1,allocated,slot,allocated,slot,mock,allocated,slot,class,when,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,slot,root,mock,slot,class,when,root,get,slot,number,then,return,1,simple,slot,slot,mock,simple,slot,class,when,slot,get,root,then,return,root,when,slot,get,allocated,slot,then,return,allocated,slot,when,root,get,allocated,slot,then,return,allocated,slot,for,schedule,mode,mode,schedule,mode,values,vertex,get,execution,graph,set,schedule,mode,mode,task,deployment,descriptor,tdd,vertex,create,deployment,descriptor,new,execution,attempt,id,slot,null,1,collection,result,partition,deployment,descriptor,produced,partitions,tdd,get,produced,partitions,assert,equals,1,produced,partitions,size,result,partition,deployment,descriptor,desc,produced,partitions,iterator,next,assert,equals,mode,allow,lazy,deployment,desc,send,schedule,or,update,consumers,message
ExecutionVertexDeploymentTest -> @Test 	public void testTddProducedPartitionsLazyScheduling() throws Exception;1485269495;Tests that the lazy scheduling flag is correctly forwarded to the produced partition descriptors.;@Test_	public void testTddProducedPartitionsLazyScheduling() throws Exception {_		TestingUtils.QueuedActionExecutionContext context = TestingUtils.queuedActionExecutionContext()__		ExecutionJobVertex jobVertex = getExecutionVertex(new JobVertexID(), context)___		IntermediateResult result =_				new IntermediateResult(new IntermediateDataSetID(), jobVertex, 1, ResultPartitionType.PIPELINED)___		ExecutionVertex vertex =_				new ExecutionVertex(jobVertex, 0, new IntermediateResult[]{result}, Time.minutes(1))___		ExecutionEdge mockEdge = createMockExecutionEdge(1)___		result.getPartitions()[0].addConsumerGroup()__		result.getPartitions()[0].addConsumer(mockEdge, 0)___		AllocatedSlot allocatedSlot = mock(AllocatedSlot.class)__		when(allocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___		Slot root = mock(Slot.class)__		when(root.getSlotNumber()).thenReturn(1)__		SimpleSlot slot = mock(SimpleSlot.class)__		when(slot.getRoot()).thenReturn(root)__		when(slot.getAllocatedSlot()).thenReturn(allocatedSlot)__		when(root.getAllocatedSlot()).thenReturn(allocatedSlot)___		for (ScheduleMode mode : ScheduleMode.values()) {_			vertex.getExecutionGraph().setScheduleMode(mode)___			TaskDeploymentDescriptor tdd = vertex.createDeploymentDescriptor(new ExecutionAttemptID(), slot, null, 1)___			Collection<ResultPartitionDeploymentDescriptor> producedPartitions = tdd.getProducedPartitions()___			assertEquals(1, producedPartitions.size())__			ResultPartitionDeploymentDescriptor desc = producedPartitions.iterator().next()__			assertEquals(mode.allowLazyDeployment(), desc.sendScheduleOrUpdateConsumersMessage())__		}_	};tests,that,the,lazy,scheduling,flag,is,correctly,forwarded,to,the,produced,partition,descriptors;test,public,void,test,tdd,produced,partitions,lazy,scheduling,throws,exception,testing,utils,queued,action,execution,context,context,testing,utils,queued,action,execution,context,execution,job,vertex,job,vertex,get,execution,vertex,new,job,vertex,id,context,intermediate,result,result,new,intermediate,result,new,intermediate,data,set,id,job,vertex,1,result,partition,type,pipelined,execution,vertex,vertex,new,execution,vertex,job,vertex,0,new,intermediate,result,result,time,minutes,1,execution,edge,mock,edge,create,mock,execution,edge,1,result,get,partitions,0,add,consumer,group,result,get,partitions,0,add,consumer,mock,edge,0,allocated,slot,allocated,slot,mock,allocated,slot,class,when,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,slot,root,mock,slot,class,when,root,get,slot,number,then,return,1,simple,slot,slot,mock,simple,slot,class,when,slot,get,root,then,return,root,when,slot,get,allocated,slot,then,return,allocated,slot,when,root,get,allocated,slot,then,return,allocated,slot,for,schedule,mode,mode,schedule,mode,values,vertex,get,execution,graph,set,schedule,mode,mode,task,deployment,descriptor,tdd,vertex,create,deployment,descriptor,new,execution,attempt,id,slot,null,1,collection,result,partition,deployment,descriptor,produced,partitions,tdd,get,produced,partitions,assert,equals,1,produced,partitions,size,result,partition,deployment,descriptor,desc,produced,partitions,iterator,next,assert,equals,mode,allow,lazy,deployment,desc,send,schedule,or,update,consumers,message
ExecutionVertexDeploymentTest -> @Test 	public void testTddProducedPartitionsLazyScheduling() throws Exception;1486647395;Tests that the lazy scheduling flag is correctly forwarded to the produced partition descriptors.;@Test_	public void testTddProducedPartitionsLazyScheduling() throws Exception {_		TestingUtils.QueuedActionExecutionContext context = TestingUtils.queuedActionExecutionContext()__		ExecutionJobVertex jobVertex = getExecutionVertex(new JobVertexID(), context)___		IntermediateResult result =_				new IntermediateResult(new IntermediateDataSetID(), jobVertex, 1, ResultPartitionType.PIPELINED)___		ExecutionVertex vertex =_				new ExecutionVertex(jobVertex, 0, new IntermediateResult[]{result}, Time.minutes(1))___		ExecutionEdge mockEdge = createMockExecutionEdge(1)___		result.getPartitions()[0].addConsumerGroup()__		result.getPartitions()[0].addConsumer(mockEdge, 0)___		AllocatedSlot allocatedSlot = mock(AllocatedSlot.class)__		when(allocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___		Slot root = mock(Slot.class)__		when(root.getSlotNumber()).thenReturn(1)__		SimpleSlot slot = mock(SimpleSlot.class)__		when(slot.getRoot()).thenReturn(root)__		when(slot.getAllocatedSlot()).thenReturn(allocatedSlot)__		when(root.getAllocatedSlot()).thenReturn(allocatedSlot)___		for (ScheduleMode mode : ScheduleMode.values()) {_			vertex.getExecutionGraph().setScheduleMode(mode)___			TaskDeploymentDescriptor tdd = vertex.createDeploymentDescriptor(new ExecutionAttemptID(), slot, null, 1)___			Collection<ResultPartitionDeploymentDescriptor> producedPartitions = tdd.getProducedPartitions()___			assertEquals(1, producedPartitions.size())__			ResultPartitionDeploymentDescriptor desc = producedPartitions.iterator().next()__			assertEquals(mode.allowLazyDeployment(), desc.sendScheduleOrUpdateConsumersMessage())__		}_	};tests,that,the,lazy,scheduling,flag,is,correctly,forwarded,to,the,produced,partition,descriptors;test,public,void,test,tdd,produced,partitions,lazy,scheduling,throws,exception,testing,utils,queued,action,execution,context,context,testing,utils,queued,action,execution,context,execution,job,vertex,job,vertex,get,execution,vertex,new,job,vertex,id,context,intermediate,result,result,new,intermediate,result,new,intermediate,data,set,id,job,vertex,1,result,partition,type,pipelined,execution,vertex,vertex,new,execution,vertex,job,vertex,0,new,intermediate,result,result,time,minutes,1,execution,edge,mock,edge,create,mock,execution,edge,1,result,get,partitions,0,add,consumer,group,result,get,partitions,0,add,consumer,mock,edge,0,allocated,slot,allocated,slot,mock,allocated,slot,class,when,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,slot,root,mock,slot,class,when,root,get,slot,number,then,return,1,simple,slot,slot,mock,simple,slot,class,when,slot,get,root,then,return,root,when,slot,get,allocated,slot,then,return,allocated,slot,when,root,get,allocated,slot,then,return,allocated,slot,for,schedule,mode,mode,schedule,mode,values,vertex,get,execution,graph,set,schedule,mode,mode,task,deployment,descriptor,tdd,vertex,create,deployment,descriptor,new,execution,attempt,id,slot,null,1,collection,result,partition,deployment,descriptor,produced,partitions,tdd,get,produced,partitions,assert,equals,1,produced,partitions,size,result,partition,deployment,descriptor,desc,produced,partitions,iterator,next,assert,equals,mode,allow,lazy,deployment,desc,send,schedule,or,update,consumers,message
ExecutionVertexDeploymentTest -> @Test 	public void testTddProducedPartitionsLazyScheduling() throws Exception;1509638685;Tests that the lazy scheduling flag is correctly forwarded to the produced partition descriptors.;@Test_	public void testTddProducedPartitionsLazyScheduling() throws Exception {_		TestingUtils.QueuedActionExecutionContext context = TestingUtils.queuedActionExecutionContext()__		ExecutionJobVertex jobVertex = getExecutionVertex(new JobVertexID(), context)___		IntermediateResult result =_				new IntermediateResult(new IntermediateDataSetID(), jobVertex, 1, ResultPartitionType.PIPELINED)___		ExecutionVertex vertex =_				new ExecutionVertex(jobVertex, 0, new IntermediateResult[]{result}, Time.minutes(1))___		ExecutionEdge mockEdge = createMockExecutionEdge(1)___		result.getPartitions()[0].addConsumerGroup()__		result.getPartitions()[0].addConsumer(mockEdge, 0)___		AllocatedSlot allocatedSlot = mock(AllocatedSlot.class)__		when(allocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___		Slot root = mock(Slot.class)__		when(root.getSlotNumber()).thenReturn(1)__		SimpleSlot slot = mock(SimpleSlot.class)__		when(slot.getRoot()).thenReturn(root)__		when(slot.getAllocatedSlot()).thenReturn(allocatedSlot)__		when(root.getAllocatedSlot()).thenReturn(allocatedSlot)___		for (ScheduleMode mode : ScheduleMode.values()) {_			vertex.getExecutionGraph().setScheduleMode(mode)___			TaskDeploymentDescriptor tdd = vertex.createDeploymentDescriptor(new ExecutionAttemptID(), slot, null, 1)___			Collection<ResultPartitionDeploymentDescriptor> producedPartitions = tdd.getProducedPartitions()___			assertEquals(1, producedPartitions.size())__			ResultPartitionDeploymentDescriptor desc = producedPartitions.iterator().next()__			assertEquals(mode.allowLazyDeployment(), desc.sendScheduleOrUpdateConsumersMessage())__		}_	};tests,that,the,lazy,scheduling,flag,is,correctly,forwarded,to,the,produced,partition,descriptors;test,public,void,test,tdd,produced,partitions,lazy,scheduling,throws,exception,testing,utils,queued,action,execution,context,context,testing,utils,queued,action,execution,context,execution,job,vertex,job,vertex,get,execution,vertex,new,job,vertex,id,context,intermediate,result,result,new,intermediate,result,new,intermediate,data,set,id,job,vertex,1,result,partition,type,pipelined,execution,vertex,vertex,new,execution,vertex,job,vertex,0,new,intermediate,result,result,time,minutes,1,execution,edge,mock,edge,create,mock,execution,edge,1,result,get,partitions,0,add,consumer,group,result,get,partitions,0,add,consumer,mock,edge,0,allocated,slot,allocated,slot,mock,allocated,slot,class,when,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,slot,root,mock,slot,class,when,root,get,slot,number,then,return,1,simple,slot,slot,mock,simple,slot,class,when,slot,get,root,then,return,root,when,slot,get,allocated,slot,then,return,allocated,slot,when,root,get,allocated,slot,then,return,allocated,slot,for,schedule,mode,mode,schedule,mode,values,vertex,get,execution,graph,set,schedule,mode,mode,task,deployment,descriptor,tdd,vertex,create,deployment,descriptor,new,execution,attempt,id,slot,null,1,collection,result,partition,deployment,descriptor,produced,partitions,tdd,get,produced,partitions,assert,equals,1,produced,partitions,size,result,partition,deployment,descriptor,desc,produced,partitions,iterator,next,assert,equals,mode,allow,lazy,deployment,desc,send,schedule,or,update,consumers,message
ExecutionVertexDeploymentTest -> @Test 	public void testTddProducedPartitionsLazyScheduling() throws Exception;1513201052;Tests that the lazy scheduling flag is correctly forwarded to the produced partition descriptors.;@Test_	public void testTddProducedPartitionsLazyScheduling() throws Exception {_		TestingUtils.QueuedActionExecutionContext context = TestingUtils.queuedActionExecutionContext()__		ExecutionJobVertex jobVertex = getExecutionVertex(new JobVertexID(), context)___		IntermediateResult result =_				new IntermediateResult(new IntermediateDataSetID(), jobVertex, 1, ResultPartitionType.PIPELINED)___		ExecutionVertex vertex =_				new ExecutionVertex(jobVertex, 0, new IntermediateResult[]{result}, Time.minutes(1))___		ExecutionEdge mockEdge = createMockExecutionEdge(1)___		result.getPartitions()[0].addConsumerGroup()__		result.getPartitions()[0].addConsumer(mockEdge, 0)___		AllocatedSlot allocatedSlot = mock(AllocatedSlot.class)__		when(allocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___		LogicalSlot slot = mock(LogicalSlot.class)__		when(slot.getAllocationId()).thenReturn(new AllocationID())___		for (ScheduleMode mode : ScheduleMode.values()) {_			vertex.getExecutionGraph().setScheduleMode(mode)___			TaskDeploymentDescriptor tdd = vertex.createDeploymentDescriptor(new ExecutionAttemptID(), slot, null, 1)___			Collection<ResultPartitionDeploymentDescriptor> producedPartitions = tdd.getProducedPartitions()___			assertEquals(1, producedPartitions.size())__			ResultPartitionDeploymentDescriptor desc = producedPartitions.iterator().next()__			assertEquals(mode.allowLazyDeployment(), desc.sendScheduleOrUpdateConsumersMessage())__		}_	};tests,that,the,lazy,scheduling,flag,is,correctly,forwarded,to,the,produced,partition,descriptors;test,public,void,test,tdd,produced,partitions,lazy,scheduling,throws,exception,testing,utils,queued,action,execution,context,context,testing,utils,queued,action,execution,context,execution,job,vertex,job,vertex,get,execution,vertex,new,job,vertex,id,context,intermediate,result,result,new,intermediate,result,new,intermediate,data,set,id,job,vertex,1,result,partition,type,pipelined,execution,vertex,vertex,new,execution,vertex,job,vertex,0,new,intermediate,result,result,time,minutes,1,execution,edge,mock,edge,create,mock,execution,edge,1,result,get,partitions,0,add,consumer,group,result,get,partitions,0,add,consumer,mock,edge,0,allocated,slot,allocated,slot,mock,allocated,slot,class,when,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,logical,slot,slot,mock,logical,slot,class,when,slot,get,allocation,id,then,return,new,allocation,id,for,schedule,mode,mode,schedule,mode,values,vertex,get,execution,graph,set,schedule,mode,mode,task,deployment,descriptor,tdd,vertex,create,deployment,descriptor,new,execution,attempt,id,slot,null,1,collection,result,partition,deployment,descriptor,produced,partitions,tdd,get,produced,partitions,assert,equals,1,produced,partitions,size,result,partition,deployment,descriptor,desc,produced,partitions,iterator,next,assert,equals,mode,allow,lazy,deployment,desc,send,schedule,or,update,consumers,message
ExecutionVertexDeploymentTest -> @Test 	public void testTddProducedPartitionsLazyScheduling() throws Exception;1513258344;Tests that the lazy scheduling flag is correctly forwarded to the produced partition descriptors.;@Test_	public void testTddProducedPartitionsLazyScheduling() throws Exception {_		TestingUtils.QueuedActionExecutionContext context = TestingUtils.queuedActionExecutionContext()__		ExecutionJobVertex jobVertex = getExecutionVertex(new JobVertexID(), context)___		IntermediateResult result =_				new IntermediateResult(new IntermediateDataSetID(), jobVertex, 1, ResultPartitionType.PIPELINED)___		ExecutionVertex vertex =_				new ExecutionVertex(jobVertex, 0, new IntermediateResult[]{result}, Time.minutes(1))___		ExecutionEdge mockEdge = createMockExecutionEdge(1)___		result.getPartitions()[0].addConsumerGroup()__		result.getPartitions()[0].addConsumer(mockEdge, 0)___		AllocatedSlot allocatedSlot = mock(AllocatedSlot.class)__		when(allocatedSlot.getAllocationId()).thenReturn(new AllocationID())___		LogicalSlot slot = mock(LogicalSlot.class)__		when(slot.getAllocationId()).thenReturn(new AllocationID())___		for (ScheduleMode mode : ScheduleMode.values()) {_			vertex.getExecutionGraph().setScheduleMode(mode)___			TaskDeploymentDescriptor tdd = vertex.createDeploymentDescriptor(new ExecutionAttemptID(), slot, null, 1)___			Collection<ResultPartitionDeploymentDescriptor> producedPartitions = tdd.getProducedPartitions()___			assertEquals(1, producedPartitions.size())__			ResultPartitionDeploymentDescriptor desc = producedPartitions.iterator().next()__			assertEquals(mode.allowLazyDeployment(), desc.sendScheduleOrUpdateConsumersMessage())__		}_	};tests,that,the,lazy,scheduling,flag,is,correctly,forwarded,to,the,produced,partition,descriptors;test,public,void,test,tdd,produced,partitions,lazy,scheduling,throws,exception,testing,utils,queued,action,execution,context,context,testing,utils,queued,action,execution,context,execution,job,vertex,job,vertex,get,execution,vertex,new,job,vertex,id,context,intermediate,result,result,new,intermediate,result,new,intermediate,data,set,id,job,vertex,1,result,partition,type,pipelined,execution,vertex,vertex,new,execution,vertex,job,vertex,0,new,intermediate,result,result,time,minutes,1,execution,edge,mock,edge,create,mock,execution,edge,1,result,get,partitions,0,add,consumer,group,result,get,partitions,0,add,consumer,mock,edge,0,allocated,slot,allocated,slot,mock,allocated,slot,class,when,allocated,slot,get,allocation,id,then,return,new,allocation,id,logical,slot,slot,mock,logical,slot,class,when,slot,get,allocation,id,then,return,new,allocation,id,for,schedule,mode,mode,schedule,mode,values,vertex,get,execution,graph,set,schedule,mode,mode,task,deployment,descriptor,tdd,vertex,create,deployment,descriptor,new,execution,attempt,id,slot,null,1,collection,result,partition,deployment,descriptor,produced,partitions,tdd,get,produced,partitions,assert,equals,1,produced,partitions,size,result,partition,deployment,descriptor,desc,produced,partitions,iterator,next,assert,equals,mode,allow,lazy,deployment,desc,send,schedule,or,update,consumers,message
ExecutionVertexDeploymentTest -> @Test 	public void testTddProducedPartitionsLazyScheduling() throws Exception;1513258345;Tests that the lazy scheduling flag is correctly forwarded to the produced partition descriptors.;@Test_	public void testTddProducedPartitionsLazyScheduling() throws Exception {_		TestingUtils.QueuedActionExecutionContext context = TestingUtils.queuedActionExecutionContext()__		ExecutionJobVertex jobVertex = getExecutionVertex(new JobVertexID(), context)___		IntermediateResult result =_				new IntermediateResult(new IntermediateDataSetID(), jobVertex, 1, ResultPartitionType.PIPELINED)___		ExecutionVertex vertex =_				new ExecutionVertex(jobVertex, 0, new IntermediateResult[]{result}, Time.minutes(1))___		ExecutionEdge mockEdge = createMockExecutionEdge(1)___		result.getPartitions()[0].addConsumerGroup()__		result.getPartitions()[0].addConsumer(mockEdge, 0)___		SlotContext slotContext = mock(SlotContext.class)__		when(slotContext.getAllocationId()).thenReturn(new AllocationID())___		LogicalSlot slot = mock(LogicalSlot.class)__		when(slot.getAllocationId()).thenReturn(new AllocationID())___		for (ScheduleMode mode : ScheduleMode.values()) {_			vertex.getExecutionGraph().setScheduleMode(mode)___			TaskDeploymentDescriptor tdd = vertex.createDeploymentDescriptor(new ExecutionAttemptID(), slot, null, 1)___			Collection<ResultPartitionDeploymentDescriptor> producedPartitions = tdd.getProducedPartitions()___			assertEquals(1, producedPartitions.size())__			ResultPartitionDeploymentDescriptor desc = producedPartitions.iterator().next()__			assertEquals(mode.allowLazyDeployment(), desc.sendScheduleOrUpdateConsumersMessage())__		}_	};tests,that,the,lazy,scheduling,flag,is,correctly,forwarded,to,the,produced,partition,descriptors;test,public,void,test,tdd,produced,partitions,lazy,scheduling,throws,exception,testing,utils,queued,action,execution,context,context,testing,utils,queued,action,execution,context,execution,job,vertex,job,vertex,get,execution,vertex,new,job,vertex,id,context,intermediate,result,result,new,intermediate,result,new,intermediate,data,set,id,job,vertex,1,result,partition,type,pipelined,execution,vertex,vertex,new,execution,vertex,job,vertex,0,new,intermediate,result,result,time,minutes,1,execution,edge,mock,edge,create,mock,execution,edge,1,result,get,partitions,0,add,consumer,group,result,get,partitions,0,add,consumer,mock,edge,0,slot,context,slot,context,mock,slot,context,class,when,slot,context,get,allocation,id,then,return,new,allocation,id,logical,slot,slot,mock,logical,slot,class,when,slot,get,allocation,id,then,return,new,allocation,id,for,schedule,mode,mode,schedule,mode,values,vertex,get,execution,graph,set,schedule,mode,mode,task,deployment,descriptor,tdd,vertex,create,deployment,descriptor,new,execution,attempt,id,slot,null,1,collection,result,partition,deployment,descriptor,produced,partitions,tdd,get,produced,partitions,assert,equals,1,produced,partitions,size,result,partition,deployment,descriptor,desc,produced,partitions,iterator,next,assert,equals,mode,allow,lazy,deployment,desc,send,schedule,or,update,consumers,message
ExecutionVertexDeploymentTest -> @Test 	public void testTddProducedPartitionsLazyScheduling() throws Exception;1513261599;Tests that the lazy scheduling flag is correctly forwarded to the produced partition descriptors.;@Test_	public void testTddProducedPartitionsLazyScheduling() throws Exception {_		TestingUtils.QueuedActionExecutionContext context = TestingUtils.queuedActionExecutionContext()__		ExecutionJobVertex jobVertex = getExecutionVertex(new JobVertexID(), context)___		IntermediateResult result =_				new IntermediateResult(new IntermediateDataSetID(), jobVertex, 1, ResultPartitionType.PIPELINED)___		ExecutionVertex vertex =_				new ExecutionVertex(jobVertex, 0, new IntermediateResult[]{result}, Time.minutes(1))___		ExecutionEdge mockEdge = createMockExecutionEdge(1)___		result.getPartitions()[0].addConsumerGroup()__		result.getPartitions()[0].addConsumer(mockEdge, 0)___		SlotContext slotContext = mock(SlotContext.class)__		when(slotContext.getAllocationId()).thenReturn(new AllocationID())___		LogicalSlot slot = mock(LogicalSlot.class)__		when(slot.getAllocationId()).thenReturn(new AllocationID())___		for (ScheduleMode mode : ScheduleMode.values()) {_			vertex.getExecutionGraph().setScheduleMode(mode)___			TaskDeploymentDescriptor tdd = vertex.createDeploymentDescriptor(new ExecutionAttemptID(), slot, null, 1)___			Collection<ResultPartitionDeploymentDescriptor> producedPartitions = tdd.getProducedPartitions()___			assertEquals(1, producedPartitions.size())__			ResultPartitionDeploymentDescriptor desc = producedPartitions.iterator().next()__			assertEquals(mode.allowLazyDeployment(), desc.sendScheduleOrUpdateConsumersMessage())__		}_	};tests,that,the,lazy,scheduling,flag,is,correctly,forwarded,to,the,produced,partition,descriptors;test,public,void,test,tdd,produced,partitions,lazy,scheduling,throws,exception,testing,utils,queued,action,execution,context,context,testing,utils,queued,action,execution,context,execution,job,vertex,job,vertex,get,execution,vertex,new,job,vertex,id,context,intermediate,result,result,new,intermediate,result,new,intermediate,data,set,id,job,vertex,1,result,partition,type,pipelined,execution,vertex,vertex,new,execution,vertex,job,vertex,0,new,intermediate,result,result,time,minutes,1,execution,edge,mock,edge,create,mock,execution,edge,1,result,get,partitions,0,add,consumer,group,result,get,partitions,0,add,consumer,mock,edge,0,slot,context,slot,context,mock,slot,context,class,when,slot,context,get,allocation,id,then,return,new,allocation,id,logical,slot,slot,mock,logical,slot,class,when,slot,get,allocation,id,then,return,new,allocation,id,for,schedule,mode,mode,schedule,mode,values,vertex,get,execution,graph,set,schedule,mode,mode,task,deployment,descriptor,tdd,vertex,create,deployment,descriptor,new,execution,attempt,id,slot,null,1,collection,result,partition,deployment,descriptor,produced,partitions,tdd,get,produced,partitions,assert,equals,1,produced,partitions,size,result,partition,deployment,descriptor,desc,produced,partitions,iterator,next,assert,equals,mode,allow,lazy,deployment,desc,send,schedule,or,update,consumers,message
ExecutionVertexDeploymentTest -> @Test 	public void testTddProducedPartitionsLazyScheduling() throws Exception;1549365080;Tests that the lazy scheduling flag is correctly forwarded to the produced partition descriptors.;@Test_	public void testTddProducedPartitionsLazyScheduling() throws Exception {_		ExecutionJobVertex jobVertex = getExecutionVertex(new JobVertexID(), new DirectScheduledExecutorService())___		IntermediateResult result =_				new IntermediateResult(new IntermediateDataSetID(), jobVertex, 1, ResultPartitionType.PIPELINED)___		ExecutionVertex vertex =_				new ExecutionVertex(jobVertex, 0, new IntermediateResult[]{result}, Time.minutes(1))___		ExecutionEdge mockEdge = createMockExecutionEdge(1)___		result.getPartitions()[0].addConsumerGroup()__		result.getPartitions()[0].addConsumer(mockEdge, 0)___		SlotContext slotContext = mock(SlotContext.class)__		when(slotContext.getAllocationId()).thenReturn(new AllocationID())___		LogicalSlot slot = mock(LogicalSlot.class)__		when(slot.getAllocationId()).thenReturn(new AllocationID())___		for (ScheduleMode mode : ScheduleMode.values()) {_			vertex.getExecutionGraph().setScheduleMode(mode)___			TaskDeploymentDescriptor tdd = vertex.createDeploymentDescriptor(new ExecutionAttemptID(), slot, null, 1)___			Collection<ResultPartitionDeploymentDescriptor> producedPartitions = tdd.getProducedPartitions()___			assertEquals(1, producedPartitions.size())__			ResultPartitionDeploymentDescriptor desc = producedPartitions.iterator().next()__			assertEquals(mode.allowLazyDeployment(), desc.sendScheduleOrUpdateConsumersMessage())__		}_	};tests,that,the,lazy,scheduling,flag,is,correctly,forwarded,to,the,produced,partition,descriptors;test,public,void,test,tdd,produced,partitions,lazy,scheduling,throws,exception,execution,job,vertex,job,vertex,get,execution,vertex,new,job,vertex,id,new,direct,scheduled,executor,service,intermediate,result,result,new,intermediate,result,new,intermediate,data,set,id,job,vertex,1,result,partition,type,pipelined,execution,vertex,vertex,new,execution,vertex,job,vertex,0,new,intermediate,result,result,time,minutes,1,execution,edge,mock,edge,create,mock,execution,edge,1,result,get,partitions,0,add,consumer,group,result,get,partitions,0,add,consumer,mock,edge,0,slot,context,slot,context,mock,slot,context,class,when,slot,context,get,allocation,id,then,return,new,allocation,id,logical,slot,slot,mock,logical,slot,class,when,slot,get,allocation,id,then,return,new,allocation,id,for,schedule,mode,mode,schedule,mode,values,vertex,get,execution,graph,set,schedule,mode,mode,task,deployment,descriptor,tdd,vertex,create,deployment,descriptor,new,execution,attempt,id,slot,null,1,collection,result,partition,deployment,descriptor,produced,partitions,tdd,get,produced,partitions,assert,equals,1,produced,partitions,size,result,partition,deployment,descriptor,desc,produced,partitions,iterator,next,assert,equals,mode,allow,lazy,deployment,desc,send,schedule,or,update,consumers,message
ExecutionVertexDeploymentTest -> @Test 	public void testTddProducedPartitionsLazyScheduling() throws Exception;1550835012;Tests that the lazy scheduling flag is correctly forwarded to the produced partition descriptors.;@Test_	public void testTddProducedPartitionsLazyScheduling() throws Exception {_		ExecutionJobVertex jobVertex = getExecutionVertex(new JobVertexID(), new DirectScheduledExecutorService())___		IntermediateResult result =_				new IntermediateResult(new IntermediateDataSetID(), jobVertex, 1, ResultPartitionType.PIPELINED)___		ExecutionVertex vertex =_				new ExecutionVertex(jobVertex, 0, new IntermediateResult[]{result}, Time.minutes(1))___		ExecutionEdge mockEdge = createMockExecutionEdge(1)___		result.getPartitions()[0].addConsumerGroup()__		result.getPartitions()[0].addConsumer(mockEdge, 0)___		SlotContext slotContext = mock(SlotContext.class)__		when(slotContext.getAllocationId()).thenReturn(new AllocationID())___		LogicalSlot slot = mock(LogicalSlot.class)__		when(slot.getAllocationId()).thenReturn(new AllocationID())___		for (ScheduleMode mode : ScheduleMode.values()) {_			vertex.getExecutionGraph().setScheduleMode(mode)___			TaskDeploymentDescriptor tdd = vertex.createDeploymentDescriptor(new ExecutionAttemptID(), slot, null, 1)___			Collection<ResultPartitionDeploymentDescriptor> producedPartitions = tdd.getProducedPartitions()___			assertEquals(1, producedPartitions.size())__			ResultPartitionDeploymentDescriptor desc = producedPartitions.iterator().next()__			assertEquals(mode.allowLazyDeployment(), desc.sendScheduleOrUpdateConsumersMessage())__		}_	};tests,that,the,lazy,scheduling,flag,is,correctly,forwarded,to,the,produced,partition,descriptors;test,public,void,test,tdd,produced,partitions,lazy,scheduling,throws,exception,execution,job,vertex,job,vertex,get,execution,vertex,new,job,vertex,id,new,direct,scheduled,executor,service,intermediate,result,result,new,intermediate,result,new,intermediate,data,set,id,job,vertex,1,result,partition,type,pipelined,execution,vertex,vertex,new,execution,vertex,job,vertex,0,new,intermediate,result,result,time,minutes,1,execution,edge,mock,edge,create,mock,execution,edge,1,result,get,partitions,0,add,consumer,group,result,get,partitions,0,add,consumer,mock,edge,0,slot,context,slot,context,mock,slot,context,class,when,slot,context,get,allocation,id,then,return,new,allocation,id,logical,slot,slot,mock,logical,slot,class,when,slot,get,allocation,id,then,return,new,allocation,id,for,schedule,mode,mode,schedule,mode,values,vertex,get,execution,graph,set,schedule,mode,mode,task,deployment,descriptor,tdd,vertex,create,deployment,descriptor,new,execution,attempt,id,slot,null,1,collection,result,partition,deployment,descriptor,produced,partitions,tdd,get,produced,partitions,assert,equals,1,produced,partitions,size,result,partition,deployment,descriptor,desc,produced,partitions,iterator,next,assert,equals,mode,allow,lazy,deployment,desc,send,schedule,or,update,consumers,message
