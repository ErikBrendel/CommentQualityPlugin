# id;timestamp;commentText;codeText;commentWords;codeWords
FailoverRegionTest -> @Test 	public void testFailWhileRestarting() throws Exception;1494099604;Tests that a new failure comes while the failover region is restarting_@throws Exception;@Test_	public void testFailWhileRestarting() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,restarting,throws,exception;test,public,void,test,fail,while,restarting,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileRestarting() throws Exception;1507212387;Tests that a new failure comes while the failover region is restarting_@throws Exception;@Test_	public void testFailWhileRestarting() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,restarting,throws,exception;test,public,void,test,fail,while,restarting,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileRestarting() throws Exception;1508861310;Tests that a new failure comes while the failover region is restarting_@throws Exception;@Test_	public void testFailWhileRestarting() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,restarting,throws,exception;test,public,void,test,fail,while,restarting,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileRestarting() throws Exception;1508861311;Tests that a new failure comes while the failover region is restarting_@throws Exception;@Test_	public void testFailWhileRestarting() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,restarting,throws,exception;test,public,void,test,fail,while,restarting,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileRestarting() throws Exception;1508861311;Tests that a new failure comes while the failover region is restarting_@throws Exception;@Test_	public void testFailWhileRestarting() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,restarting,throws,exception;test,public,void,test,fail,while,restarting,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileRestarting() throws Exception;1509638685;Tests that a new failure comes while the failover region is restarting_@throws Exception;@Test_	public void testFailWhileRestarting() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,restarting,throws,exception;test,public,void,test,fail,while,restarting,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileRestarting() throws Exception;1509638685;Tests that a new failure comes while the failover region is restarting_@throws Exception;@Test_	public void testFailWhileRestarting() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,restarting,throws,exception;test,public,void,test,fail,while,restarting,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileRestarting() throws Exception;1513261599;Tests that a new failure comes while the failover region is restarting_@throws Exception;@Test_	public void testFailWhileRestarting() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,restarting,throws,exception;test,public,void,test,fail,while,restarting,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileRestarting() throws Exception;1540920690;Tests that a new failure comes while the failover region is restarting_@throws Exception;@Test_	public void testFailWhileRestarting() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,restarting,throws,exception;test,public,void,test,fail,while,restarting,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileRestarting() throws Exception;1549365080;Tests that a new failure comes while the failover region is restarting_@throws Exception;@Test_	public void testFailWhileRestarting() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().failAsync(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().failAsync(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,restarting,throws,exception;test,public,void,test,fail,while,restarting,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,async,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,async,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileRestarting() throws Exception;1550220073;Tests that a new failure comes while the failover region is restarting_@throws Exception;@Test_	public void testFailWhileRestarting() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,restarting,throws,exception;test,public,void,test,fail,while,restarting,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileRestarting() throws Exception;1550683188;Tests that a new failure comes while the failover region is restarting_@throws Exception;@Test_	public void testFailWhileRestarting() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().completeCancelling()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,restarting,throws,exception;test,public,void,test,fail,while,restarting,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,complete,cancelling,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileRestarting() throws Exception;1550824704;Tests that a new failure comes while the failover region is restarting_@throws Exception;@Test_	public void testFailWhileRestarting() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().completeCancelling()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,restarting,throws,exception;test,public,void,test,fail,while,restarting,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,complete,cancelling,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionsFailover() throws Exception;1494099604;Tests that a job has server failover regions and one region failover does not influence others__<pre>_(a1) ---> (b1) -+-> (c1) ---+-> (d1)_X          /_(a2) ---> (b2) -+-> (c2) -+__^         ^         ^_|         |         |_(pipelined) (blocking) (pipelined)__</pre>;@Test_	public void testMultiRegionsFailover() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SlotProvider slotProvider = new SimpleSlotProvider(jobId, 20)__				_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		v3.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				jobId,_				jobName,_				new Configuration(),_				new SerializedValue<>(new ExecutionConfig()),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new FailoverPipelinedRegionWithDirectExecutor(),_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				slotProvider,_				ExecutionGraph.class.getClassLoader())___		eg.attachJobGraph(ordered)___		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		_		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]___		_		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev22 = eg.getJobVertex(v2.getID()).getTaskVertices()[1]___		_		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		ExecutionVertex ev4 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())___		ev21.scheduleForExecution(slotProvider, true)__		ev21.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().markFinished()__		ev21.getCurrentExecutionAttempt().markFinished()__		ev22.scheduleForExecution(slotProvider, true)__		ev22.getCurrentExecutionAttempt().markFinished()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		waitUntilExecutionState(ev31.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)__		waitUntilExecutionState(ev32.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)___		ev31.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())__	};tests,that,a,job,has,server,failover,regions,and,one,region,failover,does,not,influence,others,pre,a1,b1,c1,d1,x,a2,b2,c2,pipelined,blocking,pipelined,pre;test,public,void,test,multi,regions,failover,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,slot,provider,slot,provider,new,simple,slot,provider,job,id,20,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v3,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,collections,blob,key,empty,list,collections,url,empty,list,slot,provider,execution,graph,class,get,class,loader,eg,attach,job,graph,ordered,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev22,eg,get,job,vertex,v2,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,execution,vertex,ev4,eg,get,job,vertex,v3,get,id,get,task,vertices,0,eg,schedule,for,execution,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,ev21,schedule,for,execution,slot,provider,true,ev21,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,mark,finished,ev21,get,current,execution,attempt,mark,finished,ev22,schedule,for,execution,slot,provider,true,ev22,get,current,execution,attempt,mark,finished,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,wait,until,execution,state,ev31,get,current,execution,attempt,execution,state,deploying,2000,wait,until,execution,state,ev32,get,current,execution,attempt,execution,state,deploying,2000,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionsFailover() throws Exception;1507212387;Tests that a job has server failover regions and one region failover does not influence others__<pre>_(a1) ---> (b1) -+-> (c1) ---+-> (d1)_X          /_(a2) ---> (b2) -+-> (c2) -+__^         ^         ^_|         |         |_(pipelined) (blocking) (pipelined)__</pre>;@Test_	public void testMultiRegionsFailover() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SlotProvider slotProvider = new SimpleSlotProvider(jobId, 20)__				_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		v3.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				jobId,_				jobName,_				new Configuration(),_				new SerializedValue<>(new ExecutionConfig()),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new FailoverPipelinedRegionWithDirectExecutor(),_				Collections.emptyList(),_				Collections.emptyList(),_				slotProvider,_				ExecutionGraph.class.getClassLoader())___		eg.attachJobGraph(ordered)___		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		_		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]___		_		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev22 = eg.getJobVertex(v2.getID()).getTaskVertices()[1]___		_		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		ExecutionVertex ev4 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())___		ev21.scheduleForExecution(slotProvider, true)__		ev21.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().markFinished()__		ev21.getCurrentExecutionAttempt().markFinished()__		ev22.scheduleForExecution(slotProvider, true)__		ev22.getCurrentExecutionAttempt().markFinished()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		waitUntilExecutionState(ev31.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)__		waitUntilExecutionState(ev32.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)___		ev31.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())__	};tests,that,a,job,has,server,failover,regions,and,one,region,failover,does,not,influence,others,pre,a1,b1,c1,d1,x,a2,b2,c2,pipelined,blocking,pipelined,pre;test,public,void,test,multi,regions,failover,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,slot,provider,slot,provider,new,simple,slot,provider,job,id,20,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v3,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,collections,empty,list,collections,empty,list,slot,provider,execution,graph,class,get,class,loader,eg,attach,job,graph,ordered,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev22,eg,get,job,vertex,v2,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,execution,vertex,ev4,eg,get,job,vertex,v3,get,id,get,task,vertices,0,eg,schedule,for,execution,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,ev21,schedule,for,execution,slot,provider,true,ev21,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,mark,finished,ev21,get,current,execution,attempt,mark,finished,ev22,schedule,for,execution,slot,provider,true,ev22,get,current,execution,attempt,mark,finished,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,wait,until,execution,state,ev31,get,current,execution,attempt,execution,state,deploying,2000,wait,until,execution,state,ev32,get,current,execution,attempt,execution,state,deploying,2000,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionsFailover() throws Exception;1508861310;Tests that a job has server failover regions and one region failover does not influence others__<pre>_(a1) ---> (b1) -+-> (c1) ---+-> (d1)_X          /_(a2) ---> (b2) -+-> (c2) -+__^         ^         ^_|         |         |_(pipelined) (blocking) (pipelined)__</pre>;@Test_	public void testMultiRegionsFailover() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SlotProvider slotProvider = new SimpleSlotProvider(jobId, 20)__				_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		v3.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				jobId,_				jobName,_				new Configuration(),_				new SerializedValue<>(new ExecutionConfig()),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new FailoverPipelinedRegionWithDirectExecutor(),_				Collections.emptyList(),_				Collections.emptyList(),_				slotProvider,_				ExecutionGraph.class.getClassLoader(),_				null)___		eg.attachJobGraph(ordered)___		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		_		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]___		_		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev22 = eg.getJobVertex(v2.getID()).getTaskVertices()[1]___		_		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		ExecutionVertex ev4 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())___		ev21.scheduleForExecution(slotProvider, true)__		ev21.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().markFinished()__		ev21.getCurrentExecutionAttempt().markFinished()__		ev22.scheduleForExecution(slotProvider, true)__		ev22.getCurrentExecutionAttempt().markFinished()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		waitUntilExecutionState(ev31.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)__		waitUntilExecutionState(ev32.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)___		ev31.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())__	};tests,that,a,job,has,server,failover,regions,and,one,region,failover,does,not,influence,others,pre,a1,b1,c1,d1,x,a2,b2,c2,pipelined,blocking,pipelined,pre;test,public,void,test,multi,regions,failover,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,slot,provider,slot,provider,new,simple,slot,provider,job,id,20,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v3,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,collections,empty,list,collections,empty,list,slot,provider,execution,graph,class,get,class,loader,null,eg,attach,job,graph,ordered,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev22,eg,get,job,vertex,v2,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,execution,vertex,ev4,eg,get,job,vertex,v3,get,id,get,task,vertices,0,eg,schedule,for,execution,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,ev21,schedule,for,execution,slot,provider,true,ev21,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,mark,finished,ev21,get,current,execution,attempt,mark,finished,ev22,schedule,for,execution,slot,provider,true,ev22,get,current,execution,attempt,mark,finished,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,wait,until,execution,state,ev31,get,current,execution,attempt,execution,state,deploying,2000,wait,until,execution,state,ev32,get,current,execution,attempt,execution,state,deploying,2000,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionsFailover() throws Exception;1508861311;Tests that a job has server failover regions and one region failover does not influence others__<pre>_(a1) ---> (b1) -+-> (c1) ---+-> (d1)_X          /_(a2) ---> (b2) -+-> (c2) -+__^         ^         ^_|         |         |_(pipelined) (blocking) (pipelined)__</pre>;@Test_	public void testMultiRegionsFailover() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SlotProvider slotProvider = new SimpleSlotProvider(jobId, 20)__				_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		v3.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			slotProvider,_			ExecutionGraph.class.getClassLoader(),_			null)___		eg.attachJobGraph(ordered)___		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		_		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]___		_		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev22 = eg.getJobVertex(v2.getID()).getTaskVertices()[1]___		_		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		ExecutionVertex ev4 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())___		ev21.scheduleForExecution(slotProvider, true)__		ev21.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().markFinished()__		ev21.getCurrentExecutionAttempt().markFinished()__		ev22.scheduleForExecution(slotProvider, true)__		ev22.getCurrentExecutionAttempt().markFinished()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		waitUntilExecutionState(ev31.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)__		waitUntilExecutionState(ev32.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)___		ev31.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())__	};tests,that,a,job,has,server,failover,regions,and,one,region,failover,does,not,influence,others,pre,a1,b1,c1,d1,x,a2,b2,c2,pipelined,blocking,pipelined,pre;test,public,void,test,multi,regions,failover,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,slot,provider,slot,provider,new,simple,slot,provider,job,id,20,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v3,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,slot,provider,execution,graph,class,get,class,loader,null,eg,attach,job,graph,ordered,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev22,eg,get,job,vertex,v2,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,execution,vertex,ev4,eg,get,job,vertex,v3,get,id,get,task,vertices,0,eg,schedule,for,execution,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,ev21,schedule,for,execution,slot,provider,true,ev21,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,mark,finished,ev21,get,current,execution,attempt,mark,finished,ev22,schedule,for,execution,slot,provider,true,ev22,get,current,execution,attempt,mark,finished,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,wait,until,execution,state,ev31,get,current,execution,attempt,execution,state,deploying,2000,wait,until,execution,state,ev32,get,current,execution,attempt,execution,state,deploying,2000,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionsFailover() throws Exception;1508861311;Tests that a job has server failover regions and one region failover does not influence others__<pre>_(a1) ---> (b1) -+-> (c1) ---+-> (d1)_X          /_(a2) ---> (b2) -+-> (c2) -+__^         ^         ^_|         |         |_(pipelined) (blocking) (pipelined)__</pre>;@Test_	public void testMultiRegionsFailover() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SlotProvider slotProvider = new SimpleSlotProvider(jobId, 20)__				_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		v3.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			slotProvider)___		eg.attachJobGraph(ordered)___		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		_		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]___		_		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev22 = eg.getJobVertex(v2.getID()).getTaskVertices()[1]___		_		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		ExecutionVertex ev4 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())___		ev21.scheduleForExecution(slotProvider, true)__		ev21.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().markFinished()__		ev21.getCurrentExecutionAttempt().markFinished()__		ev22.scheduleForExecution(slotProvider, true)__		ev22.getCurrentExecutionAttempt().markFinished()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		waitUntilExecutionState(ev31.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)__		waitUntilExecutionState(ev32.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)___		ev31.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())__	};tests,that,a,job,has,server,failover,regions,and,one,region,failover,does,not,influence,others,pre,a1,b1,c1,d1,x,a2,b2,c2,pipelined,blocking,pipelined,pre;test,public,void,test,multi,regions,failover,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,slot,provider,slot,provider,new,simple,slot,provider,job,id,20,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v3,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,slot,provider,eg,attach,job,graph,ordered,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev22,eg,get,job,vertex,v2,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,execution,vertex,ev4,eg,get,job,vertex,v3,get,id,get,task,vertices,0,eg,schedule,for,execution,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,ev21,schedule,for,execution,slot,provider,true,ev21,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,mark,finished,ev21,get,current,execution,attempt,mark,finished,ev22,schedule,for,execution,slot,provider,true,ev22,get,current,execution,attempt,mark,finished,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,wait,until,execution,state,ev31,get,current,execution,attempt,execution,state,deploying,2000,wait,until,execution,state,ev32,get,current,execution,attempt,execution,state,deploying,2000,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionsFailover() throws Exception;1509638685;Tests that a job has server failover regions and one region failover does not influence others__<pre>_(a1) ---> (b1) -+-> (c1) ---+-> (d1)_X          /_(a2) ---> (b2) -+-> (c2) -+__^         ^         ^_|         |         |_(pipelined) (blocking) (pipelined)__</pre>;@Test_	public void testMultiRegionsFailover() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SlotProvider slotProvider = new SimpleSlotProvider(jobId, 20)__				_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		v3.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			slotProvider)___		eg.attachJobGraph(ordered)___		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		_		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]___		_		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev22 = eg.getJobVertex(v2.getID()).getTaskVertices()[1]___		_		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		ExecutionVertex ev4 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())___		ev21.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL)__		ev21.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().markFinished()__		ev21.getCurrentExecutionAttempt().markFinished()__		ev22.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL)__		ev22.getCurrentExecutionAttempt().markFinished()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		waitUntilExecutionState(ev31.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)__		waitUntilExecutionState(ev32.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)___		ev31.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())__	};tests,that,a,job,has,server,failover,regions,and,one,region,failover,does,not,influence,others,pre,a1,b1,c1,d1,x,a2,b2,c2,pipelined,blocking,pipelined,pre;test,public,void,test,multi,regions,failover,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,slot,provider,slot,provider,new,simple,slot,provider,job,id,20,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v3,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,slot,provider,eg,attach,job,graph,ordered,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev22,eg,get,job,vertex,v2,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,execution,vertex,ev4,eg,get,job,vertex,v3,get,id,get,task,vertices,0,eg,schedule,for,execution,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,ev21,schedule,for,execution,slot,provider,true,location,preference,constraint,all,ev21,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,mark,finished,ev21,get,current,execution,attempt,mark,finished,ev22,schedule,for,execution,slot,provider,true,location,preference,constraint,all,ev22,get,current,execution,attempt,mark,finished,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,wait,until,execution,state,ev31,get,current,execution,attempt,execution,state,deploying,2000,wait,until,execution,state,ev32,get,current,execution,attempt,execution,state,deploying,2000,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionsFailover() throws Exception;1509638685;Tests that a job has server failover regions and one region failover does not influence others__<pre>_(a1) ---> (b1) -+-> (c1) ---+-> (d1)_X          /_(a2) ---> (b2) -+-> (c2) -+__^         ^         ^_|         |         |_(pipelined) (blocking) (pipelined)__</pre>;@Test_	public void testMultiRegionsFailover() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SlotProvider slotProvider = new SimpleSlotProvider(jobId, 20)__				_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		v3.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			slotProvider)___		eg.attachJobGraph(ordered)___		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		_		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]___		_		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev22 = eg.getJobVertex(v2.getID()).getTaskVertices()[1]___		_		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		ExecutionVertex ev4 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())___		ev21.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL)__		ev21.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().markFinished()__		ev21.getCurrentExecutionAttempt().markFinished()__		ev22.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL)__		ev22.getCurrentExecutionAttempt().markFinished()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		waitUntilExecutionState(ev31.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)__		waitUntilExecutionState(ev32.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)___		ev31.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())__	};tests,that,a,job,has,server,failover,regions,and,one,region,failover,does,not,influence,others,pre,a1,b1,c1,d1,x,a2,b2,c2,pipelined,blocking,pipelined,pre;test,public,void,test,multi,regions,failover,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,slot,provider,slot,provider,new,simple,slot,provider,job,id,20,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v3,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,slot,provider,eg,attach,job,graph,ordered,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev22,eg,get,job,vertex,v2,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,execution,vertex,ev4,eg,get,job,vertex,v3,get,id,get,task,vertices,0,eg,schedule,for,execution,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,ev21,schedule,for,execution,slot,provider,true,location,preference,constraint,all,ev21,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,mark,finished,ev21,get,current,execution,attempt,mark,finished,ev22,schedule,for,execution,slot,provider,true,location,preference,constraint,all,ev22,get,current,execution,attempt,mark,finished,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,wait,until,execution,state,ev31,get,current,execution,attempt,execution,state,deploying,2000,wait,until,execution,state,ev32,get,current,execution,attempt,execution,state,deploying,2000,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionsFailover() throws Exception;1513261599;Tests that a job has server failover regions and one region failover does not influence others__<pre>_(a1) ---> (b1) -+-> (c1) ---+-> (d1)_X          /_(a2) ---> (b2) -+-> (c2) -+__^         ^         ^_|         |         |_(pipelined) (blocking) (pipelined)__</pre>;@Test_	public void testMultiRegionsFailover() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SlotProvider slotProvider = new SimpleSlotProvider(jobId, 20)__				_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		v3.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			slotProvider)___		eg.attachJobGraph(ordered)___		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		_		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]___		_		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev22 = eg.getJobVertex(v2.getID()).getTaskVertices()[1]___		_		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		ExecutionVertex ev4 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())___		ev21.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL)__		ev21.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().markFinished()__		ev21.getCurrentExecutionAttempt().markFinished()__		ev22.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL)__		ev22.getCurrentExecutionAttempt().markFinished()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		waitUntilExecutionState(ev31.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)__		waitUntilExecutionState(ev32.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)___		ev31.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())__	};tests,that,a,job,has,server,failover,regions,and,one,region,failover,does,not,influence,others,pre,a1,b1,c1,d1,x,a2,b2,c2,pipelined,blocking,pipelined,pre;test,public,void,test,multi,regions,failover,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,slot,provider,slot,provider,new,simple,slot,provider,job,id,20,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v3,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,slot,provider,eg,attach,job,graph,ordered,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev22,eg,get,job,vertex,v2,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,execution,vertex,ev4,eg,get,job,vertex,v3,get,id,get,task,vertices,0,eg,schedule,for,execution,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,ev21,schedule,for,execution,slot,provider,true,location,preference,constraint,all,ev21,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,mark,finished,ev21,get,current,execution,attempt,mark,finished,ev22,schedule,for,execution,slot,provider,true,location,preference,constraint,all,ev22,get,current,execution,attempt,mark,finished,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,wait,until,execution,state,ev31,get,current,execution,attempt,execution,state,deploying,2000,wait,until,execution,state,ev32,get,current,execution,attempt,execution,state,deploying,2000,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionsFailover() throws Exception;1540920690;Tests that a job has server failover regions and one region failover does not influence others__<pre>_(a1) ---> (b1) -+-> (c1) ---+-> (d1)_X          /_(a2) ---> (b2) -+-> (c2) -+__^         ^         ^_|         |         |_(pipelined) (blocking) (pipelined)__</pre>;@Test_	public void testMultiRegionsFailover() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SlotProvider slotProvider = new SimpleSlotProvider(jobId, 20)__				_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		v3.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			slotProvider)___		eg.attachJobGraph(ordered)___		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		_		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]___		_		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev22 = eg.getJobVertex(v2.getID()).getTaskVertices()[1]___		_		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		ExecutionVertex ev4 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())___		ev21.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL, Collections.emptySet())__		ev21.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().markFinished()__		ev21.getCurrentExecutionAttempt().markFinished()__		ev22.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL, Collections.emptySet())__		ev22.getCurrentExecutionAttempt().markFinished()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		waitUntilExecutionState(ev31.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)__		waitUntilExecutionState(ev32.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)___		ev31.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())__	};tests,that,a,job,has,server,failover,regions,and,one,region,failover,does,not,influence,others,pre,a1,b1,c1,d1,x,a2,b2,c2,pipelined,blocking,pipelined,pre;test,public,void,test,multi,regions,failover,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,slot,provider,slot,provider,new,simple,slot,provider,job,id,20,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v3,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,slot,provider,eg,attach,job,graph,ordered,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev22,eg,get,job,vertex,v2,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,execution,vertex,ev4,eg,get,job,vertex,v3,get,id,get,task,vertices,0,eg,schedule,for,execution,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,ev21,schedule,for,execution,slot,provider,true,location,preference,constraint,all,collections,empty,set,ev21,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,mark,finished,ev21,get,current,execution,attempt,mark,finished,ev22,schedule,for,execution,slot,provider,true,location,preference,constraint,all,collections,empty,set,ev22,get,current,execution,attempt,mark,finished,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,wait,until,execution,state,ev31,get,current,execution,attempt,execution,state,deploying,2000,wait,until,execution,state,ev32,get,current,execution,attempt,execution,state,deploying,2000,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionsFailover() throws Exception;1549365080;Tests that a job has server failover regions and one region failover does not influence others__<pre>_(a1) ---> (b1) -+-> (c1) ---+-> (d1)_X          /_(a2) ---> (b2) -+-> (c2) -+__^         ^         ^_|         |         |_(pipelined) (blocking) (pipelined)__</pre>;@Test_	public void testMultiRegionsFailover() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SlotProvider slotProvider = new SimpleSlotProvider(jobId, 20)__				_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		v3.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			slotProvider)___		eg.attachJobGraph(ordered)__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		_		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]___		_		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev22 = eg.getJobVertex(v2.getID()).getTaskVertices()[1]___		_		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		ExecutionVertex ev4 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())___		ev21.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL, Collections.emptySet())__		ev21.getCurrentExecutionAttempt().failAsync(new Exception("New fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().markFinished()__		ev21.getCurrentExecutionAttempt().markFinished()__		ev22.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL, Collections.emptySet())__		ev22.getCurrentExecutionAttempt().markFinished()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		waitUntilExecutionState(ev31.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)__		waitUntilExecutionState(ev32.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)___		ev31.getCurrentExecutionAttempt().failAsync(new Exception("New fail"))__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())__	};tests,that,a,job,has,server,failover,regions,and,one,region,failover,does,not,influence,others,pre,a1,b1,c1,d1,x,a2,b2,c2,pipelined,blocking,pipelined,pre;test,public,void,test,multi,regions,failover,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,slot,provider,slot,provider,new,simple,slot,provider,job,id,20,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v3,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,slot,provider,eg,attach,job,graph,ordered,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev22,eg,get,job,vertex,v2,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,execution,vertex,ev4,eg,get,job,vertex,v3,get,id,get,task,vertices,0,eg,schedule,for,execution,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,ev21,schedule,for,execution,slot,provider,true,location,preference,constraint,all,collections,empty,set,ev21,get,current,execution,attempt,fail,async,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,mark,finished,ev21,get,current,execution,attempt,mark,finished,ev22,schedule,for,execution,slot,provider,true,location,preference,constraint,all,collections,empty,set,ev22,get,current,execution,attempt,mark,finished,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,wait,until,execution,state,ev31,get,current,execution,attempt,execution,state,deploying,2000,wait,until,execution,state,ev32,get,current,execution,attempt,execution,state,deploying,2000,ev31,get,current,execution,attempt,fail,async,new,exception,new,fail,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionsFailover() throws Exception;1550220073;Tests that a job has server failover regions and one region failover does not influence others__<pre>_(a1) ---> (b1) -+-> (c1) ---+-> (d1)_X          /_(a2) ---> (b2) -+-> (c2) -+__^         ^         ^_|         |         |_(pipelined) (blocking) (pipelined)__</pre>;@Test_	public void testMultiRegionsFailover() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SlotProvider slotProvider = new SimpleSlotProvider(jobId, 20)__				_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		v3.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			slotProvider)___		eg.attachJobGraph(ordered)__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		_		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]___		_		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev22 = eg.getJobVertex(v2.getID()).getTaskVertices()[1]___		_		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		ExecutionVertex ev4 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())___		ev21.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL, Collections.emptySet())__		ev21.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().markFinished()__		ev21.getCurrentExecutionAttempt().markFinished()__		ev22.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL, Collections.emptySet())__		ev22.getCurrentExecutionAttempt().markFinished()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		waitUntilExecutionState(ev31.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)__		waitUntilExecutionState(ev32.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)___		ev31.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())__	};tests,that,a,job,has,server,failover,regions,and,one,region,failover,does,not,influence,others,pre,a1,b1,c1,d1,x,a2,b2,c2,pipelined,blocking,pipelined,pre;test,public,void,test,multi,regions,failover,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,slot,provider,slot,provider,new,simple,slot,provider,job,id,20,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v3,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,slot,provider,eg,attach,job,graph,ordered,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev22,eg,get,job,vertex,v2,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,execution,vertex,ev4,eg,get,job,vertex,v3,get,id,get,task,vertices,0,eg,schedule,for,execution,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,ev21,schedule,for,execution,slot,provider,true,location,preference,constraint,all,collections,empty,set,ev21,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,mark,finished,ev21,get,current,execution,attempt,mark,finished,ev22,schedule,for,execution,slot,provider,true,location,preference,constraint,all,collections,empty,set,ev22,get,current,execution,attempt,mark,finished,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,wait,until,execution,state,ev31,get,current,execution,attempt,execution,state,deploying,2000,wait,until,execution,state,ev32,get,current,execution,attempt,execution,state,deploying,2000,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionsFailover() throws Exception;1550683188;Tests that a job has server failover regions and one region failover does not influence others__<pre>_(a1) ---> (b1) -+-> (c1) ---+-> (d1)_X          /_(a2) ---> (b2) -+-> (c2) -+__^         ^         ^_|         |         |_(pipelined) (blocking) (pipelined)__</pre>;@Test_	public void testMultiRegionsFailover() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SlotProvider slotProvider = new SimpleSlotProvider(jobId, 20)__				_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		v3.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			slotProvider)___		eg.attachJobGraph(ordered)__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		_		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]___		_		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev22 = eg.getJobVertex(v2.getID()).getTaskVertices()[1]___		_		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		ExecutionVertex ev4 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())___		ev21.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL, Collections.emptySet())__		ev21.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().completeCancelling()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().markFinished()__		ev21.getCurrentExecutionAttempt().markFinished()__		ev22.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL, Collections.emptySet())__		ev22.getCurrentExecutionAttempt().markFinished()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		waitUntilExecutionState(ev31.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)__		waitUntilExecutionState(ev32.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)___		ev31.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().completeCancelling()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())__	};tests,that,a,job,has,server,failover,regions,and,one,region,failover,does,not,influence,others,pre,a1,b1,c1,d1,x,a2,b2,c2,pipelined,blocking,pipelined,pre;test,public,void,test,multi,regions,failover,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,slot,provider,slot,provider,new,simple,slot,provider,job,id,20,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v3,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,slot,provider,eg,attach,job,graph,ordered,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev22,eg,get,job,vertex,v2,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,execution,vertex,ev4,eg,get,job,vertex,v3,get,id,get,task,vertices,0,eg,schedule,for,execution,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,ev21,schedule,for,execution,slot,provider,true,location,preference,constraint,all,collections,empty,set,ev21,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,complete,cancelling,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,mark,finished,ev21,get,current,execution,attempt,mark,finished,ev22,schedule,for,execution,slot,provider,true,location,preference,constraint,all,collections,empty,set,ev22,get,current,execution,attempt,mark,finished,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,wait,until,execution,state,ev31,get,current,execution,attempt,execution,state,deploying,2000,wait,until,execution,state,ev32,get,current,execution,attempt,execution,state,deploying,2000,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,complete,cancelling,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionsFailover() throws Exception;1550824704;Tests that a job has server failover regions and one region failover does not influence others__<pre>_(a1) ---> (b1) -+-> (c1) ---+-> (d1)_X          /_(a2) ---> (b2) -+-> (c2) -+__^         ^         ^_|         |         |_(pipelined) (blocking) (pipelined)__</pre>;@Test_	public void testMultiRegionsFailover() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SlotProvider slotProvider = new SimpleSlotProvider(jobId, 20)__				_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		v3.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			slotProvider)___		eg.attachJobGraph(ordered)__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		_		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]___		_		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev22 = eg.getJobVertex(v2.getID()).getTaskVertices()[1]___		_		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		ExecutionVertex ev4 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())___		ev21.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL, Collections.emptySet())__		ev21.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().completeCancelling()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().markFinished()__		ev21.getCurrentExecutionAttempt().markFinished()__		ev22.scheduleForExecution(slotProvider, true, LocationPreferenceConstraint.ALL, Collections.emptySet())__		ev22.getCurrentExecutionAttempt().markFinished()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		waitUntilExecutionState(ev31.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)__		waitUntilExecutionState(ev32.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 2000)___		ev31.getCurrentExecutionAttempt().fail(new Exception("New fail"))__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().completeCancelling()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev22).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())__	};tests,that,a,job,has,server,failover,regions,and,one,region,failover,does,not,influence,others,pre,a1,b1,c1,d1,x,a2,b2,c2,pipelined,blocking,pipelined,pre;test,public,void,test,multi,regions,failover,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,slot,provider,slot,provider,new,simple,slot,provider,job,id,20,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v3,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,slot,provider,eg,attach,job,graph,ordered,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev22,eg,get,job,vertex,v2,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,execution,vertex,ev4,eg,get,job,vertex,v3,get,id,get,task,vertices,0,eg,schedule,for,execution,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,ev21,schedule,for,execution,slot,provider,true,location,preference,constraint,all,collections,empty,set,ev21,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,complete,cancelling,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,mark,finished,ev21,get,current,execution,attempt,mark,finished,ev22,schedule,for,execution,slot,provider,true,location,preference,constraint,all,collections,empty,set,ev22,get,current,execution,attempt,mark,finished,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,wait,until,execution,state,ev31,get,current,execution,attempt,execution,state,deploying,2000,wait,until,execution,state,ev32,get,current,execution,attempt,execution,state,deploying,2000,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,complete,cancelling,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev22,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state
FailoverRegionTest -> @Test 	public void testFailWhileCancelling() throws Exception;1494099604;Tests that a new failure comes while the failover region is in CANCELLING_@throws Exception;@Test_	public void testFailWhileCancelling() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		ev1.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		ExecutionVertex ev2 = iter.next()__		ev2.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.RUNNING, eg.getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,in,cancelling,throws,exception;test,public,void,test,fail,while,cancelling,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,ev1,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,execution,vertex,ev2,iter,next,ev2,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,eg,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileCancelling() throws Exception;1507212387;Tests that a new failure comes while the failover region is in CANCELLING_@throws Exception;@Test_	public void testFailWhileCancelling() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		ev1.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		ExecutionVertex ev2 = iter.next()__		ev2.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.RUNNING, eg.getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,in,cancelling,throws,exception;test,public,void,test,fail,while,cancelling,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,ev1,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,execution,vertex,ev2,iter,next,ev2,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,eg,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileCancelling() throws Exception;1508861310;Tests that a new failure comes while the failover region is in CANCELLING_@throws Exception;@Test_	public void testFailWhileCancelling() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		ev1.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		ExecutionVertex ev2 = iter.next()__		ev2.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.RUNNING, eg.getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,in,cancelling,throws,exception;test,public,void,test,fail,while,cancelling,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,ev1,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,execution,vertex,ev2,iter,next,ev2,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,eg,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileCancelling() throws Exception;1508861311;Tests that a new failure comes while the failover region is in CANCELLING_@throws Exception;@Test_	public void testFailWhileCancelling() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		ev1.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		ExecutionVertex ev2 = iter.next()__		ev2.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.RUNNING, eg.getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,in,cancelling,throws,exception;test,public,void,test,fail,while,cancelling,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,ev1,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,execution,vertex,ev2,iter,next,ev2,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,eg,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileCancelling() throws Exception;1508861311;Tests that a new failure comes while the failover region is in CANCELLING_@throws Exception;@Test_	public void testFailWhileCancelling() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		ev1.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		ExecutionVertex ev2 = iter.next()__		ev2.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.RUNNING, eg.getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,in,cancelling,throws,exception;test,public,void,test,fail,while,cancelling,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,ev1,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,execution,vertex,ev2,iter,next,ev2,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,eg,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileCancelling() throws Exception;1509638685;Tests that a new failure comes while the failover region is in CANCELLING_@throws Exception;@Test_	public void testFailWhileCancelling() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		ev1.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		ExecutionVertex ev2 = iter.next()__		ev2.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.RUNNING, eg.getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,in,cancelling,throws,exception;test,public,void,test,fail,while,cancelling,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,ev1,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,execution,vertex,ev2,iter,next,ev2,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,eg,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileCancelling() throws Exception;1509638685;Tests that a new failure comes while the failover region is in CANCELLING_@throws Exception;@Test_	public void testFailWhileCancelling() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		ev1.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		ExecutionVertex ev2 = iter.next()__		ev2.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.RUNNING, eg.getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,in,cancelling,throws,exception;test,public,void,test,fail,while,cancelling,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,ev1,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,execution,vertex,ev2,iter,next,ev2,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,eg,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileCancelling() throws Exception;1513261599;Tests that a new failure comes while the failover region is in CANCELLING_@throws Exception;@Test_	public void testFailWhileCancelling() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		ev1.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		ExecutionVertex ev2 = iter.next()__		ev2.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.RUNNING, eg.getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,in,cancelling,throws,exception;test,public,void,test,fail,while,cancelling,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,ev1,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,execution,vertex,ev2,iter,next,ev2,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,eg,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileCancelling() throws Exception;1540920690;Tests that a new failure comes while the failover region is in CANCELLING_@throws Exception;@Test_	public void testFailWhileCancelling() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		ev1.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		ExecutionVertex ev2 = iter.next()__		ev2.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.RUNNING, eg.getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,in,cancelling,throws,exception;test,public,void,test,fail,while,cancelling,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,ev1,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,execution,vertex,ev2,iter,next,ev2,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,eg,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileCancelling() throws Exception;1549365080;Tests that a new failure comes while the failover region is in CANCELLING_@throws Exception;@Test_	public void testFailWhileCancelling() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		ev1.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().failAsync(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		ExecutionVertex ev2 = iter.next()__		ev2.getCurrentExecutionAttempt().failAsync(new Exception("new fail"))__		assertEquals(JobStatus.RUNNING, eg.getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,in,cancelling,throws,exception;test,public,void,test,fail,while,cancelling,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,ev1,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,async,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,execution,vertex,ev2,iter,next,ev2,get,current,execution,attempt,fail,async,new,exception,new,fail,assert,equals,job,status,running,eg,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileCancelling() throws Exception;1550220073;Tests that a new failure comes while the failover region is in CANCELLING_@throws Exception;@Test_	public void testFailWhileCancelling() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		ev1.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		ExecutionVertex ev2 = iter.next()__		ev2.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.RUNNING, eg.getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,in,cancelling,throws,exception;test,public,void,test,fail,while,cancelling,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,ev1,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,execution,vertex,ev2,iter,next,ev2,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,eg,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileCancelling() throws Exception;1550683188;Tests that a new failure comes while the failover region is in CANCELLING_@throws Exception;@Test_	public void testFailWhileCancelling() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		ev1.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		ExecutionVertex ev2 = iter.next()__		ev2.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.RUNNING, eg.getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,in,cancelling,throws,exception;test,public,void,test,fail,while,cancelling,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,ev1,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,execution,vertex,ev2,iter,next,ev2,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,eg,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testFailWhileCancelling() throws Exception;1550824704;Tests that a new failure comes while the failover region is in CANCELLING_@throws Exception;@Test_	public void testFailWhileCancelling() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		Iterator<ExecutionVertex> iter = eg.getAllExecutionVertices().iterator()__		ExecutionVertex ev1 = iter.next()__		ev1.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev1).getState())___		ev1.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())___		ExecutionVertex ev2 = iter.next()__		ev2.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.RUNNING, eg.getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev1).getState())__	};tests,that,a,new,failure,comes,while,the,failover,region,is,in,cancelling,throws,exception;test,public,void,test,fail,while,cancelling,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,iterator,execution,vertex,iter,eg,get,all,execution,vertices,iterator,execution,vertex,ev1,iter,next,ev1,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,strategy,get,failover,region,ev1,get,state,ev1,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state,execution,vertex,ev2,iter,next,ev2,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,running,eg,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev1,get,state
FailoverRegionTest -> @Test 	public void testSingleRegionFailover() throws Exception;1494099604;Tests that a job only has one failover region and can recover from task failure successfully_@throws Exception;@Test_	public void testSingleRegionFailover() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy(10)__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())___		ev.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())__	};tests,that,a,job,only,has,one,failover,region,and,can,recover,from,task,failure,successfully,throws,exception;test,public,void,test,single,region,failover,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,10,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state,ev,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,cancelling,strategy,get,failover,region,ev,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state
FailoverRegionTest -> @Test 	public void testSingleRegionFailover() throws Exception;1507212387;Tests that a job only has one failover region and can recover from task failure successfully_@throws Exception;@Test_	public void testSingleRegionFailover() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy(10)__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())___		ev.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())__	};tests,that,a,job,only,has,one,failover,region,and,can,recover,from,task,failure,successfully,throws,exception;test,public,void,test,single,region,failover,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,10,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state,ev,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,cancelling,strategy,get,failover,region,ev,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state
FailoverRegionTest -> @Test 	public void testSingleRegionFailover() throws Exception;1508861310;Tests that a job only has one failover region and can recover from task failure successfully_@throws Exception;@Test_	public void testSingleRegionFailover() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy(10)__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())___		ev.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())__	};tests,that,a,job,only,has,one,failover,region,and,can,recover,from,task,failure,successfully,throws,exception;test,public,void,test,single,region,failover,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,10,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state,ev,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,cancelling,strategy,get,failover,region,ev,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state
FailoverRegionTest -> @Test 	public void testSingleRegionFailover() throws Exception;1508861311;Tests that a job only has one failover region and can recover from task failure successfully_@throws Exception;@Test_	public void testSingleRegionFailover() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy(10)__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())___		ev.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())__	};tests,that,a,job,only,has,one,failover,region,and,can,recover,from,task,failure,successfully,throws,exception;test,public,void,test,single,region,failover,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,10,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state,ev,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,cancelling,strategy,get,failover,region,ev,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state
FailoverRegionTest -> @Test 	public void testSingleRegionFailover() throws Exception;1508861311;Tests that a job only has one failover region and can recover from task failure successfully_@throws Exception;@Test_	public void testSingleRegionFailover() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy(10)__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())___		ev.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())__	};tests,that,a,job,only,has,one,failover,region,and,can,recover,from,task,failure,successfully,throws,exception;test,public,void,test,single,region,failover,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,10,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state,ev,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,cancelling,strategy,get,failover,region,ev,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state
FailoverRegionTest -> @Test 	public void testSingleRegionFailover() throws Exception;1509638685;Tests that a job only has one failover region and can recover from task failure successfully_@throws Exception;@Test_	public void testSingleRegionFailover() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy(10)__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())___		ev.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())__	};tests,that,a,job,only,has,one,failover,region,and,can,recover,from,task,failure,successfully,throws,exception;test,public,void,test,single,region,failover,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,10,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state,ev,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,cancelling,strategy,get,failover,region,ev,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state
FailoverRegionTest -> @Test 	public void testSingleRegionFailover() throws Exception;1509638685;Tests that a job only has one failover region and can recover from task failure successfully_@throws Exception;@Test_	public void testSingleRegionFailover() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy(10)__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())___		ev.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())__	};tests,that,a,job,only,has,one,failover,region,and,can,recover,from,task,failure,successfully,throws,exception;test,public,void,test,single,region,failover,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,10,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state,ev,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,cancelling,strategy,get,failover,region,ev,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state
FailoverRegionTest -> @Test 	public void testSingleRegionFailover() throws Exception;1513261599;Tests that a job only has one failover region and can recover from task failure successfully_@throws Exception;@Test_	public void testSingleRegionFailover() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy(10)__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())___		ev.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())__	};tests,that,a,job,only,has,one,failover,region,and,can,recover,from,task,failure,successfully,throws,exception;test,public,void,test,single,region,failover,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,10,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state,ev,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,cancelling,strategy,get,failover,region,ev,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state
FailoverRegionTest -> @Test 	public void testSingleRegionFailover() throws Exception;1540920690;Tests that a job only has one failover region and can recover from task failure successfully_@throws Exception;@Test_	public void testSingleRegionFailover() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy(10)__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())___		ev.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())__	};tests,that,a,job,only,has,one,failover,region,and,can,recover,from,task,failure,successfully,throws,exception;test,public,void,test,single,region,failover,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,10,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state,ev,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,cancelling,strategy,get,failover,region,ev,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state
FailoverRegionTest -> @Test 	public void testSingleRegionFailover() throws Exception;1549365080;Tests that a job only has one failover region and can recover from task failure successfully_@throws Exception;@Test_	public void testSingleRegionFailover() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy(10)__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())___		ev.getCurrentExecutionAttempt().failAsync(new Exception("Test Exception"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())__	};tests,that,a,job,only,has,one,failover,region,and,can,recover,from,task,failure,successfully,throws,exception;test,public,void,test,single,region,failover,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,10,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state,ev,get,current,execution,attempt,fail,async,new,exception,test,exception,assert,equals,job,status,cancelling,strategy,get,failover,region,ev,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state
FailoverRegionTest -> @Test 	public void testSingleRegionFailover() throws Exception;1550220073;Tests that a job only has one failover region and can recover from task failure successfully_@throws Exception;@Test_	public void testSingleRegionFailover() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy(10)__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())___		ev.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())__	};tests,that,a,job,only,has,one,failover,region,and,can,recover,from,task,failure,successfully,throws,exception;test,public,void,test,single,region,failover,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,10,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state,ev,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,cancelling,strategy,get,failover,region,ev,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state
FailoverRegionTest -> @Test 	public void testSingleRegionFailover() throws Exception;1550683188;Tests that a job only has one failover region and can recover from task failure successfully_@throws Exception;@Test_	public void testSingleRegionFailover() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy(10)__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())___		ev.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().completeCancelling()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())__	};tests,that,a,job,only,has,one,failover,region,and,can,recover,from,task,failure,successfully,throws,exception;test,public,void,test,single,region,failover,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,10,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state,ev,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,cancelling,strategy,get,failover,region,ev,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,complete,cancelling,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state
FailoverRegionTest -> @Test 	public void testSingleRegionFailover() throws Exception;1550824704;Tests that a job only has one failover region and can recover from task failure successfully_@throws Exception;@Test_	public void testSingleRegionFailover() throws Exception {_		RestartStrategy restartStrategy = new InfiniteDelayRestartStrategy(10)__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())___		ev.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev).getState())___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().completeCancelling()__		}_		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev).getState())__	};tests,that,a,job,only,has,one,failover,region,and,can,recover,from,task,failure,successfully,throws,exception;test,public,void,test,single,region,failover,throws,exception,restart,strategy,restart,strategy,new,infinite,delay,restart,strategy,10,execution,graph,eg,create,single,region,execution,graph,restart,strategy,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state,ev,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,cancelling,strategy,get,failover,region,ev,get,state,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,complete,cancelling,assert,equals,job,status,running,strategy,get,failover,region,ev,get,state
FailoverRegionTest -> @Test 	public void testNoManualRestart() throws Exception;1494099604;Tests that when a task fail, and restart strategy doesn't support restarting, the job will go to failed_@throws Exception;@Test_	public void testNoManualRestart() throws Exception {_		NoRestartStrategy restartStrategy = new NoRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		ev.fail(new Exception("Test Exception"))___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.FAILED, eg.getState())__	};tests,that,when,a,task,fail,and,restart,strategy,doesn,t,support,restarting,the,job,will,go,to,failed,throws,exception;test,public,void,test,no,manual,restart,throws,exception,no,restart,strategy,restart,strategy,new,no,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,ev,fail,new,exception,test,exception,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,failed,eg,get,state
FailoverRegionTest -> @Test 	public void testNoManualRestart() throws Exception;1507212387;Tests that when a task fail, and restart strategy doesn't support restarting, the job will go to failed_@throws Exception;@Test_	public void testNoManualRestart() throws Exception {_		NoRestartStrategy restartStrategy = new NoRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		ev.fail(new Exception("Test Exception"))___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.FAILED, eg.getState())__	};tests,that,when,a,task,fail,and,restart,strategy,doesn,t,support,restarting,the,job,will,go,to,failed,throws,exception;test,public,void,test,no,manual,restart,throws,exception,no,restart,strategy,restart,strategy,new,no,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,ev,fail,new,exception,test,exception,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,failed,eg,get,state
FailoverRegionTest -> @Test 	public void testNoManualRestart() throws Exception;1508861310;Tests that when a task fail, and restart strategy doesn't support restarting, the job will go to failed_@throws Exception;@Test_	public void testNoManualRestart() throws Exception {_		NoRestartStrategy restartStrategy = new NoRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		ev.fail(new Exception("Test Exception"))___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.FAILED, eg.getState())__	};tests,that,when,a,task,fail,and,restart,strategy,doesn,t,support,restarting,the,job,will,go,to,failed,throws,exception;test,public,void,test,no,manual,restart,throws,exception,no,restart,strategy,restart,strategy,new,no,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,ev,fail,new,exception,test,exception,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,failed,eg,get,state
FailoverRegionTest -> @Test 	public void testNoManualRestart() throws Exception;1508861311;Tests that when a task fail, and restart strategy doesn't support restarting, the job will go to failed_@throws Exception;@Test_	public void testNoManualRestart() throws Exception {_		NoRestartStrategy restartStrategy = new NoRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		ev.fail(new Exception("Test Exception"))___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.FAILED, eg.getState())__	};tests,that,when,a,task,fail,and,restart,strategy,doesn,t,support,restarting,the,job,will,go,to,failed,throws,exception;test,public,void,test,no,manual,restart,throws,exception,no,restart,strategy,restart,strategy,new,no,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,ev,fail,new,exception,test,exception,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,failed,eg,get,state
FailoverRegionTest -> @Test 	public void testNoManualRestart() throws Exception;1508861311;Tests that when a task fail, and restart strategy doesn't support restarting, the job will go to failed_@throws Exception;@Test_	public void testNoManualRestart() throws Exception {_		NoRestartStrategy restartStrategy = new NoRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		ev.fail(new Exception("Test Exception"))___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.FAILED, eg.getState())__	};tests,that,when,a,task,fail,and,restart,strategy,doesn,t,support,restarting,the,job,will,go,to,failed,throws,exception;test,public,void,test,no,manual,restart,throws,exception,no,restart,strategy,restart,strategy,new,no,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,ev,fail,new,exception,test,exception,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,failed,eg,get,state
FailoverRegionTest -> @Test 	public void testNoManualRestart() throws Exception;1509638685;Tests that when a task fail, and restart strategy doesn't support restarting, the job will go to failed_@throws Exception;@Test_	public void testNoManualRestart() throws Exception {_		NoRestartStrategy restartStrategy = new NoRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		ev.fail(new Exception("Test Exception"))___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.FAILED, eg.getState())__	};tests,that,when,a,task,fail,and,restart,strategy,doesn,t,support,restarting,the,job,will,go,to,failed,throws,exception;test,public,void,test,no,manual,restart,throws,exception,no,restart,strategy,restart,strategy,new,no,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,ev,fail,new,exception,test,exception,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,failed,eg,get,state
FailoverRegionTest -> @Test 	public void testNoManualRestart() throws Exception;1509638685;Tests that when a task fail, and restart strategy doesn't support restarting, the job will go to failed_@throws Exception;@Test_	public void testNoManualRestart() throws Exception {_		NoRestartStrategy restartStrategy = new NoRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		ev.fail(new Exception("Test Exception"))___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.FAILED, eg.getState())__	};tests,that,when,a,task,fail,and,restart,strategy,doesn,t,support,restarting,the,job,will,go,to,failed,throws,exception;test,public,void,test,no,manual,restart,throws,exception,no,restart,strategy,restart,strategy,new,no,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,ev,fail,new,exception,test,exception,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,failed,eg,get,state
FailoverRegionTest -> @Test 	public void testNoManualRestart() throws Exception;1513261599;Tests that when a task fail, and restart strategy doesn't support restarting, the job will go to failed_@throws Exception;@Test_	public void testNoManualRestart() throws Exception {_		NoRestartStrategy restartStrategy = new NoRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		ev.fail(new Exception("Test Exception"))___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.FAILED, eg.getState())__	};tests,that,when,a,task,fail,and,restart,strategy,doesn,t,support,restarting,the,job,will,go,to,failed,throws,exception;test,public,void,test,no,manual,restart,throws,exception,no,restart,strategy,restart,strategy,new,no,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,ev,fail,new,exception,test,exception,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,failed,eg,get,state
FailoverRegionTest -> @Test 	public void testNoManualRestart() throws Exception;1540920690;Tests that when a task fail, and restart strategy doesn't support restarting, the job will go to failed_@throws Exception;@Test_	public void testNoManualRestart() throws Exception {_		NoRestartStrategy restartStrategy = new NoRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		ev.fail(new Exception("Test Exception"))___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.FAILED, eg.getState())__	};tests,that,when,a,task,fail,and,restart,strategy,doesn,t,support,restarting,the,job,will,go,to,failed,throws,exception;test,public,void,test,no,manual,restart,throws,exception,no,restart,strategy,restart,strategy,new,no,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,ev,fail,new,exception,test,exception,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,failed,eg,get,state
FailoverRegionTest -> @Test 	public void testNoManualRestart() throws Exception;1549365080;Tests that when a task fail, and restart strategy doesn't support restarting, the job will go to failed_@throws Exception;@Test_	public void testNoManualRestart() throws Exception {_		NoRestartStrategy restartStrategy = new NoRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		ev.fail(new Exception("Test Exception"))___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.FAILED, eg.getState())__	};tests,that,when,a,task,fail,and,restart,strategy,doesn,t,support,restarting,the,job,will,go,to,failed,throws,exception;test,public,void,test,no,manual,restart,throws,exception,no,restart,strategy,restart,strategy,new,no,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,ev,fail,new,exception,test,exception,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,failed,eg,get,state
FailoverRegionTest -> @Test 	public void testNoManualRestart() throws Exception;1550220073;Tests that when a task fail, and restart strategy doesn't support restarting, the job will go to failed_@throws Exception;@Test_	public void testNoManualRestart() throws Exception {_		NoRestartStrategy restartStrategy = new NoRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		ev.fail(new Exception("Test Exception"))___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().cancelingComplete()__		}_		assertEquals(JobStatus.FAILED, eg.getState())__	};tests,that,when,a,task,fail,and,restart,strategy,doesn,t,support,restarting,the,job,will,go,to,failed,throws,exception;test,public,void,test,no,manual,restart,throws,exception,no,restart,strategy,restart,strategy,new,no,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,ev,fail,new,exception,test,exception,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,canceling,complete,assert,equals,job,status,failed,eg,get,state
FailoverRegionTest -> @Test 	public void testNoManualRestart() throws Exception;1550683188;Tests that when a task fail, and restart strategy doesn't support restarting, the job will go to failed_@throws Exception;@Test_	public void testNoManualRestart() throws Exception {_		NoRestartStrategy restartStrategy = new NoRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		ev.fail(new Exception("Test Exception"))___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().completeCancelling()__		}_		assertEquals(JobStatus.FAILED, eg.getState())__	};tests,that,when,a,task,fail,and,restart,strategy,doesn,t,support,restarting,the,job,will,go,to,failed,throws,exception;test,public,void,test,no,manual,restart,throws,exception,no,restart,strategy,restart,strategy,new,no,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,ev,fail,new,exception,test,exception,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,complete,cancelling,assert,equals,job,status,failed,eg,get,state
FailoverRegionTest -> @Test 	public void testNoManualRestart() throws Exception;1550824704;Tests that when a task fail, and restart strategy doesn't support restarting, the job will go to failed_@throws Exception;@Test_	public void testNoManualRestart() throws Exception {_		NoRestartStrategy restartStrategy = new NoRestartStrategy()__		ExecutionGraph eg = createSingleRegionExecutionGraph(restartStrategy)___		ExecutionVertex ev = eg.getAllExecutionVertices().iterator().next()___		ev.fail(new Exception("Test Exception"))___		for (ExecutionVertex evs : eg.getAllExecutionVertices()) {_			evs.getCurrentExecutionAttempt().completeCancelling()__		}_		assertEquals(JobStatus.FAILED, eg.getState())__	};tests,that,when,a,task,fail,and,restart,strategy,doesn,t,support,restarting,the,job,will,go,to,failed,throws,exception;test,public,void,test,no,manual,restart,throws,exception,no,restart,strategy,restart,strategy,new,no,restart,strategy,execution,graph,eg,create,single,region,execution,graph,restart,strategy,execution,vertex,ev,eg,get,all,execution,vertices,iterator,next,ev,fail,new,exception,test,exception,for,execution,vertex,evs,eg,get,all,execution,vertices,evs,get,current,execution,attempt,complete,cancelling,assert,equals,job,status,failed,eg,get,state
FailoverRegionTest -> @Test 	public void testMultiRegionFailoverAtSameTime() throws Exception;1509638685;Tests that two failover regions failover at the same time, they will not influence each other_@throws Exception;@Test_	public void testMultiRegionFailoverAtSameTime() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				16)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(2)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				new DummyJobInformation(_					jobId,_					jobName),_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new RestartPipelinedRegionStrategy.Factory(),_				scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		ev31.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev31), JobStatus.RUNNING, 1000)___		ev12.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev11), JobStatus.RUNNING, 1000)__	};tests,that,two,failover,regions,failover,at,the,same,time,they,will,not,influence,each,other,throws,exception;test,public,void,test,multi,region,failover,at,same,time,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,16,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,restart,pipelined,region,strategy,factory,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,fail,new,exception,new,fail,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev31,job,status,running,1000,ev12,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev11,job,status,running,1000
FailoverRegionTest -> @Test 	public void testMultiRegionFailoverAtSameTime() throws Exception;1509638685;Tests that two failover regions failover at the same time, they will not influence each other_@throws Exception;@Test_	public void testMultiRegionFailoverAtSameTime() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				16)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(2)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				new DummyJobInformation(_					jobId,_					jobName),_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new RestartPipelinedRegionStrategy.Factory(),_				scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		ev31.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev31), JobStatus.RUNNING, 1000)___		ev12.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev11), JobStatus.RUNNING, 1000)__	};tests,that,two,failover,regions,failover,at,the,same,time,they,will,not,influence,each,other,throws,exception;test,public,void,test,multi,region,failover,at,same,time,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,16,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,restart,pipelined,region,strategy,factory,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,fail,new,exception,new,fail,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev31,job,status,running,1000,ev12,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev11,job,status,running,1000
FailoverRegionTest -> @Test 	public void testMultiRegionFailoverAtSameTime() throws Exception;1513261599;Tests that two failover regions failover at the same time, they will not influence each other_@throws Exception;@Test_	public void testMultiRegionFailoverAtSameTime() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				16)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(2)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				new DummyJobInformation(_					jobId,_					jobName),_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new RestartPipelinedRegionStrategy.Factory(),_				scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		ev31.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev31), JobStatus.RUNNING, 1000)___		ev12.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev11), JobStatus.RUNNING, 1000)__	};tests,that,two,failover,regions,failover,at,the,same,time,they,will,not,influence,each,other,throws,exception;test,public,void,test,multi,region,failover,at,same,time,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,16,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,restart,pipelined,region,strategy,factory,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,fail,new,exception,new,fail,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev31,job,status,running,1000,ev12,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev11,job,status,running,1000
FailoverRegionTest -> @Test 	public void testMultiRegionFailoverAtSameTime() throws Exception;1540920690;Tests that two failover regions failover at the same time, they will not influence each other_@throws Exception;@Test_	public void testMultiRegionFailoverAtSameTime() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				16)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(2)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				new DummyJobInformation(_					jobId,_					jobName),_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new RestartPipelinedRegionStrategy.Factory(),_				scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		ev31.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev31), JobStatus.RUNNING, 1000)___		ev12.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev11), JobStatus.RUNNING, 1000)__	};tests,that,two,failover,regions,failover,at,the,same,time,they,will,not,influence,each,other,throws,exception;test,public,void,test,multi,region,failover,at,same,time,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,16,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,restart,pipelined,region,strategy,factory,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,fail,new,exception,new,fail,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev31,job,status,running,1000,ev12,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev11,job,status,running,1000
FailoverRegionTest -> @Test 	public void testMultiRegionFailoverAtSameTime() throws Exception;1549365080;Tests that two failover regions failover at the same time, they will not influence each other_@throws Exception;@Test_	public void testMultiRegionFailoverAtSameTime() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				16)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(2)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				new DummyJobInformation(_					jobId,_					jobName),_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new RestartPipelinedRegionStrategy.Factory(),_				scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().failAsync(new Exception("new fail"))__		ev31.getCurrentExecutionAttempt().failAsync(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev31), JobStatus.RUNNING, 1000)___		ev12.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev11), JobStatus.RUNNING, 1000)__	};tests,that,two,failover,regions,failover,at,the,same,time,they,will,not,influence,each,other,throws,exception;test,public,void,test,multi,region,failover,at,same,time,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,16,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,restart,pipelined,region,strategy,factory,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,fail,async,new,exception,new,fail,ev31,get,current,execution,attempt,fail,async,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev31,job,status,running,1000,ev12,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev11,job,status,running,1000
FailoverRegionTest -> @Test 	public void testMultiRegionFailoverAtSameTime() throws Exception;1550220073;Tests that two failover regions failover at the same time, they will not influence each other_@throws Exception;@Test_	public void testMultiRegionFailoverAtSameTime() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				16)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(2)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				new DummyJobInformation(_					jobId,_					jobName),_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new RestartPipelinedRegionStrategy.Factory(),_				scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		ev31.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev31), JobStatus.RUNNING, 1000)___		ev12.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev11), JobStatus.RUNNING, 1000)__	};tests,that,two,failover,regions,failover,at,the,same,time,they,will,not,influence,each,other,throws,exception;test,public,void,test,multi,region,failover,at,same,time,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,16,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,restart,pipelined,region,strategy,factory,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,fail,new,exception,new,fail,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev31,job,status,running,1000,ev12,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev11,job,status,running,1000
FailoverRegionTest -> @Test 	public void testMultiRegionFailoverAtSameTime() throws Exception;1550683188;Tests that two failover regions failover at the same time, they will not influence each other_@throws Exception;@Test_	public void testMultiRegionFailoverAtSameTime() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				16)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(2)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				new DummyJobInformation(_					jobId,_					jobName),_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new RestartPipelinedRegionStrategy.Factory(),_				scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		ev31.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().completeCancelling()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev31), JobStatus.RUNNING, 1000)___		ev12.getCurrentExecutionAttempt().completeCancelling()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev11), JobStatus.RUNNING, 1000)__	};tests,that,two,failover,regions,failover,at,the,same,time,they,will,not,influence,each,other,throws,exception;test,public,void,test,multi,region,failover,at,same,time,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,16,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,restart,pipelined,region,strategy,factory,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,fail,new,exception,new,fail,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,complete,cancelling,wait,until,failover,region,state,strategy,get,failover,region,ev31,job,status,running,1000,ev12,get,current,execution,attempt,complete,cancelling,wait,until,failover,region,state,strategy,get,failover,region,ev11,job,status,running,1000
FailoverRegionTest -> @Test 	public void testMultiRegionFailoverAtSameTime() throws Exception;1550824704;Tests that two failover regions failover at the same time, they will not influence each other_@throws Exception;@Test_	public void testMultiRegionFailoverAtSameTime() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jobId, 16)___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(2)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				new DummyJobInformation(_					jobId,_					jobName),_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new RestartPipelinedRegionStrategy.Factory(),_				slotProvider)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		ev31.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().completeCancelling()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev31), JobStatus.RUNNING, 1000)___		ev12.getCurrentExecutionAttempt().completeCancelling()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev11), JobStatus.RUNNING, 1000)__	};tests,that,two,failover,regions,failover,at,the,same,time,they,will,not,influence,each,other,throws,exception;test,public,void,test,multi,region,failover,at,same,time,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,simple,slot,provider,slot,provider,new,simple,slot,provider,job,id,16,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,restart,pipelined,region,strategy,factory,slot,provider,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,fail,new,exception,new,fail,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,complete,cancelling,wait,until,failover,region,state,strategy,get,failover,region,ev31,job,status,running,1000,ev12,get,current,execution,attempt,complete,cancelling,wait,until,failover,region,state,strategy,get,failover,region,ev11,job,status,running,1000
FailoverRegionTest -> @Test 	public void testMutilRegionFailoverAtSameTime() throws Exception;1494099604;Tests that two failover regions failover at the same time, they will not influence each orther_@throws Exception;@Test_	public void testMutilRegionFailoverAtSameTime() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				16)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(2)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				jobId,_				jobName,_				cfg,_				new SerializedValue<>(new ExecutionConfig()),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new RestartPipelinedRegionStrategy.Factory(),_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				scheduler,_				ExecutionGraph.class.getClassLoader())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		ev31.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev31), JobStatus.RUNNING, 1000)___		ev12.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev11), JobStatus.RUNNING, 1000)__	};tests,that,two,failover,regions,failover,at,the,same,time,they,will,not,influence,each,orther,throws,exception;test,public,void,test,mutil,region,failover,at,same,time,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,16,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,restart,pipelined,region,strategy,factory,collections,blob,key,empty,list,collections,url,empty,list,scheduler,execution,graph,class,get,class,loader,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,fail,new,exception,new,fail,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev31,job,status,running,1000,ev12,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev11,job,status,running,1000
FailoverRegionTest -> @Test 	public void testMutilRegionFailoverAtSameTime() throws Exception;1507212387;Tests that two failover regions failover at the same time, they will not influence each orther_@throws Exception;@Test_	public void testMutilRegionFailoverAtSameTime() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				16)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(2)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				jobId,_				jobName,_				cfg,_				new SerializedValue<>(new ExecutionConfig()),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new RestartPipelinedRegionStrategy.Factory(),_				Collections.emptyList(),_				Collections.emptyList(),_				scheduler,_				ExecutionGraph.class.getClassLoader())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		ev31.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev31), JobStatus.RUNNING, 1000)___		ev12.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev11), JobStatus.RUNNING, 1000)__	};tests,that,two,failover,regions,failover,at,the,same,time,they,will,not,influence,each,orther,throws,exception;test,public,void,test,mutil,region,failover,at,same,time,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,16,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,restart,pipelined,region,strategy,factory,collections,empty,list,collections,empty,list,scheduler,execution,graph,class,get,class,loader,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,fail,new,exception,new,fail,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev31,job,status,running,1000,ev12,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev11,job,status,running,1000
FailoverRegionTest -> @Test 	public void testMutilRegionFailoverAtSameTime() throws Exception;1508861310;Tests that two failover regions failover at the same time, they will not influence each orther_@throws Exception;@Test_	public void testMutilRegionFailoverAtSameTime() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				16)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(2)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				jobId,_				jobName,_				cfg,_				new SerializedValue<>(new ExecutionConfig()),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new RestartPipelinedRegionStrategy.Factory(),_				Collections.emptyList(),_				Collections.emptyList(),_				scheduler,_				ExecutionGraph.class.getClassLoader(),_				null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		ev31.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev31), JobStatus.RUNNING, 1000)___		ev12.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev11), JobStatus.RUNNING, 1000)__	};tests,that,two,failover,regions,failover,at,the,same,time,they,will,not,influence,each,orther,throws,exception;test,public,void,test,mutil,region,failover,at,same,time,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,16,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,restart,pipelined,region,strategy,factory,collections,empty,list,collections,empty,list,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,fail,new,exception,new,fail,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev31,job,status,running,1000,ev12,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev11,job,status,running,1000
FailoverRegionTest -> @Test 	public void testMutilRegionFailoverAtSameTime() throws Exception;1508861311;Tests that two failover regions failover at the same time, they will not influence each orther_@throws Exception;@Test_	public void testMutilRegionFailoverAtSameTime() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				16)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(2)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				new DummyJobInformation(_					jobId,_					jobName),_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new RestartPipelinedRegionStrategy.Factory(),_				scheduler,_				ExecutionGraph.class.getClassLoader(),_				null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		ev31.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev31), JobStatus.RUNNING, 1000)___		ev12.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev11), JobStatus.RUNNING, 1000)__	};tests,that,two,failover,regions,failover,at,the,same,time,they,will,not,influence,each,orther,throws,exception;test,public,void,test,mutil,region,failover,at,same,time,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,16,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,fail,new,exception,new,fail,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev31,job,status,running,1000,ev12,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev11,job,status,running,1000
FailoverRegionTest -> @Test 	public void testMutilRegionFailoverAtSameTime() throws Exception;1508861311;Tests that two failover regions failover at the same time, they will not influence each orther_@throws Exception;@Test_	public void testMutilRegionFailoverAtSameTime() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				16)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")___		v1.setParallelism(2)__		v2.setParallelism(2)__		v3.setParallelism(2)__		v4.setParallelism(2)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		List<JobVertex> ordered = Arrays.asList(v1, v2, v3, v4)___		ExecutionGraph eg = new ExecutionGraph(_				new DummyJobInformation(_					jobId,_					jobName),_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new RestartPipelinedRegionStrategy.Factory(),_				scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v1.getID()).getTaskVertices()[0]__		ExecutionVertex ev12 = eg.getJobVertex(v1.getID()).getTaskVertices()[1]__		ExecutionVertex ev31 = eg.getJobVertex(v3.getID()).getTaskVertices()[0]__		ExecutionVertex ev32 = eg.getJobVertex(v3.getID()).getTaskVertices()[1]__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(ev31).getState())___		ev11.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		ev31.getCurrentExecutionAttempt().fail(new Exception("new fail"))__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev31).getState())___		ev32.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev31), JobStatus.RUNNING, 1000)___		ev12.getCurrentExecutionAttempt().cancelingComplete()__		waitUntilFailoverRegionState(strategy.getFailoverRegion(ev11), JobStatus.RUNNING, 1000)__	};tests,that,two,failover,regions,failover,at,the,same,time,they,will,not,influence,each,orther,throws,exception;test,public,void,test,mutil,region,failover,at,same,time,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,16,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,arrays,as,list,v1,v2,v3,v4,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,restart,pipelined,region,strategy,factory,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v1,get,id,get,task,vertices,0,execution,vertex,ev12,eg,get,job,vertex,v1,get,id,get,task,vertices,1,execution,vertex,ev31,eg,get,job,vertex,v3,get,id,get,task,vertices,0,execution,vertex,ev32,eg,get,job,vertex,v3,get,id,get,task,vertices,1,assert,equals,job,status,running,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,running,strategy,get,failover,region,ev31,get,state,ev11,get,current,execution,attempt,fail,new,exception,new,fail,ev31,get,current,execution,attempt,fail,new,exception,new,fail,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev31,get,state,ev32,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev31,job,status,running,1000,ev12,get,current,execution,attempt,canceling,complete,wait,until,failover,region,state,strategy,get,failover,region,ev11,job,status,running,1000
FailoverRegionTest -> @Ignore 	@Test 	public void testSucceedingNoticePreceding() throws Exception;1494099604;Tests that if a task reports the result of its preceding task is failed,_its preceding task will be considered as failed, and start to failover_TODO: as the report part is not finished yet, this case is ignored temporarily_@throws Exception;@Ignore_	@Test_	public void testSucceedingNoticePreceding() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				14)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")___		v1.setParallelism(1)__		v2.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___		List<JobVertex> ordered = new ArrayList<>(Arrays.asList(v1, v2))___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				jobId,_				jobName,_				cfg,_				new SerializedValue<>(new ExecutionConfig()),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new FailoverPipelinedRegionWithDirectExecutor(),_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				scheduler,_				ExecutionGraph.class.getClassLoader())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ev21.getCurrentExecutionAttempt().fail(new Exception("Fail with v1"))___		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev21).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__	};tests,that,if,a,task,reports,the,result,of,its,preceding,task,is,failed,its,preceding,task,will,be,considered,as,failed,and,start,to,failover,todo,as,the,report,part,is,not,finished,yet,this,case,is,ignored,temporarily,throws,exception;ignore,test,public,void,test,succeeding,notice,preceding,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,14,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,v1,set,parallelism,1,v2,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,arrays,as,list,v1,v2,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,collections,blob,key,empty,list,collections,url,empty,list,scheduler,execution,graph,class,get,class,loader,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,ev21,get,current,execution,attempt,fail,new,exception,fail,with,v1,assert,equals,job,status,cancelling,strategy,get,failover,region,ev21,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state
FailoverRegionTest -> @Ignore 	@Test 	public void testSucceedingNoticePreceding() throws Exception;1507212387;Tests that if a task reports the result of its preceding task is failed,_its preceding task will be considered as failed, and start to failover_TODO: as the report part is not finished yet, this case is ignored temporarily_@throws Exception;@Ignore_	@Test_	public void testSucceedingNoticePreceding() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				14)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")___		v1.setParallelism(1)__		v2.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___		List<JobVertex> ordered = new ArrayList<>(Arrays.asList(v1, v2))___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				jobId,_				jobName,_				cfg,_				new SerializedValue<>(new ExecutionConfig()),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new FailoverPipelinedRegionWithDirectExecutor(),_				Collections.emptyList(),_				Collections.emptyList(),_				scheduler,_				ExecutionGraph.class.getClassLoader())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ev21.getCurrentExecutionAttempt().fail(new Exception("Fail with v1"))___		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev21).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__	};tests,that,if,a,task,reports,the,result,of,its,preceding,task,is,failed,its,preceding,task,will,be,considered,as,failed,and,start,to,failover,todo,as,the,report,part,is,not,finished,yet,this,case,is,ignored,temporarily,throws,exception;ignore,test,public,void,test,succeeding,notice,preceding,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,14,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,v1,set,parallelism,1,v2,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,arrays,as,list,v1,v2,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,collections,empty,list,collections,empty,list,scheduler,execution,graph,class,get,class,loader,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,ev21,get,current,execution,attempt,fail,new,exception,fail,with,v1,assert,equals,job,status,cancelling,strategy,get,failover,region,ev21,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state
FailoverRegionTest -> @Ignore 	@Test 	public void testSucceedingNoticePreceding() throws Exception;1508861310;Tests that if a task reports the result of its preceding task is failed,_its preceding task will be considered as failed, and start to failover_TODO: as the report part is not finished yet, this case is ignored temporarily_@throws Exception;@Ignore_	@Test_	public void testSucceedingNoticePreceding() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				14)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")___		v1.setParallelism(1)__		v2.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___		List<JobVertex> ordered = new ArrayList<>(Arrays.asList(v1, v2))___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				jobId,_				jobName,_				cfg,_				new SerializedValue<>(new ExecutionConfig()),_				AkkaUtils.getDefaultTimeout(),_				new InfiniteDelayRestartStrategy(10),_				new FailoverPipelinedRegionWithDirectExecutor(),_				Collections.emptyList(),_				Collections.emptyList(),_				scheduler,_				ExecutionGraph.class.getClassLoader(),_				null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ev21.getCurrentExecutionAttempt().fail(new Exception("Fail with v1"))___		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev21).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__	};tests,that,if,a,task,reports,the,result,of,its,preceding,task,is,failed,its,preceding,task,will,be,considered,as,failed,and,start,to,failover,todo,as,the,report,part,is,not,finished,yet,this,case,is,ignored,temporarily,throws,exception;ignore,test,public,void,test,succeeding,notice,preceding,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,14,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,v1,set,parallelism,1,v2,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,arrays,as,list,v1,v2,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,collections,empty,list,collections,empty,list,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,ev21,get,current,execution,attempt,fail,new,exception,fail,with,v1,assert,equals,job,status,cancelling,strategy,get,failover,region,ev21,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state
FailoverRegionTest -> @Ignore 	@Test 	public void testSucceedingNoticePreceding() throws Exception;1508861311;Tests that if a task reports the result of its preceding task is failed,_its preceding task will be considered as failed, and start to failover_TODO: as the report part is not finished yet, this case is ignored temporarily_@throws Exception;@Ignore_	@Test_	public void testSucceedingNoticePreceding() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				14)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")___		v1.setParallelism(1)__		v2.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___		List<JobVertex> ordered = new ArrayList<>(Arrays.asList(v1, v2))___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			scheduler,_			ExecutionGraph.class.getClassLoader(),_			null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ev21.getCurrentExecutionAttempt().fail(new Exception("Fail with v1"))___		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev21).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__	};tests,that,if,a,task,reports,the,result,of,its,preceding,task,is,failed,its,preceding,task,will,be,considered,as,failed,and,start,to,failover,todo,as,the,report,part,is,not,finished,yet,this,case,is,ignored,temporarily,throws,exception;ignore,test,public,void,test,succeeding,notice,preceding,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,14,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,v1,set,parallelism,1,v2,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,arrays,as,list,v1,v2,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,ev21,get,current,execution,attempt,fail,new,exception,fail,with,v1,assert,equals,job,status,cancelling,strategy,get,failover,region,ev21,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state
FailoverRegionTest -> @Ignore 	@Test 	public void testSucceedingNoticePreceding() throws Exception;1508861311;Tests that if a task reports the result of its preceding task is failed,_its preceding task will be considered as failed, and start to failover_TODO: as the report part is not finished yet, this case is ignored temporarily_@throws Exception;@Ignore_	@Test_	public void testSucceedingNoticePreceding() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				14)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")___		v1.setParallelism(1)__		v2.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___		List<JobVertex> ordered = new ArrayList<>(Arrays.asList(v1, v2))___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ev21.getCurrentExecutionAttempt().fail(new Exception("Fail with v1"))___		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev21).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__	};tests,that,if,a,task,reports,the,result,of,its,preceding,task,is,failed,its,preceding,task,will,be,considered,as,failed,and,start,to,failover,todo,as,the,report,part,is,not,finished,yet,this,case,is,ignored,temporarily,throws,exception;ignore,test,public,void,test,succeeding,notice,preceding,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,14,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,v1,set,parallelism,1,v2,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,arrays,as,list,v1,v2,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,ev21,get,current,execution,attempt,fail,new,exception,fail,with,v1,assert,equals,job,status,cancelling,strategy,get,failover,region,ev21,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state
FailoverRegionTest -> @Ignore 	@Test 	public void testSucceedingNoticePreceding() throws Exception;1509638685;Tests that if a task reports the result of its preceding task is failed,_its preceding task will be considered as failed, and start to failover_TODO: as the report part is not finished yet, this case is ignored temporarily_@throws Exception;@Ignore_	@Test_	public void testSucceedingNoticePreceding() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				14)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")___		v1.setParallelism(1)__		v2.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___		List<JobVertex> ordered = new ArrayList<>(Arrays.asList(v1, v2))___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ev21.getCurrentExecutionAttempt().fail(new Exception("Fail with v1"))___		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev21).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__	};tests,that,if,a,task,reports,the,result,of,its,preceding,task,is,failed,its,preceding,task,will,be,considered,as,failed,and,start,to,failover,todo,as,the,report,part,is,not,finished,yet,this,case,is,ignored,temporarily,throws,exception;ignore,test,public,void,test,succeeding,notice,preceding,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,14,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,v1,set,parallelism,1,v2,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,arrays,as,list,v1,v2,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,ev21,get,current,execution,attempt,fail,new,exception,fail,with,v1,assert,equals,job,status,cancelling,strategy,get,failover,region,ev21,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state
FailoverRegionTest -> @Ignore 	@Test 	public void testSucceedingNoticePreceding() throws Exception;1509638685;Tests that if a task reports the result of its preceding task is failed,_its preceding task will be considered as failed, and start to failover_TODO: as the report part is not finished yet, this case is ignored temporarily_@throws Exception;@Ignore_	@Test_	public void testSucceedingNoticePreceding() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				14)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")___		v1.setParallelism(1)__		v2.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___		List<JobVertex> ordered = new ArrayList<>(Arrays.asList(v1, v2))___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ev21.getCurrentExecutionAttempt().fail(new Exception("Fail with v1"))___		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev21).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__	};tests,that,if,a,task,reports,the,result,of,its,preceding,task,is,failed,its,preceding,task,will,be,considered,as,failed,and,start,to,failover,todo,as,the,report,part,is,not,finished,yet,this,case,is,ignored,temporarily,throws,exception;ignore,test,public,void,test,succeeding,notice,preceding,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,14,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,v1,set,parallelism,1,v2,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,arrays,as,list,v1,v2,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,ev21,get,current,execution,attempt,fail,new,exception,fail,with,v1,assert,equals,job,status,cancelling,strategy,get,failover,region,ev21,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state
FailoverRegionTest -> @Ignore 	@Test 	public void testSucceedingNoticePreceding() throws Exception;1513261599;Tests that if a task reports the result of its preceding task is failed,_its preceding task will be considered as failed, and start to failover_TODO: as the report part is not finished yet, this case is ignored temporarily_@throws Exception;@Ignore_	@Test_	public void testSucceedingNoticePreceding() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				14)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")___		v1.setParallelism(1)__		v2.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___		List<JobVertex> ordered = new ArrayList<>(Arrays.asList(v1, v2))___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ev21.getCurrentExecutionAttempt().fail(new Exception("Fail with v1"))___		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev21).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__	};tests,that,if,a,task,reports,the,result,of,its,preceding,task,is,failed,its,preceding,task,will,be,considered,as,failed,and,start,to,failover,todo,as,the,report,part,is,not,finished,yet,this,case,is,ignored,temporarily,throws,exception;ignore,test,public,void,test,succeeding,notice,preceding,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,14,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,v1,set,parallelism,1,v2,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,arrays,as,list,v1,v2,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,ev21,get,current,execution,attempt,fail,new,exception,fail,with,v1,assert,equals,job,status,cancelling,strategy,get,failover,region,ev21,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state
FailoverRegionTest -> @Ignore 	@Test 	public void testSucceedingNoticePreceding() throws Exception;1540920690;Tests that if a task reports the result of its preceding task is failed,_its preceding task will be considered as failed, and start to failover_TODO: as the report part is not finished yet, this case is ignored temporarily_@throws Exception;@Ignore_	@Test_	public void testSucceedingNoticePreceding() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				14)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")___		v1.setParallelism(1)__		v2.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___		List<JobVertex> ordered = new ArrayList<>(Arrays.asList(v1, v2))___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ev21.getCurrentExecutionAttempt().fail(new Exception("Fail with v1"))___		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev21).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__	};tests,that,if,a,task,reports,the,result,of,its,preceding,task,is,failed,its,preceding,task,will,be,considered,as,failed,and,start,to,failover,todo,as,the,report,part,is,not,finished,yet,this,case,is,ignored,temporarily,throws,exception;ignore,test,public,void,test,succeeding,notice,preceding,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,14,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,v1,set,parallelism,1,v2,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,arrays,as,list,v1,v2,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,ev21,get,current,execution,attempt,fail,new,exception,fail,with,v1,assert,equals,job,status,cancelling,strategy,get,failover,region,ev21,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state
FailoverRegionTest -> @Ignore 	@Test 	public void testSucceedingNoticePreceding() throws Exception;1549365080;Tests that if a task reports the result of its preceding task is failed,_its preceding task will be considered as failed, and start to failover_TODO: as the report part is not finished yet, this case is ignored temporarily_@throws Exception;@Ignore_	@Test_	public void testSucceedingNoticePreceding() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				14)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")___		v1.setParallelism(1)__		v2.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___		List<JobVertex> ordered = new ArrayList<>(Arrays.asList(v1, v2))___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ev21.getCurrentExecutionAttempt().failAsync(new Exception("Fail with v1"))___		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev21).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__	};tests,that,if,a,task,reports,the,result,of,its,preceding,task,is,failed,its,preceding,task,will,be,considered,as,failed,and,start,to,failover,todo,as,the,report,part,is,not,finished,yet,this,case,is,ignored,temporarily,throws,exception;ignore,test,public,void,test,succeeding,notice,preceding,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,14,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,v1,set,parallelism,1,v2,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,arrays,as,list,v1,v2,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,ev21,get,current,execution,attempt,fail,async,new,exception,fail,with,v1,assert,equals,job,status,cancelling,strategy,get,failover,region,ev21,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state
FailoverRegionTest -> @Ignore 	@Test 	public void testSucceedingNoticePreceding() throws Exception;1550220073;Tests that if a task reports the result of its preceding task is failed,_its preceding task will be considered as failed, and start to failover_TODO: as the report part is not finished yet, this case is ignored temporarily_@throws Exception;@Ignore_	@Test_	public void testSucceedingNoticePreceding() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				14)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")___		v1.setParallelism(1)__		v2.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___		List<JobVertex> ordered = new ArrayList<>(Arrays.asList(v1, v2))___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ev21.getCurrentExecutionAttempt().fail(new Exception("Fail with v1"))___		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev21).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__	};tests,that,if,a,task,reports,the,result,of,its,preceding,task,is,failed,its,preceding,task,will,be,considered,as,failed,and,start,to,failover,todo,as,the,report,part,is,not,finished,yet,this,case,is,ignored,temporarily,throws,exception;ignore,test,public,void,test,succeeding,notice,preceding,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,14,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,v1,set,parallelism,1,v2,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,arrays,as,list,v1,v2,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,ev21,get,current,execution,attempt,fail,new,exception,fail,with,v1,assert,equals,job,status,cancelling,strategy,get,failover,region,ev21,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state
FailoverRegionTest -> @Ignore 	@Test 	public void testSucceedingNoticePreceding() throws Exception;1550683188;Tests that if a task reports the result of its preceding task is failed,_its preceding task will be considered as failed, and start to failover_TODO: as the report part is not finished yet, this case is ignored temporarily_@throws Exception;@Ignore_	@Test_	public void testSucceedingNoticePreceding() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new ActorTaskManagerGateway(_						new SimpleActorGateway(TestingUtils.directExecutionContext())),_				14)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")___		v1.setParallelism(1)__		v2.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___		List<JobVertex> ordered = new ArrayList<>(Arrays.asList(v1, v2))___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			scheduler)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ev21.getCurrentExecutionAttempt().fail(new Exception("Fail with v1"))___		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev21).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__	};tests,that,if,a,task,reports,the,result,of,its,preceding,task,is,failed,its,preceding,task,will,be,considered,as,failed,and,start,to,failover,todo,as,the,report,part,is,not,finished,yet,this,case,is,ignored,temporarily,throws,exception;ignore,test,public,void,test,succeeding,notice,preceding,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,14,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,v1,set,parallelism,1,v2,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,arrays,as,list,v1,v2,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,scheduler,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,ev21,get,current,execution,attempt,fail,new,exception,fail,with,v1,assert,equals,job,status,cancelling,strategy,get,failover,region,ev21,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state
FailoverRegionTest -> @Ignore 	@Test 	public void testSucceedingNoticePreceding() throws Exception;1550824704;Tests that if a task reports the result of its preceding task is failed,_its preceding task will be considered as failed, and start to failover_TODO: as the report part is not finished yet, this case is ignored temporarily_@throws Exception;@Ignore_	@Test_	public void testSucceedingNoticePreceding() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jobId, 14)___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")___		v1.setParallelism(1)__		v2.setParallelism(1)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___		List<JobVertex> ordered = new ArrayList<>(Arrays.asList(v1, v2))___		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new InfiniteDelayRestartStrategy(10),_			new FailoverPipelinedRegionWithDirectExecutor(),_			slotProvider)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}_		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.scheduleForExecution()__		RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()___		ExecutionVertex ev11 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ExecutionVertex ev21 = eg.getJobVertex(v2.getID()).getTaskVertices()[0]__		ev21.getCurrentExecutionAttempt().fail(new Exception("Fail with v1"))___		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev21).getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(ev11).getState())__	};tests,that,if,a,task,reports,the,result,of,its,preceding,task,is,failed,its,preceding,task,will,be,considered,as,failed,and,start,to,failover,todo,as,the,report,part,is,not,finished,yet,this,case,is,ignored,temporarily,throws,exception;ignore,test,public,void,test,succeeding,notice,preceding,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,simple,slot,provider,slot,provider,new,simple,slot,provider,job,id,14,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,v1,set,parallelism,1,v2,set,parallelism,1,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,arrays,as,list,v1,v2,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,infinite,delay,restart,strategy,10,new,failover,pipelined,region,with,direct,executor,slot,provider,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,vertex,ev11,eg,get,job,vertex,v2,get,id,get,task,vertices,0,execution,vertex,ev21,eg,get,job,vertex,v2,get,id,get,task,vertices,0,ev21,get,current,execution,attempt,fail,new,exception,fail,with,v1,assert,equals,job,status,cancelling,strategy,get,failover,region,ev21,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,ev11,get,state
