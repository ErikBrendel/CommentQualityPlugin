# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1487548884;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final ExecutionGraph eg = createExecutionGraph(jobGraph)__		TerminalJobStatusListener testListener = new TerminalJobStatusListener()__		eg.registerJobStatusListener(testListener)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SlotOwner slotOwner = mock(SlotOwner.class)___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] sourceFutures = new FlinkCompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] targetFutures = new FlinkCompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new FlinkCompletableFuture<>()__			targetFutures[i] = new FlinkCompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i + 1].complete(targetSlots[i + 1])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution(slotProvider)___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		testListener.waitForTerminalState(2000)___		_		verify(slotOwner, new Timeout(2000, times(6))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i + 1].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,execution,graph,eg,create,execution,graph,job,graph,terminal,job,status,listener,test,listener,new,terminal,job,status,listener,eg,register,job,status,listener,test,listener,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,slot,owner,slot,owner,mock,slot,owner,class,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,source,futures,new,flink,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,target,futures,new,flink,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,flink,completable,future,target,futures,i,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,1,complete,target,slots,i,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,provider,source,futures,1,complete,exceptionally,new,test,runtime,exception,test,listener,wait,for,terminal,state,2000,verify,slot,owner,new,timeout,2000,times,6,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,1,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1488453790;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SlotOwner slotOwner = mock(SlotOwner.class)___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] sourceFutures = new FlinkCompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] targetFutures = new FlinkCompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new FlinkCompletableFuture<>()__			targetFutures[i] = new FlinkCompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		TerminalJobStatusListener testListener = new TerminalJobStatusListener()__		eg.registerJobStatusListener(testListener)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i + 1].complete(targetSlots[i + 1])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		testListener.waitForTerminalState(2000)___		_		verify(slotOwner, new Timeout(2000, times(6))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i + 1].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,slot,owner,slot,owner,mock,slot,owner,class,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,source,futures,new,flink,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,target,futures,new,flink,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,flink,completable,future,target,futures,i,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,terminal,job,status,listener,test,listener,new,terminal,job,status,listener,eg,register,job,status,listener,test,listener,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,1,complete,target,slots,i,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,test,listener,wait,for,terminal,state,2000,verify,slot,owner,new,timeout,2000,times,6,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,1,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1493831843;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SlotOwner slotOwner = mock(SlotOwner.class)___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] sourceFutures = new FlinkCompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] targetFutures = new FlinkCompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new FlinkCompletableFuture<>()__			targetFutures[i] = new FlinkCompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i + 1].complete(targetSlots[i + 1])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(6))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i + 1].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,slot,owner,slot,owner,mock,slot,owner,class,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,source,futures,new,flink,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,target,futures,new,flink,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,flink,completable,future,target,futures,i,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,1,complete,target,slots,i,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,6,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,1,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1497344185;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SlotOwner slotOwner = mock(SlotOwner.class)___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] sourceFutures = new FlinkCompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] targetFutures = new FlinkCompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new FlinkCompletableFuture<>()__			targetFutures[i] = new FlinkCompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i + 1].complete(targetSlots[i + 1])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(6))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i + 1].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,slot,owner,slot,owner,mock,slot,owner,class,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,source,futures,new,flink,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,target,futures,new,flink,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,flink,completable,future,target,futures,i,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,1,complete,target,slots,i,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,6,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,1,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1501665499;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SlotOwner slotOwner = mock(SlotOwner.class)___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i + 1].complete(targetSlots[i + 1])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(6))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i + 1].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,slot,owner,slot,owner,mock,slot,owner,class,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,1,complete,target,slots,i,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,6,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,1,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1501760738;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SlotOwner slotOwner = mock(SlotOwner.class)___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i + 1].complete(targetSlots[i + 1])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(6))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i + 1].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,slot,owner,slot,owner,mock,slot,owner,class,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,1,complete,target,slots,i,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,6,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,1,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1508861310;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SlotOwner slotOwner = mock(SlotOwner.class)___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i + 1].complete(targetSlots[i + 1])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(6))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i + 1].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,slot,owner,slot,owner,mock,slot,owner,class,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,1,complete,target,slots,i,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,6,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,1,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1508861311;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SlotOwner slotOwner = mock(SlotOwner.class)___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i + 1].complete(targetSlots[i + 1])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(6))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i + 1].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,slot,owner,slot,owner,mock,slot,owner,class,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,1,complete,target,slots,i,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,6,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,1,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1509638684;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SlotOwner slotOwner = mock(SlotOwner.class)___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i + 1].complete(targetSlots[i + 1])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(6))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i + 1].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,slot,owner,slot,owner,mock,slot,owner,class,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,1,complete,target,slots,i,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,6,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,1,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1509638685;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SlotOwner slotOwner = mock(SlotOwner.class)___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(6))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,slot,owner,slot,owner,mock,slot,owner,class,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,6,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1513201052;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SlotOwner slotOwner = mock(SlotOwner.class)___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(6))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,slot,owner,slot,owner,mock,slot,owner,class,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,6,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1513201070;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(parallelism)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(Slot slot) -> returnedSlots.offer(slot.getAllocatedSlot().getSlotAllocationId()))___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism_ i++) {_			returnedSlots.poll(2000L, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,parallelism,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,slot,slot,returned,slots,offer,slot,get,allocated,slot,get,slot,allocation,id,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,i,returned,slots,poll,2000l,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1513258344;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(parallelism)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(Slot slot) -> returnedSlots.offer(slot.getSlotContext().getAllocationId()))___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism_ i++) {_			returnedSlots.poll(2000L, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,parallelism,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,slot,slot,returned,slots,offer,slot,get,slot,context,get,allocation,id,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,i,returned,slots,poll,2000l,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1513258345;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(parallelism)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism_ i++) {_			returnedSlots.poll(2000L, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,parallelism,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,i,returned,slots,poll,2000l,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1513261599;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(parallelism)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism_ i++) {_			returnedSlots.poll(2000L, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,parallelism,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,i,returned,slots,poll,2000l,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1518680774;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(parallelism)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism_ i++) {_			returnedSlots.poll(2000L, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,parallelism,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,i,returned,slots,poll,2000l,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1519316529;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(parallelism)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism_ i++) {_			returnedSlots.poll(2000L, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,parallelism,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,i,returned,slots,poll,2000l,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1522249273;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(parallelism)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism_ i++) {_			returnedSlots.poll(2000L, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,parallelism,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,i,returned,slots,poll,2000l,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1532383539;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(parallelism)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism_ i++) {_			returnedSlots.poll(2000L, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,parallelism,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,i,returned,slots,poll,2000l,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1532383539;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(parallelism)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism_ i++) {_			returnedSlots.poll(2000L, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,parallelism,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,i,returned,slots,poll,2000l,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1549365080;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(parallelism)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism_ i++) {_			returnedSlots.poll(2000L, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,parallelism,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,i,returned,slots,poll,2000l,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1550683188;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(parallelism)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism_ i++) {_			returnedSlots.poll(2000L, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,parallelism,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,i,returned,slots,poll,2000l,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1550683188;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final InteractionsCountingTaskManagerGateway taskManager = createTaskManager()__		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(parallelism)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism_ i++) {_			returnedSlots.poll(2000L, TimeUnit.MILLISECONDS)__		}__		_		assertThat(taskManager.getSubmitTaskCount(), is(0))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,interactions,counting,task,manager,gateway,task,manager,create,task,manager,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,parallelism,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,i,returned,slots,poll,2000l,time,unit,milliseconds,assert,that,task,manager,get,submit,task,count,is,0,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testOneSlotFailureAbortsDeploy() throws Exception;1550855836;This test verifies that if one slot future fails, the deployment will be aborted.;@Test_	public void testOneSlotFailureAbortsDeploy() throws Exception {__		_		__		final int parallelism = 6___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		__		final InteractionsCountingTaskManagerGateway taskManager = createTaskManager()__		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(parallelism)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceSlots[i] = createSlot(taskManager, jobId, slotOwner)__			targetSlots[i] = createSlot(taskManager, jobId, slotOwner)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__			targetFutures[i].complete(targetSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		sourceFutures[1].completeExceptionally(new TestRuntimeException())___		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism_ i++) {_			returnedSlots.poll(2000L, TimeUnit.MILLISECONDS)__		}__		_		assertThat(taskManager.getSubmitTaskCount(), is(0))___		_		for (int i = 0_ i < parallelism_ i += 2) {_			assertTrue(sourceSlots[i].isCanceled())__			assertTrue(targetSlots[i].isCanceled())__		}_	};this,test,verifies,that,if,one,slot,future,fails,the,deployment,will,be,aborted;test,public,void,test,one,slot,failure,aborts,deploy,throws,exception,final,int,parallelism,6,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,interactions,counting,task,manager,gateway,task,manager,create,task,manager,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,parallelism,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,slots,i,create,slot,task,manager,job,id,slot,owner,target,slots,i,create,slot,task,manager,job,id,slot,owner,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,target,futures,i,complete,target,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,source,futures,1,complete,exceptionally,new,test,runtime,exception,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,i,returned,slots,poll,2000l,time,unit,milliseconds,assert,that,task,manager,get,submit,task,count,is,0,for,int,i,0,i,parallelism,i,2,assert,true,source,slots,i,is,canceled,assert,true,target,slots,i,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception;1487548884;Tests that the {@link ExecutionGraph#scheduleForExecution(SlotProvider)} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception {__		_		__		final int parallelism = 3___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final ExecutionGraph eg = createExecutionGraph(jobGraph)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_				createSlot(taskManager, jobId, recycler),_				createSlot(taskManager, jobId, recycler),_				createSlot(taskManager, jobId, recycler),_				createSlot(taskManager, jobId, recycler),_				createSlot(taskManager, jobId, recycler)))____		_		final SlotProvider slots = mock(SlotProvider.class)___		when(slots.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_				new Answer<Future<SimpleSlot>>() {__					@Override_					public Future<SimpleSlot> answer(InvocationOnMock invocation) {_						if (availableSlots.isEmpty()) {_							throw new TestRuntimeException()__						} else {_							return FlinkCompletableFuture.completed(availableSlots.remove(0))__						}_					}_				})___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			eg.setScheduleMode(ScheduleMode.EAGER)__			eg.scheduleForExecution(slots)__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,graph,schedule,for,execution,slot,provider,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,graph,schedule,releases,resources,on,exception,throws,exception,final,int,parallelism,3,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,execution,graph,eg,create,execution,graph,job,graph,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,final,slot,provider,slots,mock,slot,provider,class,when,slots,allocate,slot,any,scheduled,unit,class,any,boolean,then,new,answer,future,simple,slot,override,public,future,simple,slot,answer,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,flink,completable,future,completed,available,slots,remove,0,final,int,num,slots,to,expect,back,available,slots,size,try,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,slots,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception;1488453790;Tests that the {@link ExecutionGraph#scheduleForExecution()} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception {__		_		__		final int parallelism = 3___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))____		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			new Answer<Future<SimpleSlot>>() {__				@Override_				public Future<SimpleSlot> answer(InvocationOnMock invocation) {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return FlinkCompletableFuture.completed(availableSlots.remove(0))__					}_				}_			})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			eg.setScheduleMode(ScheduleMode.EAGER)__			eg.scheduleForExecution()__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,graph,schedule,for,execution,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,graph,schedule,releases,resources,on,exception,throws,exception,final,int,parallelism,3,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,final,slot,provider,slot,provider,mock,slot,provider,class,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,new,answer,future,simple,slot,override,public,future,simple,slot,answer,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,flink,completable,future,completed,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,int,num,slots,to,expect,back,available,slots,size,try,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception;1493831843;Tests that the {@link ExecutionGraph#scheduleForExecution()} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception {__		_		__		final int parallelism = 3___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))____		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			new Answer<Future<SimpleSlot>>() {__				@Override_				public Future<SimpleSlot> answer(InvocationOnMock invocation) {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return FlinkCompletableFuture.completed(availableSlots.remove(0))__					}_				}_			})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			eg.setScheduleMode(ScheduleMode.EAGER)__			eg.scheduleForExecution()__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,graph,schedule,for,execution,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,graph,schedule,releases,resources,on,exception,throws,exception,final,int,parallelism,3,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,final,slot,provider,slot,provider,mock,slot,provider,class,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,new,answer,future,simple,slot,override,public,future,simple,slot,answer,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,flink,completable,future,completed,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,int,num,slots,to,expect,back,available,slots,size,try,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception;1497344185;Tests that the {@link ExecutionGraph#scheduleForExecution()} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception {__		_		__		final int parallelism = 3___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))____		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			new Answer<Future<SimpleSlot>>() {__				@Override_				public Future<SimpleSlot> answer(InvocationOnMock invocation) {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return FlinkCompletableFuture.completed(availableSlots.remove(0))__					}_				}_			})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			eg.setScheduleMode(ScheduleMode.EAGER)__			eg.scheduleForExecution()__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,graph,schedule,for,execution,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,graph,schedule,releases,resources,on,exception,throws,exception,final,int,parallelism,3,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,final,slot,provider,slot,provider,mock,slot,provider,class,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,new,answer,future,simple,slot,override,public,future,simple,slot,answer,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,flink,completable,future,completed,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,int,num,slots,to,expect,back,available,slots,size,try,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception;1501665499;Tests that the {@link ExecutionGraph#scheduleForExecution()} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception {__		_		__		final int parallelism = 3___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))____		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			(InvocationOnMock invocation) -> {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return CompletableFuture.completedFuture(availableSlots.remove(0))__					}_				})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			eg.setScheduleMode(ScheduleMode.EAGER)__			eg.scheduleForExecution()__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,graph,schedule,for,execution,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,graph,schedule,releases,resources,on,exception,throws,exception,final,int,parallelism,3,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,final,slot,provider,slot,provider,mock,slot,provider,class,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,completable,future,completed,future,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,int,num,slots,to,expect,back,available,slots,size,try,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception;1501760738;Tests that the {@link ExecutionGraph#scheduleForExecution()} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception {__		_		__		final int parallelism = 3___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))____		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			(InvocationOnMock invocation) -> {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return CompletableFuture.completedFuture(availableSlots.remove(0))__					}_				})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			eg.setScheduleMode(ScheduleMode.EAGER)__			eg.scheduleForExecution()__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,graph,schedule,for,execution,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,graph,schedule,releases,resources,on,exception,throws,exception,final,int,parallelism,3,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,final,slot,provider,slot,provider,mock,slot,provider,class,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,completable,future,completed,future,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,int,num,slots,to,expect,back,available,slots,size,try,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception;1508861310;Tests that the {@link ExecutionGraph#scheduleForExecution()} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception {__		_		__		final int parallelism = 3___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))____		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			(InvocationOnMock invocation) -> {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return CompletableFuture.completedFuture(availableSlots.remove(0))__					}_				})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			eg.setScheduleMode(ScheduleMode.EAGER)__			eg.scheduleForExecution()__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,graph,schedule,for,execution,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,graph,schedule,releases,resources,on,exception,throws,exception,final,int,parallelism,3,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,final,slot,provider,slot,provider,mock,slot,provider,class,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,completable,future,completed,future,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,int,num,slots,to,expect,back,available,slots,size,try,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception;1508861311;Tests that the {@link ExecutionGraph#scheduleForExecution()} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionGraphScheduleReleasesResourcesOnException() throws Exception {__		_		__		final int parallelism = 3___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))____		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			(InvocationOnMock invocation) -> {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return CompletableFuture.completedFuture(availableSlots.remove(0))__					}_				})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			eg.setScheduleMode(ScheduleMode.EAGER)__			eg.scheduleForExecution()__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,graph,schedule,for,execution,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,graph,schedule,releases,resources,on,exception,throws,exception,final,int,parallelism,3,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,final,slot,provider,slot,provider,mock,slot,provider,class,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,completable,future,completed,future,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,int,num,slots,to,expect,back,available,slots,size,try,eg,set,schedule,mode,schedule,mode,eager,eg,schedule,for,execution,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1487548884;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final ExecutionGraph eg = createExecutionGraph(jobGraph)___		_		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		final FlinkCompletableFuture<SimpleSlot> sourceFuture = new FlinkCompletableFuture<>()__		final FlinkCompletableFuture<SimpleSlot> targetFuture = new FlinkCompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution(slotProvider)___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,execution,graph,eg,create,execution,graph,job,graph,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,final,flink,completable,future,simple,slot,source,future,new,flink,completable,future,final,flink,completable,future,simple,slot,target,future,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,provider,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1488453790;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final FlinkCompletableFuture<SimpleSlot> sourceFuture = new FlinkCompletableFuture<>()__		final FlinkCompletableFuture<SimpleSlot> targetFuture = new FlinkCompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,flink,completable,future,simple,slot,source,future,new,flink,completable,future,final,flink,completable,future,simple,slot,target,future,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1493831843;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final FlinkCompletableFuture<SimpleSlot> sourceFuture = new FlinkCompletableFuture<>()__		final FlinkCompletableFuture<SimpleSlot> targetFuture = new FlinkCompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,flink,completable,future,simple,slot,source,future,new,flink,completable,future,final,flink,completable,future,simple,slot,target,future,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1497344185;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final FlinkCompletableFuture<SimpleSlot> sourceFuture = new FlinkCompletableFuture<>()__		final FlinkCompletableFuture<SimpleSlot> targetFuture = new FlinkCompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,flink,completable,future,simple,slot,source,future,new,flink,completable,future,final,flink,completable,future,simple,slot,target,future,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1501665499;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<SimpleSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<SimpleSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,simple,slot,source,future,new,completable,future,final,completable,future,simple,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1501760738;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<SimpleSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<SimpleSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,simple,slot,source,future,new,completable,future,final,completable,future,simple,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1508861310;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<SimpleSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<SimpleSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,simple,slot,source,future,new,completable,future,final,completable,future,simple,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1508861311;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<SimpleSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<SimpleSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,simple,slot,source,future,new,completable,future,final,completable,future,simple,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1509638684;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<SimpleSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<SimpleSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,simple,slot,source,future,new,completable,future,final,completable,future,simple,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1509638685;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<SimpleSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<SimpleSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,simple,slot,source,future,new,completable,future,final,completable,future,simple,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1513201052;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1513201070;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1513258344;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1513258345;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1513261599;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1518680774;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1519316529;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1522249273;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1532383539;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1532383539;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1549365080;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1550683188;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		__		final TaskManagerGateway gatewaySource = createTaskManager()__		final TaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		verify(gatewayTarget, new Timeout(50, times(0))).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		verify(gatewaySource, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		verify(gatewayTarget, timeout(1000)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,final,task,manager,gateway,gateway,source,create,task,manager,final,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,verify,gateway,target,new,timeout,50,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,verify,gateway,source,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,verify,gateway,target,timeout,1000,submit,task,any,task,deployment,descriptor,class,any,time,class,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1550683188;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		__		final InteractionsCountingTaskManagerGateway gatewaySource = createTaskManager()__		final InteractionsCountingTaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		assertThat(gatewayTarget.getSubmitTaskCount(), is(0))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		assertThat(gatewaySource.getSubmitTaskCount(), is(1))__		assertThat(gatewayTarget.getSubmitTaskCount(), is(1))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,final,interactions,counting,task,manager,gateway,gateway,source,create,task,manager,final,interactions,counting,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,assert,that,gateway,target,get,submit,task,count,is,0,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,assert,that,gateway,source,get,submit,task,count,is,1,assert,that,gateway,target,get,submit,task,count,is,1,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testScheduleSourceBeforeTarget() throws Exception;1550855836;Tests that with scheduling futures and pipelined deployment, the target vertex will_not deploy its task before the source vertex does.;@Test_	public void testScheduleSourceBeforeTarget() throws Exception {__		_		__		final int parallelism = 1___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final CompletableFuture<LogicalSlot> sourceFuture = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> targetFuture = new CompletableFuture<>()___		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlot(sourceVertex.getID(), 0, sourceFuture)__		slotProvider.addSlot(targetVertex.getID(), 0, targetFuture)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		__		final InteractionsCountingTaskManagerGateway gatewaySource = createTaskManager()__		final InteractionsCountingTaskManagerGateway gatewayTarget = createTaskManager()___		final SimpleSlot sourceSlot = createSlot(gatewaySource, jobId)__		final SimpleSlot targetSlot = createSlot(gatewayTarget, jobId)___		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		assertEquals(JobStatus.RUNNING, eg.getState())___		_		_		targetFuture.complete(targetSlot)___		assertThat(gatewayTarget.getSubmitTaskCount(), is(0))__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		sourceFuture.complete(sourceSlot)___		_		assertThat(gatewaySource.getSubmitTaskCount(), is(1))__		assertThat(gatewayTarget.getSubmitTaskCount(), is(1))___		assertEquals(JobStatus.RUNNING, eg.getState())__	};tests,that,with,scheduling,futures,and,pipelined,deployment,the,target,vertex,will,not,deploy,its,task,before,the,source,vertex,does;test,public,void,test,schedule,source,before,target,throws,exception,final,int,parallelism,1,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,completable,future,logical,slot,source,future,new,completable,future,final,completable,future,logical,slot,target,future,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slot,source,vertex,get,id,0,source,future,slot,provider,add,slot,target,vertex,get,id,0,target,future,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,final,interactions,counting,task,manager,gateway,gateway,source,create,task,manager,final,interactions,counting,task,manager,gateway,gateway,target,create,task,manager,final,simple,slot,source,slot,create,slot,gateway,source,job,id,final,simple,slot,target,slot,create,slot,gateway,target,job,id,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,target,future,complete,target,slot,assert,that,gateway,target,get,submit,task,count,is,0,assert,equals,job,status,running,eg,get,state,source,future,complete,source,slot,assert,that,gateway,source,get,submit,task,count,is,1,assert,that,gateway,target,get,submit,task,count,is,1,assert,equals,job,status,running,eg,get,state
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception;1487548884;Tests that the {@link ExecutionJobVertex#allocateResourcesForAll(SlotProvider, boolean)} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception {_		final int parallelism = 8___		final JobVertex vertex = new JobVertex("vertex")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final ExecutionGraph eg = createExecutionGraph(jobGraph)__		final ExecutionJobVertex ejv = eg.getJobVertex(vertex.getID())___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_				createSlot(taskManager, jobId, recycler),_				createSlot(taskManager, jobId, recycler),_				createSlot(taskManager, jobId, recycler)))____		_		final SlotProvider slots = mock(SlotProvider.class)__		_		when(slots.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_				new Answer<Future<SimpleSlot>>() {__					@Override_					public Future<SimpleSlot> answer(InvocationOnMock invocation) {_						if (availableSlots.isEmpty()) {_							throw new TestRuntimeException()__						} else {_							return FlinkCompletableFuture.completed(availableSlots.remove(0))__						}_					}_				})___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			ejv.allocateResourcesForAll(slots, false)__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,job,vertex,allocate,resources,for,all,slot,provider,boolean,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,job,vertex,allocate,resources,releases,on,exception,throws,exception,final,int,parallelism,8,final,job,vertex,vertex,new,job,vertex,vertex,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,execution,graph,eg,create,execution,graph,job,graph,final,execution,job,vertex,ejv,eg,get,job,vertex,vertex,get,id,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,final,slot,provider,slots,mock,slot,provider,class,when,slots,allocate,slot,any,scheduled,unit,class,any,boolean,then,new,answer,future,simple,slot,override,public,future,simple,slot,answer,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,flink,completable,future,completed,available,slots,remove,0,final,int,num,slots,to,expect,back,available,slots,size,try,ejv,allocate,resources,for,all,slots,false,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception;1488453790;Tests that the {@link ExecutionJobVertex#allocateResourcesForAll(SlotProvider, boolean)} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception {_		final int parallelism = 8___		final JobVertex vertex = new JobVertex("vertex")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			new Answer<Future<SimpleSlot>>() {__				@Override_				public Future<SimpleSlot> answer(InvocationOnMock invocation) {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return FlinkCompletableFuture.completed(availableSlots.remove(0))__					}_				}_			})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		final ExecutionJobVertex ejv = eg.getJobVertex(vertex.getID())___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			ejv.allocateResourcesForAll(slotProvider, false)__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,job,vertex,allocate,resources,for,all,slot,provider,boolean,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,job,vertex,allocate,resources,releases,on,exception,throws,exception,final,int,parallelism,8,final,job,vertex,vertex,new,job,vertex,vertex,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,slot,provider,slot,provider,mock,slot,provider,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,new,answer,future,simple,slot,override,public,future,simple,slot,answer,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,flink,completable,future,completed,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,execution,job,vertex,ejv,eg,get,job,vertex,vertex,get,id,final,int,num,slots,to,expect,back,available,slots,size,try,ejv,allocate,resources,for,all,slot,provider,false,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception;1493831843;Tests that the {@link ExecutionJobVertex#allocateResourcesForAll(SlotProvider, boolean)} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception {_		final int parallelism = 8___		final JobVertex vertex = new JobVertex("vertex")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			new Answer<Future<SimpleSlot>>() {__				@Override_				public Future<SimpleSlot> answer(InvocationOnMock invocation) {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return FlinkCompletableFuture.completed(availableSlots.remove(0))__					}_				}_			})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		final ExecutionJobVertex ejv = eg.getJobVertex(vertex.getID())___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			ejv.allocateResourcesForAll(slotProvider, false)__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,job,vertex,allocate,resources,for,all,slot,provider,boolean,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,job,vertex,allocate,resources,releases,on,exception,throws,exception,final,int,parallelism,8,final,job,vertex,vertex,new,job,vertex,vertex,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,slot,provider,slot,provider,mock,slot,provider,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,new,answer,future,simple,slot,override,public,future,simple,slot,answer,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,flink,completable,future,completed,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,execution,job,vertex,ejv,eg,get,job,vertex,vertex,get,id,final,int,num,slots,to,expect,back,available,slots,size,try,ejv,allocate,resources,for,all,slot,provider,false,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception;1497344185;Tests that the {@link ExecutionJobVertex#allocateResourcesForAll(SlotProvider, boolean)} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception {_		final int parallelism = 8___		final JobVertex vertex = new JobVertex("vertex")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			new Answer<Future<SimpleSlot>>() {__				@Override_				public Future<SimpleSlot> answer(InvocationOnMock invocation) {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return FlinkCompletableFuture.completed(availableSlots.remove(0))__					}_				}_			})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		final ExecutionJobVertex ejv = eg.getJobVertex(vertex.getID())___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			ejv.allocateResourcesForAll(slotProvider, false)__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,job,vertex,allocate,resources,for,all,slot,provider,boolean,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,job,vertex,allocate,resources,releases,on,exception,throws,exception,final,int,parallelism,8,final,job,vertex,vertex,new,job,vertex,vertex,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,slot,provider,slot,provider,mock,slot,provider,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,new,answer,future,simple,slot,override,public,future,simple,slot,answer,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,flink,completable,future,completed,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,execution,job,vertex,ejv,eg,get,job,vertex,vertex,get,id,final,int,num,slots,to,expect,back,available,slots,size,try,ejv,allocate,resources,for,all,slot,provider,false,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception;1501665499;Tests that the {@link ExecutionJobVertex#allocateResourcesForAll(SlotProvider, boolean)} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception {_		final int parallelism = 8___		final JobVertex vertex = new JobVertex("vertex")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			(InvocationOnMock invocation) -> {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return CompletableFuture.completedFuture(availableSlots.remove(0))__					}_				})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		final ExecutionJobVertex ejv = eg.getJobVertex(vertex.getID())___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			ejv.allocateResourcesForAll(slotProvider, false)__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,job,vertex,allocate,resources,for,all,slot,provider,boolean,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,job,vertex,allocate,resources,releases,on,exception,throws,exception,final,int,parallelism,8,final,job,vertex,vertex,new,job,vertex,vertex,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,slot,provider,slot,provider,mock,slot,provider,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,completable,future,completed,future,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,execution,job,vertex,ejv,eg,get,job,vertex,vertex,get,id,final,int,num,slots,to,expect,back,available,slots,size,try,ejv,allocate,resources,for,all,slot,provider,false,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception;1501760738;Tests that the {@link ExecutionJobVertex#allocateResourcesForAll(SlotProvider, boolean)} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception {_		final int parallelism = 8___		final JobVertex vertex = new JobVertex("vertex")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			(InvocationOnMock invocation) -> {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return CompletableFuture.completedFuture(availableSlots.remove(0))__					}_				})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		final ExecutionJobVertex ejv = eg.getJobVertex(vertex.getID())___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			ejv.allocateResourcesForAll(slotProvider, false)__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,job,vertex,allocate,resources,for,all,slot,provider,boolean,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,job,vertex,allocate,resources,releases,on,exception,throws,exception,final,int,parallelism,8,final,job,vertex,vertex,new,job,vertex,vertex,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,slot,provider,slot,provider,mock,slot,provider,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,completable,future,completed,future,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,execution,job,vertex,ejv,eg,get,job,vertex,vertex,get,id,final,int,num,slots,to,expect,back,available,slots,size,try,ejv,allocate,resources,for,all,slot,provider,false,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception;1508861310;Tests that the {@link ExecutionJobVertex#allocateResourcesForAll(SlotProvider, boolean)} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception {_		final int parallelism = 8___		final JobVertex vertex = new JobVertex("vertex")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			(InvocationOnMock invocation) -> {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return CompletableFuture.completedFuture(availableSlots.remove(0))__					}_				})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		final ExecutionJobVertex ejv = eg.getJobVertex(vertex.getID())___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			ejv.allocateResourcesForAll(slotProvider, false)__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,job,vertex,allocate,resources,for,all,slot,provider,boolean,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,job,vertex,allocate,resources,releases,on,exception,throws,exception,final,int,parallelism,8,final,job,vertex,vertex,new,job,vertex,vertex,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,slot,provider,slot,provider,mock,slot,provider,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,completable,future,completed,future,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,execution,job,vertex,ejv,eg,get,job,vertex,vertex,get,id,final,int,num,slots,to,expect,back,available,slots,size,try,ejv,allocate,resources,for,all,slot,provider,false,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception;1508861311;Tests that the {@link ExecutionJobVertex#allocateResourcesForAll(SlotProvider, boolean)} method_releases partially acquired resources upon exception.;@Test_	public void testExecutionJobVertexAllocateResourcesReleasesOnException() throws Exception {_		final int parallelism = 8___		final JobVertex vertex = new JobVertex("vertex")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		_		final List<SimpleSlot> returnedSlots = new ArrayList<>()__		final SlotOwner recycler = new SlotOwner() {_			@Override_			public boolean returnAllocatedSlot(Slot slot) {_				returnedSlots.add((SimpleSlot) slot)__				return true__			}_		}___		_		final SlotProvider slotProvider = mock(SlotProvider.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final List<SimpleSlot> availableSlots = new ArrayList<>(Arrays.asList(_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler),_			createSlot(taskManager, jobId, recycler)))___		when(slotProvider.allocateSlot(any(ScheduledUnit.class), anyBoolean())).then(_			(InvocationOnMock invocation) -> {_					if (availableSlots.isEmpty()) {_						throw new TestRuntimeException()__					} else {_						return CompletableFuture.completedFuture(availableSlots.remove(0))__					}_				})___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)__		final ExecutionJobVertex ejv = eg.getJobVertex(vertex.getID())___		__		final int numSlotsToExpectBack = availableSlots.size()___		try {_			ejv.allocateResourcesForAll(slotProvider, false)__			fail("should have failed with an exception")__		}_		catch (TestRuntimeException e) {_			_		}__		assertEquals(numSlotsToExpectBack, returnedSlots.size())__	};tests,that,the,link,execution,job,vertex,allocate,resources,for,all,slot,provider,boolean,method,releases,partially,acquired,resources,upon,exception;test,public,void,test,execution,job,vertex,allocate,resources,releases,on,exception,throws,exception,final,int,parallelism,8,final,job,vertex,vertex,new,job,vertex,vertex,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,list,simple,slot,returned,slots,new,array,list,final,slot,owner,recycler,new,slot,owner,override,public,boolean,return,allocated,slot,slot,slot,returned,slots,add,simple,slot,slot,return,true,final,slot,provider,slot,provider,mock,slot,provider,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,list,simple,slot,available,slots,new,array,list,arrays,as,list,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,create,slot,task,manager,job,id,recycler,when,slot,provider,allocate,slot,any,scheduled,unit,class,any,boolean,then,invocation,on,mock,invocation,if,available,slots,is,empty,throw,new,test,runtime,exception,else,return,completable,future,completed,future,available,slots,remove,0,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,final,execution,job,vertex,ejv,eg,get,job,vertex,vertex,get,id,final,int,num,slots,to,expect,back,available,slots,size,try,ejv,allocate,resources,for,all,slot,provider,false,fail,should,have,failed,with,an,exception,catch,test,runtime,exception,e,assert,equals,num,slots,to,expect,back,returned,slots,size
ExecutionGraphSchedulingTest -> @Test 	public void testEagerSchedulingWithSlotTimeout() throws Exception;1518680774;This tests makes sure that with eager scheduling no task is deployed if a single_slot allocation fails. Moreover we check that allocated slots will be returned.;@Test_	public void testEagerSchedulingWithSlotTimeout() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(2)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		assertThat(eg.getTerminationFuture().isDone(), is(false))___		_		slotFutures[0].completeExceptionally(new TimeoutException("Test time out"))___		assertThat(eg.getTerminationFuture().get(), is(JobStatus.FAILED))___		_		for (int i = 0_ i < parallelism - 1_ i++) {_			returnedSlots.poll(2000, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__	};this,tests,makes,sure,that,with,eager,scheduling,no,task,is,deployed,if,a,single,slot,allocation,fails,moreover,we,check,that,allocated,slots,will,be,returned;test,public,void,test,eager,scheduling,with,slot,timeout,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,2,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,assert,that,eg,get,termination,future,is,done,is,false,slot,futures,0,complete,exceptionally,new,timeout,exception,test,time,out,assert,that,eg,get,termination,future,get,is,job,status,failed,for,int,i,0,i,parallelism,1,i,returned,slots,poll,2000,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testEagerSchedulingWithSlotTimeout() throws Exception;1519316529;This tests makes sure that with eager scheduling no task is deployed if a single_slot allocation fails. Moreover we check that allocated slots will be returned.;@Test_	public void testEagerSchedulingWithSlotTimeout() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(2)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		assertThat(eg.getTerminationFuture().isDone(), is(false))___		_		slotFutures[0].completeExceptionally(new TimeoutException("Test time out"))___		assertThat(eg.getTerminationFuture().get(), is(JobStatus.FAILED))___		_		for (int i = 0_ i < parallelism - 1_ i++) {_			returnedSlots.poll(2000, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__	};this,tests,makes,sure,that,with,eager,scheduling,no,task,is,deployed,if,a,single,slot,allocation,fails,moreover,we,check,that,allocated,slots,will,be,returned;test,public,void,test,eager,scheduling,with,slot,timeout,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,2,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,assert,that,eg,get,termination,future,is,done,is,false,slot,futures,0,complete,exceptionally,new,timeout,exception,test,time,out,assert,that,eg,get,termination,future,get,is,job,status,failed,for,int,i,0,i,parallelism,1,i,returned,slots,poll,2000,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testEagerSchedulingWithSlotTimeout() throws Exception;1522249273;This tests makes sure that with eager scheduling no task is deployed if a single_slot allocation fails. Moreover we check that allocated slots will be returned.;@Test_	public void testEagerSchedulingWithSlotTimeout() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(2)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		assertThat(eg.getTerminationFuture().isDone(), is(false))___		_		slotFutures[0].completeExceptionally(new TimeoutException("Test time out"))___		assertThat(eg.getTerminationFuture().get(), is(JobStatus.FAILED))___		_		for (int i = 0_ i < parallelism - 1_ i++) {_			returnedSlots.poll(2000, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__	};this,tests,makes,sure,that,with,eager,scheduling,no,task,is,deployed,if,a,single,slot,allocation,fails,moreover,we,check,that,allocated,slots,will,be,returned;test,public,void,test,eager,scheduling,with,slot,timeout,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,2,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,assert,that,eg,get,termination,future,is,done,is,false,slot,futures,0,complete,exceptionally,new,timeout,exception,test,time,out,assert,that,eg,get,termination,future,get,is,job,status,failed,for,int,i,0,i,parallelism,1,i,returned,slots,poll,2000,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testEagerSchedulingWithSlotTimeout() throws Exception;1532383539;This tests makes sure that with eager scheduling no task is deployed if a single_slot allocation fails. Moreover we check that allocated slots will be returned.;@Test_	public void testEagerSchedulingWithSlotTimeout() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(2)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		assertThat(eg.getTerminationFuture().isDone(), is(false))___		_		slotFutures[0].completeExceptionally(new TimeoutException("Test time out"))___		assertThat(eg.getTerminationFuture().get(), is(JobStatus.FAILED))___		_		for (int i = 0_ i < parallelism - 1_ i++) {_			returnedSlots.poll(2000, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__	};this,tests,makes,sure,that,with,eager,scheduling,no,task,is,deployed,if,a,single,slot,allocation,fails,moreover,we,check,that,allocated,slots,will,be,returned;test,public,void,test,eager,scheduling,with,slot,timeout,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,2,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,assert,that,eg,get,termination,future,is,done,is,false,slot,futures,0,complete,exceptionally,new,timeout,exception,test,time,out,assert,that,eg,get,termination,future,get,is,job,status,failed,for,int,i,0,i,parallelism,1,i,returned,slots,poll,2000,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testEagerSchedulingWithSlotTimeout() throws Exception;1532383539;This tests makes sure that with eager scheduling no task is deployed if a single_slot allocation fails. Moreover we check that allocated slots will be returned.;@Test_	public void testEagerSchedulingWithSlotTimeout() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(2)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		assertThat(eg.getTerminationFuture().isDone(), is(false))___		_		slotFutures[0].completeExceptionally(new TimeoutException("Test time out"))___		assertThat(eg.getTerminationFuture().get(), is(JobStatus.FAILED))___		_		for (int i = 0_ i < parallelism - 1_ i++) {_			returnedSlots.poll(2000, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__	};this,tests,makes,sure,that,with,eager,scheduling,no,task,is,deployed,if,a,single,slot,allocation,fails,moreover,we,check,that,allocated,slots,will,be,returned;test,public,void,test,eager,scheduling,with,slot,timeout,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,2,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,assert,that,eg,get,termination,future,is,done,is,false,slot,futures,0,complete,exceptionally,new,timeout,exception,test,time,out,assert,that,eg,get,termination,future,get,is,job,status,failed,for,int,i,0,i,parallelism,1,i,returned,slots,poll,2000,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testEagerSchedulingWithSlotTimeout() throws Exception;1549365080;This tests makes sure that with eager scheduling no task is deployed if a single_slot allocation fails. Moreover we check that allocated slots will be returned.;@Test_	public void testEagerSchedulingWithSlotTimeout() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(2)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		slotFutures[1].complete(slots[1])___		_		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		assertThat(eg.getTerminationFuture().isDone(), is(false))___		_		slotFutures[0].completeExceptionally(new TimeoutException("Test time out"))___		assertThat(eg.getTerminationFuture().get(), is(JobStatus.FAILED))___		_		for (int i = 0_ i < parallelism - 1_ i++) {_			returnedSlots.poll(2000, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__	};this,tests,makes,sure,that,with,eager,scheduling,no,task,is,deployed,if,a,single,slot,allocation,fails,moreover,we,check,that,allocated,slots,will,be,returned;test,public,void,test,eager,scheduling,with,slot,timeout,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,2,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,slot,futures,1,complete,slots,1,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,assert,that,eg,get,termination,future,is,done,is,false,slot,futures,0,complete,exceptionally,new,timeout,exception,test,time,out,assert,that,eg,get,termination,future,get,is,job,status,failed,for,int,i,0,i,parallelism,1,i,returned,slots,poll,2000,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testEagerSchedulingWithSlotTimeout() throws Exception;1550683188;This tests makes sure that with eager scheduling no task is deployed if a single_slot allocation fails. Moreover we check that allocated slots will be returned.;@Test_	public void testEagerSchedulingWithSlotTimeout() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(2)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		slotFutures[1].complete(slots[1])___		_		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		assertThat(eg.getTerminationFuture().isDone(), is(false))___		_		slotFutures[0].completeExceptionally(new TimeoutException("Test time out"))___		assertThat(eg.getTerminationFuture().get(), is(JobStatus.FAILED))___		_		for (int i = 0_ i < parallelism - 1_ i++) {_			returnedSlots.poll(2000, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__	};this,tests,makes,sure,that,with,eager,scheduling,no,task,is,deployed,if,a,single,slot,allocation,fails,moreover,we,check,that,allocated,slots,will,be,returned;test,public,void,test,eager,scheduling,with,slot,timeout,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,2,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,slot,futures,1,complete,slots,1,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,assert,that,eg,get,termination,future,is,done,is,false,slot,futures,0,complete,exceptionally,new,timeout,exception,test,time,out,assert,that,eg,get,termination,future,get,is,job,status,failed,for,int,i,0,i,parallelism,1,i,returned,slots,poll,2000,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testEagerSchedulingWithSlotTimeout() throws Exception;1550683188;This tests makes sure that with eager scheduling no task is deployed if a single_slot allocation fails. Moreover we check that allocated slots will be returned.;@Test_	public void testEagerSchedulingWithSlotTimeout() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(2)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final InteractionsCountingTaskManagerGateway taskManager = createTaskManager()__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		slotFutures[1].complete(slots[1])___		_		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		assertThat(eg.getTerminationFuture().isDone(), is(false))___		_		slotFutures[0].completeExceptionally(new TimeoutException("Test time out"))___		assertThat(eg.getTerminationFuture().get(), is(JobStatus.FAILED))___		_		for (int i = 0_ i < parallelism - 1_ i++) {_			returnedSlots.poll(2000, TimeUnit.MILLISECONDS)__		}__		_		assertThat(taskManager.getSubmitTaskCount(), is(0))__	};this,tests,makes,sure,that,with,eager,scheduling,no,task,is,deployed,if,a,single,slot,allocation,fails,moreover,we,check,that,allocated,slots,will,be,returned;test,public,void,test,eager,scheduling,with,slot,timeout,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,2,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,interactions,counting,task,manager,gateway,task,manager,create,task,manager,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,slot,futures,1,complete,slots,1,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,assert,that,eg,get,termination,future,is,done,is,false,slot,futures,0,complete,exceptionally,new,timeout,exception,test,time,out,assert,that,eg,get,termination,future,get,is,job,status,failed,for,int,i,0,i,parallelism,1,i,returned,slots,poll,2000,time,unit,milliseconds,assert,that,task,manager,get,submit,task,count,is,0
ExecutionGraphSchedulingTest -> @Test 	public void testEagerSchedulingWithSlotTimeout() throws Exception;1550855836;This tests makes sure that with eager scheduling no task is deployed if a single_slot allocation fails. Moreover we check that allocated slots will be returned.;@Test_	public void testEagerSchedulingWithSlotTimeout() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(2)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final InteractionsCountingTaskManagerGateway taskManager = createTaskManager()__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		slotFutures[1].complete(slots[1])___		_		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		assertThat(eg.getTerminationFuture().isDone(), is(false))___		_		slotFutures[0].completeExceptionally(new TimeoutException("Test time out"))___		assertThat(eg.getTerminationFuture().get(), is(JobStatus.FAILED))___		_		for (int i = 0_ i < parallelism - 1_ i++) {_			returnedSlots.poll(2000, TimeUnit.MILLISECONDS)__		}__		_		assertThat(taskManager.getSubmitTaskCount(), is(0))__	};this,tests,makes,sure,that,with,eager,scheduling,no,task,is,deployed,if,a,single,slot,allocation,fails,moreover,we,check,that,allocated,slots,will,be,returned;test,public,void,test,eager,scheduling,with,slot,timeout,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,2,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,interactions,counting,task,manager,gateway,task,manager,create,task,manager,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,slot,futures,1,complete,slots,1,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,assert,that,eg,get,termination,future,is,done,is,false,slot,futures,0,complete,exceptionally,new,timeout,exception,test,time,out,assert,that,eg,get,termination,future,get,is,job,status,failed,for,int,i,0,i,parallelism,1,i,returned,slots,poll,2000,time,unit,milliseconds,assert,that,task,manager,get,submit,task,count,is,0
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1487548884;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, Time.milliseconds(20))__		final TerminalJobStatusListener statusListener = new TerminalJobStatusListener()__		eg.registerJobStatusListener(statusListener)___		final SlotOwner slotOwner = mock(SlotOwner.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] slotFutures = new FlinkCompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new FlinkCompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution(slotProvider)___		_		slotFutures[2].complete(slots[2])___		_		_		statusListener.waitForTerminalState(2000)___		_		verify(slotOwner, new Timeout(2000, times(2))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (Future<SimpleSlot> future : slotFutures) {_			if (future.isDone()) {_				assertTrue(future.get().isCanceled())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,execution,graph,eg,create,execution,graph,job,graph,time,milliseconds,20,final,terminal,job,status,listener,status,listener,new,terminal,job,status,listener,eg,register,job,status,listener,status,listener,final,slot,owner,slot,owner,mock,slot,owner,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,slot,futures,new,flink,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,provider,slot,futures,2,complete,slots,2,status,listener,wait,for,terminal,state,2000,verify,slot,owner,new,timeout,2000,times,2,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,future,simple,slot,future,slot,futures,if,future,is,done,assert,true,future,get,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1488453790;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final SlotOwner slotOwner = mock(SlotOwner.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] slotFutures = new FlinkCompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new FlinkCompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))__		final TerminalJobStatusListener statusListener = new TerminalJobStatusListener()__		eg.registerJobStatusListener(statusListener)___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		statusListener.waitForTerminalState(2000)___		_		verify(slotOwner, new Timeout(2000, times(2))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (Future<SimpleSlot> future : slotFutures) {_			if (future.isDone()) {_				assertTrue(future.get().isCanceled())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,slot,owner,slot,owner,mock,slot,owner,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,slot,futures,new,flink,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,final,terminal,job,status,listener,status,listener,new,terminal,job,status,listener,eg,register,job,status,listener,status,listener,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,status,listener,wait,for,terminal,state,2000,verify,slot,owner,new,timeout,2000,times,2,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,future,simple,slot,future,slot,futures,if,future,is,done,assert,true,future,get,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1493831843;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final SlotOwner slotOwner = mock(SlotOwner.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] slotFutures = new FlinkCompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new FlinkCompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(2))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (Future<SimpleSlot> future : slotFutures) {_			if (future.isDone()) {_				assertTrue(future.get().isCanceled())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,slot,owner,slot,owner,mock,slot,owner,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,slot,futures,new,flink,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,2,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,future,simple,slot,future,slot,futures,if,future,is,done,assert,true,future,get,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1497344185;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final SlotOwner slotOwner = mock(SlotOwner.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] slotFutures = new FlinkCompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new FlinkCompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(2))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (Future<SimpleSlot> future : slotFutures) {_			if (future.isDone()) {_				assertTrue(future.get().isCanceled())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,slot,owner,slot,owner,mock,slot,owner,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,slot,futures,new,flink,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,2,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,future,simple,slot,future,slot,futures,if,future,is,done,assert,true,future,get,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1501665499;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final SlotOwner slotOwner = mock(SlotOwner.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(2))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (CompletableFuture<SimpleSlot> future : slotFutures) {_			if (future.isDone()) {_				assertTrue(future.get().isCanceled())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,slot,owner,slot,owner,mock,slot,owner,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,2,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,completable,future,simple,slot,future,slot,futures,if,future,is,done,assert,true,future,get,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1501760738;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final SlotOwner slotOwner = mock(SlotOwner.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(2))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (CompletableFuture<SimpleSlot> future : slotFutures) {_			if (future.isDone()) {_				assertTrue(future.get().isCanceled())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,slot,owner,slot,owner,mock,slot,owner,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,2,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,completable,future,simple,slot,future,slot,futures,if,future,is,done,assert,true,future,get,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1508861310;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final SlotOwner slotOwner = mock(SlotOwner.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(2))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (CompletableFuture<SimpleSlot> future : slotFutures) {_			if (future.isDone()) {_				assertTrue(future.get().isCanceled())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,slot,owner,slot,owner,mock,slot,owner,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,2,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,completable,future,simple,slot,future,slot,futures,if,future,is,done,assert,true,future,get,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1508861311;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final SlotOwner slotOwner = mock(SlotOwner.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(2))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (CompletableFuture<SimpleSlot> future : slotFutures) {_			if (future.isDone()) {_				assertTrue(future.get().isCanceled())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,slot,owner,slot,owner,mock,slot,owner,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,2,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,completable,future,simple,slot,future,slot,futures,if,future,is,done,assert,true,future,get,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1509638684;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final SlotOwner slotOwner = mock(SlotOwner.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(2))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (CompletableFuture<SimpleSlot> future : slotFutures) {_			if (future.isDone()) {_				assertTrue(future.get().isCanceled())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,slot,owner,slot,owner,mock,slot,owner,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,2,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,completable,future,simple,slot,future,slot,futures,if,future,is,done,assert,true,future,get,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1509638685;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final SlotOwner slotOwner = mock(SlotOwner.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(2))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (CompletableFuture<SimpleSlot> future : slotFutures) {_			if (future.isDone()) {_				assertTrue(future.get().isCanceled())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,slot,owner,slot,owner,mock,slot,owner,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,2,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,completable,future,simple,slot,future,slot,futures,if,future,is,done,assert,true,future,get,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1513201052;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final SlotOwner slotOwner = mock(SlotOwner.class)___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		verify(slotOwner, new Timeout(2000, times(2))).returnAllocatedSlot(any(Slot.class))___		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (CompletableFuture<LogicalSlot> future : slotFutures) {_			if (future.isDone()) {_				assertTrue(future.get().isCanceled())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,slot,owner,slot,owner,mock,slot,owner,class,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,eg,get,termination,future,get,2000,time,unit,milliseconds,verify,slot,owner,new,timeout,2000,times,2,return,allocated,slot,any,slot,class,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,completable,future,logical,slot,future,slot,futures,if,future,is,done,assert,true,future,get,is,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1513201070;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(2)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(Slot slot) -> returnedSlots.offer(slot.getAllocatedSlot().getSlotAllocationId()))___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism - 1_ i++) {_			returnedSlots.poll(2000, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (CompletableFuture<LogicalSlot> future : slotFutures) {_			if (future.isDone()) {_				assertFalse(future.get().isAlive())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,2,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,slot,slot,returned,slots,offer,slot,get,allocated,slot,get,slot,allocation,id,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,1,i,returned,slots,poll,2000,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,completable,future,logical,slot,future,slot,futures,if,future,is,done,assert,false,future,get,is,alive
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1513258344;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(2)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(Slot slot) -> returnedSlots.offer(slot.getSlotContext().getAllocationId()))___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism - 1_ i++) {_			returnedSlots.poll(2000, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (CompletableFuture<LogicalSlot> future : slotFutures) {_			if (future.isDone()) {_				assertFalse(future.get().isAlive())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,2,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,slot,slot,returned,slots,offer,slot,get,slot,context,get,allocation,id,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,1,i,returned,slots,poll,2000,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,completable,future,logical,slot,future,slot,futures,if,future,is,done,assert,false,future,get,is,alive
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1513258345;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(2)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism - 1_ i++) {_			returnedSlots.poll(2000, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (CompletableFuture<LogicalSlot> future : slotFutures) {_			if (future.isDone()) {_				assertFalse(future.get().isAlive())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,2,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,1,i,returned,slots,poll,2000,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,completable,future,logical,slot,future,slot,futures,if,future,is,done,assert,false,future,get,is,alive
ExecutionGraphSchedulingTest -> @Test 	public void testTimeoutForSlotAllocation() throws Exception;1513261599;This test verifies that the slot allocations times out after a certain time, and that_all slots are released in that case.;@Test_	public void testTimeoutForSlotAllocation() throws Exception {__		__		final int parallelism = 3___		final JobVertex vertex = new JobVertex("task")__		vertex.setParallelism(parallelism)__		vertex.setInvokableClass(NoOpInvokable.class)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", vertex)___		final BlockingQueue<AllocationID> returnedSlots = new ArrayBlockingQueue<>(2)__		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		slotOwner.setReturnAllocatedSlotConsumer(_			(LogicalSlot logicalSlot) -> returnedSlots.offer(logicalSlot.getAllocationId()))___		final TaskManagerGateway taskManager = mock(TaskManagerGateway.class)__		final SimpleSlot[] slots = new SimpleSlot[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] slotFutures = new CompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			slots[i] = createSlot(taskManager, jobId, slotOwner)__			slotFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(vertex.getID(), slotFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider, Time.milliseconds(20))___		_		slotFutures[1].complete(slots[1])___		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		_		slotFutures[2].complete(slots[2])___		_		_		eg.getTerminationFuture().get(2000, TimeUnit.MILLISECONDS)___		_		for (int i = 0_ i < parallelism - 1_ i++) {_			returnedSlots.poll(2000, TimeUnit.MILLISECONDS)__		}__		_		verify(taskManager, times(0)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		for (CompletableFuture<LogicalSlot> future : slotFutures) {_			if (future.isDone()) {_				assertFalse(future.get().isAlive())__			}_		}_	};this,test,verifies,that,the,slot,allocations,times,out,after,a,certain,time,and,that,all,slots,are,released,in,that,case;test,public,void,test,timeout,for,slot,allocation,throws,exception,final,int,parallelism,3,final,job,vertex,vertex,new,job,vertex,task,vertex,set,parallelism,parallelism,vertex,set,invokable,class,no,op,invokable,class,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,vertex,final,blocking,queue,allocation,id,returned,slots,new,array,blocking,queue,2,final,testing,slot,owner,slot,owner,new,testing,slot,owner,slot,owner,set,return,allocated,slot,consumer,logical,slot,logical,slot,returned,slots,offer,logical,slot,get,allocation,id,final,task,manager,gateway,task,manager,mock,task,manager,gateway,class,final,simple,slot,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,slot,futures,new,completable,future,parallelism,for,int,i,0,i,parallelism,i,slots,i,create,slot,task,manager,job,id,slot,owner,slot,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,vertex,get,id,slot,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,time,milliseconds,20,slot,futures,1,complete,slots,1,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,futures,2,complete,slots,2,eg,get,termination,future,get,2000,time,unit,milliseconds,for,int,i,0,i,parallelism,1,i,returned,slots,poll,2000,time,unit,milliseconds,verify,task,manager,times,0,submit,task,any,task,deployment,descriptor,class,any,time,class,for,completable,future,logical,slot,future,slot,futures,if,future,is,done,assert,false,future,get,is,alive
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1487548884;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		final ExecutionGraph eg = createExecutionGraph(jobGraph)___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] sourceFutures = new FlinkCompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] targetFutures = new FlinkCompletableFuture[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new FlinkCompletableFuture<>()__			targetFutures[i] = new FlinkCompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution(slotProvider)___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(50)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(50)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,final,execution,graph,eg,create,execution,graph,job,graph,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,source,futures,new,flink,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,target,futures,new,flink,completable,future,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,flink,completable,future,target,futures,i,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,slot,provider,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,50,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,50,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1488453790;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] sourceFutures = new FlinkCompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] targetFutures = new FlinkCompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new FlinkCompletableFuture<>()__			targetFutures[i] = new FlinkCompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(50)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(50)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,source,futures,new,flink,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,target,futures,new,flink,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,flink,completable,future,target,futures,i,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,50,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,50,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1493831843;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] sourceFutures = new FlinkCompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] targetFutures = new FlinkCompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new FlinkCompletableFuture<>()__			targetFutures[i] = new FlinkCompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(50)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(50)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,source,futures,new,flink,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,target,futures,new,flink,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,flink,completable,future,target,futures,i,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,50,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,50,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1497344185;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] sourceFutures = new FlinkCompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final FlinkCompletableFuture<SimpleSlot>[] targetFutures = new FlinkCompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new FlinkCompletableFuture<>()__			targetFutures[i] = new FlinkCompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,source,futures,new,flink,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,flink,completable,future,simple,slot,target,futures,new,flink,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,flink,completable,future,target,futures,i,new,flink,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1501665499;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1501760738;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1508861310;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1508861311;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1509638684;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1509638685;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<SimpleSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,simple,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1513201052;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1513201070;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1513258344;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1513258345;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1513261599;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1518680774;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1519316529;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1522249273;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1532383539;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1532383539;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1549365080;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		_		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1550683188;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final TaskManagerGateway[] sourceTaskManagers = new TaskManagerGateway[parallelism]__		final TaskManagerGateway[] targetTaskManagers = new TaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		_		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (TaskManagerGateway gateway : sourceTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_		for (TaskManagerGateway gateway : targetTaskManagers) {_			verify(gateway, timeout(500L)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,task,manager,gateway,source,task,managers,new,task,manager,gateway,parallelism,final,task,manager,gateway,target,task,managers,new,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,task,manager,gateway,gateway,source,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class,for,task,manager,gateway,gateway,target,task,managers,verify,gateway,timeout,500l,submit,task,any,task,deployment,descriptor,class,any,time,class
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1550683188;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final InteractionsCountingTaskManagerGateway[] sourceTaskManagers = new InteractionsCountingTaskManagerGateway[parallelism]__		final InteractionsCountingTaskManagerGateway[] targetTaskManagers = new InteractionsCountingTaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		_		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (InteractionsCountingTaskManagerGateway gateway : sourceTaskManagers) {_			assertThat(gateway.getSubmitTaskCount(), is(1))__		}_		for (InteractionsCountingTaskManagerGateway gateway : targetTaskManagers) {_			assertThat(gateway.getSubmitTaskCount(), is(1))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,interactions,counting,task,manager,gateway,source,task,managers,new,interactions,counting,task,manager,gateway,parallelism,final,interactions,counting,task,manager,gateway,target,task,managers,new,interactions,counting,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,interactions,counting,task,manager,gateway,gateway,source,task,managers,assert,that,gateway,get,submit,task,count,is,1,for,interactions,counting,task,manager,gateway,gateway,target,task,managers,assert,that,gateway,get,submit,task,count,is,1
ExecutionGraphSchedulingTest -> @Test 	public void testDeployPipelinedConnectedComponentsTogether() throws Exception;1550855836;This test verifies that before deploying a pipelined connected component, the_full set of slots is available, and that not some tasks are deployed, and later the_system realizes that not enough resources are available.;@Test_	public void testDeployPipelinedConnectedComponentsTogether() throws Exception {__		_		__		final int parallelism = 8___		final JobVertex sourceVertex = new JobVertex("source")__		sourceVertex.setParallelism(parallelism)__		sourceVertex.setInvokableClass(NoOpInvokable.class)___		final JobVertex targetVertex = new JobVertex("target")__		targetVertex.setParallelism(parallelism)__		targetVertex.setInvokableClass(NoOpInvokable.class)___		targetVertex.connectNewDataSetAsInput(sourceVertex, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)___		final JobID jobId = new JobID()__		final JobGraph jobGraph = new JobGraph(jobId, "test", sourceVertex, targetVertex)___		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] sourceFutures = new CompletableFuture[parallelism]__		@SuppressWarnings({"unchecked", "rawtypes"})_		final CompletableFuture<LogicalSlot>[] targetFutures = new CompletableFuture[parallelism]___		_		__		final InteractionsCountingTaskManagerGateway[] sourceTaskManagers = new InteractionsCountingTaskManagerGateway[parallelism]__		final InteractionsCountingTaskManagerGateway[] targetTaskManagers = new InteractionsCountingTaskManagerGateway[parallelism]___		final SimpleSlot[] sourceSlots = new SimpleSlot[parallelism]__		final SimpleSlot[] targetSlots = new SimpleSlot[parallelism]___		for (int i = 0_ i < parallelism_ i++) {_			sourceTaskManagers[i] = createTaskManager()__			targetTaskManagers[i] = createTaskManager()___			sourceSlots[i] = createSlot(sourceTaskManagers[i], jobId)__			targetSlots[i] = createSlot(targetTaskManagers[i], jobId)___			sourceFutures[i] = new CompletableFuture<>()__			targetFutures[i] = new CompletableFuture<>()__		}__		ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)__		slotProvider.addSlots(sourceVertex.getID(), sourceFutures)__		slotProvider.addSlots(targetVertex.getID(), targetFutures)___		final ExecutionGraph eg = createExecutionGraph(jobGraph, slotProvider)___		_		__		for (int i = 0_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}__		_		_		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.setScheduleMode(ScheduleMode.EAGER)__		eg.setQueuedSchedulingAllowed(true)__		eg.scheduleForExecution()___		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i += 2) {_			sourceFutures[i].complete(sourceSlots[i])__		}_		verifyNothingDeployed(eg, sourceTaskManagers)___		_		for (int i = 1_ i < parallelism_ i++) {_			targetFutures[i].complete(targetSlots[i])__		}_		verifyNothingDeployed(eg, targetTaskManagers)___		_		targetFutures[0].complete(targetSlots[0])___		_		__		for (InteractionsCountingTaskManagerGateway gateway : sourceTaskManagers) {_			assertThat(gateway.getSubmitTaskCount(), is(1))__		}_		for (InteractionsCountingTaskManagerGateway gateway : targetTaskManagers) {_			assertThat(gateway.getSubmitTaskCount(), is(1))__		}_	};this,test,verifies,that,before,deploying,a,pipelined,connected,component,the,full,set,of,slots,is,available,and,that,not,some,tasks,are,deployed,and,later,the,system,realizes,that,not,enough,resources,are,available;test,public,void,test,deploy,pipelined,connected,components,together,throws,exception,final,int,parallelism,8,final,job,vertex,source,vertex,new,job,vertex,source,source,vertex,set,parallelism,parallelism,source,vertex,set,invokable,class,no,op,invokable,class,final,job,vertex,target,vertex,new,job,vertex,target,target,vertex,set,parallelism,parallelism,target,vertex,set,invokable,class,no,op,invokable,class,target,vertex,connect,new,data,set,as,input,source,vertex,distribution,pattern,result,partition,type,pipelined,final,job,id,job,id,new,job,id,final,job,graph,job,graph,new,job,graph,job,id,test,source,vertex,target,vertex,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,source,futures,new,completable,future,parallelism,suppress,warnings,unchecked,rawtypes,final,completable,future,logical,slot,target,futures,new,completable,future,parallelism,final,interactions,counting,task,manager,gateway,source,task,managers,new,interactions,counting,task,manager,gateway,parallelism,final,interactions,counting,task,manager,gateway,target,task,managers,new,interactions,counting,task,manager,gateway,parallelism,final,simple,slot,source,slots,new,simple,slot,parallelism,final,simple,slot,target,slots,new,simple,slot,parallelism,for,int,i,0,i,parallelism,i,source,task,managers,i,create,task,manager,target,task,managers,i,create,task,manager,source,slots,i,create,slot,source,task,managers,i,job,id,target,slots,i,create,slot,target,task,managers,i,job,id,source,futures,i,new,completable,future,target,futures,i,new,completable,future,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,slot,provider,add,slots,source,vertex,get,id,source,futures,slot,provider,add,slots,target,vertex,get,id,target,futures,final,execution,graph,eg,create,execution,graph,job,graph,slot,provider,for,int,i,0,i,parallelism,i,2,source,futures,i,complete,source,slots,i,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,set,schedule,mode,schedule,mode,eager,eg,set,queued,scheduling,allowed,true,eg,schedule,for,execution,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,2,source,futures,i,complete,source,slots,i,verify,nothing,deployed,eg,source,task,managers,for,int,i,1,i,parallelism,i,target,futures,i,complete,target,slots,i,verify,nothing,deployed,eg,target,task,managers,target,futures,0,complete,target,slots,0,for,interactions,counting,task,manager,gateway,gateway,source,task,managers,assert,that,gateway,get,submit,task,count,is,1,for,interactions,counting,task,manager,gateway,gateway,target,task,managers,assert,that,gateway,get,submit,task,count,is,1
ExecutionGraphSchedulingTest -> @Test 	public void testSchedulingOperationCancellationWhenCancel() throws Exception;1519316529;Tests that an ongoing scheduling operation does not fail the {@link ExecutionGraph}_if it gets concurrently cancelled;@Test_	public void testSchedulingOperationCancellationWhenCancel() throws Exception {_		final JobVertex jobVertex = new JobVertex("NoOp JobVertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(2)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)__		jobGraph.setAllowQueuedScheduling(true)___		final CompletableFuture<LogicalSlot> slotFuture1 = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> slotFuture2 = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(2)__		slotProvider.addSlots(jobVertex.getID(), new CompletableFuture[]{slotFuture1, slotFuture2})__		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.scheduleForExecution()___		final CompletableFuture<?> releaseFuture = new CompletableFuture<>()___		final TestingLogicalSlot slot = new TestingLogicalSlot(_			new LocalTaskManagerLocation(),_			new SimpleAckingTaskManagerGateway(),_			0,_			new AllocationID(),_			new SlotRequestId(),_			new SlotSharingGroupId(),_			releaseFuture)__		slotFuture1.complete(slot)___		_		executionGraph.cancel()___		_		slotFuture2.complete(new TestingLogicalSlot())___		Thread.sleep(1L)__		_		releaseFuture.complete(null)___		_		_		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.CANCELED))__	};tests,that,an,ongoing,scheduling,operation,does,not,fail,the,link,execution,graph,if,it,gets,concurrently,cancelled;test,public,void,test,scheduling,operation,cancellation,when,cancel,throws,exception,final,job,vertex,job,vertex,new,job,vertex,no,op,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,2,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,schedule,mode,schedule,mode,eager,job,graph,set,allow,queued,scheduling,true,final,completable,future,logical,slot,slot,future1,new,completable,future,final,completable,future,logical,slot,slot,future2,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,2,slot,provider,add,slots,job,vertex,get,id,new,completable,future,slot,future1,slot,future2,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,schedule,for,execution,final,completable,future,release,future,new,completable,future,final,testing,logical,slot,slot,new,testing,logical,slot,new,local,task,manager,location,new,simple,acking,task,manager,gateway,0,new,allocation,id,new,slot,request,id,new,slot,sharing,group,id,release,future,slot,future1,complete,slot,execution,graph,cancel,slot,future2,complete,new,testing,logical,slot,thread,sleep,1l,release,future,complete,null,assert,that,execution,graph,get,termination,future,get,is,job,status,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testSchedulingOperationCancellationWhenCancel() throws Exception;1522249273;Tests that an ongoing scheduling operation does not fail the {@link ExecutionGraph}_if it gets concurrently cancelled;@Test_	public void testSchedulingOperationCancellationWhenCancel() throws Exception {_		final JobVertex jobVertex = new JobVertex("NoOp JobVertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(2)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)__		jobGraph.setAllowQueuedScheduling(true)___		final CompletableFuture<LogicalSlot> slotFuture1 = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> slotFuture2 = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(2)__		slotProvider.addSlots(jobVertex.getID(), new CompletableFuture[]{slotFuture1, slotFuture2})__		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.scheduleForExecution()___		final CompletableFuture<?> releaseFuture = new CompletableFuture<>()___		final TestingLogicalSlot slot = createTestingSlot(releaseFuture)__		slotFuture1.complete(slot)___		_		executionGraph.cancel()___		_		slotFuture2.complete(new TestingLogicalSlot())___		Thread.sleep(1L)__		_		releaseFuture.complete(null)___		_		_		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.CANCELED))__	};tests,that,an,ongoing,scheduling,operation,does,not,fail,the,link,execution,graph,if,it,gets,concurrently,cancelled;test,public,void,test,scheduling,operation,cancellation,when,cancel,throws,exception,final,job,vertex,job,vertex,new,job,vertex,no,op,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,2,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,schedule,mode,schedule,mode,eager,job,graph,set,allow,queued,scheduling,true,final,completable,future,logical,slot,slot,future1,new,completable,future,final,completable,future,logical,slot,slot,future2,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,2,slot,provider,add,slots,job,vertex,get,id,new,completable,future,slot,future1,slot,future2,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,schedule,for,execution,final,completable,future,release,future,new,completable,future,final,testing,logical,slot,slot,create,testing,slot,release,future,slot,future1,complete,slot,execution,graph,cancel,slot,future2,complete,new,testing,logical,slot,thread,sleep,1l,release,future,complete,null,assert,that,execution,graph,get,termination,future,get,is,job,status,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testSchedulingOperationCancellationWhenCancel() throws Exception;1532383539;Tests that an ongoing scheduling operation does not fail the {@link ExecutionGraph}_if it gets concurrently cancelled;@Test_	public void testSchedulingOperationCancellationWhenCancel() throws Exception {_		final JobVertex jobVertex = new JobVertex("NoOp JobVertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(2)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)__		jobGraph.setAllowQueuedScheduling(true)___		final CompletableFuture<LogicalSlot> slotFuture1 = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> slotFuture2 = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(2)__		slotProvider.addSlots(jobVertex.getID(), new CompletableFuture[]{slotFuture1, slotFuture2})__		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.scheduleForExecution()___		final CompletableFuture<?> releaseFuture = new CompletableFuture<>()___		final TestingLogicalSlot slot = createTestingSlot(releaseFuture)__		slotFuture1.complete(slot)___		_		executionGraph.cancel()___		_		slotFuture2.complete(new TestingLogicalSlot())___		Thread.sleep(1L)__		_		releaseFuture.complete(null)___		_		_		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.CANCELED))__	};tests,that,an,ongoing,scheduling,operation,does,not,fail,the,link,execution,graph,if,it,gets,concurrently,cancelled;test,public,void,test,scheduling,operation,cancellation,when,cancel,throws,exception,final,job,vertex,job,vertex,new,job,vertex,no,op,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,2,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,schedule,mode,schedule,mode,eager,job,graph,set,allow,queued,scheduling,true,final,completable,future,logical,slot,slot,future1,new,completable,future,final,completable,future,logical,slot,slot,future2,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,2,slot,provider,add,slots,job,vertex,get,id,new,completable,future,slot,future1,slot,future2,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,schedule,for,execution,final,completable,future,release,future,new,completable,future,final,testing,logical,slot,slot,create,testing,slot,release,future,slot,future1,complete,slot,execution,graph,cancel,slot,future2,complete,new,testing,logical,slot,thread,sleep,1l,release,future,complete,null,assert,that,execution,graph,get,termination,future,get,is,job,status,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testSchedulingOperationCancellationWhenCancel() throws Exception;1532383539;Tests that an ongoing scheduling operation does not fail the {@link ExecutionGraph}_if it gets concurrently cancelled;@Test_	public void testSchedulingOperationCancellationWhenCancel() throws Exception {_		final JobVertex jobVertex = new JobVertex("NoOp JobVertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(2)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)__		jobGraph.setAllowQueuedScheduling(true)___		final CompletableFuture<LogicalSlot> slotFuture1 = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> slotFuture2 = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(2)__		slotProvider.addSlots(jobVertex.getID(), new CompletableFuture[]{slotFuture1, slotFuture2})__		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.scheduleForExecution()___		final CompletableFuture<?> releaseFuture = new CompletableFuture<>()___		final TestingLogicalSlot slot = createTestingSlot(releaseFuture)__		slotFuture1.complete(slot)___		_		executionGraph.cancel()___		_		slotFuture2.complete(new TestingLogicalSlot())___		Thread.sleep(1L)__		_		releaseFuture.complete(null)___		_		_		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.CANCELED))__	};tests,that,an,ongoing,scheduling,operation,does,not,fail,the,link,execution,graph,if,it,gets,concurrently,cancelled;test,public,void,test,scheduling,operation,cancellation,when,cancel,throws,exception,final,job,vertex,job,vertex,new,job,vertex,no,op,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,2,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,schedule,mode,schedule,mode,eager,job,graph,set,allow,queued,scheduling,true,final,completable,future,logical,slot,slot,future1,new,completable,future,final,completable,future,logical,slot,slot,future2,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,2,slot,provider,add,slots,job,vertex,get,id,new,completable,future,slot,future1,slot,future2,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,schedule,for,execution,final,completable,future,release,future,new,completable,future,final,testing,logical,slot,slot,create,testing,slot,release,future,slot,future1,complete,slot,execution,graph,cancel,slot,future2,complete,new,testing,logical,slot,thread,sleep,1l,release,future,complete,null,assert,that,execution,graph,get,termination,future,get,is,job,status,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testSchedulingOperationCancellationWhenCancel() throws Exception;1549365080;Tests that an ongoing scheduling operation does not fail the {@link ExecutionGraph}_if it gets concurrently cancelled;@Test_	public void testSchedulingOperationCancellationWhenCancel() throws Exception {_		final JobVertex jobVertex = new JobVertex("NoOp JobVertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(2)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)__		jobGraph.setAllowQueuedScheduling(true)___		final CompletableFuture<LogicalSlot> slotFuture1 = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> slotFuture2 = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(2)__		slotProvider.addSlots(jobVertex.getID(), new CompletableFuture[]{slotFuture1, slotFuture2})__		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		executionGraph.scheduleForExecution()___		final CompletableFuture<?> releaseFuture = new CompletableFuture<>()___		final TestingLogicalSlot slot = createTestingSlot(releaseFuture)__		slotFuture1.complete(slot)___		_		executionGraph.cancel()___		_		slotFuture2.complete(new TestingLogicalSlot())___		Thread.sleep(1L)__		_		releaseFuture.complete(null)___		_		_		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.CANCELED))__	};tests,that,an,ongoing,scheduling,operation,does,not,fail,the,link,execution,graph,if,it,gets,concurrently,cancelled;test,public,void,test,scheduling,operation,cancellation,when,cancel,throws,exception,final,job,vertex,job,vertex,new,job,vertex,no,op,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,2,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,schedule,mode,schedule,mode,eager,job,graph,set,allow,queued,scheduling,true,final,completable,future,logical,slot,slot,future1,new,completable,future,final,completable,future,logical,slot,slot,future2,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,2,slot,provider,add,slots,job,vertex,get,id,new,completable,future,slot,future1,slot,future2,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,graph,schedule,for,execution,final,completable,future,release,future,new,completable,future,final,testing,logical,slot,slot,create,testing,slot,release,future,slot,future1,complete,slot,execution,graph,cancel,slot,future2,complete,new,testing,logical,slot,thread,sleep,1l,release,future,complete,null,assert,that,execution,graph,get,termination,future,get,is,job,status,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testSchedulingOperationCancellationWhenCancel() throws Exception;1550683188;Tests that an ongoing scheduling operation does not fail the {@link ExecutionGraph}_if it gets concurrently cancelled;@Test_	public void testSchedulingOperationCancellationWhenCancel() throws Exception {_		final JobVertex jobVertex = new JobVertex("NoOp JobVertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(2)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)__		jobGraph.setAllowQueuedScheduling(true)___		final CompletableFuture<LogicalSlot> slotFuture1 = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> slotFuture2 = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(2)__		slotProvider.addSlots(jobVertex.getID(), new CompletableFuture[]{slotFuture1, slotFuture2})__		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		executionGraph.scheduleForExecution()___		final CompletableFuture<?> releaseFuture = new CompletableFuture<>()___		final TestingLogicalSlot slot = createTestingSlot(releaseFuture)__		slotFuture1.complete(slot)___		_		executionGraph.cancel()___		_		slotFuture2.complete(new TestingLogicalSlot())___		Thread.sleep(1L)__		_		releaseFuture.complete(null)___		_		_		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.CANCELED))__	};tests,that,an,ongoing,scheduling,operation,does,not,fail,the,link,execution,graph,if,it,gets,concurrently,cancelled;test,public,void,test,scheduling,operation,cancellation,when,cancel,throws,exception,final,job,vertex,job,vertex,new,job,vertex,no,op,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,2,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,schedule,mode,schedule,mode,eager,job,graph,set,allow,queued,scheduling,true,final,completable,future,logical,slot,slot,future1,new,completable,future,final,completable,future,logical,slot,slot,future2,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,2,slot,provider,add,slots,job,vertex,get,id,new,completable,future,slot,future1,slot,future2,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,graph,schedule,for,execution,final,completable,future,release,future,new,completable,future,final,testing,logical,slot,slot,create,testing,slot,release,future,slot,future1,complete,slot,execution,graph,cancel,slot,future2,complete,new,testing,logical,slot,thread,sleep,1l,release,future,complete,null,assert,that,execution,graph,get,termination,future,get,is,job,status,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testSchedulingOperationCancellationWhenCancel() throws Exception;1550683188;Tests that an ongoing scheduling operation does not fail the {@link ExecutionGraph}_if it gets concurrently cancelled.;@Test_	public void testSchedulingOperationCancellationWhenCancel() throws Exception {_		final JobVertex jobVertex = new JobVertex("NoOp JobVertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(2)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)__		jobGraph.setAllowQueuedScheduling(true)___		final CompletableFuture<LogicalSlot> slotFuture1 = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> slotFuture2 = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(2)__		slotProvider.addSlots(jobVertex.getID(), new CompletableFuture[]{slotFuture1, slotFuture2})__		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		executionGraph.scheduleForExecution()___		final CompletableFuture<?> releaseFuture = new CompletableFuture<>()___		final TestingLogicalSlot slot = createTestingSlot(releaseFuture)__		slotFuture1.complete(slot)___		_		executionGraph.cancel()___		_		slotFuture2.complete(new TestingLogicalSlot())___		Thread.sleep(1L)__		_		releaseFuture.complete(null)___		_		_		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.CANCELED))__	};tests,that,an,ongoing,scheduling,operation,does,not,fail,the,link,execution,graph,if,it,gets,concurrently,cancelled;test,public,void,test,scheduling,operation,cancellation,when,cancel,throws,exception,final,job,vertex,job,vertex,new,job,vertex,no,op,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,2,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,schedule,mode,schedule,mode,eager,job,graph,set,allow,queued,scheduling,true,final,completable,future,logical,slot,slot,future1,new,completable,future,final,completable,future,logical,slot,slot,future2,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,2,slot,provider,add,slots,job,vertex,get,id,new,completable,future,slot,future1,slot,future2,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,graph,schedule,for,execution,final,completable,future,release,future,new,completable,future,final,testing,logical,slot,slot,create,testing,slot,release,future,slot,future1,complete,slot,execution,graph,cancel,slot,future2,complete,new,testing,logical,slot,thread,sleep,1l,release,future,complete,null,assert,that,execution,graph,get,termination,future,get,is,job,status,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testSchedulingOperationCancellationWhenCancel() throws Exception;1550855836;Tests that an ongoing scheduling operation does not fail the {@link ExecutionGraph}_if it gets concurrently cancelled.;@Test_	public void testSchedulingOperationCancellationWhenCancel() throws Exception {_		final JobVertex jobVertex = new JobVertex("NoOp JobVertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(2)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)__		jobGraph.setAllowQueuedScheduling(true)___		final CompletableFuture<LogicalSlot> slotFuture1 = new CompletableFuture<>()__		final CompletableFuture<LogicalSlot> slotFuture2 = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(2)__		slotProvider.addSlots(jobVertex.getID(), new CompletableFuture[]{slotFuture1, slotFuture2})__		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		executionGraph.scheduleForExecution()___		final CompletableFuture<?> releaseFuture = new CompletableFuture<>()___		final TestingLogicalSlot slot = createTestingSlot(releaseFuture)__		slotFuture1.complete(slot)___		_		executionGraph.cancel()___		_		slotFuture2.complete(new TestingLogicalSlot())___		Thread.sleep(1L)__		_		releaseFuture.complete(null)___		_		_		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.CANCELED))__	};tests,that,an,ongoing,scheduling,operation,does,not,fail,the,link,execution,graph,if,it,gets,concurrently,cancelled;test,public,void,test,scheduling,operation,cancellation,when,cancel,throws,exception,final,job,vertex,job,vertex,new,job,vertex,no,op,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,2,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,schedule,mode,schedule,mode,eager,job,graph,set,allow,queued,scheduling,true,final,completable,future,logical,slot,slot,future1,new,completable,future,final,completable,future,logical,slot,slot,future2,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,2,slot,provider,add,slots,job,vertex,get,id,new,completable,future,slot,future1,slot,future2,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,graph,schedule,for,execution,final,completable,future,release,future,new,completable,future,final,testing,logical,slot,slot,create,testing,slot,release,future,slot,future1,complete,slot,execution,graph,cancel,slot,future2,complete,new,testing,logical,slot,thread,sleep,1l,release,future,complete,null,assert,that,execution,graph,get,termination,future,get,is,job,status,canceled
ExecutionGraphSchedulingTest -> @Test 	public void testSlotReleasingFailsSchedulingOperation() throws Exception;1522249273;Tests that a partially completed eager scheduling operation fails if a_completed slot is released. See FLINK-9099.;@Test_	public void testSlotReleasingFailsSchedulingOperation() throws Exception {_		final int parallelism = 2___		final JobVertex jobVertex = new JobVertex("Testing job vertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(parallelism)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setAllowQueuedScheduling(true)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)___		final SimpleSlot slot = createSlot(new SimpleAckingTaskManagerGateway(), jobGraph.getJobID(), new DummySlotOwner())__		slotProvider.addSlot(jobVertex.getID(), 0, CompletableFuture.completedFuture(slot))___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertex.getID(), 1, slotFuture)___		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.scheduleForExecution()___		assertThat(executionGraph.getState(), is(JobStatus.RUNNING))___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertex.getID())__		final ExecutionVertex[] taskVertices = executionJobVertex.getTaskVertices()__		assertThat(taskVertices[0].getExecutionState(), is(ExecutionState.SCHEDULED))__		assertThat(taskVertices[1].getExecutionState(), is(ExecutionState.SCHEDULED))___		_		slot.releaseSlot(new FlinkException("Test failure"))___		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.FAILED))__	};tests,that,a,partially,completed,eager,scheduling,operation,fails,if,a,completed,slot,is,released,see,flink,9099;test,public,void,test,slot,releasing,fails,scheduling,operation,throws,exception,final,int,parallelism,2,final,job,vertex,job,vertex,new,job,vertex,testing,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,parallelism,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,allow,queued,scheduling,true,job,graph,set,schedule,mode,schedule,mode,eager,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,final,simple,slot,slot,create,slot,new,simple,acking,task,manager,gateway,job,graph,get,job,id,new,dummy,slot,owner,slot,provider,add,slot,job,vertex,get,id,0,completable,future,completed,future,slot,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,get,id,1,slot,future,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,schedule,for,execution,assert,that,execution,graph,get,state,is,job,status,running,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,get,id,final,execution,vertex,task,vertices,execution,job,vertex,get,task,vertices,assert,that,task,vertices,0,get,execution,state,is,execution,state,scheduled,assert,that,task,vertices,1,get,execution,state,is,execution,state,scheduled,slot,release,slot,new,flink,exception,test,failure,assert,that,execution,graph,get,termination,future,get,is,job,status,failed
ExecutionGraphSchedulingTest -> @Test 	public void testSlotReleasingFailsSchedulingOperation() throws Exception;1532383539;Tests that a partially completed eager scheduling operation fails if a_completed slot is released. See FLINK-9099.;@Test_	public void testSlotReleasingFailsSchedulingOperation() throws Exception {_		final int parallelism = 2___		final JobVertex jobVertex = new JobVertex("Testing job vertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(parallelism)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setAllowQueuedScheduling(true)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)___		final SimpleSlot slot = createSlot(new SimpleAckingTaskManagerGateway(), jobGraph.getJobID(), new DummySlotOwner())__		slotProvider.addSlot(jobVertex.getID(), 0, CompletableFuture.completedFuture(slot))___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertex.getID(), 1, slotFuture)___		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.scheduleForExecution()___		assertThat(executionGraph.getState(), is(JobStatus.RUNNING))___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertex.getID())__		final ExecutionVertex[] taskVertices = executionJobVertex.getTaskVertices()__		assertThat(taskVertices[0].getExecutionState(), is(ExecutionState.SCHEDULED))__		assertThat(taskVertices[1].getExecutionState(), is(ExecutionState.SCHEDULED))___		_		slot.releaseSlot(new FlinkException("Test failure"))___		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.FAILED))__	};tests,that,a,partially,completed,eager,scheduling,operation,fails,if,a,completed,slot,is,released,see,flink,9099;test,public,void,test,slot,releasing,fails,scheduling,operation,throws,exception,final,int,parallelism,2,final,job,vertex,job,vertex,new,job,vertex,testing,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,parallelism,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,allow,queued,scheduling,true,job,graph,set,schedule,mode,schedule,mode,eager,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,final,simple,slot,slot,create,slot,new,simple,acking,task,manager,gateway,job,graph,get,job,id,new,dummy,slot,owner,slot,provider,add,slot,job,vertex,get,id,0,completable,future,completed,future,slot,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,get,id,1,slot,future,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,schedule,for,execution,assert,that,execution,graph,get,state,is,job,status,running,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,get,id,final,execution,vertex,task,vertices,execution,job,vertex,get,task,vertices,assert,that,task,vertices,0,get,execution,state,is,execution,state,scheduled,assert,that,task,vertices,1,get,execution,state,is,execution,state,scheduled,slot,release,slot,new,flink,exception,test,failure,assert,that,execution,graph,get,termination,future,get,is,job,status,failed
ExecutionGraphSchedulingTest -> @Test 	public void testSlotReleasingFailsSchedulingOperation() throws Exception;1532383539;Tests that a partially completed eager scheduling operation fails if a_completed slot is released. See FLINK-9099.;@Test_	public void testSlotReleasingFailsSchedulingOperation() throws Exception {_		final int parallelism = 2___		final JobVertex jobVertex = new JobVertex("Testing job vertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(parallelism)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setAllowQueuedScheduling(true)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)___		final SimpleSlot slot = createSlot(new SimpleAckingTaskManagerGateway(), jobGraph.getJobID(), new DummySlotOwner())__		slotProvider.addSlot(jobVertex.getID(), 0, CompletableFuture.completedFuture(slot))___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertex.getID(), 1, slotFuture)___		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.scheduleForExecution()___		assertThat(executionGraph.getState(), is(JobStatus.RUNNING))___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertex.getID())__		final ExecutionVertex[] taskVertices = executionJobVertex.getTaskVertices()__		assertThat(taskVertices[0].getExecutionState(), is(ExecutionState.SCHEDULED))__		assertThat(taskVertices[1].getExecutionState(), is(ExecutionState.SCHEDULED))___		_		slot.releaseSlot(new FlinkException("Test failure"))___		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.FAILED))__	};tests,that,a,partially,completed,eager,scheduling,operation,fails,if,a,completed,slot,is,released,see,flink,9099;test,public,void,test,slot,releasing,fails,scheduling,operation,throws,exception,final,int,parallelism,2,final,job,vertex,job,vertex,new,job,vertex,testing,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,parallelism,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,allow,queued,scheduling,true,job,graph,set,schedule,mode,schedule,mode,eager,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,final,simple,slot,slot,create,slot,new,simple,acking,task,manager,gateway,job,graph,get,job,id,new,dummy,slot,owner,slot,provider,add,slot,job,vertex,get,id,0,completable,future,completed,future,slot,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,get,id,1,slot,future,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,schedule,for,execution,assert,that,execution,graph,get,state,is,job,status,running,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,get,id,final,execution,vertex,task,vertices,execution,job,vertex,get,task,vertices,assert,that,task,vertices,0,get,execution,state,is,execution,state,scheduled,assert,that,task,vertices,1,get,execution,state,is,execution,state,scheduled,slot,release,slot,new,flink,exception,test,failure,assert,that,execution,graph,get,termination,future,get,is,job,status,failed
ExecutionGraphSchedulingTest -> @Test 	public void testSlotReleasingFailsSchedulingOperation() throws Exception;1549365080;Tests that a partially completed eager scheduling operation fails if a_completed slot is released. See FLINK-9099.;@Test_	public void testSlotReleasingFailsSchedulingOperation() throws Exception {_		final int parallelism = 2___		final JobVertex jobVertex = new JobVertex("Testing job vertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(parallelism)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setAllowQueuedScheduling(true)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)___		final SimpleSlot slot = createSlot(new SimpleAckingTaskManagerGateway(), jobGraph.getJobID(), new DummySlotOwner())__		slotProvider.addSlot(jobVertex.getID(), 0, CompletableFuture.completedFuture(slot))___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertex.getID(), 1, slotFuture)___		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		executionGraph.scheduleForExecution()___		assertThat(executionGraph.getState(), is(JobStatus.RUNNING))___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertex.getID())__		final ExecutionVertex[] taskVertices = executionJobVertex.getTaskVertices()__		assertThat(taskVertices[0].getExecutionState(), is(ExecutionState.SCHEDULED))__		assertThat(taskVertices[1].getExecutionState(), is(ExecutionState.SCHEDULED))___		_		slot.releaseSlot(new FlinkException("Test failure"))___		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.FAILED))__	};tests,that,a,partially,completed,eager,scheduling,operation,fails,if,a,completed,slot,is,released,see,flink,9099;test,public,void,test,slot,releasing,fails,scheduling,operation,throws,exception,final,int,parallelism,2,final,job,vertex,job,vertex,new,job,vertex,testing,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,parallelism,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,allow,queued,scheduling,true,job,graph,set,schedule,mode,schedule,mode,eager,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,final,simple,slot,slot,create,slot,new,simple,acking,task,manager,gateway,job,graph,get,job,id,new,dummy,slot,owner,slot,provider,add,slot,job,vertex,get,id,0,completable,future,completed,future,slot,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,get,id,1,slot,future,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,graph,schedule,for,execution,assert,that,execution,graph,get,state,is,job,status,running,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,get,id,final,execution,vertex,task,vertices,execution,job,vertex,get,task,vertices,assert,that,task,vertices,0,get,execution,state,is,execution,state,scheduled,assert,that,task,vertices,1,get,execution,state,is,execution,state,scheduled,slot,release,slot,new,flink,exception,test,failure,assert,that,execution,graph,get,termination,future,get,is,job,status,failed
ExecutionGraphSchedulingTest -> @Test 	public void testSlotReleasingFailsSchedulingOperation() throws Exception;1550683188;Tests that a partially completed eager scheduling operation fails if a_completed slot is released. See FLINK-9099.;@Test_	public void testSlotReleasingFailsSchedulingOperation() throws Exception {_		final int parallelism = 2___		final JobVertex jobVertex = new JobVertex("Testing job vertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(parallelism)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setAllowQueuedScheduling(true)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)___		final SimpleSlot slot = createSlot(new SimpleAckingTaskManagerGateway(), jobGraph.getJobID(), new DummySlotOwner())__		slotProvider.addSlot(jobVertex.getID(), 0, CompletableFuture.completedFuture(slot))___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertex.getID(), 1, slotFuture)___		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		executionGraph.scheduleForExecution()___		assertThat(executionGraph.getState(), is(JobStatus.RUNNING))___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertex.getID())__		final ExecutionVertex[] taskVertices = executionJobVertex.getTaskVertices()__		assertThat(taskVertices[0].getExecutionState(), is(ExecutionState.SCHEDULED))__		assertThat(taskVertices[1].getExecutionState(), is(ExecutionState.SCHEDULED))___		_		slot.releaseSlot(new FlinkException("Test failure"))___		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.FAILED))__	};tests,that,a,partially,completed,eager,scheduling,operation,fails,if,a,completed,slot,is,released,see,flink,9099;test,public,void,test,slot,releasing,fails,scheduling,operation,throws,exception,final,int,parallelism,2,final,job,vertex,job,vertex,new,job,vertex,testing,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,parallelism,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,allow,queued,scheduling,true,job,graph,set,schedule,mode,schedule,mode,eager,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,final,simple,slot,slot,create,slot,new,simple,acking,task,manager,gateway,job,graph,get,job,id,new,dummy,slot,owner,slot,provider,add,slot,job,vertex,get,id,0,completable,future,completed,future,slot,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,get,id,1,slot,future,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,graph,schedule,for,execution,assert,that,execution,graph,get,state,is,job,status,running,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,get,id,final,execution,vertex,task,vertices,execution,job,vertex,get,task,vertices,assert,that,task,vertices,0,get,execution,state,is,execution,state,scheduled,assert,that,task,vertices,1,get,execution,state,is,execution,state,scheduled,slot,release,slot,new,flink,exception,test,failure,assert,that,execution,graph,get,termination,future,get,is,job,status,failed
ExecutionGraphSchedulingTest -> @Test 	public void testSlotReleasingFailsSchedulingOperation() throws Exception;1550683188;Tests that a partially completed eager scheduling operation fails if a_completed slot is released. See FLINK-9099.;@Test_	public void testSlotReleasingFailsSchedulingOperation() throws Exception {_		final int parallelism = 2___		final JobVertex jobVertex = new JobVertex("Testing job vertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(parallelism)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setAllowQueuedScheduling(true)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)___		final SimpleSlot slot = createSlot(new SimpleAckingTaskManagerGateway(), jobGraph.getJobID(), new DummySlotOwner())__		slotProvider.addSlot(jobVertex.getID(), 0, CompletableFuture.completedFuture(slot))___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertex.getID(), 1, slotFuture)___		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		executionGraph.scheduleForExecution()___		assertThat(executionGraph.getState(), is(JobStatus.RUNNING))___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertex.getID())__		final ExecutionVertex[] taskVertices = executionJobVertex.getTaskVertices()__		assertThat(taskVertices[0].getExecutionState(), is(ExecutionState.SCHEDULED))__		assertThat(taskVertices[1].getExecutionState(), is(ExecutionState.SCHEDULED))___		_		slot.releaseSlot(new FlinkException("Test failure"))___		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.FAILED))__	};tests,that,a,partially,completed,eager,scheduling,operation,fails,if,a,completed,slot,is,released,see,flink,9099;test,public,void,test,slot,releasing,fails,scheduling,operation,throws,exception,final,int,parallelism,2,final,job,vertex,job,vertex,new,job,vertex,testing,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,parallelism,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,allow,queued,scheduling,true,job,graph,set,schedule,mode,schedule,mode,eager,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,final,simple,slot,slot,create,slot,new,simple,acking,task,manager,gateway,job,graph,get,job,id,new,dummy,slot,owner,slot,provider,add,slot,job,vertex,get,id,0,completable,future,completed,future,slot,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,get,id,1,slot,future,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,graph,schedule,for,execution,assert,that,execution,graph,get,state,is,job,status,running,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,get,id,final,execution,vertex,task,vertices,execution,job,vertex,get,task,vertices,assert,that,task,vertices,0,get,execution,state,is,execution,state,scheduled,assert,that,task,vertices,1,get,execution,state,is,execution,state,scheduled,slot,release,slot,new,flink,exception,test,failure,assert,that,execution,graph,get,termination,future,get,is,job,status,failed
ExecutionGraphSchedulingTest -> @Test 	public void testSlotReleasingFailsSchedulingOperation() throws Exception;1550855836;Tests that a partially completed eager scheduling operation fails if a_completed slot is released. See FLINK-9099.;@Test_	public void testSlotReleasingFailsSchedulingOperation() throws Exception {_		final int parallelism = 2___		final JobVertex jobVertex = new JobVertex("Testing job vertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(parallelism)__		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setAllowQueuedScheduling(true)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(parallelism)___		final SimpleSlot slot = createSlot(new SimpleAckingTaskManagerGateway(), jobGraph.getJobID(), new DummySlotOwner())__		slotProvider.addSlot(jobVertex.getID(), 0, CompletableFuture.completedFuture(slot))___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertex.getID(), 1, slotFuture)___		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		executionGraph.scheduleForExecution()___		assertThat(executionGraph.getState(), is(JobStatus.RUNNING))___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertex.getID())__		final ExecutionVertex[] taskVertices = executionJobVertex.getTaskVertices()__		assertThat(taskVertices[0].getExecutionState(), is(ExecutionState.SCHEDULED))__		assertThat(taskVertices[1].getExecutionState(), is(ExecutionState.SCHEDULED))___		_		slot.releaseSlot(new FlinkException("Test failure"))___		assertThat(executionGraph.getTerminationFuture().get(), is(JobStatus.FAILED))__	};tests,that,a,partially,completed,eager,scheduling,operation,fails,if,a,completed,slot,is,released,see,flink,9099;test,public,void,test,slot,releasing,fails,scheduling,operation,throws,exception,final,int,parallelism,2,final,job,vertex,job,vertex,new,job,vertex,testing,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,parallelism,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,allow,queued,scheduling,true,job,graph,set,schedule,mode,schedule,mode,eager,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,parallelism,final,simple,slot,slot,create,slot,new,simple,acking,task,manager,gateway,job,graph,get,job,id,new,dummy,slot,owner,slot,provider,add,slot,job,vertex,get,id,0,completable,future,completed,future,slot,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,get,id,1,slot,future,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,graph,schedule,for,execution,assert,that,execution,graph,get,state,is,job,status,running,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,get,id,final,execution,vertex,task,vertices,execution,job,vertex,get,task,vertices,assert,that,task,vertices,0,get,execution,state,is,execution,state,scheduled,assert,that,task,vertices,1,get,execution,state,is,execution,state,scheduled,slot,release,slot,new,flink,exception,test,failure,assert,that,execution,graph,get,termination,future,get,is,job,status,failed
ExecutionGraphSchedulingTest -> @Test 	public void testCancellationOfIncompleteScheduling() throws Exception;1532383539;Tests that all slots are being returned to the {@link SlotOwner} if the_{@link ExecutionGraph} is being cancelled. See FLINK-9908;@Test_	public void testCancellationOfIncompleteScheduling() throws Exception {_		final int parallelism = 10___		final JobVertex jobVertex = new JobVertex("Test job vertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(parallelism)___		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setAllowQueuedScheduling(true)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)___		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		final SimpleAckingTaskManagerGateway taskManagerGateway = new SimpleAckingTaskManagerGateway()___		final ConcurrentMap<SlotRequestId, Integer> slotRequestIds = new ConcurrentHashMap<>(parallelism)__		final CountDownLatch requestedSlotsLatch = new CountDownLatch(parallelism)___		final TestingSlotProvider slotProvider = new TestingSlotProvider(_			(SlotRequestId slotRequestId) -> {_				slotRequestIds.put(slotRequestId, 1)__				requestedSlotsLatch.countDown()__				return new CompletableFuture<>()__			})____		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.scheduleForExecution()___		_		requestedSlotsLatch.await()___		final Set<SlotRequestId> slotRequestIdsToReturn = ConcurrentHashMap.newKeySet(slotRequestIds.size())__		slotRequestIdsToReturn.addAll(slotRequestIds.keySet())__		final CountDownLatch countDownLatch = new CountDownLatch(slotRequestIds.size())___		slotOwner.setReturnAllocatedSlotConsumer(logicalSlot -> {_			slotRequestIdsToReturn.remove(logicalSlot.getSlotRequestId())__			countDownLatch.countDown()__		})__		slotProvider.setSlotCanceller(slotRequestId -> {_			slotRequestIdsToReturn.remove(slotRequestId)__			countDownLatch.countDown()__		})___		final OneShotLatch slotRequestsBeingFulfilled = new OneShotLatch()___		_		executor.execute(_			() -> {_				slotRequestsBeingFulfilled.trigger()___				for (SlotRequestId slotRequestId : slotRequestIds.keySet()) {_					final SingleLogicalSlot singleLogicalSlot = createSingleLogicalSlot(slotOwner, taskManagerGateway, slotRequestId)__					slotProvider.complete(slotRequestId, singleLogicalSlot)__				}_			})___		_		taskManagerGateway.setCancelConsumer(_			(ExecutionAttemptID executionAttemptId) -> {_				final Execution execution = executionGraph.getRegisteredExecutions().get(executionAttemptId)___				_				if (execution != null) {_					execution.cancelingComplete()__				}_			}_		)___		slotRequestsBeingFulfilled.await()___		executionGraph.cancel()___		countDownLatch.await()__		assertThat(slotRequestIdsToReturn, is(empty()))__	};tests,that,all,slots,are,being,returned,to,the,link,slot,owner,if,the,link,execution,graph,is,being,cancelled,see,flink,9908;test,public,void,test,cancellation,of,incomplete,scheduling,throws,exception,final,int,parallelism,10,final,job,vertex,job,vertex,new,job,vertex,test,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,parallelism,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,allow,queued,scheduling,true,job,graph,set,schedule,mode,schedule,mode,eager,final,testing,slot,owner,slot,owner,new,testing,slot,owner,final,simple,acking,task,manager,gateway,task,manager,gateway,new,simple,acking,task,manager,gateway,final,concurrent,map,slot,request,id,integer,slot,request,ids,new,concurrent,hash,map,parallelism,final,count,down,latch,requested,slots,latch,new,count,down,latch,parallelism,final,testing,slot,provider,slot,provider,new,testing,slot,provider,slot,request,id,slot,request,id,slot,request,ids,put,slot,request,id,1,requested,slots,latch,count,down,return,new,completable,future,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,schedule,for,execution,requested,slots,latch,await,final,set,slot,request,id,slot,request,ids,to,return,concurrent,hash,map,new,key,set,slot,request,ids,size,slot,request,ids,to,return,add,all,slot,request,ids,key,set,final,count,down,latch,count,down,latch,new,count,down,latch,slot,request,ids,size,slot,owner,set,return,allocated,slot,consumer,logical,slot,slot,request,ids,to,return,remove,logical,slot,get,slot,request,id,count,down,latch,count,down,slot,provider,set,slot,canceller,slot,request,id,slot,request,ids,to,return,remove,slot,request,id,count,down,latch,count,down,final,one,shot,latch,slot,requests,being,fulfilled,new,one,shot,latch,executor,execute,slot,requests,being,fulfilled,trigger,for,slot,request,id,slot,request,id,slot,request,ids,key,set,final,single,logical,slot,single,logical,slot,create,single,logical,slot,slot,owner,task,manager,gateway,slot,request,id,slot,provider,complete,slot,request,id,single,logical,slot,task,manager,gateway,set,cancel,consumer,execution,attempt,id,execution,attempt,id,final,execution,execution,execution,graph,get,registered,executions,get,execution,attempt,id,if,execution,null,execution,canceling,complete,slot,requests,being,fulfilled,await,execution,graph,cancel,count,down,latch,await,assert,that,slot,request,ids,to,return,is,empty
ExecutionGraphSchedulingTest -> @Test 	public void testCancellationOfIncompleteScheduling() throws Exception;1532383539;Tests that all slots are being returned to the {@link SlotOwner} if the_{@link ExecutionGraph} is being cancelled. See FLINK-9908;@Test_	public void testCancellationOfIncompleteScheduling() throws Exception {_		final int parallelism = 10___		final JobVertex jobVertex = new JobVertex("Test job vertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(parallelism)___		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setAllowQueuedScheduling(true)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)___		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		final SimpleAckingTaskManagerGateway taskManagerGateway = new SimpleAckingTaskManagerGateway()___		final ConcurrentMap<SlotRequestId, Integer> slotRequestIds = new ConcurrentHashMap<>(parallelism)__		final CountDownLatch requestedSlotsLatch = new CountDownLatch(parallelism)___		final TestingSlotProvider slotProvider = new TestingSlotProvider(_			(SlotRequestId slotRequestId) -> {_				slotRequestIds.put(slotRequestId, 1)__				requestedSlotsLatch.countDown()__				return new CompletableFuture<>()__			})____		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.scheduleForExecution()___		_		requestedSlotsLatch.await()___		final Set<SlotRequestId> slotRequestIdsToReturn = ConcurrentHashMap.newKeySet(slotRequestIds.size())__		slotRequestIdsToReturn.addAll(slotRequestIds.keySet())__		final CountDownLatch countDownLatch = new CountDownLatch(slotRequestIds.size())___		slotOwner.setReturnAllocatedSlotConsumer(logicalSlot -> {_			slotRequestIdsToReturn.remove(logicalSlot.getSlotRequestId())__			countDownLatch.countDown()__		})__		slotProvider.setSlotCanceller(slotRequestId -> {_			slotRequestIdsToReturn.remove(slotRequestId)__			countDownLatch.countDown()__		})___		final OneShotLatch slotRequestsBeingFulfilled = new OneShotLatch()___		_		executor.execute(_			() -> {_				slotRequestsBeingFulfilled.trigger()___				for (SlotRequestId slotRequestId : slotRequestIds.keySet()) {_					final SingleLogicalSlot singleLogicalSlot = createSingleLogicalSlot(slotOwner, taskManagerGateway, slotRequestId)__					slotProvider.complete(slotRequestId, singleLogicalSlot)__				}_			})___		_		taskManagerGateway.setCancelConsumer(_			(ExecutionAttemptID executionAttemptId) -> {_				final Execution execution = executionGraph.getRegisteredExecutions().get(executionAttemptId)___				_				if (execution != null) {_					execution.cancelingComplete()__				}_			}_		)___		slotRequestsBeingFulfilled.await()___		executionGraph.cancel()___		countDownLatch.await()__		assertThat(slotRequestIdsToReturn, is(empty()))__	};tests,that,all,slots,are,being,returned,to,the,link,slot,owner,if,the,link,execution,graph,is,being,cancelled,see,flink,9908;test,public,void,test,cancellation,of,incomplete,scheduling,throws,exception,final,int,parallelism,10,final,job,vertex,job,vertex,new,job,vertex,test,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,parallelism,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,allow,queued,scheduling,true,job,graph,set,schedule,mode,schedule,mode,eager,final,testing,slot,owner,slot,owner,new,testing,slot,owner,final,simple,acking,task,manager,gateway,task,manager,gateway,new,simple,acking,task,manager,gateway,final,concurrent,map,slot,request,id,integer,slot,request,ids,new,concurrent,hash,map,parallelism,final,count,down,latch,requested,slots,latch,new,count,down,latch,parallelism,final,testing,slot,provider,slot,provider,new,testing,slot,provider,slot,request,id,slot,request,id,slot,request,ids,put,slot,request,id,1,requested,slots,latch,count,down,return,new,completable,future,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,schedule,for,execution,requested,slots,latch,await,final,set,slot,request,id,slot,request,ids,to,return,concurrent,hash,map,new,key,set,slot,request,ids,size,slot,request,ids,to,return,add,all,slot,request,ids,key,set,final,count,down,latch,count,down,latch,new,count,down,latch,slot,request,ids,size,slot,owner,set,return,allocated,slot,consumer,logical,slot,slot,request,ids,to,return,remove,logical,slot,get,slot,request,id,count,down,latch,count,down,slot,provider,set,slot,canceller,slot,request,id,slot,request,ids,to,return,remove,slot,request,id,count,down,latch,count,down,final,one,shot,latch,slot,requests,being,fulfilled,new,one,shot,latch,executor,execute,slot,requests,being,fulfilled,trigger,for,slot,request,id,slot,request,id,slot,request,ids,key,set,final,single,logical,slot,single,logical,slot,create,single,logical,slot,slot,owner,task,manager,gateway,slot,request,id,slot,provider,complete,slot,request,id,single,logical,slot,task,manager,gateway,set,cancel,consumer,execution,attempt,id,execution,attempt,id,final,execution,execution,execution,graph,get,registered,executions,get,execution,attempt,id,if,execution,null,execution,canceling,complete,slot,requests,being,fulfilled,await,execution,graph,cancel,count,down,latch,await,assert,that,slot,request,ids,to,return,is,empty
ExecutionGraphSchedulingTest -> @Test 	public void testCancellationOfIncompleteScheduling() throws Exception;1549365080;Tests that all slots are being returned to the {@link SlotOwner} if the_{@link ExecutionGraph} is being cancelled. See FLINK-9908;@Test_	public void testCancellationOfIncompleteScheduling() throws Exception {_		final int parallelism = 10___		final JobVertex jobVertex = new JobVertex("Test job vertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(parallelism)___		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setAllowQueuedScheduling(true)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)___		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		final SimpleAckingTaskManagerGateway taskManagerGateway = new SimpleAckingTaskManagerGateway()___		final ConcurrentMap<SlotRequestId, Integer> slotRequestIds = new ConcurrentHashMap<>(parallelism)___		final TestingSlotProvider slotProvider = new TestingSlotProvider(_			(SlotRequestId slotRequestId) -> {_				slotRequestIds.put(slotRequestId, 1)__				_				return slotRequestIds.size() % 2 == 0 ?_					CompletableFuture.completedFuture(_						createSingleLogicalSlot(slotOwner, taskManagerGateway, slotRequestId)) :_					new CompletableFuture<>()__			})___		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		final Set<SlotRequestId> slotRequestIdsToReturn = ConcurrentHashMap.newKeySet(slotRequestIds.size())___		executionGraph.scheduleForExecution()___		slotRequestIdsToReturn.addAll(slotRequestIds.keySet())___		slotOwner.setReturnAllocatedSlotConsumer(logicalSlot -> {_			slotRequestIdsToReturn.remove(logicalSlot.getSlotRequestId())__		})___		slotProvider.setSlotCanceller(slotRequestIdsToReturn::remove)___		_		taskManagerGateway.setCancelConsumer(_			(ExecutionAttemptID executionAttemptId) -> {_				final Execution execution = executionGraph.getRegisteredExecutions().get(executionAttemptId)___				_				if (execution != null) {_					execution.cancelingComplete()__				}_			}_		)___		executionGraph.cancel()__		assertThat(slotRequestIdsToReturn, is(empty()))__	};tests,that,all,slots,are,being,returned,to,the,link,slot,owner,if,the,link,execution,graph,is,being,cancelled,see,flink,9908;test,public,void,test,cancellation,of,incomplete,scheduling,throws,exception,final,int,parallelism,10,final,job,vertex,job,vertex,new,job,vertex,test,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,parallelism,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,allow,queued,scheduling,true,job,graph,set,schedule,mode,schedule,mode,eager,final,testing,slot,owner,slot,owner,new,testing,slot,owner,final,simple,acking,task,manager,gateway,task,manager,gateway,new,simple,acking,task,manager,gateway,final,concurrent,map,slot,request,id,integer,slot,request,ids,new,concurrent,hash,map,parallelism,final,testing,slot,provider,slot,provider,new,testing,slot,provider,slot,request,id,slot,request,id,slot,request,ids,put,slot,request,id,1,return,slot,request,ids,size,2,0,completable,future,completed,future,create,single,logical,slot,slot,owner,task,manager,gateway,slot,request,id,new,completable,future,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,final,set,slot,request,id,slot,request,ids,to,return,concurrent,hash,map,new,key,set,slot,request,ids,size,execution,graph,schedule,for,execution,slot,request,ids,to,return,add,all,slot,request,ids,key,set,slot,owner,set,return,allocated,slot,consumer,logical,slot,slot,request,ids,to,return,remove,logical,slot,get,slot,request,id,slot,provider,set,slot,canceller,slot,request,ids,to,return,remove,task,manager,gateway,set,cancel,consumer,execution,attempt,id,execution,attempt,id,final,execution,execution,execution,graph,get,registered,executions,get,execution,attempt,id,if,execution,null,execution,canceling,complete,execution,graph,cancel,assert,that,slot,request,ids,to,return,is,empty
ExecutionGraphSchedulingTest -> @Test 	public void testCancellationOfIncompleteScheduling() throws Exception;1550683188;Tests that all slots are being returned to the {@link SlotOwner} if the_{@link ExecutionGraph} is being cancelled. See FLINK-9908;@Test_	public void testCancellationOfIncompleteScheduling() throws Exception {_		final int parallelism = 10___		final JobVertex jobVertex = new JobVertex("Test job vertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(parallelism)___		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setAllowQueuedScheduling(true)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)___		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		final SimpleAckingTaskManagerGateway taskManagerGateway = new SimpleAckingTaskManagerGateway()___		final ConcurrentMap<SlotRequestId, Integer> slotRequestIds = new ConcurrentHashMap<>(parallelism)___		final TestingSlotProvider slotProvider = new TestingSlotProvider(_			(SlotRequestId slotRequestId) -> {_				slotRequestIds.put(slotRequestId, 1)__				_				return slotRequestIds.size() % 2 == 0 ?_					CompletableFuture.completedFuture(_						createSingleLogicalSlot(slotOwner, taskManagerGateway, slotRequestId)) :_					new CompletableFuture<>()__			})___		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		final Set<SlotRequestId> slotRequestIdsToReturn = ConcurrentHashMap.newKeySet(slotRequestIds.size())___		executionGraph.scheduleForExecution()___		slotRequestIdsToReturn.addAll(slotRequestIds.keySet())___		slotOwner.setReturnAllocatedSlotConsumer(logicalSlot -> {_			slotRequestIdsToReturn.remove(logicalSlot.getSlotRequestId())__		})___		slotProvider.setSlotCanceller(slotRequestIdsToReturn::remove)___		_		taskManagerGateway.setCancelConsumer(_			(ExecutionAttemptID executionAttemptId) -> {_				final Execution execution = executionGraph.getRegisteredExecutions().get(executionAttemptId)___				_				if (execution != null) {_					execution.completeCancelling()__				}_			}_		)___		executionGraph.cancel()__		assertThat(slotRequestIdsToReturn, is(empty()))__	};tests,that,all,slots,are,being,returned,to,the,link,slot,owner,if,the,link,execution,graph,is,being,cancelled,see,flink,9908;test,public,void,test,cancellation,of,incomplete,scheduling,throws,exception,final,int,parallelism,10,final,job,vertex,job,vertex,new,job,vertex,test,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,parallelism,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,allow,queued,scheduling,true,job,graph,set,schedule,mode,schedule,mode,eager,final,testing,slot,owner,slot,owner,new,testing,slot,owner,final,simple,acking,task,manager,gateway,task,manager,gateway,new,simple,acking,task,manager,gateway,final,concurrent,map,slot,request,id,integer,slot,request,ids,new,concurrent,hash,map,parallelism,final,testing,slot,provider,slot,provider,new,testing,slot,provider,slot,request,id,slot,request,id,slot,request,ids,put,slot,request,id,1,return,slot,request,ids,size,2,0,completable,future,completed,future,create,single,logical,slot,slot,owner,task,manager,gateway,slot,request,id,new,completable,future,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,final,set,slot,request,id,slot,request,ids,to,return,concurrent,hash,map,new,key,set,slot,request,ids,size,execution,graph,schedule,for,execution,slot,request,ids,to,return,add,all,slot,request,ids,key,set,slot,owner,set,return,allocated,slot,consumer,logical,slot,slot,request,ids,to,return,remove,logical,slot,get,slot,request,id,slot,provider,set,slot,canceller,slot,request,ids,to,return,remove,task,manager,gateway,set,cancel,consumer,execution,attempt,id,execution,attempt,id,final,execution,execution,execution,graph,get,registered,executions,get,execution,attempt,id,if,execution,null,execution,complete,cancelling,execution,graph,cancel,assert,that,slot,request,ids,to,return,is,empty
ExecutionGraphSchedulingTest -> @Test 	public void testCancellationOfIncompleteScheduling() throws Exception;1550683188;Tests that all slots are being returned to the {@link SlotOwner} if the_{@link ExecutionGraph} is being cancelled. See FLINK-9908;@Test_	public void testCancellationOfIncompleteScheduling() throws Exception {_		final int parallelism = 10___		final JobVertex jobVertex = new JobVertex("Test job vertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(parallelism)___		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setAllowQueuedScheduling(true)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)___		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		final SimpleAckingTaskManagerGateway taskManagerGateway = new SimpleAckingTaskManagerGateway()___		final ConcurrentMap<SlotRequestId, Integer> slotRequestIds = new ConcurrentHashMap<>(parallelism)___		final TestingSlotProvider slotProvider = new TestingSlotProvider(_			(SlotRequestId slotRequestId) -> {_				slotRequestIds.put(slotRequestId, 1)__				_				return slotRequestIds.size() % 2 == 0 ?_					CompletableFuture.completedFuture(_						createSingleLogicalSlot(slotOwner, taskManagerGateway, slotRequestId)) :_					new CompletableFuture<>()__			})___		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		final Set<SlotRequestId> slotRequestIdsToReturn = ConcurrentHashMap.newKeySet(slotRequestIds.size())___		executionGraph.scheduleForExecution()___		slotRequestIdsToReturn.addAll(slotRequestIds.keySet())___		slotOwner.setReturnAllocatedSlotConsumer(logicalSlot -> {_			slotRequestIdsToReturn.remove(logicalSlot.getSlotRequestId())__		})___		slotProvider.setSlotCanceller(slotRequestIdsToReturn::remove)___		_		taskManagerGateway.setCancelConsumer(_			(ExecutionAttemptID executionAttemptId) -> {_				final Execution execution = executionGraph.getRegisteredExecutions().get(executionAttemptId)___				_				if (execution != null) {_					execution.completeCancelling()__				}_			}_		)___		executionGraph.cancel()__		assertThat(slotRequestIdsToReturn, is(empty()))__	};tests,that,all,slots,are,being,returned,to,the,link,slot,owner,if,the,link,execution,graph,is,being,cancelled,see,flink,9908;test,public,void,test,cancellation,of,incomplete,scheduling,throws,exception,final,int,parallelism,10,final,job,vertex,job,vertex,new,job,vertex,test,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,parallelism,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,allow,queued,scheduling,true,job,graph,set,schedule,mode,schedule,mode,eager,final,testing,slot,owner,slot,owner,new,testing,slot,owner,final,simple,acking,task,manager,gateway,task,manager,gateway,new,simple,acking,task,manager,gateway,final,concurrent,map,slot,request,id,integer,slot,request,ids,new,concurrent,hash,map,parallelism,final,testing,slot,provider,slot,provider,new,testing,slot,provider,slot,request,id,slot,request,id,slot,request,ids,put,slot,request,id,1,return,slot,request,ids,size,2,0,completable,future,completed,future,create,single,logical,slot,slot,owner,task,manager,gateway,slot,request,id,new,completable,future,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,final,set,slot,request,id,slot,request,ids,to,return,concurrent,hash,map,new,key,set,slot,request,ids,size,execution,graph,schedule,for,execution,slot,request,ids,to,return,add,all,slot,request,ids,key,set,slot,owner,set,return,allocated,slot,consumer,logical,slot,slot,request,ids,to,return,remove,logical,slot,get,slot,request,id,slot,provider,set,slot,canceller,slot,request,ids,to,return,remove,task,manager,gateway,set,cancel,consumer,execution,attempt,id,execution,attempt,id,final,execution,execution,execution,graph,get,registered,executions,get,execution,attempt,id,if,execution,null,execution,complete,cancelling,execution,graph,cancel,assert,that,slot,request,ids,to,return,is,empty
ExecutionGraphSchedulingTest -> @Test 	public void testCancellationOfIncompleteScheduling() throws Exception;1550855836;Tests that all slots are being returned to the {@link SlotOwner} if the_{@link ExecutionGraph} is being cancelled. See FLINK-9908;@Test_	public void testCancellationOfIncompleteScheduling() throws Exception {_		final int parallelism = 10___		final JobVertex jobVertex = new JobVertex("Test job vertex")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		jobVertex.setParallelism(parallelism)___		final JobGraph jobGraph = new JobGraph(jobVertex)__		jobGraph.setAllowQueuedScheduling(true)__		jobGraph.setScheduleMode(ScheduleMode.EAGER)___		final TestingSlotOwner slotOwner = new TestingSlotOwner()__		final SimpleAckingTaskManagerGateway taskManagerGateway = new SimpleAckingTaskManagerGateway()___		final ConcurrentMap<SlotRequestId, Integer> slotRequestIds = new ConcurrentHashMap<>(parallelism)___		final TestingSlotProvider slotProvider = new TestingSlotProvider(_			(SlotRequestId slotRequestId) -> {_				slotRequestIds.put(slotRequestId, 1)__				_				return slotRequestIds.size() % 2 == 0 ?_					CompletableFuture.completedFuture(_						createSingleLogicalSlot(slotOwner, taskManagerGateway, slotRequestId)) :_					new CompletableFuture<>()__			})___		final ExecutionGraph executionGraph = createExecutionGraph(jobGraph, slotProvider)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		final Set<SlotRequestId> slotRequestIdsToReturn = ConcurrentHashMap.newKeySet(slotRequestIds.size())___		executionGraph.scheduleForExecution()___		slotRequestIdsToReturn.addAll(slotRequestIds.keySet())___		slotOwner.setReturnAllocatedSlotConsumer(logicalSlot -> {_			slotRequestIdsToReturn.remove(logicalSlot.getSlotRequestId())__		})___		slotProvider.setSlotCanceller(slotRequestIdsToReturn::remove)___		_		taskManagerGateway.setCancelConsumer(_			(ExecutionAttemptID executionAttemptId) -> {_				final Execution execution = executionGraph.getRegisteredExecutions().get(executionAttemptId)___				_				if (execution != null) {_					execution.completeCancelling()__				}_			}_		)___		executionGraph.cancel()__		assertThat(slotRequestIdsToReturn, is(empty()))__	};tests,that,all,slots,are,being,returned,to,the,link,slot,owner,if,the,link,execution,graph,is,being,cancelled,see,flink,9908;test,public,void,test,cancellation,of,incomplete,scheduling,throws,exception,final,int,parallelism,10,final,job,vertex,job,vertex,new,job,vertex,test,job,vertex,job,vertex,set,invokable,class,no,op,invokable,class,job,vertex,set,parallelism,parallelism,final,job,graph,job,graph,new,job,graph,job,vertex,job,graph,set,allow,queued,scheduling,true,job,graph,set,schedule,mode,schedule,mode,eager,final,testing,slot,owner,slot,owner,new,testing,slot,owner,final,simple,acking,task,manager,gateway,task,manager,gateway,new,simple,acking,task,manager,gateway,final,concurrent,map,slot,request,id,integer,slot,request,ids,new,concurrent,hash,map,parallelism,final,testing,slot,provider,slot,provider,new,testing,slot,provider,slot,request,id,slot,request,id,slot,request,ids,put,slot,request,id,1,return,slot,request,ids,size,2,0,completable,future,completed,future,create,single,logical,slot,slot,owner,task,manager,gateway,slot,request,id,new,completable,future,final,execution,graph,execution,graph,create,execution,graph,job,graph,slot,provider,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,final,set,slot,request,id,slot,request,ids,to,return,concurrent,hash,map,new,key,set,slot,request,ids,size,execution,graph,schedule,for,execution,slot,request,ids,to,return,add,all,slot,request,ids,key,set,slot,owner,set,return,allocated,slot,consumer,logical,slot,slot,request,ids,to,return,remove,logical,slot,get,slot,request,id,slot,provider,set,slot,canceller,slot,request,ids,to,return,remove,task,manager,gateway,set,cancel,consumer,execution,attempt,id,execution,attempt,id,final,execution,execution,execution,graph,get,registered,executions,get,execution,attempt,id,if,execution,null,execution,complete,cancelling,execution,graph,cancel,assert,that,slot,request,ids,to,return,is,empty
