# id;timestamp;commentText;codeText;commentWords;codeWords
TaskExecutorITCase -> @Test 	public void testJobRecoveryWithFailingTaskExecutor() throws Exception;1550148338;Tests that the job can recover from a failing {@link TaskExecutor}.;@Test_	public void testJobRecoveryWithFailingTaskExecutor() throws Exception {_		final JobGraph jobGraph = createJobGraphWithRestartStrategy(PARALLELISM)___		final CompletableFuture<JobResult> jobResultFuture = submitJobAndWaitUntilRunning(jobGraph)___		_		miniCluster.startTaskExecutor()___		miniCluster.terminateTaskExecutor(0).get()_ __		BlockingOperator.unblock()___		assertThat(jobResultFuture.get().isSuccess(), is(true))__	};tests,that,the,job,can,recover,from,a,failing,link,task,executor;test,public,void,test,job,recovery,with,failing,task,executor,throws,exception,final,job,graph,job,graph,create,job,graph,with,restart,strategy,parallelism,final,completable,future,job,result,job,result,future,submit,job,and,wait,until,running,job,graph,mini,cluster,start,task,executor,mini,cluster,terminate,task,executor,0,get,blocking,operator,unblock,assert,that,job,result,future,get,is,success,is,true
TaskExecutorITCase -> @Test 	public void testJobRecoveryWithFailingTaskExecutor() throws Exception;1550148338;Tests that the job can recover from a failing {@link TaskExecutor}.;@Test_	public void testJobRecoveryWithFailingTaskExecutor() throws Exception {_		final JobGraph jobGraph = createJobGraphWithRestartStrategy(PARALLELISM)___		final CompletableFuture<JobResult> jobResultFuture = submitJobAndWaitUntilRunning(jobGraph)___		_		miniCluster.startTaskExecutor()___		miniCluster.terminateTaskExecutor(0).get()_ __		BlockingOperator.unblock()___		assertThat(jobResultFuture.get().isSuccess(), is(true))__	};tests,that,the,job,can,recover,from,a,failing,link,task,executor;test,public,void,test,job,recovery,with,failing,task,executor,throws,exception,final,job,graph,job,graph,create,job,graph,with,restart,strategy,parallelism,final,completable,future,job,result,job,result,future,submit,job,and,wait,until,running,job,graph,mini,cluster,start,task,executor,mini,cluster,terminate,task,executor,0,get,blocking,operator,unblock,assert,that,job,result,future,get,is,success,is,true
TaskExecutorITCase -> @Test 	public void testJobRecoveryWithFailingTaskExecutor() throws Exception;1550483125;Tests that the job can recover from a failing {@link TaskExecutor}.;@Test_	public void testJobRecoveryWithFailingTaskExecutor() throws Exception {_		final JobGraph jobGraph = createJobGraphWithRestartStrategy(PARALLELISM)___		final CompletableFuture<JobResult> jobResultFuture = submitJobAndWaitUntilRunning(jobGraph)___		_		miniCluster.startTaskExecutor()___		miniCluster.terminateTaskExecutor(0).get()_ __		BlockingOperator.unblock()___		assertThat(jobResultFuture.get().isSuccess(), is(true))__	};tests,that,the,job,can,recover,from,a,failing,link,task,executor;test,public,void,test,job,recovery,with,failing,task,executor,throws,exception,final,job,graph,job,graph,create,job,graph,with,restart,strategy,parallelism,final,completable,future,job,result,job,result,future,submit,job,and,wait,until,running,job,graph,mini,cluster,start,task,executor,mini,cluster,terminate,task,executor,0,get,blocking,operator,unblock,assert,that,job,result,future,get,is,success,is,true
TaskExecutorITCase -> @Test 	public void testJobReExecutionAfterTaskExecutorTermination() throws Exception;1550148338;Tests that a job can be re-executed after the job has failed due_to a TaskExecutor termination.;@Test_	public void testJobReExecutionAfterTaskExecutorTermination() throws Exception {_		final JobGraph jobGraph = createJobGraph(PARALLELISM)___		final CompletableFuture<JobResult> jobResultFuture = submitJobAndWaitUntilRunning(jobGraph)___		_		miniCluster.terminateTaskExecutor(0)___		final JobResult jobResult = jobResultFuture.get()___		assertThat(jobResult.isSuccess(), is(false))___		miniCluster.startTaskExecutor()___		BlockingOperator.unblock()___		miniCluster.submitJob(jobGraph).get()___		miniCluster.requestJobResult(jobGraph.getJobID()).get()__	};tests,that,a,job,can,be,re,executed,after,the,job,has,failed,due,to,a,task,executor,termination;test,public,void,test,job,re,execution,after,task,executor,termination,throws,exception,final,job,graph,job,graph,create,job,graph,parallelism,final,completable,future,job,result,job,result,future,submit,job,and,wait,until,running,job,graph,mini,cluster,terminate,task,executor,0,final,job,result,job,result,job,result,future,get,assert,that,job,result,is,success,is,false,mini,cluster,start,task,executor,blocking,operator,unblock,mini,cluster,submit,job,job,graph,get,mini,cluster,request,job,result,job,graph,get,job,id,get
TaskExecutorITCase -> @Test 	public void testJobReExecutionAfterTaskExecutorTermination() throws Exception;1550148338;Tests that a job can be re-executed after the job has failed due_to a TaskExecutor termination.;@Test_	public void testJobReExecutionAfterTaskExecutorTermination() throws Exception {_		final JobGraph jobGraph = createJobGraph(PARALLELISM)___		final CompletableFuture<JobResult> jobResultFuture = submitJobAndWaitUntilRunning(jobGraph)___		_		miniCluster.terminateTaskExecutor(0)___		final JobResult jobResult = jobResultFuture.get()___		assertThat(jobResult.isSuccess(), is(false))___		miniCluster.startTaskExecutor()___		BlockingOperator.unblock()___		miniCluster.submitJob(jobGraph).get()___		miniCluster.requestJobResult(jobGraph.getJobID()).get()__	};tests,that,a,job,can,be,re,executed,after,the,job,has,failed,due,to,a,task,executor,termination;test,public,void,test,job,re,execution,after,task,executor,termination,throws,exception,final,job,graph,job,graph,create,job,graph,parallelism,final,completable,future,job,result,job,result,future,submit,job,and,wait,until,running,job,graph,mini,cluster,terminate,task,executor,0,final,job,result,job,result,job,result,future,get,assert,that,job,result,is,success,is,false,mini,cluster,start,task,executor,blocking,operator,unblock,mini,cluster,submit,job,job,graph,get,mini,cluster,request,job,result,job,graph,get,job,id,get
TaskExecutorITCase -> @Test 	public void testJobReExecutionAfterTaskExecutorTermination() throws Exception;1550483125;Tests that a job can be re-executed after the job has failed due_to a TaskExecutor termination.;@Test_	public void testJobReExecutionAfterTaskExecutorTermination() throws Exception {_		final JobGraph jobGraph = createJobGraph(PARALLELISM)___		final CompletableFuture<JobResult> jobResultFuture = submitJobAndWaitUntilRunning(jobGraph)___		_		miniCluster.terminateTaskExecutor(0)___		final JobResult jobResult = jobResultFuture.get()___		assertThat(jobResult.isSuccess(), is(false))___		miniCluster.startTaskExecutor()___		BlockingOperator.unblock()___		miniCluster.submitJob(jobGraph).get()___		miniCluster.requestJobResult(jobGraph.getJobID()).get()__	};tests,that,a,job,can,be,re,executed,after,the,job,has,failed,due,to,a,task,executor,termination;test,public,void,test,job,re,execution,after,task,executor,termination,throws,exception,final,job,graph,job,graph,create,job,graph,parallelism,final,completable,future,job,result,job,result,future,submit,job,and,wait,until,running,job,graph,mini,cluster,terminate,task,executor,0,final,job,result,job,result,job,result,future,get,assert,that,job,result,is,success,is,false,mini,cluster,start,task,executor,blocking,operator,unblock,mini,cluster,submit,job,job,graph,get,mini,cluster,request,job,result,job,graph,get,job,id,get
