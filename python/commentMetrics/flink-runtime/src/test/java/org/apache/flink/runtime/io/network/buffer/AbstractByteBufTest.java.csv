# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractByteBufTest -> @Test     public void testDiscardReadBytes2();1516285456;The similar test case with {@link #testDiscardReadBytes()} but this one_discards a large chunk at once.;@Test_    public void testDiscardReadBytes2() {_        buffer.writerIndex(0)__        for (int i = 0_ i < buffer.capacity()_ i ++) {_            buffer.writeByte((byte) i)__        }_        ByteBuf copy = copiedBuffer(buffer)___        _        buffer.setIndex(CAPACITY / 2 - 1, CAPACITY - 1)__        buffer.discardReadBytes()__        assertEquals(0, buffer.readerIndex())__        assertEquals(CAPACITY / 2, buffer.writerIndex())__        for (int i = 0_ i < CAPACITY / 2_ i ++) {_            assertEquals(copy.slice(CAPACITY / 2 - 1 + i, CAPACITY / 2 - i), buffer.slice(i, CAPACITY / 2 - i))__        }_        copy.release()__    };the,similar,test,case,with,link,test,discard,read,bytes,but,this,one,discards,a,large,chunk,at,once;test,public,void,test,discard,read,bytes2,buffer,writer,index,0,for,int,i,0,i,buffer,capacity,i,buffer,write,byte,byte,i,byte,buf,copy,copied,buffer,buffer,buffer,set,index,capacity,2,1,capacity,1,buffer,discard,read,bytes,assert,equals,0,buffer,reader,index,assert,equals,capacity,2,buffer,writer,index,for,int,i,0,i,capacity,2,i,assert,equals,copy,slice,capacity,2,1,i,capacity,2,i,buffer,slice,i,capacity,2,i,copy,release
AbstractByteBufTest -> @Test     public void testDiscardReadBytes2();1528876304;The similar test case with {@link #testDiscardReadBytes()} but this one_discards a large chunk at once.;@Test_    public void testDiscardReadBytes2() {_        buffer.writerIndex(0)__        for (int i = 0_ i < buffer.capacity()_ i ++) {_            buffer.writeByte((byte) i)__        }_        ByteBuf copy = copiedBuffer(buffer)___        _        buffer.setIndex(CAPACITY / 2 - 1, CAPACITY - 1)__        buffer.discardReadBytes()__        assertEquals(0, buffer.readerIndex())__        assertEquals(CAPACITY / 2, buffer.writerIndex())__        for (int i = 0_ i < CAPACITY / 2_ i ++) {_            assertEquals(copy.slice(CAPACITY / 2 - 1 + i, CAPACITY / 2 - i), buffer.slice(i, CAPACITY / 2 - i))__        }_        copy.release()__    };the,similar,test,case,with,link,test,discard,read,bytes,but,this,one,discards,a,large,chunk,at,once;test,public,void,test,discard,read,bytes2,buffer,writer,index,0,for,int,i,0,i,buffer,capacity,i,buffer,write,byte,byte,i,byte,buf,copy,copied,buffer,buffer,buffer,set,index,capacity,2,1,capacity,1,buffer,discard,read,bytes,assert,equals,0,buffer,reader,index,assert,equals,capacity,2,buffer,writer,index,for,int,i,0,i,capacity,2,i,assert,equals,copy,slice,capacity,2,1,i,capacity,2,i,buffer,slice,i,capacity,2,i,copy,release
AbstractByteBufTest -> @Test     public void testDiscardReadBytes2();1550306660;The similar test case with {@link #testDiscardReadBytes()} but this one_discards a large chunk at once.;@Test_    public void testDiscardReadBytes2() {_        buffer.writerIndex(0)__        for (int i = 0_ i < buffer.capacity()_ i ++) {_            buffer.writeByte((byte) i)__        }_        ByteBuf copy = copiedBuffer(buffer)___        _        buffer.setIndex(CAPACITY / 2 - 1, CAPACITY - 1)__        buffer.discardReadBytes()__        assertEquals(0, buffer.readerIndex())__        assertEquals(CAPACITY / 2, buffer.writerIndex())__        for (int i = 0_ i < CAPACITY / 2_ i ++) {_            assertEquals(copy.slice(CAPACITY / 2 - 1 + i, CAPACITY / 2 - i), buffer.slice(i, CAPACITY / 2 - i))__        }_        copy.release()__    };the,similar,test,case,with,link,test,discard,read,bytes,but,this,one,discards,a,large,chunk,at,once;test,public,void,test,discard,read,bytes2,buffer,writer,index,0,for,int,i,0,i,buffer,capacity,i,buffer,write,byte,byte,i,byte,buf,copy,copied,buffer,buffer,buffer,set,index,capacity,2,1,capacity,1,buffer,discard,read,bytes,assert,equals,0,buffer,reader,index,assert,equals,capacity,2,buffer,writer,index,for,int,i,0,i,capacity,2,i,assert,equals,copy,slice,capacity,2,1,i,capacity,2,i,buffer,slice,i,capacity,2,i,copy,release
