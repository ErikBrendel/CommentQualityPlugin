# id;timestamp;commentText;codeText;commentWords;codeWords
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeInMemory();1420654570;This test case verifies that hybrid hash join is able to handle multiple probe phases_when the build side fits completely into memory.;@Test_	public void testDoubleProbeInMemory() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			Generator bgen = new Generator(SEED1, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			Generator pgen = new Generator(SEED2, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.GeneratorIterator buildInput = new TestData.GeneratorIterator(bgen, buildSize)__			final TestData.GeneratorIterator probeInput = new TestData.GeneratorIterator(pgen, probeSize)__			_			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};this,test,case,verifies,that,hybrid,hash,join,is,able,to,handle,multiple,probe,phases,when,the,build,side,fits,completely,into,memory;test,public,void,test,double,probe,in,memory,int,build,size,1000,int,probe,size,1000,try,generator,bgen,new,generator,seed1,0,28,key,mode,sorted,value,mode,generator,pgen,new,generator,seed2,0,28,key,mode,sorted,value,mode,final,test,data,generator,iterator,build,input,new,test,data,generator,iterator,bgen,build,size,final,test,data,generator,iterator,probe,input,new,test,data,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeInMemory();1432650142;This test case verifies that hybrid hash join is able to handle multiple probe phases_when the build side fits completely into memory.;@Test_	public void testDoubleProbeInMemory() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			Generator bgen = new Generator(SEED1, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			Generator pgen = new Generator(SEED2, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.GeneratorIterator buildInput = new TestData.GeneratorIterator(bgen, buildSize)__			final TestData.GeneratorIterator probeInput = new TestData.GeneratorIterator(pgen, probeSize)__			_			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};this,test,case,verifies,that,hybrid,hash,join,is,able,to,handle,multiple,probe,phases,when,the,build,side,fits,completely,into,memory;test,public,void,test,double,probe,in,memory,int,build,size,1000,int,probe,size,1000,try,generator,bgen,new,generator,seed1,0,28,key,mode,sorted,value,mode,generator,pgen,new,generator,seed2,0,28,key,mode,sorted,value,mode,final,test,data,generator,iterator,build,input,new,test,data,generator,iterator,bgen,build,size,final,test,data,generator,iterator,probe,input,new,test,data,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeInMemory();1438877580;This test case verifies that hybrid hash join is able to handle multiple probe phases_when the build side fits completely into memory.;@Test_	public void testDoubleProbeInMemory() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			Generator bgen = new Generator(SEED1, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			Generator pgen = new Generator(SEED2, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.GeneratorIterator buildInput = new TestData.GeneratorIterator(bgen, buildSize)__			final TestData.GeneratorIterator probeInput = new TestData.GeneratorIterator(pgen, probeSize)__			_			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};this,test,case,verifies,that,hybrid,hash,join,is,able,to,handle,multiple,probe,phases,when,the,build,side,fits,completely,into,memory;test,public,void,test,double,probe,in,memory,int,build,size,1000,int,probe,size,1000,try,generator,bgen,new,generator,seed1,0,28,key,mode,sorted,value,mode,generator,pgen,new,generator,seed2,0,28,key,mode,sorted,value,mode,final,test,data,generator,iterator,build,input,new,test,data,generator,iterator,bgen,build,size,final,test,data,generator,iterator,probe,input,new,test,data,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeInMemory();1441738685;This test case verifies that hybrid hash join is able to handle multiple probe phases_when the build side fits completely into memory.;@Test_	public void testDoubleProbeInMemory() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			Generator bgen = new Generator(SEED1, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			Generator pgen = new Generator(SEED2, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.GeneratorIterator buildInput = new TestData.GeneratorIterator(bgen, buildSize)__			final TestData.GeneratorIterator probeInput = new TestData.GeneratorIterator(pgen, probeSize)__			_			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};this,test,case,verifies,that,hybrid,hash,join,is,able,to,handle,multiple,probe,phases,when,the,build,side,fits,completely,into,memory;test,public,void,test,double,probe,in,memory,int,build,size,1000,int,probe,size,1000,try,generator,bgen,new,generator,seed1,0,28,key,mode,sorted,value,mode,generator,pgen,new,generator,seed2,0,28,key,mode,sorted,value,mode,final,test,data,generator,iterator,build,input,new,test,data,generator,iterator,bgen,build,size,final,test,data,generator,iterator,probe,input,new,test,data,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeInMemory();1444901442;This test case verifies that hybrid hash join is able to handle multiple probe phases_when the build side fits completely into memory.;@Test_	public void testDoubleProbeInMemory() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			TestData.TupleGenerator bgen = new TestData.TupleGenerator(SEED1, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			TestData.TupleGenerator pgen = new TestData.TupleGenerator(SEED2, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.TupleGeneratorIterator buildInput = new TestData.TupleGeneratorIterator(bgen, buildSize)__			final TestData.TupleGeneratorIterator probeInput = new TestData.TupleGeneratorIterator(pgen, probeSize)__			_			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};this,test,case,verifies,that,hybrid,hash,join,is,able,to,handle,multiple,probe,phases,when,the,build,side,fits,completely,into,memory;test,public,void,test,double,probe,in,memory,int,build,size,1000,int,probe,size,1000,try,test,data,tuple,generator,bgen,new,test,data,tuple,generator,seed1,0,28,key,mode,sorted,value,mode,test,data,tuple,generator,pgen,new,test,data,tuple,generator,seed2,0,28,key,mode,sorted,value,mode,final,test,data,tuple,generator,iterator,build,input,new,test,data,tuple,generator,iterator,bgen,build,size,final,test,data,tuple,generator,iterator,probe,input,new,test,data,tuple,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeInMemory();1445264262;This test case verifies that hybrid hash join is able to handle multiple probe phases_when the build side fits completely into memory.;@Test_	public void testDoubleProbeInMemory() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			TestData.TupleGenerator bgen = new TestData.TupleGenerator(SEED1, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			TestData.TupleGenerator pgen = new TestData.TupleGenerator(SEED2, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.TupleGeneratorIterator buildInput = new TestData.TupleGeneratorIterator(bgen, buildSize)__			final TestData.TupleGeneratorIterator probeInput = new TestData.TupleGeneratorIterator(pgen, probeSize)__			_			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};this,test,case,verifies,that,hybrid,hash,join,is,able,to,handle,multiple,probe,phases,when,the,build,side,fits,completely,into,memory;test,public,void,test,double,probe,in,memory,int,build,size,1000,int,probe,size,1000,try,test,data,tuple,generator,bgen,new,test,data,tuple,generator,seed1,0,28,key,mode,sorted,value,mode,test,data,tuple,generator,pgen,new,test,data,tuple,generator,seed2,0,28,key,mode,sorted,value,mode,final,test,data,tuple,generator,iterator,build,input,new,test,data,tuple,generator,iterator,bgen,build,size,final,test,data,tuple,generator,iterator,probe,input,new,test,data,tuple,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeInMemory();1448385411;This test case verifies that hybrid hash join is able to handle multiple probe phases_when the build side fits completely into memory.;@Test_	public void testDoubleProbeInMemory() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			TestData.TupleGenerator bgen = new TestData.TupleGenerator(SEED1, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			TestData.TupleGenerator pgen = new TestData.TupleGenerator(SEED2, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.TupleGeneratorIterator buildInput = new TestData.TupleGeneratorIterator(bgen, buildSize)__			final TestData.TupleGeneratorIterator probeInput = new TestData.TupleGeneratorIterator(pgen, probeSize)__			_			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};this,test,case,verifies,that,hybrid,hash,join,is,able,to,handle,multiple,probe,phases,when,the,build,side,fits,completely,into,memory;test,public,void,test,double,probe,in,memory,int,build,size,1000,int,probe,size,1000,try,test,data,tuple,generator,bgen,new,test,data,tuple,generator,seed1,0,28,key,mode,sorted,value,mode,test,data,tuple,generator,pgen,new,test,data,tuple,generator,seed2,0,28,key,mode,sorted,value,mode,final,test,data,tuple,generator,iterator,build,input,new,test,data,tuple,generator,iterator,bgen,build,size,final,test,data,tuple,generator,iterator,probe,input,new,test,data,tuple,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeInMemory();1453866659;This test case verifies that hybrid hash join is able to handle multiple probe phases_when the build side fits completely into memory.;@Test_	public void testDoubleProbeInMemory() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			TestData.TupleGenerator bgen = new TestData.TupleGenerator(SEED1, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			TestData.TupleGenerator pgen = new TestData.TupleGenerator(SEED2, 0, 28, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.TupleGeneratorIterator buildInput = new TestData.TupleGeneratorIterator(bgen, buildSize)__			final TestData.TupleGeneratorIterator probeInput = new TestData.TupleGeneratorIterator(pgen, probeSize)__			_			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};this,test,case,verifies,that,hybrid,hash,join,is,able,to,handle,multiple,probe,phases,when,the,build,side,fits,completely,into,memory;test,public,void,test,double,probe,in,memory,int,build,size,1000,int,probe,size,1000,try,test,data,tuple,generator,bgen,new,test,data,tuple,generator,seed1,0,28,key,mode,sorted,value,mode,test,data,tuple,generator,pgen,new,test,data,tuple,generator,seed2,0,28,key,mode,sorted,value,mode,final,test,data,tuple,generator,iterator,build,input,new,test,data,tuple,generator,iterator,bgen,build,size,final,test,data,tuple,generator,iterator,probe,input,new,test,data,tuple,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testOverflow();1420654570;Test behavior with overflow buckets (Overflow buckets must be initialized correctly_if the input is reopened again);@Test_	public void testOverflow() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			Generator bgen = new Generator(SEED1, 200, 1024, KeyMode.RANDOM, ValueMode.FIX_LENGTH)__			Generator pgen = new Generator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.GeneratorIterator buildInput = new TestData.GeneratorIterator(bgen, buildSize)__			final TestData.GeneratorIterator probeInput = new TestData.GeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};test,behavior,with,overflow,buckets,overflow,buckets,must,be,initialized,correctly,if,the,input,is,reopened,again;test,public,void,test,overflow,int,build,size,1000,int,probe,size,1000,try,generator,bgen,new,generator,seed1,200,1024,key,mode,random,value,mode,generator,pgen,new,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,generator,iterator,build,input,new,test,data,generator,iterator,bgen,build,size,final,test,data,generator,iterator,probe,input,new,test,data,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testOverflow();1432650142;Test behavior with overflow buckets (Overflow buckets must be initialized correctly_if the input is reopened again);@Test_	public void testOverflow() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			Generator bgen = new Generator(SEED1, 200, 1024, KeyMode.RANDOM, ValueMode.FIX_LENGTH)__			Generator pgen = new Generator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.GeneratorIterator buildInput = new TestData.GeneratorIterator(bgen, buildSize)__			final TestData.GeneratorIterator probeInput = new TestData.GeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};test,behavior,with,overflow,buckets,overflow,buckets,must,be,initialized,correctly,if,the,input,is,reopened,again;test,public,void,test,overflow,int,build,size,1000,int,probe,size,1000,try,generator,bgen,new,generator,seed1,200,1024,key,mode,random,value,mode,generator,pgen,new,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,generator,iterator,build,input,new,test,data,generator,iterator,bgen,build,size,final,test,data,generator,iterator,probe,input,new,test,data,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testOverflow();1438877580;Test behavior with overflow buckets (Overflow buckets must be initialized correctly_if the input is reopened again);@Test_	public void testOverflow() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			Generator bgen = new Generator(SEED1, 200, 1024, KeyMode.RANDOM, ValueMode.FIX_LENGTH)__			Generator pgen = new Generator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.GeneratorIterator buildInput = new TestData.GeneratorIterator(bgen, buildSize)__			final TestData.GeneratorIterator probeInput = new TestData.GeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};test,behavior,with,overflow,buckets,overflow,buckets,must,be,initialized,correctly,if,the,input,is,reopened,again;test,public,void,test,overflow,int,build,size,1000,int,probe,size,1000,try,generator,bgen,new,generator,seed1,200,1024,key,mode,random,value,mode,generator,pgen,new,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,generator,iterator,build,input,new,test,data,generator,iterator,bgen,build,size,final,test,data,generator,iterator,probe,input,new,test,data,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testOverflow();1441738685;Test behavior with overflow buckets (Overflow buckets must be initialized correctly_if the input is reopened again);@Test_	public void testOverflow() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			Generator bgen = new Generator(SEED1, 200, 1024, KeyMode.RANDOM, ValueMode.FIX_LENGTH)__			Generator pgen = new Generator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.GeneratorIterator buildInput = new TestData.GeneratorIterator(bgen, buildSize)__			final TestData.GeneratorIterator probeInput = new TestData.GeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};test,behavior,with,overflow,buckets,overflow,buckets,must,be,initialized,correctly,if,the,input,is,reopened,again;test,public,void,test,overflow,int,build,size,1000,int,probe,size,1000,try,generator,bgen,new,generator,seed1,200,1024,key,mode,random,value,mode,generator,pgen,new,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,generator,iterator,build,input,new,test,data,generator,iterator,bgen,build,size,final,test,data,generator,iterator,probe,input,new,test,data,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testOverflow();1444901442;Test behavior with overflow buckets (Overflow buckets must be initialized correctly_if the input is reopened again);@Test_	public void testOverflow() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			TestData.TupleGenerator bgen = new TestData.TupleGenerator(SEED1, 200, 1024, KeyMode.RANDOM, ValueMode.FIX_LENGTH)__			TestData.TupleGenerator pgen = new TestData.TupleGenerator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.TupleGeneratorIterator buildInput = new TestData.TupleGeneratorIterator(bgen, buildSize)__			final TestData.TupleGeneratorIterator probeInput = new TestData.TupleGeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};test,behavior,with,overflow,buckets,overflow,buckets,must,be,initialized,correctly,if,the,input,is,reopened,again;test,public,void,test,overflow,int,build,size,1000,int,probe,size,1000,try,test,data,tuple,generator,bgen,new,test,data,tuple,generator,seed1,200,1024,key,mode,random,value,mode,test,data,tuple,generator,pgen,new,test,data,tuple,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,tuple,generator,iterator,build,input,new,test,data,tuple,generator,iterator,bgen,build,size,final,test,data,tuple,generator,iterator,probe,input,new,test,data,tuple,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testOverflow();1445264262;Test behavior with overflow buckets (Overflow buckets must be initialized correctly_if the input is reopened again);@Test_	public void testOverflow() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			TestData.TupleGenerator bgen = new TestData.TupleGenerator(SEED1, 200, 1024, KeyMode.RANDOM, ValueMode.FIX_LENGTH)__			TestData.TupleGenerator pgen = new TestData.TupleGenerator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.TupleGeneratorIterator buildInput = new TestData.TupleGeneratorIterator(bgen, buildSize)__			final TestData.TupleGeneratorIterator probeInput = new TestData.TupleGeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};test,behavior,with,overflow,buckets,overflow,buckets,must,be,initialized,correctly,if,the,input,is,reopened,again;test,public,void,test,overflow,int,build,size,1000,int,probe,size,1000,try,test,data,tuple,generator,bgen,new,test,data,tuple,generator,seed1,200,1024,key,mode,random,value,mode,test,data,tuple,generator,pgen,new,test,data,tuple,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,tuple,generator,iterator,build,input,new,test,data,tuple,generator,iterator,bgen,build,size,final,test,data,tuple,generator,iterator,probe,input,new,test,data,tuple,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testOverflow();1448385411;Test behavior with overflow buckets (Overflow buckets must be initialized correctly_if the input is reopened again);@Test_	public void testOverflow() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			TestData.TupleGenerator bgen = new TestData.TupleGenerator(SEED1, 200, 1024, KeyMode.RANDOM, ValueMode.FIX_LENGTH)__			TestData.TupleGenerator pgen = new TestData.TupleGenerator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.TupleGeneratorIterator buildInput = new TestData.TupleGeneratorIterator(bgen, buildSize)__			final TestData.TupleGeneratorIterator probeInput = new TestData.TupleGeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};test,behavior,with,overflow,buckets,overflow,buckets,must,be,initialized,correctly,if,the,input,is,reopened,again;test,public,void,test,overflow,int,build,size,1000,int,probe,size,1000,try,test,data,tuple,generator,bgen,new,test,data,tuple,generator,seed1,200,1024,key,mode,random,value,mode,test,data,tuple,generator,pgen,new,test,data,tuple,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,tuple,generator,iterator,build,input,new,test,data,tuple,generator,iterator,bgen,build,size,final,test,data,tuple,generator,iterator,probe,input,new,test,data,tuple,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testOverflow();1453866659;Test behavior with overflow buckets (Overflow buckets must be initialized correctly_if the input is reopened again);@Test_	public void testOverflow() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			TestData.TupleGenerator bgen = new TestData.TupleGenerator(SEED1, 200, 1024, KeyMode.RANDOM, ValueMode.FIX_LENGTH)__			TestData.TupleGenerator pgen = new TestData.TupleGenerator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.TupleGeneratorIterator buildInput = new TestData.TupleGeneratorIterator(bgen, buildSize)__			final TestData.TupleGeneratorIterator probeInput = new TestData.TupleGeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};test,behavior,with,overflow,buckets,overflow,buckets,must,be,initialized,correctly,if,the,input,is,reopened,again;test,public,void,test,overflow,int,build,size,1000,int,probe,size,1000,try,test,data,tuple,generator,bgen,new,test,data,tuple,generator,seed1,200,1024,key,mode,random,value,mode,test,data,tuple,generator,pgen,new,test,data,tuple,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,tuple,generator,iterator,build,input,new,test,data,tuple,generator,iterator,bgen,build,size,final,test,data,tuple,generator,iterator,probe,input,new,test,data,tuple,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeSpilling();1420654570;Verify proper operation if the build side is spilled to disk.;@Test_	public void testDoubleProbeSpilling() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			Generator bgen = new Generator(SEED1, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			Generator pgen = new Generator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.GeneratorIterator buildInput = new TestData.GeneratorIterator(bgen, buildSize)__			final TestData.GeneratorIterator probeInput = new TestData.GeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};verify,proper,operation,if,the,build,side,is,spilled,to,disk;test,public,void,test,double,probe,spilling,int,build,size,1000,int,probe,size,1000,try,generator,bgen,new,generator,seed1,0,1024,key,mode,sorted,value,mode,generator,pgen,new,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,generator,iterator,build,input,new,test,data,generator,iterator,bgen,build,size,final,test,data,generator,iterator,probe,input,new,test,data,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeSpilling();1432650142;Verify proper operation if the build side is spilled to disk.;@Test_	public void testDoubleProbeSpilling() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			Generator bgen = new Generator(SEED1, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			Generator pgen = new Generator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.GeneratorIterator buildInput = new TestData.GeneratorIterator(bgen, buildSize)__			final TestData.GeneratorIterator probeInput = new TestData.GeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};verify,proper,operation,if,the,build,side,is,spilled,to,disk;test,public,void,test,double,probe,spilling,int,build,size,1000,int,probe,size,1000,try,generator,bgen,new,generator,seed1,0,1024,key,mode,sorted,value,mode,generator,pgen,new,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,generator,iterator,build,input,new,test,data,generator,iterator,bgen,build,size,final,test,data,generator,iterator,probe,input,new,test,data,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeSpilling();1438877580;Verify proper operation if the build side is spilled to disk.;@Test_	public void testDoubleProbeSpilling() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			Generator bgen = new Generator(SEED1, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			Generator pgen = new Generator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.GeneratorIterator buildInput = new TestData.GeneratorIterator(bgen, buildSize)__			final TestData.GeneratorIterator probeInput = new TestData.GeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};verify,proper,operation,if,the,build,side,is,spilled,to,disk;test,public,void,test,double,probe,spilling,int,build,size,1000,int,probe,size,1000,try,generator,bgen,new,generator,seed1,0,1024,key,mode,sorted,value,mode,generator,pgen,new,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,generator,iterator,build,input,new,test,data,generator,iterator,bgen,build,size,final,test,data,generator,iterator,probe,input,new,test,data,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeSpilling();1441738685;Verify proper operation if the build side is spilled to disk.;@Test_	public void testDoubleProbeSpilling() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			Generator bgen = new Generator(SEED1, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			Generator pgen = new Generator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.GeneratorIterator buildInput = new TestData.GeneratorIterator(bgen, buildSize)__			final TestData.GeneratorIterator probeInput = new TestData.GeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};verify,proper,operation,if,the,build,side,is,spilled,to,disk;test,public,void,test,double,probe,spilling,int,build,size,1000,int,probe,size,1000,try,generator,bgen,new,generator,seed1,0,1024,key,mode,sorted,value,mode,generator,pgen,new,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,generator,iterator,build,input,new,test,data,generator,iterator,bgen,build,size,final,test,data,generator,iterator,probe,input,new,test,data,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeSpilling();1444901442;Verify proper operation if the build side is spilled to disk.;@Test_	public void testDoubleProbeSpilling() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			TestData.TupleGenerator bgen = new TestData.TupleGenerator(SEED1, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			TestData.TupleGenerator pgen = new TestData.TupleGenerator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.TupleGeneratorIterator buildInput = new TestData.TupleGeneratorIterator(bgen, buildSize)__			final TestData.TupleGeneratorIterator probeInput = new TestData.TupleGeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};verify,proper,operation,if,the,build,side,is,spilled,to,disk;test,public,void,test,double,probe,spilling,int,build,size,1000,int,probe,size,1000,try,test,data,tuple,generator,bgen,new,test,data,tuple,generator,seed1,0,1024,key,mode,sorted,value,mode,test,data,tuple,generator,pgen,new,test,data,tuple,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,tuple,generator,iterator,build,input,new,test,data,tuple,generator,iterator,bgen,build,size,final,test,data,tuple,generator,iterator,probe,input,new,test,data,tuple,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeSpilling();1445264262;Verify proper operation if the build side is spilled to disk.;@Test_	public void testDoubleProbeSpilling() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			TestData.TupleGenerator bgen = new TestData.TupleGenerator(SEED1, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			TestData.TupleGenerator pgen = new TestData.TupleGenerator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.TupleGeneratorIterator buildInput = new TestData.TupleGeneratorIterator(bgen, buildSize)__			final TestData.TupleGeneratorIterator probeInput = new TestData.TupleGeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};verify,proper,operation,if,the,build,side,is,spilled,to,disk;test,public,void,test,double,probe,spilling,int,build,size,1000,int,probe,size,1000,try,test,data,tuple,generator,bgen,new,test,data,tuple,generator,seed1,0,1024,key,mode,sorted,value,mode,test,data,tuple,generator,pgen,new,test,data,tuple,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,tuple,generator,iterator,build,input,new,test,data,tuple,generator,iterator,bgen,build,size,final,test,data,tuple,generator,iterator,probe,input,new,test,data,tuple,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeSpilling();1448385411;Verify proper operation if the build side is spilled to disk.;@Test_	public void testDoubleProbeSpilling() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			TestData.TupleGenerator bgen = new TestData.TupleGenerator(SEED1, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			TestData.TupleGenerator pgen = new TestData.TupleGenerator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.TupleGeneratorIterator buildInput = new TestData.TupleGeneratorIterator(bgen, buildSize)__			final TestData.TupleGeneratorIterator probeInput = new TestData.TupleGeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};verify,proper,operation,if,the,build,side,is,spilled,to,disk;test,public,void,test,double,probe,spilling,int,build,size,1000,int,probe,size,1000,try,test,data,tuple,generator,bgen,new,test,data,tuple,generator,seed1,0,1024,key,mode,sorted,value,mode,test,data,tuple,generator,pgen,new,test,data,tuple,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,tuple,generator,iterator,build,input,new,test,data,tuple,generator,iterator,bgen,build,size,final,test,data,tuple,generator,iterator,probe,input,new,test,data,tuple,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
ReusingReOpenableHashTableITCase -> @Test 	public void testDoubleProbeSpilling();1453866659;Verify proper operation if the build side is spilled to disk.;@Test_	public void testDoubleProbeSpilling() {_		_		int buildSize = 1000__		int probeSize = 1000__		try {_			TestData.TupleGenerator bgen = new TestData.TupleGenerator(SEED1, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			TestData.TupleGenerator pgen = new TestData.TupleGenerator(SEED2, 0, 1024, KeyMode.SORTED, ValueMode.FIX_LENGTH)__			_			final TestData.TupleGeneratorIterator buildInput = new TestData.TupleGeneratorIterator(bgen, buildSize)__			final TestData.TupleGeneratorIterator probeInput = new TestData.TupleGeneratorIterator(pgen, probeSize)__			doTest(buildInput,probeInput, bgen, pgen)__		}_		catch (Exception e) {_			e.printStackTrace()__			Assert.fail("An exception occurred during the test: " + e.getMessage())__		}_	};verify,proper,operation,if,the,build,side,is,spilled,to,disk;test,public,void,test,double,probe,spilling,int,build,size,1000,int,probe,size,1000,try,test,data,tuple,generator,bgen,new,test,data,tuple,generator,seed1,0,1024,key,mode,sorted,value,mode,test,data,tuple,generator,pgen,new,test,data,tuple,generator,seed2,0,1024,key,mode,sorted,value,mode,final,test,data,tuple,generator,iterator,build,input,new,test,data,tuple,generator,iterator,bgen,build,size,final,test,data,tuple,generator,iterator,probe,input,new,test,data,tuple,generator,iterator,pgen,probe,size,do,test,build,input,probe,input,bgen,pgen,catch,exception,e,e,print,stack,trace,assert,fail,an,exception,occurred,during,the,test,e,get,message
