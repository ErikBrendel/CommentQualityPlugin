# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutionGraphStopTest -> @Test 	public void testStop() throws Exception;1493831843;Validates that stop is only sent to the sources__This test build a simple job with two sources and two non-source vertices.;@Test_	public void testStop() throws Exception {_		final int sourcePar1 = 11__		final int sourcePar2 = 7___		final JobVertex source1 = new JobVertex("source 1")__		source1.setInvokableClass(StoppableInvokable.class)__		source1.setParallelism(sourcePar1)___		final JobVertex source2 = new JobVertex("source 2")__		source2.setInvokableClass(StoppableInvokable.class)__		source2.setParallelism(sourcePar2)___		final JobVertex nonSource1 = new JobVertex("non-source-1")__		nonSource1.setInvokableClass(NoOpInvokable.class)__		nonSource1.setParallelism(10)___		final JobVertex nonSource2 = new JobVertex("non-source-2")__		nonSource2.setInvokableClass(NoOpInvokable.class)__		nonSource2.setParallelism(10)___		nonSource1.connectNewDataSetAsInput(source1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		nonSource1.connectNewDataSetAsInput(source2, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		nonSource2.connectNewDataSetAsInput(nonSource1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jid = new JobID()__		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(_				jid, source1, source2, nonSource1, nonSource2)___		_		_		final TaskManagerGateway sourceGateway = spy(new SimpleAckingTaskManagerGateway())__		final TaskManagerGateway nonSourceGateway = spy(new SimpleAckingTaskManagerGateway())___		_		for (ExecutionVertex ev : eg.getJobVertex(source1.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, sourceGateway)__			ev.getCurrentExecutionAttempt().deployToSlot(slot)__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(source2.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, sourceGateway)__			ev.getCurrentExecutionAttempt().deployToSlot(slot)__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(nonSource1.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, nonSourceGateway)__			ev.getCurrentExecutionAttempt().deployToSlot(slot)__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(nonSource2.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, nonSourceGateway)__			ev.getCurrentExecutionAttempt().deployToSlot(slot)__		}__		eg.stop()___		verify(sourceGateway, timeout(1000).times(sourcePar1 + sourcePar2)).stopTask(any(ExecutionAttemptID.class), any(Time.class))__		verify(nonSourceGateway, times(0)).stopTask(any(ExecutionAttemptID.class), any(Time.class))___		ExecutionGraphTestUtils.finishAllVertices(eg)__	};validates,that,stop,is,only,sent,to,the,sources,this,test,build,a,simple,job,with,two,sources,and,two,non,source,vertices;test,public,void,test,stop,throws,exception,final,int,source,par1,11,final,int,source,par2,7,final,job,vertex,source1,new,job,vertex,source,1,source1,set,invokable,class,stoppable,invokable,class,source1,set,parallelism,source,par1,final,job,vertex,source2,new,job,vertex,source,2,source2,set,invokable,class,stoppable,invokable,class,source2,set,parallelism,source,par2,final,job,vertex,non,source1,new,job,vertex,non,source,1,non,source1,set,invokable,class,no,op,invokable,class,non,source1,set,parallelism,10,final,job,vertex,non,source2,new,job,vertex,non,source,2,non,source2,set,invokable,class,no,op,invokable,class,non,source2,set,parallelism,10,non,source1,connect,new,data,set,as,input,source1,distribution,pattern,result,partition,type,pipelined,non,source1,connect,new,data,set,as,input,source2,distribution,pattern,pointwise,result,partition,type,pipelined,non,source2,connect,new,data,set,as,input,non,source1,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,jid,new,job,id,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,jid,source1,source2,non,source1,non,source2,final,task,manager,gateway,source,gateway,spy,new,simple,acking,task,manager,gateway,final,task,manager,gateway,non,source,gateway,spy,new,simple,acking,task,manager,gateway,for,execution,vertex,ev,eg,get,job,vertex,source1,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,source,gateway,ev,get,current,execution,attempt,deploy,to,slot,slot,for,execution,vertex,ev,eg,get,job,vertex,source2,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,source,gateway,ev,get,current,execution,attempt,deploy,to,slot,slot,for,execution,vertex,ev,eg,get,job,vertex,non,source1,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,non,source,gateway,ev,get,current,execution,attempt,deploy,to,slot,slot,for,execution,vertex,ev,eg,get,job,vertex,non,source2,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,non,source,gateway,ev,get,current,execution,attempt,deploy,to,slot,slot,eg,stop,verify,source,gateway,timeout,1000,times,source,par1,source,par2,stop,task,any,execution,attempt,id,class,any,time,class,verify,non,source,gateway,times,0,stop,task,any,execution,attempt,id,class,any,time,class,execution,graph,test,utils,finish,all,vertices,eg
ExecutionGraphStopTest -> @Test 	public void testStop() throws Exception;1501760738;Validates that stop is only sent to the sources__This test build a simple job with two sources and two non-source vertices.;@Test_	public void testStop() throws Exception {_		final int sourcePar1 = 11__		final int sourcePar2 = 7___		final JobVertex source1 = new JobVertex("source 1")__		source1.setInvokableClass(StoppableInvokable.class)__		source1.setParallelism(sourcePar1)___		final JobVertex source2 = new JobVertex("source 2")__		source2.setInvokableClass(StoppableInvokable.class)__		source2.setParallelism(sourcePar2)___		final JobVertex nonSource1 = new JobVertex("non-source-1")__		nonSource1.setInvokableClass(NoOpInvokable.class)__		nonSource1.setParallelism(10)___		final JobVertex nonSource2 = new JobVertex("non-source-2")__		nonSource2.setInvokableClass(NoOpInvokable.class)__		nonSource2.setParallelism(10)___		nonSource1.connectNewDataSetAsInput(source1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		nonSource1.connectNewDataSetAsInput(source2, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		nonSource2.connectNewDataSetAsInput(nonSource1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jid = new JobID()__		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(_				jid, source1, source2, nonSource1, nonSource2)___		_		_		final TaskManagerGateway sourceGateway = spy(new SimpleAckingTaskManagerGateway())__		final TaskManagerGateway nonSourceGateway = spy(new SimpleAckingTaskManagerGateway())___		_		for (ExecutionVertex ev : eg.getJobVertex(source1.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, sourceGateway)__			ev.getCurrentExecutionAttempt().deployToSlot(slot)__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(source2.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, sourceGateway)__			ev.getCurrentExecutionAttempt().deployToSlot(slot)__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(nonSource1.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, nonSourceGateway)__			ev.getCurrentExecutionAttempt().deployToSlot(slot)__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(nonSource2.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, nonSourceGateway)__			ev.getCurrentExecutionAttempt().deployToSlot(slot)__		}__		eg.stop()___		verify(sourceGateway, timeout(1000).times(sourcePar1 + sourcePar2)).stopTask(any(ExecutionAttemptID.class), any(Time.class))__		verify(nonSourceGateway, times(0)).stopTask(any(ExecutionAttemptID.class), any(Time.class))___		ExecutionGraphTestUtils.finishAllVertices(eg)__	};validates,that,stop,is,only,sent,to,the,sources,this,test,build,a,simple,job,with,two,sources,and,two,non,source,vertices;test,public,void,test,stop,throws,exception,final,int,source,par1,11,final,int,source,par2,7,final,job,vertex,source1,new,job,vertex,source,1,source1,set,invokable,class,stoppable,invokable,class,source1,set,parallelism,source,par1,final,job,vertex,source2,new,job,vertex,source,2,source2,set,invokable,class,stoppable,invokable,class,source2,set,parallelism,source,par2,final,job,vertex,non,source1,new,job,vertex,non,source,1,non,source1,set,invokable,class,no,op,invokable,class,non,source1,set,parallelism,10,final,job,vertex,non,source2,new,job,vertex,non,source,2,non,source2,set,invokable,class,no,op,invokable,class,non,source2,set,parallelism,10,non,source1,connect,new,data,set,as,input,source1,distribution,pattern,result,partition,type,pipelined,non,source1,connect,new,data,set,as,input,source2,distribution,pattern,pointwise,result,partition,type,pipelined,non,source2,connect,new,data,set,as,input,non,source1,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,jid,new,job,id,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,jid,source1,source2,non,source1,non,source2,final,task,manager,gateway,source,gateway,spy,new,simple,acking,task,manager,gateway,final,task,manager,gateway,non,source,gateway,spy,new,simple,acking,task,manager,gateway,for,execution,vertex,ev,eg,get,job,vertex,source1,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,source,gateway,ev,get,current,execution,attempt,deploy,to,slot,slot,for,execution,vertex,ev,eg,get,job,vertex,source2,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,source,gateway,ev,get,current,execution,attempt,deploy,to,slot,slot,for,execution,vertex,ev,eg,get,job,vertex,non,source1,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,non,source,gateway,ev,get,current,execution,attempt,deploy,to,slot,slot,for,execution,vertex,ev,eg,get,job,vertex,non,source2,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,non,source,gateway,ev,get,current,execution,attempt,deploy,to,slot,slot,eg,stop,verify,source,gateway,timeout,1000,times,source,par1,source,par2,stop,task,any,execution,attempt,id,class,any,time,class,verify,non,source,gateway,times,0,stop,task,any,execution,attempt,id,class,any,time,class,execution,graph,test,utils,finish,all,vertices,eg
ExecutionGraphStopTest -> @Test 	public void testStop() throws Exception;1509638684;Validates that stop is only sent to the sources__This test build a simple job with two sources and two non-source vertices.;@Test_	public void testStop() throws Exception {_		final int sourcePar1 = 11__		final int sourcePar2 = 7___		final JobVertex source1 = new JobVertex("source 1")__		source1.setInvokableClass(StoppableInvokable.class)__		source1.setParallelism(sourcePar1)___		final JobVertex source2 = new JobVertex("source 2")__		source2.setInvokableClass(StoppableInvokable.class)__		source2.setParallelism(sourcePar2)___		final JobVertex nonSource1 = new JobVertex("non-source-1")__		nonSource1.setInvokableClass(NoOpInvokable.class)__		nonSource1.setParallelism(10)___		final JobVertex nonSource2 = new JobVertex("non-source-2")__		nonSource2.setInvokableClass(NoOpInvokable.class)__		nonSource2.setParallelism(10)___		nonSource1.connectNewDataSetAsInput(source1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		nonSource1.connectNewDataSetAsInput(source2, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		nonSource2.connectNewDataSetAsInput(nonSource1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jid = new JobID()__		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(_				jid, source1, source2, nonSource1, nonSource2)___		_		_		final TaskManagerGateway sourceGateway = spy(new SimpleAckingTaskManagerGateway())__		final TaskManagerGateway nonSourceGateway = spy(new SimpleAckingTaskManagerGateway())___		_		for (ExecutionVertex ev : eg.getJobVertex(source1.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, sourceGateway)__			ev.getCurrentExecutionAttempt().tryAssignResource(slot)__			ev.getCurrentExecutionAttempt().deploy()__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(source2.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, sourceGateway)__			ev.getCurrentExecutionAttempt().tryAssignResource(slot)__			ev.getCurrentExecutionAttempt().deploy()__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(nonSource1.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, nonSourceGateway)__			ev.getCurrentExecutionAttempt().tryAssignResource(slot)__			ev.getCurrentExecutionAttempt().deploy()__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(nonSource2.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, nonSourceGateway)__			ev.getCurrentExecutionAttempt().tryAssignResource(slot)__			ev.getCurrentExecutionAttempt().deploy()__		}__		eg.stop()___		verify(sourceGateway, timeout(1000).times(sourcePar1 + sourcePar2)).stopTask(any(ExecutionAttemptID.class), any(Time.class))__		verify(nonSourceGateway, times(0)).stopTask(any(ExecutionAttemptID.class), any(Time.class))___		ExecutionGraphTestUtils.finishAllVertices(eg)__	};validates,that,stop,is,only,sent,to,the,sources,this,test,build,a,simple,job,with,two,sources,and,two,non,source,vertices;test,public,void,test,stop,throws,exception,final,int,source,par1,11,final,int,source,par2,7,final,job,vertex,source1,new,job,vertex,source,1,source1,set,invokable,class,stoppable,invokable,class,source1,set,parallelism,source,par1,final,job,vertex,source2,new,job,vertex,source,2,source2,set,invokable,class,stoppable,invokable,class,source2,set,parallelism,source,par2,final,job,vertex,non,source1,new,job,vertex,non,source,1,non,source1,set,invokable,class,no,op,invokable,class,non,source1,set,parallelism,10,final,job,vertex,non,source2,new,job,vertex,non,source,2,non,source2,set,invokable,class,no,op,invokable,class,non,source2,set,parallelism,10,non,source1,connect,new,data,set,as,input,source1,distribution,pattern,result,partition,type,pipelined,non,source1,connect,new,data,set,as,input,source2,distribution,pattern,pointwise,result,partition,type,pipelined,non,source2,connect,new,data,set,as,input,non,source1,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,jid,new,job,id,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,jid,source1,source2,non,source1,non,source2,final,task,manager,gateway,source,gateway,spy,new,simple,acking,task,manager,gateway,final,task,manager,gateway,non,source,gateway,spy,new,simple,acking,task,manager,gateway,for,execution,vertex,ev,eg,get,job,vertex,source1,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,source,gateway,ev,get,current,execution,attempt,try,assign,resource,slot,ev,get,current,execution,attempt,deploy,for,execution,vertex,ev,eg,get,job,vertex,source2,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,source,gateway,ev,get,current,execution,attempt,try,assign,resource,slot,ev,get,current,execution,attempt,deploy,for,execution,vertex,ev,eg,get,job,vertex,non,source1,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,non,source,gateway,ev,get,current,execution,attempt,try,assign,resource,slot,ev,get,current,execution,attempt,deploy,for,execution,vertex,ev,eg,get,job,vertex,non,source2,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,non,source,gateway,ev,get,current,execution,attempt,try,assign,resource,slot,ev,get,current,execution,attempt,deploy,eg,stop,verify,source,gateway,timeout,1000,times,source,par1,source,par2,stop,task,any,execution,attempt,id,class,any,time,class,verify,non,source,gateway,times,0,stop,task,any,execution,attempt,id,class,any,time,class,execution,graph,test,utils,finish,all,vertices,eg
ExecutionGraphStopTest -> @Test 	public void testStop() throws Exception;1513258344;Validates that stop is only sent to the sources__This test build a simple job with two sources and two non-source vertices.;@Test_	public void testStop() throws Exception {_		final int sourcePar1 = 11__		final int sourcePar2 = 7___		final JobVertex source1 = new JobVertex("source 1")__		source1.setInvokableClass(StoppableInvokable.class)__		source1.setParallelism(sourcePar1)___		final JobVertex source2 = new JobVertex("source 2")__		source2.setInvokableClass(StoppableInvokable.class)__		source2.setParallelism(sourcePar2)___		final JobVertex nonSource1 = new JobVertex("non-source-1")__		nonSource1.setInvokableClass(NoOpInvokable.class)__		nonSource1.setParallelism(10)___		final JobVertex nonSource2 = new JobVertex("non-source-2")__		nonSource2.setInvokableClass(NoOpInvokable.class)__		nonSource2.setParallelism(10)___		nonSource1.connectNewDataSetAsInput(source1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		nonSource1.connectNewDataSetAsInput(source2, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		nonSource2.connectNewDataSetAsInput(nonSource1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jid = new JobID()__		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(_				jid, source1, source2, nonSource1, nonSource2)___		_		_		final TaskManagerGateway sourceGateway = spy(new SimpleAckingTaskManagerGateway())__		final TaskManagerGateway nonSourceGateway = spy(new SimpleAckingTaskManagerGateway())___		_		for (ExecutionVertex ev : eg.getJobVertex(source1.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(sourceGateway)__			ev.getCurrentExecutionAttempt().tryAssignResource(slot)__			ev.getCurrentExecutionAttempt().deploy()__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(source2.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(sourceGateway)__			ev.getCurrentExecutionAttempt().tryAssignResource(slot)__			ev.getCurrentExecutionAttempt().deploy()__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(nonSource1.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(nonSourceGateway)__			ev.getCurrentExecutionAttempt().tryAssignResource(slot)__			ev.getCurrentExecutionAttempt().deploy()__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(nonSource2.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(nonSourceGateway)__			ev.getCurrentExecutionAttempt().tryAssignResource(slot)__			ev.getCurrentExecutionAttempt().deploy()__		}__		eg.stop()___		verify(sourceGateway, timeout(1000).times(sourcePar1 + sourcePar2)).stopTask(any(ExecutionAttemptID.class), any(Time.class))__		verify(nonSourceGateway, times(0)).stopTask(any(ExecutionAttemptID.class), any(Time.class))___		ExecutionGraphTestUtils.finishAllVertices(eg)__	};validates,that,stop,is,only,sent,to,the,sources,this,test,build,a,simple,job,with,two,sources,and,two,non,source,vertices;test,public,void,test,stop,throws,exception,final,int,source,par1,11,final,int,source,par2,7,final,job,vertex,source1,new,job,vertex,source,1,source1,set,invokable,class,stoppable,invokable,class,source1,set,parallelism,source,par1,final,job,vertex,source2,new,job,vertex,source,2,source2,set,invokable,class,stoppable,invokable,class,source2,set,parallelism,source,par2,final,job,vertex,non,source1,new,job,vertex,non,source,1,non,source1,set,invokable,class,no,op,invokable,class,non,source1,set,parallelism,10,final,job,vertex,non,source2,new,job,vertex,non,source,2,non,source2,set,invokable,class,no,op,invokable,class,non,source2,set,parallelism,10,non,source1,connect,new,data,set,as,input,source1,distribution,pattern,result,partition,type,pipelined,non,source1,connect,new,data,set,as,input,source2,distribution,pattern,pointwise,result,partition,type,pipelined,non,source2,connect,new,data,set,as,input,non,source1,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,jid,new,job,id,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,jid,source1,source2,non,source1,non,source2,final,task,manager,gateway,source,gateway,spy,new,simple,acking,task,manager,gateway,final,task,manager,gateway,non,source,gateway,spy,new,simple,acking,task,manager,gateway,for,execution,vertex,ev,eg,get,job,vertex,source1,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,source,gateway,ev,get,current,execution,attempt,try,assign,resource,slot,ev,get,current,execution,attempt,deploy,for,execution,vertex,ev,eg,get,job,vertex,source2,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,source,gateway,ev,get,current,execution,attempt,try,assign,resource,slot,ev,get,current,execution,attempt,deploy,for,execution,vertex,ev,eg,get,job,vertex,non,source1,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,non,source,gateway,ev,get,current,execution,attempt,try,assign,resource,slot,ev,get,current,execution,attempt,deploy,for,execution,vertex,ev,eg,get,job,vertex,non,source2,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,non,source,gateway,ev,get,current,execution,attempt,try,assign,resource,slot,ev,get,current,execution,attempt,deploy,eg,stop,verify,source,gateway,timeout,1000,times,source,par1,source,par2,stop,task,any,execution,attempt,id,class,any,time,class,verify,non,source,gateway,times,0,stop,task,any,execution,attempt,id,class,any,time,class,execution,graph,test,utils,finish,all,vertices,eg
ExecutionGraphStopTest -> @Test 	public void testStop() throws Exception;1538904928;Validates that stop is only sent to the sources.__<p>This test build a simple job with two sources and two non-source vertices.;@Test_	public void testStop() throws Exception {_		final int sourcePar1 = 11__		final int sourcePar2 = 7___		final JobVertex source1 = new JobVertex("source 1")__		source1.setInvokableClass(StoppableInvokable.class)__		source1.setParallelism(sourcePar1)___		final JobVertex source2 = new JobVertex("source 2")__		source2.setInvokableClass(StoppableInvokable.class)__		source2.setParallelism(sourcePar2)___		final JobVertex nonSource1 = new JobVertex("non-source-1")__		nonSource1.setInvokableClass(NoOpInvokable.class)__		nonSource1.setParallelism(10)___		final JobVertex nonSource2 = new JobVertex("non-source-2")__		nonSource2.setInvokableClass(NoOpInvokable.class)__		nonSource2.setParallelism(10)___		nonSource1.connectNewDataSetAsInput(source1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		nonSource1.connectNewDataSetAsInput(source2, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__		nonSource2.connectNewDataSetAsInput(nonSource1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)___		final JobID jid = new JobID()__		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(_				jid, source1, source2, nonSource1, nonSource2)___		_		_		final TaskManagerGateway sourceGateway = spy(new SimpleAckingTaskManagerGateway())__		final TaskManagerGateway nonSourceGateway = spy(new SimpleAckingTaskManagerGateway())___		_		for (ExecutionVertex ev : eg.getJobVertex(source1.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(sourceGateway)__			ev.getCurrentExecutionAttempt().tryAssignResource(slot)__			ev.getCurrentExecutionAttempt().deploy()__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(source2.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(sourceGateway)__			ev.getCurrentExecutionAttempt().tryAssignResource(slot)__			ev.getCurrentExecutionAttempt().deploy()__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(nonSource1.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(nonSourceGateway)__			ev.getCurrentExecutionAttempt().tryAssignResource(slot)__			ev.getCurrentExecutionAttempt().deploy()__		}__		_		for (ExecutionVertex ev : eg.getJobVertex(nonSource2.getID()).getTaskVertices()) {_			SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(nonSourceGateway)__			ev.getCurrentExecutionAttempt().tryAssignResource(slot)__			ev.getCurrentExecutionAttempt().deploy()__		}__		eg.stop()___		verify(sourceGateway, timeout(1000).times(sourcePar1 + sourcePar2)).stopTask(any(ExecutionAttemptID.class), any(Time.class))__		verify(nonSourceGateway, times(0)).stopTask(any(ExecutionAttemptID.class), any(Time.class))___		ExecutionGraphTestUtils.finishAllVertices(eg)__	};validates,that,stop,is,only,sent,to,the,sources,p,this,test,build,a,simple,job,with,two,sources,and,two,non,source,vertices;test,public,void,test,stop,throws,exception,final,int,source,par1,11,final,int,source,par2,7,final,job,vertex,source1,new,job,vertex,source,1,source1,set,invokable,class,stoppable,invokable,class,source1,set,parallelism,source,par1,final,job,vertex,source2,new,job,vertex,source,2,source2,set,invokable,class,stoppable,invokable,class,source2,set,parallelism,source,par2,final,job,vertex,non,source1,new,job,vertex,non,source,1,non,source1,set,invokable,class,no,op,invokable,class,non,source1,set,parallelism,10,final,job,vertex,non,source2,new,job,vertex,non,source,2,non,source2,set,invokable,class,no,op,invokable,class,non,source2,set,parallelism,10,non,source1,connect,new,data,set,as,input,source1,distribution,pattern,result,partition,type,pipelined,non,source1,connect,new,data,set,as,input,source2,distribution,pattern,pointwise,result,partition,type,pipelined,non,source2,connect,new,data,set,as,input,non,source1,distribution,pattern,pointwise,result,partition,type,pipelined,final,job,id,jid,new,job,id,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,jid,source1,source2,non,source1,non,source2,final,task,manager,gateway,source,gateway,spy,new,simple,acking,task,manager,gateway,final,task,manager,gateway,non,source,gateway,spy,new,simple,acking,task,manager,gateway,for,execution,vertex,ev,eg,get,job,vertex,source1,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,source,gateway,ev,get,current,execution,attempt,try,assign,resource,slot,ev,get,current,execution,attempt,deploy,for,execution,vertex,ev,eg,get,job,vertex,source2,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,source,gateway,ev,get,current,execution,attempt,try,assign,resource,slot,ev,get,current,execution,attempt,deploy,for,execution,vertex,ev,eg,get,job,vertex,non,source1,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,non,source,gateway,ev,get,current,execution,attempt,try,assign,resource,slot,ev,get,current,execution,attempt,deploy,for,execution,vertex,ev,eg,get,job,vertex,non,source2,get,id,get,task,vertices,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,non,source,gateway,ev,get,current,execution,attempt,try,assign,resource,slot,ev,get,current,execution,attempt,deploy,eg,stop,verify,source,gateway,timeout,1000,times,source,par1,source,par2,stop,task,any,execution,attempt,id,class,any,time,class,verify,non,source,gateway,times,0,stop,task,any,execution,attempt,id,class,any,time,class,execution,graph,test,utils,finish,all,vertices,eg
ExecutionGraphStopTest -> @Test 	public void testStopIfSourcesNotStoppable() throws Exception;1493831843;Tests that STOP is only supported if all sources are stoppable;@Test_	public void testStopIfSourcesNotStoppable() throws Exception {_		final ExecutionGraph graph = ExecutionGraphTestUtils.createSimpleTestGraph()___		try {_			graph.stop()__			fail("exception expected")__		}_		catch (StoppingException e) {_			_		}_	};tests,that,stop,is,only,supported,if,all,sources,are,stoppable;test,public,void,test,stop,if,sources,not,stoppable,throws,exception,final,execution,graph,graph,execution,graph,test,utils,create,simple,test,graph,try,graph,stop,fail,exception,expected,catch,stopping,exception,e
ExecutionGraphStopTest -> @Test 	public void testStopIfSourcesNotStoppable() throws Exception;1501760738;Tests that STOP is only supported if all sources are stoppable;@Test_	public void testStopIfSourcesNotStoppable() throws Exception {_		final ExecutionGraph graph = ExecutionGraphTestUtils.createSimpleTestGraph()___		try {_			graph.stop()__			fail("exception expected")__		}_		catch (StoppingException e) {_			_		}_	};tests,that,stop,is,only,supported,if,all,sources,are,stoppable;test,public,void,test,stop,if,sources,not,stoppable,throws,exception,final,execution,graph,graph,execution,graph,test,utils,create,simple,test,graph,try,graph,stop,fail,exception,expected,catch,stopping,exception,e
ExecutionGraphStopTest -> @Test 	public void testStopIfSourcesNotStoppable() throws Exception;1509638684;Tests that STOP is only supported if all sources are stoppable;@Test_	public void testStopIfSourcesNotStoppable() throws Exception {_		final ExecutionGraph graph = ExecutionGraphTestUtils.createSimpleTestGraph()___		try {_			graph.stop()__			fail("exception expected")__		}_		catch (StoppingException e) {_			_		}_	};tests,that,stop,is,only,supported,if,all,sources,are,stoppable;test,public,void,test,stop,if,sources,not,stoppable,throws,exception,final,execution,graph,graph,execution,graph,test,utils,create,simple,test,graph,try,graph,stop,fail,exception,expected,catch,stopping,exception,e
ExecutionGraphStopTest -> @Test 	public void testStopIfSourcesNotStoppable() throws Exception;1513258344;Tests that STOP is only supported if all sources are stoppable;@Test_	public void testStopIfSourcesNotStoppable() throws Exception {_		final ExecutionGraph graph = ExecutionGraphTestUtils.createSimpleTestGraph()___		try {_			graph.stop()__			fail("exception expected")__		}_		catch (StoppingException e) {_			_		}_	};tests,that,stop,is,only,supported,if,all,sources,are,stoppable;test,public,void,test,stop,if,sources,not,stoppable,throws,exception,final,execution,graph,graph,execution,graph,test,utils,create,simple,test,graph,try,graph,stop,fail,exception,expected,catch,stopping,exception,e
ExecutionGraphStopTest -> @Test 	public void testStopIfSourcesNotStoppable() throws Exception;1538904928;Tests that STOP is only supported if all sources are stoppable.;@Test_	public void testStopIfSourcesNotStoppable() throws Exception {_		final ExecutionGraph graph = ExecutionGraphTestUtils.createSimpleTestGraph()___		try {_			graph.stop()__			fail("exception expected")__		}_		catch (StoppingException e) {_			_		}_	};tests,that,stop,is,only,supported,if,all,sources,are,stoppable;test,public,void,test,stop,if,sources,not,stoppable,throws,exception,final,execution,graph,graph,execution,graph,test,utils,create,simple,test,graph,try,graph,stop,fail,exception,expected,catch,stopping,exception,e
ExecutionGraphStopTest -> @Test 	public void testStopRpc() throws Exception;1493831843;Tests that the stopping RPC call is sent upon stopping requests.;@Test_	public void testStopRpc() throws Exception {_		final JobID jid = new JobID()__		final JobVertex vertex = new JobVertex("vertex")__		vertex.setInvokableClass(NoOpInvokable.class)__		vertex.setParallelism(5)___		final ExecutionGraph graph = ExecutionGraphTestUtils.createSimpleTestGraph(jid, vertex)__		final Execution exec = graph.getJobVertex(vertex.getID()).getTaskVertices()[0].getCurrentExecutionAttempt()___		final TaskManagerGateway gateway = mock(TaskManagerGateway.class)__		when(gateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class)))_				.thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))__		when(gateway.stopTask(any(ExecutionAttemptID.class), any(Time.class)))_				.thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___		final SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, gateway)___		exec.deployToSlot(slot)__		exec.switchToRunning()__		assertEquals(ExecutionState.RUNNING, exec.getState())___		exec.stop()__		assertEquals(ExecutionState.RUNNING, exec.getState())___		verify(gateway, times(1)).stopTask(any(ExecutionAttemptID.class), any(Time.class))___		exec.markFinished()__		assertEquals(ExecutionState.FINISHED, exec.getState())__	};tests,that,the,stopping,rpc,call,is,sent,upon,stopping,requests;test,public,void,test,stop,rpc,throws,exception,final,job,id,jid,new,job,id,final,job,vertex,vertex,new,job,vertex,vertex,vertex,set,invokable,class,no,op,invokable,class,vertex,set,parallelism,5,final,execution,graph,graph,execution,graph,test,utils,create,simple,test,graph,jid,vertex,final,execution,exec,graph,get,job,vertex,vertex,get,id,get,task,vertices,0,get,current,execution,attempt,final,task,manager,gateway,gateway,mock,task,manager,gateway,class,when,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,when,gateway,stop,task,any,execution,attempt,id,class,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,gateway,exec,deploy,to,slot,slot,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,exec,stop,assert,equals,execution,state,running,exec,get,state,verify,gateway,times,1,stop,task,any,execution,attempt,id,class,any,time,class,exec,mark,finished,assert,equals,execution,state,finished,exec,get,state
ExecutionGraphStopTest -> @Test 	public void testStopRpc() throws Exception;1501760738;Tests that the stopping RPC call is sent upon stopping requests.;@Test_	public void testStopRpc() throws Exception {_		final JobID jid = new JobID()__		final JobVertex vertex = new JobVertex("vertex")__		vertex.setInvokableClass(NoOpInvokable.class)__		vertex.setParallelism(5)___		final ExecutionGraph graph = ExecutionGraphTestUtils.createSimpleTestGraph(jid, vertex)__		final Execution exec = graph.getJobVertex(vertex.getID()).getTaskVertices()[0].getCurrentExecutionAttempt()___		final TaskManagerGateway gateway = mock(TaskManagerGateway.class)__		when(gateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class)))_				.thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))__		when(gateway.stopTask(any(ExecutionAttemptID.class), any(Time.class)))_				.thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, gateway)___		exec.deployToSlot(slot)__		exec.switchToRunning()__		assertEquals(ExecutionState.RUNNING, exec.getState())___		exec.stop()__		assertEquals(ExecutionState.RUNNING, exec.getState())___		verify(gateway, times(1)).stopTask(any(ExecutionAttemptID.class), any(Time.class))___		exec.markFinished()__		assertEquals(ExecutionState.FINISHED, exec.getState())__	};tests,that,the,stopping,rpc,call,is,sent,upon,stopping,requests;test,public,void,test,stop,rpc,throws,exception,final,job,id,jid,new,job,id,final,job,vertex,vertex,new,job,vertex,vertex,vertex,set,invokable,class,no,op,invokable,class,vertex,set,parallelism,5,final,execution,graph,graph,execution,graph,test,utils,create,simple,test,graph,jid,vertex,final,execution,exec,graph,get,job,vertex,vertex,get,id,get,task,vertices,0,get,current,execution,attempt,final,task,manager,gateway,gateway,mock,task,manager,gateway,class,when,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,when,gateway,stop,task,any,execution,attempt,id,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,gateway,exec,deploy,to,slot,slot,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,exec,stop,assert,equals,execution,state,running,exec,get,state,verify,gateway,times,1,stop,task,any,execution,attempt,id,class,any,time,class,exec,mark,finished,assert,equals,execution,state,finished,exec,get,state
ExecutionGraphStopTest -> @Test 	public void testStopRpc() throws Exception;1509638684;Tests that the stopping RPC call is sent upon stopping requests.;@Test_	public void testStopRpc() throws Exception {_		final JobID jid = new JobID()__		final JobVertex vertex = new JobVertex("vertex")__		vertex.setInvokableClass(NoOpInvokable.class)__		vertex.setParallelism(5)___		final ExecutionGraph graph = ExecutionGraphTestUtils.createSimpleTestGraph(jid, vertex)__		final Execution exec = graph.getJobVertex(vertex.getID()).getTaskVertices()[0].getCurrentExecutionAttempt()___		final TaskManagerGateway gateway = mock(TaskManagerGateway.class)__		when(gateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class)))_				.thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))__		when(gateway.stopTask(any(ExecutionAttemptID.class), any(Time.class)))_				.thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(jid, gateway)___		exec.tryAssignResource(slot)__		exec.deploy()__		exec.switchToRunning()__		assertEquals(ExecutionState.RUNNING, exec.getState())___		exec.stop()__		assertEquals(ExecutionState.RUNNING, exec.getState())___		verify(gateway, times(1)).stopTask(any(ExecutionAttemptID.class), any(Time.class))___		exec.markFinished()__		assertEquals(ExecutionState.FINISHED, exec.getState())__	};tests,that,the,stopping,rpc,call,is,sent,upon,stopping,requests;test,public,void,test,stop,rpc,throws,exception,final,job,id,jid,new,job,id,final,job,vertex,vertex,new,job,vertex,vertex,vertex,set,invokable,class,no,op,invokable,class,vertex,set,parallelism,5,final,execution,graph,graph,execution,graph,test,utils,create,simple,test,graph,jid,vertex,final,execution,exec,graph,get,job,vertex,vertex,get,id,get,task,vertices,0,get,current,execution,attempt,final,task,manager,gateway,gateway,mock,task,manager,gateway,class,when,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,when,gateway,stop,task,any,execution,attempt,id,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,jid,gateway,exec,try,assign,resource,slot,exec,deploy,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,exec,stop,assert,equals,execution,state,running,exec,get,state,verify,gateway,times,1,stop,task,any,execution,attempt,id,class,any,time,class,exec,mark,finished,assert,equals,execution,state,finished,exec,get,state
ExecutionGraphStopTest -> @Test 	public void testStopRpc() throws Exception;1513258344;Tests that the stopping RPC call is sent upon stopping requests.;@Test_	public void testStopRpc() throws Exception {_		final JobID jid = new JobID()__		final JobVertex vertex = new JobVertex("vertex")__		vertex.setInvokableClass(NoOpInvokable.class)__		vertex.setParallelism(5)___		final ExecutionGraph graph = ExecutionGraphTestUtils.createSimpleTestGraph(jid, vertex)__		final Execution exec = graph.getJobVertex(vertex.getID()).getTaskVertices()[0].getCurrentExecutionAttempt()___		final TaskManagerGateway gateway = mock(TaskManagerGateway.class)__		when(gateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class)))_				.thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))__		when(gateway.stopTask(any(ExecutionAttemptID.class), any(Time.class)))_				.thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(gateway)___		exec.tryAssignResource(slot)__		exec.deploy()__		exec.switchToRunning()__		assertEquals(ExecutionState.RUNNING, exec.getState())___		exec.stop()__		assertEquals(ExecutionState.RUNNING, exec.getState())___		verify(gateway, times(1)).stopTask(any(ExecutionAttemptID.class), any(Time.class))___		exec.markFinished()__		assertEquals(ExecutionState.FINISHED, exec.getState())__	};tests,that,the,stopping,rpc,call,is,sent,upon,stopping,requests;test,public,void,test,stop,rpc,throws,exception,final,job,id,jid,new,job,id,final,job,vertex,vertex,new,job,vertex,vertex,vertex,set,invokable,class,no,op,invokable,class,vertex,set,parallelism,5,final,execution,graph,graph,execution,graph,test,utils,create,simple,test,graph,jid,vertex,final,execution,exec,graph,get,job,vertex,vertex,get,id,get,task,vertices,0,get,current,execution,attempt,final,task,manager,gateway,gateway,mock,task,manager,gateway,class,when,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,when,gateway,stop,task,any,execution,attempt,id,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,gateway,exec,try,assign,resource,slot,exec,deploy,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,exec,stop,assert,equals,execution,state,running,exec,get,state,verify,gateway,times,1,stop,task,any,execution,attempt,id,class,any,time,class,exec,mark,finished,assert,equals,execution,state,finished,exec,get,state
ExecutionGraphStopTest -> @Test 	public void testStopRpc() throws Exception;1538904928;Tests that the stopping RPC call is sent upon stopping requests.;@Test_	public void testStopRpc() throws Exception {_		final JobID jid = new JobID()__		final JobVertex vertex = new JobVertex("vertex")__		vertex.setInvokableClass(NoOpInvokable.class)__		vertex.setParallelism(5)___		final ExecutionGraph graph = ExecutionGraphTestUtils.createSimpleTestGraph(jid, vertex)__		final Execution exec = graph.getJobVertex(vertex.getID()).getTaskVertices()[0].getCurrentExecutionAttempt()___		final TaskManagerGateway gateway = mock(TaskManagerGateway.class)__		when(gateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class)))_				.thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))__		when(gateway.stopTask(any(ExecutionAttemptID.class), any(Time.class)))_				.thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final SimpleSlot slot = ExecutionGraphTestUtils.createMockSimpleSlot(gateway)___		exec.tryAssignResource(slot)__		exec.deploy()__		exec.switchToRunning()__		assertEquals(ExecutionState.RUNNING, exec.getState())___		exec.stop()__		assertEquals(ExecutionState.RUNNING, exec.getState())___		verify(gateway, times(1)).stopTask(any(ExecutionAttemptID.class), any(Time.class))___		exec.markFinished()__		assertEquals(ExecutionState.FINISHED, exec.getState())__	};tests,that,the,stopping,rpc,call,is,sent,upon,stopping,requests;test,public,void,test,stop,rpc,throws,exception,final,job,id,jid,new,job,id,final,job,vertex,vertex,new,job,vertex,vertex,vertex,set,invokable,class,no,op,invokable,class,vertex,set,parallelism,5,final,execution,graph,graph,execution,graph,test,utils,create,simple,test,graph,jid,vertex,final,execution,exec,graph,get,job,vertex,vertex,get,id,get,task,vertices,0,get,current,execution,attempt,final,task,manager,gateway,gateway,mock,task,manager,gateway,class,when,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,when,gateway,stop,task,any,execution,attempt,id,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,simple,slot,slot,execution,graph,test,utils,create,mock,simple,slot,gateway,exec,try,assign,resource,slot,exec,deploy,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,exec,stop,assert,equals,execution,state,running,exec,get,state,verify,gateway,times,1,stop,task,any,execution,attempt,id,class,any,time,class,exec,mark,finished,assert,equals,execution,state,finished,exec,get,state
