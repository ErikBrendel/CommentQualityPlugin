# id;timestamp;commentText;codeText;commentWords;codeWords
BlobServerGetTest -> @Test 	public void testGetFailsHaStoreForJobHa() throws IOException;1507212387;Retrieves a BLOB from the HA store to a {@link BlobServer} whose HA store does not contain_the file. File transfers should fail.;@Test_	public void testGetFailsHaStoreForJobHa() throws IOException {_		final JobID jobId = new JobID()___		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			BlobKey blobKey = put(server, jobId, data, true)__			assertTrue(server.getStorageLocation(jobId, blobKey).delete())___			File tempFileDir = server.createTemporaryFilename().getParentFile()___			_			exception.expect(NoSuchFileException.class)___			try {_				get(server, jobId, blobKey, true)__			} finally {_				HashSet<String> expectedDirs = new HashSet<>()__				expectedDirs.add("incoming")__				expectedDirs.add(JOB_DIR_PREFIX + jobId)__				_				File storageDir = tempFileDir.getParentFile()__				String[] actualDirs = storageDir.list()__				assertNotNull(actualDirs)__				assertEquals(expectedDirs, new HashSet<>(Arrays.asList(actualDirs)))___				_				File jobDir = new File(tempFileDir.getParentFile(), JOB_DIR_PREFIX + jobId)__				assertArrayEquals(new String[] {}, jobDir.list())__			}_		}_	};retrieves,a,blob,from,the,ha,store,to,a,link,blob,server,whose,ha,store,does,not,contain,the,file,file,transfers,should,fail;test,public,void,test,get,fails,ha,store,for,job,ha,throws,ioexception,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,blob,key,put,server,job,id,data,true,assert,true,server,get,storage,location,job,id,blob,key,delete,file,temp,file,dir,server,create,temporary,filename,get,parent,file,exception,expect,no,such,file,exception,class,try,get,server,job,id,blob,key,true,finally,hash,set,string,expected,dirs,new,hash,set,expected,dirs,add,incoming,expected,dirs,add,job,id,file,storage,dir,temp,file,dir,get,parent,file,string,actual,dirs,storage,dir,list,assert,not,null,actual,dirs,assert,equals,expected,dirs,new,hash,set,arrays,as,list,actual,dirs,file,job,dir,new,file,temp,file,dir,get,parent,file,job,id,assert,array,equals,new,string,job,dir,list
BlobServerGetTest -> @Test 	public void testGetFailsHaStoreForJobHa() throws IOException;1507212387;Retrieves a BLOB from the HA store to a {@link BlobServer} whose HA store does not contain_the file. File transfers should fail.;@Test_	public void testGetFailsHaStoreForJobHa() throws IOException {_		final JobID jobId = new JobID()___		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			BlobKey blobKey = put(server, jobId, data, PERMANENT_BLOB)__			assertTrue(server.getStorageLocation(jobId, blobKey).delete())___			File tempFileDir = server.createTemporaryFilename().getParentFile()___			_			exception.expect(NoSuchFileException.class)___			try {_				get(server, jobId, blobKey)__			} finally {_				HashSet<String> expectedDirs = new HashSet<>()__				expectedDirs.add("incoming")__				expectedDirs.add(JOB_DIR_PREFIX + jobId)__				_				File storageDir = tempFileDir.getParentFile()__				String[] actualDirs = storageDir.list()__				assertNotNull(actualDirs)__				assertEquals(expectedDirs, new HashSet<>(Arrays.asList(actualDirs)))___				_				File jobDir = new File(tempFileDir.getParentFile(), JOB_DIR_PREFIX + jobId)__				assertArrayEquals(new String[] {}, jobDir.list())__			}_		}_	};retrieves,a,blob,from,the,ha,store,to,a,link,blob,server,whose,ha,store,does,not,contain,the,file,file,transfers,should,fail;test,public,void,test,get,fails,ha,store,for,job,ha,throws,ioexception,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,blob,key,put,server,job,id,data,assert,true,server,get,storage,location,job,id,blob,key,delete,file,temp,file,dir,server,create,temporary,filename,get,parent,file,exception,expect,no,such,file,exception,class,try,get,server,job,id,blob,key,finally,hash,set,string,expected,dirs,new,hash,set,expected,dirs,add,incoming,expected,dirs,add,job,id,file,storage,dir,temp,file,dir,get,parent,file,string,actual,dirs,storage,dir,list,assert,not,null,actual,dirs,assert,equals,expected,dirs,new,hash,set,arrays,as,list,actual,dirs,file,job,dir,new,file,temp,file,dir,get,parent,file,job,id,assert,array,equals,new,string,job,dir,list
BlobServerGetTest -> @Test 	public void testGetFailsHaStoreForJobHa() throws IOException;1508138617;Retrieves a BLOB from the HA store to a {@link BlobServer} whose HA store does not contain_the file. File transfers should fail.;@Test_	public void testGetFailsHaStoreForJobHa() throws IOException {_		final JobID jobId = new JobID()___		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			_			byte[] data = new byte[2000000]__			rnd.nextBytes(data)__			BlobKey blobKey = put(server, jobId, data, PERMANENT_BLOB)__			assertTrue(server.getStorageLocation(jobId, blobKey).delete())___			File tempFileDir = server.createTemporaryFilename().getParentFile()___			_			exception.expect(NoSuchFileException.class)___			try {_				get(server, jobId, blobKey)__			} finally {_				HashSet<String> expectedDirs = new HashSet<>()__				expectedDirs.add("incoming")__				expectedDirs.add(JOB_DIR_PREFIX + jobId)__				_				File storageDir = tempFileDir.getParentFile()__				String[] actualDirs = storageDir.list()__				assertNotNull(actualDirs)__				assertEquals(expectedDirs, new HashSet<>(Arrays.asList(actualDirs)))___				_				File jobDir = new File(tempFileDir.getParentFile(), JOB_DIR_PREFIX + jobId)__				assertArrayEquals(new String[] {}, jobDir.list())__			}_		}_	};retrieves,a,blob,from,the,ha,store,to,a,link,blob,server,whose,ha,store,does,not,contain,the,file,file,transfers,should,fail;test,public,void,test,get,fails,ha,store,for,job,ha,throws,ioexception,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,blob,key,put,server,job,id,data,assert,true,server,get,storage,location,job,id,blob,key,delete,file,temp,file,dir,server,create,temporary,filename,get,parent,file,exception,expect,no,such,file,exception,class,try,get,server,job,id,blob,key,finally,hash,set,string,expected,dirs,new,hash,set,expected,dirs,add,incoming,expected,dirs,add,job,id,file,storage,dir,temp,file,dir,get,parent,file,string,actual,dirs,storage,dir,list,assert,not,null,actual,dirs,assert,equals,expected,dirs,new,hash,set,arrays,as,list,actual,dirs,file,job,dir,new,file,temp,file,dir,get,parent,file,job,id,assert,array,equals,new,string,job,dir,list
BlobServerGetTest -> @Test 	public void testConcurrentGetOperations() throws IOException, ExecutionException, InterruptedException;1495001945;FLINK-6020__Tests that concurrent get operations don't concurrently access the BlobStore to download a blob.;@Test_	public void testConcurrentGetOperations() throws IOException, ExecutionException, InterruptedException {_		final Configuration configuration = new Configuration()___		configuration.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		final BlobStore blobStore = mock(BlobStore.class)___		final int numberConcurrentGetOperations = 3__		final List<Future<InputStream>> getOperations = new ArrayList<>(numberConcurrentGetOperations)___		final byte[] data = {1, 2, 3, 4, 99, 42}__		final ByteArrayInputStream bais = new ByteArrayInputStream(data)___		MessageDigest md = BlobUtils.createMessageDigest()___		_		final BlobKey blobKey = new BlobKey(md.digest(data))___		doAnswer(_			new Answer() {_				@Override_				public Object answer(InvocationOnMock invocation) throws Throwable {_					File targetFile = (File) invocation.getArguments()[1]___					FileUtils.copyInputStreamToFile(bais, targetFile)___					return null__				}_			}_		).when(blobStore).get(any(BlobKey.class), any(File.class))___		final ExecutorService executor = Executors.newFixedThreadPool(numberConcurrentGetOperations)___		try (final BlobServer blobServer = new BlobServer(configuration, blobStore)) {_			for (int i = 0_ i < numberConcurrentGetOperations_ i++) {_				Future<InputStream> getOperation = FlinkCompletableFuture.supplyAsync(new Callable<InputStream>() {_					@Override_					public InputStream call() throws Exception {_						try (BlobClient blobClient = blobServer.createClient()__							 InputStream inputStream = blobClient.get(blobKey)) {_							byte[] buffer = new byte[data.length]___							IOUtils.readFully(inputStream, buffer)___							return new ByteArrayInputStream(buffer)__						}_					}_				}, executor)___				getOperations.add(getOperation)__			}__			Future<Collection<InputStream>> inputStreamsFuture = FutureUtils.combineAll(getOperations)___			Collection<InputStream> inputStreams = inputStreamsFuture.get()___			_			for (InputStream inputStream : inputStreams) {_				ByteArrayOutputStream baos = new ByteArrayOutputStream(data.length)___				IOUtils.copy(inputStream, baos)___				baos.close()__				byte[] input = baos.toByteArray()___				assertArrayEquals(data, input)___				inputStream.close()__			}__			_			verify(blobStore, times(1)).get(eq(blobKey), any(File.class))__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,get,operations,don,t,concurrently,access,the,blob,store,to,download,a,blob;test,public,void,test,concurrent,get,operations,throws,ioexception,execution,exception,interrupted,exception,final,configuration,configuration,new,configuration,configuration,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,final,blob,store,blob,store,mock,blob,store,class,final,int,number,concurrent,get,operations,3,final,list,future,input,stream,get,operations,new,array,list,number,concurrent,get,operations,final,byte,data,1,2,3,4,99,42,final,byte,array,input,stream,bais,new,byte,array,input,stream,data,message,digest,md,blob,utils,create,message,digest,final,blob,key,blob,key,new,blob,key,md,digest,data,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,file,target,file,file,invocation,get,arguments,1,file,utils,copy,input,stream,to,file,bais,target,file,return,null,when,blob,store,get,any,blob,key,class,any,file,class,final,executor,service,executor,executors,new,fixed,thread,pool,number,concurrent,get,operations,try,final,blob,server,blob,server,new,blob,server,configuration,blob,store,for,int,i,0,i,number,concurrent,get,operations,i,future,input,stream,get,operation,flink,completable,future,supply,async,new,callable,input,stream,override,public,input,stream,call,throws,exception,try,blob,client,blob,client,blob,server,create,client,input,stream,input,stream,blob,client,get,blob,key,byte,buffer,new,byte,data,length,ioutils,read,fully,input,stream,buffer,return,new,byte,array,input,stream,buffer,executor,get,operations,add,get,operation,future,collection,input,stream,input,streams,future,future,utils,combine,all,get,operations,collection,input,stream,input,streams,input,streams,future,get,for,input,stream,input,stream,input,streams,byte,array,output,stream,baos,new,byte,array,output,stream,data,length,ioutils,copy,input,stream,baos,baos,close,byte,input,baos,to,byte,array,assert,array,equals,data,input,input,stream,close,verify,blob,store,times,1,get,eq,blob,key,any,file,class,finally,executor,shutdown,now
BlobServerGetTest -> @Test 	public void testConcurrentGetOperations() throws IOException, ExecutionException, InterruptedException;1501622876;FLINK-6020__Tests that concurrent get operations don't concurrently access the BlobStore to download a blob.;@Test_	public void testConcurrentGetOperations() throws IOException, ExecutionException, InterruptedException {_		final Configuration configuration = new Configuration()___		configuration.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		final BlobStore blobStore = mock(BlobStore.class)___		final int numberConcurrentGetOperations = 3__		final List<CompletableFuture<InputStream>> getOperations = new ArrayList<>(numberConcurrentGetOperations)___		final byte[] data = {1, 2, 3, 4, 99, 42}__		final ByteArrayInputStream bais = new ByteArrayInputStream(data)___		MessageDigest md = BlobUtils.createMessageDigest()___		_		final BlobKey blobKey = new BlobKey(md.digest(data))___		doAnswer(_			new Answer() {_				@Override_				public Object answer(InvocationOnMock invocation) throws Throwable {_					File targetFile = (File) invocation.getArguments()[1]___					FileUtils.copyInputStreamToFile(bais, targetFile)___					return null__				}_			}_		).when(blobStore).get(any(BlobKey.class), any(File.class))___		final ExecutorService executor = Executors.newFixedThreadPool(numberConcurrentGetOperations)___		try (final BlobServer blobServer = new BlobServer(configuration, blobStore)) {_			for (int i = 0_ i < numberConcurrentGetOperations_ i++) {_				CompletableFuture<InputStream> getOperation = CompletableFuture.supplyAsync(_					() -> {_						try (BlobClient blobClient = blobServer.createClient()__							 InputStream inputStream = blobClient.get(blobKey)) {_							byte[] buffer = new byte[data.length]___							IOUtils.readFully(inputStream, buffer)___							return new ByteArrayInputStream(buffer)__						} catch (IOException e) {_							throw new FlinkFutureException("Could not read blob for key " + blobKey + '.', e)__						}_					},_					executor)___				getOperations.add(getOperation)__			}__			CompletableFuture<Collection<InputStream>> inputStreamsFuture = FutureUtils.combineAll(getOperations)___			Collection<InputStream> inputStreams = inputStreamsFuture.get()___			_			for (InputStream inputStream : inputStreams) {_				ByteArrayOutputStream baos = new ByteArrayOutputStream(data.length)___				IOUtils.copy(inputStream, baos)___				baos.close()__				byte[] input = baos.toByteArray()___				assertArrayEquals(data, input)___				inputStream.close()__			}__			_			verify(blobStore, times(1)).get(eq(blobKey), any(File.class))__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,get,operations,don,t,concurrently,access,the,blob,store,to,download,a,blob;test,public,void,test,concurrent,get,operations,throws,ioexception,execution,exception,interrupted,exception,final,configuration,configuration,new,configuration,configuration,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,final,blob,store,blob,store,mock,blob,store,class,final,int,number,concurrent,get,operations,3,final,list,completable,future,input,stream,get,operations,new,array,list,number,concurrent,get,operations,final,byte,data,1,2,3,4,99,42,final,byte,array,input,stream,bais,new,byte,array,input,stream,data,message,digest,md,blob,utils,create,message,digest,final,blob,key,blob,key,new,blob,key,md,digest,data,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,file,target,file,file,invocation,get,arguments,1,file,utils,copy,input,stream,to,file,bais,target,file,return,null,when,blob,store,get,any,blob,key,class,any,file,class,final,executor,service,executor,executors,new,fixed,thread,pool,number,concurrent,get,operations,try,final,blob,server,blob,server,new,blob,server,configuration,blob,store,for,int,i,0,i,number,concurrent,get,operations,i,completable,future,input,stream,get,operation,completable,future,supply,async,try,blob,client,blob,client,blob,server,create,client,input,stream,input,stream,blob,client,get,blob,key,byte,buffer,new,byte,data,length,ioutils,read,fully,input,stream,buffer,return,new,byte,array,input,stream,buffer,catch,ioexception,e,throw,new,flink,future,exception,could,not,read,blob,for,key,blob,key,e,executor,get,operations,add,get,operation,completable,future,collection,input,stream,input,streams,future,future,utils,combine,all,get,operations,collection,input,stream,input,streams,input,streams,future,get,for,input,stream,input,stream,input,streams,byte,array,output,stream,baos,new,byte,array,output,stream,data,length,ioutils,copy,input,stream,baos,baos,close,byte,input,baos,to,byte,array,assert,array,equals,data,input,input,stream,close,verify,blob,store,times,1,get,eq,blob,key,any,file,class,finally,executor,shutdown,now
BlobServerGetTest -> @Test 	public void testConcurrentGetOperations() throws IOException, ExecutionException, InterruptedException;1502100084;FLINK-6020__Tests that concurrent get operations don't concurrently access the BlobStore to download a blob.;@Test_	public void testConcurrentGetOperations() throws IOException, ExecutionException, InterruptedException {__		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		final BlobStore blobStore = mock(BlobStore.class)___		final int numberConcurrentGetOperations = 3__		final List<CompletableFuture<InputStream>> getOperations = new ArrayList<>(numberConcurrentGetOperations)___		final byte[] data = {1, 2, 3, 4, 99, 42}__		final ByteArrayInputStream bais = new ByteArrayInputStream(data)___		MessageDigest md = BlobUtils.createMessageDigest()___		_		final BlobKey blobKey = new BlobKey(md.digest(data))___		doAnswer(_			new Answer() {_				@Override_				public Object answer(InvocationOnMock invocation) throws Throwable {_					File targetFile = (File) invocation.getArguments()[1]___					FileUtils.copyInputStreamToFile(bais, targetFile)___					return null__				}_			}_		).when(blobStore).get(any(BlobKey.class), any(File.class))___		final ExecutorService executor = Executors.newFixedThreadPool(numberConcurrentGetOperations)___		try (final BlobServer blobServer = new BlobServer(config, blobStore)) {_			for (int i = 0_ i < numberConcurrentGetOperations_ i++) {_				CompletableFuture<InputStream> getOperation = CompletableFuture.supplyAsync(_					() -> {_						try (BlobClient blobClient = blobServer.createClient()__							 InputStream inputStream = blobClient.get(blobKey)) {_							byte[] buffer = new byte[data.length]___							IOUtils.readFully(inputStream, buffer)___							return new ByteArrayInputStream(buffer)__						} catch (IOException e) {_							throw new FlinkFutureException("Could not read blob for key " + blobKey + '.', e)__						}_					},_					executor)___				getOperations.add(getOperation)__			}__			CompletableFuture<Collection<InputStream>> inputStreamsFuture = FutureUtils.combineAll(getOperations)___			Collection<InputStream> inputStreams = inputStreamsFuture.get()___			_			for (InputStream inputStream : inputStreams) {_				ByteArrayOutputStream baos = new ByteArrayOutputStream(data.length)___				IOUtils.copy(inputStream, baos)___				baos.close()__				byte[] input = baos.toByteArray()___				assertArrayEquals(data, input)___				inputStream.close()__			}__			_			verify(blobStore, times(1)).get(eq(blobKey), any(File.class))__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,get,operations,don,t,concurrently,access,the,blob,store,to,download,a,blob;test,public,void,test,concurrent,get,operations,throws,ioexception,execution,exception,interrupted,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,final,blob,store,blob,store,mock,blob,store,class,final,int,number,concurrent,get,operations,3,final,list,completable,future,input,stream,get,operations,new,array,list,number,concurrent,get,operations,final,byte,data,1,2,3,4,99,42,final,byte,array,input,stream,bais,new,byte,array,input,stream,data,message,digest,md,blob,utils,create,message,digest,final,blob,key,blob,key,new,blob,key,md,digest,data,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,file,target,file,file,invocation,get,arguments,1,file,utils,copy,input,stream,to,file,bais,target,file,return,null,when,blob,store,get,any,blob,key,class,any,file,class,final,executor,service,executor,executors,new,fixed,thread,pool,number,concurrent,get,operations,try,final,blob,server,blob,server,new,blob,server,config,blob,store,for,int,i,0,i,number,concurrent,get,operations,i,completable,future,input,stream,get,operation,completable,future,supply,async,try,blob,client,blob,client,blob,server,create,client,input,stream,input,stream,blob,client,get,blob,key,byte,buffer,new,byte,data,length,ioutils,read,fully,input,stream,buffer,return,new,byte,array,input,stream,buffer,catch,ioexception,e,throw,new,flink,future,exception,could,not,read,blob,for,key,blob,key,e,executor,get,operations,add,get,operation,completable,future,collection,input,stream,input,streams,future,future,utils,combine,all,get,operations,collection,input,stream,input,streams,input,streams,future,get,for,input,stream,input,stream,input,streams,byte,array,output,stream,baos,new,byte,array,output,stream,data,length,ioutils,copy,input,stream,baos,baos,close,byte,input,baos,to,byte,array,assert,array,equals,data,input,input,stream,close,verify,blob,store,times,1,get,eq,blob,key,any,file,class,finally,executor,shutdown,now
BlobServerGetTest -> static File get(BlobService service, @Nullable JobID jobId, BlobKey key) throws IOException;1507212387;Retrieves the given blob.__<p>Note that if a {@link BlobCacheService} is used, it may try to access the {@link_BlobServer} to retrieve the blob.__@param service_BLOB client to use for connecting to the BLOB service_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_key identifying the BLOB to request;static File get(BlobService service, @Nullable JobID jobId, BlobKey key) throws IOException {_		if (key instanceof PermanentBlobKey) {_			return service.getPermanentBlobService().getFile(jobId, (PermanentBlobKey) key)__		} else if (jobId == null) {_			return service.getTransientBlobService().getFile((TransientBlobKey) key)__		} else {_			return service.getTransientBlobService().getFile(jobId, (TransientBlobKey) key)__		}_	};retrieves,the,given,blob,p,note,that,if,a,link,blob,cache,service,is,used,it,may,try,to,access,the,link,blob,server,to,retrieve,the,blob,param,service,blob,client,to,use,for,connecting,to,the,blob,service,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,key,identifying,the,blob,to,request;static,file,get,blob,service,service,nullable,job,id,job,id,blob,key,key,throws,ioexception,if,key,instanceof,permanent,blob,key,return,service,get,permanent,blob,service,get,file,job,id,permanent,blob,key,key,else,if,job,id,null,return,service,get,transient,blob,service,get,file,transient,blob,key,key,else,return,service,get,transient,blob,service,get,file,job,id,transient,blob,key,key
BlobServerGetTest -> static File get(BlobService service, @Nullable JobID jobId, BlobKey key) throws IOException;1508138617;Retrieves the given blob.__<p>Note that if a {@link BlobCacheService} is used, it may try to access the {@link_BlobServer} to retrieve the blob.__@param service_BLOB client to use for connecting to the BLOB service_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_key identifying the BLOB to request;static File get(BlobService service, @Nullable JobID jobId, BlobKey key) throws IOException {_		if (key instanceof PermanentBlobKey) {_			return service.getPermanentBlobService().getFile(jobId, (PermanentBlobKey) key)__		} else if (jobId == null) {_			return service.getTransientBlobService().getFile((TransientBlobKey) key)__		} else {_			return service.getTransientBlobService().getFile(jobId, (TransientBlobKey) key)__		}_	};retrieves,the,given,blob,p,note,that,if,a,link,blob,cache,service,is,used,it,may,try,to,access,the,link,blob,server,to,retrieve,the,blob,param,service,blob,client,to,use,for,connecting,to,the,blob,service,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,key,identifying,the,blob,to,request;static,file,get,blob,service,service,nullable,job,id,job,id,blob,key,key,throws,ioexception,if,key,instanceof,permanent,blob,key,return,service,get,permanent,blob,service,get,file,job,id,permanent,blob,key,key,else,if,job,id,null,return,service,get,transient,blob,service,get,file,transient,blob,key,key,else,return,service,get,transient,blob,service,get,file,job,id,transient,blob,key,key
BlobServerGetTest -> @Test 	public void testConcurrentGetOperationsNoJob() throws IOException, ExecutionException, InterruptedException;1502701584;FLINK-6020__Tests that concurrent get operations don't concurrently access the BlobStore to download a blob.;@Test_	public void testConcurrentGetOperationsNoJob() throws IOException, ExecutionException, InterruptedException {_		testConcurrentGetOperations(null)__	};flink,6020,tests,that,concurrent,get,operations,don,t,concurrently,access,the,blob,store,to,download,a,blob;test,public,void,test,concurrent,get,operations,no,job,throws,ioexception,execution,exception,interrupted,exception,test,concurrent,get,operations,null
BlobServerGetTest -> @Test 	public void testConcurrentGetOperationsNoJob() throws IOException, ExecutionException, InterruptedException;1503041358;FLINK-6020__Tests that concurrent get operations don't concurrently access the BlobStore to download a blob.;@Test_	public void testConcurrentGetOperationsNoJob() throws IOException, ExecutionException, InterruptedException {_		testConcurrentGetOperations(null)__	};flink,6020,tests,that,concurrent,get,operations,don,t,concurrently,access,the,blob,store,to,download,a,blob;test,public,void,test,concurrent,get,operations,no,job,throws,ioexception,execution,exception,interrupted,exception,test,concurrent,get,operations,null
BlobServerGetTest -> @Test 	public void testConcurrentGetOperationsNoJob() throws IOException, ExecutionException, InterruptedException;1506417942;FLINK-6020__Tests that concurrent get operations don't concurrently access the BlobStore to download a blob.;@Test_	public void testConcurrentGetOperationsNoJob() throws IOException, ExecutionException, InterruptedException {_		testConcurrentGetOperations(null)__	};flink,6020,tests,that,concurrent,get,operations,don,t,concurrently,access,the,blob,store,to,download,a,blob;test,public,void,test,concurrent,get,operations,no,job,throws,ioexception,execution,exception,interrupted,exception,test,concurrent,get,operations,null
BlobServerGetTest -> static void verifyDeleted(BlobService service, @Nullable JobID jobId, BlobKey key) 			throws IOException;1507212387;Checks that the given blob does not exist anymore by trying to access it.__<p>Note that if a {@link BlobCacheService} is used, it may try to access the {@link_BlobServer} to retrieve the blob.__@param service_BLOB client to use for connecting to the BLOB service_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_key identifying the BLOB to request;static void verifyDeleted(BlobService service, @Nullable JobID jobId, BlobKey key)_			throws IOException {_		try {_			get(service, jobId, key)__			fail("File " + jobId + "/" + key + " should have been deleted.")__		} catch (IOException e) {_			_		}_	};checks,that,the,given,blob,does,not,exist,anymore,by,trying,to,access,it,p,note,that,if,a,link,blob,cache,service,is,used,it,may,try,to,access,the,link,blob,server,to,retrieve,the,blob,param,service,blob,client,to,use,for,connecting,to,the,blob,service,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,key,identifying,the,blob,to,request;static,void,verify,deleted,blob,service,service,nullable,job,id,job,id,blob,key,key,throws,ioexception,try,get,service,job,id,key,fail,file,job,id,key,should,have,been,deleted,catch,ioexception,e
BlobServerGetTest -> static void verifyDeleted(BlobService service, @Nullable JobID jobId, BlobKey key) 			throws IOException;1508138617;Checks that the given blob does not exist anymore by trying to access it.__<p>Note that if a {@link BlobCacheService} is used, it may try to access the {@link_BlobServer} to retrieve the blob.__@param service_BLOB client to use for connecting to the BLOB service_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_key identifying the BLOB to request;static void verifyDeleted(BlobService service, @Nullable JobID jobId, BlobKey key)_			throws IOException {_		try {_			get(service, jobId, key)__			fail("File " + jobId + "/" + key + " should have been deleted.")__		} catch (IOException e) {_			_		}_	};checks,that,the,given,blob,does,not,exist,anymore,by,trying,to,access,it,p,note,that,if,a,link,blob,cache,service,is,used,it,may,try,to,access,the,link,blob,server,to,retrieve,the,blob,param,service,blob,client,to,use,for,connecting,to,the,blob,service,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,key,identifying,the,blob,to,request;static,void,verify,deleted,blob,service,service,nullable,job,id,job,id,blob,key,key,throws,ioexception,try,get,service,job,id,key,fail,file,job,id,key,should,have,been,deleted,catch,ioexception,e
BlobServerGetTest -> private void testGetFailsDuringStreaming(final JobID jobId) throws IOException;1502701584;Checks the correct result if a GET operation fails during the file download.__@param jobId job ID or <tt>null</tt> if job-unrelated;private void testGetFailsDuringStreaming(final JobID jobId) throws IOException {_		BlobServer server = null__		BlobClient client = null___		try {_			final Configuration config = new Configuration()__			config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___			server = new BlobServer(config, new VoidBlobStore())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", server.getPort())__			client = new BlobClient(serverAddress, config)___			byte[] data = new byte[5000000]__			rnd.nextBytes(data)___			_			BlobKey key = client.put(jobId, data)__			assertNotNull(key)___			_			InputStream is = getFileHelper(client, jobId, key)___			byte[] receiveBuffer = new byte[data.length]__			int firstChunkLen = 50000__			BlobUtils.readFully(is, receiveBuffer, 0, firstChunkLen, null)__			BlobUtils.readFully(is, receiveBuffer, firstChunkLen, firstChunkLen, null)___			_			for (BlobServerConnection conn : server.getCurrentActiveConnections()) {_				conn.close()__			}__			try {_				BlobUtils.readFully(is, receiveBuffer, 2 * firstChunkLen, data.length - 2 * firstChunkLen, null)__				_				_				assertArrayEquals(data, receiveBuffer)__			}_			catch (IOException e) {_				_			}_		} finally {_			if (client != null) {_				client.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};checks,the,correct,result,if,a,get,operation,fails,during,the,file,download,param,job,id,job,id,or,tt,null,tt,if,job,unrelated;private,void,test,get,fails,during,streaming,final,job,id,job,id,throws,ioexception,blob,server,server,null,blob,client,client,null,try,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,server,new,blob,server,config,new,void,blob,store,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,client,new,blob,client,server,address,config,byte,data,new,byte,5000000,rnd,next,bytes,data,blob,key,key,client,put,job,id,data,assert,not,null,key,input,stream,is,get,file,helper,client,job,id,key,byte,receive,buffer,new,byte,data,length,int,first,chunk,len,50000,blob,utils,read,fully,is,receive,buffer,0,first,chunk,len,null,blob,utils,read,fully,is,receive,buffer,first,chunk,len,first,chunk,len,null,for,blob,server,connection,conn,server,get,current,active,connections,conn,close,try,blob,utils,read,fully,is,receive,buffer,2,first,chunk,len,data,length,2,first,chunk,len,null,assert,array,equals,data,receive,buffer,catch,ioexception,e,finally,if,client,null,client,close,if,server,null,server,close
BlobServerGetTest -> private void testGetFailsDuringStreaming(final JobID jobId) throws IOException;1503041358;Checks the correct result if a GET operation fails during the file download.__@param jobId job ID or <tt>null</tt> if job-unrelated;private void testGetFailsDuringStreaming(final JobID jobId) throws IOException {_		BlobServer server = null__		BlobClient client = null___		try {_			final Configuration config = new Configuration()__			config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___			server = new BlobServer(config, new VoidBlobStore())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", server.getPort())__			client = new BlobClient(serverAddress, config)___			byte[] data = new byte[5000000]__			rnd.nextBytes(data)___			_			BlobKey key = client.put(jobId, data)__			assertNotNull(key)___			_			InputStream is = getFileHelper(client, jobId, key)___			byte[] receiveBuffer = new byte[data.length]__			int firstChunkLen = 50000__			BlobUtils.readFully(is, receiveBuffer, 0, firstChunkLen, null)__			BlobUtils.readFully(is, receiveBuffer, firstChunkLen, firstChunkLen, null)___			_			for (BlobServerConnection conn : server.getCurrentActiveConnections()) {_				conn.close()__			}__			try {_				BlobUtils.readFully(is, receiveBuffer, 2 * firstChunkLen, data.length - 2 * firstChunkLen, null)__				_				_				assertArrayEquals(data, receiveBuffer)__			}_			catch (IOException e) {_				_			}_			is.close()__		} finally {_			if (client != null) {_				client.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};checks,the,correct,result,if,a,get,operation,fails,during,the,file,download,param,job,id,job,id,or,tt,null,tt,if,job,unrelated;private,void,test,get,fails,during,streaming,final,job,id,job,id,throws,ioexception,blob,server,server,null,blob,client,client,null,try,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,server,new,blob,server,config,new,void,blob,store,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,client,new,blob,client,server,address,config,byte,data,new,byte,5000000,rnd,next,bytes,data,blob,key,key,client,put,job,id,data,assert,not,null,key,input,stream,is,get,file,helper,client,job,id,key,byte,receive,buffer,new,byte,data,length,int,first,chunk,len,50000,blob,utils,read,fully,is,receive,buffer,0,first,chunk,len,null,blob,utils,read,fully,is,receive,buffer,first,chunk,len,first,chunk,len,null,for,blob,server,connection,conn,server,get,current,active,connections,conn,close,try,blob,utils,read,fully,is,receive,buffer,2,first,chunk,len,data,length,2,first,chunk,len,null,assert,array,equals,data,receive,buffer,catch,ioexception,e,is,close,finally,if,client,null,client,close,if,server,null,server,close
BlobServerGetTest -> private void testGetFailsDuringStreaming(final JobID jobId) throws IOException;1506417942;Checks the correct result if a GET operation fails during the file download.__@param jobId job ID or <tt>null</tt> if job-unrelated;private void testGetFailsDuringStreaming(final JobID jobId) throws IOException {_		BlobServer server = null__		BlobClient client = null___		try {_			final Configuration config = new Configuration()__			config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___			server = new BlobServer(config, new VoidBlobStore())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", server.getPort())__			client = new BlobClient(serverAddress, config)___			byte[] data = new byte[5000000]__			rnd.nextBytes(data)___			_			BlobKey key = client.put(jobId, data)__			assertNotNull(key)___			_			InputStream is = getFileHelper(client, jobId, key)___			byte[] receiveBuffer = new byte[data.length]__			int firstChunkLen = 50000__			BlobUtils.readFully(is, receiveBuffer, 0, firstChunkLen, null)__			BlobUtils.readFully(is, receiveBuffer, firstChunkLen, firstChunkLen, null)___			_			for (BlobServerConnection conn : server.getCurrentActiveConnections()) {_				conn.close()__			}__			try {_				BlobUtils.readFully(is, receiveBuffer, 2 * firstChunkLen, data.length - 2 * firstChunkLen, null)__				_				_				assertArrayEquals(data, receiveBuffer)__			}_			catch (IOException e) {_				_			}_			is.close()__		} finally {_			if (client != null) {_				client.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};checks,the,correct,result,if,a,get,operation,fails,during,the,file,download,param,job,id,job,id,or,tt,null,tt,if,job,unrelated;private,void,test,get,fails,during,streaming,final,job,id,job,id,throws,ioexception,blob,server,server,null,blob,client,client,null,try,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,server,new,blob,server,config,new,void,blob,store,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,client,new,blob,client,server,address,config,byte,data,new,byte,5000000,rnd,next,bytes,data,blob,key,key,client,put,job,id,data,assert,not,null,key,input,stream,is,get,file,helper,client,job,id,key,byte,receive,buffer,new,byte,data,length,int,first,chunk,len,50000,blob,utils,read,fully,is,receive,buffer,0,first,chunk,len,null,blob,utils,read,fully,is,receive,buffer,first,chunk,len,first,chunk,len,null,for,blob,server,connection,conn,server,get,current,active,connections,conn,close,try,blob,utils,read,fully,is,receive,buffer,2,first,chunk,len,data,length,2,first,chunk,len,null,assert,array,equals,data,receive,buffer,catch,ioexception,e,is,close,finally,if,client,null,client,close,if,server,null,server,close
BlobServerGetTest -> private void testGetFailsDuringLookup( 			@Nullable final JobID jobId1, @Nullable final JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1507212387;Checks the correct result if a GET operation fails during the lookup of the file.__@param jobId1 first job ID or <tt>null</tt> if job-unrelated_@param jobId2 second job ID different to <tt>jobId1</tt>_@param blobType_whether the BLOB should become permanent or transient;private void testGetFailsDuringLookup(_			@Nullable final JobID jobId1, @Nullable final JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			BlobKey key = put(server, jobId1, data, blobType)__			assertNotNull(key)___			_			File blobFile = server.getStorageLocation(jobId1, key)__			assertTrue(blobFile.delete())___			_			verifyDeleted(server, jobId1, key)___			_			BlobKey key2 = put(server, jobId2, data, blobType)__			assertNotNull(key)__			assertEquals(key, key2)___			_			get(server, jobId2, key)__			_			verifyDeleted(server, jobId1, key)___			_			blobFile = server.getStorageLocation(jobId2, key)__			assertTrue(blobFile.delete())__			verifyDeleted(server, jobId2, key)__		}_	};checks,the,correct,result,if,a,get,operation,fails,during,the,lookup,of,the,file,param,job,id1,first,job,id,or,tt,null,tt,if,job,unrelated,param,job,id2,second,job,id,different,to,tt,job,id1,tt,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,get,fails,during,lookup,nullable,final,job,id,job,id1,nullable,final,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,key,put,server,job,id1,data,blob,type,assert,not,null,key,file,blob,file,server,get,storage,location,job,id1,key,assert,true,blob,file,delete,verify,deleted,server,job,id1,key,blob,key,key2,put,server,job,id2,data,blob,type,assert,not,null,key,assert,equals,key,key2,get,server,job,id2,key,verify,deleted,server,job,id1,key,blob,file,server,get,storage,location,job,id2,key,assert,true,blob,file,delete,verify,deleted,server,job,id2,key
BlobServerGetTest -> private void testGetFailsDuringLookup( 			@Nullable final JobID jobId1, @Nullable final JobID jobId2, BlobKey.BlobType blobType) 			throws IOException;1508138617;Checks the correct result if a GET operation fails during the lookup of the file.__@param jobId1 first job ID or <tt>null</tt> if job-unrelated_@param jobId2 second job ID different to <tt>jobId1</tt>_@param blobType_whether the BLOB should become permanent or transient;private void testGetFailsDuringLookup(_			@Nullable final JobID jobId1, @Nullable final JobID jobId2, BlobKey.BlobType blobType)_			throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		try (BlobServer server = new BlobServer(config, new VoidBlobStore())) {__			server.start()___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			BlobKey key = put(server, jobId1, data, blobType)__			assertNotNull(key)___			_			File blobFile = server.getStorageLocation(jobId1, key)__			assertTrue(blobFile.delete())___			_			verifyDeleted(server, jobId1, key)___			_			BlobKey key2 = put(server, jobId2, data, blobType)__			assertNotNull(key2)__			verifyKeyDifferentHashEquals(key, key2)___			_			get(server, jobId2, key2)__			_			verifyDeleted(server, jobId1, key)___			_			blobFile = server.getStorageLocation(jobId2, key2)__			assertTrue(blobFile.delete())__			verifyDeleted(server, jobId2, key2)__		}_	};checks,the,correct,result,if,a,get,operation,fails,during,the,lookup,of,the,file,param,job,id1,first,job,id,or,tt,null,tt,if,job,unrelated,param,job,id2,second,job,id,different,to,tt,job,id1,tt,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,get,fails,during,lookup,nullable,final,job,id,job,id1,nullable,final,job,id,job,id2,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,try,blob,server,server,new,blob,server,config,new,void,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,key,put,server,job,id1,data,blob,type,assert,not,null,key,file,blob,file,server,get,storage,location,job,id1,key,assert,true,blob,file,delete,verify,deleted,server,job,id1,key,blob,key,key2,put,server,job,id2,data,blob,type,assert,not,null,key2,verify,key,different,hash,equals,key,key2,get,server,job,id2,key2,verify,deleted,server,job,id1,key,blob,file,server,get,storage,location,job,id2,key2,assert,true,blob,file,delete,verify,deleted,server,job,id2,key2
BlobServerGetTest -> private static BlobClient verifyDeleted( 			BlobClient client, JobID jobId, BlobKey key, 			InetSocketAddress serverAddress, Configuration config) throws IOException;1502701584;Checks that the given blob does not exist anymore.__@param client_BLOB client to use for connecting to the BLOB server_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_key identifying the BLOB to request_@param serverAddress_BLOB server address_@param config_client config__@return a new client (since the old one is being closed on failure);private static BlobClient verifyDeleted(_			BlobClient client, JobID jobId, BlobKey key,_			InetSocketAddress serverAddress, Configuration config) throws IOException {_		try {_			getFileHelper(client, jobId, key)__			fail("This should not succeed.")__		} catch (IOException e) {_			_		}_		_		return new BlobClient(serverAddress, config)__	};checks,that,the,given,blob,does,not,exist,anymore,param,client,blob,client,to,use,for,connecting,to,the,blob,server,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,key,identifying,the,blob,to,request,param,server,address,blob,server,address,param,config,client,config,return,a,new,client,since,the,old,one,is,being,closed,on,failure;private,static,blob,client,verify,deleted,blob,client,client,job,id,job,id,blob,key,key,inet,socket,address,server,address,configuration,config,throws,ioexception,try,get,file,helper,client,job,id,key,fail,this,should,not,succeed,catch,ioexception,e,return,new,blob,client,server,address,config
BlobServerGetTest -> private static BlobClient verifyDeleted( 			BlobClient client, JobID jobId, BlobKey key, 			InetSocketAddress serverAddress, Configuration config) throws IOException;1503041358;Checks that the given blob does not exist anymore.__@param client_BLOB client to use for connecting to the BLOB server_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_key identifying the BLOB to request_@param serverAddress_BLOB server address_@param config_client config__@return a new client (since the old one is being closed on failure);private static BlobClient verifyDeleted(_			BlobClient client, JobID jobId, BlobKey key,_			InetSocketAddress serverAddress, Configuration config) throws IOException {_		try (InputStream ignored = getFileHelper(client, jobId, key)) {_			fail("This should not succeed.")__		} catch (IOException e) {_			_		}_		_		return new BlobClient(serverAddress, config)__	};checks,that,the,given,blob,does,not,exist,anymore,param,client,blob,client,to,use,for,connecting,to,the,blob,server,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,key,identifying,the,blob,to,request,param,server,address,blob,server,address,param,config,client,config,return,a,new,client,since,the,old,one,is,being,closed,on,failure;private,static,blob,client,verify,deleted,blob,client,client,job,id,job,id,blob,key,key,inet,socket,address,server,address,configuration,config,throws,ioexception,try,input,stream,ignored,get,file,helper,client,job,id,key,fail,this,should,not,succeed,catch,ioexception,e,return,new,blob,client,server,address,config
BlobServerGetTest -> private static BlobClient verifyDeleted( 			BlobClient client, JobID jobId, BlobKey key, 			InetSocketAddress serverAddress, Configuration config) throws IOException;1506417942;Checks that the given blob does not exist anymore.__@param client_BLOB client to use for connecting to the BLOB server_@param jobId_job ID or <tt>null</tt> if job-unrelated_@param key_key identifying the BLOB to request_@param serverAddress_BLOB server address_@param config_client config__@return a new client (since the old one is being closed on failure);private static BlobClient verifyDeleted(_			BlobClient client, JobID jobId, BlobKey key,_			InetSocketAddress serverAddress, Configuration config) throws IOException {_		try (InputStream ignored = getFileHelper(client, jobId, key)) {_			fail("This should not succeed.")__		} catch (IOException e) {_			_		}_		_		return new BlobClient(serverAddress, config)__	};checks,that,the,given,blob,does,not,exist,anymore,param,client,blob,client,to,use,for,connecting,to,the,blob,server,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,key,key,identifying,the,blob,to,request,param,server,address,blob,server,address,param,config,client,config,return,a,new,client,since,the,old,one,is,being,closed,on,failure;private,static,blob,client,verify,deleted,blob,client,client,job,id,job,id,blob,key,key,inet,socket,address,server,address,configuration,config,throws,ioexception,try,input,stream,ignored,get,file,helper,client,job,id,key,fail,this,should,not,succeed,catch,ioexception,e,return,new,blob,client,server,address,config
BlobServerGetTest -> @Test 	public void testConcurrentGetOperationsForJob() throws IOException, ExecutionException, InterruptedException;1502701584;FLINK-6020__Tests that concurrent get operations don't concurrently access the BlobStore to download a blob.;@Test_	public void testConcurrentGetOperationsForJob() throws IOException, ExecutionException, InterruptedException {_		testConcurrentGetOperations(new JobID())__	};flink,6020,tests,that,concurrent,get,operations,don,t,concurrently,access,the,blob,store,to,download,a,blob;test,public,void,test,concurrent,get,operations,for,job,throws,ioexception,execution,exception,interrupted,exception,test,concurrent,get,operations,new,job,id
BlobServerGetTest -> @Test 	public void testConcurrentGetOperationsForJob() throws IOException, ExecutionException, InterruptedException;1503041358;FLINK-6020__Tests that concurrent get operations don't concurrently access the BlobStore to download a blob.;@Test_	public void testConcurrentGetOperationsForJob() throws IOException, ExecutionException, InterruptedException {_		testConcurrentGetOperations(new JobID())__	};flink,6020,tests,that,concurrent,get,operations,don,t,concurrently,access,the,blob,store,to,download,a,blob;test,public,void,test,concurrent,get,operations,for,job,throws,ioexception,execution,exception,interrupted,exception,test,concurrent,get,operations,new,job,id
BlobServerGetTest -> @Test 	public void testConcurrentGetOperationsForJob() throws IOException, ExecutionException, InterruptedException;1506417942;FLINK-6020__Tests that concurrent get operations don't concurrently access the BlobStore to download a blob.;@Test_	public void testConcurrentGetOperationsForJob() throws IOException, ExecutionException, InterruptedException {_		testConcurrentGetOperations(new JobID())__	};flink,6020,tests,that,concurrent,get,operations,don,t,concurrently,access,the,blob,store,to,download,a,blob;test,public,void,test,concurrent,get,operations,for,job,throws,ioexception,execution,exception,interrupted,exception,test,concurrent,get,operations,new,job,id
BlobServerGetTest -> private void testConcurrentGetOperations( 			@Nullable final JobID jobId, final BlobKey.BlobType blobType) 			throws IOException, InterruptedException, ExecutionException;1507212387;[FLINK-6020] Tests that concurrent get operations don't concurrently access the BlobStore to_download a blob.__@param jobId_job ID to use (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient;private void testConcurrentGetOperations(_			@Nullable final JobID jobId, final BlobKey.BlobType blobType)_			throws IOException, InterruptedException, ExecutionException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		final BlobStore blobStore = mock(BlobStore.class)___		final int numberConcurrentGetOperations = 3__		final List<CompletableFuture<File>> getOperations = new ArrayList<>(numberConcurrentGetOperations)___		final byte[] data = {1, 2, 3, 4, 99, 42}___		MessageDigest md = BlobUtils.createMessageDigest()___		_		final BlobKey blobKey = BlobKey.createKey(blobType, md.digest(data))___		doAnswer(_			new Answer() {_				@Override_				public Object answer(InvocationOnMock invocation) throws Throwable {_					File targetFile = (File) invocation.getArguments()[2]___					FileUtils.writeByteArrayToFile(targetFile, data)___					return null__				}_			}_		).when(blobStore).get(any(JobID.class), any(BlobKey.class), any(File.class))___		final ExecutorService executor = Executors.newFixedThreadPool(numberConcurrentGetOperations)___		try (final BlobServer server = new BlobServer(config, blobStore)) {__			server.start()___			_			assertEquals(blobKey, put(server, jobId, data, blobType))___			_			if (blobType == PERMANENT_BLOB) {_				_				assertTrue(server.getStorageLocation(jobId, blobKey).delete())__			}_			for (int i = 0_ i < numberConcurrentGetOperations_ i++) {_				CompletableFuture<File> getOperation = CompletableFuture.supplyAsync(_					() -> {_						try {_							File file = get(server, jobId, blobKey)__							_							validateGetAndClose(new FileInputStream(file), data)__							return file__						} catch (IOException e) {_							throw new CompletionException(new FlinkException(_								"Could not read blob for key " + blobKey + '.', e))__						}_					},_					executor)___				getOperations.add(getOperation)__			}__			CompletableFuture<Collection<File>> filesFuture = FutureUtils.combineAll(getOperations)__			filesFuture.get()__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,get,operations,don,t,concurrently,access,the,blob,store,to,download,a,blob,param,job,id,job,id,to,use,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,concurrent,get,operations,nullable,final,job,id,job,id,final,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,execution,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,final,blob,store,blob,store,mock,blob,store,class,final,int,number,concurrent,get,operations,3,final,list,completable,future,file,get,operations,new,array,list,number,concurrent,get,operations,final,byte,data,1,2,3,4,99,42,message,digest,md,blob,utils,create,message,digest,final,blob,key,blob,key,blob,key,create,key,blob,type,md,digest,data,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,file,target,file,file,invocation,get,arguments,2,file,utils,write,byte,array,to,file,target,file,data,return,null,when,blob,store,get,any,job,id,class,any,blob,key,class,any,file,class,final,executor,service,executor,executors,new,fixed,thread,pool,number,concurrent,get,operations,try,final,blob,server,server,new,blob,server,config,blob,store,server,start,assert,equals,blob,key,put,server,job,id,data,blob,type,if,blob,type,assert,true,server,get,storage,location,job,id,blob,key,delete,for,int,i,0,i,number,concurrent,get,operations,i,completable,future,file,get,operation,completable,future,supply,async,try,file,file,get,server,job,id,blob,key,validate,get,and,close,new,file,input,stream,file,data,return,file,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,read,blob,for,key,blob,key,e,executor,get,operations,add,get,operation,completable,future,collection,file,files,future,future,utils,combine,all,get,operations,files,future,get,finally,executor,shutdown,now
BlobServerGetTest -> private void testConcurrentGetOperations( 			@Nullable final JobID jobId, final BlobKey.BlobType blobType) 			throws IOException, InterruptedException, ExecutionException;1508138617;[FLINK-6020] Tests that concurrent get operations don't concurrently access the BlobStore to_download a blob.__@param jobId_job ID to use (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient;private void testConcurrentGetOperations(_			@Nullable final JobID jobId, final BlobKey.BlobType blobType)_			throws IOException, InterruptedException, ExecutionException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___		final BlobStore blobStore = mock(BlobStore.class)___		final int numberConcurrentGetOperations = 3__		final List<CompletableFuture<File>> getOperations = new ArrayList<>(numberConcurrentGetOperations)___		final byte[] data = {1, 2, 3, 4, 99, 42}___		doAnswer(_			new Answer() {_				@Override_				public Object answer(InvocationOnMock invocation) throws Throwable {_					File targetFile = (File) invocation.getArguments()[2]___					FileUtils.writeByteArrayToFile(targetFile, data)___					return null__				}_			}_		).when(blobStore).get(any(JobID.class), any(BlobKey.class), any(File.class))___		final ExecutorService executor = Executors.newFixedThreadPool(numberConcurrentGetOperations)___		try (final BlobServer server = new BlobServer(config, blobStore)) {__			server.start()___			_			final BlobKey blobKey = put(server, jobId, data, blobType)___			_			if (blobType == PERMANENT_BLOB) {_				_				assertTrue(server.getStorageLocation(jobId, blobKey).delete())__			}_			for (int i = 0_ i < numberConcurrentGetOperations_ i++) {_				CompletableFuture<File> getOperation = CompletableFuture.supplyAsync(_					() -> {_						try {_							File file = get(server, jobId, blobKey)__							_							validateGetAndClose(new FileInputStream(file), data)__							return file__						} catch (IOException e) {_							throw new CompletionException(new FlinkException(_								"Could not read blob for key " + blobKey + '.', e))__						}_					},_					executor)___				getOperations.add(getOperation)__			}__			CompletableFuture<Collection<File>> filesFuture = FutureUtils.combineAll(getOperations)__			filesFuture.get()__		} finally {_			executor.shutdownNow()__		}_	};flink,6020,tests,that,concurrent,get,operations,don,t,concurrently,access,the,blob,store,to,download,a,blob,param,job,id,job,id,to,use,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,concurrent,get,operations,nullable,final,job,id,job,id,final,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,execution,exception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,final,blob,store,blob,store,mock,blob,store,class,final,int,number,concurrent,get,operations,3,final,list,completable,future,file,get,operations,new,array,list,number,concurrent,get,operations,final,byte,data,1,2,3,4,99,42,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,throws,throwable,file,target,file,file,invocation,get,arguments,2,file,utils,write,byte,array,to,file,target,file,data,return,null,when,blob,store,get,any,job,id,class,any,blob,key,class,any,file,class,final,executor,service,executor,executors,new,fixed,thread,pool,number,concurrent,get,operations,try,final,blob,server,server,new,blob,server,config,blob,store,server,start,final,blob,key,blob,key,put,server,job,id,data,blob,type,if,blob,type,assert,true,server,get,storage,location,job,id,blob,key,delete,for,int,i,0,i,number,concurrent,get,operations,i,completable,future,file,get,operation,completable,future,supply,async,try,file,file,get,server,job,id,blob,key,validate,get,and,close,new,file,input,stream,file,data,return,file,catch,ioexception,e,throw,new,completion,exception,new,flink,exception,could,not,read,blob,for,key,blob,key,e,executor,get,operations,add,get,operation,completable,future,collection,file,files,future,future,utils,combine,all,get,operations,files,future,get,finally,executor,shutdown,now
BlobServerGetTest -> @Test 	public void testGetFailsIncomingForJobHa() throws IOException;1507212387;Retrieves a BLOB from the HA store to a {@link BlobServer} which cannot create incoming_files. File transfers should fail.;@Test_	public void testGetFailsIncomingForJobHa() throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final JobID jobId = new JobID()___		final Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(CoreOptions.STATE_BACKEND, "FILESYSTEM")__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH, temporaryFolder.newFolder().getPath())___		BlobStoreService blobStore = null___		try {_			blobStore = BlobUtils.createBlobStoreFromConfig(config)___			File tempFileDir = null__			try (BlobServer server = new BlobServer(config, blobStore)) {__				server.start()___				_				byte[] data = new byte[2000000]__				rnd.nextBytes(data)__				BlobKey blobKey = put(server, jobId, data, true)__				assertTrue(server.getStorageLocation(jobId, blobKey).delete())___				_				tempFileDir = server.createTemporaryFilename().getParentFile()__				assertTrue(tempFileDir.setExecutable(true, false))__				assertTrue(tempFileDir.setReadable(true, false))__				assertTrue(tempFileDir.setWritable(false, false))___				_				exception.expect(IOException.class)__				exception.expectMessage("Permission denied")___				try {_					get(server, jobId, blobKey, true)__				} finally {_					HashSet<String> expectedDirs = new HashSet<>()__					expectedDirs.add("incoming")__					expectedDirs.add(JOB_DIR_PREFIX + jobId)__					_					File storageDir = tempFileDir.getParentFile()__					String[] actualDirs = storageDir.list()__					assertNotNull(actualDirs)__					assertEquals(expectedDirs, new HashSet<>(Arrays.asList(actualDirs)))___					_					File jobDir = new File(tempFileDir.getParentFile(), JOB_DIR_PREFIX + jobId)__					assertArrayEquals(new String[] {}, jobDir.list())__				}_			} finally {_				_				if (tempFileDir != null) {_					_					tempFileDir.setWritable(true, false)__				}_			}_		} finally {_			if (blobStore != null) {_				blobStore.closeAndCleanupAllData()__			}_		}_	};retrieves,a,blob,from,the,ha,store,to,a,link,blob,server,which,cannot,create,incoming,files,file,transfers,should,fail;test,public,void,test,get,fails,incoming,for,job,ha,throws,ioexception,assume,true,operating,system,is,windows,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,core,options,filesystem,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,blob,store,service,blob,store,null,try,blob,store,blob,utils,create,blob,store,from,config,config,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,blob,key,put,server,job,id,data,true,assert,true,server,get,storage,location,job,id,blob,key,delete,temp,file,dir,server,create,temporary,filename,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,exception,expect,ioexception,class,exception,expect,message,permission,denied,try,get,server,job,id,blob,key,true,finally,hash,set,string,expected,dirs,new,hash,set,expected,dirs,add,incoming,expected,dirs,add,job,id,file,storage,dir,temp,file,dir,get,parent,file,string,actual,dirs,storage,dir,list,assert,not,null,actual,dirs,assert,equals,expected,dirs,new,hash,set,arrays,as,list,actual,dirs,file,job,dir,new,file,temp,file,dir,get,parent,file,job,id,assert,array,equals,new,string,job,dir,list,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false,finally,if,blob,store,null,blob,store,close,and,cleanup,all,data
BlobServerGetTest -> @Test 	public void testGetFailsIncomingForJobHa() throws IOException;1507212387;Retrieves a BLOB from the HA store to a {@link BlobServer} which cannot create incoming_files. File transfers should fail.;@Test_	public void testGetFailsIncomingForJobHa() throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final JobID jobId = new JobID()___		final Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH, temporaryFolder.newFolder().getPath())___		BlobStoreService blobStore = null___		try {_			blobStore = BlobUtils.createBlobStoreFromConfig(config)___			File tempFileDir = null__			try (BlobServer server = new BlobServer(config, blobStore)) {__				server.start()___				_				byte[] data = new byte[2000000]__				rnd.nextBytes(data)__				BlobKey blobKey = put(server, jobId, data, PERMANENT_BLOB)__				assertTrue(server.getStorageLocation(jobId, blobKey).delete())___				_				tempFileDir = server.createTemporaryFilename().getParentFile()__				assertTrue(tempFileDir.setExecutable(true, false))__				assertTrue(tempFileDir.setReadable(true, false))__				assertTrue(tempFileDir.setWritable(false, false))___				_				exception.expect(IOException.class)__				exception.expectMessage("Permission denied")___				try {_					get(server, jobId, blobKey)__				} finally {_					HashSet<String> expectedDirs = new HashSet<>()__					expectedDirs.add("incoming")__					expectedDirs.add(JOB_DIR_PREFIX + jobId)__					_					File storageDir = tempFileDir.getParentFile()__					String[] actualDirs = storageDir.list()__					assertNotNull(actualDirs)__					assertEquals(expectedDirs, new HashSet<>(Arrays.asList(actualDirs)))___					_					File jobDir = new File(tempFileDir.getParentFile(), JOB_DIR_PREFIX + jobId)__					assertArrayEquals(new String[] {}, jobDir.list())__				}_			} finally {_				_				if (tempFileDir != null) {_					_					tempFileDir.setWritable(true, false)__				}_			}_		} finally {_			if (blobStore != null) {_				blobStore.closeAndCleanupAllData()__			}_		}_	};retrieves,a,blob,from,the,ha,store,to,a,link,blob,server,which,cannot,create,incoming,files,file,transfers,should,fail;test,public,void,test,get,fails,incoming,for,job,ha,throws,ioexception,assume,true,operating,system,is,windows,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,blob,store,service,blob,store,null,try,blob,store,blob,utils,create,blob,store,from,config,config,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,blob,key,put,server,job,id,data,assert,true,server,get,storage,location,job,id,blob,key,delete,temp,file,dir,server,create,temporary,filename,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,exception,expect,ioexception,class,exception,expect,message,permission,denied,try,get,server,job,id,blob,key,finally,hash,set,string,expected,dirs,new,hash,set,expected,dirs,add,incoming,expected,dirs,add,job,id,file,storage,dir,temp,file,dir,get,parent,file,string,actual,dirs,storage,dir,list,assert,not,null,actual,dirs,assert,equals,expected,dirs,new,hash,set,arrays,as,list,actual,dirs,file,job,dir,new,file,temp,file,dir,get,parent,file,job,id,assert,array,equals,new,string,job,dir,list,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false,finally,if,blob,store,null,blob,store,close,and,cleanup,all,data
BlobServerGetTest -> @Test 	public void testGetFailsIncomingForJobHa() throws IOException;1508138617;Retrieves a BLOB from the HA store to a {@link BlobServer} which cannot create incoming_files. File transfers should fail.;@Test_	public void testGetFailsIncomingForJobHa() throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final JobID jobId = new JobID()___		final Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH, temporaryFolder.newFolder().getPath())___		BlobStoreService blobStore = null___		try {_			blobStore = BlobUtils.createBlobStoreFromConfig(config)___			File tempFileDir = null__			try (BlobServer server = new BlobServer(config, blobStore)) {__				server.start()___				_				byte[] data = new byte[2000000]__				rnd.nextBytes(data)__				BlobKey blobKey = put(server, jobId, data, PERMANENT_BLOB)__				assertTrue(server.getStorageLocation(jobId, blobKey).delete())___				_				tempFileDir = server.createTemporaryFilename().getParentFile()__				assertTrue(tempFileDir.setExecutable(true, false))__				assertTrue(tempFileDir.setReadable(true, false))__				assertTrue(tempFileDir.setWritable(false, false))___				_				exception.expect(IOException.class)__				exception.expectMessage("Permission denied")___				try {_					get(server, jobId, blobKey)__				} finally {_					HashSet<String> expectedDirs = new HashSet<>()__					expectedDirs.add("incoming")__					expectedDirs.add(JOB_DIR_PREFIX + jobId)__					_					File storageDir = tempFileDir.getParentFile()__					String[] actualDirs = storageDir.list()__					assertNotNull(actualDirs)__					assertEquals(expectedDirs, new HashSet<>(Arrays.asList(actualDirs)))___					_					File jobDir = new File(tempFileDir.getParentFile(), JOB_DIR_PREFIX + jobId)__					assertArrayEquals(new String[] {}, jobDir.list())__				}_			} finally {_				_				if (tempFileDir != null) {_					_					tempFileDir.setWritable(true, false)__				}_			}_		} finally {_			if (blobStore != null) {_				blobStore.closeAndCleanupAllData()__			}_		}_	};retrieves,a,blob,from,the,ha,store,to,a,link,blob,server,which,cannot,create,incoming,files,file,transfers,should,fail;test,public,void,test,get,fails,incoming,for,job,ha,throws,ioexception,assume,true,operating,system,is,windows,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,blob,store,service,blob,store,null,try,blob,store,blob,utils,create,blob,store,from,config,config,file,temp,file,dir,null,try,blob,server,server,new,blob,server,config,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,blob,key,put,server,job,id,data,assert,true,server,get,storage,location,job,id,blob,key,delete,temp,file,dir,server,create,temporary,filename,get,parent,file,assert,true,temp,file,dir,set,executable,true,false,assert,true,temp,file,dir,set,readable,true,false,assert,true,temp,file,dir,set,writable,false,false,exception,expect,ioexception,class,exception,expect,message,permission,denied,try,get,server,job,id,blob,key,finally,hash,set,string,expected,dirs,new,hash,set,expected,dirs,add,incoming,expected,dirs,add,job,id,file,storage,dir,temp,file,dir,get,parent,file,string,actual,dirs,storage,dir,list,assert,not,null,actual,dirs,assert,equals,expected,dirs,new,hash,set,arrays,as,list,actual,dirs,file,job,dir,new,file,temp,file,dir,get,parent,file,job,id,assert,array,equals,new,string,job,dir,list,finally,if,temp,file,dir,null,temp,file,dir,set,writable,true,false,finally,if,blob,store,null,blob,store,close,and,cleanup,all,data
BlobServerGetTest -> private void testGetFailsDuringLookup(final JobID jobId1, final JobID jobId2) 		throws IOException;1502701584;Checks the correct result if a GET operation fails during the lookup of the file.__@param jobId1 first job ID or <tt>null</tt> if job-unrelated_@param jobId2 second job ID different to <tt>jobId1</tt>;private void testGetFailsDuringLookup(final JobID jobId1, final JobID jobId2)_		throws IOException {_		BlobServer server = null__		BlobClient client = null___		try {_			final Configuration config = new Configuration()__			config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___			server = new BlobServer(config, new VoidBlobStore())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", server.getPort())__			client = new BlobClient(serverAddress, config)___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			BlobKey key = client.put(jobId1, data)__			assertNotNull(key)___			_			File blobFile = server.getStorageLocation(jobId1, key)__			assertTrue(blobFile.delete())___			_			client = verifyDeleted(client, jobId1, key, serverAddress, config)___			BlobKey key2 = client.put(jobId2, data)__			assertNotNull(key)__			assertEquals(key, key2)__			_			getFileHelper(client, jobId2, key)__			_			client = verifyDeleted(client, jobId1, key, serverAddress, config)___			_			blobFile = server.getStorageLocation(jobId2, key)__			assertTrue(blobFile.delete())__			client = verifyDeleted(client, jobId2, key, serverAddress, config)___		} finally {_			if (client != null) {_				client.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};checks,the,correct,result,if,a,get,operation,fails,during,the,lookup,of,the,file,param,job,id1,first,job,id,or,tt,null,tt,if,job,unrelated,param,job,id2,second,job,id,different,to,tt,job,id1,tt;private,void,test,get,fails,during,lookup,final,job,id,job,id1,final,job,id,job,id2,throws,ioexception,blob,server,server,null,blob,client,client,null,try,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,server,new,blob,server,config,new,void,blob,store,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,client,new,blob,client,server,address,config,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,key,client,put,job,id1,data,assert,not,null,key,file,blob,file,server,get,storage,location,job,id1,key,assert,true,blob,file,delete,client,verify,deleted,client,job,id1,key,server,address,config,blob,key,key2,client,put,job,id2,data,assert,not,null,key,assert,equals,key,key2,get,file,helper,client,job,id2,key,client,verify,deleted,client,job,id1,key,server,address,config,blob,file,server,get,storage,location,job,id2,key,assert,true,blob,file,delete,client,verify,deleted,client,job,id2,key,server,address,config,finally,if,client,null,client,close,if,server,null,server,close
BlobServerGetTest -> private void testGetFailsDuringLookup(final JobID jobId1, final JobID jobId2) 		throws IOException;1503041358;Checks the correct result if a GET operation fails during the lookup of the file.__@param jobId1 first job ID or <tt>null</tt> if job-unrelated_@param jobId2 second job ID different to <tt>jobId1</tt>;private void testGetFailsDuringLookup(final JobID jobId1, final JobID jobId2)_		throws IOException {_		BlobServer server = null__		BlobClient client = null___		try {_			final Configuration config = new Configuration()__			config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___			server = new BlobServer(config, new VoidBlobStore())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", server.getPort())__			client = new BlobClient(serverAddress, config)___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			BlobKey key = client.put(jobId1, data)__			assertNotNull(key)___			_			File blobFile = server.getStorageLocation(jobId1, key)__			assertTrue(blobFile.delete())___			_			client = verifyDeleted(client, jobId1, key, serverAddress, config)___			BlobKey key2 = client.put(jobId2, data)__			assertNotNull(key)__			assertEquals(key, key2)__			_			validateGetAndClose(getFileHelper(client, jobId2, key), data)__			_			client = verifyDeleted(client, jobId1, key, serverAddress, config)___			_			blobFile = server.getStorageLocation(jobId2, key)__			assertTrue(blobFile.delete())__			client = verifyDeleted(client, jobId2, key, serverAddress, config)___		} finally {_			if (client != null) {_				client.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};checks,the,correct,result,if,a,get,operation,fails,during,the,lookup,of,the,file,param,job,id1,first,job,id,or,tt,null,tt,if,job,unrelated,param,job,id2,second,job,id,different,to,tt,job,id1,tt;private,void,test,get,fails,during,lookup,final,job,id,job,id1,final,job,id,job,id2,throws,ioexception,blob,server,server,null,blob,client,client,null,try,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,server,new,blob,server,config,new,void,blob,store,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,client,new,blob,client,server,address,config,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,key,client,put,job,id1,data,assert,not,null,key,file,blob,file,server,get,storage,location,job,id1,key,assert,true,blob,file,delete,client,verify,deleted,client,job,id1,key,server,address,config,blob,key,key2,client,put,job,id2,data,assert,not,null,key,assert,equals,key,key2,validate,get,and,close,get,file,helper,client,job,id2,key,data,client,verify,deleted,client,job,id1,key,server,address,config,blob,file,server,get,storage,location,job,id2,key,assert,true,blob,file,delete,client,verify,deleted,client,job,id2,key,server,address,config,finally,if,client,null,client,close,if,server,null,server,close
BlobServerGetTest -> private void testGetFailsDuringLookup(final JobID jobId1, final JobID jobId2) 		throws IOException;1506417942;Checks the correct result if a GET operation fails during the lookup of the file.__@param jobId1 first job ID or <tt>null</tt> if job-unrelated_@param jobId2 second job ID different to <tt>jobId1</tt>;private void testGetFailsDuringLookup(final JobID jobId1, final JobID jobId2)_		throws IOException {_		BlobServer server = null__		BlobClient client = null___		try {_			final Configuration config = new Configuration()__			config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())___			server = new BlobServer(config, new VoidBlobStore())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", server.getPort())__			client = new BlobClient(serverAddress, config)___			byte[] data = new byte[2000000]__			rnd.nextBytes(data)___			_			BlobKey key = client.put(jobId1, data)__			assertNotNull(key)___			_			File blobFile = server.getStorageLocation(jobId1, key)__			assertTrue(blobFile.delete())___			_			client = verifyDeleted(client, jobId1, key, serverAddress, config)___			BlobKey key2 = client.put(jobId2, data)__			assertNotNull(key)__			assertEquals(key, key2)__			_			validateGetAndClose(getFileHelper(client, jobId2, key), data)__			_			client = verifyDeleted(client, jobId1, key, serverAddress, config)___			_			blobFile = server.getStorageLocation(jobId2, key)__			assertTrue(blobFile.delete())__			client = verifyDeleted(client, jobId2, key, serverAddress, config)___		} finally {_			if (client != null) {_				client.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};checks,the,correct,result,if,a,get,operation,fails,during,the,lookup,of,the,file,param,job,id1,first,job,id,or,tt,null,tt,if,job,unrelated,param,job,id2,second,job,id,different,to,tt,job,id1,tt;private,void,test,get,fails,during,lookup,final,job,id,job,id1,final,job,id,job,id2,throws,ioexception,blob,server,server,null,blob,client,client,null,try,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,server,new,blob,server,config,new,void,blob,store,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,client,new,blob,client,server,address,config,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,key,client,put,job,id1,data,assert,not,null,key,file,blob,file,server,get,storage,location,job,id1,key,assert,true,blob,file,delete,client,verify,deleted,client,job,id1,key,server,address,config,blob,key,key2,client,put,job,id2,data,assert,not,null,key,assert,equals,key,key2,validate,get,and,close,get,file,helper,client,job,id2,key,data,client,verify,deleted,client,job,id1,key,server,address,config,blob,file,server,get,storage,location,job,id2,key,assert,true,blob,file,delete,client,verify,deleted,client,job,id2,key,server,address,config,finally,if,client,null,client,close,if,server,null,server,close
BlobServerGetTest -> @Test 	public void testGetFailsStoreForJobHa() throws IOException;1507212387;Retrieves a BLOB from the HA store to a {@link BlobServer} which cannot create the final_storage file. File transfers should fail.;@Test_	public void testGetFailsStoreForJobHa() throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final JobID jobId = new JobID()___		final Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(CoreOptions.STATE_BACKEND, "FILESYSTEM")__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH, temporaryFolder.newFolder().getPath())___		BlobStoreService blobStore = null___		try {_			blobStore = BlobUtils.createBlobStoreFromConfig(config)___			File jobStoreDir = null__			try (BlobServer server = new BlobServer(config, blobStore)) {__				server.start()___				_				byte[] data = new byte[2000000]__				rnd.nextBytes(data)__				BlobKey blobKey = put(server, jobId, data, true)__				assertTrue(server.getStorageLocation(jobId, blobKey).delete())___				_				jobStoreDir = server.getStorageLocation(jobId, blobKey).getParentFile()__				assertTrue(jobStoreDir.setExecutable(true, false))__				assertTrue(jobStoreDir.setReadable(true, false))__				assertTrue(jobStoreDir.setWritable(false, false))___				_				exception.expect(AccessDeniedException.class)___				try {_					get(server, jobId, blobKey, true)__				} finally {_					_					File incomingFileDir = new File(jobStoreDir.getParent(), "incoming")__					assertArrayEquals(new String[] {}, incomingFileDir.list())___					_					assertArrayEquals(new String[] {}, jobStoreDir.list())__				}_			} finally {_				_				if (jobStoreDir != null) {_					_					jobStoreDir.setWritable(true, false)__				}_			}_		} finally {_			if (blobStore != null) {_				blobStore.closeAndCleanupAllData()__			}_		}_	};retrieves,a,blob,from,the,ha,store,to,a,link,blob,server,which,cannot,create,the,final,storage,file,file,transfers,should,fail;test,public,void,test,get,fails,store,for,job,ha,throws,ioexception,assume,true,operating,system,is,windows,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,core,options,filesystem,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,blob,store,service,blob,store,null,try,blob,store,blob,utils,create,blob,store,from,config,config,file,job,store,dir,null,try,blob,server,server,new,blob,server,config,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,blob,key,put,server,job,id,data,true,assert,true,server,get,storage,location,job,id,blob,key,delete,job,store,dir,server,get,storage,location,job,id,blob,key,get,parent,file,assert,true,job,store,dir,set,executable,true,false,assert,true,job,store,dir,set,readable,true,false,assert,true,job,store,dir,set,writable,false,false,exception,expect,access,denied,exception,class,try,get,server,job,id,blob,key,true,finally,file,incoming,file,dir,new,file,job,store,dir,get,parent,incoming,assert,array,equals,new,string,incoming,file,dir,list,assert,array,equals,new,string,job,store,dir,list,finally,if,job,store,dir,null,job,store,dir,set,writable,true,false,finally,if,blob,store,null,blob,store,close,and,cleanup,all,data
BlobServerGetTest -> @Test 	public void testGetFailsStoreForJobHa() throws IOException;1507212387;Retrieves a BLOB from the HA store to a {@link BlobServer} which cannot create the final_storage file. File transfers should fail.;@Test_	public void testGetFailsStoreForJobHa() throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final JobID jobId = new JobID()___		final Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH, temporaryFolder.newFolder().getPath())___		BlobStoreService blobStore = null___		try {_			blobStore = BlobUtils.createBlobStoreFromConfig(config)___			File jobStoreDir = null__			try (BlobServer server = new BlobServer(config, blobStore)) {__				server.start()___				_				byte[] data = new byte[2000000]__				rnd.nextBytes(data)__				BlobKey blobKey = put(server, jobId, data, PERMANENT_BLOB)__				assertTrue(server.getStorageLocation(jobId, blobKey).delete())___				_				jobStoreDir = server.getStorageLocation(jobId, blobKey).getParentFile()__				assertTrue(jobStoreDir.setExecutable(true, false))__				assertTrue(jobStoreDir.setReadable(true, false))__				assertTrue(jobStoreDir.setWritable(false, false))___				_				exception.expect(AccessDeniedException.class)___				try {_					get(server, jobId, blobKey)__				} finally {_					_					File incomingFileDir = new File(jobStoreDir.getParent(), "incoming")__					assertArrayEquals(new String[] {}, incomingFileDir.list())___					_					assertArrayEquals(new String[] {}, jobStoreDir.list())__				}_			} finally {_				_				if (jobStoreDir != null) {_					_					jobStoreDir.setWritable(true, false)__				}_			}_		} finally {_			if (blobStore != null) {_				blobStore.closeAndCleanupAllData()__			}_		}_	};retrieves,a,blob,from,the,ha,store,to,a,link,blob,server,which,cannot,create,the,final,storage,file,file,transfers,should,fail;test,public,void,test,get,fails,store,for,job,ha,throws,ioexception,assume,true,operating,system,is,windows,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,blob,store,service,blob,store,null,try,blob,store,blob,utils,create,blob,store,from,config,config,file,job,store,dir,null,try,blob,server,server,new,blob,server,config,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,blob,key,put,server,job,id,data,assert,true,server,get,storage,location,job,id,blob,key,delete,job,store,dir,server,get,storage,location,job,id,blob,key,get,parent,file,assert,true,job,store,dir,set,executable,true,false,assert,true,job,store,dir,set,readable,true,false,assert,true,job,store,dir,set,writable,false,false,exception,expect,access,denied,exception,class,try,get,server,job,id,blob,key,finally,file,incoming,file,dir,new,file,job,store,dir,get,parent,incoming,assert,array,equals,new,string,incoming,file,dir,list,assert,array,equals,new,string,job,store,dir,list,finally,if,job,store,dir,null,job,store,dir,set,writable,true,false,finally,if,blob,store,null,blob,store,close,and,cleanup,all,data
BlobServerGetTest -> @Test 	public void testGetFailsStoreForJobHa() throws IOException;1508138617;Retrieves a BLOB from the HA store to a {@link BlobServer} which cannot create the final_storage file. File transfers should fail.;@Test_	public void testGetFailsStoreForJobHa() throws IOException {_		assumeTrue(!OperatingSystem.isWindows())_ __		final JobID jobId = new JobID()___		final Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH, temporaryFolder.newFolder().getPath())___		BlobStoreService blobStore = null___		try {_			blobStore = BlobUtils.createBlobStoreFromConfig(config)___			File jobStoreDir = null__			try (BlobServer server = new BlobServer(config, blobStore)) {__				server.start()___				_				byte[] data = new byte[2000000]__				rnd.nextBytes(data)__				BlobKey blobKey = put(server, jobId, data, PERMANENT_BLOB)__				assertTrue(server.getStorageLocation(jobId, blobKey).delete())___				_				jobStoreDir = server.getStorageLocation(jobId, blobKey).getParentFile()__				assertTrue(jobStoreDir.setExecutable(true, false))__				assertTrue(jobStoreDir.setReadable(true, false))__				assertTrue(jobStoreDir.setWritable(false, false))___				_				exception.expect(AccessDeniedException.class)___				try {_					get(server, jobId, blobKey)__				} finally {_					_					File incomingFileDir = new File(jobStoreDir.getParent(), "incoming")__					assertArrayEquals(new String[] {}, incomingFileDir.list())___					_					assertArrayEquals(new String[] {}, jobStoreDir.list())__				}_			} finally {_				_				if (jobStoreDir != null) {_					_					jobStoreDir.setWritable(true, false)__				}_			}_		} finally {_			if (blobStore != null) {_				blobStore.closeAndCleanupAllData()__			}_		}_	};retrieves,a,blob,from,the,ha,store,to,a,link,blob,server,which,cannot,create,the,final,storage,file,file,transfers,should,fail;test,public,void,test,get,fails,store,for,job,ha,throws,ioexception,assume,true,operating,system,is,windows,final,job,id,job,id,new,job,id,final,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,blob,store,service,blob,store,null,try,blob,store,blob,utils,create,blob,store,from,config,config,file,job,store,dir,null,try,blob,server,server,new,blob,server,config,blob,store,server,start,byte,data,new,byte,2000000,rnd,next,bytes,data,blob,key,blob,key,put,server,job,id,data,assert,true,server,get,storage,location,job,id,blob,key,delete,job,store,dir,server,get,storage,location,job,id,blob,key,get,parent,file,assert,true,job,store,dir,set,executable,true,false,assert,true,job,store,dir,set,readable,true,false,assert,true,job,store,dir,set,writable,false,false,exception,expect,access,denied,exception,class,try,get,server,job,id,blob,key,finally,file,incoming,file,dir,new,file,job,store,dir,get,parent,incoming,assert,array,equals,new,string,incoming,file,dir,list,assert,array,equals,new,string,job,store,dir,list,finally,if,job,store,dir,null,job,store,dir,set,writable,true,false,finally,if,blob,store,null,blob,store,close,and,cleanup,all,data
