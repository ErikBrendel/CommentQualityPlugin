# id;timestamp;commentText;codeText;commentWords;codeWords
ManuallyTriggeredScheduledExecutor -> public int numQueuedRunnables();1549365080;Gets the number of Runnables currently queued.;public int numQueuedRunnables() {_		synchronized (queuedRunnables) {_			return queuedRunnables.size()__		}_	};gets,the,number,of,runnables,currently,queued;public,int,num,queued,runnables,synchronized,queued,runnables,return,queued,runnables,size
ManuallyTriggeredScheduledExecutor -> public int numQueuedRunnables();1550005039;Gets the number of Runnables currently queued.;public int numQueuedRunnables() {_		synchronized (queuedRunnables) {_			return queuedRunnables.size()__		}_	};gets,the,number,of,runnables,currently,queued;public,int,num,queued,runnables,synchronized,queued,runnables,return,queued,runnables,size
ManuallyTriggeredScheduledExecutor -> public void triggerScheduledTasks();1516971011;Triggers all registered tasks.;public void triggerScheduledTasks() {_		final Iterator<ScheduledTask<?>> iterator = scheduledTasks.iterator()___		while (iterator.hasNext()) {_			final ScheduledTask<?> scheduledTask = iterator.next()___			scheduledTask.execute()___			if (!scheduledTask.isPeriodic) {_				iterator.remove()__			}_		}_	};triggers,all,registered,tasks;public,void,trigger,scheduled,tasks,final,iterator,scheduled,task,iterator,scheduled,tasks,iterator,while,iterator,has,next,final,scheduled,task,scheduled,task,iterator,next,scheduled,task,execute,if,scheduled,task,is,periodic,iterator,remove
ManuallyTriggeredScheduledExecutor -> public void triggerScheduledTasks();1518862304;Triggers all registered tasks.;public void triggerScheduledTasks() {_		final Iterator<ScheduledTask<?>> iterator = scheduledTasks.iterator()___		while (iterator.hasNext()) {_			final ScheduledTask<?> scheduledTask = iterator.next()___			scheduledTask.execute()___			if (!scheduledTask.isPeriodic) {_				iterator.remove()__			}_		}_	};triggers,all,registered,tasks;public,void,trigger,scheduled,tasks,final,iterator,scheduled,task,iterator,scheduled,tasks,iterator,while,iterator,has,next,final,scheduled,task,scheduled,task,iterator,next,scheduled,task,execute,if,scheduled,task,is,periodic,iterator,remove
ManuallyTriggeredScheduledExecutor -> public void triggerScheduledTasks();1549365080;Triggers all registered tasks.;public void triggerScheduledTasks() {_		final Iterator<ScheduledTask<?>> iterator = scheduledTasks.iterator()___		while (iterator.hasNext()) {_			final ScheduledTask<?> scheduledTask = iterator.next()___			scheduledTask.execute()___			if (!scheduledTask.isPeriodic) {_				iterator.remove()__			}_		}_	};triggers,all,registered,tasks;public,void,trigger,scheduled,tasks,final,iterator,scheduled,task,iterator,scheduled,tasks,iterator,while,iterator,has,next,final,scheduled,task,scheduled,task,iterator,next,scheduled,task,execute,if,scheduled,task,is,periodic,iterator,remove
ManuallyTriggeredScheduledExecutor -> public void triggerScheduledTasks();1550005039;Triggers all registered tasks.;public void triggerScheduledTasks() {_		final Iterator<ScheduledTask<?>> iterator = scheduledTasks.iterator()___		while (iterator.hasNext()) {_			final ScheduledTask<?> scheduledTask = iterator.next()___			scheduledTask.execute()___			if (!scheduledTask.isPeriodic) {_				iterator.remove()__			}_		}_	};triggers,all,registered,tasks;public,void,trigger,scheduled,tasks,final,iterator,scheduled,task,iterator,scheduled,tasks,iterator,while,iterator,has,next,final,scheduled,task,scheduled,task,iterator,next,scheduled,task,execute,if,scheduled,task,is,periodic,iterator,remove
ManuallyTriggeredScheduledExecutor -> public void trigger();1549365080;Triggers the next queued runnable and executes it synchronously._This method throws an exception if no Runnable is currently queued.;public void trigger() {_		final Runnable next___		synchronized (queuedRunnables) {_			next = queuedRunnables.removeFirst()__		}__		if (next != null) {_			CompletableFuture.runAsync(next, executorDelegate).join()__		} else {_			throw new IllegalStateException("No runnable available")__		}_	};triggers,the,next,queued,runnable,and,executes,it,synchronously,this,method,throws,an,exception,if,no,runnable,is,currently,queued;public,void,trigger,final,runnable,next,synchronized,queued,runnables,next,queued,runnables,remove,first,if,next,null,completable,future,run,async,next,executor,delegate,join,else,throw,new,illegal,state,exception,no,runnable,available
ManuallyTriggeredScheduledExecutor -> public void trigger();1550005039;Triggers the next queued runnable and executes it synchronously._This method throws an exception if no Runnable is currently queued.;public void trigger() {_		final Runnable next___		synchronized (queuedRunnables) {_			next = queuedRunnables.removeFirst()__		}__		if (next != null) {_			CompletableFuture.runAsync(next, executorDelegate).join()__		} else {_			throw new IllegalStateException("No runnable available")__		}_	};triggers,the,next,queued,runnable,and,executes,it,synchronously,this,method,throws,an,exception,if,no,runnable,is,currently,queued;public,void,trigger,final,runnable,next,synchronized,queued,runnables,next,queued,runnables,remove,first,if,next,null,completable,future,run,async,next,executor,delegate,join,else,throw,new,illegal,state,exception,no,runnable,available
